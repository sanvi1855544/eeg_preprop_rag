[["query_id\n\n\"\"\"Write an EEG preprocessing script\"\"\"\n# Write the corresponding MNE code below:\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n"], ["code_id\n\n\"\"\"Write an EEG preprocessing script\"\"\"\n# Write the corresponding MNE code below:\n\n# 1. Load the raw data\nraw = mne.io.read_raw_fif(raw_fname)\n\n# 2. Set the montage\nraw.set_montage(montage)\n\n# 3. Set the EEG reference\nraw.set_eeg_reference(ref_channels)\n\n# 4. Filter the data\nraw.filter(l_freq, h_freq, fir_design='firwin')\n\n# 5. Set the channel types\nraw.set_channel_types(mapping)\n\n# 6. Save the preprocessed data\nraw.save(raw_fname_out, overwrite=True)\n\n# 7. Plot the data\nraw.plot(duration=60, n_channels=32)\n\n# 8. Save the plot\nplt.savefig(plot_fname)\n\n# 9. Print the number of channels\nprint('Number of channels: %s' % raw.info['nchan'])\n\n# 10. Print the sampling frequency\nprint('Sampling frequency: %s' % raw.info['sfreq'])\n\n# 11. Print the number of samples\nprint('Number of samples: %s' % raw.n_times)\n\n# 12. Print the number of epochs\nprint('Number of epochs: %s' % len(epochs))\n\n# 13. Print the number of events\nprint('Number of events: %s' % len(events))\n\n# 14. Print the number of trials\nprint('Number of trials: %s' % len(epochs.events))\n\n# 15. Print the number of trials\nprint('Number of trials: %s' % len(epochs.events))\n\n# 16. Print the number of trials\nprint('Number of trials: %s' % len(epochs.events))\n\n# 17. Print the number of trials\nprint('Number of trials: %s' % len(epochs.events))\n\n# 18. Print the number of trials\nprint('Number of trials: %s' % len(epochs.events))\n\n# 19. Print the number of trials\nprint('Number of trials: %s'"], ["score\n\n\"\"\"Write an EEG preprocessing script\"\"\"\n# Write the corresponding MNE code below:\n\n# 1. Load the data\nraw = mne.io.read_raw_fif(raw_fname)\n\n# 2. Set the montage\nraw.set_montage(mne.channels.make_standard_montage('standard_1020'))\n\n# 3. Filter the data\nraw.filter(1, 30, method='iir')\n\n# 4. Set the reference\nraw.set_eeg_reference(projection=True)\n\n# 5. Save the data\nraw.save(raw_fname, overwrite=True)\n\n# 6. Compute the ERP\nevents = mne.find_events(raw, stim_channel='STI 014')\nevent_id = {'auditory/left': 1, 'auditory/right': 2, 'visual/left': 3, 'visual/right': 4, 'smiley': 5, 'buttonpress': 32}\nepochs = mne.Epochs(raw, events, event_id, tmin=-0.2, tmax=0.5, baseline=(None, 0), preload=True)\n\n# 7. Compute the ERP\nevoked = epochs['auditory/left'].average()\nevoked.plot()\n\n# 8. Compute the ERP\nevoked = epochs['auditory/right'].average()\nevoked.plot()\n\n# 9. Compute the ERP\nevoked = epochs['visual/left'].average()\nevoked.plot()\n\n# 10. Compute the ERP\nevoked = epochs['visual/right'].average()\nevoked.plot()\n\n# 11. Compute the ERP\nevoked = epochs['smiley'].average()\nevoked.plot()\n\n# 12. Compute the ERP\nevoked = epochs['buttonpress'].average()\nevoked.plot()\n\n# 13. Compute the ERP\nevoked = epochs['auditory/left'].average()\nevoked.plot()\n\n# 14. Compute the ERP\nevoked = epochs['auditory/right'].average()\nevoked.plot()\n\n# 15. Compute the ERP\nevoked = epochs['visual/left"]]