# Serve Shared Static Files

`class werkzeug.middleware.shared_data.SharedDataMiddleware(app, exports,
disallow=None, cache=True, cache_timeout=43200,
fallback_mimetype='application/octet-stream')`

    
A WSGI middleware which provides static content for development environments
or simple server setups. Its usage is quite simple:

    
    import os
    from werkzeug.middleware.shared_data import SharedDataMiddleware
    
    app = SharedDataMiddleware(app, {
        '/shared': os.path.join(os.path.dirname(__file__), 'shared')
    })
    
The contents of the folder `./shared` will now be available on
`http://example.com/shared/`. This is pretty useful during development because
a standalone media server is not required. Files can also be mounted on the
root folder and still continue to use the application because the shared data
middleware forwards all unhandled requests to the application, even if the
requests are below one of the shared folders.

If `pkg_resources` is available you can also tell the middleware to serve
files from package data:

    
    app = SharedDataMiddleware(app, {
        '/static': ('myapplication', 'static')
    })
    
This will then serve the `static` folder in the `myapplication` Python
package.

The optional `disallow` parameter can be a list of `fnmatch()` rules for files
that are not accessible from the web. If `cache` is set to `False` no caching
headers are sent.

Currently the middleware does not support non-ASCII filenames. If the encoding
on the file system happens to match the encoding of the URI it may work but
this could also be by accident. We strongly suggest using ASCII only file
names for static files.

The middleware will guess the mimetype using the Python `mimetype` module. If
it’s unable to figure out the charset it will fall back to
`fallback_mimetype`.

Parameters

    
  * app (WSGIApplication) – the application to wrap. If you don’t want to wrap an application you can pass it `NotFound`.
  * exports (Union[Dict[str, Union[str, Tuple[str, str]]], Iterable[Tuple[str, Union[str, Tuple[str, str]]]]]) – a list or dict of exported files and folders.
  * disallow (None) – a list of `fnmatch()` rules.
  * cache (bool) – enable or disable caching headers.
  * cache_timeout (int) – the cache timeout in seconds for the headers.
  * fallback_mimetype (str) – The fallback mimetype for unknown files.

Return type

    
None

Changelog

Changed in version 1.0: The default `fallback_mimetype` is `application/octet-
stream`. If a filename looks like a text mimetype, the `utf-8` charset is
added to it.

New in version 0.6: Added `fallback_mimetype`.

Changed in version 0.5: Added `cache_timeout`.

`is_allowed(filename)`

    
Subclasses can override this method to disallow the access to certain files.
However by providing `disallow` in the constructor this method is overwritten.

Parameters

    
filename (str) –

Return type

    
bool

© 2007–2021 Pallets  
Licensed under the BSD 3-clause License.  
https://werkzeug.palletsprojects.com/en/2.0.x/middleware/shared_data/

