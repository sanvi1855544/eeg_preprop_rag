#  pygame.cdrom

    
pygame module for audio cdrom control

The cdrom module manages the `CD` and `DVD` drives on a computer. It can also
control the playback of audio CDs. This module needs to be initialized before
it can do anything. Each `CD` object you create represents a cdrom drive and
must also be initialized individually before it can do most things.

pygame.cdrom.init()

    
initialize the cdrom module

init() -> None

Initialize the cdrom module. This will scan the system for all `CD` devices.
The module must be initialized before any other functions will work. This
automatically happens when you call `pygame.init()`.

It is safe to call this function more than once.

pygame.cdrom.quit()

    
uninitialize the cdrom module

quit() -> None

Uninitialize the cdrom module. After you call this any existing `CD` objects
will no longer work.

It is safe to call this function more than once.

pygame.cdrom.get_init()

    
true if the cdrom module is initialized

get_init() -> bool

Test if the cdrom module is initialized or not. This is different than the
`CD.init()` since each drive must also be initialized individually.

pygame.cdrom.get_count()

    
number of cd drives on the system

get_count() -> count

Return the number of cd drives on the system. When you create `CD` objects you
need to pass an integer id that must be lower than this count. The count will
be 0 if there are no drives on the system.

pygame.cdrom.CD

    
class to manage a cdrom drive

CD(id) -> CD

You can create a `CD` object for each cdrom on the system. Use
`pygame.cdrom.get_count()` to determine how many drives actually exist. The id
argument is an integer of the drive, starting at zero.

The `CD` object is not initialized, you can only call `CD.get_id()` and
`CD.get_name()` on an uninitialized drive.

It is safe to create multiple `CD` objects for the same drive, they will all
cooperate normally.

init()

    
initialize a cdrom drive for use

init() -> None

Initialize the cdrom drive for use. The drive must be initialized for most
`CD` methods to work. Even if the rest of pygame has been initialized.

There may be a brief pause while the drive is initialized. Avoid `CD.init()`
if the program should not stop for a second or two.

quit()

    
uninitialize a cdrom drive for use

quit() -> None

Uninitialize a drive for use. Call this when your program will not be
accessing the drive for awhile.

get_init()

    
true if this cd device initialized

get_init() -> bool

Test if this `CDROM` device is initialized. This is different than the
`pygame.cdrom.init()` since each drive must also be initialized individually.

play()

    
start playing audio

play(track, start=None, end=None) -> None

Playback audio from an audio cdrom in the drive. Besides the track number
argument, you can also pass a starting and ending time for playback. The start
and end time are in seconds, and can limit the section of an audio track
played.

If you pass a start time but no end, the audio will play to the end of the
track. If you pass a start time and 'None' for the end time, the audio will
play to the end of the entire disc.

See the `CD.get_numtracks()` and `CD.get_track_audio()` to find tracks to
playback.

Note, track 0 is the first track on the `CD`. Track numbers start at zero.

stop()

    
stop audio playback

stop() -> None

Stops playback of audio from the cdrom. This will also lose the current
playback position. This method does nothing if the drive isn't already playing
audio.

pause()

    
temporarily stop audio playback

pause() -> None

Temporarily stop audio playback on the `CD`. The playback can be resumed at
the same point with the `CD.resume()` method. If the `CD` is not playing this
method does nothing.

Note, track 0 is the first track on the `CD`. Track numbers start at zero.

resume()

    
unpause audio playback

resume() -> None

Unpause a paused `CD`. If the `CD` is not paused or already playing, this
method does nothing.

eject()

    
eject or open the cdrom drive

eject() -> None

This will open the cdrom drive and eject the cdrom. If the drive is playing or
paused it will be stopped.

get_id()

    
the index of the cdrom drive

get_id() -> id

Returns the integer id that was used to create the `CD` instance. This method
can work on an uninitialized `CD`.

get_name()

    
the system name of the cdrom drive

get_name() -> name

Return the string name of the drive. This is the system name used to represent
the drive. It is often the drive letter or device name. This method can work
on an uninitialized `CD`.

get_busy()

    
true if the drive is playing audio

get_busy() -> bool

Returns True if the drive busy playing back audio.

get_paused()

    
true if the drive is paused

get_paused() -> bool

Returns True if the drive is currently paused.

get_current()

    
the current audio playback position

get_current() -> track, seconds

Returns both the current track and time of that track. This method works when
the drive is either playing or paused.

Note, track 0 is the first track on the `CD`. Track numbers start at zero.

get_empty()

    
False if a cdrom is in the drive

get_empty() -> bool

Return False if there is a cdrom currently in the drive. If the drive is empty
this will return True.

get_numtracks()

    
the number of tracks on the cdrom

get_numtracks() -> count

Return the number of tracks on the cdrom in the drive. This will return zero
of the drive is empty or has no tracks.

get_track_audio()

    
true if the cdrom track has audio data

get_track_audio(track) -> bool

Determine if a track on a cdrom contains audio data. You can also call
`CD.num_tracks()` and `CD.get_all()` to determine more information about the
cdrom.

Note, track 0 is the first track on the `CD`. Track numbers start at zero.

get_all()

    
get all track information

get_all() -> [(audio, start, end, length), ...]

Return a list with information for every track on the cdrom. The information
consists of a tuple with four values. The audio value is True if the track
contains audio data. The start, end, and length values are floating point
numbers in seconds. Start and end represent absolute times on the entire disc.

get_track_start()

    
start time of a cdrom track

get_track_start(track) -> seconds

Return the absolute time in seconds where at start of the cdrom track.

Note, track 0 is the first track on the `CD`. Track numbers start at zero.

get_track_length()

    
length of a cdrom track

get_track_length(track) -> seconds

Return a floating point value in seconds of the length of the cdrom track.

Note, track 0 is the first track on the `CD`. Track numbers start at zero.

Â© Pygame Developers.  
Licensed under the GNU LGPL License version 2.1.  
https://www.pygame.org/docs/ref/cdrom.html

  *[ISP]: Internet Service Provider

