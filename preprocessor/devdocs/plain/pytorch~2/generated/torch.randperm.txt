# torch.randperm

`torch.randperm(n, *, generator=None, out=None, dtype=torch.int64,
layout=torch.strided, device=None, requires_grad=False, pin_memory=False) →
Tensor`

    
Returns a random permutation of integers from `0` to `n - 1`.

Parameters

    
n (int) – the upper bound (exclusive)

Keyword Arguments

    
  * generator (`torch.Generator`, optional) – a pseudorandom number generator for sampling
  * out (Tensor, optional) – the output tensor.
  * dtype (`torch.dtype`, optional) – the desired data type of returned tensor. Default: `torch.int64`.
  * layout (`torch.layout`, optional) – the desired layout of returned Tensor. Default: `torch.strided`.
  * device (`torch.device`, optional) – the desired device of returned tensor. Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`). `device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.
  * requires_grad (bool, optional) – If autograd should record operations on the returned tensor. Default: `False`.
  * pin_memory (bool, optional) – If set, returned tensor would be allocated in the pinned memory. Works only for CPU tensors. Default: `False`.

Example:

    
    >>> torch.randperm(4)
    tensor([2, 1, 0, 3])
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.randperm.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

