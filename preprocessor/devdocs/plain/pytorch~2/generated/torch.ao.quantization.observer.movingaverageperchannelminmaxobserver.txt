# MovingAveragePerChannelMinMaxObserver

`class
torch.ao.quantization.observer.MovingAveragePerChannelMinMaxObserver(averaging_constant=0.01,
ch_axis=0, dtype=torch.quint8, qscheme=torch.per_channel_affine,
reduce_range=False, quant_min=None, quant_max=None,
eps=1.1920928955078125e-07, **kwargs)` [source]

    
Observer module for computing the quantization parameters based on the running
per channel min and max values.

This observer uses the tensor min/max statistics to compute the per channel
quantization parameters. The module records the running minimum and maximum of
incoming tensors, and uses this statistic to compute the quantization
parameters.

Parameters

    
  * averaging_constant – Averaging constant for min/max.
  * ch_axis – Channel axis
  * dtype – Quantized data type
  * qscheme – Quantization scheme to be used
  * reduce_range – Reduces the range of the quantized data type by 1 bit
  * quant_min – Minimum quantization value. If unspecified, it will follow the 8-bit setup.
  * quant_max – Maximum quantization value. If unspecified, it will follow the 8-bit setup.
  * eps (Tensor) – Epsilon value for float32, Defaults to `torch.finfo(torch.float32).eps`.

The quantization parameters are computed the same way as in
`MovingAverageMinMaxObserver`, with the difference that the running min/max
values are stored per channel. Scales and zero points are thus computed per
channel as well.

Note

If the running minimum equals to the running maximum, the scales and
zero_points are set to 1.0 and 0.

© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.ao.quantization.observer.MovingAveragePerChannelMinMaxObserver.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

