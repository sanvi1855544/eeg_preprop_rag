# LazyInstanceNorm3d

`class torch.nn.LazyInstanceNorm3d(eps=1e-05, momentum=0.1, affine=True,
track_running_stats=True, device=None, dtype=None)` [source]

    
A `torch.nn.InstanceNorm3d` module with lazy initialization of the
`num_features` argument of the `InstanceNorm3d` that is inferred from the
`input.size(1)`. The attributes that will be lazily initialized are `weight`,
`bias`, `running_mean` and `running_var`.

Check the `torch.nn.modules.lazy.LazyModuleMixin` for further documentation on
lazy modules and their limitations.

Parameters

    
  * num_features – CC from an expected input of size (N,C,D,H,W)(N, C, D, H, W) or (C,D,H,W)(C, D, H, W)
  * eps (float) – a value added to the denominator for numerical stability. Default: 1e-5
  * momentum (float) – the value used for the running_mean and running_var computation. Default: 0.1
  * affine (bool) – a boolean value that when set to `True`, this module has learnable affine parameters, initialized the same way as done for batch normalization. Default: `False`.
  * track_running_stats (bool) – a boolean value that when set to `True`, this module tracks the running mean and variance, and when set to `False`, this module does not track such statistics and always uses batch statistics in both training and eval modes. Default: `False`

Shape:

    
  * Input: (N,C,D,H,W)(N, C, D, H, W) or (C,D,H,W)(C, D, H, W)
  * Output: (N,C,D,H,W)(N, C, D, H, W) or (C,D,H,W)(C, D, H, W) (same shape as input)

`cls_to_become`

    
alias of `InstanceNorm3d`

© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.nn.LazyInstanceNorm3d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

