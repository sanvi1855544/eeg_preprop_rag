# PoissonNLLLoss

`class torch.nn.PoissonNLLLoss(log_input=True, full=False, size_average=None,
eps=1e-08, reduce=None, reduction='mean')` [source]

    
Negative log likelihood loss with Poisson distribution of target.

The loss can be described as:

target∼Poisson(input)loss(input,target)=input−target∗log⁡(input)+log⁡(target!)\text{target}
\sim \mathrm{Poisson}(\text{input}) \text{loss}(\text{input}, \text{target}) =
\text{input} - \text{target} * \log(\text{input}) + \log(\text{target!})

The last term can be omitted or approximated with Stirling formula. The
approximation is used for target values more than 1. For targets less or equal
to 1 zeros are added to the loss.

Parameters

    
  * log_input (bool, optional) – if `True` the loss is computed as exp⁡(input)−target∗input\exp(\text{input}) - \text{target}*\text{input}, if `False` the loss is input−target∗log⁡(input+eps)\text{input} - \text{target}*\log(\text{input}+\text{eps}).
  * full (bool, optional) – 
whether to compute full loss, i. e. to add the Stirling approximation term

target∗log⁡(target)−target+0.5∗log⁡(2πtarget).\text{target}*\log(\text{target})
- \text{target} + 0.5 * \log(2\pi\text{target}).

  * size_average (bool, optional) – Deprecated (see `reduction`). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field `size_average` is set to `False`, the losses are instead summed for each minibatch. Ignored when `reduce` is `False`. Default: `True`
  * eps (float, optional) – Small value to avoid evaluation of log⁡(0)\log(0) when `log_input = False`. Default: 1e-8
  * reduce (bool, optional) – Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`
  * reduction (str, optional) – Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`

Examples:

    
    >>> loss = nn.PoissonNLLLoss()
    >>> log_input = torch.randn(5, 2, requires_grad=True)
    >>> target = torch.randn(5, 2)
    >>> output = loss(log_input, target)
    >>> output.backward()
    
Shape:

    
  * Input: (∗)(*), where ∗* means any number of dimensions.
  * Target: (∗)(*), same shape as the input.
  * Output: scalar by default. If `reduction` is `'none'`, then (∗)(*), the same shape as the input.

© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.nn.PoissonNLLLoss.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

