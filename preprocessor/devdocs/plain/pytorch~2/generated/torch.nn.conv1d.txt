# Conv1d

`class torch.nn.Conv1d(in_channels, out_channels, kernel_size, stride=1,
padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', device=None,
dtype=None)` [source]

    
Applies a 1D convolution over an input signal composed of several input
planes.

In the simplest case, the output value of the layer with input size
(N,Cin,L)(N, C_{\text{in}}, L) and output (N,Cout,Lout)(N, C_{\text{out}},
L_{\text{out}}) can be precisely described as:

out(Ni,Coutj)=bias(Coutj)+∑k=0Cin−1weight(Coutj,k)⋆input(Ni,k)\text{out}(N_i,
C_{\text{out}_j}) = \text{bias}(C_{\text{out}_j}) + \sum_{k = 0}^{C_{in} - 1}
\text{weight}(C_{\text{out}_j}, k) \star \text{input}(N_i, k)

where ⋆\star is the valid cross-correlation operator, NN is a batch size, CC
denotes a number of channels, LL is a length of signal sequence.

This module supports TensorFloat32.

On certain ROCm devices, when using float16 inputs this module will use
different precision for backward.

  * `stride` controls the stride for the cross-correlation, a single number or a one-element tuple.
  * `padding` controls the amount of padding applied to the input. It can be either a string {‘valid’, ‘same’} or a tuple of ints giving the amount of implicit padding applied on both sides.
  * `dilation` controls the spacing between the kernel points; also known as the à trous algorithm. It is harder to describe, but this link has a nice visualization of what `dilation` does.
  * `groups` controls the connections between inputs and outputs. `in_channels` and `out_channels` must both be divisible by `groups`. For example,
    * At groups=1, all inputs are convolved to all outputs.
    * At groups=2, the operation becomes equivalent to having two conv layers side by side, each seeing half the input channels and producing half the output channels, and both subsequently concatenated.
    * At groups= `in_channels`, each input channel is convolved with its own set of filters (of size out_channelsin_channels\frac{\text{out\\_channels}}{\text{in\\_channels}}).

Note

When `groups == in_channels` and `out_channels == K * in_channels`, where `K`
is a positive integer, this operation is also known as a “depthwise
convolution”.

In other words, for an input of size (N,Cin,Lin)(N, C_{in}, L_{in}), a
depthwise convolution with a depthwise multiplier `K` can be performed with
the arguments (Cin=Cin,Cout=Cin×K,...,groups=Cin)(C_\text{in}=C_\text{in},
C_\text{out}=C_\text{in} \times \text{K}, ..., \text{groups}=C_\text{in}).

Note

In some circumstances when given tensors on a CUDA device and using CuDNN,
this operator may select a nondeterministic algorithm to increase performance.
If this is undesirable, you can try to make the operation deterministic
(potentially at a performance cost) by setting
`torch.backends.cudnn.deterministic = True`. See Reproducibility for more
information.

Note

`padding='valid'` is the same as no padding. `padding='same'` pads the input
so the output has the shape as the input. However, this mode doesn’t support
any stride values other than 1.

Note

This module supports complex data types i.e. `complex32, complex64,
complex128`.

Parameters

    
  * in_channels (int) – Number of channels in the input image
  * out_channels (int) – Number of channels produced by the convolution
  * kernel_size (int or tuple) – Size of the convolving kernel
  * stride (int or tuple, optional) – Stride of the convolution. Default: 1
  * padding (int, tuple or str, optional) – Padding added to both sides of the input. Default: 0
  * padding_mode (str, optional) – `'zeros'`, `'reflect'`, `'replicate'` or `'circular'`. Default: `'zeros'`
  * dilation (int or tuple, optional) – Spacing between kernel elements. Default: 1
  * groups (int, optional) – Number of blocked connections from input channels to output channels. Default: 1
  * bias (bool, optional) – If `True`, adds a learnable bias to the output. Default: `True`

Shape:

    
  * Input: (N,Cin,Lin)(N, C_{in}, L_{in}) or (Cin,Lin)(C_{in}, L_{in})
  * Output: (N,Cout,Lout)(N, C_{out}, L_{out}) or (Cout,Lout)(C_{out}, L_{out}), where
Lout=⌊Lin+2×padding−dilation×(kernel_size−1)−1stride+1⌋L_{out} =
\left\lfloor\frac{L_{in} + 2 \times \text{padding} - \text{dilation} \times
(\text{kernel\\_size} - 1) - 1}{\text{stride}} + 1\right\rfloor

Variables

    
  * weight (Tensor) – the learnable weights of the module of shape (out_channels,in_channelsgroups,kernel_size)(\text{out\\_channels}, \frac{\text{in\\_channels}}{\text{groups}}, \text{kernel\\_size}). The values of these weights are sampled from U(−k,k)\mathcal{U}(-\sqrt{k}, \sqrt{k}) where k=groupsCin∗kernel_sizek = \frac{groups}{C_\text{in} * \text{kernel\\_size}}
  * bias (Tensor) – the learnable bias of the module of shape (out_channels). If `bias` is `True`, then the values of these weights are sampled from U(−k,k)\mathcal{U}(-\sqrt{k}, \sqrt{k}) where k=groupsCin∗kernel_sizek = \frac{groups}{C_\text{in} * \text{kernel\\_size}}

Examples:

    
    >>> m = nn.Conv1d(16, 33, 3, stride=2)
    >>> input = torch.randn(20, 16, 50)
    >>> output = m(input)
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.nn.Conv1d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

