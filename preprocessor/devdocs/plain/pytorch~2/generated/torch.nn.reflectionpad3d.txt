# ReflectionPad3d

`class torch.nn.ReflectionPad3d(padding)` [source]

    
Pads the input tensor using the reflection of the input boundary.

For `N`-dimensional padding, use `torch.nn.functional.pad()`.

Parameters

    
padding (int, tuple) – the size of the padding. If is `int`, uses the same
padding in all boundaries. If a 6-`tuple`, uses
(padding_left\text{padding\\_left}, padding_right\text{padding\\_right},
padding_top\text{padding\\_top}, padding_bottom\text{padding\\_bottom},
padding_front\text{padding\\_front}, padding_back\text{padding\\_back})

Shape:

    
  * Input: (N,C,Din,Hin,Win)(N, C, D_{in}, H_{in}, W_{in}) or (C,Din,Hin,Win)(C, D_{in}, H_{in}, W_{in}).
  * Output: (N,C,Dout,Hout,Wout)(N, C, D_{out}, H_{out}, W_{out}) or (C,Dout,Hout,Wout)(C, D_{out}, H_{out}, W_{out}), where
Dout=Din+padding_front+padding_backD_{out} = D_{in} + \text{padding\\_front} +
\text{padding\\_back}

Hout=Hin+padding_top+padding_bottomH_{out} = H_{in} + \text{padding\\_top} +
\text{padding\\_bottom}

Wout=Win+padding_left+padding_rightW_{out} = W_{in} + \text{padding\\_left} +
\text{padding\\_right}

Examples:

    
    >>> m = nn.ReflectionPad3d(1)
    >>> input = torch.arange(8, dtype=torch.float).reshape(1, 1, 2, 2, 2)
    >>> m(input)
    tensor([[[[[7., 6., 7., 6.],
               [5., 4., 5., 4.],
               [7., 6., 7., 6.],
               [5., 4., 5., 4.]],
              [[3., 2., 3., 2.],
               [1., 0., 1., 0.],
               [3., 2., 3., 2.],
               [1., 0., 1., 0.]],
              [[7., 6., 7., 6.],
               [5., 4., 5., 4.],
               [7., 6., 7., 6.],
               [5., 4., 5., 4.]],
              [[3., 2., 3., 2.],
               [1., 0., 1., 0.],
               [3., 2., 3., 2.],
               [1., 0., 1., 0.]]]]])
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.nn.ReflectionPad3d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

