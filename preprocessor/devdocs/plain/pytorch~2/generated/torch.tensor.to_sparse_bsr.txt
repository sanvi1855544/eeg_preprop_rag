# torch.Tensor.to_sparse_bsr

`Tensor.to_sparse_bsr(blocksize, dense_dim) → Tensor`

    
Convert a tensor to a block sparse row (BSR) storage format of given
blocksize. If the `self` is strided, then the number of dense dimensions could
be specified, and a hybrid BSR tensor will be created, with `dense_dim` dense
dimensions and `self.dim() - 2 - dense_dim` batch dimension.

Parameters

    
  * blocksize (list, tuple, `torch.Size`, optional) – Block size of the resulting BSR tensor. A block size must be a tuple of length two such that its items evenly divide the two sparse dimensions.
  * dense_dim (int, optional) – Number of dense dimensions of the resulting BSR tensor. This argument should be used only if `self` is a strided tensor, and must be a value between 0 and dimension of `self` tensor minus two.

Example:

    
    >>> dense = torch.randn(10, 10)
    >>> sparse = dense.to_sparse_csr()
    >>> sparse_bsr = sparse.to_sparse_bsr((5, 5))
    >>> sparse_bsr.col_indices()
    tensor([0, 1, 0, 1])
    
    >>> dense = torch.zeros(4, 3, 1)
    >>> dense[0:2, 0] = dense[0:2, 2] = dense[2:4, 1] = 1
    >>> dense.to_sparse_bsr((2, 1), 1)
    tensor(crow_indices=tensor([0, 2, 3]),
           col_indices=tensor([0, 2, 1]),
           values=tensor([[[[1.]],
    
                           [[1.]]],
    
    
                          [[[1.]],
    
                           [[1.]]],
    
    
                          [[[1.]],
    
                           [[1.]]]]), size=(4, 3, 1), nnz=3,
           layout=torch.sparse_bsr)
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.Tensor.to_sparse_bsr.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

