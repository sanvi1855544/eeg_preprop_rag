# torch.signal.windows.general_hamming

`torch.signal.windows.general_hamming(M, *, alpha=0.54, sym=True, dtype=None,
layout=torch.strided, device=None, requires_grad=False)` [source]

    
Computes the general Hamming window.

The general Hamming window is defined as follows:

wn=α−(1−α)cos⁡(2πnM−1)w_n = \alpha - (1 - \alpha) \cos{ \left( \frac{2 \pi
n}{M-1} \right)}

The window is normalized to 1 (maximum value is 1). However, the 1 doesn’t
appear if `M` is even and `sym` is `True`.

Parameters

    
M (int) – the length of the window. In other words, the number of points of
the returned window.

Keyword Arguments

    
  * alpha (float, optional) – the window coefficient. Default: 0.54.
  * sym (bool, optional) – If `False`, returns a periodic window suitable for use in spectral analysis. If `True`, returns a symmetric window suitable for use in filter design. Default: `True`.
  * dtype (`torch.dtype`, optional) – the desired data type of returned tensor. Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).
  * layout (`torch.layout`, optional) – the desired layout of returned Tensor. Default: `torch.strided`.
  * device (`torch.device`, optional) – the desired device of returned tensor. Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`). `device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.
  * requires_grad (bool, optional) – If autograd should record operations on the returned tensor. Default: `False`.

Return type

    
Tensor

Examples:

    
    >>> # Generates a symmetric Hamming window with the general Hamming window.
    >>> torch.signal.windows.general_hamming(10, sym=True)
    tensor([0.0800, 0.1876, 0.4601, 0.7700, 0.9723, 0.9723, 0.7700, 0.4601, 0.1876, 0.0800])
    
    >>> # Generates a periodic Hann window with the general Hamming window.
    >>> torch.signal.windows.general_hamming(10, alpha=0.5, sym=False)
    tensor([0.0000, 0.0955, 0.3455, 0.6545, 0.9045, 1.0000, 0.9045, 0.6545, 0.3455, 0.0955])
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.signal.windows.general_hamming.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

