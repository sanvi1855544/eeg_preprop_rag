# MaxPool1d

`class torch.nn.MaxPool1d(kernel_size, stride=None, padding=0, dilation=1,
return_indices=False, ceil_mode=False)` [source]

    
Applies a 1D max pooling over an input signal composed of several input
planes.

In the simplest case, the output value of the layer with input size (N,C,L)(N,
C, L) and output (N,C,Lout)(N, C, L_{out}) can be precisely described as:

out(Ni,Cj,k)=max⁡m=0,…,kernel_size−1input(Ni,Cj,stride×k+m)out(N_i, C_j, k) =
\max_{m=0, \ldots, \text{kernel\\_size} - 1} input(N_i, C_j, stride \times k +
m)

If `padding` is non-zero, then the input is implicitly padded with negative
infinity on both sides for `padding` number of points. `dilation` is the
stride between the elements within the sliding window. This link has a nice
visualization of the pooling parameters.

Note

When ceil_mode=True, sliding windows are allowed to go off-bounds if they
start within the left padding or the input. Sliding windows that would start
in the right padded region are ignored.

Parameters

    
  * kernel_size (Union[int, Tuple[int]]) – The size of the sliding window, must be > 0.
  * stride (Union[int, Tuple[int]]) – The stride of the sliding window, must be > 0\. Default value is `kernel_size`.
  * padding (Union[int, Tuple[int]]) – Implicit negative infinity padding to be added on both sides, must be >= 0 and <= kernel_size / 2.
  * dilation (Union[int, Tuple[int]]) – The stride between elements within a sliding window, must be > 0.
  * return_indices (bool) – If `True`, will return the argmax along with the max values. Useful for `torch.nn.MaxUnpool1d` later
  * ceil_mode (bool) – If `True`, will use `ceil` instead of `floor` to compute the output shape. This ensures that every element in the input tensor is covered by a sliding window.

Shape:

    
  * Input: (N,C,Lin)(N, C, L_{in}) or (C,Lin)(C, L_{in}).
  * Output: (N,C,Lout)(N, C, L_{out}) or (C,Lout)(C, L_{out}), where
Lout=⌊Lin+2×padding−dilation×(kernel_size−1)−1stride+1⌋L_{out} = \left\lfloor
\frac{L_{in} + 2 \times \text{padding} - \text{dilation} \times
(\text{kernel\\_size} - 1) - 1}{\text{stride}} + 1\right\rfloor

Examples:

    
    >>> # pool of size=3, stride=2
    >>> m = nn.MaxPool1d(3, stride=2)
    >>> input = torch.randn(20, 16, 50)
    >>> output = m(input)
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.nn.MaxPool1d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

