# upsample

`class torch.ao.nn.quantized.functional.upsample(input, size=None,
scale_factor=None, mode='nearest', align_corners=None)` [source]

    
Upsamples the input to either the given `size` or the given `scale_factor`

Warning

This function is deprecated in favor of
`torch.ao.nn.quantized.functional.interpolate()`. This is equivalent with
`nn.quantized.functional.interpolate(...)`.

See `torch.nn.functional.interpolate()` for implementation details.

The input dimensions are interpreted in the form: `mini-batch x channels x
[optional depth] x [optional height] x width`.

Note

The input quantization parameters propagate to the output.

Note

Only 2D input is supported for quantized inputs

Note

Only the following modes are supported for the quantized inputs:

  * `bilinear`
  * `nearest`

Parameters

    
  * input (Tensor) – quantized input tensor
  * size (int or Tuple[int] or Tuple[int, int] or Tuple[int, int, int]) – output spatial size.
  * scale_factor (float or Tuple[float]) – multiplier for spatial size. Has to be an integer.
  * mode (str) – algorithm used for upsampling: `'nearest'` | `'bilinear'`
  * align_corners (bool, optional) – Geometrically, we consider the pixels of the input and output as squares rather than points. If set to `True`, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels. If set to `False`, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when `scale_factor` is kept the same. This only has an effect when `mode` is `'bilinear'`. Default: `False`

Warning

With `align_corners = True`, the linearly interpolating modes (`bilinear`)
don’t proportionally align the output and input pixels, and thus the output
values can depend on the input size. This was the default behavior for these
modes up to version 0.3.1. Since then, the default behavior is `align_corners
= False`. See `Upsample` for concrete examples on how this affects the
outputs.

© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.ao.nn.quantized.functional.upsample.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

