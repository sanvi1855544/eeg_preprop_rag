# torch.addmm

`torch.addmm(input, mat1, mat2, *, beta=1, alpha=1, out=None) → Tensor`

    
Performs a matrix multiplication of the matrices `mat1` and `mat2`. The matrix
`input` is added to the final result.

If `mat1` is a (n×m)(n \times m) tensor, `mat2` is a (m×p)(m \times p) tensor,
then `input` must be broadcastable with a (n×p)(n \times p) tensor and `out`
will be a (n×p)(n \times p) tensor.

`alpha` and `beta` are scaling factors on matrix-vector product between `mat1`
and `mat2` and the added matrix `input` respectively.

out=β input+α(mat1i@mat2i)\text{out} = \beta\ \text{input} + \alpha\
(\text{mat1}_i \mathbin{@} \text{mat2}_i)

If `beta` is 0, then `input` will be ignored, and `nan` and `inf` in it will
not be propagated.

For inputs of type `FloatTensor` or `DoubleTensor`, arguments `beta` and
`alpha` must be real numbers, otherwise they should be integers.

This operation has support for arguments with sparse layouts. If `input` is
sparse the result will have the same layout and if `out` is provided it must
have the same layout as `input`.

Warning

Sparse support is a beta feature and some layout(s)/dtype/device combinations
may not be supported, or may not have autograd support. If you notice missing
functionality please open a feature request.

This operator supports TensorFloat32.

On certain ROCm devices, when using float16 inputs this module will use
different precision for backward.

Parameters

    
  * input (Tensor) – matrix to be added
  * mat1 (Tensor) – the first matrix to be matrix multiplied
  * mat2 (Tensor) – the second matrix to be matrix multiplied

Keyword Arguments

    
  * beta (Number, optional) – multiplier for `input` (β\beta)
  * alpha (Number, optional) – multiplier for mat1@mat2mat1 @ mat2 (α\alpha)
  * out (Tensor, optional) – the output tensor.

Example:

    
    >>> M = torch.randn(2, 3)
    >>> mat1 = torch.randn(2, 3)
    >>> mat2 = torch.randn(3, 3)
    >>> torch.addmm(M, mat1, mat2)
    tensor([[-4.8716,  1.4671, -1.3746],
            [ 0.7573, -3.9555, -2.8681]])
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.addmm.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

