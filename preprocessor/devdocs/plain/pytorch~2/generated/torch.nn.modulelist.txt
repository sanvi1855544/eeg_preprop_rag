# ModuleList

`class torch.nn.ModuleList(modules=None)` [source]

    
Holds submodules in a list.

`ModuleList` can be indexed like a regular Python list, but modules it
contains are properly registered, and will be visible by all `Module` methods.

Parameters

    
modules (iterable, optional) – an iterable of modules to add

Example:

    
    class MyModule(nn.Module):
        def __init__(self):
            super().__init__()
            self.linears = nn.ModuleList([nn.Linear(10, 10) for i in range(10)])
    
        def forward(self, x):
            # ModuleList can act as an iterable, or be indexed using ints
            for i, l in enumerate(self.linears):
                x = self.linears[i // 2](x) + l(x)
            return x
    
`append(module)` [source]

    
Appends a given module to the end of the list.

Parameters

    
module (nn.Module) – module to append

Return type

    
ModuleList

`extend(modules)` [source]

    
Appends modules from a Python iterable to the end of the list.

Parameters

    
modules (iterable) – iterable of modules to append

Return type

    
ModuleList

`insert(index, module)` [source]

    
Insert a given module before a given index in the list.

Parameters

    
  * index (int) – index to insert.
  * module (nn.Module) – module to insert

© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.nn.ModuleList.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

