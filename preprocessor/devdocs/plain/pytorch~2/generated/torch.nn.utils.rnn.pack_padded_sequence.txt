# torch.nn.utils.rnn.pack_padded_sequence

`torch.nn.utils.rnn.pack_padded_sequence(input, lengths, batch_first=False,
enforce_sorted=True)` [source]

    
Packs a Tensor containing padded sequences of variable length.

`input` can be of size `T x B x *` where `T` is the length of the longest
sequence (equal to `lengths[0]`), `B` is the batch size, and `*` is any number
of dimensions (including 0). If `batch_first` is `True`, `B x T x *` `input`
is expected.

For unsorted sequences, use `enforce_sorted = False`. If `enforce_sorted` is
`True`, the sequences should be sorted by length in a decreasing order, i.e.
`input[:,0]` should be the longest sequence, and `input[:,B-1]` the shortest
one. `enforce_sorted = True` is only necessary for ONNX export.

Note

This function accepts any input that has at least two dimensions. You can
apply it to pack the labels, and use the output of the RNN with them to
compute the loss directly. A Tensor can be retrieved from a `PackedSequence`
object by accessing its `.data` attribute.

Parameters

    
  * input (Tensor) – padded batch of variable length sequences.
  * lengths (Tensor or list(int)) – list of sequence lengths of each batch element (must be on the CPU if provided as a tensor).
  * batch_first (bool, optional) – if `True`, the input is expected in `B x T x *` format.
  * enforce_sorted (bool, optional) – if `True`, the input is expected to contain sequences sorted by length in a decreasing order. If `False`, the input will get sorted unconditionally. Default: `True`.

Returns

    
a `PackedSequence` object

Return type

    
PackedSequence

© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.nn.utils.rnn.pack_padded_sequence.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

