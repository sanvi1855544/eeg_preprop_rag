# torch.empty_like

`torch.empty_like(input, *, dtype=None, layout=None, device=None,
requires_grad=False, memory_format=torch.preserve_format) → Tensor`

    
Returns an uninitialized tensor with the same size as `input`.
`torch.empty_like(input)` is equivalent to `torch.empty(input.size(),
dtype=input.dtype, layout=input.layout, device=input.device)`.

Note

If `torch.use_deterministic_algorithms()` is set to `True`, the output tensor
is initialized to prevent any possible nondeterministic behavior from using
the data as an input to an operation. Floating point and complex tensors are
filled with NaN, and integer tensors are filled with the maximum value.

Parameters

    
input (Tensor) – the size of `input` will determine size of the output tensor.

Keyword Arguments

    
  * dtype (`torch.dtype`, optional) – the desired data type of returned Tensor. Default: if `None`, defaults to the dtype of `input`.
  * layout (`torch.layout`, optional) – the desired layout of returned tensor. Default: if `None`, defaults to the layout of `input`.
  * device (`torch.device`, optional) – the desired device of returned tensor. Default: if `None`, defaults to the device of `input`.
  * requires_grad (bool, optional) – If autograd should record operations on the returned tensor. Default: `False`.
  * memory_format (`torch.memory_format`, optional) – the desired memory format of returned Tensor. Default: `torch.preserve_format`.

Example:

    
    >>> a=torch.empty((2,3), dtype=torch.int32, device = 'cuda')
    >>> torch.empty_like(a)
    tensor([[0, 0, 0],
            [0, 0, 0]], device='cuda:0', dtype=torch.int32)
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.empty_like.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

