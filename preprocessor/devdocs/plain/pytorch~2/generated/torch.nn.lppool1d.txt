# LPPool1d

`class torch.nn.LPPool1d(norm_type, kernel_size, stride=None,
ceil_mode=False)` [source]

    
Applies a 1D power-average pooling over an input signal composed of several
input planes.

On each window, the function computed is:

f(X)=∑x∈Xxppf(X) = \sqrt[p]{\sum_{x \in X} x^{p}}

  * At p = ∞\infty, one gets Max Pooling
  * At p = 1, one gets Sum Pooling (which is proportional to Average Pooling)

Note

If the sum to the power of `p` is zero, the gradient of this function is not
defined. This implementation will set the gradient to zero in this case.

Parameters

    
  * kernel_size (Union[int, Tuple[int]]) – a single int, the size of the window
  * stride (Union[int, Tuple[int]]) – a single int, the stride of the window. Default value is `kernel_size`
  * ceil_mode (bool) – when True, will use `ceil` instead of `floor` to compute the output shape

Shape:

    
  * Input: (N,C,Lin)(N, C, L_{in}) or (C,Lin)(C, L_{in}).
  * Output: (N,C,Lout)(N, C, L_{out}) or (C,Lout)(C, L_{out}), where
Lout=⌊Lin−kernel_sizestride+1⌋L_{out} = \left\lfloor\frac{L_{in} -
\text{kernel\\_size}}{\text{stride}} + 1\right\rfloor

Examples::

    
    
    >>> # power-2 pool of window of length 3, with stride 2.
    >>> m = nn.LPPool1d(2, 3, stride=2)
    >>> input = torch.randn(20, 16, 50)
    >>> output = m(input)
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.nn.LPPool1d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

