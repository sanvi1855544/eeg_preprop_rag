# torch.sparse.addmm

`torch.sparse.addmm(mat, mat1, mat2, *, beta=1., alpha=1.) → Tensor`

    
This function does exact same thing as `torch.addmm()` in the forward, except
that it supports backward for sparse COO matrix `mat1`. When `mat1` is a COO
tensor it must have `sparse_dim = 2`. When inputs are COO tensors, this
function also supports backward for both inputs.

Supports both CSR and COO storage formats.

Note

This function doesn’t support computing derivaties with respect to CSR
matrices.

Parameters

    
  * mat (Tensor) – a dense matrix to be added
  * mat1 (Tensor) – a sparse matrix to be multiplied
  * mat2 (Tensor) – a dense matrix to be multiplied
  * beta (Number, optional) – multiplier for `mat` (β\beta)
  * alpha (Number, optional) – multiplier for mat1@mat2mat1 @ mat2 (α\alpha)

© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.sparse.addmm.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

