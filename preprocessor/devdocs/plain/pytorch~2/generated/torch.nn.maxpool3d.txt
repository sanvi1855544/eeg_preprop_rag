# MaxPool3d

`class torch.nn.MaxPool3d(kernel_size, stride=None, padding=0, dilation=1,
return_indices=False, ceil_mode=False)` [source]

    
Applies a 3D max pooling over an input signal composed of several input
planes.

In the simplest case, the output value of the layer with input size
(N,C,D,H,W)(N, C, D, H, W), output (N,C,Dout,Hout,Wout)(N, C, D_{out},
H_{out}, W_{out}) and `kernel_size` (kD,kH,kW)(kD, kH, kW) can be precisely
described as:

out(Ni,Cj,d,h,w)=max⁡k=0,…,kD−1max⁡m=0,…,kH−1max⁡n=0,…,kW−1input(Ni,Cj,stride[0]×d+k,stride[1]×h+m,stride[2]×w+n)\begin{aligned}
\text{out}(N_i, C_j, d, h, w) ={} & \max_{k=0, \ldots, kD-1} \max_{m=0,
\ldots, kH-1} \max_{n=0, \ldots, kW-1} \\\ & \text{input}(N_i, C_j,
\text{stride[0]} \times d + k, \text{stride[1]} \times h + m, \text{stride[2]}
\times w + n) \end{aligned}

If `padding` is non-zero, then the input is implicitly padded with negative
infinity on both sides for `padding` number of points. `dilation` controls the
spacing between the kernel points. It is harder to describe, but this link has
a nice visualization of what `dilation` does.

Note

When ceil_mode=True, sliding windows are allowed to go off-bounds if they
start within the left padding or the input. Sliding windows that would start
in the right padded region are ignored.

The parameters `kernel_size`, `stride`, `padding`, `dilation` can either be:

  * a single `int` – in which case the same value is used for the depth, height and width dimension
  * a `tuple` of three ints – in which case, the first `int` is used for the depth dimension, the second `int` for the height dimension and the third `int` for the width dimension

Parameters

    
  * kernel_size (Union[int, Tuple[int, int, int]]) – the size of the window to take a max over
  * stride (Union[int, Tuple[int, int, int]]) – the stride of the window. Default value is `kernel_size`
  * padding (Union[int, Tuple[int, int, int]]) – Implicit negative infinity padding to be added on all three sides
  * dilation (Union[int, Tuple[int, int, int]]) – a parameter that controls the stride of elements in the window
  * return_indices (bool) – if `True`, will return the max indices along with the outputs. Useful for `torch.nn.MaxUnpool3d` later
  * ceil_mode (bool) – when True, will use `ceil` instead of `floor` to compute the output shape

Shape:

    
  * Input: (N,C,Din,Hin,Win)(N, C, D_{in}, H_{in}, W_{in}) or (C,Din,Hin,Win)(C, D_{in}, H_{in}, W_{in}).
  * Output: (N,C,Dout,Hout,Wout)(N, C, D_{out}, H_{out}, W_{out}) or (C,Dout,Hout,Wout)(C, D_{out}, H_{out}, W_{out}), where
Dout=⌊Din+2×padding[0]−dilation[0]×(kernel_size[0]−1)−1stride[0]+1⌋D_{out} =
\left\lfloor\frac{D_{in} + 2 \times \text{padding}[0] - \text{dilation}[0]
\times (\text{kernel\\_size}[0] - 1) - 1}{\text{stride}[0]} + 1\right\rfloor

Hout=⌊Hin+2×padding[1]−dilation[1]×(kernel_size[1]−1)−1stride[1]+1⌋H_{out} =
\left\lfloor\frac{H_{in} + 2 \times \text{padding}[1] - \text{dilation}[1]
\times (\text{kernel\\_size}[1] - 1) - 1}{\text{stride}[1]} + 1\right\rfloor

Wout=⌊Win+2×padding[2]−dilation[2]×(kernel_size[2]−1)−1stride[2]+1⌋W_{out} =
\left\lfloor\frac{W_{in} + 2 \times \text{padding}[2] - \text{dilation}[2]
\times (\text{kernel\\_size}[2] - 1) - 1}{\text{stride}[2]} + 1\right\rfloor

Examples:

    
    >>> # pool of square window of size=3, stride=2
    >>> m = nn.MaxPool3d(3, stride=2)
    >>> # pool of non-square window
    >>> m = nn.MaxPool3d((3, 2, 2), stride=(2, 1, 2))
    >>> input = torch.randn(20, 16, 50, 44, 31)
    >>> output = m(input)
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.nn.MaxPool3d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

