# torch.nn.functional.conv3d

`torch.nn.functional.conv3d(input, weight, bias=None, stride=1, padding=0,
dilation=1, groups=1) → Tensor`

    
Applies a 3D convolution over an input image composed of several input planes.

This operator supports TensorFloat32.

See `Conv3d` for details and output shape.

Note

In some circumstances when given tensors on a CUDA device and using CuDNN,
this operator may select a nondeterministic algorithm to increase performance.
If this is undesirable, you can try to make the operation deterministic
(potentially at a performance cost) by setting
`torch.backends.cudnn.deterministic = True`. See Reproducibility for more
information.

Note

This operator supports complex data types i.e. `complex32, complex64,
complex128`.

Parameters

    
  * input – input tensor of shape (minibatch,in_channels,iT,iH,iW)(\text{minibatch} , \text{in\\_channels} , iT , iH , iW)
  * weight – filters of shape (out_channels,in_channelsgroups,kT,kH,kW)(\text{out\\_channels} , \frac{\text{in\\_channels}}{\text{groups}} , kT , kH , kW)
  * bias – optional bias tensor of shape (out_channels)(\text{out\\_channels}). Default: None
  * stride – the stride of the convolving kernel. Can be a single number or a tuple `(sT, sH, sW)`. Default: 1
  * padding – 
implicit paddings on both sides of the input. Can be a string {‘valid’,
‘same’}, single number or a tuple `(padT, padH, padW)`. Default: 0
`padding='valid'` is the same as no padding. `padding='same'` pads the input
so the output has the same shape as the input. However, this mode doesn’t
support any stride values other than 1.

Warning

For `padding='same'`, if the `weight` is even-length and `dilation` is odd in
any dimension, a full `pad()` operation may be needed internally. Lowering
performance.

  * dilation – the spacing between kernel elements. Can be a single number or a tuple `(dT, dH, dW)`. Default: 1
  * groups – split input into groups, in_channels\text{in\\_channels} should be divisible by the number of groups. Default: 1

Examples:

    
    >>> filters = torch.randn(33, 16, 3, 3, 3)
    >>> inputs = torch.randn(20, 16, 50, 10, 20)
    >>> F.conv3d(inputs, filters)
    
© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/generated/torch.nn.functional.conv3d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

