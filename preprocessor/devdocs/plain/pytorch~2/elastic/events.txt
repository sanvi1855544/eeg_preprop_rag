# Events

Module contains events processing mechanisms that are integrated with the
standard python logging.

Example of usage:

    
    from torch.distributed.elastic import events
    event = events.Event(name="test_event", source=events.EventSource.WORKER, metadata={...})
    events.get_logging_handler(destination="console").info(event)
    
## API Methods

`torch.distributed.elastic.events.record(event, destination='null')` [source]

`torch.distributed.elastic.events.get_logging_handler(destination='null')`
[source]

    
Return type

    
Handler

## Event Objects

`class torch.distributed.elastic.events.api.Event(name, source, timestamp=0,
metadata=<factory>)` [source]

    
The class represents the generic event that occurs during the torchelastic job
execution. The event can be any kind of meaningful action.

Parameters

    
  * name (str) – event name.
  * source (EventSource) – the event producer, e.g. agent or worker
  * timestamp (int) – timestamp in milliseconds when event occurred.
  * metadata (Dict[str, Optional[Union[str, int, float, bool]]]) – additional data that is associated with the event.

`class torch.distributed.elastic.events.api.EventSource(value)` [source]

    
Known identifiers of the event producers.

`torch.distributed.elastic.events.api.EventMetadataValue`

    
alias of `Optional`[`Union`[`str`, `int`, `float`, `bool`]]

© 2024, PyTorch Contributors  
PyTorch has a BSD-style license, as found in the LICENSE file.  
https://pytorch.org/docs/2.1/elastic/events.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

