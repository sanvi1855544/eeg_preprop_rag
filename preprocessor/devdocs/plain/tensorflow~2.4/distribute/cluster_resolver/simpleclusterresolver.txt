# tf.distribute.cluster_resolver.SimpleClusterResolver

View source on GitHub  Simple implementation of ClusterResolver that accepts
all attributes. Inherits From: `ClusterResolver`

#### View aliases

Compat aliases for migration See Migration guide for more details.
`tf.compat.v1.distribute.cluster_resolver.SimpleClusterResolver`

    
    tf.distribute.cluster_resolver.SimpleClusterResolver(
        cluster_spec, master='', task_type=None, task_id=None,
        environment='', num_accelerators=None, rpc_layer=None
    )
    
Please see the base class for documentation of arguments of its constructor.
It is useful if you want to specify some or all attributes. Usage example with
`tf.distribute.Strategy`:

    
    cluster = tf.train.ClusterSpec({"worker": ["worker0.example.com:2222",
                                               "worker1.example.com:2222"]})
    
    # On worker 0
    cluster_resolver = SimpleClusterResolver(cluster, task_type="worker",
                                             task_id=0,
                                             num_accelerators={"GPU": 8},
                                             rpc_layer="grpc")
    strategy = tf.distribute.experimental.MultiWorkerMirroredStrategy(
        cluster_resolver=cluster_resolver)
    
    # On worker 1
    cluster_resolver = SimpleClusterResolver(cluster, task_type="worker",
                                             task_id=1,
                                             num_accelerators={"GPU": 8},
                                             rpc_layer="grpc")
    strategy = tf.distribute.experimental.MultiWorkerMirroredStrategy(
        cluster_resolver=cluster_resolver)
    
| Attributes  
---  
`environment` |  Returns the current environment which TensorFlow is running in. There are two possible return values, "google" (when TensorFlow is running in a Google-internal environment) or an empty string (when TensorFlow is running elsewhere). If you are implementing a ClusterResolver that works in both the Google environment and the open-source world (for instance, a TPU ClusterResolver or similar), you will have to return the appropriate string depending on the environment, which you will have to detect. Otherwise, if you are implementing a ClusterResolver that will only work in open-source TensorFlow, you do not need to implement this property.   
`rpc_layer` |   
`task_id` |  Returns the task id this `ClusterResolver` indicates. In TensorFlow distributed environment, each job may have an applicable task id, which is the index of the instance within its task type. This is useful when user needs to run specific code according to task index. For example,
    
    cluster_spec = tf.train.ClusterSpec({
    "ps": ["localhost:2222", "localhost:2223"],
    "worker": ["localhost:2224", "localhost:2225", "localhost:2226"]
    })
    
    # SimpleClusterResolver is used here for illustration; other cluster
    # resolvers may be used for other source of task type/id.
    simple_resolver = SimpleClusterResolver(cluster_spec, task_type="worker",
    task_id=0)
    
    ...
    
    if cluster_resolver.task_type == 'worker' and cluster_resolver.task_id == 0:
    # Perform something that's only applicable on 'worker' type, id 0. This
    # block will run on this particular instance since we've specified this
    # task to be a 'worker', id 0 in above cluster resolver.
    else:
    # Perform something that's only applicable on other ids. This block will
    # not run on this particular instance.
    
Returns `None` if such information is not available or is not applicable in
the current distributed environment, such as training with
`tf.distribute.cluster_resolver.TPUClusterResolver`. For more information,
please see `tf.distribute.cluster_resolver.ClusterResolver`'s class docstring.  
`task_type` |  Returns the task type this `ClusterResolver` indicates. In TensorFlow distributed environment, each job may have an applicable task type. Valid task types in TensorFlow include 'chief': a worker that is designated with more responsibility, 'worker': a regular worker for training/evaluation, 'ps': a parameter server, or 'evaluator': an evaluator that evaluates the checkpoints for metrics. See Multi-worker configuration for more information about 'chief' and 'worker' task type, which are most commonly used. Having access to such information is useful when user needs to run specific code according to task types. For example,
    
    cluster_spec = tf.train.ClusterSpec({
    "ps": ["localhost:2222", "localhost:2223"],
    "worker": ["localhost:2224", "localhost:2225", "localhost:2226"]
    })
    
    # SimpleClusterResolver is used here for illustration; other cluster
    # resolvers may be used for other source of task type/id.
    simple_resolver = SimpleClusterResolver(cluster_spec, task_type="worker",
    task_id=1)
    
    ...
    
    if cluster_resolver.task_type == 'worker':
    # Perform something that's only applicable on workers. This block
    # will run on this particular instance since we've specified this task to
    # be a worker in above cluster resolver.
    elif cluster_resolver.task_type == 'ps':
    # Perform something that's only applicable on parameter servers. This
    # block will not run on this particular instance.
    
Returns `None` if such information is not available or is not applicable in
the current distributed environment, such as training with
`tf.distribute.experimental.TPUStrategy`. For more information, please see
`tf.distribute.cluster_resolver.ClusterResolver`'s class doc.  
## Methods

### `cluster_spec`

View source

    
    cluster_spec()
    
Returns the ClusterSpec passed into the constructor.

### `master`

View source

    
    master(
        task_type=None, task_id=None, rpc_layer=None
    )
    
Returns the master address to use when creating a session.

> Note: this is only useful for TensorFlow 1.x.
Args  
---  
`task_type` |  (Optional) The type of the TensorFlow task of the master.   
`task_id` |  (Optional) The index of the TensorFlow task of the master.   
`rpc_layer` |  (Optional) The RPC used by distributed TensorFlow.   
Returns  
---  
The name or URL of the session master.  
If a task_type and task_id is given, this will override the `master` string
passed into the initialization function.

### `num_accelerators`

View source

    
    num_accelerators(
        task_type=None, task_id=None, config_proto=None
    )
    
Returns the number of accelerator cores per worker.

The SimpleClusterResolver does not do automatic detection of accelerators, and
thus all arguments are unused and we simply return the value provided in the
constructor.

Args  
---  
`task_type` |  Unused.   
`task_id` |  Unused.   
`config_proto` |  Unused.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/distribute/cluster_resolver/SimpleClusterResolver

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

