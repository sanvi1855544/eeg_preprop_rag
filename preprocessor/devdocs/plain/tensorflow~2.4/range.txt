# tf.range

View source on GitHub  Creates a sequence of numbers.

#### View aliases

Compat aliases for migration See Migration guide for more details.
`tf.compat.v1.range`

    
    tf.range(limit, delta=1, dtype=None, name='range')
    tf.range(start, limit, delta=1, dtype=None, name='range')
    
Creates a sequence of numbers that begins at `start` and extends by increments
of `delta` up to but not including `limit`. The dtype of the resulting tensor
is inferred from the inputs unless it is provided explicitly. Like the Python
builtin `range`, `start` defaults to 0, so that `range(n) = range(0, n)`.

#### For example:

    
    start = 3
    limit = 18
    delta = 3
    tf.range(start, limit, delta)
    <tf.Tensor: shape=(5,), dtype=int32,
    numpy=array([ 3,  6,  9, 12, 15], dtype=int32)>
    
    
    start = 3
    limit = 1
    delta = -0.5
    tf.range(start, limit, delta)
    <tf.Tensor: shape=(4,), dtype=float32,
    numpy=array([3. , 2.5, 2. , 1.5], dtype=float32)>
    
    
    limit = 5
    tf.range(limit)
    <tf.Tensor: shape=(5,), dtype=int32,
    numpy=array([0, 1, 2, 3, 4], dtype=int32)>
    
| Args  
---  
`start` |  A 0-D `Tensor` (scalar). Acts as first entry in the range if `limit` is not None; otherwise, acts as range limit and first entry defaults to 0.   
`limit` |  A 0-D `Tensor` (scalar). Upper limit of sequence, exclusive. If None, defaults to the value of `start` while the first entry of the range defaults to 0.   
`delta` |  A 0-D `Tensor` (scalar). Number that increments `start`. Defaults to 1.   
`dtype` |  The type of the elements of the resulting tensor.   
`name` |  A name for the operation. Defaults to "range".   
Returns  
---  
An 1-D `Tensor` of type `dtype`.  
#### Numpy Compatibility

Equivalent to np.arange

Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/range

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

