# tf.experimental.numpy.unicode_

str(object='') -> str

    
    tf.experimental.numpy.unicode_(
        *args, **kwargs
    )
    
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or errors is
specified, then the object must expose a data buffer that will be decoded
using the given encoding and error handler. Otherwise, returns the result of
object.str() (if defined) or repr(object). encoding defaults to
sys.getdefaultencoding(). errors defaults to 'strict'.

## Methods

### `all`

    
    all()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `any`

    
    any()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `argmax`

    
    argmax()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `argmin`

    
    argmin()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `argsort`

    
    argsort()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `astype`

    
    astype()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `byteswap`

    
    byteswap()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `capitalize`

    
    capitalize()
    
Return a capitalized version of the string.

More specifically, make the first character have upper case and the rest lower
case.

### `casefold`

    
    casefold()
    
Return a version of the string suitable for caseless comparisons.

### `center`

    
    center(
        width, fillchar, /
    )
    
Return a centered string of length width.

Padding is done using the specified fill character (default is a space).

### `choose`

    
    choose()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `clip`

    
    clip()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `compress`

    
    compress()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `conj`

    
    conj()
    
### `conjugate`

    
    conjugate()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `copy`

    
    copy()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `count`

    
    count()
    
S.count(sub[, start[, end]]) -> int

Return the number of non-overlapping occurrences of substring sub in string
S[start:end]. Optional arguments start and end are interpreted as in slice
notation.

### `cumprod`

    
    cumprod()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `cumsum`

    
    cumsum()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `diagonal`

    
    diagonal()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `dump`

    
    dump()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `dumps`

    
    dumps()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `encode`

    
    encode(
        encoding='utf-8', errors='strict'
    )
    
Encode the string using the codec registered for encoding.

encoding The encoding in which to encode the string. errors The error handling
scheme to use for encoding errors. The default is 'strict' meaning that
encoding errors raise a UnicodeEncodeError. Other possible values are
'ignore', 'replace' and 'xmlcharrefreplace' as well as any other name
registered with codecs.register_error that can handle UnicodeEncodeErrors.

### `endswith`

    
    endswith()
    
S.endswith(suffix[, start[, end]]) -> bool

Return True if S ends with the specified suffix, False otherwise. With
optional start, test S beginning at that position. With optional end, stop
comparing S at that position. suffix can also be a tuple of strings to try.

### `expandtabs`

    
    expandtabs(
        tabsize=8
    )
    
Return a copy where all tab characters are expanded using spaces.

If tabsize is not given, a tab size of 8 characters is assumed.

### `fill`

    
    fill()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `find`

    
    find()
    
S.find(sub[, start[, end]]) -> int

Return the lowest index in S where substring sub is found, such that sub is
contained within S[start:end]. Optional arguments start and end are
interpreted as in slice notation.

Return -1 on failure.

### `flatten`

    
    flatten()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `format`

    
    format()
    
S.format(*args, **kwargs) -> str

Return a formatted version of S, using substitutions from args and kwargs. The
substitutions are identified by braces ('{' and '}').

### `format_map`

    
    format_map()
    
S.format_map(mapping) -> str

Return a formatted version of S, using substitutions from mapping. The
substitutions are identified by braces ('{' and '}').

### `getfield`

    
    getfield()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `index`

    
    index()
    
S.index(sub[, start[, end]]) -> int

Return the lowest index in S where substring sub is found, such that sub is
contained within S[start:end]. Optional arguments start and end are
interpreted as in slice notation.

Raises ValueError when the substring is not found.

### `isalnum`

    
    isalnum()
    
Return True if the string is an alpha-numeric string, False otherwise.

A string is alpha-numeric if all characters in the string are alpha-numeric
and there is at least one character in the string.

### `isalpha`

    
    isalpha()
    
Return True if the string is an alphabetic string, False otherwise.

A string is alphabetic if all characters in the string are alphabetic and
there is at least one character in the string.

### `isascii`

    
    isascii()
    
Return True if all characters in the string are ASCII, False otherwise.

ASCII characters have code points in the range U+0000-U+007F. Empty string is
ASCII too.

### `isdecimal`

    
    isdecimal()
    
Return True if the string is a decimal string, False otherwise.

A string is a decimal string if all characters in the string are decimal and
there is at least one character in the string.

### `isdigit`

    
    isdigit()
    
Return True if the string is a digit string, False otherwise.

A string is a digit string if all characters in the string are digits and
there is at least one character in the string.

### `isidentifier`

    
    isidentifier()
    
Return True if the string is a valid Python identifier, False otherwise.

Use keyword.iskeyword() to test for reserved identifiers such as "def" and
"class".

### `islower`

    
    islower()
    
Return True if the string is a lowercase string, False otherwise.

A string is lowercase if all cased characters in the string are lowercase and
there is at least one cased character in the string.

### `isnumeric`

    
    isnumeric()
    
Return True if the string is a numeric string, False otherwise.

A string is numeric if all characters in the string are numeric and there is
at least one character in the string.

### `isprintable`

    
    isprintable()
    
Return True if the string is printable, False otherwise.

A string is printable if all of its characters are considered printable in
repr() or if it is empty.

### `isspace`

    
    isspace()
    
Return True if the string is a whitespace string, False otherwise.

A string is whitespace if all characters in the string are whitespace and
there is at least one character in the string.

### `istitle`

    
    istitle()
    
Return True if the string is a title-cased string, False otherwise.

In a title-cased string, upper- and title-case characters may only follow
uncased characters and lowercase characters only cased ones.

### `isupper`

    
    isupper()
    
Return True if the string is an uppercase string, False otherwise.

A string is uppercase if all cased characters in the string are uppercase and
there is at least one cased character in the string.

### `item`

    
    item()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `itemset`

    
    itemset()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `join`

    
    join(
        iterable, /
    )
    
Concatenate any number of strings.

The string whose method is called is inserted in between each given string.
The result is returned as a new string.

Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'

### `ljust`

    
    ljust(
        width, fillchar, /
    )
    
Return a left-justified string of length width.

Padding is done using the specified fill character (default is a space).

### `lower`

    
    lower()
    
Return a copy of the string converted to lowercase.

### `lstrip`

    
    lstrip(
        chars, /
    )
    
Return a copy of the string with leading whitespace removed.

If chars is given and not None, remove characters in chars instead.

### `maketrans`

    
    maketrans(
        x, y, z, /
    )
    
Return a translation table usable for str.translate().

If there is only one argument, it must be a dictionary mapping Unicode
ordinals (integers) or characters to Unicode ordinals, strings or None.
Character keys will be then converted to ordinals. If there are two arguments,
they must be strings of equal length, and in the resulting dictionary, each
character in x will be mapped to the character at the same position in y. If
there is a third argument, it must be a string, whose characters will be
mapped to None in the result.

### `max`

    
    max()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `mean`

    
    mean()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `min`

    
    min()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `newbyteorder`

    
    newbyteorder()
    
newbyteorder(new_order='S')

Return a new `dtype` with a different byte order.

Changes are also made in all fields and sub-arrays of the data type.

The `new_order` code can be any from the following:

  * 'S' - swap dtype from current to opposite endian

### '<', 'L'

\- little endian

### '>', 'B'

\- big endian

### '=', 'N'

\- native order

### '|', 'I'

\- ignore (no change to byte order)

## Parameters

new_order : str, optional Byte order to force; a value from the byte order
specifications above. The default value ('S') results in swapping the current
byte order. The code does a case-insensitive check on the first letter of
`new_order` for the alternatives above. For example, any of 'B' or 'b' or
'biggish' are valid to specify big-endian.

## Returns

new_dtype : dtype New `dtype` object with the given change to the byte order.

### `nonzero`

    
    nonzero()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `partition`

    
    partition(
        sep, /
    )
    
Partition the string into three parts using the given separator.

This will search for the separator in the string. If the separator is found,
returns a 3-tuple containing the part before the separator, the separator
itself, and the part after it.

If the separator is not found, returns a 3-tuple containing the original
string and two empty strings.

### `prod`

    
    prod()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `ptp`

    
    ptp()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `put`

    
    put()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `ravel`

    
    ravel()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `repeat`

    
    repeat()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `replace`

    
    replace(
        old, new, count, /
    )
    
Return a copy with all occurrences of substring old replaced by new.

count Maximum number of occurrences to replace. -1 (the default value) means
replace all occurrences.

If the optional argument count is given, only the first count occurrences are
replaced.

### `reshape`

    
    reshape()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `resize`

    
    resize()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `rfind`

    
    rfind()
    
S.rfind(sub[, start[, end]]) -> int

Return the highest index in S where substring sub is found, such that sub is
contained within S[start:end]. Optional arguments start and end are
interpreted as in slice notation.

Return -1 on failure.

### `rindex`

    
    rindex()
    
S.rindex(sub[, start[, end]]) -> int

Return the highest index in S where substring sub is found, such that sub is
contained within S[start:end]. Optional arguments start and end are
interpreted as in slice notation.

Raises ValueError when the substring is not found.

### `rjust`

    
    rjust(
        width, fillchar, /
    )
    
Return a right-justified string of length width.

Padding is done using the specified fill character (default is a space).

### `round`

    
    round()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `rpartition`

    
    rpartition(
        sep, /
    )
    
Partition the string into three parts using the given separator.

This will search for the separator in the string, starting at the end. If the
separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it.

If the separator is not found, returns a 3-tuple containing two empty strings
and the original string.

### `rsplit`

    
    rsplit(
        sep=None, maxsplit=-1
    )
    
Return a list of the words in the string, using sep as the delimiter string.

sep The delimiter according which to split the string. None (the default
value) means split according to any whitespace, and discard empty strings from
the result. maxsplit Maximum number of splits to do. -1 (the default value)
means no limit.

Splits are done starting at the end of the string and working to the front.

### `rstrip`

    
    rstrip(
        chars, /
    )
    
Return a copy of the string with trailing whitespace removed.

If chars is given and not None, remove characters in chars instead.

### `searchsorted`

    
    searchsorted()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `setfield`

    
    setfield()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `setflags`

    
    setflags()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `sort`

    
    sort()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `split`

    
    split(
        sep=None, maxsplit=-1
    )
    
Return a list of the words in the string, using sep as the delimiter string.

sep The delimiter according which to split the string. None (the default
value) means split according to any whitespace, and discard empty strings from
the result. maxsplit Maximum number of splits to do. -1 (the default value)
means no limit.

### `splitlines`

    
    splitlines(
        keepends=False
    )
    
Return a list of the lines in the string, breaking at line boundaries.

Line breaks are not included in the resulting list unless keepends is given
and true.

### `squeeze`

    
    squeeze()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `startswith`

    
    startswith()
    
S.startswith(prefix[, start[, end]]) -> bool

Return True if S starts with the specified prefix, False otherwise. With
optional start, test S beginning at that position. With optional end, stop
comparing S at that position. prefix can also be a tuple of strings to try.

### `std`

    
    std()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `strip`

    
    strip(
        chars, /
    )
    
Return a copy of the string with leading and trailing whitespace remove.

If chars is given and not None, remove characters in chars instead.

### `sum`

    
    sum()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `swapaxes`

    
    swapaxes()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `swapcase`

    
    swapcase()
    
Convert uppercase characters to lowercase and lowercase characters to
uppercase.

### `take`

    
    take()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `title`

    
    title()
    
Return a version of the string where each word is titlecased.

More specifically, words start with uppercased characters and all remaining
cased characters have lower case.

### `tobytes`

    
    tobytes()
    
### `tofile`

    
    tofile()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `tolist`

    
    tolist()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `tostring`

    
    tostring()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `trace`

    
    trace()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `translate`

    
    translate(
        table, /
    )
    
Replace each character in the string using the given translation table.

table Translation table, which must be a mapping of Unicode ordinals to
Unicode ordinals, strings, or None.

The table must implement lookup/indexing via getitem, for instance a
dictionary or list. If this operation raises LookupError, the character is
left untouched. Characters mapped to None are deleted.

### `transpose`

    
    transpose()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `upper`

    
    upper()
    
Return a copy of the string converted to uppercase.

### `var`

    
    var()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `view`

    
    view()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `zfill`

    
    zfill(
        width, /
    )
    
Pad a numeric string with zeros on the left, to fill a field of the given
width.

The string is never truncated.

### `__abs__`

    
    __abs__()
    
abs(self)

### `__add__`

    
    __add__(
        value, /
    )
    
Return self+value.

### `__and__`

    
    __and__(
        value, /
    )
    
Return self&value.

### `__bool__`

    
    __bool__()
    
self != 0

### `__contains__`

    
    __contains__(
        key, /
    )
    
Return key in self.

### `__eq__`

    
    __eq__(
        value, /
    )
    
Return self==value.

### `__floordiv__`

    
    __floordiv__(
        value, /
    )
    
Return self//value.

### `__ge__`

    
    __ge__(
        value, /
    )
    
Return self>=value.

### `__getitem__`

    
    __getitem__(
        key, /
    )
    
Return self[key].

### `__gt__`

    
    __gt__(
        value, /
    )
    
Return self>value.

### `__invert__`

    
    __invert__()
    
~self

### `__iter__`

    
    __iter__()
    
Implement iter(self).

### `__le__`

    
    __le__(
        value, /
    )
    
Return self<=value.

### `__len__`

    
    __len__()
    
Return len(self).

### `__lt__`

    
    __lt__(
        value, /
    )
    
Return self<value.

### `__mod__`

    
    __mod__(
        value, /
    )
    
Return self%value.

### `__mul__`

    
    __mul__(
        value, /
    )
    
Return self*value.

### `__ne__`

    
    __ne__(
        value, /
    )
    
Return self!=value.

### `__neg__`

    
    __neg__()
    
-self
### `__or__`

    
    __or__(
        value, /
    )
    
Return self|value.

### `__pos__`

    
    __pos__()
    
+self

### `__pow__`

    
    __pow__(
        value, mod, /
    )
    
Return pow(self, value, mod).

### `__radd__`

    
    __radd__(
        value, /
    )
    
Return value+self.

### `__rand__`

    
    __rand__(
        value, /
    )
    
Return value&self.

### `__rfloordiv__`

    
    __rfloordiv__(
        value, /
    )
    
Return value//self.

### `__rmod__`

    
    __rmod__(
        value, /
    )
    
Return value%self.

### `__rmul__`

    
    __rmul__(
        value, /
    )
    
Return value*self.

### `__ror__`

    
    __ror__(
        value, /
    )
    
Return value|self.

### `__rpow__`

    
    __rpow__(
        value, mod, /
    )
    
Return pow(value, self, mod).

### `__rsub__`

    
    __rsub__(
        value, /
    )
    
Return value-self.

### `__rtruediv__`

    
    __rtruediv__(
        value, /
    )
    
Return value/self.

### `__rxor__`

    
    __rxor__(
        value, /
    )
    
Return value^self.

### `__sub__`

    
    __sub__(
        value, /
    )
    
Return self-value.

### `__truediv__`

    
    __truediv__(
        value, /
    )
    
Return self/value.

### `__xor__`

    
    __xor__(
        value, /
    )
    
Return self^value.

Class Variables  
---  
T  |   
base  |   
data  |   
dtype  |   
flags  |   
flat  |   
imag  |   
itemsize  |   
nbytes  |   
ndim  |   
real  |   
shape  |   
size  |   
strides  |   
© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/experimental/numpy/unicode_

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

