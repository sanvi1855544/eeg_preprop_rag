# tf.experimental.numpy.string_

bytes(iterable_of_ints) -> bytes

    
    tf.experimental.numpy.string_(
        *args, **kwargs
    )
    
bytes(string, encoding[, errors]) -> bytes bytes(bytes_or_buffer) -> immutable
copy of bytes_or_buffer bytes(int) -> bytes object of size given by the
parameter initialized with null bytes bytes() -> empty bytes object

Construct an immutable array of bytes from:

  * an iterable yielding integers in range(256)
  * a text string encoded using the specified encoding
  * any object implementing the buffer API.
  * an integer

## Methods

### `all`

    
    all()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `any`

    
    any()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `argmax`

    
    argmax()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `argmin`

    
    argmin()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `argsort`

    
    argsort()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `astype`

    
    astype()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `byteswap`

    
    byteswap()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `capitalize`

    
    capitalize()
    
B.capitalize() -> copy of B

Return a copy of B with only its first character capitalized (ASCII) and the
rest lower-cased.

### `center`

    
    center()
    
B.center(width[, fillchar]) -> copy of B

Return B centered in a string of length width. Padding is done using the
specified fill character (default is a space).

### `choose`

    
    choose()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `clip`

    
    clip()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `compress`

    
    compress()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `conj`

    
    conj()
    
### `conjugate`

    
    conjugate()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `copy`

    
    copy()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `count`

    
    count()
    
B.count(sub[, start[, end]]) -> int

Return the number of non-overlapping occurrences of subsection sub in bytes
B[start:end]. Optional arguments start and end are interpreted as in slice
notation.

### `cumprod`

    
    cumprod()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `cumsum`

    
    cumsum()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `decode`

    
    decode(
        encoding='utf-8', errors='strict'
    )
    
Decode the bytes using the codec registered for encoding.

encoding The encoding with which to decode the bytes. errors The error
handling scheme to use for the handling of decoding errors. The default is
'strict' meaning that decoding errors raise a UnicodeDecodeError. Other
possible values are 'ignore' and 'replace' as well as any other name
registered with codecs.register_error that can handle UnicodeDecodeErrors.

### `diagonal`

    
    diagonal()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `dump`

    
    dump()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `dumps`

    
    dumps()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `endswith`

    
    endswith()
    
B.endswith(suffix[, start[, end]]) -> bool

Return True if B ends with the specified suffix, False otherwise. With
optional start, test B beginning at that position. With optional end, stop
comparing B at that position. suffix can also be a tuple of bytes to try.

### `expandtabs`

    
    expandtabs()
    
B.expandtabs(tabsize=8) -> copy of B

Return a copy of B where all tab characters are expanded using spaces. If
tabsize is not given, a tab size of 8 characters is assumed.

### `fill`

    
    fill()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `find`

    
    find()
    
B.find(sub[, start[, end]]) -> int

Return the lowest index in B where subsection sub is found, such that sub is
contained within B[start,end]. Optional arguments start and end are
interpreted as in slice notation.

Return -1 on failure.

### `flatten`

    
    flatten()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `fromhex`

    
    fromhex(
        string, /
    )
    
Create a bytes object from a string of hexadecimal numbers.

Spaces between two numbers are accepted. Example: bytes.fromhex('B9 01EF') ->
b'\xb9\x01\xef'.

### `getfield`

    
    getfield()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `hex`

    
    hex()
    
B.hex() -> string

Create a string of hexadecimal numbers from a bytes object. Example:
b'\xb9\x01\xef'.hex() -> 'b901ef'.

### `index`

    
    index()
    
B.index(sub[, start[, end]]) -> int

Return the lowest index in B where subsection sub is found, such that sub is
contained within B[start,end]. Optional arguments start and end are
interpreted as in slice notation.

Raises ValueError when the subsection is not found.

### `isalnum`

    
    isalnum()
    
B.isalnum() -> bool

Return True if all characters in B are alphanumeric and there is at least one
character in B, False otherwise.

### `isalpha`

    
    isalpha()
    
B.isalpha() -> bool

Return True if all characters in B are alphabetic and there is at least one
character in B, False otherwise.

### `isascii`

    
    isascii()
    
B.isascii() -> bool

Return True if B is empty or all characters in B are ASCII, False otherwise.

### `isdigit`

    
    isdigit()
    
B.isdigit() -> bool

Return True if all characters in B are digits and there is at least one
character in B, False otherwise.

### `islower`

    
    islower()
    
B.islower() -> bool

Return True if all cased characters in B are lowercase and there is at least
one cased character in B, False otherwise.

### `isspace`

    
    isspace()
    
B.isspace() -> bool

Return True if all characters in B are whitespace and there is at least one
character in B, False otherwise.

### `istitle`

    
    istitle()
    
B.istitle() -> bool

Return True if B is a titlecased string and there is at least one character in
B, i.e. uppercase characters may only follow uncased characters and lowercase
characters only cased ones. Return False otherwise.

### `isupper`

    
    isupper()
    
B.isupper() -> bool

Return True if all cased characters in B are uppercase and there is at least
one cased character in B, False otherwise.

### `item`

    
    item()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `itemset`

    
    itemset()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `join`

    
    join(
        iterable_of_bytes, /
    )
    
Concatenate any number of bytes objects.

The bytes whose method is called is inserted in between each pair.

The result is returned as a new bytes object.

Example: b'.'.join([b'ab', b'pq', b'rs']) -> b'ab.pq.rs'.

### `ljust`

    
    ljust()
    
B.ljust(width[, fillchar]) -> copy of B

Return B left justified in a string of length width. Padding is done using the
specified fill character (default is a space).

### `lower`

    
    lower()
    
B.lower() -> copy of B

Return a copy of B with all ASCII characters converted to lowercase.

### `lstrip`

    
    lstrip(
        bytes, /
    )
    
Strip leading bytes contained in the argument.

If the argument is omitted or None, strip leading ASCII whitespace.

### `maketrans`

    
    maketrans(
        frm, to, /
    )
    
Return a translation table useable for the bytes or bytearray translate
method.

The returned table will be one where each byte in frm is mapped to the byte at
the same position in to.

The bytes objects frm and to must be of the same length.

### `max`

    
    max()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `mean`

    
    mean()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `min`

    
    min()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `newbyteorder`

    
    newbyteorder()
    
newbyteorder(new_order='S')

Return a new `dtype` with a different byte order.

Changes are also made in all fields and sub-arrays of the data type.

The `new_order` code can be any from the following:

  * 'S' - swap dtype from current to opposite endian

### '<', 'L'

\- little endian

### '>', 'B'

\- big endian

### '=', 'N'

\- native order

### '|', 'I'

\- ignore (no change to byte order)

## Parameters

new_order : str, optional Byte order to force; a value from the byte order
specifications above. The default value ('S') results in swapping the current
byte order. The code does a case-insensitive check on the first letter of
`new_order` for the alternatives above. For example, any of 'B' or 'b' or
'biggish' are valid to specify big-endian.

## Returns

new_dtype : dtype New `dtype` object with the given change to the byte order.

### `nonzero`

    
    nonzero()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `partition`

    
    partition(
        sep, /
    )
    
Partition the bytes into three parts using the given separator.

This will search for the separator sep in the bytes. If the separator is
found, returns a 3-tuple containing the part before the separator, the
separator itself, and the part after it.

If the separator is not found, returns a 3-tuple containing the original bytes
object and two empty bytes objects.

### `prod`

    
    prod()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `ptp`

    
    ptp()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `put`

    
    put()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `ravel`

    
    ravel()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `repeat`

    
    repeat()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `replace`

    
    replace(
        old, new, count, /
    )
    
Return a copy with all occurrences of substring old replaced by new.

count Maximum number of occurrences to replace. -1 (the default value) means
replace all occurrences.

If the optional argument count is given, only the first count occurrences are
replaced.

### `reshape`

    
    reshape()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `resize`

    
    resize()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `rfind`

    
    rfind()
    
B.rfind(sub[, start[, end]]) -> int

Return the highest index in B where subsection sub is found, such that sub is
contained within B[start,end]. Optional arguments start and end are
interpreted as in slice notation.

Return -1 on failure.

### `rindex`

    
    rindex()
    
B.rindex(sub[, start[, end]]) -> int

Return the highest index in B where subsection sub is found, such that sub is
contained within B[start,end]. Optional arguments start and end are
interpreted as in slice notation.

Raise ValueError when the subsection is not found.

### `rjust`

    
    rjust()
    
B.rjust(width[, fillchar]) -> copy of B

Return B right justified in a string of length width. Padding is done using
the specified fill character (default is a space)

### `round`

    
    round()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `rpartition`

    
    rpartition(
        sep, /
    )
    
Partition the bytes into three parts using the given separator.

This will search for the separator sep in the bytes, starting at the end. If
the separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it.

If the separator is not found, returns a 3-tuple containing two empty bytes
objects and the original bytes object.

### `rsplit`

    
    rsplit(
        sep=None, maxsplit=-1
    )
    
Return a list of the sections in the bytes, using sep as the delimiter.

sep The delimiter according which to split the bytes. None (the default value)
means split on ASCII whitespace characters (space, tab, return, newline,
formfeed, vertical tab). maxsplit Maximum number of splits to do. -1 (the
default value) means no limit.

Splitting is done starting at the end of the bytes and working to the front.

### `rstrip`

    
    rstrip(
        bytes, /
    )
    
Strip trailing bytes contained in the argument.

If the argument is omitted or None, strip trailing ASCII whitespace.

### `searchsorted`

    
    searchsorted()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `setfield`

    
    setfield()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `setflags`

    
    setflags()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `sort`

    
    sort()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `split`

    
    split(
        sep=None, maxsplit=-1
    )
    
Return a list of the sections in the bytes, using sep as the delimiter.

sep The delimiter according which to split the bytes. None (the default value)
means split on ASCII whitespace characters (space, tab, return, newline,
formfeed, vertical tab). maxsplit Maximum number of splits to do. -1 (the
default value) means no limit.

### `splitlines`

    
    splitlines(
        keepends=False
    )
    
Return a list of the lines in the bytes, breaking at line boundaries.

Line breaks are not included in the resulting list unless keepends is given
and true.

### `squeeze`

    
    squeeze()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `startswith`

    
    startswith()
    
B.startswith(prefix[, start[, end]]) -> bool

Return True if B starts with the specified prefix, False otherwise. With
optional start, test B beginning at that position. With optional end, stop
comparing B at that position. prefix can also be a tuple of bytes to try.

### `std`

    
    std()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `strip`

    
    strip(
        bytes, /
    )
    
Strip leading and trailing bytes contained in the argument.

If the argument is omitted or None, strip leading and trailing ASCII
whitespace.

### `sum`

    
    sum()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `swapaxes`

    
    swapaxes()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `swapcase`

    
    swapcase()
    
B.swapcase() -> copy of B

Return a copy of B with uppercase ASCII characters converted to lowercase
ASCII and vice versa.

### `take`

    
    take()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `title`

    
    title()
    
B.title() -> copy of B

Return a titlecased version of B, i.e. ASCII words start with uppercase
characters, all remaining cased characters have lowercase.

### `tobytes`

    
    tobytes()
    
### `tofile`

    
    tofile()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `tolist`

    
    tolist()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `tostring`

    
    tostring()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `trace`

    
    trace()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `translate`

    
    translate(
        table, /, delete=b''
    )
    
Return a copy with each character mapped by the given translation table.

table Translation table, which must be a bytes object of length 256.

All characters occurring in the optional argument delete are removed. The
remaining characters are mapped through the given translation table.

### `transpose`

    
    transpose()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `upper`

    
    upper()
    
B.upper() -> copy of B

Return a copy of B with all ASCII characters converted to uppercase.

### `var`

    
    var()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `view`

    
    view()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `zfill`

    
    zfill()
    
B.zfill(width) -> copy of B

Pad a numeric string B with zeros on the left, to fill a field of the
specified width. B is never truncated.

### `__abs__`

    
    __abs__()
    
abs(self)

### `__add__`

    
    __add__(
        value, /
    )
    
Return self+value.

### `__and__`

    
    __and__(
        value, /
    )
    
Return self&value.

### `__bool__`

    
    __bool__()
    
self != 0

### `__contains__`

    
    __contains__(
        key, /
    )
    
Return key in self.

### `__eq__`

    
    __eq__(
        value, /
    )
    
Return self==value.

### `__floordiv__`

    
    __floordiv__(
        value, /
    )
    
Return self//value.

### `__ge__`

    
    __ge__(
        value, /
    )
    
Return self>=value.

### `__getitem__`

    
    __getitem__(
        key, /
    )
    
Return self[key].

### `__gt__`

    
    __gt__(
        value, /
    )
    
Return self>value.

### `__invert__`

    
    __invert__()
    
~self

### `__iter__`

    
    __iter__()
    
Implement iter(self).

### `__le__`

    
    __le__(
        value, /
    )
    
Return self<=value.

### `__len__`

    
    __len__()
    
Return len(self).

### `__lt__`

    
    __lt__(
        value, /
    )
    
Return self<value.

### `__mod__`

    
    __mod__(
        value, /
    )
    
Return self%value.

### `__mul__`

    
    __mul__(
        value, /
    )
    
Return self*value.

### `__ne__`

    
    __ne__(
        value, /
    )
    
Return self!=value.

### `__neg__`

    
    __neg__()
    
-self
### `__or__`

    
    __or__(
        value, /
    )
    
Return self|value.

### `__pos__`

    
    __pos__()
    
+self

### `__pow__`

    
    __pow__(
        value, mod, /
    )
    
Return pow(self, value, mod).

### `__radd__`

    
    __radd__(
        value, /
    )
    
Return value+self.

### `__rand__`

    
    __rand__(
        value, /
    )
    
Return value&self.

### `__rfloordiv__`

    
    __rfloordiv__(
        value, /
    )
    
Return value//self.

### `__rmod__`

    
    __rmod__(
        value, /
    )
    
Return value%self.

### `__rmul__`

    
    __rmul__(
        value, /
    )
    
Return value*self.

### `__ror__`

    
    __ror__(
        value, /
    )
    
Return value|self.

### `__rpow__`

    
    __rpow__(
        value, mod, /
    )
    
Return pow(value, self, mod).

### `__rsub__`

    
    __rsub__(
        value, /
    )
    
Return value-self.

### `__rtruediv__`

    
    __rtruediv__(
        value, /
    )
    
Return value/self.

### `__rxor__`

    
    __rxor__(
        value, /
    )
    
Return value^self.

### `__sub__`

    
    __sub__(
        value, /
    )
    
Return self-value.

### `__truediv__`

    
    __truediv__(
        value, /
    )
    
Return self/value.

### `__xor__`

    
    __xor__(
        value, /
    )
    
Return self^value.

Class Variables  
---  
T  |   
base  |   
data  |   
dtype  |   
flags  |   
flat  |   
imag  |   
itemsize  |   
nbytes  |   
ndim  |   
real  |   
shape  |   
size  |   
strides  |   
© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/experimental/numpy/string_

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

