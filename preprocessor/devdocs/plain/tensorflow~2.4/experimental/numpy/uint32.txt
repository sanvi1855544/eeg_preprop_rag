# tf.experimental.numpy.uint32

Unsigned integer type, compatible with C `unsigned int`.

    
    tf.experimental.numpy.uint32(
        *args, **kwargs
    )
    
Character code: `'I'`. Canonical name: `np.uintc`. Alias on this platform:
`np.uint32`: 32-bit unsigned integer (0 to 4294967295).

## Methods

### `all`

    
    all()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `any`

    
    any()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `argmax`

    
    argmax()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `argmin`

    
    argmin()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `argsort`

    
    argsort()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `astype`

    
    astype()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `byteswap`

    
    byteswap()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `choose`

    
    choose()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `clip`

    
    clip()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `compress`

    
    compress()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `conj`

    
    conj()
    
### `conjugate`

    
    conjugate()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `copy`

    
    copy()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `cumprod`

    
    cumprod()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `cumsum`

    
    cumsum()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `diagonal`

    
    diagonal()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `dump`

    
    dump()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `dumps`

    
    dumps()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `fill`

    
    fill()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `flatten`

    
    flatten()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `getfield`

    
    getfield()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `item`

    
    item()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `itemset`

    
    itemset()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `max`

    
    max()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `mean`

    
    mean()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `min`

    
    min()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `newbyteorder`

    
    newbyteorder()
    
newbyteorder(new_order='S')

Return a new `dtype` with a different byte order.

Changes are also made in all fields and sub-arrays of the data type.

The `new_order` code can be any from the following:

  * 'S' - swap dtype from current to opposite endian

### '<', 'L'

\- little endian

### '>', 'B'

\- big endian

### '=', 'N'

\- native order

### '|', 'I'

\- ignore (no change to byte order)

## Parameters

new_order : str, optional Byte order to force; a value from the byte order
specifications above. The default value ('S') results in swapping the current
byte order. The code does a case-insensitive check on the first letter of
`new_order` for the alternatives above. For example, any of 'B' or 'b' or
'biggish' are valid to specify big-endian.

## Returns

new_dtype : dtype New `dtype` object with the given change to the byte order.

### `nonzero`

    
    nonzero()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `prod`

    
    prod()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `ptp`

    
    ptp()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `put`

    
    put()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `ravel`

    
    ravel()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `repeat`

    
    repeat()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `reshape`

    
    reshape()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `resize`

    
    resize()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `round`

    
    round()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `searchsorted`

    
    searchsorted()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `setfield`

    
    setfield()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `setflags`

    
    setflags()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `sort`

    
    sort()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `squeeze`

    
    squeeze()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `std`

    
    std()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `sum`

    
    sum()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `swapaxes`

    
    swapaxes()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `take`

    
    take()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `tobytes`

    
    tobytes()
    
### `tofile`

    
    tofile()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `tolist`

    
    tolist()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `tostring`

    
    tostring()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `trace`

    
    trace()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `transpose`

    
    transpose()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `var`

    
    var()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `view`

    
    view()
    
Not implemented (virtual attribute)

Class generic exists solely to derive numpy scalars from, and possesses,
albeit unimplemented, all the attributes of the ndarray class so as to provide
a uniform API.

See also the corresponding attribute of the derived class of interest.

### `__abs__`

    
    __abs__()
    
abs(self)

### `__add__`

    
    __add__(
        value, /
    )
    
Return self+value.

### `__and__`

    
    __and__(
        value, /
    )
    
Return self&value.

### `__bool__`

    
    __bool__()
    
self != 0

### `__eq__`

    
    __eq__(
        value, /
    )
    
Return self==value.

### `__floordiv__`

    
    __floordiv__(
        value, /
    )
    
Return self//value.

### `__ge__`

    
    __ge__(
        value, /
    )
    
Return self>=value.

### `__getitem__`

    
    __getitem__(
        key, /
    )
    
Return self[key].

### `__gt__`

    
    __gt__(
        value, /
    )
    
Return self>value.

### `__invert__`

    
    __invert__()
    
~self

### `__le__`

    
    __le__(
        value, /
    )
    
Return self<=value.

### `__lt__`

    
    __lt__(
        value, /
    )
    
Return self<value.

### `__mod__`

    
    __mod__(
        value, /
    )
    
Return self%value.

### `__mul__`

    
    __mul__(
        value, /
    )
    
Return self*value.

### `__ne__`

    
    __ne__(
        value, /
    )
    
Return self!=value.

### `__neg__`

    
    __neg__()
    
-self
### `__or__`

    
    __or__(
        value, /
    )
    
Return self|value.

### `__pos__`

    
    __pos__()
    
+self

### `__pow__`

    
    __pow__(
        value, mod, /
    )
    
Return pow(self, value, mod).

### `__radd__`

    
    __radd__(
        value, /
    )
    
Return value+self.

### `__rand__`

    
    __rand__(
        value, /
    )
    
Return value&self.

### `__rfloordiv__`

    
    __rfloordiv__(
        value, /
    )
    
Return value//self.

### `__rmod__`

    
    __rmod__(
        value, /
    )
    
Return value%self.

### `__rmul__`

    
    __rmul__(
        value, /
    )
    
Return value*self.

### `__ror__`

    
    __ror__(
        value, /
    )
    
Return value|self.

### `__rpow__`

    
    __rpow__(
        value, mod, /
    )
    
Return pow(value, self, mod).

### `__rsub__`

    
    __rsub__(
        value, /
    )
    
Return value-self.

### `__rtruediv__`

    
    __rtruediv__(
        value, /
    )
    
Return value/self.

### `__rxor__`

    
    __rxor__(
        value, /
    )
    
Return value^self.

### `__sub__`

    
    __sub__(
        value, /
    )
    
Return self-value.

### `__truediv__`

    
    __truediv__(
        value, /
    )
    
Return self/value.

### `__xor__`

    
    __xor__(
        value, /
    )
    
Return self^value.

Class Variables  
---  
T  |   
base  |   
data  |   
denominator  |   
dtype  |   
flags  |   
flat  |   
imag  |   
itemsize  |   
nbytes  |   
ndim  |   
numerator  |   
real  |   
shape  |   
size  |   
strides  |   
© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/experimental/numpy/uint32

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

