# tf.raw_ops.SparseApplyCenteredRMSProp

Update '*var' according to the centered RMSProp algorithm.

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.raw_ops.SparseApplyCenteredRMSProp`

    
    tf.raw_ops.SparseApplyCenteredRMSProp(
        var, mg, ms, mom, lr, rho, momentum, epsilon, grad, indices, use_locking=False,
        name=None
    )
    
The centered RMSProp algorithm uses an estimate of the centered second moment
(i.e., the variance) for normalization, as opposed to regular RMSProp, which
uses the (uncentered) second moment. This often helps with training, but is
slightly more expensive in terms of computation and memory.

Note that in dense implementation of this algorithm, mg, ms, and mom will
update even if the grad is zero, but in this sparse implementation, mg, ms,
and mom will not update in iterations during which the grad is zero.

mean_square = decay * mean_square + (1-decay) * gradient ** 2 mean_grad =
decay * mean_grad + (1-decay) * gradient Delta = learning_rate * gradient /
sqrt(mean_square + epsilon - mean_grad ** 2)

$$ms

$$mom

$$var  Args  
---  
`var` |  A mutable `Tensor`. Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`. Should be from a Variable().   
`mg` |  A mutable `Tensor`. Must have the same type as `var`. Should be from a Variable().   
`ms` |  A mutable `Tensor`. Must have the same type as `var`. Should be from a Variable().   
`mom` |  A mutable `Tensor`. Must have the same type as `var`. Should be from a Variable().   
`lr` |  A `Tensor`. Must have the same type as `var`. Scaling factor. Must be a scalar.   
`rho` |  A `Tensor`. Must have the same type as `var`. Decay rate. Must be a scalar.   
`momentum` |  A `Tensor`. Must have the same type as `var`.   
`epsilon` |  A `Tensor`. Must have the same type as `var`. Ridge term. Must be a scalar.   
`grad` |  A `Tensor`. Must have the same type as `var`. The gradient.   
`indices` |  A `Tensor`. Must be one of the following types: `int32`, `int64`. A vector of indices into the first dimension of var, ms and mom.   
`use_locking` |  An optional `bool`. Defaults to `False`. If `True`, updating of the var, mg, ms, and mom tensors is protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.   
`name` |  A name for the operation (optional).   
Returns  
---  
A mutable `Tensor`. Has the same type as `var`.  
Except as otherwise noted, the content of this page is licensed under the
Creative Commons Attribution 4.0 License, and code samples are licensed under
the Apache 2.0 License. For details, see the Google Developers Site Policies.
Java is a registered trademark of Oracle and/or its affiliates. Some content
is licensed under the numpy license.

Last updated 2021-02-18 UTC.

  * ### Stay connected
    * Blog 
    * GitHub 
    * Twitter 
    * YouTube 
  * ### Support
    * Issue tracker 
    * Release notes 
    * Stack Overflow 
    * Brand guidelines 
    * Cite TensorFlow 

  * Terms 
  * Privacy 
  * Sign up for the TensorFlow monthly newsletter Subscribe 

Language English  中文 – 简体

© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/raw_ops/SparseApplyCenteredRMSProp

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

