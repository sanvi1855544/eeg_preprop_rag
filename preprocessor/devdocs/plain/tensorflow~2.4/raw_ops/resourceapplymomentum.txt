# tf.raw_ops.ResourceApplyMomentum

Update '*var' according to the momentum scheme.

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.raw_ops.ResourceApplyMomentum`

    
    tf.raw_ops.ResourceApplyMomentum(
        var, accum, lr, grad, momentum, use_locking=False, use_nesterov=False, name=None
    )
    
Set use_nesterov = True if you want to use Nesterov momentum.

accum = accum * momentum + grad var -= lr * accum

Args  
---  
`var` |  A `Tensor` of type `resource`. Should be from a Variable().   
`accum` |  A `Tensor` of type `resource`. Should be from a Variable().   
`lr` |  A `Tensor`. Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `complex64`, `int64`, `qint8`, `quint8`, `qint32`, `bfloat16`, `uint16`, `complex128`, `half`, `uint32`, `uint64`. Scaling factor. Must be a scalar.   
`grad` |  A `Tensor`. Must have the same type as `lr`. The gradient.   
`momentum` |  A `Tensor`. Must have the same type as `lr`. Momentum. Must be a scalar.   
`use_locking` |  An optional `bool`. Defaults to `False`. If `True`, updating of the var and accum tensors will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.   
`use_nesterov` |  An optional `bool`. Defaults to `False`. If `True`, the tensor passed to compute grad will be var - lr * momentum * accum, so in the end, the var you get is actually var - lr * momentum * accum.   
`name` |  A name for the operation (optional).   
Returns  
---  
The created Operation.  
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/raw_ops/ResourceApplyMomentum

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

