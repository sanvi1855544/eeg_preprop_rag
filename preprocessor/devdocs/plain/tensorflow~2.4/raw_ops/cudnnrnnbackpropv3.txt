# tf.raw_ops.CudnnRNNBackpropV3

Backprop step of CudnnRNNV3.

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.raw_ops.CudnnRNNBackpropV3`

    
    tf.raw_ops.CudnnRNNBackpropV3(
        input, input_h, input_c, params, sequence_lengths, output, output_h, output_c,
        output_backprop, output_h_backprop, output_c_backprop, reserve_space,
        host_reserved, rnn_mode='lstm', input_mode='linear_input',
        direction='unidirectional', dropout=0, seed=0, seed2=0, num_proj=0,
        time_major=True, name=None
    )
    
Compute the backprop of both data and weights in a RNN. Takes an extra
"sequence_lengths" input than CudnnRNNBackprop.

rnn_mode: Indicates the type of the RNN model. input_mode: Indicates whether
there is a linear projection between the input and the actual computation
before the first layer. 'skip_input' is only allowed when input_size ==
num_units; 'auto_select' implies 'skip_input' when input_size == num_units;
otherwise, it implies 'linear_input'. direction: Indicates whether a
bidirectional model will be used. Should be "unidirectional" or
"bidirectional". dropout: Dropout probability. When set to 0., dropout is
disabled. seed: The 1st part of a seed to initialize dropout. seed2: The 2nd
part of a seed to initialize dropout. input: If time_major is true, this is a
3-D tensor with the shape of [seq_length, batch_size, input_size]. If
time_major is false, the shape is [batch_size, seq_length, input_size].
input_h: If time_major is true, this is a 3-D tensor with the shape of
[num_layer * dir, batch_size, num_units]. If time_major is false, the shape is
[batch_size, num_layer * dir, num_units]. input_c: For LSTM, a 3-D tensor with
the shape of [num_layer * dir, batch, num_units]. For other models, it is
ignored. params: A 1-D tensor that contains the weights and biases in an
opaque layout. The size must be created through CudnnRNNParamsSize, and
initialized separately. Note that they might not be compatible across
different generations. So it is a good idea to save and restore
sequence_lengths: a vector of lengths of each input sequence. output: If
time_major is true, this is a 3-D tensor with the shape of [seq_length,
batch_size, dir * num_units]. If time_major is false, the shape is
[batch_size, seq_length, dir * num_units]. output_h: The same shape has
input_h. output_c: The same shape as input_c for LSTM. An empty tensor for
other models. output_backprop: A 3-D tensor with the same shape as output in
the forward pass. output_h_backprop: A 3-D tensor with the same shape as
output_h in the forward pass. output_c_backprop: A 3-D tensor with the same
shape as output_c in the forward pass. time_major: Indicates whether the
input/output format is time major or batch major. reserve_space: The same
reserve_space produced in the forward operation. input_backprop: The backprop
to input in the forward pass. Has the same shape as input. input_h_backprop:
The backprop to input_h in the forward pass. Has the same shape as input_h.
input_c_backprop: The backprop to input_c in the forward pass. Has the same
shape as input_c. params_backprop: The backprop to the params buffer in the
forward pass. Has the same shape as params.

Args  
---  
`input` |  A `Tensor`. Must be one of the following types: `half`, `float32`, `float64`.   
`input_h` |  A `Tensor`. Must have the same type as `input`.   
`input_c` |  A `Tensor`. Must have the same type as `input`.   
`params` |  A `Tensor`. Must have the same type as `input`.   
`sequence_lengths` |  A `Tensor` of type `int32`.   
`output` |  A `Tensor`. Must have the same type as `input`.   
`output_h` |  A `Tensor`. Must have the same type as `input`.   
`output_c` |  A `Tensor`. Must have the same type as `input`.   
`output_backprop` |  A `Tensor`. Must have the same type as `input`.   
`output_h_backprop` |  A `Tensor`. Must have the same type as `input`.   
`output_c_backprop` |  A `Tensor`. Must have the same type as `input`.   
`reserve_space` |  A `Tensor`. Must have the same type as `input`.   
`host_reserved` |  A `Tensor` of type `int8`.   
`rnn_mode` |  An optional `string` from: `"rnn_relu", "rnn_tanh", "lstm", "gru"`. Defaults to `"lstm"`.   
`input_mode` |  An optional `string` from: `"linear_input", "skip_input", "auto_select"`. Defaults to `"linear_input"`.   
`direction` |  An optional `string` from: `"unidirectional", "bidirectional"`. Defaults to `"unidirectional"`.   
`dropout` |  An optional `float`. Defaults to `0`.   
`seed` |  An optional `int`. Defaults to `0`.   
`seed2` |  An optional `int`. Defaults to `0`.   
`num_proj` |  An optional `int`. Defaults to `0`.   
`time_major` |  An optional `bool`. Defaults to `True`.   
`name` |  A name for the operation (optional).   
Returns  
---  
A tuple of `Tensor` objects (input_backprop, input_h_backprop,
input_c_backprop, params_backprop).  
`input_backprop` |  A `Tensor`. Has the same type as `input`.   
`input_h_backprop` |  A `Tensor`. Has the same type as `input`.   
`input_c_backprop` |  A `Tensor`. Has the same type as `input`.   
`params_backprop` |  A `Tensor`. Has the same type as `input`.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/raw_ops/CudnnRNNBackpropV3

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

