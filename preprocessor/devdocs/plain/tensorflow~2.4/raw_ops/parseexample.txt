# tf.raw_ops.ParseExample

Transforms a vector of brain.Example protos (as strings) into typed tensors.

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.raw_ops.ParseExample`

    
    tf.raw_ops.ParseExample(
        serialized, names, sparse_keys, dense_keys, dense_defaults, sparse_types,
        dense_shapes, name=None
    )
    
Args  
---  
`serialized` |  A `Tensor` of type `string`. A vector containing a batch of binary serialized Example protos.   
`names` |  A `Tensor` of type `string`. A vector containing the names of the serialized protos. May contain, for example, table key (descriptive) names for the corresponding serialized protos. These are purely useful for debugging purposes, and the presence of values here has no effect on the output. May also be an empty vector if no names are available. If non-empty, this vector must be the same length as "serialized".   
`sparse_keys` |  A list of `Tensor` objects with type `string`. A list of Nsparse string Tensors (scalars). The keys expected in the Examples' features associated with sparse values.   
`dense_keys` |  A list of `Tensor` objects with type `string`. A list of Ndense string Tensors (scalars). The keys expected in the Examples' features associated with dense values.   
`dense_defaults` |  A list of `Tensor` objects with types from: `float32`, `int64`, `string`. A list of Ndense Tensors (some may be empty). dense_defaults[j] provides default values when the example's feature_map lacks dense_key[j]. If an empty Tensor is provided for dense_defaults[j], then the Feature dense_keys[j] is required. The input type is inferred from dense_defaults[j], even when it's empty. If dense_defaults[j] is not empty, and dense_shapes[j] is fully defined, then the shape of dense_defaults[j] must match that of dense_shapes[j]. If dense_shapes[j] has an undefined major dimension (variable strides dense feature), dense_defaults[j] must contain a single element: the padding element.   
`sparse_types` |  A list of `tf.DTypes` from: `tf.float32, tf.int64, tf.string`. A list of Nsparse types; the data types of data in each Feature given in sparse_keys. Currently the ParseExample supports DT_FLOAT (FloatList), DT_INT64 (Int64List), and DT_STRING (BytesList).   
`dense_shapes` |  A list of shapes (each a `tf.TensorShape` or list of `ints`). A list of Ndense shapes; the shapes of data in each Feature given in dense_keys. The number of elements in the Feature corresponding to dense_key[j] must always equal dense_shapes[j].NumEntries(). If dense_shapes[j] == (D0, D1, ..., DN) then the shape of output Tensor dense_values[j] will be (|serialized|, D0, D1, ..., DN): The dense outputs are just the inputs row-stacked by batch. This works for dense_shapes[j] = (-1, D1, ..., DN). In this case the shape of the output Tensor dense_values[j] will be (|serialized|, M, D1, .., DN), where M is the maximum number of blocks of elements of length D1 * .... * DN, across all minibatch entries in the input. Any minibatch entry with less than M blocks of elements of length D1 * ... * DN will be padded with the corresponding default_value scalar element along the second dimension.   
`name` |  A name for the operation (optional).   
Returns  
---  
A tuple of `Tensor` objects (sparse_indices, sparse_values, sparse_shapes,
dense_values).  
`sparse_indices` |  A list with the same length as `sparse_keys` of `Tensor` objects with type `int64`.   
`sparse_values` |  A list of `Tensor` objects of type `sparse_types`.   
`sparse_shapes` |  A list with the same length as `sparse_keys` of `Tensor` objects with type `int64`.   
`dense_values` |  A list of `Tensor` objects. Has the same type as `dense_defaults`.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/raw_ops/ParseExample

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

