# tf.saved_model.SaveOptions

Options for saving to SavedModel.

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.saved_model.SaveOptions`

    
    tf.saved_model.SaveOptions(
        namespace_whitelist=None, save_debug_info=False, function_aliases=None,
        experimental_io_device=None, experimental_variable_policy=None
    )
    
This function may be used in the `options` argument in functions that save a
SavedModel (`tf.saved_model.save`, `tf.keras.models.save_model`).

Args  
---  
`namespace_whitelist` |  List of strings containing op namespaces to whitelist when saving a model. Saving an object that uses namespaced ops must explicitly add all namespaces to the whitelist. The namespaced ops must be registered into the framework when loading the SavedModel.   
`save_debug_info` |  Boolean indicating whether debug information is saved. If True, then a debug/saved_model_debug_info.pb file will be written with the contents of a GraphDebugInfo binary protocol buffer containing stack trace information for all ops and functions that are saved.   
`function_aliases` |  Python dict. Mapping from string to object returned by @tf.function. A single tf.function can generate many ConcreteFunctions. If a downstream tool wants to refer to all concrete functions generated by a single tf.function you can use the `function_aliases` argument to store a map from the alias name to all concrete function names. E.g. 
    
    class MyModel:
    @tf.function
    def func():
    ...
    
    @tf.function
    def serve():
    ...
    func()
    
    model = MyModel()
    signatures = {
    'serving_default': model.serve.get_concrete_function(),
    }
    options = tf.saved_model.SaveOptions(function_aliases={
    'my_func': func,
    })
    tf.saved_model.save(model, export_dir, signatures, options)
      
`experimental_io_device` |  string. Applies in a distributed setting. Tensorflow device to use to access the filesystem. If `None` (default) then for each variable the filesystem is accessed from the CPU:0 device of the host where that variable is assigned. If specified, the filesystem is instead accessed from that device for all variables. This is for example useful if you want to save to a local directory, such as "/tmp" when running in a distributed setting. In that case pass a device for the host where the "/tmp" directory is accessible.   
`experimental_variable_policy` |  The policy to apply to variables when saving. This is either a `saved_model.experimental.VariablePolicy` enum instance or one of its value strings (case is not important). See that enum documentation for details. A value of `None` corresponds to the default policy.   
Class Variables  
---  
experimental_io_device  |   
experimental_variable_policy  |   
function_aliases  |   
namespace_whitelist  |   
save_debug_info  |   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/saved_model/SaveOptions

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

