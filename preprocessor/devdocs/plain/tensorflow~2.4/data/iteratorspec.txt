# tf.data.IteratorSpec

Type specification for `tf.data.Iterator`.

Inherits From: `TypeSpec`

    
    tf.data.IteratorSpec(
        element_spec
    )
    
For instance, `tf.data.IteratorSpec` can be used to define a tf.function that
takes `tf.data.Iterator` as an input argument:

    
    @tf.function(input_signature=[tf.data.IteratorSpec(
      tf.TensorSpec(shape=(), dtype=tf.int32, name=None))])
    def square(iterator):
      x = iterator.get_next()
      return x * x
    dataset = tf.data.Dataset.from_tensors(5)
    iterator = iter(dataset)
    print(square(iterator))
    tf.Tensor(25, shape=(), dtype=int32)
    
Attributes  
---  
`element_spec` |  A nested structure of `TypeSpec` objects that represents the type specification of the iterator elements.   
`value_type` |  The Python type for values that are compatible with this TypeSpec. In particular, all values that are compatible with this TypeSpec must be an instance of this type.   
## Methods

### `from_value`

View source

    
    @staticmethod
    from_value(
        value
    )
    
### `is_compatible_with`

View source

    
    is_compatible_with(
        spec_or_value
    )
    
Returns true if `spec_or_value` is compatible with this TypeSpec.

### `most_specific_compatible_type`

View source

    
    most_specific_compatible_type(
        other
    )
    
Returns the most specific TypeSpec compatible with `self` and `other`.

Args  
---  
`other` |  A `TypeSpec`.   
Raises  
---  
`ValueError` |  If there is no TypeSpec that is compatible with both `self` and `other`.   
### `__eq__`

View source

    
    __eq__(
        other
    )
    
Return self==value.

### `__ne__`

View source

    
    __ne__(
        other
    )
    
Return self!=value.

Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/data/IteratorSpec

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

