# Module: tf.compat.v1.linalg

Operations for linear algebra.

## Modules

`experimental` module: Public API for tf.linalg.experimental namespace.

## Classes

`class LinearOperator`: Base class defining a [batch of] linear operator[s].

`class LinearOperatorAdjoint`: `LinearOperator` representing the adjoint of
another operator.

`class LinearOperatorBlockDiag`: Combines one or more `LinearOperators` in to
a Block Diagonal matrix.

`class LinearOperatorBlockLowerTriangular`: Combines `LinearOperators` into a
blockwise lower-triangular matrix.

`class LinearOperatorCirculant`: `LinearOperator` acting like a circulant
matrix.

`class LinearOperatorCirculant2D`: `LinearOperator` acting like a block
circulant matrix.

`class LinearOperatorCirculant3D`: `LinearOperator` acting like a nested block
circulant matrix.

`class LinearOperatorComposition`: Composes one or more `LinearOperators`.

`class LinearOperatorDiag`: `LinearOperator` acting like a [batch] square
diagonal matrix.

`class LinearOperatorFullMatrix`: `LinearOperator` that wraps a [batch]
matrix.

`class LinearOperatorHouseholder`: `LinearOperator` acting like a [batch] of
Householder transformations.

`class LinearOperatorIdentity`: `LinearOperator` acting like a [batch] square
identity matrix.

`class LinearOperatorInversion`: `LinearOperator` representing the inverse of
another operator.

`class LinearOperatorKronecker`: Kronecker product between two
`LinearOperators`.

`class LinearOperatorLowRankUpdate`: Perturb a `LinearOperator` with a rank
`K` update.

`class LinearOperatorLowerTriangular`: `LinearOperator` acting like a [batch]
square lower triangular matrix.

`class LinearOperatorPermutation`: `LinearOperator` acting like a [batch] of
permutation matrices.

`class LinearOperatorScaledIdentity`: `LinearOperator` acting like a scaled
[batch] identity matrix `A = c I`.

`class LinearOperatorToeplitz`: `LinearOperator` acting like a [batch] of
toeplitz matrices.

`class LinearOperatorTridiag`: `LinearOperator` acting like a [batch] square
tridiagonal matrix.

`class LinearOperatorZeros`: `LinearOperator` acting like a [batch] zero
matrix.

## Functions

`adjoint(...)`: Transposes the last two dimensions of and conjugates tensor
`matrix`.

`band_part(...)`: Copy a tensor setting everything outside a central band in
each innermost matrix to zero.

`cholesky(...)`: Computes the Cholesky decomposition of one or more square
matrices.

`cholesky_solve(...)`: Solves systems of linear eqns `A X = RHS`, given
Cholesky factorizations.

`cross(...)`: Compute the pairwise cross product.

`det(...)`: Computes the determinant of one or more square matrices.

`diag(...)`: Returns a batched diagonal tensor with given batched diagonal
values.

`diag_part(...)`: Returns the batched diagonal part of a batched tensor.

`eigh(...)`: Computes the eigen decomposition of a batch of self-adjoint
matrices.

`eigvalsh(...)`: Computes the eigenvalues of one or more self-adjoint
matrices.

`einsum(...)`: Tensor contraction over specified indices and outer product.

`expm(...)`: Computes the matrix exponential of one or more square matrices.

`eye(...)`: Construct an identity matrix, or a batch of matrices.

`global_norm(...)`: Computes the global norm of multiple tensors.

`inv(...)`: Computes the inverse of one or more square invertible matrices or
their adjoints (conjugate transposes).

`l2_normalize(...)`: Normalizes along dimension `axis` using an L2 norm.
(deprecated arguments)

`logdet(...)`: Computes log of the determinant of a hermitian positive
definite matrix.

`logm(...)`: Computes the matrix logarithm of one or more square matrices:

`lstsq(...)`: Solves one or more linear least-squares problems.

`lu(...)`: Computes the LU decomposition of one or more square matrices.

`lu_matrix_inverse(...)`: Computes the inverse given the LU decomposition(s)
of one or more matrices.

`lu_reconstruct(...)`: The reconstruct one or more matrices from their LU
decomposition(s).

`lu_solve(...)`: Solves systems of linear eqns `A X = RHS`, given LU
factorizations.

`matmul(...)`: Multiplies matrix `a` by matrix `b`, producing `a` * `b`.

`matrix_rank(...)`: Compute the matrix rank of one or more matrices.

`matrix_transpose(...)`: Transposes last two dimensions of tensor `a`.

`matvec(...)`: Multiplies matrix `a` by vector `b`, producing `a` * `b`.

`norm(...)`: Computes the norm of vectors, matrices, and tensors. (deprecated
arguments)

`normalize(...)`: Normalizes `tensor` along dimension `axis` using specified
norm.

`pinv(...)`: Compute the Moore-Penrose pseudo-inverse of one or more matrices.

`qr(...)`: Computes the QR decompositions of one or more matrices.

`set_diag(...)`: Returns a batched matrix tensor with new batched diagonal
values.

`slogdet(...)`: Computes the sign and the log of the absolute value of the
determinant of

`solve(...)`: Solves systems of linear equations.

`sqrtm(...)`: Computes the matrix square root of one or more square matrices:

`svd(...)`: Computes the singular value decompositions of one or more
matrices.

`tensor_diag(...)`: Returns a diagonal tensor with a given diagonal values.

`tensor_diag_part(...)`: Returns the diagonal part of the tensor.

`tensordot(...)`: Tensor contraction of a and b along specified axes and outer
product.

`trace(...)`: Compute the trace of a tensor `x`.

`transpose(...)`: Transposes last two dimensions of tensor `a`.

`triangular_solve(...)`: Solve systems of linear equations with upper or lower
triangular matrices.

`tridiagonal_matmul(...)`: Multiplies tridiagonal matrix by matrix.

`tridiagonal_solve(...)`: Solves tridiagonal systems of equations.

Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/compat/v1/linalg

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

