# tf.compat.v1.keras.initializers.Constant

Initializer that generates tensors with constant values.

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.constant_initializer`, `tf.compat.v1.initializers.constant`,
`tf.compat.v1.keras.initializers.constant`

    
    tf.compat.v1.keras.initializers.Constant(
        value=0, dtype=tf.dtypes.float32, verify_shape=False
    )
    
The resulting tensor is populated with values of type `dtype`, as specified by
arguments `value` following the desired `shape` of the new tensor (see
examples below).

The argument `value` can be a constant value, or a list of values of type
`dtype`. If `value` is a list, then the length of the list must be less than
or equal to the number of elements implied by the desired shape of the tensor.
In the case where the total number of elements in `value` is less than the
number of elements required by the tensor shape, the last element in `value`
will be used to fill the remaining entries. If the total number of elements in
`value` is greater than the number of elements required by the tensor shape,
the initializer will raise a `ValueError`.

Args  
---  
`value` |  A Python scalar, list or tuple of values, or a N-dimensional numpy array. All elements of the initialized variable will be set to the corresponding value in the `value` argument.   
`dtype` |  Default data type, used if no `dtype` argument is provided when calling the initializer.   
`verify_shape` |  Boolean that enables verification of the shape of `value`. If `True`, the initializer will throw an error if the shape of `value` is not compatible with the shape of the initialized tensor.   
Raises  
---  
`TypeError` |  If the input `value` is not one of the expected types.   
#### Examples:

The following example can be rewritten using a numpy.ndarray instead of the
`value` list, even reshaped, as shown in the two commented lines below the
`value` list initialization.

    
    value = [0, 1, 2, 3, 4, 5, 6, 7]
    init = tf.compat.v1.constant_initializer(value)
    # fitting shape
    with tf.compat.v1.Session():
      x = tf.compat.v1.get_variable('x', shape=[2, 4], initializer=init)
      x.initializer.run()
      print(x.eval())
    [[0. 1. 2. 3.]
     [4. 5. 6. 7.]]
    # Larger shape
    with tf.compat.v1.Session():
      y = tf.compat.v1.get_variable('y', shape=[3, 4], initializer=init)
      y.initializer.run()
      print(y.eval())
    [[0.  1.  2.  3.]
     [4.  5.  6.  7.]
     [7.  7.  7.  7.]]
    # Smaller shape
    with tf.compat.v1.Session():
      z = tf.compat.v1.get_variable('z', shape=[2, 3], initializer=init)
    Traceback (most recent call last):
    
    ValueError: Too many elements provided. Needed at most 6, but received 8
    # Shape verification
    init_verify = tf.compat.v1.constant_initializer(value, verify_shape=True)
    with tf.compat.v1.Session():
     u = tf.compat.v1.get_variable('u', shape=[3, 4],
                                   initializer=init_verify)
    Traceback (most recent call last):
    
    TypeError: Expected Tensor's shape: (3, 4), got (8,).
    
## Methods

### `from_config`

View source

    
    @classmethod
    from_config(
        config
    )
    
Instantiates an initializer from a configuration dictionary.

#### Example:

    
    initializer = RandomUniform(-1, 1)
    config = initializer.get_config()
    initializer = RandomUniform.from_config(config)
    
Args  
---  
`config` |  A Python dictionary. It will typically be the output of `get_config`.   
Returns  
---  
An Initializer instance.  
### `get_config`

View source

    
    get_config()
    
Returns the configuration of the initializer as a JSON-serializable dict.

Returns  
---  
A JSON-serializable Python dict.  
### `__call__`

View source

    
    __call__(
        shape, dtype=None, partition_info=None, verify_shape=None
    )
    
Returns a tensor object initialized as specified by the initializer.

Args  
---  
`shape` |  Shape of the tensor.   
`dtype` |  Optional dtype of the tensor. If not provided use the initializer dtype.   
`partition_info` |  Optional information about the possible partitioning of a tensor.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/compat/v1/keras/initializers/Constant

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

