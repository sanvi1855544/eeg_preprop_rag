# Module: tf.compat.v1.raw_ops

Public API for tf.raw_ops namespace.

## Functions

`Abort(...)`: Raise a exception to abort the process when called.

`Abs(...)`: Computes the absolute value of a tensor.

`AccumulateNV2(...)`: Returns the element-wise sum of a list of tensors.

`AccumulatorApplyGradient(...)`: Applies a gradient to a given accumulator.

`AccumulatorNumAccumulated(...)`: Returns the number of gradients aggregated
in the given accumulators.

`AccumulatorSetGlobalStep(...)`: Updates the accumulator with a new value for
global_step.

`AccumulatorTakeGradient(...)`: Extracts the average gradient in the given
ConditionalAccumulator.

`Acos(...)`: Computes acos of x element-wise.

`Acosh(...)`: Computes inverse hyperbolic cosine of x element-wise.

`Add(...)`: Returns x + y element-wise.

`AddManySparseToTensorsMap(...)`: Add an `N`-minibatch `SparseTensor` to a
`SparseTensorsMap`, return `N` handles.

`AddN(...)`: Add all input tensors element wise.

`AddSparseToTensorsMap(...)`: Add a `SparseTensor` to a `SparseTensorsMap`
return its handle.

`AddV2(...)`: Returns x + y element-wise.

`AdjustContrast(...)`: Deprecated. Disallowed in GraphDef version >= 2.

`AdjustContrastv2(...)`: Adjust the contrast of one or more images.

`AdjustHue(...)`: Adjust the hue of one or more images.

`AdjustSaturation(...)`: Adjust the saturation of one or more images.

`All(...)`: Computes the "logical and" of elements across dimensions of a
tensor.

`AllCandidateSampler(...)`: Generates labels for candidate sampling with a
learned unigram distribution.

`AllToAll(...)`: An Op to exchange data across TPU replicas.

`Angle(...)`: Returns the argument of a complex number.

`AnonymousIterator(...)`: A container for an iterator resource.

`AnonymousIteratorV2(...)`: A container for an iterator resource.

`AnonymousMemoryCache(...)`

`AnonymousMultiDeviceIterator(...)`: A container for a multi device iterator
resource.

`AnonymousRandomSeedGenerator(...)`

`AnonymousSeedGenerator(...)`

`Any(...)`: Computes the "logical or" of elements across dimensions of a
tensor.

`ApplyAdaMax(...)`: Update '*var' according to the AdaMax algorithm.

`ApplyAdadelta(...)`: Update '*var' according to the adadelta scheme.

`ApplyAdagrad(...)`: Update '*var' according to the adagrad scheme.

`ApplyAdagradDA(...)`: Update '*var' according to the proximal adagrad scheme.

`ApplyAdagradV2(...)`: Update '*var' according to the adagrad scheme.

`ApplyAdam(...)`: Update '*var' according to the Adam algorithm.

`ApplyAddSign(...)`: Update '*var' according to the AddSign update.

`ApplyCenteredRMSProp(...)`: Update '*var' according to the centered RMSProp
algorithm.

`ApplyFtrl(...)`: Update '*var' according to the Ftrl-proximal scheme.

`ApplyFtrlV2(...)`: Update '*var' according to the Ftrl-proximal scheme.

`ApplyGradientDescent(...)`: Update '*var' by subtracting 'alpha' * 'delta'
from it.

`ApplyMomentum(...)`: Update '*var' according to the momentum scheme.

`ApplyPowerSign(...)`: Update '*var' according to the AddSign update.

`ApplyProximalAdagrad(...)`: Update 'var' and 'accum' according to FOBOS with
Adagrad learning rate.

`ApplyProximalGradientDescent(...)`: Update '*var' as FOBOS algorithm with
fixed learning rate.

`ApplyRMSProp(...)`: Update '*var' according to the RMSProp algorithm.

`ApproximateEqual(...)`: Returns the truth value of abs(x-y) < tolerance
element-wise.

`ArgMax(...)`: Returns the index with the largest value across dimensions of a
tensor.

`ArgMin(...)`: Returns the index with the smallest value across dimensions of
a tensor.

`AsString(...)`: Converts each entry in the given tensor to strings.

`Asin(...)`: Computes the trignometric inverse sine of x element-wise.

`Asinh(...)`: Computes inverse hyperbolic sine of x element-wise.

`Assert(...)`: Asserts that the given condition is true.

`AssertCardinalityDataset(...)`

`AssertNextDataset(...)`: A transformation that asserts which transformations
happen next.

`Assign(...)`: Update 'ref' by assigning 'value' to it.

`AssignAdd(...)`: Update 'ref' by adding 'value' to it.

`AssignAddVariableOp(...)`: Adds a value to the current value of a variable.

`AssignSub(...)`: Update 'ref' by subtracting 'value' from it.

`AssignSubVariableOp(...)`: Subtracts a value from the current value of a
variable.

`AssignVariableOp(...)`: Assigns a new value to a variable.

`Atan(...)`: Computes the trignometric inverse tangent of x element-wise.

`Atan2(...)`: Computes arctangent of `y/x` element-wise, respecting signs of
the arguments.

`Atanh(...)`: Computes inverse hyperbolic tangent of x element-wise.

`AudioSpectrogram(...)`: Produces a visualization of audio data over time.

`AudioSummary(...)`: Outputs a `Summary` protocol buffer with audio.

`AudioSummaryV2(...)`: Outputs a `Summary` protocol buffer with audio.

`AutoShardDataset(...)`: Creates a dataset that shards the input dataset.

`AvgPool(...)`: Performs average pooling on the input.

`AvgPool3D(...)`: Performs 3D average pooling on the input.

`AvgPool3DGrad(...)`: Computes gradients of average pooling function.

`AvgPoolGrad(...)`: Computes gradients of the average pooling function.

`BandedTriangularSolve(...)`

`Barrier(...)`: Defines a barrier that persists across different graph
executions.

`BarrierClose(...)`: Closes the given barrier.

`BarrierIncompleteSize(...)`: Computes the number of incomplete elements in
the given barrier.

`BarrierInsertMany(...)`: For each key, assigns the respective value to the
specified component.

`BarrierReadySize(...)`: Computes the number of complete elements in the given
barrier.

`BarrierTakeMany(...)`: Takes the given number of completed elements from a
barrier.

`Batch(...)`: Batches all input tensors nondeterministically.

`BatchCholesky(...)`

`BatchCholeskyGrad(...)`

`BatchDataset(...)`: Creates a dataset that batches `batch_size` elements from
`input_dataset`.

`BatchDatasetV2(...)`: Creates a dataset that batches `batch_size` elements
from `input_dataset`.

`BatchFFT(...)`

`BatchFFT2D(...)`

`BatchFFT3D(...)`

`BatchFunction(...)`: Batches all the inputs tensors to the computation done
by the function.

`BatchIFFT(...)`

`BatchIFFT2D(...)`

`BatchIFFT3D(...)`

`BatchMatMul(...)`: Multiplies slices of two tensors in batches.

`BatchMatMulV2(...)`: Multiplies slices of two tensors in batches.

`BatchMatrixBandPart(...)`

`BatchMatrixDeterminant(...)`

`BatchMatrixDiag(...)`

`BatchMatrixDiagPart(...)`

`BatchMatrixInverse(...)`

`BatchMatrixSetDiag(...)`

`BatchMatrixSolve(...)`

`BatchMatrixSolveLs(...)`

`BatchMatrixTriangularSolve(...)`

`BatchNormWithGlobalNormalization(...)`: Batch normalization.

`BatchNormWithGlobalNormalizationGrad(...)`: Gradients for batch
normalization.

`BatchSelfAdjointEig(...)`

`BatchSelfAdjointEigV2(...)`

`BatchSvd(...)`

`BatchToSpace(...)`: BatchToSpace for 4-D tensors of type T.

`BatchToSpaceND(...)`: BatchToSpace for N-D tensors of type T.

`BesselI0(...)`

`BesselI0e(...)`

`BesselI1(...)`

`BesselI1e(...)`

`BesselJ0(...)`

`BesselJ1(...)`

`BesselK0(...)`

`BesselK0e(...)`

`BesselK1(...)`

`BesselK1e(...)`

`BesselY0(...)`

`BesselY1(...)`

`Betainc(...)`: Compute the regularized incomplete beta integral \\(I_x(a,
b)\\).

`BiasAdd(...)`: Adds `bias` to `value`.

`BiasAddGrad(...)`: The backward operation for "BiasAdd" on the "bias" tensor.

`BiasAddV1(...)`: Adds `bias` to `value`.

`Bincount(...)`: Counts the number of occurrences of each value in an integer
array.

`Bitcast(...)`: Bitcasts a tensor from one type to another without copying
data.

`BitwiseAnd(...)`: Elementwise computes the bitwise AND of `x` and `y`.

`BitwiseOr(...)`: Elementwise computes the bitwise OR of `x` and `y`.

`BitwiseXor(...)`: Elementwise computes the bitwise XOR of `x` and `y`.

`BlockLSTM(...)`: Computes the LSTM cell forward propagation for all the time
steps.

`BlockLSTMGrad(...)`: Computes the LSTM cell backward propagation for the
entire time sequence.

`BlockLSTMGradV2(...)`: Computes the LSTM cell backward propagation for the
entire time sequence.

`BlockLSTMV2(...)`: Computes the LSTM cell forward propagation for all the
time steps.

`BoostedTreesAggregateStats(...)`: Aggregates the summary of accumulated stats
for the batch.

`BoostedTreesBucketize(...)`: Bucketize each feature based on bucket
boundaries.

`BoostedTreesCalculateBestFeatureSplit(...)`: Calculates gains for each
feature and returns the best possible split information for the feature.

`BoostedTreesCalculateBestFeatureSplitV2(...)`: Calculates gains for each
feature and returns the best possible split information for each node.
However, if no split is found, then no split information is returned for that
node.

`BoostedTreesCalculateBestGainsPerFeature(...)`: Calculates gains for each
feature and returns the best possible split information for the feature.

`BoostedTreesCenterBias(...)`: Calculates the prior from the training data
(the bias) and fills in the first node with the logits' prior. Returns a
boolean indicating whether to continue centering.

`BoostedTreesCreateEnsemble(...)`: Creates a tree ensemble model and returns a
handle to it.

`BoostedTreesCreateQuantileStreamResource(...)`: Create the Resource for
Quantile Streams.

`BoostedTreesDeserializeEnsemble(...)`: Deserializes a serialized tree
ensemble config and replaces current tree

`BoostedTreesEnsembleResourceHandleOp(...)`: Creates a handle to a
BoostedTreesEnsembleResource

`BoostedTreesExampleDebugOutputs(...)`: Debugging/model interpretability
outputs for each example.

`BoostedTreesFlushQuantileSummaries(...)`: Flush the quantile summaries from
each quantile stream resource.

`BoostedTreesGetEnsembleStates(...)`: Retrieves the tree ensemble resource
stamp token, number of trees and growing statistics.

`BoostedTreesMakeQuantileSummaries(...)`: Makes the summary of quantiles for
the batch.

`BoostedTreesMakeStatsSummary(...)`: Makes the summary of accumulated stats
for the batch.

`BoostedTreesPredict(...)`: Runs multiple additive regression ensemble
predictors on input instances and

`BoostedTreesQuantileStreamResourceAddSummaries(...)`: Add the quantile
summaries to each quantile stream resource.

`BoostedTreesQuantileStreamResourceDeserialize(...)`: Deserialize bucket
boundaries and ready flag into current QuantileAccumulator.

`BoostedTreesQuantileStreamResourceFlush(...)`: Flush the summaries for a
quantile stream resource.

`BoostedTreesQuantileStreamResourceGetBucketBoundaries(...)`: Generate the
bucket boundaries for each feature based on accumulated summaries.

`BoostedTreesQuantileStreamResourceHandleOp(...)`: Creates a handle to a
BoostedTreesQuantileStreamResource.

`BoostedTreesSerializeEnsemble(...)`: Serializes the tree ensemble to a proto.

`BoostedTreesSparseAggregateStats(...)`: Aggregates the summary of accumulated
stats for the batch.

`BoostedTreesSparseCalculateBestFeatureSplit(...)`: Calculates gains for each
feature and returns the best possible split information for the feature.

`BoostedTreesTrainingPredict(...)`: Runs multiple additive regression ensemble
predictors on input instances and

`BoostedTreesUpdateEnsemble(...)`: Updates the tree ensemble by either adding
a layer to the last tree being grown

`BoostedTreesUpdateEnsembleV2(...)`: Updates the tree ensemble by adding a
layer to the last tree being grown

`BroadcastArgs(...)`: Return the shape of s0 op s1 with broadcast.

`BroadcastGradientArgs(...)`: Return the reduction indices for computing
gradients of s0 op s1 with broadcast.

`BroadcastTo(...)`: Broadcast an array for a compatible shape.

`Bucketize(...)`: Bucketizes 'input' based on 'boundaries'.

`BytesProducedStatsDataset(...)`: Records the bytes size of each element of
`input_dataset` in a StatsAggregator.

`CSRSparseMatrixComponents(...)`: Reads out the CSR components at batch
`index`.

`CSRSparseMatrixToDense(...)`: Convert a (possibly batched) CSRSparseMatrix to
dense.

`CSRSparseMatrixToSparseTensor(...)`: Converts a (possibly batched)
CSRSparesMatrix to a SparseTensor.

`CSVDataset(...)`

`CSVDatasetV2(...)`

`CTCBeamSearchDecoder(...)`: Performs beam search decoding on the logits given
in input.

`CTCGreedyDecoder(...)`: Performs greedy decoding on the logits given in
inputs.

`CTCLoss(...)`: Calculates the CTC Loss (log probability) for each batch
entry. Also calculates

`CTCLossV2(...)`: Calculates the CTC Loss (log probability) for each batch
entry. Also calculates

`CacheDataset(...)`: Creates a dataset that caches elements from
`input_dataset`.

`CacheDatasetV2(...)`

`Case(...)`: An n-way switch statement which calls a single branch function.

`Cast(...)`: Cast x of type SrcT to y of DstT.

`Ceil(...)`: Returns element-wise smallest integer not less than x.

`CheckNumerics(...)`: Checks a tensor for NaN and Inf values.

`CheckNumericsV2(...)`: Checks a tensor for NaN, -Inf and +Inf values.

`Cholesky(...)`: Computes the Cholesky decomposition of one or more square
matrices.

`CholeskyGrad(...)`: Computes the reverse mode backpropagated gradient of the
Cholesky algorithm.

`ChooseFastestBranchDataset(...)`

`ChooseFastestDataset(...)`

`ClipByValue(...)`: Clips tensor values to a specified min and max.

`CloseSummaryWriter(...)`

`CollectiveBcastRecv(...)`: Receives a tensor value broadcast from another
device.

`CollectiveBcastSend(...)`: Broadcasts a tensor value to one or more other
devices.

`CollectiveGather(...)`: Mutually accumulates multiple tensors of identical
type and shape.

`CollectiveGatherV2(...)`: Mutually accumulates multiple tensors of identical
type and shape.

`CollectivePermute(...)`: An Op to permute tensors across replicated TPU
instances.

`CollectiveReduce(...)`: Mutually reduces multiple tensors of identical type
and shape.

`CollectiveReduceV2(...)`: Mutually reduces multiple tensors of identical type
and shape.

`CombinedNonMaxSuppression(...)`: Greedily selects a subset of bounding boxes
in descending order of score,

`CompareAndBitpack(...)`: Compare values of `input` to `threshold` and pack
resulting bits into a `uint8`.

`Complex(...)`: Converts two real numbers to a complex number.

`ComplexAbs(...)`: Computes the complex absolute value of a tensor.

`CompressElement(...)`: Compresses a dataset element.

`ComputeAccidentalHits(...)`: Computes the ids of the positions in
sampled_candidates that match true_labels.

`ComputeBatchSize(...)`: Computes the static batch size of a dataset sans
partial batches.

`Concat(...)`: Concatenates tensors along one dimension.

`ConcatOffset(...)`: Computes offsets of concat inputs within its output.

`ConcatV2(...)`: Concatenates tensors along one dimension.

`ConcatenateDataset(...)`: Creates a dataset that concatenates `input_dataset`
with `another_dataset`.

`ConditionalAccumulator(...)`: A conditional accumulator for aggregating
gradients.

`ConfigureDistributedTPU(...)`: Sets up the centralized structures for a
distributed TPU system.

`ConfigureTPUEmbedding(...)`: Sets up TPUEmbedding in a distributed TPU
system.

`Conj(...)`: Returns the complex conjugate of a complex number.

`ConjugateTranspose(...)`: Shuffle dimensions of x according to a permutation
and conjugate the result.

`Const(...)`: Returns a constant tensor.

`ConsumeMutexLock(...)`: This op consumes a lock created by `MutexLock`.

`ControlTrigger(...)`: Does nothing. Serves as a control trigger for
scheduling.

`Conv2D(...)`: Computes a 2-D convolution given 4-D `input` and `filter`
tensors.

`Conv2DBackpropFilter(...)`: Computes the gradients of convolution with
respect to the filter.

`Conv2DBackpropInput(...)`: Computes the gradients of convolution with respect
to the input.

`Conv3D(...)`: Computes a 3-D convolution given 5-D `input` and `filter`
tensors.

`Conv3DBackpropFilter(...)`: Computes the gradients of 3-D convolution with
respect to the filter.

`Conv3DBackpropFilterV2(...)`: Computes the gradients of 3-D convolution with
respect to the filter.

`Conv3DBackpropInput(...)`: Computes the gradients of 3-D convolution with
respect to the input.

`Conv3DBackpropInputV2(...)`: Computes the gradients of 3-D convolution with
respect to the input.

`Copy(...)`: Copy a tensor from CPU-to-CPU or GPU-to-GPU.

`CopyHost(...)`: Copy a tensor to host.

`Cos(...)`: Computes cos of x element-wise.

`Cosh(...)`: Computes hyperbolic cosine of x element-wise.

`CountUpTo(...)`: Increments 'ref' until it reaches 'limit'.

`CreateSummaryDbWriter(...)`

`CreateSummaryFileWriter(...)`

`CropAndResize(...)`: Extracts crops from the input image tensor and resizes
them.

`CropAndResizeGradBoxes(...)`: Computes the gradient of the crop_and_resize op
wrt the input boxes tensor.

`CropAndResizeGradImage(...)`: Computes the gradient of the crop_and_resize op
wrt the input image tensor.

`Cross(...)`: Compute the pairwise cross product.

`CrossReplicaSum(...)`: An Op to sum inputs across replicated TPU instances.

`CudnnRNN(...)`: A RNN backed by cuDNN.

`CudnnRNNBackprop(...)`: Backprop step of CudnnRNN.

`CudnnRNNBackpropV2(...)`: Backprop step of CudnnRNN.

`CudnnRNNBackpropV3(...)`: Backprop step of CudnnRNNV3.

`CudnnRNNCanonicalToParams(...)`: Converts CudnnRNN params from canonical form
to usable form.

`CudnnRNNCanonicalToParamsV2(...)`: Converts CudnnRNN params from canonical
form to usable form. It supports the projection in LSTM.

`CudnnRNNParamsSize(...)`: Computes size of weights that can be used by a
Cudnn RNN model.

`CudnnRNNParamsToCanonical(...)`: Retrieves CudnnRNN params in canonical form.

`CudnnRNNParamsToCanonicalV2(...)`: Retrieves CudnnRNN params in canonical
form. It supports the projection in LSTM.

`CudnnRNNV2(...)`: A RNN backed by cuDNN.

`CudnnRNNV3(...)`: A RNN backed by cuDNN.

`Cumprod(...)`: Compute the cumulative product of the tensor `x` along `axis`.

`Cumsum(...)`: Compute the cumulative sum of the tensor `x` along `axis`.

`CumulativeLogsumexp(...)`: Compute the cumulative product of the tensor `x`
along `axis`.

`DataFormatDimMap(...)`: Returns the dimension index in the destination data
format given the one in

`DataFormatVecPermute(...)`: Permute input tensor from `src_format` to
`dst_format`.

`DataServiceDataset(...)`: Creates a dataset that reads data from the tf.data
service.

`DatasetCardinality(...)`: Returns the cardinality of `input_dataset`.

`DatasetFromGraph(...)`: Creates a dataset from the given `graph_def`.

`DatasetToGraph(...)`: Returns a serialized GraphDef representing
`input_dataset`.

`DatasetToGraphV2(...)`: Returns a serialized GraphDef representing
`input_dataset`.

`DatasetToSingleElement(...)`: Outputs the single element from the given
dataset.

`DatasetToTFRecord(...)`: Writes the given dataset to the given file using the
TFRecord format.

`Dawsn(...)`

`DebugGradientIdentity(...)`: Identity op for gradient debugging.

`DebugGradientRefIdentity(...)`: Identity op for gradient debugging.

`DebugIdentity(...)`: Provides an identity mapping of the non-Ref type input
tensor for debugging.

`DebugIdentityV2(...)`: Debug Identity V2 Op.

`DebugNanCount(...)`: Debug NaN Value Counter Op.

`DebugNumericSummary(...)`: Debug Numeric Summary Op.

`DebugNumericSummaryV2(...)`: Debug Numeric Summary V2 Op.

`DecodeAndCropJpeg(...)`: Decode and Crop a JPEG-encoded image to a uint8
tensor.

`DecodeBase64(...)`: Decode web-safe base64-encoded strings.

`DecodeBmp(...)`: Decode the first frame of a BMP-encoded image to a uint8
tensor.

`DecodeCSV(...)`: Convert CSV records to tensors. Each column maps to one
tensor.

`DecodeCompressed(...)`: Decompress strings.

`DecodeGif(...)`: Decode the frame(s) of a GIF-encoded image to a uint8
tensor.

`DecodeImage(...)`: Function for decode_bmp, decode_gif, decode_jpeg, and
decode_png.

`DecodeJSONExample(...)`: Convert JSON-encoded Example records to binary
protocol buffer strings.

`DecodeJpeg(...)`: Decode a JPEG-encoded image to a uint8 tensor.

`DecodePaddedRaw(...)`: Reinterpret the bytes of a string as a vector of
numbers.

`DecodePng(...)`: Decode a PNG-encoded image to a uint8 or uint16 tensor.

`DecodeProtoV2(...)`: The op extracts fields from a serialized protocol
buffers message into tensors.

`DecodeRaw(...)`: Reinterpret the bytes of a string as a vector of numbers.

`DecodeWav(...)`: Decode a 16-bit PCM WAV file to a float tensor.

`DeepCopy(...)`: Makes a copy of `x`.

`DeleteIterator(...)`: A container for an iterator resource.

`DeleteMemoryCache(...)`

`DeleteMultiDeviceIterator(...)`: A container for an iterator resource.

`DeleteRandomSeedGenerator(...)`

`DeleteSeedGenerator(...)`

`DeleteSessionTensor(...)`: Delete the tensor specified by its handle in the
session.

`DenseBincount(...)`: Counts the number of occurrences of each value in an
integer array.

`DenseCountSparseOutput(...)`: Performs sparse-output bin counting for a
tf.tensor input.

`DenseToCSRSparseMatrix(...)`: Converts a dense tensor to a (possibly batched)
CSRSparseMatrix.

`DenseToDenseSetOperation(...)`: Applies set operation along last dimension of
2 `Tensor` inputs.

`DenseToSparseBatchDataset(...)`: Creates a dataset that batches input
elements into a SparseTensor.

`DenseToSparseSetOperation(...)`: Applies set operation along last dimension
of `Tensor` and `SparseTensor`.

`DepthToSpace(...)`: DepthToSpace for tensors of type T.

`DepthwiseConv2dNative(...)`: Computes a 2-D depthwise convolution given 4-D
`input` and `filter` tensors.

`DepthwiseConv2dNativeBackpropFilter(...)`: Computes the gradients of
depthwise convolution with respect to the filter.

`DepthwiseConv2dNativeBackpropInput(...)`: Computes the gradients of depthwise
convolution with respect to the input.

`Dequantize(...)`: Dequantize the 'input' tensor into a float or bfloat16
Tensor.

`DeserializeIterator(...)`: Converts the given variant tensor to an iterator
and stores it in the given resource.

`DeserializeManySparse(...)`: Deserialize and concatenate `SparseTensors` from
a serialized minibatch.

`DeserializeSparse(...)`: Deserialize `SparseTensor` objects.

`DestroyResourceOp(...)`: Deletes the resource specified by the handle.

`DestroyTemporaryVariable(...)`: Destroys the temporary variable and returns
its final value.

`DeviceIndex(...)`: Return the index of device the op runs.

`Diag(...)`: Returns a diagonal tensor with a given diagonal values.

`DiagPart(...)`: Returns the diagonal part of the tensor.

`Digamma(...)`: Computes Psi, the derivative of Lgamma (the log of the
absolute value of

`Dilation2D(...)`: Computes the grayscale dilation of 4-D `input` and 3-D
`filter` tensors.

`Dilation2DBackpropFilter(...)`: Computes the gradient of morphological 2-D
dilation with respect to the filter.

`Dilation2DBackpropInput(...)`: Computes the gradient of morphological 2-D
dilation with respect to the input.

`DirectedInterleaveDataset(...)`: A substitute for `InterleaveDataset` on a
fixed list of `N` datasets.

`Div(...)`: Returns x / y element-wise.

`DivNoNan(...)`: Returns 0 if the denominator is zero.

`DrawBoundingBoxes(...)`: Draw bounding boxes on a batch of images.

`DrawBoundingBoxesV2(...)`: Draw bounding boxes on a batch of images.

`DummyIterationCounter(...)`

`DummyMemoryCache(...)`

`DummySeedGenerator(...)`

`DynamicPartition(...)`: Partitions `data` into `num_partitions` tensors using
indices from `partitions`.

`DynamicStitch(...)`: Interleave the values from the `data` tensors into a
single tensor.

`EagerPyFunc(...)`: Eagerly executes a python function to compute
func(input)->output. The

`EditDistance(...)`: Computes the (possibly normalized) Levenshtein Edit
Distance.

`Eig(...)`: Computes the eigen decomposition of one or more square matrices.

`Einsum(...)`: Tensor contraction according to Einstein summation convention.

`Elu(...)`: Computes exponential linear: `exp(features) - 1` if < 0,
`features` otherwise.

`EluGrad(...)`: Computes gradients for the exponential linear (Elu) operation.

`Empty(...)`: Creates a tensor with the given shape.

`EmptyTensorList(...)`: Creates and returns an empty tensor list.

`EncodeBase64(...)`: Encode strings into web-safe base64 format.

`EncodeJpeg(...)`: JPEG-encode an image.

`EncodeJpegVariableQuality(...)`: JPEG encode input image with provided
compression quality.

`EncodePng(...)`: PNG-encode an image.

`EncodeProto(...)`: The op serializes protobuf messages provided in the input
tensors.

`EncodeWav(...)`: Encode audio data using the WAV file format.

`EnqueueTPUEmbeddingIntegerBatch(...)`: An op that enqueues a list of input
batch tensors to TPUEmbedding.

`EnqueueTPUEmbeddingRaggedTensorBatch(...)`: Eases the porting of code that
uses tf.nn.embedding_lookup().

`EnqueueTPUEmbeddingSparseBatch(...)`: An op that enqueues TPUEmbedding input
indices from a SparseTensor.

`EnqueueTPUEmbeddingSparseTensorBatch(...)`: Eases the porting of code that
uses tf.nn.embedding_lookup_sparse().

`EnsureShape(...)`: Ensures that the tensor's shape matches the expected
shape.

`Enter(...)`: Creates or finds a child frame, and makes `data` available to
the child frame.

`Equal(...)`: Returns the truth value of (x == y) element-wise.

`Erf(...)`: Computes the Gauss error function of `x` element-wise.

`Erfc(...)`: Computes the complementary error function of `x` element-wise.

`Erfinv(...)`

`EuclideanNorm(...)`: Computes the euclidean norm of elements across
dimensions of a tensor.

`Exit(...)`: Exits the current frame to its parent frame.

`Exp(...)`: Computes exponential of x element-wise. \\(y = e^x\\).

`ExpandDims(...)`: Inserts a dimension of 1 into a tensor's shape.

`ExperimentalAssertNextDataset(...)`

`ExperimentalAutoShardDataset(...)`: Creates a dataset that shards the input
dataset.

`ExperimentalBytesProducedStatsDataset(...)`: Records the bytes size of each
element of `input_dataset` in a StatsAggregator.

`ExperimentalCSVDataset(...)`

`ExperimentalChooseFastestDataset(...)`

`ExperimentalDatasetCardinality(...)`: Returns the cardinality of
`input_dataset`.

`ExperimentalDatasetToTFRecord(...)`: Writes the given dataset to the given
file using the TFRecord format.

`ExperimentalDenseToSparseBatchDataset(...)`: Creates a dataset that batches
input elements into a SparseTensor.

`ExperimentalDirectedInterleaveDataset(...)`: A substitute for
`InterleaveDataset` on a fixed list of `N` datasets.

`ExperimentalGroupByReducerDataset(...)`: Creates a dataset that computes a
group-by on `input_dataset`.

`ExperimentalGroupByWindowDataset(...)`: Creates a dataset that computes a
windowed group-by on `input_dataset`.

`ExperimentalIgnoreErrorsDataset(...)`: Creates a dataset that contains the
elements of `input_dataset` ignoring errors.

`ExperimentalIteratorGetDevice(...)`: Returns the name of the device on which
`resource` has been placed.

`ExperimentalLMDBDataset(...)`

`ExperimentalLatencyStatsDataset(...)`: Records the latency of producing
`input_dataset` elements in a StatsAggregator.

`ExperimentalMapAndBatchDataset(...)`: Creates a dataset that fuses mapping
with batching.

`ExperimentalMapDataset(...)`: Creates a dataset that applies `f` to the
outputs of `input_dataset`.

`ExperimentalMatchingFilesDataset(...)`

`ExperimentalMaxIntraOpParallelismDataset(...)`: Creates a dataset that
overrides the maximum intra-op parallelism.

`ExperimentalNonSerializableDataset(...)`

`ExperimentalParallelInterleaveDataset(...)`: Creates a dataset that applies
`f` to the outputs of `input_dataset`.

`ExperimentalParseExampleDataset(...)`: Transforms `input_dataset` containing
`Example` protos as vectors of DT_STRING into a dataset of `Tensor` or
`SparseTensor` objects representing the parsed features.

`ExperimentalPrivateThreadPoolDataset(...)`: Creates a dataset that uses a
custom thread pool to compute `input_dataset`.

`ExperimentalRandomDataset(...)`: Creates a Dataset that returns pseudorandom
numbers.

`ExperimentalRebatchDataset(...)`: Creates a dataset that changes the batch
size.

`ExperimentalScanDataset(...)`: Creates a dataset successively reduces `f`
over the elements of `input_dataset`.

`ExperimentalSetStatsAggregatorDataset(...)`

`ExperimentalSleepDataset(...)`

`ExperimentalSlidingWindowDataset(...)`: Creates a dataset that passes a
sliding window over `input_dataset`.

`ExperimentalSqlDataset(...)`: Creates a dataset that executes a SQL query and
emits rows of the result set.

`ExperimentalStatsAggregatorHandle(...)`: Creates a statistics manager
resource.

`ExperimentalStatsAggregatorSummary(...)`: Produces a summary of any
statistics recorded by the given statistics manager.

`ExperimentalTakeWhileDataset(...)`: Creates a dataset that stops iteration
when predicate` is false.

`ExperimentalThreadPoolDataset(...)`: Creates a dataset that uses a custom
thread pool to compute `input_dataset`.

`ExperimentalThreadPoolHandle(...)`: Creates a dataset that uses a custom
thread pool to compute `input_dataset`.

`ExperimentalUnbatchDataset(...)`: A dataset that splits the elements of its
input into multiple elements.

`ExperimentalUniqueDataset(...)`: Creates a dataset that contains the unique
elements of `input_dataset`.

`Expint(...)`

`Expm1(...)`: Computes `exp(x) - 1` element-wise.

`ExtractGlimpse(...)`: Extracts a glimpse from the input tensor.

`ExtractGlimpseV2(...)`: Extracts a glimpse from the input tensor.

`ExtractImagePatches(...)`: Extract `patches` from `images` and put them in
the "depth" output dimension.

`ExtractJpegShape(...)`: Extract the shape information of a JPEG-encoded
image.

`ExtractVolumePatches(...)`: Extract `patches` from `input` and put them in
the `"depth"` output dimension. 3D extension of `extract_image_patches`.

`FFT(...)`: Fast Fourier transform.

`FFT2D(...)`: 2D fast Fourier transform.

`FFT3D(...)`: 3D fast Fourier transform.

`FIFOQueue(...)`: A queue that produces elements in first-in first-out order.

`FIFOQueueV2(...)`: A queue that produces elements in first-in first-out
order.

`Fact(...)`: Output a fact about factorials.

`FakeParam(...)`: This op is used as a placeholder in If branch functions. It
doesn't provide a

`FakeQuantWithMinMaxArgs(...)`: Fake-quantize the 'inputs' tensor, type float
to 'outputs' tensor of same type.

`FakeQuantWithMinMaxArgsGradient(...)`: Compute gradients for a
FakeQuantWithMinMaxArgs operation.

`FakeQuantWithMinMaxVars(...)`: Fake-quantize the 'inputs' tensor of type
float via global float scalars

`FakeQuantWithMinMaxVarsGradient(...)`: Compute gradients for a
FakeQuantWithMinMaxVars operation.

`FakeQuantWithMinMaxVarsPerChannel(...)`: Fake-quantize the 'inputs' tensor of
type float via per-channel floats

`FakeQuantWithMinMaxVarsPerChannelGradient(...)`: Compute gradients for a
FakeQuantWithMinMaxVarsPerChannel operation.

`FakeQueue(...)`: Deprecated. Do not use.

`Fill(...)`: Creates a tensor filled with a scalar value.

`FilterByLastComponentDataset(...)`: Creates a dataset containing elements of
first component of `input_dataset` having true in the last component.

`FilterDataset(...)`: Creates a dataset containing elements of `input_dataset`
matching `predicate`.

`Fingerprint(...)`: Generates fingerprint values.

`FixedLengthRecordDataset(...)`: Creates a dataset that emits the records from
one or more binary files.

`FixedLengthRecordDatasetV2(...)`

`FixedLengthRecordReader(...)`: A Reader that outputs fixed-length records
from a file.

`FixedLengthRecordReaderV2(...)`: A Reader that outputs fixed-length records
from a file.

`FixedUnigramCandidateSampler(...)`: Generates labels for candidate sampling
with a learned unigram distribution.

`FlatMapDataset(...)`: Creates a dataset that applies `f` to the outputs of
`input_dataset`.

`Floor(...)`: Returns element-wise largest integer not greater than x.

`FloorDiv(...)`: Returns x // y element-wise.

`FloorMod(...)`: Returns element-wise remainder of division. When `x < 0` xor
`y < 0` is

`FlushSummaryWriter(...)`

`For(...)`: ```python

`FractionalAvgPool(...)`: Performs fractional average pooling on the input.

`FractionalAvgPoolGrad(...)`: Computes gradient of the FractionalAvgPool
function.

`FractionalMaxPool(...)`: Performs fractional max pooling on the input.

`FractionalMaxPoolGrad(...)`: Computes gradient of the FractionalMaxPool
function.

`FresnelCos(...)`

`FresnelSin(...)`

`FusedBatchNorm(...)`: Batch normalization.

`FusedBatchNormGrad(...)`: Gradient for batch normalization.

`FusedBatchNormGradV2(...)`: Gradient for batch normalization.

`FusedBatchNormGradV3(...)`: Gradient for batch normalization.

`FusedBatchNormV2(...)`: Batch normalization.

`FusedBatchNormV3(...)`: Batch normalization.

`FusedPadConv2D(...)`: Performs a padding as a preprocess during a
convolution.

`FusedResizeAndPadConv2D(...)`: Performs a resize and padding as a preprocess
during a convolution.

`GRUBlockCell(...)`: Computes the GRU cell forward propagation for 1 time
step.

`GRUBlockCellGrad(...)`: Computes the GRU cell back-propagation for 1 time
step.

`Gather(...)`: Gather slices from `params` according to `indices`.

`GatherNd(...)`: Gather slices from `params` into a Tensor with shape
specified by `indices`.

`GatherV2(...)`: Gather slices from `params` axis `axis` according to
`indices`.

`GenerateBoundingBoxProposals(...)`: This op produces Region of Interests from
given bounding boxes(bbox_deltas) encoded wrt anchors according to eq.2 in
arXiv:1506.01497

`GenerateVocabRemapping(...)`: Given a path to new and old vocabulary files,
returns a remapping Tensor of

`GeneratorDataset(...)`: Creates a dataset that invokes a function to generate
elements.

`GetSessionHandle(...)`: Store the input tensor in the state of the current
session.

`GetSessionHandleV2(...)`: Store the input tensor in the state of the current
session.

`GetSessionTensor(...)`: Get the value of the tensor specified by its handle.

`Greater(...)`: Returns the truth value of (x > y) element-wise.

`GreaterEqual(...)`: Returns the truth value of (x >= y) element-wise.

`GroupByReducerDataset(...)`: Creates a dataset that computes a group-by on
`input_dataset`.

`GroupByWindowDataset(...)`: Creates a dataset that computes a windowed group-
by on `input_dataset`.

`GuaranteeConst(...)`: Gives a guarantee to the TF runtime that the input
tensor is a constant.

`HSVToRGB(...)`: Convert one or more images from HSV to RGB.

`HashTable(...)`: Creates a non-initialized hash table.

`HashTableV2(...)`: Creates a non-initialized hash table.

`HistogramFixedWidth(...)`: Return histogram of values.

`HistogramSummary(...)`: Outputs a `Summary` protocol buffer with a histogram.

`IFFT(...)`: Inverse fast Fourier transform.

`IFFT2D(...)`: Inverse 2D fast Fourier transform.

`IFFT3D(...)`: Inverse 3D fast Fourier transform.

`IRFFT(...)`: Inverse real-valued fast Fourier transform.

`IRFFT2D(...)`: Inverse 2D real-valued fast Fourier transform.

`IRFFT3D(...)`: Inverse 3D real-valued fast Fourier transform.

`Identity(...)`: Return a tensor with the same shape and contents as the input
tensor or value.

`IdentityN(...)`: Returns a list of tensors with the same shapes and contents
as the input

`IdentityReader(...)`: A Reader that outputs the queued work as both the key
and value.

`IdentityReaderV2(...)`: A Reader that outputs the queued work as both the key
and value.

`If(...)`: output = cond ? then_branch(input) : else_branch(input)

`Igamma(...)`: Compute the lower regularized incomplete Gamma function `P(a,
x)`.

`IgammaGradA(...)`: Computes the gradient of `igamma(a, x)` wrt `a`.

`Igammac(...)`: Compute the upper regularized incomplete Gamma function `Q(a,
x)`.

`IgnoreErrorsDataset(...)`: Creates a dataset that contains the elements of
`input_dataset` ignoring errors.

`Imag(...)`: Returns the imaginary part of a complex number.

`ImageProjectiveTransformV2(...)`: Applies the given transform to each of the
images.

`ImageProjectiveTransformV3(...)`: Applies the given transform to each of the
images.

`ImageSummary(...)`: Outputs a `Summary` protocol buffer with images.

`ImmutableConst(...)`: Returns immutable tensor from memory region.

`ImportEvent(...)`

`InTopK(...)`: Says whether the targets are in the top `K` predictions.

`InTopKV2(...)`: Says whether the targets are in the top `K` predictions.

`InfeedDequeue(...)`: A placeholder op for a value that will be fed into the
computation.

`InfeedDequeueTuple(...)`: Fetches multiple values from infeed as an XLA
tuple.

`InfeedEnqueue(...)`: An op which feeds a single Tensor value into the
computation.

`InfeedEnqueuePrelinearizedBuffer(...)`: An op which enqueues prelinearized
buffer into TPU infeed.

`InfeedEnqueueTuple(...)`: Feeds multiple Tensor values into the computation
as an XLA tuple.

`InitializeTable(...)`: Table initializer that takes two tensors for keys and
values respectively.

`InitializeTableFromDataset(...)`

`InitializeTableFromTextFile(...)`: Initializes a table from a text file.

`InitializeTableFromTextFileV2(...)`: Initializes a table from a text file.

`InitializeTableV2(...)`: Table initializer that takes two tensors for keys
and values respectively.

`InplaceAdd(...)`: Adds v into specified rows of x.

`InplaceSub(...)`: Subtracts `v` into specified rows of `x`.

`InplaceUpdate(...)`: Updates specified rows 'i' with values 'v'.

`InterleaveDataset(...)`: Creates a dataset that applies `f` to the outputs of
`input_dataset`.

`Inv(...)`: Computes the reciprocal of x element-wise.

`InvGrad(...)`: Computes the gradient for the inverse of `x` wrt its input.

`Invert(...)`: Invert (flip) each bit of supported types; for example, type
`uint8` value 01010101 becomes 10101010.

`InvertPermutation(...)`: Computes the inverse permutation of a tensor.

`IsBoostedTreesEnsembleInitialized(...)`: Checks whether a tree ensemble has
been initialized.

`IsBoostedTreesQuantileStreamResourceInitialized(...)`: Checks whether a
quantile stream has been initialized.

`IsFinite(...)`: Returns which elements of x are finite.

`IsInf(...)`: Returns which elements of x are Inf.

`IsNan(...)`: Returns which elements of x are NaN.

`IsVariableInitialized(...)`: Checks whether a tensor has been initialized.

`IsotonicRegression(...)`: Solves a batch of isotonic regression problems.

`Iterator(...)`: A container for an iterator resource.

`IteratorFromStringHandle(...)`: Converts the given string representing a
handle to an iterator to a resource.

`IteratorFromStringHandleV2(...)`

`IteratorGetDevice(...)`: Returns the name of the device on which `resource`
has been placed.

`IteratorGetNext(...)`: Gets the next output from the given iterator .

`IteratorGetNextAsOptional(...)`: Gets the next output from the given iterator
as an Optional variant.

`IteratorGetNextSync(...)`: Gets the next output from the given iterator.

`IteratorToStringHandle(...)`: Converts the given `resource_handle`
representing an iterator to a string.

`IteratorV2(...)`

`L2Loss(...)`: L2 Loss.

`LMDBDataset(...)`: Creates a dataset that emits the key-value pairs in one or
more LMDB files.

`LMDBReader(...)`: A Reader that outputs the records from a LMDB file.

`LRN(...)`: Local Response Normalization.

`LRNGrad(...)`: Gradients for Local Response Normalization.

`LSTMBlockCell(...)`: Computes the LSTM cell forward propagation for 1 time
step.

`LSTMBlockCellGrad(...)`: Computes the LSTM cell backward propagation for 1
timestep.

`LatencyStatsDataset(...)`: Records the latency of producing `input_dataset`
elements in a StatsAggregator.

`LeakyRelu(...)`: Computes rectified linear: `max(features, features *
alpha)`.

`LeakyReluGrad(...)`: Computes rectified linear gradients for a LeakyRelu
operation.

`LearnedUnigramCandidateSampler(...)`: Generates labels for candidate sampling
with a learned unigram distribution.

`LeftShift(...)`: Elementwise computes the bitwise left-shift of `x` and `y`.

`LegacyParallelInterleaveDatasetV2(...)`: Creates a dataset that applies `f`
to the outputs of `input_dataset`.

`Less(...)`: Returns the truth value of (x < y) element-wise.

`LessEqual(...)`: Returns the truth value of (x <= y) element-wise.

`Lgamma(...)`: Computes the log of the absolute value of `Gamma(x)` element-
wise.

`LinSpace(...)`: Generates values in an interval.

`ListDiff(...)`: Computes the difference between two lists of numbers or
strings.

`LoadAndRemapMatrix(...)`: Loads a 2-D (matrix) `Tensor` with name
`old_tensor_name` from the checkpoint

`LoadDataset(...)`

`LoadTPUEmbeddingADAMParameters(...)`: Load ADAM embedding parameters.

`LoadTPUEmbeddingADAMParametersGradAccumDebug(...)`: Load ADAM embedding
parameters with debug support.

`LoadTPUEmbeddingAdadeltaParameters(...)`: Load Adadelta embedding parameters.

`LoadTPUEmbeddingAdadeltaParametersGradAccumDebug(...)`: Load Adadelta
parameters with debug support.

`LoadTPUEmbeddingAdagradParameters(...)`: Load Adagrad embedding parameters.

`LoadTPUEmbeddingAdagradParametersGradAccumDebug(...)`: Load Adagrad embedding
parameters with debug support.

`LoadTPUEmbeddingCenteredRMSPropParameters(...)`: Load centered RMSProp
embedding parameters.

`LoadTPUEmbeddingFTRLParameters(...)`: Load FTRL embedding parameters.

`LoadTPUEmbeddingFTRLParametersGradAccumDebug(...)`: Load FTRL embedding
parameters with debug support.

`LoadTPUEmbeddingMDLAdagradLightParameters(...)`: Load MDL Adagrad Light
embedding parameters.

`LoadTPUEmbeddingMomentumParameters(...)`: Load Momentum embedding parameters.

`LoadTPUEmbeddingMomentumParametersGradAccumDebug(...)`: Load Momentum
embedding parameters with debug support.

`LoadTPUEmbeddingProximalAdagradParameters(...)`: Load proximal Adagrad
embedding parameters.

`LoadTPUEmbeddingProximalAdagradParametersGradAccumDebug(...)`: Load proximal
Adagrad embedding parameters with debug support.

`LoadTPUEmbeddingProximalYogiParameters(...)`

`LoadTPUEmbeddingProximalYogiParametersGradAccumDebug(...)`

`LoadTPUEmbeddingRMSPropParameters(...)`: Load RMSProp embedding parameters.

`LoadTPUEmbeddingRMSPropParametersGradAccumDebug(...)`: Load RMSProp embedding
parameters with debug support.

`LoadTPUEmbeddingStochasticGradientDescentParameters(...)`: Load SGD embedding
parameters.

`LoadTPUEmbeddingStochasticGradientDescentParametersGradAccumDebug(...)`: Load
SGD embedding parameters.

`Log(...)`: Computes natural logarithm of x element-wise.

`Log1p(...)`: Computes natural logarithm of (1 + x) element-wise.

`LogMatrixDeterminant(...)`: Computes the sign and the log of the absolute
value of the determinant of

`LogSoftmax(...)`: Computes log softmax activations.

`LogUniformCandidateSampler(...)`: Generates labels for candidate sampling
with a log-uniform distribution.

`LogicalAnd(...)`: Returns the truth value of x AND y element-wise.

`LogicalNot(...)`: Returns the truth value of `NOT x` element-wise.

`LogicalOr(...)`: Returns the truth value of x OR y element-wise.

`LookupTableExport(...)`: Outputs all keys and values in the table.

`LookupTableExportV2(...)`: Outputs all keys and values in the table.

`LookupTableFind(...)`: Looks up keys in a table, outputs the corresponding
values.

`LookupTableFindV2(...)`: Looks up keys in a table, outputs the corresponding
values.

`LookupTableImport(...)`: Replaces the contents of the table with the
specified keys and values.

`LookupTableImportV2(...)`: Replaces the contents of the table with the
specified keys and values.

`LookupTableInsert(...)`: Updates the table to associates keys with values.

`LookupTableInsertV2(...)`: Updates the table to associates keys with values.

`LookupTableRemoveV2(...)`: Removes keys and its associated values from a
table.

`LookupTableSize(...)`: Computes the number of elements in the given table.

`LookupTableSizeV2(...)`: Computes the number of elements in the given table.

`LoopCond(...)`: Forwards the input to the output.

`LowerBound(...)`: Applies lower_bound(sorted_search_values, values) along
each row.

`Lu(...)`: Computes the LU decomposition of one or more square matrices.

`MakeIterator(...)`: Makes a new iterator from the given `dataset` and stores
it in `iterator`.

`MapAndBatchDataset(...)`: Creates a dataset that fuses mapping with batching.

`MapClear(...)`: Op removes all elements in the underlying container.

`MapDataset(...)`: Creates a dataset that applies `f` to the outputs of
`input_dataset`.

`MapDefun(...)`: Maps a function on the list of tensors unpacked from
arguments on dimension 0.

`MapIncompleteSize(...)`: Op returns the number of incomplete elements in the
underlying container.

`MapPeek(...)`: Op peeks at the values at the specified key. If the

`MapSize(...)`: Op returns the number of elements in the underlying container.

`MapStage(...)`: Stage (key, values) in the underlying container which behaves
like a hashtable.

`MapUnstage(...)`: Op removes and returns the values associated with the key

`MapUnstageNoKey(...)`: Op removes and returns a random (key, value)

`MatMul(...)`: Multiply the matrix "a" by the matrix "b".

`MatchingFiles(...)`: Returns the set of files matching one or more glob
patterns.

`MatchingFilesDataset(...)`

`MatrixBandPart(...)`: Copy a tensor setting everything outside a central band
in each innermost matrix to zero.

`MatrixDeterminant(...)`: Computes the determinant of one or more square
matrices.

`MatrixDiag(...)`: Returns a batched diagonal tensor with a given batched
diagonal values.

`MatrixDiagPart(...)`: Returns the batched diagonal part of a batched tensor.

`MatrixDiagPartV2(...)`: Returns the batched diagonal part of a batched
tensor.

`MatrixDiagPartV3(...)`: Returns the batched diagonal part of a batched
tensor.

`MatrixDiagV2(...)`: Returns a batched diagonal tensor with given batched
diagonal values.

`MatrixDiagV3(...)`: Returns a batched diagonal tensor with given batched
diagonal values.

`MatrixExponential(...)`: Deprecated, use python implementation
tf.linalg.matrix_exponential.

`MatrixInverse(...)`: Computes the inverse of one or more square invertible
matrices or their adjoints (conjugate transposes).

`MatrixLogarithm(...)`: Computes the matrix logarithm of one or more square
matrices:

`MatrixSetDiag(...)`: Returns a batched matrix tensor with new batched
diagonal values.

`MatrixSetDiagV2(...)`: Returns a batched matrix tensor with new batched
diagonal values.

`MatrixSetDiagV3(...)`: Returns a batched matrix tensor with new batched
diagonal values.

`MatrixSolve(...)`: Solves systems of linear equations.

`MatrixSolveLs(...)`: Solves one or more linear least-squares problems.

`MatrixSquareRoot(...)`: Computes the matrix square root of one or more square
matrices:

`MatrixTriangularSolve(...)`: Solves systems of linear equations with upper or
lower triangular matrices by backsubstitution.

`Max(...)`: Computes the maximum of elements across dimensions of a tensor.

`MaxIntraOpParallelismDataset(...)`: Creates a dataset that overrides the
maximum intra-op parallelism.

`MaxPool(...)`: Performs max pooling on the input.

`MaxPool3D(...)`: Performs 3D max pooling on the input.

`MaxPool3DGrad(...)`: Computes gradients of 3D max pooling function.

`MaxPool3DGradGrad(...)`: Computes second-order gradients of the maxpooling
function.

`MaxPoolGrad(...)`: Computes gradients of the maxpooling function.

`MaxPoolGradGrad(...)`: Computes second-order gradients of the maxpooling
function.

`MaxPoolGradGradV2(...)`: Computes second-order gradients of the maxpooling
function.

`MaxPoolGradGradWithArgmax(...)`: Computes second-order gradients of the
maxpooling function.

`MaxPoolGradV2(...)`: Computes gradients of the maxpooling function.

`MaxPoolGradWithArgmax(...)`: Computes gradients of the maxpooling function.

`MaxPoolV2(...)`: Performs max pooling on the input.

`MaxPoolWithArgmax(...)`: Performs max pooling on the input and outputs both
max values and indices.

`Maximum(...)`: Returns the max of x and y (i.e. x > y ? x : y) element-wise.

`Mean(...)`: Computes the mean of elements across dimensions of a tensor.

`Merge(...)`: Forwards the value of an available tensor from `inputs` to
`output`.

`MergeSummary(...)`: Merges summaries.

`MergeV2Checkpoints(...)`: V2 format specific: merges the metadata files of
sharded checkpoints. The

`Mfcc(...)`: Transforms a spectrogram into a form that's useful for speech
recognition.

`Min(...)`: Computes the minimum of elements across dimensions of a tensor.

`Minimum(...)`: Returns the min of x and y (i.e. x < y ? x : y) element-wise.

`MirrorPad(...)`: Pads a tensor with mirrored values.

`MirrorPadGrad(...)`: Gradient op for `MirrorPad` op. This op folds a mirror-
padded tensor.

`Mod(...)`: Returns element-wise remainder of division. This emulates C
semantics in that

`ModelDataset(...)`: Identity transformation that models performance.

`Mul(...)`: Returns x * y element-wise.

`MulNoNan(...)`: Returns x * y element-wise. Returns zero if y is zero, even
if x if infinite or NaN.

`MultiDeviceIterator(...)`: Creates a MultiDeviceIterator resource.

`MultiDeviceIteratorFromStringHandle(...)`: Generates a MultiDeviceIterator
resource from its provided string handle.

`MultiDeviceIteratorGetNextFromShard(...)`: Gets next element for the provided
shard number.

`MultiDeviceIteratorInit(...)`: Initializes the multi device iterator with the
given dataset.

`MultiDeviceIteratorToStringHandle(...)`: Produces a string handle for the
given MultiDeviceIterator.

`Multinomial(...)`: Draws samples from a multinomial distribution.

`MutableDenseHashTable(...)`: Creates an empty hash table that uses tensors as
the backing store.

`MutableDenseHashTableV2(...)`: Creates an empty hash table that uses tensors
as the backing store.

`MutableHashTable(...)`: Creates an empty hash table.

`MutableHashTableOfTensors(...)`: Creates an empty hash table.

`MutableHashTableOfTensorsV2(...)`: Creates an empty hash table.

`MutableHashTableV2(...)`: Creates an empty hash table.

`MutexLock(...)`: Locks a mutex resource. The output is the lock. So long as
the lock tensor

`MutexV2(...)`: Creates a Mutex resource that can be locked by `MutexLock`.

`NcclAllReduce(...)`: Outputs a tensor containing the reduction across all
input tensors.

`NcclBroadcast(...)`: Sends `input` to all devices that are connected to the
output.

`NcclReduce(...)`: Reduces `input` from `num_devices` using `reduction` to a
single device.

`Ndtri(...)`

`Neg(...)`: Computes numerical negative value element-wise.

`NextAfter(...)`: Returns the next representable value of `x1` in the
direction of `x2`, element-wise.

`NextIteration(...)`: Makes its input available to the next iteration.

`NoOp(...)`: Does nothing. Only useful as a placeholder for control edges.

`NonDeterministicInts(...)`: Non-deterministically generates some integers.

`NonMaxSuppression(...)`: Greedily selects a subset of bounding boxes in
descending order of score,

`NonMaxSuppressionV2(...)`: Greedily selects a subset of bounding boxes in
descending order of score,

`NonMaxSuppressionV3(...)`: Greedily selects a subset of bounding boxes in
descending order of score,

`NonMaxSuppressionV4(...)`: Greedily selects a subset of bounding boxes in
descending order of score,

`NonMaxSuppressionV5(...)`: Greedily selects a subset of bounding boxes in
descending order of score,

`NonMaxSuppressionWithOverlaps(...)`: Greedily selects a subset of bounding
boxes in descending order of score,

`NonSerializableDataset(...)`

`NotEqual(...)`: Returns the truth value of (x != y) element-wise.

`NthElement(...)`: Finds values of the `n`-th order statistic for the last
dimension.

`OneHot(...)`: Returns a one-hot tensor.

`OneShotIterator(...)`: Makes a "one-shot" iterator that can be iterated only
once.

`OnesLike(...)`: Returns a tensor of ones with the same shape and type as x.

`OptimizeDataset(...)`: Creates a dataset by applying optimizations to
`input_dataset`.

`OptimizeDatasetV2(...)`: Creates a dataset by applying related optimizations
to `input_dataset`.

`OptionalFromValue(...)`: Constructs an Optional variant from a tuple of
tensors.

`OptionalGetValue(...)`: Returns the value stored in an Optional variant or
raises an error if none exists.

`OptionalHasValue(...)`: Returns true if and only if the given Optional
variant has a value.

`OptionalNone(...)`: Creates an Optional variant with no value.

`OrderedMapClear(...)`: Op removes all elements in the underlying container.

`OrderedMapIncompleteSize(...)`: Op returns the number of incomplete elements
in the underlying container.

`OrderedMapPeek(...)`: Op peeks at the values at the specified key. If the

`OrderedMapSize(...)`: Op returns the number of elements in the underlying
container.

`OrderedMapStage(...)`: Stage (key, values) in the underlying container which
behaves like a ordered

`OrderedMapUnstage(...)`: Op removes and returns the values associated with
the key

`OrderedMapUnstageNoKey(...)`: Op removes and returns the (key, value) element
with the smallest

`OutfeedDequeue(...)`: Retrieves a single tensor from the computation outfeed.

`OutfeedDequeueTuple(...)`: Retrieve multiple values from the computation
outfeed.

`OutfeedDequeueTupleV2(...)`: Retrieve multiple values from the computation
outfeed. Device ordinal is a

`OutfeedDequeueV2(...)`: Retrieves a single tensor from the computation
outfeed. Device ordinal is a

`OutfeedEnqueue(...)`: Enqueue a Tensor on the computation outfeed.

`OutfeedEnqueueTuple(...)`: Enqueue multiple Tensor values on the computation
outfeed.

`Pack(...)`: Packs a list of `N` rank-`R` tensors into one rank-`(R+1)`
tensor.

`Pad(...)`: Pads a tensor with zeros.

`PadV2(...)`: Pads a tensor.

`PaddedBatchDataset(...)`: Creates a dataset that batches and pads
`batch_size` elements from the input.

`PaddedBatchDatasetV2(...)`: Creates a dataset that batches and pads
`batch_size` elements from the input.

`PaddingFIFOQueue(...)`: A queue that produces elements in first-in first-out
order.

`PaddingFIFOQueueV2(...)`: A queue that produces elements in first-in first-
out order.

`ParallelConcat(...)`: Concatenates a list of `N` tensors along the first
dimension.

`ParallelDynamicStitch(...)`: Interleave the values from the `data` tensors
into a single tensor.

`ParallelInterleaveDataset(...)`: Creates a dataset that applies `f` to the
outputs of `input_dataset`.

`ParallelInterleaveDatasetV2(...)`: Creates a dataset that applies `f` to the
outputs of `input_dataset`.

`ParallelInterleaveDatasetV3(...)`: Creates a dataset that applies `f` to the
outputs of `input_dataset`.

`ParallelInterleaveDatasetV4(...)`: Creates a dataset that applies `f` to the
outputs of `input_dataset`.

`ParallelMapDataset(...)`: Creates a dataset that applies `f` to the outputs
of `input_dataset`.

`ParallelMapDatasetV2(...)`: Creates a dataset that applies `f` to the outputs
of `input_dataset`.

`ParameterizedTruncatedNormal(...)`: Outputs random values from a normal
distribution. The parameters may each be a

`ParseExample(...)`: Transforms a vector of brain.Example protos (as strings)
into typed tensors.

`ParseExampleDataset(...)`: Transforms `input_dataset` containing `Example`
protos as vectors of DT_STRING into a dataset of `Tensor` or `SparseTensor`
objects representing the parsed features.

`ParseExampleDatasetV2(...)`: Transforms `input_dataset` containing `Example`
protos as vectors of DT_STRING into a dataset of `Tensor` or `SparseTensor`
objects representing the parsed features.

`ParseExampleV2(...)`: Transforms a vector of tf.Example protos (as strings)
into typed tensors.

`ParseSequenceExample(...)`: Transforms a vector of brain.SequenceExample
protos (as strings) into typed tensors.

`ParseSequenceExampleV2(...)`: Transforms a vector of tf.io.SequenceExample
protos (as strings) into

`ParseSingleExample(...)`: Transforms a tf.Example proto (as a string) into
typed tensors.

`ParseSingleSequenceExample(...)`: Transforms a scalar brain.SequenceExample
proto (as strings) into typed tensors.

`ParseTensor(...)`: Transforms a serialized tensorflow.TensorProto proto into
a Tensor.

`PartitionedCall(...)`: returns `f(inputs)`, where `f`'s body is placed and
partitioned.

`Placeholder(...)`: A placeholder op for a value that will be fed into the
computation.

`PlaceholderV2(...)`: A placeholder op for a value that will be fed into the
computation.

`PlaceholderWithDefault(...)`: A placeholder op that passes through `input`
when its output is not fed.

`Polygamma(...)`: Compute the polygamma function \\(\psi^{(n)}(x)\\).

`PopulationCount(...)`: Computes element-wise population count (a.k.a.
popcount, bitsum, bitcount).

`Pow(...)`: Computes the power of one value to another.

`PrefetchDataset(...)`: Creates a dataset that asynchronously prefetches
elements from `input_dataset`.

`Prelinearize(...)`: An op which linearizes one Tensor value to an opaque
variant tensor.

`PrelinearizeTuple(...)`: An op which linearizes multiple Tensor values to an
opaque variant tensor.

`PreventGradient(...)`: An identity op that triggers an error if a gradient is
requested.

`Print(...)`: Prints a list of tensors.

`PrintV2(...)`: Prints a string scalar.

`PriorityQueue(...)`: A queue that produces elements sorted by the first
component value.

`PriorityQueueV2(...)`: A queue that produces elements sorted by the first
component value.

`PrivateThreadPoolDataset(...)`: Creates a dataset that uses a custom thread
pool to compute `input_dataset`.

`Prod(...)`: Computes the product of elements across dimensions of a tensor.

`PyFunc(...)`: Invokes a python function to compute func(input)->output.

`PyFuncStateless(...)`: A stateless version of PyFunc.

`Qr(...)`: Computes the QR decompositions of one or more matrices.

`QuantizeAndDequantize(...)`: Use QuantizeAndDequantizeV2 instead.

`QuantizeAndDequantizeV2(...)`: Quantizes then dequantizes a tensor.

`QuantizeAndDequantizeV3(...)`: Quantizes then dequantizes a tensor.

`QuantizeAndDequantizeV4(...)`: Returns the gradient of
`QuantizeAndDequantizeV4`.

`QuantizeAndDequantizeV4Grad(...)`: Returns the gradient of
`QuantizeAndDequantizeV4`.

`QuantizeDownAndShrinkRange(...)`: Convert the quantized 'input' tensor into a
lower-precision 'output', using the

`QuantizeV2(...)`: Quantize the 'input' tensor of type float to 'output'
tensor of type 'T'.

`QuantizedAdd(...)`: Returns x + y element-wise, working on quantized buffers.

`QuantizedAvgPool(...)`: Produces the average pool of the input tensor for
quantized types.

`QuantizedBatchNormWithGlobalNormalization(...)`: Quantized Batch
normalization.

`QuantizedBiasAdd(...)`: Adds Tensor 'bias' to Tensor 'input' for Quantized
types.

`QuantizedConcat(...)`: Concatenates quantized tensors along one dimension.

`QuantizedConv2D(...)`: Computes a 2D convolution given quantized 4D input and
filter tensors.

`QuantizedConv2DAndRelu(...)`

`QuantizedConv2DAndReluAndRequantize(...)`

`QuantizedConv2DAndRequantize(...)`

`QuantizedConv2DPerChannel(...)`: Computes QuantizedConv2D per channel.

`QuantizedConv2DWithBias(...)`

`QuantizedConv2DWithBiasAndRelu(...)`

`QuantizedConv2DWithBiasAndReluAndRequantize(...)`

`QuantizedConv2DWithBiasAndRequantize(...)`

`QuantizedConv2DWithBiasSignedSumAndReluAndRequantize(...)`

`QuantizedConv2DWithBiasSumAndRelu(...)`

`QuantizedConv2DWithBiasSumAndReluAndRequantize(...)`

`QuantizedDepthwiseConv2D(...)`: Computes quantized depthwise Conv2D.

`QuantizedDepthwiseConv2DWithBias(...)`: Computes quantized depthwise Conv2D
with Bias.

`QuantizedDepthwiseConv2DWithBiasAndRelu(...)`: Computes quantized depthwise
Conv2D with Bias and Relu.

`QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize(...)`: Computes
quantized depthwise Conv2D with Bias, Relu and Requantize.

`QuantizedInstanceNorm(...)`: Quantized Instance normalization.

`QuantizedMatMul(...)`: Perform a quantized matrix multiplication of `a` by
the matrix `b`.

`QuantizedMatMulWithBias(...)`: Performs a quantized matrix multiplication of
`a` by the matrix `b` with bias

`QuantizedMatMulWithBiasAndDequantize(...)`

`QuantizedMatMulWithBiasAndRelu(...)`: Perform a quantized matrix
multiplication of `a` by the matrix `b` with bias

`QuantizedMatMulWithBiasAndReluAndRequantize(...)`: Perform a quantized matrix
multiplication of `a` by the matrix `b` with bias

`QuantizedMatMulWithBiasAndRequantize(...)`

`QuantizedMaxPool(...)`: Produces the max pool of the input tensor for
quantized types.

`QuantizedMul(...)`: Returns x * y element-wise, working on quantized buffers.

`QuantizedRelu(...)`: Computes Quantized Rectified Linear: `max(features, 0)`

`QuantizedRelu6(...)`: Computes Quantized Rectified Linear 6:
`min(max(features, 0), 6)`

`QuantizedReluX(...)`: Computes Quantized Rectified Linear X:
`min(max(features, 0), max_value)`

`QuantizedReshape(...)`: Reshapes a quantized tensor as per the Reshape op.

`QuantizedResizeBilinear(...)`: Resize quantized `images` to `size` using
quantized bilinear interpolation.

`QueueClose(...)`: Closes the given queue.

`QueueCloseV2(...)`: Closes the given queue.

`QueueDequeue(...)`: Dequeues a tuple of one or more tensors from the given
queue.

`QueueDequeueMany(...)`: Dequeues `n` tuples of one or more tensors from the
given queue.

`QueueDequeueManyV2(...)`: Dequeues `n` tuples of one or more tensors from the
given queue.

`QueueDequeueUpTo(...)`: Dequeues `n` tuples of one or more tensors from the
given queue.

`QueueDequeueUpToV2(...)`: Dequeues `n` tuples of one or more tensors from the
given queue.

`QueueDequeueV2(...)`: Dequeues a tuple of one or more tensors from the given
queue.

`QueueEnqueue(...)`: Enqueues a tuple of one or more tensors in the given
queue.

`QueueEnqueueMany(...)`: Enqueues zero or more tuples of one or more tensors
in the given queue.

`QueueEnqueueManyV2(...)`: Enqueues zero or more tuples of one or more tensors
in the given queue.

`QueueEnqueueV2(...)`: Enqueues a tuple of one or more tensors in the given
queue.

`QueueIsClosed(...)`: Returns true if queue is closed.

`QueueIsClosedV2(...)`: Returns true if queue is closed.

`QueueSize(...)`: Computes the number of elements in the given queue.

`QueueSizeV2(...)`: Computes the number of elements in the given queue.

`RFFT(...)`: Real-valued fast Fourier transform.

`RFFT2D(...)`: 2D real-valued fast Fourier transform.

`RFFT3D(...)`: 3D real-valued fast Fourier transform.

`RGBToHSV(...)`: Converts one or more images from RGB to HSV.

`RaggedBincount(...)`: Counts the number of occurrences of each value in an
integer array.

`RaggedCountSparseOutput(...)`: Performs sparse-output bin counting for a
ragged tensor input.

`RaggedCross(...)`: Generates a feature cross from a list of tensors, and
returns it as a

`RaggedGather(...)`: Gather ragged slices from `params` axis `0` according to
`indices`.

`RaggedRange(...)`: Returns a `RaggedTensor` containing the specified
sequences of numbers.

`RaggedTensorFromVariant(...)`: Decodes a `variant` Tensor into a
`RaggedTensor`.

`RaggedTensorToSparse(...)`: Converts a `RaggedTensor` into a `SparseTensor`
with the same values.

`RaggedTensorToTensor(...)`: Create a dense tensor from a ragged tensor,
possibly altering its shape.

`RaggedTensorToVariant(...)`: Encodes a `RaggedTensor` into a `variant`
Tensor.

`RaggedTensorToVariantGradient(...)`: Helper used to compute the gradient for
`RaggedTensorToVariant`.

`RandomCrop(...)`: Randomly crop `image`.

`RandomDataset(...)`: Creates a Dataset that returns pseudorandom numbers.

`RandomGamma(...)`: Outputs random values from the Gamma distribution(s)
described by alpha.

`RandomGammaGrad(...)`: Computes the derivative of a Gamma random sample
w.r.t. `alpha`.

`RandomPoisson(...)`: Use RandomPoissonV2 instead.

`RandomPoissonV2(...)`: Outputs random values from the Poisson distribution(s)
described by rate.

`RandomShuffle(...)`: Randomly shuffles a tensor along its first dimension.

`RandomShuffleQueue(...)`: A queue that randomizes the order of elements.

`RandomShuffleQueueV2(...)`: A queue that randomizes the order of elements.

`RandomStandardNormal(...)`: Outputs random values from a normal distribution.

`RandomUniform(...)`: Outputs random values from a uniform distribution.

`RandomUniformInt(...)`: Outputs random integers from a uniform distribution.

`Range(...)`: Creates a sequence of numbers.

`RangeDataset(...)`: Creates a dataset with a range of values. Corresponds to
python's xrange.

`Rank(...)`: Returns the rank of a tensor.

`ReadFile(...)`: Reads and outputs the entire contents of the input filename.

`ReadVariableOp(...)`: Reads the value of a variable.

`ReaderNumRecordsProduced(...)`: Returns the number of records this Reader has
produced.

`ReaderNumRecordsProducedV2(...)`: Returns the number of records this Reader
has produced.

`ReaderNumWorkUnitsCompleted(...)`: Returns the number of work units this
Reader has finished processing.

`ReaderNumWorkUnitsCompletedV2(...)`: Returns the number of work units this
Reader has finished processing.

`ReaderRead(...)`: Returns the next record (key, value pair) produced by a
Reader.

`ReaderReadUpTo(...)`: Returns up to `num_records` (key, value) pairs produced
by a Reader.

`ReaderReadUpToV2(...)`: Returns up to `num_records` (key, value) pairs
produced by a Reader.

`ReaderReadV2(...)`: Returns the next record (key, value pair) produced by a
Reader.

`ReaderReset(...)`: Restore a Reader to its initial clean state.

`ReaderResetV2(...)`: Restore a Reader to its initial clean state.

`ReaderRestoreState(...)`: Restore a reader to a previously saved state.

`ReaderRestoreStateV2(...)`: Restore a reader to a previously saved state.

`ReaderSerializeState(...)`: Produce a string tensor that encodes the state of
a Reader.

`ReaderSerializeStateV2(...)`: Produce a string tensor that encodes the state
of a Reader.

`Real(...)`: Returns the real part of a complex number.

`RealDiv(...)`: Returns x / y element-wise for real types.

`RebatchDataset(...)`: Creates a dataset that changes the batch size.

`RebatchDatasetV2(...)`: Creates a dataset that changes the batch size.

`Reciprocal(...)`: Computes the reciprocal of x element-wise.

`ReciprocalGrad(...)`: Computes the gradient for the inverse of `x` wrt its
input.

`RecordInput(...)`: Emits randomized records.

`Recv(...)`: Receives the named tensor from send_device on recv_device.

`RecvTPUEmbeddingActivations(...)`: An op that receives embedding activations
on the TPU.

`ReduceDataset(...)`: Reduces the input dataset to a singleton using a reduce
function.

`ReduceJoin(...)`: Joins a string Tensor across the given dimensions.

`RefEnter(...)`: Creates or finds a child frame, and makes `data` available to
the child frame.

`RefExit(...)`: Exits the current frame to its parent frame.

`RefIdentity(...)`: Return the same ref tensor as the input ref tensor.

`RefMerge(...)`: Forwards the value of an available tensor from `inputs` to
`output`.

`RefNextIteration(...)`: Makes its input available to the next iteration.

`RefSelect(...)`: Forwards the `index`th element of `inputs` to `output`.

`RefSwitch(...)`: Forwards the ref tensor `data` to the output port determined
by `pred`.

`RegexFullMatch(...)`: Check if the input matches the regex pattern.

`RegexReplace(...)`: Replaces matches of the `pattern` regular expression in
`input` with the

`RegisterDataset(...)`: Registers a dataset with the tf.data service.

`Relu(...)`: Computes rectified linear: `max(features, 0)`.

`Relu6(...)`: Computes rectified linear 6: `min(max(features, 0), 6)`.

`Relu6Grad(...)`: Computes rectified linear 6 gradients for a Relu6 operation.

`ReluGrad(...)`: Computes rectified linear gradients for a Relu operation.

`RemoteCall(...)`: Runs function `f` on a remote device indicated by `target`.

`RepeatDataset(...)`: Creates a dataset that emits the outputs of
`input_dataset` `count` times.

`RequantizationRange(...)`: Computes a range that covers the actual values
present in a quantized tensor.

`RequantizationRangePerChannel(...)`: Computes requantization range per
channel.

`Requantize(...)`: Converts the quantized `input` tensor into a lower-
precision `output`.

`RequantizePerChannel(...)`: Requantizes input with min and max values known
per channel.

`Reshape(...)`: Reshapes a tensor.

`ResizeArea(...)`: Resize `images` to `size` using area interpolation.

`ResizeBicubic(...)`: Resize `images` to `size` using bicubic interpolation.

`ResizeBicubicGrad(...)`: Computes the gradient of bicubic interpolation.

`ResizeBilinear(...)`: Resize `images` to `size` using bilinear interpolation.

`ResizeBilinearGrad(...)`: Computes the gradient of bilinear interpolation.

`ResizeNearestNeighbor(...)`: Resize `images` to `size` using nearest neighbor
interpolation.

`ResizeNearestNeighborGrad(...)`: Computes the gradient of nearest neighbor
interpolation.

`ResourceAccumulatorApplyGradient(...)`: Applies a gradient to a given
accumulator.

`ResourceAccumulatorNumAccumulated(...)`: Returns the number of gradients
aggregated in the given accumulators.

`ResourceAccumulatorSetGlobalStep(...)`: Updates the accumulator with a new
value for global_step.

`ResourceAccumulatorTakeGradient(...)`: Extracts the average gradient in the
given ConditionalAccumulator.

`ResourceApplyAdaMax(...)`: Update '*var' according to the AdaMax algorithm.

`ResourceApplyAdadelta(...)`: Update '*var' according to the adadelta scheme.

`ResourceApplyAdagrad(...)`: Update '*var' according to the adagrad scheme.

`ResourceApplyAdagradDA(...)`: Update '*var' according to the proximal adagrad
scheme.

`ResourceApplyAdagradV2(...)`: Update '*var' according to the adagrad scheme.

`ResourceApplyAdam(...)`: Update '*var' according to the Adam algorithm.

`ResourceApplyAdamWithAmsgrad(...)`: Update '*var' according to the Adam
algorithm.

`ResourceApplyAddSign(...)`: Update '*var' according to the AddSign update.

`ResourceApplyCenteredRMSProp(...)`: Update '*var' according to the centered
RMSProp algorithm.

`ResourceApplyFtrl(...)`: Update '*var' according to the Ftrl-proximal scheme.

`ResourceApplyFtrlV2(...)`: Update '*var' according to the Ftrl-proximal
scheme.

`ResourceApplyGradientDescent(...)`: Update '*var' by subtracting 'alpha' *
'delta' from it.

`ResourceApplyKerasMomentum(...)`: Update '*var' according to the momentum
scheme.

`ResourceApplyMomentum(...)`: Update '*var' according to the momentum scheme.

`ResourceApplyPowerSign(...)`: Update '*var' according to the AddSign update.

`ResourceApplyProximalAdagrad(...)`: Update 'var' and 'accum' according to
FOBOS with Adagrad learning rate.

`ResourceApplyProximalGradientDescent(...)`: Update '*var' as FOBOS algorithm
with fixed learning rate.

`ResourceApplyRMSProp(...)`: Update '*var' according to the RMSProp algorithm.

`ResourceConditionalAccumulator(...)`: A conditional accumulator for
aggregating gradients.

`ResourceCountUpTo(...)`: Increments variable pointed to by 'resource' until
it reaches 'limit'.

`ResourceGather(...)`: Gather slices from the variable pointed to by
`resource` according to `indices`.

`ResourceGatherNd(...)`

`ResourceScatterAdd(...)`: Adds sparse updates to the variable referenced by
`resource`.

`ResourceScatterDiv(...)`: Divides sparse updates into the variable referenced
by `resource`.

`ResourceScatterMax(...)`: Reduces sparse updates into the variable referenced
by `resource` using the `max` operation.

`ResourceScatterMin(...)`: Reduces sparse updates into the variable referenced
by `resource` using the `min` operation.

`ResourceScatterMul(...)`: Multiplies sparse updates into the variable
referenced by `resource`.

`ResourceScatterNdAdd(...)`: Applies sparse addition to individual values or
slices in a Variable.

`ResourceScatterNdMax(...)`

`ResourceScatterNdMin(...)`

`ResourceScatterNdSub(...)`: Applies sparse subtraction to individual values
or slices in a Variable.

`ResourceScatterNdUpdate(...)`: Applies sparse `updates` to individual values
or slices within a given

`ResourceScatterSub(...)`: Subtracts sparse updates from the variable
referenced by `resource`.

`ResourceScatterUpdate(...)`: Assigns sparse updates to the variable
referenced by `resource`.

`ResourceSparseApplyAdadelta(...)`: var: Should be from a Variable().

`ResourceSparseApplyAdagrad(...)`: Update relevant entries in 'var' and
'accum' according to the adagrad scheme.

`ResourceSparseApplyAdagradDA(...)`: Update entries in 'var' and 'accum'
according to the proximal adagrad scheme.

`ResourceSparseApplyAdagradV2(...)`: Update relevant entries in 'var' and
'accum' according to the adagrad scheme.

`ResourceSparseApplyCenteredRMSProp(...)`: Update '*var' according to the
centered RMSProp algorithm.

`ResourceSparseApplyFtrl(...)`: Update relevant entries in '*var' according to
the Ftrl-proximal scheme.

`ResourceSparseApplyFtrlV2(...)`: Update relevant entries in '*var' according
to the Ftrl-proximal scheme.

`ResourceSparseApplyKerasMomentum(...)`: Update relevant entries in 'var' and
'accum' according to the momentum scheme.

`ResourceSparseApplyMomentum(...)`: Update relevant entries in 'var' and
'accum' according to the momentum scheme.

`ResourceSparseApplyProximalAdagrad(...)`: Sparse update entries in 'var' and
'accum' according to FOBOS algorithm.

`ResourceSparseApplyProximalGradientDescent(...)`: Sparse update '*var' as
FOBOS algorithm with fixed learning rate.

`ResourceSparseApplyRMSProp(...)`: Update '*var' according to the RMSProp
algorithm.

`ResourceStridedSliceAssign(...)`: Assign `value` to the sliced l-value
reference of `ref`.

`Restore(...)`: Restores a tensor from checkpoint files.

`RestoreSlice(...)`: Restores a tensor from checkpoint files.

`RestoreV2(...)`: Restores tensors from a V2 checkpoint.

`RetrieveTPUEmbeddingADAMParameters(...)`: Retrieve ADAM embedding parameters.

`RetrieveTPUEmbeddingADAMParametersGradAccumDebug(...)`: Retrieve ADAM
embedding parameters with debug support.

`RetrieveTPUEmbeddingAdadeltaParameters(...)`: Retrieve Adadelta embedding
parameters.

`RetrieveTPUEmbeddingAdadeltaParametersGradAccumDebug(...)`: Retrieve Adadelta
embedding parameters with debug support.

`RetrieveTPUEmbeddingAdagradParameters(...)`: Retrieve Adagrad embedding
parameters.

`RetrieveTPUEmbeddingAdagradParametersGradAccumDebug(...)`: Retrieve Adagrad
embedding parameters with debug support.

`RetrieveTPUEmbeddingCenteredRMSPropParameters(...)`: Retrieve centered
RMSProp embedding parameters.

`RetrieveTPUEmbeddingFTRLParameters(...)`: Retrieve FTRL embedding parameters.

`RetrieveTPUEmbeddingFTRLParametersGradAccumDebug(...)`: Retrieve FTRL
embedding parameters with debug support.

`RetrieveTPUEmbeddingMDLAdagradLightParameters(...)`: Retrieve MDL Adagrad
Light embedding parameters.

`RetrieveTPUEmbeddingMomentumParameters(...)`: Retrieve Momentum embedding
parameters.

`RetrieveTPUEmbeddingMomentumParametersGradAccumDebug(...)`: Retrieve Momentum
embedding parameters with debug support.

`RetrieveTPUEmbeddingProximalAdagradParameters(...)`: Retrieve proximal
Adagrad embedding parameters.

`RetrieveTPUEmbeddingProximalAdagradParametersGradAccumDebug(...)`: Retrieve
proximal Adagrad embedding parameters with debug support.

`RetrieveTPUEmbeddingProximalYogiParameters(...)`

`RetrieveTPUEmbeddingProximalYogiParametersGradAccumDebug(...)`

`RetrieveTPUEmbeddingRMSPropParameters(...)`: Retrieve RMSProp embedding
parameters.

`RetrieveTPUEmbeddingRMSPropParametersGradAccumDebug(...)`: Retrieve RMSProp
embedding parameters with debug support.

`RetrieveTPUEmbeddingStochasticGradientDescentParameters(...)`: Retrieve SGD
embedding parameters.

`RetrieveTPUEmbeddingStochasticGradientDescentParametersGradAccumDebug(...)`:
Retrieve SGD embedding parameters with debug support.

`Reverse(...)`: Reverses specific dimensions of a tensor.

`ReverseSequence(...)`: Reverses variable length slices.

`ReverseV2(...)`: Reverses specific dimensions of a tensor.

`RightShift(...)`: Elementwise computes the bitwise right-shift of `x` and
`y`.

`Rint(...)`: Returns element-wise integer closest to x.

`RngReadAndSkip(...)`: Advance the counter of a counter-based RNG.

`RngSkip(...)`: Advance the counter of a counter-based RNG.

`Roll(...)`: Rolls the elements of a tensor along an axis.

`Round(...)`: Rounds the values of a tensor to the nearest integer, element-
wise.

`Rsqrt(...)`: Computes reciprocal of square root of x element-wise.

`RsqrtGrad(...)`: Computes the gradient for the rsqrt of `x` wrt its input.

`SampleDistortedBoundingBox(...)`: Generate a single randomly distorted
bounding box for an image.

`SampleDistortedBoundingBoxV2(...)`: Generate a single randomly distorted
bounding box for an image.

`SamplingDataset(...)`: Creates a dataset that takes a Bernoulli sample of the
contents of another dataset.

`Save(...)`: Saves the input tensors to disk.

`SaveDataset(...)`

`SaveSlices(...)`: Saves input tensors slices to disk.

`SaveV2(...)`: Saves tensors in V2 checkpoint format.

`ScalarSummary(...)`: Outputs a `Summary` protocol buffer with scalar values.

`ScaleAndTranslate(...)`

`ScaleAndTranslateGrad(...)`

`ScanDataset(...)`: Creates a dataset successively reduces `f` over the
elements of `input_dataset`.

`ScatterAdd(...)`: Adds sparse updates to a variable reference.

`ScatterDiv(...)`: Divides a variable reference by sparse updates.

`ScatterMax(...)`: Reduces sparse updates into a variable reference using the
`max` operation.

`ScatterMin(...)`: Reduces sparse updates into a variable reference using the
`min` operation.

`ScatterMul(...)`: Multiplies sparse updates into a variable reference.

`ScatterNd(...)`: Scatter `updates` into a new tensor according to `indices`.

`ScatterNdAdd(...)`: Applies sparse addition to individual values or slices in
a Variable.

`ScatterNdMax(...)`: Computes element-wise maximum.

`ScatterNdMin(...)`: Computes element-wise minimum.

`ScatterNdNonAliasingAdd(...)`: Applies sparse addition to `input` using
individual values or slices

`ScatterNdSub(...)`: Applies sparse subtraction to individual values or slices
in a Variable.

`ScatterNdUpdate(...)`: Applies sparse `updates` to individual values or
slices within a given

`ScatterSub(...)`: Subtracts sparse updates to a variable reference.

`ScatterUpdate(...)`: Applies sparse updates to a variable reference.

`SdcaFprint(...)`: Computes fingerprints of the input strings.

`SdcaOptimizer(...)`: Distributed version of Stochastic Dual Coordinate Ascent
(SDCA) optimizer for

`SdcaOptimizerV2(...)`: Distributed version of Stochastic Dual Coordinate
Ascent (SDCA) optimizer for

`SdcaShrinkL1(...)`: Applies L1 regularization shrink step on the parameters.

`SegmentMax(...)`: Computes the maximum along segments of a tensor.

`SegmentMean(...)`: Computes the mean along segments of a tensor.

`SegmentMin(...)`: Computes the minimum along segments of a tensor.

`SegmentProd(...)`: Computes the product along segments of a tensor.

`SegmentSum(...)`: Computes the sum along segments of a tensor.

`Select(...)`: Selects elements from `x` or `y`, depending on `condition`.

`SelectV2(...)`

`SelfAdjointEig(...)`: Computes the Eigen Decomposition of a batch of square
self-adjoint matrices.

`SelfAdjointEigV2(...)`: Computes the eigen decomposition of one or more
square self-adjoint matrices.

`Selu(...)`: Computes scaled exponential linear: `scale * alpha *
(exp(features) - 1)`

`SeluGrad(...)`: Computes gradients for the scaled exponential linear (Selu)
operation.

`Send(...)`: Sends the named tensor from send_device to recv_device.

`SendTPUEmbeddingGradients(...)`: Performs gradient updates of embedding
tables.

`SerializeIterator(...)`: Converts the given `resource_handle` representing an
iterator to a variant tensor.

`SerializeManySparse(...)`: Serialize an `N`-minibatch `SparseTensor` into an
`[N, 3]` `Tensor` object.

`SerializeSparse(...)`: Serialize a `SparseTensor` into a `[3]` `Tensor`
object.

`SerializeTensor(...)`: Transforms a Tensor into a serialized TensorProto
proto.

`SetSize(...)`: Number of unique elements along last dimension of input `set`.

`SetStatsAggregatorDataset(...)`

`Shape(...)`: Returns the shape of a tensor.

`ShapeN(...)`: Returns shape of tensors.

`ShardDataset(...)`: Creates a `Dataset` that includes only 1/`num_shards` of
this dataset.

`ShardedFilename(...)`: Generate a sharded filename. The filename is printf
formatted as

`ShardedFilespec(...)`: Generate a glob pattern matching all sharded file
names.

`ShuffleAndRepeatDataset(...)`: Creates a dataset that shuffles and repeats
elements from `input_dataset`

`ShuffleAndRepeatDatasetV2(...)`

`ShuffleDataset(...)`: Creates a dataset that shuffles elements from
`input_dataset` pseudorandomly.

`ShuffleDatasetV2(...)`

`ShuffleDatasetV3(...)`

`ShutdownDistributedTPU(...)`: Shuts down a running distributed TPU system.

`Sigmoid(...)`: Computes sigmoid of `x` element-wise.

`SigmoidGrad(...)`: Computes the gradient of the sigmoid of `x` wrt its input.

`Sign(...)`: Returns an element-wise indication of the sign of a number.

`Sin(...)`: Computes sine of x element-wise.

`Sinh(...)`: Computes hyperbolic sine of x element-wise.

`Size(...)`: Returns the size of a tensor.

`SkipDataset(...)`: Creates a dataset that skips `count` elements from the
`input_dataset`.

`SleepDataset(...)`

`Slice(...)`: Return a slice from 'input'.

`SlidingWindowDataset(...)`: Creates a dataset that passes a sliding window
over `input_dataset`.

`Snapshot(...)`: Returns a copy of the input tensor.

`SnapshotDataset(...)`: Creates a dataset that will write to / read from a
snapshot.

`SnapshotDatasetV2(...)`: Creates a dataset that will write to / read from a
snapshot.

`SobolSample(...)`: Generates points from the Sobol sequence.

`Softmax(...)`: Computes softmax activations.

`SoftmaxCrossEntropyWithLogits(...)`: Computes softmax cross entropy cost and
gradients to backpropagate.

`Softplus(...)`: Computes softplus: `log(exp(features) + 1)`.

`SoftplusGrad(...)`: Computes softplus gradients for a softplus operation.

`Softsign(...)`: Computes softsign: `features / (abs(features) + 1)`.

`SoftsignGrad(...)`: Computes softsign gradients for a softsign operation.

`SpaceToBatch(...)`: SpaceToBatch for 4-D tensors of type T.

`SpaceToBatchND(...)`: SpaceToBatch for N-D tensors of type T.

`SpaceToDepth(...)`: SpaceToDepth for tensors of type T.

`SparseAccumulatorApplyGradient(...)`: Applies a sparse gradient to a given
accumulator.

`SparseAccumulatorTakeGradient(...)`: Extracts the average sparse gradient in
a SparseConditionalAccumulator.

`SparseAdd(...)`: Adds two `SparseTensor` objects to produce another
`SparseTensor`.

`SparseAddGrad(...)`: The gradient operator for the SparseAdd op.

`SparseApplyAdadelta(...)`: var: Should be from a Variable().

`SparseApplyAdagrad(...)`: Update relevant entries in 'var' and 'accum'
according to the adagrad scheme.

`SparseApplyAdagradDA(...)`: Update entries in 'var' and 'accum' according to
the proximal adagrad scheme.

`SparseApplyAdagradV2(...)`: Update relevant entries in 'var' and 'accum'
according to the adagrad scheme.

`SparseApplyCenteredRMSProp(...)`: Update '*var' according to the centered
RMSProp algorithm.

`SparseApplyFtrl(...)`: Update relevant entries in '*var' according to the
Ftrl-proximal scheme.

`SparseApplyFtrlV2(...)`: Update relevant entries in '*var' according to the
Ftrl-proximal scheme.

`SparseApplyMomentum(...)`: Update relevant entries in 'var' and 'accum'
according to the momentum scheme.

`SparseApplyProximalAdagrad(...)`: Sparse update entries in 'var' and 'accum'
according to FOBOS algorithm.

`SparseApplyProximalGradientDescent(...)`: Sparse update '*var' as FOBOS
algorithm with fixed learning rate.

`SparseApplyRMSProp(...)`: Update '*var' according to the RMSProp algorithm.

`SparseBincount(...)`: Counts the number of occurrences of each value in an
integer array.

`SparseConcat(...)`: Concatenates a list of `SparseTensor` along the specified
dimension.

`SparseConditionalAccumulator(...)`: A conditional accumulator for aggregating
sparse gradients.

`SparseCountSparseOutput(...)`: Performs sparse-output bin counting for a
sparse tensor input.

`SparseCross(...)`: Generates sparse cross from a list of sparse and dense
tensors.

`SparseCrossHashed(...)`: Generates sparse cross from a list of sparse and
dense tensors.

`SparseCrossV2(...)`: Generates sparse cross from a list of sparse and dense
tensors.

`SparseDenseCwiseAdd(...)`: Adds up a SparseTensor and a dense Tensor, using
these special rules:

`SparseDenseCwiseDiv(...)`: Component-wise divides a SparseTensor by a dense
Tensor.

`SparseDenseCwiseMul(...)`: Component-wise multiplies a SparseTensor by a
dense Tensor.

`SparseFillEmptyRows(...)`: Fills empty rows in the input 2-D `SparseTensor`
with a default value.

`SparseFillEmptyRowsGrad(...)`: The gradient of SparseFillEmptyRows.

`SparseMatMul(...)`: Multiply matrix "a" by matrix "b".

`SparseMatrixAdd(...)`: Sparse addition of two CSR matrices, C = alpha * A +
beta * B.

`SparseMatrixMatMul(...)`: Matrix-multiplies a sparse matrix with a dense
matrix.

`SparseMatrixMul(...)`: Element-wise multiplication of a sparse matrix with a
dense tensor.

`SparseMatrixNNZ(...)`: Returns the number of nonzeroes of `sparse_matrix`.

`SparseMatrixOrderingAMD(...)`: Computes the Approximate Minimum Degree (AMD)
ordering of `input`.

`SparseMatrixSoftmax(...)`: Calculates the softmax of a CSRSparseMatrix.

`SparseMatrixSoftmaxGrad(...)`: Calculates the gradient of the
SparseMatrixSoftmax op.

`SparseMatrixSparseCholesky(...)`: Computes the sparse Cholesky decomposition
of `input`.

`SparseMatrixSparseMatMul(...)`: Sparse-matrix-multiplies two CSR matrices `a`
and `b`.

`SparseMatrixTranspose(...)`: Transposes the inner (matrix) dimensions of a
CSRSparseMatrix.

`SparseMatrixZeros(...)`: Creates an all-zeros CSRSparseMatrix with shape
`dense_shape`.

`SparseReduceMax(...)`: Computes the max of elements across dimensions of a
SparseTensor.

`SparseReduceMaxSparse(...)`: Computes the max of elements across dimensions
of a SparseTensor.

`SparseReduceSum(...)`: Computes the sum of elements across dimensions of a
SparseTensor.

`SparseReduceSumSparse(...)`: Computes the sum of elements across dimensions
of a SparseTensor.

`SparseReorder(...)`: Reorders a SparseTensor into the canonical, row-major
ordering.

`SparseReshape(...)`: Reshapes a SparseTensor to represent values in a new
dense shape.

`SparseSegmentMean(...)`: Computes the mean along sparse segments of a tensor.

`SparseSegmentMeanGrad(...)`: Computes gradients for SparseSegmentMean.

`SparseSegmentMeanWithNumSegments(...)`: Computes the mean along sparse
segments of a tensor.

`SparseSegmentSqrtN(...)`: Computes the sum along sparse segments of a tensor
divided by the sqrt of N.

`SparseSegmentSqrtNGrad(...)`: Computes gradients for SparseSegmentSqrtN.

`SparseSegmentSqrtNWithNumSegments(...)`: Computes the sum along sparse
segments of a tensor divided by the sqrt of N.

`SparseSegmentSum(...)`: Computes the sum along sparse segments of a tensor.

`SparseSegmentSumWithNumSegments(...)`: Computes the sum along sparse segments
of a tensor.

`SparseSlice(...)`: Slice a `SparseTensor` based on the `start` and `size`.

`SparseSliceGrad(...)`: The gradient operator for the SparseSlice op.

`SparseSoftmax(...)`: Applies softmax to a batched N-D `SparseTensor`.

`SparseSoftmaxCrossEntropyWithLogits(...)`: Computes softmax cross entropy
cost and gradients to backpropagate.

`SparseSparseMaximum(...)`: Returns the element-wise max of two SparseTensors.

`SparseSparseMinimum(...)`: Returns the element-wise min of two SparseTensors.

`SparseSplit(...)`: Split a `SparseTensor` into `num_split` tensors along one
dimension.

`SparseTensorDenseAdd(...)`: Adds up a `SparseTensor` and a dense `Tensor`,
producing a dense `Tensor`.

`SparseTensorDenseMatMul(...)`: Multiply SparseTensor (of rank 2) "A" by dense
matrix "B".

`SparseTensorSliceDataset(...)`: Creates a dataset that splits a SparseTensor
into elements row-wise.

`SparseTensorToCSRSparseMatrix(...)`: Converts a SparseTensor to a (possibly
batched) CSRSparseMatrix.

`SparseToDense(...)`: Converts a sparse representation into a dense tensor.

`SparseToSparseSetOperation(...)`: Applies set operation along last dimension
of 2 `SparseTensor` inputs.

`Spence(...)`

`Split(...)`: Splits a tensor into `num_split` tensors along one dimension.

`SplitV(...)`: Splits a tensor into `num_split` tensors along one dimension.

`SqlDataset(...)`: Creates a dataset that executes a SQL query and emits rows
of the result set.

`Sqrt(...)`: Computes square root of x element-wise.

`SqrtGrad(...)`: Computes the gradient for the sqrt of `x` wrt its input.

`Square(...)`: Computes square of x element-wise.

`SquaredDifference(...)`: Returns conj(x - y)(x - y) element-wise.

`Squeeze(...)`: Removes dimensions of size 1 from the shape of a tensor.

`Stack(...)`: Deprecated, use StackV2.

`StackClose(...)`: Deprecated, use StackCloseV2.

`StackCloseV2(...)`: Delete the stack from its resource container.

`StackPop(...)`: Deprecated, use StackPopV2.

`StackPopV2(...)`: Pop the element at the top of the stack.

`StackPush(...)`: Deprecated, use StackPushV2.

`StackPushV2(...)`: Push an element onto the stack.

`StackV2(...)`: A stack that produces elements in first-in last-out order.

`Stage(...)`: Stage values similar to a lightweight Enqueue.

`StageClear(...)`: Op removes all elements in the underlying container.

`StagePeek(...)`: Op peeks at the values at the specified index. If the

`StageSize(...)`: Op returns the number of elements in the underlying
container.

`StatefulPartitionedCall(...)`: returns `f(inputs)`, where `f`'s body is
placed and partitioned.

`StatefulRandomBinomial(...)`

`StatefulStandardNormal(...)`: Outputs random values from a normal
distribution. This op is deprecated in favor of op 'StatefulStandardNormalV2'

`StatefulStandardNormalV2(...)`: Outputs random values from a normal
distribution.

`StatefulTruncatedNormal(...)`: Outputs random values from a truncated normal
distribution.

`StatefulUniform(...)`: Outputs random values from a uniform distribution.

`StatefulUniformFullInt(...)`: Outputs random integers from a uniform
distribution.

`StatefulUniformInt(...)`: Outputs random integers from a uniform
distribution.

`StatelessCase(...)`: An n-way switch statement which calls a single branch
function.

`StatelessIf(...)`: output = cond ? then_branch(input) : else_branch(input)

`StatelessMultinomial(...)`: Draws samples from a multinomial distribution.

`StatelessParameterizedTruncatedNormal(...)`

`StatelessRandomBinomial(...)`: Outputs deterministic pseudorandom random
numbers from a binomial distribution.

`StatelessRandomGammaV2(...)`: Outputs deterministic pseudorandom random
numbers from a gamma distribution.

`StatelessRandomGetKeyCounterAlg(...)`: Picks the best algorithm based on
device, and scrambles seed into key and counter.

`StatelessRandomNormal(...)`: Outputs deterministic pseudorandom values from a
normal distribution.

`StatelessRandomNormalV2(...)`: Outputs deterministic pseudorandom values from
a normal distribution.

`StatelessRandomPoisson(...)`: Outputs deterministic pseudorandom random
numbers from a Poisson distribution.

`StatelessRandomUniform(...)`: Outputs deterministic pseudorandom random
values from a uniform distribution.

`StatelessRandomUniformFullInt(...)`: Outputs deterministic pseudorandom
random integers from a uniform distribution.

`StatelessRandomUniformFullIntV2(...)`: Outputs deterministic pseudorandom
random integers from a uniform distribution.

`StatelessRandomUniformInt(...)`: Outputs deterministic pseudorandom random
integers from a uniform distribution.

`StatelessRandomUniformIntV2(...)`: Outputs deterministic pseudorandom random
integers from a uniform distribution.

`StatelessRandomUniformV2(...)`: Outputs deterministic pseudorandom random
values from a uniform distribution.

`StatelessSampleDistortedBoundingBox(...)`: Generate a randomly distorted
bounding box for an image deterministically.

`StatelessTruncatedNormal(...)`: Outputs deterministic pseudorandom values
from a truncated normal distribution.

`StatelessTruncatedNormalV2(...)`: Outputs deterministic pseudorandom values
from a truncated normal distribution.

`StatelessWhile(...)`: output = input; While (Cond(output)) { output =
Body(output) }

`StaticRegexFullMatch(...)`: Check if the input matches the regex pattern.

`StaticRegexReplace(...)`: Replaces the match of pattern in input with
rewrite.

`StatsAggregatorHandle(...)`: Creates a statistics manager resource.

`StatsAggregatorHandleV2(...)`

`StatsAggregatorSetSummaryWriter(...)`: Set a summary_writer_interface to
record statistics using given stats_aggregator.

`StatsAggregatorSummary(...)`: Produces a summary of any statistics recorded
by the given statistics manager.

`StopGradient(...)`: Stops gradient computation.

`StridedSlice(...)`: Return a strided slice from `input`.

`StridedSliceAssign(...)`: Assign `value` to the sliced l-value reference of
`ref`.

`StridedSliceGrad(...)`: Returns the gradient of `StridedSlice`.

`StringFormat(...)`: Formats a string template using a list of tensors.

`StringJoin(...)`: Joins the strings in the given list of string tensors into
one tensor;

`StringLength(...)`: String lengths of `input`.

`StringLower(...)`: Converts all uppercase characters into their respective
lowercase replacements.

`StringNGrams(...)`: Creates ngrams from ragged string data.

`StringSplit(...)`: Split elements of `input` based on `delimiter` into a
`SparseTensor`.

`StringSplitV2(...)`: Split elements of `source` based on `sep` into a
`SparseTensor`.

`StringStrip(...)`: Strip leading and trailing whitespaces from the Tensor.

`StringToHashBucket(...)`: Converts each string in the input Tensor to its
hash mod by a number of buckets.

`StringToHashBucketFast(...)`: Converts each string in the input Tensor to its
hash mod by a number of buckets.

`StringToHashBucketStrong(...)`: Converts each string in the input Tensor to
its hash mod by a number of buckets.

`StringToNumber(...)`: Converts each string in the input Tensor to the
specified numeric type.

`StringUpper(...)`: Converts all lowercase characters into their respective
uppercase replacements.

`Sub(...)`: Returns x - y element-wise.

`Substr(...)`: Return substrings from `Tensor` of strings.

`Sum(...)`: Computes the sum of elements across dimensions of a tensor.

`SummaryWriter(...)`

`Svd(...)`: Computes the singular value decompositions of one or more
matrices.

`Switch(...)`: Forwards `data` to the output port determined by `pred`.

`SymbolicGradient(...)`: Computes the gradient function for function f via
backpropagation.

`TFRecordDataset(...)`: Creates a dataset that emits the records from one or
more TFRecord files.

`TFRecordReader(...)`: A Reader that outputs the records from a TensorFlow
Records file.

`TFRecordReaderV2(...)`: A Reader that outputs the records from a TensorFlow
Records file.

`TPUCompilationResult(...)`: Returns the result of a TPU compilation.

`TPUEmbeddingActivations(...)`: An op enabling differentiation of TPU
Embeddings.

`TPUOrdinalSelector(...)`: A TPU core selector Op.

`TPUPartitionedCall(...)`: Calls a function placed on a specified TPU device.

`TPUReplicateMetadata(...)`: Metadata indicating how the TPU computation
should be replicated.

`TPUReplicatedInput(...)`: Connects N inputs to an N-way replicated TPU
computation.

`TPUReplicatedOutput(...)`: Connects N outputs from an N-way replicated TPU
computation.

`TakeDataset(...)`: Creates a dataset that contains `count` elements from the
`input_dataset`.

`TakeManySparseFromTensorsMap(...)`: Read `SparseTensors` from a
`SparseTensorsMap` and concatenate them.

`TakeWhileDataset(...)`: Creates a dataset that stops iteration when
predicate` is false.

`Tan(...)`: Computes tan of x element-wise.

`Tanh(...)`: Computes hyperbolic tangent of `x` element-wise.

`TanhGrad(...)`: Computes the gradient for the tanh of `x` wrt its input.

`TemporaryVariable(...)`: Returns a tensor that may be mutated, but only
persists within a single step.

`TensorArray(...)`

`TensorArrayClose(...)`

`TensorArrayCloseV2(...)`: Deprecated. Use TensorArrayCloseV3

`TensorArrayCloseV3(...)`: Delete the TensorArray from its resource container.

`TensorArrayConcat(...)`

`TensorArrayConcatV2(...)`: Deprecated. Use TensorArrayConcatV3

`TensorArrayConcatV3(...)`: Concat the elements from the TensorArray into
value `value`.

`TensorArrayGather(...)`

`TensorArrayGatherV2(...)`: Deprecated. Use TensorArrayGatherV3

`TensorArrayGatherV3(...)`: Gather specific elements from the TensorArray into
output `value`.

`TensorArrayGrad(...)`

`TensorArrayGradV2(...)`: Deprecated. Use TensorArrayGradV3

`TensorArrayGradV3(...)`: Creates a TensorArray for storing the gradients of
values in the given handle.

`TensorArrayGradWithShape(...)`: Creates a TensorArray for storing multiple
gradients of values in the given handle.

`TensorArrayPack(...)`

`TensorArrayRead(...)`

`TensorArrayReadV2(...)`: Deprecated. Use TensorArrayReadV3

`TensorArrayReadV3(...)`: Read an element from the TensorArray into output
`value`.

`TensorArrayScatter(...)`

`TensorArrayScatterV2(...)`: Deprecated. Use TensorArrayScatterV3

`TensorArrayScatterV3(...)`: Scatter the data from the input value into
specific TensorArray elements.

`TensorArraySize(...)`

`TensorArraySizeV2(...)`: Deprecated. Use TensorArraySizeV3

`TensorArraySizeV3(...)`: Get the current size of the TensorArray.

`TensorArraySplit(...)`

`TensorArraySplitV2(...)`: Deprecated. Use TensorArraySplitV3

`TensorArraySplitV3(...)`: Split the data from the input value into
TensorArray elements.

`TensorArrayUnpack(...)`

`TensorArrayV2(...)`: Deprecated. Use TensorArrayV3

`TensorArrayV3(...)`: An array of Tensors of given size.

`TensorArrayWrite(...)`

`TensorArrayWriteV2(...)`: Deprecated. Use TensorArrayGradV3

`TensorArrayWriteV3(...)`: Push an element onto the tensor_array.

`TensorDataset(...)`: Creates a dataset that emits `components` as a tuple of
tensors once.

`TensorListConcat(...)`: Concats all tensors in the list along the 0th
dimension.

`TensorListConcatLists(...)`

`TensorListConcatV2(...)`: Concats all tensors in the list along the 0th
dimension.

`TensorListElementShape(...)`: The shape of the elements of the given list, as
a tensor.

`TensorListFromTensor(...)`: Creates a TensorList which, when stacked, has the
value of `tensor`.

`TensorListGather(...)`: Creates a Tensor by indexing into the TensorList.

`TensorListGetItem(...)`: Returns the item in the list with the given index.

`TensorListLength(...)`: Returns the number of tensors in the input tensor
list.

`TensorListPopBack(...)`: Returns the last element of the input list as well
as a list with all but that element.

`TensorListPushBack(...)`: Returns a list which has the passed-in `Tensor` as
last element and the other elements of the given list in `input_handle`.

`TensorListPushBackBatch(...)`

`TensorListReserve(...)`: List of the given size with empty elements.

`TensorListResize(...)`: Resizes the list.

`TensorListScatter(...)`: Creates a TensorList by indexing into a Tensor.

`TensorListScatterIntoExistingList(...)`: Scatters tensor at indices in an
input list.

`TensorListScatterV2(...)`: Creates a TensorList by indexing into a Tensor.

`TensorListSetItem(...)`: Sets the index-th position of the list to contain
the given tensor.

`TensorListSplit(...)`: Splits a tensor into a list.

`TensorListStack(...)`: Stacks all tensors in the list.

`TensorScatterAdd(...)`: Adds sparse `updates` to an existing tensor according
to `indices`.

`TensorScatterMax(...)`

`TensorScatterMin(...)`

`TensorScatterSub(...)`: Subtracts sparse `updates` from an existing tensor
according to `indices`.

`TensorScatterUpdate(...)`: Scatter `updates` into an existing tensor
according to `indices`.

`TensorSliceDataset(...)`: Creates a dataset that emits each dim-0 slice of
`components` once.

`TensorStridedSliceUpdate(...)`: Assign `value` to the sliced l-value
reference of `input`.

`TensorSummary(...)`: Outputs a `Summary` protocol buffer with a tensor.

`TensorSummaryV2(...)`: Outputs a `Summary` protocol buffer with a tensor and
per-plugin data.

`TextLineDataset(...)`: Creates a dataset that emits the lines of one or more
text files.

`TextLineReader(...)`: A Reader that outputs the lines of a file delimited by
'\n'.

`TextLineReaderV2(...)`: A Reader that outputs the lines of a file delimited
by '\n'.

`ThreadPoolDataset(...)`: Creates a dataset that uses a custom thread pool to
compute `input_dataset`.

`ThreadPoolHandle(...)`: Creates a dataset that uses a custom thread pool to
compute `input_dataset`.

`ThreadUnsafeUnigramCandidateSampler(...)`: Generates labels for candidate
sampling with a learned unigram distribution.

`Tile(...)`: Constructs a tensor by tiling a given tensor.

`TileGrad(...)`: Returns the gradient of `Tile`.

`Timestamp(...)`: Provides the time since epoch in seconds.

`ToBool(...)`: Converts a tensor to a scalar predicate.

`TopK(...)`: Finds values and indices of the `k` largest elements for the last
dimension.

`TopKV2(...)`: Finds values and indices of the `k` largest elements for the
last dimension.

`Transpose(...)`: Shuffle dimensions of x according to a permutation.

`TridiagonalMatMul(...)`: Calculate product with tridiagonal matrix.

`TridiagonalSolve(...)`: Solves tridiagonal systems of equations.

`TruncateDiv(...)`: Returns x / y element-wise for integer types.

`TruncateMod(...)`: Returns element-wise remainder of division. This emulates
C semantics in that

`TruncatedNormal(...)`: Outputs random values from a truncated normal
distribution.

`Unbatch(...)`: Reverses the operation of Batch for a single output Tensor.

`UnbatchDataset(...)`: A dataset that splits the elements of its input into
multiple elements.

`UnbatchGrad(...)`: Gradient of Unbatch.

`UncompressElement(...)`: Uncompresses a compressed dataset element.

`UnicodeDecode(...)`: Decodes each string in `input` into a sequence of
Unicode code points.

`UnicodeDecodeWithOffsets(...)`: Decodes each string in `input` into a
sequence of Unicode code points.

`UnicodeEncode(...)`: Encode a tensor of ints into unicode strings.

`UnicodeScript(...)`: Determine the script codes of a given tensor of Unicode
integer code points.

`UnicodeTranscode(...)`: Transcode the input text from a source encoding to a
destination encoding.

`UniformCandidateSampler(...)`: Generates labels for candidate sampling with a
uniform distribution.

`Unique(...)`: Finds unique elements in a 1-D tensor.

`UniqueDataset(...)`: Creates a dataset that contains the unique elements of
`input_dataset`.

`UniqueV2(...)`: Finds unique elements along an axis of a tensor.

`UniqueWithCounts(...)`: Finds unique elements in a 1-D tensor.

`UniqueWithCountsV2(...)`: Finds unique elements along an axis of a tensor.

`Unpack(...)`: Unpacks a given dimension of a rank-`R` tensor into `num`
rank-`(R-1)` tensors.

`UnravelIndex(...)`: Converts an array of flat indices into a tuple of
coordinate arrays.

`UnsortedSegmentJoin(...)`: Joins the elements of `inputs` based on
`segment_ids`.

`UnsortedSegmentMax(...)`: Computes the maximum along segments of a tensor.

`UnsortedSegmentMin(...)`: Computes the minimum along segments of a tensor.

`UnsortedSegmentProd(...)`: Computes the product along segments of a tensor.

`UnsortedSegmentSum(...)`: Computes the sum along segments of a tensor.

`Unstage(...)`: Op is similar to a lightweight Dequeue.

`UnwrapDatasetVariant(...)`

`UpperBound(...)`: Applies upper_bound(sorted_search_values, values) along
each row.

`VarHandleOp(...)`: Creates a handle to a Variable resource.

`VarIsInitializedOp(...)`: Checks whether a resource handle-based variable has
been initialized.

`Variable(...)`: Use VariableV2 instead.

`VariableShape(...)`: Returns the shape of the variable pointed to by
`resource`.

`VariableV2(...)`: Holds state in the form of a tensor that persists across
steps.

`Where(...)`: Returns locations of nonzero / true values in a tensor.

`While(...)`: output = input; While (Cond(output)) { output = Body(output) }

`WholeFileReader(...)`: A Reader that outputs the entire contents of a file as
a value.

`WholeFileReaderV2(...)`: A Reader that outputs the entire contents of a file
as a value.

`WindowDataset(...)`: Combines (nests of) input elements into a dataset of
(nests of) windows.

`WorkerHeartbeat(...)`: Worker heartbeat op.

`WrapDatasetVariant(...)`

`WriteAudioSummary(...)`: Writes an audio summary.

`WriteFile(...)`: Writes contents to the file at input filename. Creates file
and recursively

`WriteGraphSummary(...)`: Writes a graph summary.

`WriteHistogramSummary(...)`: Writes a histogram summary.

`WriteImageSummary(...)`: Writes an image summary.

`WriteRawProtoSummary(...)`: Writes a serialized proto summary.

`WriteScalarSummary(...)`: Writes a scalar summary.

`WriteSummary(...)`: Writes a tensor summary.

`Xdivy(...)`: Returns 0 if x == 0, and x / y otherwise, elementwise.

`Xlog1py(...)`: Returns 0 if x == 0, and x * log1p(y) otherwise, elementwise.

`Xlogy(...)`: Returns 0 if x == 0, and x * log(y) otherwise, elementwise.

`ZerosLike(...)`: Returns a tensor of zeros with the same shape and type as x.

`Zeta(...)`: Compute the Hurwitz zeta function \\(\zeta(x, q)\\).

`ZipDataset(...)`: Creates a dataset that zips together `input_datasets`.

© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/compat/v1/raw_ops

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

