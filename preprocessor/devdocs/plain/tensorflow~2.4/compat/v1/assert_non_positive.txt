# tf.compat.v1.assert_non_positive

Assert the condition `x <= 0` holds element-wise.

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.debugging.assert_non_positive`

    
    tf.compat.v1.assert_non_positive(
        x, data=None, summarize=None, message=None, name=None
    )
    
When running in graph mode, you should add a dependency on this operation to
ensure that it runs. Example of adding a dependency to an operation:

    
    with tf.control_dependencies([tf.debugging.assert_non_positive(x, y)]):
      output = tf.reduce_sum(x)
    
Non-positive means, for every element `x[i]` of `x`, we have `x[i] <= 0`. If
`x` is empty this is trivially satisfied.

Args  
---  
`x` |  Numeric `Tensor`.   
`data` |  The tensors to print out if the condition is False. Defaults to error message and first few entries of `x`.   
`summarize` |  Print this many entries of each tensor.   
`message` |  A string to prefix to the default message.   
`name` |  A name for this operation (optional). Defaults to "assert_non_positive".   
Returns  
---  
Op that raises `InvalidArgumentError` if `x <= 0` is False.  
Raises  
---  
`InvalidArgumentError` |  if the check can be performed immediately and `x <= 0` is False. The check can be performed immediately during eager execution or if `x` is statically known.   
#### Eager Compatibility

returns None

Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/compat/v1/assert_non_positive

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

