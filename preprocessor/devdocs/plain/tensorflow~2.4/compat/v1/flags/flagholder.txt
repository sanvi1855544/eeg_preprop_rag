# tf.compat.v1.flags.FlagHolder

Holds a defined flag.

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.app.flags.FlagHolder`

    
    tf.compat.v1.flags.FlagHolder(
        flag_values, flag, ensure_non_none_value=False
    )
    
This facilitates a cleaner api around global state. Instead of

    
    flags.DEFINE_integer('foo', ...)
    flags.DEFINE_integer('bar', ...)
    ...
    def method():
      # prints parsed value of 'bar' flag
      print(flags.FLAGS.foo)
      # runtime error due to typo or possibly bad coding style.
      print(flags.FLAGS.baz)
    
it encourages code like

    
    FOO_FLAG = flags.DEFINE_integer('foo', ...)
    BAR_FLAG = flags.DEFINE_integer('bar', ...)
    ...
    def method():
      print(FOO_FLAG.value)
      print(BAR_FLAG.value)
    
since the name of the flag appears only once in the source code.

Args  
---  
`flag_values` |  The container the flag is registered to.   
`flag` |  The flag object for this flag.   
`ensure_non_none_value` |  Is the value of the flag allowed to be None.   
Attributes  
---  
`default` |  Returns the default value of the flag.   
`name` |   
`value` |  Returns the value of the flag. If _ensure_non_none_value is True, then return value is not None.   
## Methods

### `__bool__`

    
    __bool__()
    
### `__eq__`

    
    __eq__(
        other
    )
    
Return self==value.

### `__nonzero__`

    
    __nonzero__()
    
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/compat/v1/flags/FlagHolder

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

