# Module: tf.compat.v1.io

Public API for tf.io namespace.

## Modules

`gfile` module: Public API for tf.io.gfile namespace.

## Classes

`class FixedLenFeature`: Configuration for parsing a fixed-length input
feature.

`class FixedLenSequenceFeature`: Configuration for parsing a variable-length
input feature into a `Tensor`.

`class PaddingFIFOQueue`: A FIFOQueue that supports batching variable-sized
tensors by padding.

`class PriorityQueue`: A queue implementation that dequeues elements in
prioritized order.

`class QueueBase`: Base class for queue implementations.

`class RaggedFeature`: Configuration for passing a RaggedTensor input feature.

`class RandomShuffleQueue`: A queue implementation that dequeues elements in a
random order.

`class SparseFeature`: Configuration for parsing a sparse input feature from
an `Example`.

`class TFRecordCompressionType`: The type of compression for the record.

`class TFRecordOptions`: Options used for manipulating TFRecord files.

`class TFRecordWriter`: A class to write records to a TFRecords file.

`class VarLenFeature`: Configuration for parsing a variable-length input
feature.

## Functions

`decode_and_crop_jpeg(...)`: Decode and Crop a JPEG-encoded image to a uint8
tensor.

`decode_base64(...)`: Decode web-safe base64-encoded strings.

`decode_bmp(...)`: Decode the first frame of a BMP-encoded image to a uint8
tensor.

`decode_compressed(...)`: Decompress strings.

`decode_csv(...)`: Convert CSV records to tensors. Each column maps to one
tensor.

`decode_gif(...)`: Decode the frame(s) of a GIF-encoded image to a uint8
tensor.

`decode_image(...)`: Function for `decode_bmp`, `decode_gif`, `decode_jpeg`,
and `decode_png`.

`decode_jpeg(...)`: Decode a JPEG-encoded image to a uint8 tensor.

`decode_json_example(...)`: Convert JSON-encoded Example records to binary
protocol buffer strings.

`decode_png(...)`: Decode a PNG-encoded image to a uint8 or uint16 tensor.

`decode_proto(...)`: The op extracts fields from a serialized protocol buffers
message into tensors.

`decode_raw(...)`: Convert raw byte strings into tensors. (deprecated
arguments)

`deserialize_many_sparse(...)`: Deserialize and concatenate `SparseTensors`
from a serialized minibatch.

`encode_base64(...)`: Encode strings into web-safe base64 format.

`encode_jpeg(...)`: JPEG-encode an image.

`encode_png(...)`: PNG-encode an image.

`encode_proto(...)`: The op serializes protobuf messages provided in the input
tensors.

`extract_jpeg_shape(...)`: Extract the shape information of a JPEG-encoded
image.

`is_jpeg(...)`: Convenience function to check if the 'contents' encodes a JPEG
image.

`match_filenames_once(...)`: Save the list of files matching pattern, so it is
only computed once.

`matching_files(...)`: Returns the set of files matching one or more glob
patterns.

`parse_example(...)`: Parses `Example` protos into a `dict` of tensors.

`parse_sequence_example(...)`: Parses a batch of `SequenceExample` protos.

`parse_single_example(...)`: Parses a single `Example` proto.

`parse_single_sequence_example(...)`: Parses a single `SequenceExample` proto.

`parse_tensor(...)`: Transforms a serialized tensorflow.TensorProto proto into
a Tensor.

`read_file(...)`: Reads and outputs the entire contents of the input filename.

`serialize_many_sparse(...)`: Serialize `N`-minibatch `SparseTensor` into an
`[N, 3]` `Tensor`.

`serialize_sparse(...)`: Serialize a `SparseTensor` into a 3-vector (1-D
`Tensor`) object.

`serialize_tensor(...)`: Transforms a Tensor into a serialized TensorProto
proto.

`tf_record_iterator(...)`: An iterator that read the records from a TFRecords
file. (deprecated)

`write_file(...)`: Writes contents to the file at input filename. Creates file
and recursively

`write_graph(...)`: Writes a graph proto to a file.

Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/compat/v1/io

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

