# Module: tf.compat.v1

View source on GitHub  Bring in all of the public TensorFlow interface into
this module.

## Modules

`app` module: Generic entry point script. `audio` module: Public API for
tf.audio namespace. `autograph` module: Conversion of plain Python into
TensorFlow graph code. `bitwise` module: Operations for manipulating the
binary representations of integers. `compat` module: Compatibility functions.
`config` module: Public API for tf.config namespace. `data` module:
`tf.data.Dataset` API for input pipelines. `debugging` module: Public API for
tf.debugging namespace. `distribute` module: Library for running a computation
across multiple devices. `distributions` module: Core module for TensorFlow
distribution objects and helpers. `dtypes` module: Public API for tf.dtypes
namespace. `errors` module: Exception types for TensorFlow errors. `estimator`
module: Estimator: High level tools for working with models. `experimental`
module: Public API for tf.experimental namespace. `feature_column` module:
Public API for tf.feature_column namespace. `flags` module: Import router for
absl.flags. See https://github.com/abseil/abseil-py `gfile` module: Import
router for file_io. `graph_util` module: Helpers to manipulate a tensor graph
in python. `image` module: Image ops. `initializers` module: Public API for
tf.initializers namespace. `io` module: Public API for tf.io namespace.
`keras` module: Implementation of the Keras API meant to be a high-level API
for TensorFlow. `layers` module: Public API for tf.layers namespace. `linalg`
module: Operations for linear algebra. `lite` module: Public API for tf.lite
namespace. `logging` module: Logging and Summary Operations. `lookup` module:
Public API for tf.lookup namespace. `losses` module: Loss operations for use
in neural networks. `manip` module: Operators for manipulating tensors. `math`
module: Math Operations. `metrics` module: Evaluation-related metrics.
`mixed_precision` module: Public API for tf.mixed_precision namespace. `mlir`
module: Public API for tf.mlir namespace. `nest` module: Public API for
tf.nest namespace. `nn` module: Wrappers for primitive Neural Net (NN)
Operations. `profiler` module: Public API for tf.profiler namespace.
`python_io` module: Python functions for directly manipulating TFRecord-
formatted files. `quantization` module: Public API for tf.quantization
namespace. `queue` module: Public API for tf.queue namespace. `ragged` module:
Ragged Tensors. `random` module: Public API for tf.random namespace. `raw_ops`
module: Public API for tf.raw_ops namespace. `resource_loader` module:
Resource management library. `saved_model` module: Public API for
tf.saved_model namespace. `sets` module: Tensorflow set operations. `signal`
module: Signal processing operations. `sparse` module: Sparse Tensor
Representation. `spectral` module: Public API for tf.spectral namespace.
`strings` module: Operations for working with string Tensors. `summary`
module: Operations for writing summary data, for use in analysis and
visualization. `sysconfig` module: System configuration library. `test`
module: Testing. `tpu` module: Ops related to Tensor Processing Units. `train`
module: Support for training models. `types` module: Public TensorFlow type
definitions. `user_ops` module: Public API for tf.user_ops namespace.
`version` module: Public API for tf.version namespace. `xla` module: Public
API for tf.xla namespace.

## Classes

`class AggregationMethod`: A class listing aggregation methods used to combine
gradients. `class AttrValue`: A ProtocolMessage `class
ConditionalAccumulator`: A conditional accumulator for aggregating gradients.
`class ConditionalAccumulatorBase`: A conditional accumulator for aggregating
gradients. `class ConfigProto`: A ProtocolMessage `class CriticalSection`:
Critical section. `class DType`: Represents the type of the elements in a
`Tensor`. `class DeviceSpec`: Represents a (possibly partial) specification
for a TensorFlow device. `class Dimension`: Represents the value of one
dimension in a TensorShape. `class Event`: A ProtocolMessage `class
FIFOQueue`: A queue implementation that dequeues elements in first-in first-
out order. `class FixedLenFeature`: Configuration for parsing a fixed-length
input feature. `class FixedLenSequenceFeature`: Configuration for parsing a
variable-length input feature into a `Tensor`. `class
FixedLengthRecordReader`: A Reader that outputs fixed-length records from a
file. `class GPUOptions`: A ProtocolMessage `class GradientTape`: Record
operations for automatic differentiation. `class Graph`: A TensorFlow
computation, represented as a dataflow graph. `class GraphDef`: A
ProtocolMessage `class GraphKeys`: Standard names to use for graph
collections. `class GraphOptions`: A ProtocolMessage `class HistogramProto`: A
ProtocolMessage `class IdentityReader`: A Reader that outputs the queued work
as both the key and value. `class IndexedSlices`: A sparse representation of a
set of tensor slices at given indices. `class IndexedSlicesSpec`: Type
specification for a `tf.IndexedSlices`. `class InteractiveSession`: A
TensorFlow `Session` for use in interactive contexts, such as a shell. `class
LMDBReader`: A Reader that outputs the records from a LMDB file. `class
LogMessage`: A ProtocolMessage `class MetaGraphDef`: A ProtocolMessage `class
Module`: Base neural network module class. `class NameAttrList`: A
ProtocolMessage `class NodeDef`: A ProtocolMessage `class OpError`: A generic
error that is raised when TensorFlow execution fails. `class Operation`:
Represents a graph node that performs computation on tensors. `class
OptimizerOptions`: A ProtocolMessage `class OptionalSpec`: Type specification
for `tf.experimental.Optional`. `class PaddingFIFOQueue`: A FIFOQueue that
supports batching variable-sized tensors by padding. `class PriorityQueue`: A
queue implementation that dequeues elements in prioritized order. `class
QueueBase`: Base class for queue implementations. `class RaggedTensor`:
Represents a ragged tensor. `class RaggedTensorSpec`: Type specification for a
`tf.RaggedTensor`. `class RandomShuffleQueue`: A queue implementation that
dequeues elements in a random order. `class ReaderBase`: Base class for
different Reader types, that produce a record every step. `class
RegisterGradient`: A decorator for registering the gradient function for an op
type. `class RunMetadata`: A ProtocolMessage `class RunOptions`: A
ProtocolMessage `class Session`: A class for running TensorFlow operations.
`class SessionLog`: A ProtocolMessage `class SparseConditionalAccumulator`: A
conditional accumulator for aggregating sparse gradients. `class
SparseFeature`: Configuration for parsing a sparse input feature from an
`Example`. `class SparseTensor`: Represents a sparse tensor. `class
SparseTensorSpec`: Type specification for a `tf.sparse.SparseTensor`. `class
SparseTensorValue`: SparseTensorValue(indices, values, dense_shape) `class
Summary`: A ProtocolMessage `class SummaryMetadata`: A ProtocolMessage `class
TFRecordReader`: A Reader that outputs the records from a TFRecords file.
`class Tensor`: A tensor is a multidimensional array of elements represented
by a `class TensorArray`: Class wrapping dynamic-sized, per-time-step, write-
once Tensor arrays. `class TensorArraySpec`: Type specification for a
`tf.TensorArray`. `class TensorInfo`: A ProtocolMessage `class TensorShape`:
Represents the shape of a `Tensor`. `class TensorSpec`: Describes a tf.Tensor.
`class TextLineReader`: A Reader that outputs the lines of a file delimited by
newlines. `class TypeSpec`: Specifies a TensorFlow value type. `class
UnconnectedGradients`: Controls how gradient computation behaves when y does
not depend on x. `class VarLenFeature`: Configuration for parsing a variable-
length input feature. `class Variable`: See the Variables Guide. `class
VariableAggregation`: Indicates how a distributed variable will be aggregated.
`class VariableScope`: Variable scope object to carry defaults to provide to
`get_variable`. `class VariableSynchronization`: Indicates when a distributed
variable will be synced. `class WholeFileReader`: A Reader that outputs the
entire contents of a file as a value. `class constant_initializer`:
Initializer that generates tensors with constant values. `class
glorot_normal_initializer`: The Glorot normal initializer, also called Xavier
normal initializer. `class glorot_uniform_initializer`: The Glorot uniform
initializer, also called Xavier uniform initializer. `class name_scope`: A
context manager for use when defining a Python op. `class ones_initializer`:
Initializer that generates tensors initialized to 1. `class
orthogonal_initializer`: Initializer that generates an orthogonal matrix.
`class random_normal_initializer`: Initializer that generates tensors with a
normal distribution. `class random_uniform_initializer`: Initializer that
generates tensors with a uniform distribution. `class
truncated_normal_initializer`: Initializer that generates a truncated normal
distribution. `class uniform_unit_scaling_initializer`: Initializer that
generates tensors without scaling variance. `class variable_scope`: A context
manager for defining ops that creates variables (layers). `class
variance_scaling_initializer`: Initializer capable of adapting its scale to
the shape of weights tensors. `class zeros_initializer`: Initializer that
generates tensors initialized to 0.

## Functions

`Assert(...)`: Asserts that the given condition is true. `NoGradient(...)`: Specifies that ops of type `op_type` is not differentiable. `NotDifferentiable(...)`: Specifies that ops of type `op_type` is not differentiable. `Print(...)`: Prints a list of tensors. (deprecated) `abs(...)`: Computes the absolute value of a tensor. `accumulate_n(...)`: Returns the element-wise sum of a list of tensors. `acos(...)`: Computes acos of x element-wise. `acosh(...)`: Computes inverse hyperbolic cosine of x element-wise. `add(...)`: Returns x + y element-wise. `add_check_numerics_ops(...)`: Connect a `tf.debugging.check_numerics` to every floating point tensor. `add_n(...)`: Adds all input tensors element-wise. `add_to_collection(...)`: Wrapper for `Graph.add_to_collection()` using the default graph. `add_to_collections(...)`: Wrapper for `Graph.add_to_collections()` using the default graph. `all_variables(...)`: Use `tf.compat.v1.global_variables` instead. (deprecated) `angle(...)`: Returns the element-wise argument of a complex (or real) tensor. `arg_max(...)`: Returns the index with the largest value across dimensions of a tensor. `arg_min(...)`: Returns the index with the smallest value across dimensions of a tensor. `argmax(...)`: Returns the index with the largest value across axes of a tensor. (deprecated arguments) `argmin(...)`: Returns the index with the smallest value across axes of a tensor. (deprecated arguments) `argsort(...)`: Returns the indices of a tensor that give its sorted order along an axis. `as_dtype(...)`: Converts the given `type_value` to a `DType`. `as_string(...)`: Converts each entry in the given tensor to strings. `asin(...)`: Computes the trignometric inverse sine of x element-wise. `asinh(...)`: Computes inverse hyperbolic sine of x element-wise. `assert_equal(...)`: Assert the condition `x == y` holds element-wise. `assert_greater(...)`: Assert the condition `x > y` holds element-wise. `assert_greater_equal(...)`: Assert the condition `x >= y` holds element-wise. `assert_integer(...)`: Assert that `x` is of integer dtype. `assert_less(...)`: Assert the condition `x < y` holds element-wise. `assert_less_equal(...)`: Assert the condition `x <= y` holds element-wise. `assert_near(...)`: Assert the condition `x` and `y` are close element-wise. `assert_negative(...)`: Assert the condition `x < 0` holds element-wise. `assert_non_negative(...)`: Assert the condition `x >= 0` holds element-wise. `assert_non_positive(...)`: Assert the condition `x <= 0` holds element-wise. `assert_none_equal(...)`: Assert the condition `x != y` holds element-wise. `assert_positive(...)`: Assert the condition `x > 0` holds element-wise. `assert_proper_iterable(...)`: Static assert that values is a "proper" iterable. `assert_rank(...)`: Assert `x` has rank equal to `rank`. `assert_rank_at_least(...)`: Assert `x` has rank equal to `rank` or higher. `assert_rank_in(...)`: Assert `x` has rank in `ranks`. `assert_same_float_dtype(...)`: Validate and return float type based on `tensors` and `dtype`. `assert_scalar(...)`: Asserts that the given `tensor` is a scalar (i.e. zero-dimensional). `assert_type(...)`: Statically asserts that the given `Tensor` is of the specified type. `assert_variables_initialized(...)`: Returns an Op to check if variables are initialized. `assign(...)`: Update `ref` by assigning `value` to it. `assign_add(...)`: Update `ref` by adding `value` to it. `assign_sub(...)`: Update `ref` by subtracting `value` from it. `atan(...)`: Computes the trignometric inverse tangent of x element-wise. `atan2(...)`: Computes arctangent of `y/x` element-wise, respecting signs of the arguments. `atanh(...)`: Computes inverse hyperbolic tangent of x element-wise. `batch_gather(...)`: Gather slices from params according to indices with leading batch dims. (deprecated) `batch_scatter_update(...)`: Generalization of `tf.compat.v1.scatter_update` to axis different than 0. (deprecated) `batch_to_space(...)`: BatchToSpace for 4-D tensors of type T. `batch_to_space_nd(...)`: BatchToSpace for N-D tensors of type T. `betainc(...)`: Compute the regularized incomplete beta integral \\(I_x(a, b)\\). `bincount(...)`: Counts the number of occurrences of each value in an integer array. `bitcast(...)`: Bitcasts a tensor from one type to another without copying data. `boolean_mask(...)`: Apply boolean mask to tensor. `broadcast_dynamic_shape(...)`: Computes the shape of a broadcast given symbolic shapes. `broadcast_static_shape(...)`: Computes the shape of a broadcast given known shapes. `broadcast_to(...)`: Broadcast an array for a compatible shape. `case(...)`: Create a case operation. `cast(...)`: Casts a tensor to a new type. `ceil(...)`: Return the ceiling of the input, element-wise. `check_numerics(...)`: Checks a tensor for NaN and Inf values. `cholesky(...)`: Computes the Cholesky decomposition of one or more square matrices. `cholesky_solve(...)`: Solves systems of linear eqns `A X = RHS`, given Cholesky factorizations. `clip_by_average_norm(...)`: Clips tensor values to a maximum average L2-norm. (deprecated) `clip_by_global_norm(...)`: Clips values of multiple tensors by the ratio of the sum of their norms. `clip_by_norm(...)`: Clips tensor values to a maximum L2-norm. `clip_by_value(...)`: Clips tensor values to a specified min and max. `colocate_with(...)`: DEPRECATED FUNCTION `complex(...)`: Converts two real numbers to a complex number. `concat(...)`: Concatenates tensors along one dimension. `cond(...)`: Return `true_fn()` if the predicate `pred` is true else `false_fn()`. (deprecated arguments) `confusion_matrix(...)`: Computes the confusion matrix from predictions and labels. `conj(...)`: Returns the complex conjugate of a complex number. `constant(...)`: Creates a constant tensor. `container(...)`: Wrapper for `Graph.container()` using the default graph. `control_dependencies(...)`: Wrapper for `Graph.control_dependencies()` using the default graph. `control_flow_v2_enabled(...)`: Returns `True` if v2 control flow is enabled. `convert_to_tensor(...)`: Converts the given `value` to a `Tensor`. `convert_to_tensor_or_indexed_slices(...)`: Converts the given object to a `Tensor` or an `IndexedSlices`. `convert_to_tensor_or_sparse_tensor(...)`: Converts value to a `SparseTensor` or `Tensor`. `cos(...)`: Computes cos of x element-wise. `cosh(...)`: Computes hyperbolic cosine of x element-wise. `count_nonzero(...)`: Computes number of nonzero elements across dimensions of a tensor. (deprecated arguments) (deprecated arguments) `count_up_to(...)`: Increments 'ref' until it reaches 'limit'. (deprecated) `create_partitioned_variables(...)`: Create a list of partitioned variables according to the given `slicing`. (deprecated) `cross(...)`: Compute the pairwise cross product. `cumprod(...)`: Compute the cumulative product of the tensor `x` along `axis`. `cumsum(...)`: Compute the cumulative sum of the tensor `x` along `axis`. `custom_gradient(...)`: Decorator to define a function with a custom gradient. `decode_base64(...)`: Decode web-safe base64-encoded strings. `decode_compressed(...)`: Decompress strings. `decode_csv(...)`: Convert CSV records to tensors. Each column maps to one tensor. `decode_json_example(...)`: Convert JSON-encoded Example records to binary protocol buffer strings. `decode_raw(...)`: Convert raw byte strings into tensors. (deprecated arguments) `delete_session_tensor(...)`: Delete the tensor for the given tensor handle. `depth_to_space(...)`: DepthToSpace for tensors of type T. `dequantize(...)`: Dequantize the 'input' tensor into a float or bfloat16 Tensor. `deserialize_many_sparse(...)`: Deserialize and concatenate `SparseTensors` from a serialized minibatch. `device(...)`: Wrapper for `Graph.device()` using the default graph. `diag(...)`: Returns a diagonal tensor with a given diagonal values. `diag_part(...)`: Returns the diagonal part of the tensor. `digamma(...)`: Computes Psi, the derivative of Lgamma (the log of the absolute value of `dimension_at_index(...)`: Compatibility utility required to allow for both V1 and V2 behavior in TF. `dimension_value(...)`: Compatibility utility required to allow for both V1 and V2 behavior in TF. `disable_control_flow_v2(...)`: Opts out of control flow v2. `disable_eager_execution(...)`: Disables eager execution. `disable_resource_variables(...)`: Opts out of resource variables. (deprecated) `disable_tensor_equality(...)`: Compare Tensors by their id and be hashable. `disable_v2_behavior(...)`: Disables TensorFlow 2.x behaviors. `disable_v2_tensorshape(...)`: Disables the V2 TensorShape behavior and reverts to V1 behavior. `div(...)`: Divides x / y elementwise (using Python 2 division operator semantics). (deprecated) `div_no_nan(...)`: Computes a safe divide which returns 0 if the y is zero. `divide(...)`: Computes Python style division of `x` by `y`. `dynamic_partition(...)`: Partitions `data` into `num_partitions` tensors using indices from `partitions`. `dynamic_stitch(...)`: Interleave the values from the `data` tensors into a single tensor. `edit_distance(...)`: Computes the Levenshtein distance between sequences. `einsum(...)`: Tensor contraction over specified indices and outer product. `enable_control_flow_v2(...)`: Use control flow v2. `enable_eager_execution(...)`: Enables eager execution for the lifetime of this program. `enable_resource_variables(...)`: Creates resource variables by default. `enable_tensor_equality(...)`: Compare Tensors with element-wise comparison and thus be unhashable. `enable_v2_behavior(...)`: Enables TensorFlow 2.x behaviors. `enable_v2_tensorshape(...)`: In TensorFlow 2.0, iterating over a TensorShape instance returns values. `encode_base64(...)`: Encode strings into web-safe base64 format. `ensure_shape(...)`: Updates the shape of a tensor and checks at runtime that the shape holds. `equal(...)`: Returns the truth value of (x == y) element-wise. `erf(...)`: Computes the Gauss error function of `x` element-wise. `erfc(...)`: Computes the complementary error function of `x` element-wise. `executing_eagerly(...)`: Checks whether the current thread has eager execution enabled. `executing_eagerly_outside_functions(...)`: Returns True if executing eagerly, even if inside a graph function. `exp(...)`: Computes exponential of x element-wise. \\(y = e^x\\). `expand_dims(...)`: Returns a tensor with a length 1 axis inserted at index `axis`. (deprecated arguments) `expm1(...)`: Computes `exp(x) - 1` element-wise. `extract_image_patches(...)`: Extract `patches` from `images` and put them in the "depth" output dimension. `extract_volume_patches(...)`: Extract `patches` from `input` and put them in the `"depth"` output dimension. 3D extension of `extract_image_patches`. `eye(...)`: Construct an identity matrix, or a batch of matrices. `fake_quant_with_min_max_args(...)`: Fake-quantize the 'inputs' tensor, type float to 'outputs' tensor of same type. `fake_quant_with_min_max_args_gradient(...)`: Compute gradients for a FakeQuantWithMinMaxArgs operation. `fake_quant_with_min_max_vars(...)`: Fake-quantize the 'inputs' tensor of type float via global float scalars `fake_quant_with_min_max_vars_gradient(...)`: Compute gradients for a FakeQuantWithMinMaxVars operation. `fake_quant_with_min_max_vars_per_channel(...)`: Fake-quantize the 'inputs' tensor of type float via per-channel floats `fake_quant_with_min_max_vars_per_channel_gradient(...)`: Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation. `fft(...)`: Fast Fourier transform. `fft2d(...)`: 2D fast Fourier transform. `fft3d(...)`: 3D fast Fourier transform. `fill(...)`: Creates a tensor filled with a scalar value. `fingerprint(...)`: Generates fingerprint values. `fixed_size_partitioner(...)`: Partitioner to specify a fixed number of shards along given axis. `floor(...)`: Returns element-wise largest integer not greater than x. `floor_div(...)`: Returns x // y element-wise. `floordiv(...)`: Divides `x / y` elementwise, rounding toward the most negative integer. `floormod(...)`: Returns element-wise remainder of division. When `x < 0` xor `y < 0` is `foldl(...)`: foldl on the list of tensors unpacked from `elems` on dimension 0. `foldr(...)`: foldr on the list of tensors unpacked from `elems` on dimension 0. `function(...)`: Compiles a function into a callable TensorFlow graph. `gather(...)`: Gather slices from params axis `axis` according to indices. `gather_nd(...)`: Gather slices from `params` into a Tensor with shape specified by `indices`. `get_collection(...)`: Wrapper for `Graph.get_collection()` using the default graph. `get_collection_ref(...)`: Wrapper for `Graph.get_collection_ref()` using the default graph. `get_default_graph(...)`: Returns the default graph for the current thread. `get_default_session(...)`: Returns the default session for the current thread. `get_local_variable(...)`: Gets an existing local variable or creates a new one. `get_logger(...)`: Return TF logger instance. `get_seed(...)`: Returns the local seeds an operation should use given an op-specific seed. `get_session_handle(...)`: Return the handle of `data`. `get_session_tensor(...)`: Get the tensor of type `dtype` by feeding a tensor handle. `get_static_value(...)`: Returns the constant value of the given tensor, if efficiently calculable. `get_variable(...)`: Gets an existing variable with these parameters or create a new one. `get_variable_scope(...)`: Returns the current variable scope. `global_norm(...)`: Computes the global norm of multiple tensors. `global_variables(...)`: Returns global variables. `global_variables_initializer(...)`: Returns an Op that initializes global variables. `grad_pass_through(...)`: Creates a grad-pass-through op with the forward behavior provided in f. `gradients(...)`: Constructs symbolic derivatives of sum of `ys` w.r.t. x in `xs`. `greater(...)`: Returns the truth value of (x > y) element-wise. `greater_equal(...)`: Returns the truth value of (x >= y) element-wise. `group(...)`: Create an op that groups multiple operations. `guarantee_const(...)`: Gives a guarantee to the TF runtime that the input tensor is a constant. `hessians(...)`: Constructs the Hessian of sum of `ys` with respect to `x` in `xs`. `histogram_fixed_width(...)`: Return histogram of values. `histogram_fixed_width_bins(...)`: Bins the given values for use in a histogram. `identity(...)`: Return a Tensor with the same shape and contents as input. `identity_n(...)`: Returns a list of tensors with the same shapes and contents as the input `ifft(...)`: Inverse fast Fourier transform. `ifft2d(...)`: Inverse 2D fast Fourier transform. `ifft3d(...)`: Inverse 3D fast Fourier transform. `igamma(...)`: Compute the lower regularized incomplete Gamma function `P(a, x)`. `igammac(...)`: Compute the upper regularized incomplete Gamma function `Q(a, x)`. `imag(...)`: Returns the imaginary part of a complex (or real) tensor. `import_graph_def(...)`: Imports the graph from `graph_def` into the current default `Graph`. (deprecated arguments) `init_scope(...)`: A context manager that lifts ops out of control-flow scopes and function-building graphs. `initialize_all_tables(...)`: Returns an Op that initializes all tables of the default graph. (deprecated) `initialize_all_variables(...)`: See `tf.compat.v1.global_variables_initializer`. (deprecated) `initialize_local_variables(...)`: See `tf.compat.v1.local_variables_initializer`. (deprecated) `initialize_variables(...)`: See `tf.compat.v1.variables_initializer`. (deprecated) `invert_permutation(...)`: Computes the inverse permutation of a tensor. `is_finite(...)`: Returns which elements of x are finite. `is_inf(...)`: Returns which elements of x are Inf. `is_nan(...)`: Returns which elements of x are NaN. `is_non_decreasing(...)`: Returns `True` if `x` is non-decreasing. `is_numeric_tensor(...)`: Returns `True` if the elements of `tensor` are numbers. `is_strictly_increasing(...)`: Returns `True` if `x` is strictly increasing. `is_tensor(...)`: Checks whether `x` is a TF-native type that can be passed to many TF ops. `is_variable_initialized(...)`: Tests if a variable has been initialized. `lbeta(...)`: Computes \\(ln(|Beta(x)|)\\), reducing along the last dimension. `less(...)`: Returns the truth value of (x < y) element-wise. `less_equal(...)`: Returns the truth value of (x <= y) element-wise. `lgamma(...)`: Computes the log of the absolute value of `Gamma(x)` element-wise. `lin_space(...)`: Generates evenly-spaced values in an interval along a given axis. `linspace(...)`: Generates evenly-spaced values in an interval along a given axis. `load_file_system_library(...)`: Loads a TensorFlow plugin, containing file system implementation. (deprecated) `load_library(...)`: Loads a TensorFlow plugin. `load_op_library(...)`: Loads a TensorFlow plugin, containing custom ops and kernels. `local_variables(...)`: Returns local variables. `local_variables_initializer(...)`: Returns an Op that initializes all local variables. `log(...)`: Computes natural logarithm of x element-wise. `log1p(...)`: Computes natural logarithm of (1 + x) element-wise. `log_sigmoid(...)`: Computes log sigmoid of `x` element-wise. `logical_and(...)`: Logical AND function. `logical_not(...)`: Returns the truth value of `NOT x` element-wise. `logical_or(...)`: Returns the truth value of x OR y element-wise. `logical_xor(...)`: Logical XOR function. `make_ndarray(...)`: Create a numpy ndarray from a tensor. `make_template(...)`: Given an arbitrary function, wrap it so that it does variable sharing. `make_tensor_proto(...)`: Create a TensorProto. `map_fn(...)`: Transforms `elems` by applying `fn` to each element unstacked on axis 0. (deprecated arguments) `matching_files(...)`: Returns the set of files matching one or more glob patterns. `matmul(...)`: Multiplies matrix `a` by matrix `b`, producing `a` * `b`. `matrix_band_part(...)`: Copy a tensor setting everything outside a central band in each innermost matrix to zero. `matrix_determinant(...)`: Computes the determinant of one or more square matrices. `matrix_diag(...)`: Returns a batched diagonal tensor with given batched diagonal values. `matrix_diag_part(...)`: Returns the batched diagonal part of a batched tensor. `matrix_inverse(...)`: Computes the inverse of one or more square invertible matrices or their adjoints (conjugate transposes). `matrix_set_diag(...)`: Returns a batched matrix tensor with new batched diagonal values. `matrix_solve(...)`: Solves systems of linear equations. `matrix_solve_ls(...)`: Solves one or more linear least-squares problems. `matrix_square_root(...)`: Computes the matrix square root of one or more square matrices: `matrix_transpose(...)`: Transposes last two dimensions of tensor `a`. `matrix_triangular_solve(...)`: Solve systems of linear equations with upper or lower triangular matrices. `maximum(...)`: Returns the max of x and y (i.e. x > y ? x : y) element-wise. `meshgrid(...)`: Broadcasts parameters for evaluation on an N-D grid. `min_max_variable_partitioner(...)`: Partitioner to allocate minimum size per slice. `minimum(...)`: Returns the min of x and y (i.e. x < y ? x : y) element-wise. `mod(...)`: Returns element-wise remainder of division. When `x < 0` xor `y < 0` is `model_variables(...)`: Returns all variables in the MODEL_VARIABLES collection. `moving_average_variables(...)`: Returns all variables that maintain their moving averages. `multinomial(...)`: Draws samples from a multinomial distribution. (deprecated) `multiply(...)`: Returns an element-wise x * y. `negative(...)`: Computes numerical negative value element-wise. `no_gradient(...)`: Specifies that ops of type `op_type` is not differentiable. `no_op(...)`: Does nothing. Only useful as a placeholder for control edges. `no_regularizer(...)`: Use this function to prevent regularization of variables. `nondifferentiable_batch_function(...)`: Batches the computation done by the decorated function. `norm(...)`: Computes the norm of vectors, matrices, and tensors. (deprecated arguments) `not_equal(...)`: Returns the truth value of (x != y) element-wise. `numpy_function(...)`: Wraps a python function and uses it as a TensorFlow op. `one_hot(...)`: Returns a one-hot tensor. `ones(...)`: Creates a tensor with all elements set to one (1). `ones_like(...)`: Creates a tensor with all elements set to 1. `op_scope(...)`: DEPRECATED. Same as name_scope above, just different argument order. `pad(...)`: Pads a tensor. `parallel_stack(...)`: Stacks a list of rank-`R` tensors into one rank-`(R+1)` tensor in parallel. `parse_example(...)`: Parses `Example` protos into a `dict` of tensors. `parse_single_example(...)`: Parses a single `Example` proto. `parse_single_sequence_example(...)`: Parses a single `SequenceExample` proto. `parse_tensor(...)`: Transforms a serialized tensorflow.TensorProto proto into a Tensor. `placeholder(...)`: Inserts a placeholder for a tensor that will be always fed. `placeholder_with_default(...)`: A placeholder op that passes through `input` when its output is not fed. `polygamma(...)`: Compute the polygamma function \\(\psi^{(n)}(x)\\). `pow(...)`: Computes the power of one value to another. `print(...)`: Print the specified inputs. `py_func(...)`: Wraps a python function and uses it as a TensorFlow op. `py_function(...)`: Wraps a python function into a TensorFlow op that executes it eagerly. `qr(...)`: Computes the QR decompositions of one or more matrices. `quantize(...)`: Quantize the 'input' tensor of type float to 'output' tensor of type 'T'. `quantize_and_dequantize_v4(...)`: Returns the gradient of `QuantizeAndDequantizeV4`. `quantize_v2(...)`: Please use `tf.quantization.quantize` instead. `quantized_concat(...)`: Concatenates quantized tensors along one dimension. `random_crop(...)`: Randomly crops a tensor to a given size. `random_gamma(...)`: Draws `shape` samples from each of the given Gamma distribution(s). `random_normal(...)`: Outputs random values from a normal distribution. `random_poisson(...)`: Draws `shape` samples from each of the given Poisson distribution(s). `random_shuffle(...)`: Randomly shuffles a tensor along its first dimension. `random_uniform(...)`: Outputs random values from a uniform distribution. `range(...)`: Creates a sequence of numbers. `rank(...)`: Returns the rank of a tensor. `read_file(...)`: Reads and outputs the entire contents of the input filename. `real(...)`: Returns the real part of a complex (or real) tensor. `realdiv(...)`: Returns x / y element-wise for real types. `reciprocal(...)`: Computes the reciprocal of x element-wise. `recompute_grad(...)`: An eager-compatible version of recompute_grad. `reduce_all(...)`: Computes the "logical and" of elements across dimensions of a tensor. (deprecated arguments) `reduce_any(...)`: Computes the "logical or" of elements across dimensions of a tensor. (deprecated arguments) `reduce_join(...)`: Joins all strings into a single string, or joins along an axis. `reduce_logsumexp(...)`: Computes log(sum(exp(elements across dimensions of a tensor))). (deprecated arguments) `reduce_max(...)`: Computes the maximum of elements across dimensions of a tensor. (deprecated arguments) `reduce_mean(...)`: Computes the mean of elements across dimensions of a tensor. `reduce_min(...)`: Computes the minimum of elements across dimensions of a tensor. (deprecated arguments) `reduce_prod(...)`: Computes the product of elements across dimensions of a tensor. (deprecated arguments) `reduce_sum(...)`: Computes the sum of elements across dimensions of a tensor. (deprecated arguments) `regex_replace(...)`: Replace elements of `input` matching regex `pattern` with `rewrite`. `register_tensor_conversion_function(...)`: Registers a function for converting objects of `base_type` to `Tensor`. `repeat(...)`: Repeat elements of `input`. `report_uninitialized_variables(...)`: Adds ops to list the names of uninitialized variables. `required_space_to_batch_paddings(...)`: Calculate padding required to make block_shape divide input_shape. `reset_default_graph(...)`: Clears the default graph stack and resets the global default graph. `reshape(...)`: Reshapes a tensor. `resource_variables_enabled(...)`: Returns `True` if resource variables are enabled. `reverse(...)`: Reverses specific dimensions of a tensor. `reverse_sequence(...)`: Reverses variable length slices. (deprecated arguments) (deprecated arguments) `reverse_v2(...)`: Reverses specific dimensions of a tensor. `rint(...)`: Returns element-wise integer closest to x. `roll(...)`: Rolls the elements of a tensor along an axis. `round(...)`: Rounds the values of a tensor to the nearest integer, element-wise. `rsqrt(...)`: Computes reciprocal of square root of x element-wise. `saturate_cast(...)`: Performs a safe saturating cast of `value` to `dtype`. `scalar_mul(...)`: Multiplies a scalar times a `Tensor` or `IndexedSlices` object. `scan(...)`: scan on the list of tensors unpacked from `elems` on dimension 0. `scatter_add(...)`: Adds sparse updates to the variable referenced by `resource`. `scatter_div(...)`: Divides a variable reference by sparse updates. `scatter_max(...)`: Reduces sparse updates into a variable reference using the `max` operation. `scatter_min(...)`: Reduces sparse updates into a variable reference using the `min` operation. `scatter_mul(...)`: Multiplies sparse updates into a variable reference. `scatter_nd(...)`: Scatter `updates` into a new tensor according to `indices`. `scatter_nd_add(...)`: Applies sparse addition to individual values or slices in a Variable. `scatter_nd_sub(...)`: Applies sparse subtraction to individual values or slices in a Variable. `scatter_nd_update(...)`: Applies sparse `updates` to individual values or slices in a Variable. `scatter_sub(...)`: Subtracts sparse updates to a variable reference. `scatter_update(...)`: Applies sparse updates to a variable reference. `searchsorted(...)`: Searches input tensor for values on the innermost dimension. `segment_max(...)`: Computes the maximum along segments of a tensor. `segment_mean(...)`: Computes the mean along segments of a tensor. `segment_min(...)`: Computes the minimum along segments of a tensor. `segment_prod(...)`: Computes the product along segments of a tensor. `segment_sum(...)`: Computes the sum along segments of a tensor. `self_adjoint_eig(...)`: Computes the eigen decomposition of a batch of self-adjoint matrices. `self_adjoint_eigvals(...)`: Computes the eigenvalues of one or more self-adjoint matrices. `sequence_mask(...)`: Returns a mask tensor representing the first N positions of each cell. `serialize_many_sparse(...)`: Serialize `N`-minibatch `SparseTensor` into an `[N, 3]` `Tensor`. `serialize_sparse(...)`: Serialize a `SparseTensor` into a 3-vector (1-D `Tensor`) object. `serialize_tensor(...)`: Transforms a Tensor into a serialized TensorProto proto. `set_random_seed(...)`: Sets the graph-level random seed for the default graph. `setdiff1d(...)`: Computes the difference between two lists of numbers or strings. `shape(...)`: Returns the shape of a tensor. `shape_n(...)`: Returns shape of tensors. `sigmoid(...)`: Computes sigmoid of `x` element-wise. `sign(...)`: Returns an element-wise indication of the sign of a number. `sin(...)`: Computes sine of x element-wise. `sinh(...)`: Computes hyperbolic sine of x element-wise. `size(...)`: Returns the size of a tensor. `slice(...)`: Extracts a slice from a tensor. `sort(...)`: Sorts a tensor. `space_to_batch(...)`: SpaceToBatch for 4-D tensors of type T. `space_to_batch_nd(...)`: SpaceToBatch for N-D tensors of type T. `space_to_depth(...)`: SpaceToDepth for tensors of type T. `sparse_add(...)`: Adds two tensors, at least one of each is a `SparseTensor`. (deprecated arguments) `sparse_concat(...)`: Concatenates a list of `SparseTensor` along the specified dimension. (deprecated arguments) `sparse_fill_empty_rows(...)`: Fills empty rows in the input 2-D `SparseTensor` with a default value. `sparse_mask(...)`: Masks elements of `IndexedSlices`. `sparse_matmul(...)`: Multiply matrix "a" by matrix "b". `sparse_maximum(...)`: Returns the element-wise max of two SparseTensors. `sparse_merge(...)`: Combines a batch of feature ids and values into a single `SparseTensor`. (deprecated) `sparse_minimum(...)`: Returns the element-wise min of two SparseTensors. `sparse_placeholder(...)`: Inserts a placeholder for a sparse tensor that will be always fed. `sparse_reduce_max(...)`: Computes the max of elements across dimensions of a SparseTensor. (deprecated arguments) (deprecated arguments) `sparse_reduce_max_sparse(...)`: Computes the max of elements across dimensions of a SparseTensor. (deprecated arguments) `sparse_reduce_sum(...)`: Computes the sum of elements across dimensions of a SparseTensor. (deprecated arguments) (deprecated arguments) `sparse_reduce_sum_sparse(...)`: Computes the sum of elements across dimensions of a SparseTensor. (deprecated arguments) `sparse_reorder(...)`: Reorders a `SparseTensor` into the canonical, row-major ordering. `sparse_reset_shape(...)`: Resets the shape of a `SparseTensor` with indices and values unchanged. `sparse_reshape(...)`: Reshapes a `SparseTensor` to represent values in a new dense shape. `sparse_retain(...)`: Retains specified non-empty values within a `SparseTensor`. `sparse_segment_mean(...)`: Computes the mean along sparse segments of a tensor. `sparse_segment_sqrt_n(...)`: Computes the sum along sparse segments of a tensor divided by the sqrt(N). `sparse_segment_sum(...)`: Computes the sum along sparse segments of a tensor. `sparse_slice(...)`: Slice a `SparseTensor` based on the `start` and `size. `sparse_softmax(...)`: Applies softmax to a batched N-D `SparseTensor`. `sparse_split(...)`: Split a `SparseTensor` into `num_split` tensors along `axis`. (deprecated arguments) `sparse_tensor_dense_matmul(...)`: Multiply SparseTensor (or dense Matrix) (of rank 2) "A" by dense matrix `sparse_tensor_to_dense(...)`: Converts a `SparseTensor` into a dense tensor. `sparse_to_dense(...)`: Converts a sparse representation into a dense tensor. (deprecated) `sparse_to_indicator(...)`: Converts a `SparseTensor` of ids into a dense bool indicator tensor. `sparse_transpose(...)`: Transposes a `SparseTensor` `split(...)`: Splits a tensor `value` into a list of sub tensors. `sqrt(...)`: Computes element-wise square root of the input tensor. `square(...)`: Computes square of x element-wise. `squared_difference(...)`: Returns conj(x - y)(x - y) element-wise. `squeeze(...)`: Removes dimensions of size 1 from the shape of a tensor. (deprecated arguments) `stack(...)`: Stacks a list of rank-`R` tensors into one rank-`(R+1)` tensor. `stop_gradient(...)`: Stops gradient computation. `strided_slice(...)`: Extracts a strided slice of a tensor (generalized Python array indexing). `string_join(...)`: Perform element-wise concatenation of a list of string tensors. `string_split(...)`: Split elements of `source` based on `delimiter`. (deprecated arguments) `string_strip(...)`: Strip leading and trailing whitespaces from the Tensor. `string_to_hash_bucket(...)`: Converts each string in the input Tensor to its hash mod by a number of buckets. `string_to_hash_bucket_fast(...)`: Converts each string in the input Tensor to its hash mod by a number of buckets. `string_to_hash_bucket_strong(...)`: Converts each string in the input Tensor to its hash mod by a number of buckets. `string_to_number(...)`: Converts each string in the input Tensor to the specified numeric type. `substr(...)`: Return substrings from `Tensor` of strings. `subtract(...)`: Returns x - y element-wise. `svd(...)`: Computes the singular value decompositions of one or more matrices. `switch_case(...)`: Create a switch/case operation, i.e. an integer-indexed conditional. `tables_initializer(...)`: Returns an Op that initializes all tables of the default graph. `tan(...)`: Computes tan of x element-wise. `tanh(...)`: Computes hyperbolic tangent of `x` element-wise. `tensor_scatter_add(...)`: Adds sparse `updates` to an existing tensor according to `indices`. `tensor_scatter_nd_add(...)`: Adds sparse `updates` to an existing tensor according to `indices`. `tensor_scatter_nd_max(...)` `tensor_scatter_nd_min(...)` `tensor_scatter_nd_sub(...)`: Subtracts sparse `updates` from an existing tensor according to `indices`. `tensor_scatter_nd_update(...)`: "Scatter `updates` into an existing tensor according to `indices`. `tensor_scatter_sub(...)`: Subtracts sparse `updates` from an existing tensor according to `indices`. `tensor_scatter_update(...)`: "Scatter `updates` into an existing tensor according to `indices`. `tensordot(...)`: Tensor contraction of a and b along specified axes and outer product. `tile(...)`: Constructs a tensor by tiling a given tensor. `timestamp(...)`: Provides the time since epoch in seconds. `to_bfloat16(...)`: Casts a tensor to type `bfloat16`. (deprecated) `to_complex128(...)`: Casts a tensor to type `complex128`. (deprecated) `to_complex64(...)`: Casts a tensor to type `complex64`. (deprecated) `to_double(...)`: Casts a tensor to type `float64`. (deprecated) `to_float(...)`: Casts a tensor to type `float32`. (deprecated) `to_int32(...)`: Casts a tensor to type `int32`. (deprecated) `to_int64(...)`: Casts a tensor to type `int64`. (deprecated) `trace(...)`: Compute the trace of a tensor `x`. `trainable_variables(...)`: Returns all variables created with `trainable=True`. `transpose(...)`: Transposes `a`. `truediv(...)`: Divides x / y elementwise (using Python 3 division operator semantics). `truncated_normal(...)`: Outputs random values from a truncated normal distribution. `truncatediv(...)`: Returns x / y element-wise for integer types. `truncatemod(...)`: Returns element-wise remainder of division. This emulates C semantics in that `tuple(...)`: Group tensors together. `type_spec_from_value(...)`: Returns a `tf.TypeSpec` that represents the given `value`. `unique(...)`: Finds unique elements in a 1-D tensor. `unique_with_counts(...)`: Finds unique elements in a 1-D tensor. `unravel_index(...)`: Converts an array of flat indices into a tuple of coordinate arrays. `unsorted_segment_max(...)`: Computes the maximum along segments of a tensor. `unsorted_segment_mean(...)`: Computes the mean along segments of a tensor. `unsorted_segment_min(...)`: Computes the minimum along segments of a tensor. `unsorted_segment_prod(...)`: Computes the product along segments of a tensor. `unsorted_segment_sqrt_n(...)`: Computes the sum along segments of a tensor divided by the sqrt(N). `unsorted_segment_sum(...)`: Computes the sum along segments of a tensor. `unstack(...)`: Unpacks the given dimension of a rank-`R` tensor into rank-`(R-1)` tensors. `variable_axis_size_partitioner(...)`: Get a partitioner for VariableScope to keep shards below `max_shard_bytes`. `variable_creator_scope(...)`: Scope which defines a variable creation function to be used by variable(). `variable_op_scope(...)`: Deprecated: context manager for defining an op that creates variables. `variables_initializer(...)`: Returns an Op that initializes a list of variables. `vectorized_map(...)`: Parallel map on the list of tensors unpacked from `elems` on dimension 0. `verify_tensor_all_finite(...)`: Assert that the tensor does not contain any NaN's or Inf's. `where(...)`: Return the elements, either from `x` or `y`, depending on the `condition`. `where_v2(...)`: Return the elements where `condition` is `True` (multiplexing `x` and `y`). `while_loop(...)`: Repeat `body` while the condition `cond` is true. `wrap_function(...)`: Wraps the TF 1.x function fn into a graph function. `write_file(...)`: Writes contents to the file at input filename. Creates file and recursively `zeros(...)`: Creates a tensor with all elements set to zero. `zeros_like(...)`: Creates a tensor with all elements set to zero. `zeta(...)`: Compute the Hurwitz zeta function \\(\zeta(x, q)\\). | Other Members  
---  
AUTO_REUSE  |   
COMPILER_VERSION  |  `'7.3.1 20180303'`  
CXX11_ABI_FLAG  |  `0`  
GIT_VERSION  |  `'v2.4.0-rc4-71-g582c8d236cb'`  
GRAPH_DEF_VERSION  |  `561`  
GRAPH_DEF_VERSION_MIN_CONSUMER  |  `0`  
GRAPH_DEF_VERSION_MIN_PRODUCER  |  `0`  
MONOLITHIC_BUILD  |  `0`  
QUANTIZED_DTYPES  |   
VERSION  |  `'2.4.0'`  
version |  `'2.4.0'`  
bfloat16  |  `tf.dtypes.DType`  
bool  |  `tf.dtypes.DType`  
complex128  |  `tf.dtypes.DType`  
complex64  |  `tf.dtypes.DType`  
double  |  `tf.dtypes.DType`  
float16  |  `tf.dtypes.DType`  
float32  |  `tf.dtypes.DType`  
float64  |  `tf.dtypes.DType`  
half  |  `tf.dtypes.DType`  
int16  |  `tf.dtypes.DType`  
int32  |  `tf.dtypes.DType`  
int64  |  `tf.dtypes.DType`  
int8  |  `tf.dtypes.DType`  
newaxis  |  `None`  
qint16  |  `tf.dtypes.DType`  
qint32  |  `tf.dtypes.DType`  
qint8  |  `tf.dtypes.DType`  
quint16  |  `tf.dtypes.DType`  
quint8  |  `tf.dtypes.DType`  
resource  |  `tf.dtypes.DType`  
string  |  `tf.dtypes.DType`  
uint16  |  `tf.dtypes.DType`  
uint32  |  `tf.dtypes.DType`  
uint64  |  `tf.dtypes.DType`  
uint8  |  `tf.dtypes.DType`  
variant  |  `tf.dtypes.DType`  
© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/compat/v1

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

