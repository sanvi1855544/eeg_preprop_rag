# tf.keras.layers.Conv2D

View source on GitHub  2D convolution layer (e.g. spatial convolution over
images). Inherits From: `Layer`, `Module`

#### View aliases

Main aliases `tf.keras.layers.Convolution2D` Compat aliases for migration See
Migration guide for more details. `tf.compat.v1.keras.layers.Conv2D`,
`tf.compat.v1.keras.layers.Convolution2D`

    
    tf.keras.layers.Conv2D(
        filters, kernel_size, strides=(1, 1), padding='valid',
        data_format=None, dilation_rate=(1, 1), groups=1, activation=None,
        use_bias=True, kernel_initializer='glorot_uniform',
        bias_initializer='zeros', kernel_regularizer=None,
        bias_regularizer=None, activity_regularizer=None, kernel_constraint=None,
        bias_constraint=None, **kwargs
    )
    
This layer creates a convolution kernel that is convolved with the layer input
to produce a tensor of outputs. If `use_bias` is True, a bias vector is
created and added to the outputs. Finally, if `activation` is not `None`, it
is applied to the outputs as well. When using this layer as the first layer in
a model, provide the keyword argument `input_shape` (tuple of integers, does
not include the sample axis), e.g. `input_shape=(128, 128, 3)` for 128x128 RGB
pictures in `data_format="channels_last"`.

#### Examples:

    
    # The inputs are 28x28 RGB images with `channels_last` and the batch
    # size is 4.
    input_shape = (4, 28, 28, 3)
    x = tf.random.normal(input_shape)
    y = tf.keras.layers.Conv2D(
    2, 3, activation='relu', input_shape=input_shape[1:])(x)
    print(y.shape)
    (4, 26, 26, 2)
    
    
    # With `dilation_rate` as 2.
    input_shape = (4, 28, 28, 3)
    x = tf.random.normal(input_shape)
    y = tf.keras.layers.Conv2D(
    2, 3, activation='relu', dilation_rate=2, input_shape=input_shape[1:])(x)
    print(y.shape)
    (4, 24, 24, 2)
    
    
    # With `padding` as "same".
    input_shape = (4, 28, 28, 3)
    x = tf.random.normal(input_shape)
    y = tf.keras.layers.Conv2D(
    2, 3, activation='relu', padding="same", input_shape=input_shape[1:])(x)
    print(y.shape)
    (4, 28, 28, 2)
    
    
    # With extended batch shape [4, 7]:
    input_shape = (4, 7, 28, 28, 3)
    x = tf.random.normal(input_shape)
    y = tf.keras.layers.Conv2D(
    2, 3, activation='relu', input_shape=input_shape[2:])(x)
    print(y.shape)
    (4, 7, 26, 26, 2)
    
| Arguments  
---  
`filters` |  Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).   
`kernel_size` |  An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.   
`strides` |  An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1.   
`padding` |  one of `"valid"` or `"same"` (case-insensitive). `"valid"` means no padding. `"same"` results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.   
`data_format` |  A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs. `channels_last` corresponds to inputs with shape `(batch_size, height, width, channels)` while `channels_first` corresponds to inputs with shape `(batch_size, channels, height, width)`. It defaults to the `image_data_format` value found in your Keras config file at `~/.keras/keras.json`. If you never set it, then it will be `channels_last`.   
`dilation_rate` |  an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any `dilation_rate` value != 1 is incompatible with specifying any stride value != 1.   
`groups` |  A positive integer specifying the number of groups in which the input is split along the channel axis. Each group is convolved separately with `filters / groups` filters. The output is the concatenation of all the `groups` results along the channel axis. Input channels and `filters` must both be divisible by `groups`.   
`activation` |  Activation function to use. If you don't specify anything, no activation is applied (see `keras.activations`).   
`use_bias` |  Boolean, whether the layer uses a bias vector.   
`kernel_initializer` |  Initializer for the `kernel` weights matrix (see `keras.initializers`).   
`bias_initializer` |  Initializer for the bias vector (see `keras.initializers`).   
`kernel_regularizer` |  Regularizer function applied to the `kernel` weights matrix (see `keras.regularizers`).   
`bias_regularizer` |  Regularizer function applied to the bias vector (see `keras.regularizers`).   
`activity_regularizer` |  Regularizer function applied to the output of the layer (its "activation") (see `keras.regularizers`).   
`kernel_constraint` |  Constraint function applied to the kernel matrix (see `keras.constraints`).   
`bias_constraint` |  Constraint function applied to the bias vector (see `keras.constraints`).   
#### Input shape:

4+D tensor with shape: `batch_shape + (channels, rows, cols)` if
`data_format='channels_first'` or 4+D tensor with shape: `batch_shape + (rows,
cols, channels)` if `data_format='channels_last'`.

#### Output shape:

4+D tensor with shape: `batch_shape + (filters, new_rows, new_cols)` if
`data_format='channels_first'` or 4+D tensor with shape: `batch_shape +
(new_rows, new_cols, filters)` if `data_format='channels_last'`. `rows` and
`cols` values might have changed due to padding.

Returns  
---  
A tensor of rank 4+ representing `activation(conv2d(inputs, kernel) + bias)`.  
Raises  
---  
`ValueError` |  if `padding` is `"causal"`.   
`ValueError` |  when both `strides > 1` and `dilation_rate > 1`.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/layers/Conv2D

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

