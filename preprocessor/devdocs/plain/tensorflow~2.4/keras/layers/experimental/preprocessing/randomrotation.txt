# tf.keras.layers.experimental.preprocessing.RandomRotation

Randomly rotate each image.

Inherits From: `PreprocessingLayer`, `Layer`, `Module`

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.keras.layers.experimental.preprocessing.RandomRotation`

    
    tf.keras.layers.experimental.preprocessing.RandomRotation(
        factor, fill_mode='reflect', interpolation='bilinear',
        seed=None, name=None, fill_value=0.0, **kwargs
    )
    
By default, random rotations are only applied during training. At inference
time, the layer does nothing. If you need to apply random rotations at
inference time, set `training` to True when calling the layer.

#### Input shape:

4D tensor with shape: `(samples, height, width, channels)`,
data_format='channels_last'.

#### Output shape:

4D tensor with shape: `(samples, height, width, channels)`,
data_format='channels_last'.

#### Input shape:

4D tensor with shape: `(samples, height, width, channels)`,
data_format='channels_last'.

#### Output shape:

4D tensor with shape: `(samples, height, width, channels)`,
data_format='channels_last'.

Raise  
---  
`ValueError` |  if either bound is not between [0, 1], or upper bound is less than lower bound.   
Attributes  
---  
`factor` |  a float represented as fraction of 2pi, or a tuple of size 2 representing lower and upper bound for rotating clockwise and counter-clockwise. A positive values means rotating counter clock-wise, while a negative value means clock-wise. When represented as a single float, this value is used for both the upper and lower bound. For instance, `factor=(-0.2, 0.3)` results in an output rotation by a random amount in the range `[-20% * 2pi, 30% * 2pi]`. `factor=0.2` results in an output rotating by a random amount in the range `[-20% * 2pi, 20% * 2pi]`.   
`fill_mode` |  Points outside the boundaries of the input are filled according to the given mode (one of `{'constant', 'reflect', 'wrap', 'nearest'}`). 
  * reflect: `(d c b a | a b c d | d c b a)` The input is extended by reflecting about the edge of the last pixel.
  * constant: `(k k k k | a b c d | k k k k)` The input is extended by filling all values beyond the edge with the same constant value k = 0.
  * wrap: `(a b c d | a b c d | a b c d)` The input is extended by wrapping around to the opposite edge.
  * nearest: `(a a a a | a b c d | d d d d)` The input is extended by the nearest pixel. 

  
`interpolation` |  Interpolation mode. Supported values: "nearest", "bilinear".   
`seed` |  Integer. Used to create a random seed.   
`name` |  A string, the name of the layer.   
`fill_value` |  a float represents the value to be filled outside the boundaries when `fill_mode` is "constant".   
## Methods

### `adapt`

View source

    
    adapt(
        data, reset_state=True
    )
    
Fits the state of the preprocessing layer to the data being passed.

Arguments  
---  
`data` |  The data to train on. It can be passed either as a tf.data Dataset, or as a numpy array.   
`reset_state` |  Optional argument specifying whether to clear the state of the layer at the start of the call to `adapt`, or whether to start from the existing state. This argument may not be relevant to all preprocessing layers: a subclass of PreprocessingLayer may choose to throw if 'reset_state' is set to False.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/layers/experimental/preprocessing/RandomRotation

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

