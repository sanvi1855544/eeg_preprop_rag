# tf.keras.layers.experimental.preprocessing.Hashing

Implements categorical feature hashing, also known as "hashing trick".

Inherits From: `PreprocessingLayer`, `Layer`, `Module`

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.keras.layers.experimental.preprocessing.Hashing`

    
    tf.keras.layers.experimental.preprocessing.Hashing(
        num_bins, salt=None, name=None, **kwargs
    )
    
This layer transforms single or multiple categorical inputs to hashed output.
It converts a sequence of int or string to a sequence of int. The stable hash
function uses tensorflow::ops::Fingerprint to produce universal output that is
consistent across platforms.

This layer uses FarmHash64 by default, which provides a consistent hashed
output across different platforms and is stable across invocations, regardless
of device and context, by mixing the input bits thoroughly.

If you want to obfuscate the hashed output, you can also pass a random `salt`
argument in the constructor. In that case, the layer will use the SipHash64
hash function, with the `salt` value serving as additional input to the hash
function.

Example (FarmHash64):

    
    layer = tf.keras.layers.experimental.preprocessing.Hashing(num_bins=3)
    inp = [['A'], ['B'], ['C'], ['D'], ['E']]
    layer(inp)
    <tf.Tensor: shape=(5, 1), dtype=int64, numpy=
      array([[1],
             [0],
             [1],
             [1],
             [2]])>
    
Example (FarmHash64) with list of inputs:

    
    >>> layer = tf.keras.layers.experimental.preprocessing.Hashing(num_bins=3)
    >>> inp_1 = [['A'], ['B'], ['C'], ['D'], ['E']]
    >>> inp_2 = np.asarray([[5], [4], [3], [2], [1]])
    >>> layer([inp_1, inp_2])
    <tf.Tensor: shape=(5, 1), dtype=int64, numpy=
      array([[1],
             [1],
             [0],
             [2],
             [0]])>
    
Example (SipHash64):

    
    layer = tf.keras.layers.experimental.preprocessing.Hashing(num_bins=3,
       salt=[133, 137])
    inp = [['A'], ['B'], ['C'], ['D'], ['E']]
    layer(inp)
    <tf.Tensor: shape=(5, 1), dtype=int64, numpy=
      array([[1],
             [2],
             [1],
             [0],
             [2]])>
    
Example (Siphash64 with a single integer, same as `salt=[133, 133]`

    
    layer = tf.keras.layers.experimental.preprocessing.Hashing(num_bins=3,
       salt=133)
    inp = [['A'], ['B'], ['C'], ['D'], ['E']]
    layer(inp)
    <tf.Tensor: shape=(5, 1), dtype=int64, numpy=
      array([[0],
             [0],
             [2],
             [1],
             [0]])>
    
Reference: SipHash with salt

Arguments  
---  
`num_bins` |  Number of hash bins.   
`salt` |  A single unsigned integer or None. If passed, the hash function used will be SipHash64, with these values used as an additional input (known as a "salt" in cryptography). These should be non-zero. Defaults to `None` (in that case, the FarmHash64 hash function is used). It also supports tuple/list of 2 unsigned integer numbers, see reference paper for details.   
`name` |  Name to give to the layer.   
`**kwargs` |  Keyword arguments to construct a layer.   
Input shape: A single or list of string, int32 or int64 `Tensor`,
`SparseTensor` or `RaggedTensor` of shape `[batch_size, ...,]`

Output shape: An int64 `Tensor`, `SparseTensor` or `RaggedTensor` of shape
`[batch_size, ...]`. If any input is `RaggedTensor` then output is
`RaggedTensor`, otherwise if any input is `SparseTensor` then output is
`SparseTensor`, otherwise the output is `Tensor`.

## Methods

### `adapt`

View source

    
    adapt(
        data, reset_state=True
    )
    
Fits the state of the preprocessing layer to the data being passed.

Arguments  
---  
`data` |  The data to train on. It can be passed either as a tf.data Dataset, or as a numpy array.   
`reset_state` |  Optional argument specifying whether to clear the state of the layer at the start of the call to `adapt`, or whether to start from the existing state. This argument may not be relevant to all preprocessing layers: a subclass of PreprocessingLayer may choose to throw if 'reset_state' is set to False.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/layers/experimental/preprocessing/Hashing

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

