# tf.keras.constraints.MinMaxNorm

|  View source on GitHub  MinMaxNorm weight constraint. Inherits From:
`Constraint`

#### View aliases

Main aliases `tf.keras.constraints.min_max_norm` Compat aliases for migration
See Migration guide for more details.
`tf.compat.v1.keras.constraints.MinMaxNorm`,
`tf.compat.v1.keras.constraints.min_max_norm`

    
    tf.keras.constraints.MinMaxNorm(
        min_value=0.0, max_value=1.0, rate=1.0, axis=0
    )
    
Constrains the weights incident to each hidden unit to have the norm between a lower bound and an upper bound. Also available via the shortcut function `tf.keras.constraints.min_max_norm`. | Arguments  
---  
`min_value` |  the minimum norm for the incoming weights.   
`max_value` |  the maximum norm for the incoming weights.   
`rate` |  rate for enforcing the constraint: weights will be rescaled to yield `(1 - rate) * norm + rate * norm.clip(min_value, max_value)`. Effectively, this means that rate=1.0 stands for strict enforcement of the constraint, while rate<1.0 means that weights will be rescaled at each step to slowly move towards a value inside the desired interval.   
`axis` |  integer, axis along which to calculate weight norms. For instance, in a `Dense` layer the weight matrix has shape `(input_dim, output_dim)`, set `axis` to `0` to constrain each weight vector of length `(input_dim,)`. In a `Conv2D` layer with `data_format="channels_last"`, the weight tensor has shape `(rows, cols, input_depth, output_depth)`, set `axis` to `[0, 1, 2]` to constrain the weights of each filter tensor of size `(rows, cols, input_depth)`.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/constraints/MinMaxNorm

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

