# tf.keras.utils.SequenceEnqueuer

View source on GitHub  Base class to enqueue inputs.

#### View aliases

Compat aliases for migration See Migration guide for more details.
`tf.compat.v1.keras.utils.SequenceEnqueuer`

    
    tf.keras.utils.SequenceEnqueuer(
        sequence, use_multiprocessing=False
    )
    
The task of an Enqueuer is to use parallelism to speed up preprocessing. This
is done with processes or threads.

#### Example:

    
    enqueuer = SequenceEnqueuer(...)
    enqueuer.start()
    datas = enqueuer.get()
    for data in datas:
        # Use the inputs; training, evaluating, predicting.
        # ... stop sometime.
    enqueuer.stop()
    
The `enqueuer.get()` should be an infinite stream of datas.

## Methods

### `get`

View source

    
    get()
    
Creates a generator to extract data from the queue. Skip the data if it is
`None`. Returns: Generator yielding tuples `(inputs, targets)` or `(inputs,
targets, sample_weights)`.

### `is_running`

View source

    
    is_running()
    
### `start`

View source

    
    start(
        workers=1, max_queue_size=10
    )
    
Starts the handler's workers. | Arguments  
---  
`workers` |  Number of workers.   
`max_queue_size` |  queue size (when full, workers could block on `put()`)   
### `stop`

View source

    
    stop(
        timeout=None
    )
    
Stops running threads and wait for them to exit, if necessary.

Should be called by the same thread which called `start()`.

Arguments  
---  
`timeout` |  maximum time to wait on `thread.join()`  
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/utils/SequenceEnqueuer

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

