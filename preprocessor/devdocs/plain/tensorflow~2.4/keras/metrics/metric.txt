# tf.keras.metrics.Metric

View source on GitHub  Encapsulates metric logic and state. Inherits From:
`Layer`, `Module`

#### View aliases

Main aliases `tf.metrics.Metric` Compat aliases for migration See Migration
guide for more details. `tf.compat.v1.keras.metrics.Metric`

    
    tf.keras.metrics.Metric(
        name=None, dtype=None, **kwargs
    )
    
| Args  
---  
`name` |  (Optional) string name of the metric instance.   
`dtype` |  (Optional) data type of the metric result.   
`**kwargs` |  Additional layer keywords arguments.   
#### Standalone usage:

    
    m = SomeMetric(...)
    for input in ...:
      m.update_state(input)
    print('Final result: ', m.result().numpy())
    
Usage with `compile()` API:

    
    model = tf.keras.Sequential()
    model.add(tf.keras.layers.Dense(64, activation='relu'))
    model.add(tf.keras.layers.Dense(64, activation='relu'))
    model.add(tf.keras.layers.Dense(10, activation='softmax'))
    
    model.compile(optimizer=tf.keras.optimizers.RMSprop(0.01),
                  loss=tf.keras.losses.CategoricalCrossentropy(),
                  metrics=[tf.keras.metrics.CategoricalAccuracy()])
    
    data = np.random.random((1000, 32))
    labels = np.random.random((1000, 10))
    
    dataset = tf.data.Dataset.from_tensor_slices((data, labels))
    dataset = dataset.batch(32)
    
    model.fit(dataset, epochs=10)
    
To be implemented by subclasses:

  * `__init__()`: All state variables should be created in this method by calling `self.add_weight()` like: `self.var = self.add_weight(...)`
  * `update_state()`: Has all updates to the state variables like: self.var.assign_add(...).
  * `result()`: Computes and returns a value for the metric from the state variables.

Example subclass implementation:

    
    class BinaryTruePositives(tf.keras.metrics.Metric):
    
      def __init__(self, name='binary_true_positives', **kwargs):
        super(BinaryTruePositives, self).__init__(name=name, **kwargs)
        self.true_positives = self.add_weight(name='tp', initializer='zeros')
    
      def update_state(self, y_true, y_pred, sample_weight=None):
        y_true = tf.cast(y_true, tf.bool)
        y_pred = tf.cast(y_pred, tf.bool)
    
        values = tf.logical_and(tf.equal(y_true, True), tf.equal(y_pred, True))
        values = tf.cast(values, self.dtype)
        if sample_weight is not None:
          sample_weight = tf.cast(sample_weight, self.dtype)
          sample_weight = tf.broadcast_to(sample_weight, values.shape)
          values = tf.multiply(values, sample_weight)
        self.true_positives.assign_add(tf.reduce_sum(values))
    
      def result(self):
        return self.true_positives
    
## Methods

### `add_weight`

View source

    
    add_weight(
        name, shape=(), aggregation=tf.compat.v1.VariableAggregation.SUM,
        synchronization=tf.VariableSynchronization.ON_READ, initializer=None, dtype=None
    )
    
Adds state variable. Only for use by subclasses.

### `reset_states`

View source

    
    reset_states()
    
Resets all of the metric state variables.

This function is called between epochs/steps, when a metric is evaluated
during training.

### `result`

View source

    
    @abc.abstractmethod
    result()
    
Computes and returns the metric value tensor.

Result computation is an idempotent operation that simply calculates the
metric value using the state variables.

### `update_state`

View source

    
    @abc.abstractmethod
    update_state(
        *args, **kwargs
    )
    
Accumulates statistics for the metric.

> Note: This function is executed as a graph function in graph mode. This
> means: a) Operations on the same resource are executed in textual order.
> This should make it easier to do things like add the updated value of a
> variable to another, for example. b) You don't need to worry about
> collecting the update ops to execute. All update ops added to the graph by
> this function will be executed. As a result, code should generally work the
> same way with graph or eager execution.
Args  
---  
`*args` |   
`**kwargs` |  A mini-batch of inputs to the Metric.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/metrics/Metric

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

