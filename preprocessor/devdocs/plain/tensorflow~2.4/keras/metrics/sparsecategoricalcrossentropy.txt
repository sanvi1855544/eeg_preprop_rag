# tf.keras.metrics.SparseCategoricalCrossentropy

View source on GitHub  Computes the crossentropy metric between the labels and
predictions. Inherits From: `Mean`, `Metric`, `Layer`, `Module`

#### View aliases

Main aliases `tf.metrics.SparseCategoricalCrossentropy` Compat aliases for
migration See Migration guide for more details.
`tf.compat.v1.keras.metrics.SparseCategoricalCrossentropy`

    
    tf.keras.metrics.SparseCategoricalCrossentropy(
        name='sparse_categorical_crossentropy', dtype=None, from_logits=False,
        axis=-1
    )
    
Use this crossentropy metric when there are two or more label classes. We expect labels to be provided as integers. If you want to provide labels using `one-hot` representation, please use `CategoricalCrossentropy` metric. There should be `# classes` floating point values per feature for `y_pred` and a single floating point value per feature for `y_true`. In the snippet below, there is a single floating point value per example for `y_true` and `# classes` floating pointing values per example for `y_pred`. The shape of `y_true` is `[batch_size]` and the shape of `y_pred` is `[batch_size, num_classes]`. | Args  
---  
`name` |  (Optional) string name of the metric instance.   
`dtype` |  (Optional) data type of the metric result.   
`from_logits` |  (Optional) Whether output is expected to be a logits tensor. By default, we consider that output encodes a probability distribution.   
`axis` |  (Optional) Defaults to -1. The dimension along which the metric is computed.   
#### Standalone usage:

    
    # y_true = one_hot(y_true) = [[0, 1, 0], [0, 0, 1]]
    # logits = log(y_pred)
    # softmax = exp(logits) / sum(exp(logits), axis=-1)
    # softmax = [[0.05, 0.95, EPSILON], [0.1, 0.8, 0.1]]
    # xent = -sum(y * log(softmax), 1)
    # log(softmax) = [[-2.9957, -0.0513, -16.1181],
    #                [-2.3026, -0.2231, -2.3026]]
    # y_true * log(softmax) = [[0, -0.0513, 0], [0, 0, -2.3026]]
    # xent = [0.0513, 2.3026]
    # Reduced xent = (0.0513 + 2.3026) / 2
    m = tf.keras.metrics.SparseCategoricalCrossentropy()
    m.update_state([1, 2],
                   [[0.05, 0.95, 0], [0.1, 0.8, 0.1]])
    m.result().numpy()
    1.1769392
    
    
    m.reset_states()
    m.update_state([1, 2],
                   [[0.05, 0.95, 0], [0.1, 0.8, 0.1]],
                   sample_weight=tf.constant([0.3, 0.7]))
    m.result().numpy()
    1.6271976
    
Usage with `compile()` API:

    
    model.compile(
      optimizer='sgd',
      loss='mse',
      metrics=[tf.keras.metrics.SparseCategoricalCrossentropy()])
    
## Methods

### `reset_states`

View source

    
    reset_states()
    
Resets all of the metric state variables.

This function is called between epochs/steps, when a metric is evaluated
during training.

### `result`

View source

    
    result()
    
Computes and returns the metric value tensor.

Result computation is an idempotent operation that simply calculates the
metric value using the state variables.

### `update_state`

View source

    
    update_state(
        y_true, y_pred, sample_weight=None
    )
    
Accumulates metric statistics.

`y_true` and `y_pred` should have the same shape.

Args  
---  
`y_true` |  Ground truth values. shape = `[batch_size, d0, .. dN]`.   
`y_pred` |  The predicted values. shape = `[batch_size, d0, .. dN]`.   
`sample_weight` |  Optional `sample_weight` acts as a coefficient for the metric. If a scalar is provided, then the metric is simply scaled by the given value. If `sample_weight` is a tensor of size `[batch_size]`, then the metric for each sample of the batch is rescaled by the corresponding element in the `sample_weight` vector. If the shape of `sample_weight` is `[batch_size, d0, .. dN-1]` (or can be broadcasted to this shape), then each metric element of `y_pred` is scaled by the corresponding value of `sample_weight`. (Note on `dN-1`: all metric functions reduce by 1 dimension, usually the last axis (-1)).   
Returns  
---  
Update op.  
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/metrics/SparseCategoricalCrossentropy

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

