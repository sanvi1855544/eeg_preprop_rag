# tf.keras.optimizers.schedules.InverseTimeDecay

View source on GitHub  A LearningRateSchedule that uses an inverse time decay
schedule. Inherits From: `LearningRateSchedule`

#### View aliases

Main aliases `tf.optimizers.schedules.InverseTimeDecay` Compat aliases for
migration See Migration guide for more details.
`tf.compat.v1.keras.optimizers.schedules.InverseTimeDecay`

    
    tf.keras.optimizers.schedules.InverseTimeDecay(
        initial_learning_rate, decay_steps, decay_rate, staircase=False, name=None
    )
    
When training a model, it is often recommended to lower the learning rate as
the training progresses. This schedule applies the inverse decay function to
an optimizer step, given a provided initial learning rate. It requires a
`step` value to compute the decayed learning rate. You can just pass a
TensorFlow variable that you increment at each training step. The schedule a
1-arg callable that produces a decayed learning rate when passed the current
optimizer step. This can be useful for changing the learning rate value across
different invocations of optimizer functions. It is computed as:

    
    def decayed_learning_rate(step):
      return initial_learning_rate / (1 + decay_rate * step / decay_step)
    
or, if `staircase` is `True`, as:

    
    def decayed_learning_rate(step):
      return initial_learning_rate / (1 + decay_rate * floor(step / decay_step))
    
You can pass this schedule directly into a `tf.keras.optimizers.Optimizer` as
the learning rate. Example: Fit a Keras model when decaying 1/t with a rate of
0.5:

    
    ...
    initial_learning_rate = 0.1
    decay_steps = 1.0
    decay_rate = 0.5
    learning_rate_fn = keras.optimizers.schedules.InverseTimeDecay(
      initial_learning_rate, decay_steps, decay_rate)
    
    model.compile(optimizer=tf.keras.optimizers.SGD(
                      learning_rate=learning_rate_fn),
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    
    model.fit(data, labels, epochs=5)
    
| Returns  
---  
A 1-arg callable learning rate schedule that takes the current optimizer step
and outputs the decayed learning rate, a scalar `Tensor` of the same type as
`initial_learning_rate`.  
Args  
---  
`initial_learning_rate` |  A scalar `float32` or `float64` `Tensor` or a Python number. The initial learning rate.   
`decay_steps` |  How often to apply decay.   
`decay_rate` |  A Python number. The decay rate.   
`staircase` |  Whether to apply decay in a discrete staircase, as opposed to continuous, fashion.   
`name` |  String. Optional name of the operation. Defaults to 'InverseTimeDecay'.   
## Methods

### `from_config`

View source

    
    @classmethod
    from_config(
        config
    )
    
Instantiates a `LearningRateSchedule` from its config.

Args  
---  
`config` |  Output of `get_config()`.   
Returns  
---  
A `LearningRateSchedule` instance.  
### `get_config`

View source

    
    get_config()
    
### `__call__`

View source

    
    __call__(
        step
    )
    
Call self as a function.

Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/optimizers/schedules/InverseTimeDecay

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

