# tf.keras.optimizers.Adadelta

View source on GitHub  Optimizer that implements the Adadelta algorithm.
Inherits From: `Optimizer`

#### View aliases

Main aliases `tf.optimizers.Adadelta` Compat aliases for migration See
Migration guide for more details. `tf.compat.v1.keras.optimizers.Adadelta`

    
    tf.keras.optimizers.Adadelta(
        learning_rate=0.001, rho=0.95, epsilon=1e-07, name='Adadelta',
        **kwargs
    )
    
Adadelta optimization is a stochastic gradient descent method that is based on
adaptive learning rate per dimension to address two drawbacks:

  * The continual decay of learning rates throughout training
  * The need for a manually selected global learning rate

Adadelta is a more robust extension of Adagrad that adapts learning rates based on a moving window of gradient updates, instead of accumulating all past gradients. This way, Adadelta continues learning even when many updates have been done. Compared to Adagrad, in the original version of Adadelta you don't have to set an initial learning rate. In this version, initial learning rate can be set, as in most other Keras optimizers. According to section 4.3 ("Effective Learning rates"), near the end of training step sizes converge to 1 which is effectively a high learning rate which would cause divergence. This occurs only near the end of the training as gradients and step sizes are small, and the epsilon constant in the numerator and denominator dominate past gradients and parameter updates which converge the learning rate to 1. According to section 4.4("Speech Data"),where a large neural network with 4 hidden layers was trained on a corpus of US English data, ADADELTA was used with 100 network replicas.The epsilon used is 1e-6 with rho=0.95 which converged faster than ADAGRAD, by the following construction: def init(self, lr=1.0, rho=0.95, epsilon=1e-6, decay=0., **kwargs): | Args  
---  
`learning_rate` |  A `Tensor`, floating point value, or a schedule that is a `tf.keras.optimizers.schedules.LearningRateSchedule`. The learning rate. To match the exact form in the original paper use 1.0.   
`rho` |  A `Tensor` or a floating point value. The decay rate.   
`epsilon` |  A `Tensor` or a floating point value. A constant epsilon used to better conditioning the grad update.   
`name` |  Optional name prefix for the operations created when applying gradients. Defaults to `"Adadelta"`.   
`**kwargs` |  Keyword arguments. Allowed to be one of `"clipnorm"` or `"clipvalue"`. `"clipnorm"` (float) clips gradients by norm; `"clipvalue"` (float) clips gradients by value.   
#### Reference:

  * Zeiler, 2012

Raises  
---  
`ValueError` |  in case of any invalid argument.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/optimizers/Adadelta

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

