# tf.keras.optimizers.Optimizer

View source on GitHub  Base class for Keras optimizers.

#### View aliases

Main aliases `tf.optimizers.Optimizer` Compat aliases for migration See
Migration guide for more details. `tf.compat.v1.keras.optimizers.Optimizer`

    
    tf.keras.optimizers.Optimizer(
        name, gradient_aggregator=None, gradient_transformers=None, **kwargs
    )
    
You should not use this class directly, but instead instantiate one of its
subclasses such as `tf.keras.optimizers.SGD`, `tf.keras.optimizers.Adam`, etc.

### Usage

    
    # Create an optimizer with the desired parameters.
    opt = tf.keras.optimizers.SGD(learning_rate=0.1)
    # `loss` is a callable that takes no argument and returns the value
    # to minimize.
    loss = lambda: 3 * var1 * var1 + 2 * var2 * var2
    # In graph mode, returns op that minimizes the loss by updating the listed
    # variables.
    opt_op = opt.minimize(loss, var_list=[var1, var2])
    opt_op.run()
    # In eager mode, simply call minimize to update the list of variables.
    opt.minimize(loss, var_list=[var1, var2])
    
### Usage in custom training loops

In Keras models, sometimes variables are created when the model is first
called, instead of construction time. Examples include 1) sequential models
without input shape pre-defined, or 2) subclassed models. Pass var_list as
callable in these cases.

#### Example:

    
    opt = tf.keras.optimizers.SGD(learning_rate=0.1)
    model = tf.keras.Sequential()
    model.add(tf.keras.layers.Dense(num_hidden, activation='relu'))
    model.add(tf.keras.layers.Dense(num_classes, activation='sigmoid'))
    loss_fn = lambda: tf.keras.losses.mse(model(input), output)
    var_list_fn = lambda: model.trainable_weights
    for input, output in data:
      opt.minimize(loss_fn, var_list_fn)
    
### Processing gradients before applying them

Calling `minimize()` takes care of both computing the gradients and applying
them to the variables. If you want to process the gradients before applying
them you can instead use the optimizer in three steps:

  1. Compute the gradients with `tf.GradientTape`.
  2. Process the gradients as you wish.
  3. Apply the processed gradients with `apply_gradients()`.

#### Example:

    
    # Create an optimizer.
    opt = tf.keras.optimizers.SGD(learning_rate=0.1)
    
    # Compute the gradients for a list of variables.
    with tf.GradientTape() as tape:
      loss = <call_loss_function>
    vars = <list_of_variables>
    grads = tape.gradient(loss, vars)
    
    # Process the gradients, for example cap them, etc.
    # capped_grads = [MyCapper(g) for g in grads]
    processed_grads = [process_gradient(g) for g in grads]
    
    # Ask the optimizer to apply the processed gradients.
    opt.apply_gradients(zip(processed_grads, var_list))
    
### Use with `tf.distribute.Strategy`

This optimizer class is `tf.distribute.Strategy` aware, which means it
automatically sums gradients across all replicas. To average gradients, you
divide your loss by the global batch size, which is done automatically if you
use `tf.keras` built-in training or evaluation loops. See the `reduction`
argument of your loss which should be set to
`tf.keras.losses.Reduction.SUM_OVER_BATCH_SIZE` for averaging or
`tf.keras.losses.Reduction.SUM` for not. To aggregate gradients yourself, call
`apply_gradients` with `experimental_aggregate_gradients` set to False. This
is useful if you need to process aggregated gradients. If you are not using
these and you want to average gradients, you should use `tf.math.reduce_sum`
to add up your per-example losses and then divide by the global batch size.
Note that when using `tf.distribute.Strategy`, the first component of a
tensor's shape is the replica-local batch size, which is off by a factor equal
to the number of replicas being used to compute a single step. As a result,
using `tf.math.reduce_mean` will give the wrong answer, resulting in gradients
that can be many times too big.

### Variable Constraints

All Keras optimizers respect variable constraints. If constraint function is
passed to any variable, the constraint will be applied to the variable after
the gradient has been applied to the variable. Important: If gradient is
sparse tensor, variable constraint is not supported.

### Thread Compatibility

The entire optimizer is currently thread compatible, not thread-safe. The user
needs to perform synchronization if necessary.

### Slots

Many optimizer subclasses, such as `Adam` and `Adagrad` allocate and manage
additional variables associated with the variables to train. These are called
Slots. Slots have names and you can ask the optimizer for the names of the
slots that it uses. Once you have a slot name you can ask the optimizer for
the variable it created to hold the slot value. This can be useful if you want
to log debug a training algorithm, report stats about the slots, etc.

### Hyperparameters

These are arguments passed to the optimizer subclass constructor (the
`__init__` method), and then passed to `self._set_hyper()`. They can be either
regular Python values (like 1.0), tensors, or callables. If they are callable,
the callable will be called during `apply_gradients()` to get the value for
the hyper parameter. Hyperparameters can be overwritten through user code:

#### Example:

    
    # Create an optimizer with the desired parameters.
    opt = tf.keras.optimizers.SGD(learning_rate=0.1)
    # `loss` is a callable that takes no argument and returns the value
    # to minimize.
    loss = lambda: 3 * var1 + 2 * var2
    # In eager mode, simply call minimize to update the list of variables.
    opt.minimize(loss, var_list=[var1, var2])
    # update learning rate
    opt.learning_rate = 0.05
    opt.minimize(loss, var_list=[var1, var2])
    
### Callable learning rate

Optimizer accepts a callable learning rate in two ways. The first way is
through built-in or customized
`tf.keras.optimizers.schedules.LearningRateSchedule`. The schedule will be
called on each iteration with `schedule(iteration)`, a `tf.Variable` owned by
the optimizer.

#### Example:

    
    var = tf.Variable(np.random.random(size=(1,)))
    learning_rate = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=.01, decay_steps=20, decay_rate=.1)
    opt = tf.keras.optimizers.SGD(learning_rate=learning_rate)
    loss = lambda: 3 * var
    opt.minimize(loss, var_list=[var])
    <tf.Variable...
    
The second way is through a callable function that does not accept any
arguments.

#### Example:

    
    var = tf.Variable(np.random.random(size=(1,)))
    def lr_callable():
      return .1
    opt = tf.keras.optimizers.SGD(learning_rate=lr_callable)
    loss = lambda: 3 * var
    opt.minimize(loss, var_list=[var])
    <tf.Variable...
    
### Creating a custom optimizer

If you intend to create your own optimization algorithm, simply inherit from
this class and override the following methods:

  * `_resource_apply_dense` (update variable given gradient tensor is dense)
  * `_resource_apply_sparse` (update variable given gradient tensor is sparse)
  * `_create_slots` (if your optimizer algorithm requires additional variables)
  * `get_config` (serialization of the optimizer, include all hyper parameters)

| Args  
---  
`name` |  String. The name to use for momentum accumulator weights created by the optimizer.   
`gradient_aggregator` |  The function to use to aggregate gradients across devices (when using `tf.distribute.Strategy`). If `None`, defaults to summing the gradients across devices. The function should accept and return a list of `(gradient, variable)` tuples.   
`gradient_transformers` |  Optional. List of functions to use to transform gradients before applying updates to Variables. The functions are applied after `gradient_aggregator`. The functions should accept and return a list of `(gradient, variable)` tuples.   
`**kwargs` |  keyword arguments. Allowed arguments are `clipvalue`, `clipnorm`, `global_clipnorm`. If `clipvalue` (float) is set, the gradient of each weight is clipped to be no higher than this value. If `clipnorm` (float) is set, the gradient of each weight is individually clipped so that its norm is no higher than this value. If `global_clipnorm` (float) is set the gradient of all weights is clipped so that their global norm is no higher than this value.   
Raises  
---  
`ValueError` |  in case of any invalid argument.   
Attributes  
---  
`clipnorm` |  `float` or `None`. If set, clips gradients to a maximum norm.   
`clipvalue` |  `float` or `None`. If set, clips gradients to a maximum value.   
`global_clipnorm` |  `float` or `None`. If set, clips gradients to a maximum norm.   
`iterations` |  Variable. The number of training steps this Optimizer has run.   
`weights` |  Returns variables of this Optimizer based on the order created.   
## Methods

### `add_slot`

View source

    
    add_slot(
        var, slot_name, initializer='zeros'
    )
    
Add a new slot variable for `var`.

### `add_weight`

View source

    
    add_weight(
        name, shape, dtype=None, initializer='zeros', trainable=None,
        synchronization=tf.VariableSynchronization.AUTO,
        aggregation=tf.compat.v1.VariableAggregation.NONE
    )
    
### `apply_gradients`

View source

    
    apply_gradients(
        grads_and_vars, name=None, experimental_aggregate_gradients=True
    )
    
Apply gradients to variables.

This is the second part of `minimize()`. It returns an `Operation` that
applies gradients.

The method sums gradients from all replicas in the presence of
`tf.distribute.Strategy` by default. You can aggregate gradients yourself by
passing `experimental_aggregate_gradients=False`.

#### Example:

    
    grads = tape.gradient(loss, vars)
    grads = tf.distribute.get_replica_context().all_reduce('sum', grads)
    # Processing aggregated gradients.
    optimizer.apply_gradients(zip(grads, vars),
        experimental_aggregate_gradients=False)
    
    
Args  
---  
`grads_and_vars` |  List of (gradient, variable) pairs.   
`name` |  Optional name for the returned operation. Default to the name passed to the `Optimizer` constructor.   
`experimental_aggregate_gradients` |  Whether to sum gradients from different replicas in the presense of `tf.distribute.Strategy`. If False, it's user responsibility to aggregate the gradients. Default to True.   
Returns  
---  
An `Operation` that applies the specified gradients. The `iterations` will be
automatically increased by 1.  
Raises  
---  
`TypeError` |  If `grads_and_vars` is malformed.   
`ValueError` |  If none of the variables have gradients.   
`RuntimeError` |  If called in a cross-replica context.   
### `from_config`

View source

    
    @classmethod
    from_config(
        config, custom_objects=None
    )
    
Creates an optimizer from its config.

This method is the reverse of `get_config`, capable of instantiating the same
optimizer from the config dictionary.

Arguments  
---  
`config` |  A Python dictionary, typically the output of get_config.   
`custom_objects` |  A Python dictionary mapping names to additional Python objects used to create this optimizer, such as a function used for a hyperparameter.   
Returns  
---  
An optimizer instance.  
### `get_config`

View source

    
    @abc.abstractmethod
    get_config()
    
Returns the config of the optimizer.

An optimizer config is a Python dictionary (serializable) containing the
configuration of an optimizer. The same optimizer can be reinstantiated later
(without any saved state) from this configuration.

Returns  
---  
Python dictionary.  
### `get_gradients`

View source

    
    get_gradients(
        loss, params
    )
    
Returns gradients of `loss` with respect to `params`.

Should be used only in legacy v1 graph mode.

Arguments  
---  
`loss` |  Loss tensor.   
`params` |  List of variables.   
Returns  
---  
List of gradient tensors.  
Raises  
---  
`ValueError` |  In case any gradient cannot be computed (e.g. if gradient function not implemented).   
### `get_slot`

View source

    
    get_slot(
        var, slot_name
    )
    
### `get_slot_names`

View source

    
    get_slot_names()
    
A list of names for this optimizer's slots.

### `get_updates`

View source

    
    get_updates(
        loss, params
    )
    
### `get_weights`

View source

    
    get_weights()
    
Returns the current weights of the optimizer.

The weights of an optimizer are its state (ie, variables). This function
returns the weight values associated with this optimizer as a list of Numpy
arrays. The first value is always the iterations count of the optimizer,
followed by the optimizer's state variables in the order they were created.
The returned list can in turn be used to load state into similarly
parameterized optimizers.

For example, the RMSprop optimizer for this simple model returns a list of
three values-- the iteration count, followed by the root-mean-square value of
the kernel and bias of the single Dense layer:

    
    opt = tf.keras.optimizers.RMSprop()
    m = tf.keras.models.Sequential([tf.keras.layers.Dense(10)])
    m.compile(opt, loss='mse')
    data = np.arange(100).reshape(5, 20)
    labels = np.zeros(5)
    print('Training'); results = m.fit(data, labels)
    Training ...
    len(opt.get_weights())
    3
    
Returns  
---  
Weights values as a list of numpy arrays.  
### `minimize`

View source

    
    minimize(
        loss, var_list, grad_loss=None, name=None, tape=None
    )
    
Minimize `loss` by updating `var_list`.

This method simply computes gradient using `tf.GradientTape` and calls
`apply_gradients()`. If you want to process the gradient before applying then
call `tf.GradientTape` and `apply_gradients()` explicitly instead of using
this function.

Args  
---  
`loss` |  `Tensor` or callable. If a callable, `loss` should take no arguments and return the value to minimize. If a `Tensor`, the `tape` argument must be passed.   
`var_list` |  list or tuple of `Variable` objects to update to minimize `loss`, or a callable returning the list or tuple of `Variable` objects. Use callable when the variable list would otherwise be incomplete before `minimize` since the variables are created at the first time `loss` is called.   
`grad_loss` |  (Optional). A `Tensor` holding the gradient computed for `loss`.   
`name` |  (Optional) str. Name for the returned operation.   
`tape` |  (Optional) `tf.GradientTape`. If `loss` is provided as a `Tensor`, the tape that computed the `loss` must be provided.   
Returns  
---  
An `Operation` that updates the variables in `var_list`. The `iterations` will
be automatically increased by 1.  
Raises  
---  
`ValueError` |  If some of the variables are not `Variable` objects.   
### `set_weights`

View source

    
    set_weights(
        weights
    )
    
Set the weights of the optimizer.

The weights of an optimizer are its state (ie, variables). This function takes
the weight values associated with this optimizer as a list of Numpy arrays.
The first value is always the iterations count of the optimizer, followed by
the optimizer's state variables in the order they are created. The passed
values are used to set the new state of the optimizer.

For example, the RMSprop optimizer for this simple model takes a list of three
values-- the iteration count, followed by the root-mean-square value of the
kernel and bias of the single Dense layer:

    
    opt = tf.keras.optimizers.RMSprop()
    m = tf.keras.models.Sequential([tf.keras.layers.Dense(10)])
    m.compile(opt, loss='mse')
    data = np.arange(100).reshape(5, 20)
    labels = np.zeros(5)
    print('Training'); results = m.fit(data, labels)
    Training ...
    new_weights = [np.array(10), np.ones([20, 10]), np.zeros([10])]
    opt.set_weights(new_weights)
    opt.iterations
    <tf.Variable 'RMSprop/iter:0' shape=() dtype=int64, numpy=10>
    
Arguments  
---  
`weights` |  weight values as a list of numpy arrays.   
### `variables`

View source

    
    variables()
    
Returns variables of this Optimizer based on the order created.

© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/optimizers/Optimizer

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

