# tf.keras.losses.Loss

View source on GitHub  Loss base class.

#### View aliases

Main aliases `tf.losses.Loss` Compat aliases for migration See Migration guide
for more details. `tf.compat.v1.keras.losses.Loss`

    
    tf.keras.losses.Loss(
        reduction=losses_utils.ReductionV2.AUTO, name=None
    )
    
To be implemented by subclasses:

  * `call()`: Contains the logic for loss calculation using `y_true`, `y_pred`.

Example subclass implementation:

    
    class MeanSquaredError(Loss):
    
      def call(self, y_true, y_pred):
        y_pred = tf.convert_to_tensor_v2(y_pred)
        y_true = tf.cast(y_true, y_pred.dtype)
        return tf.reduce_mean(math_ops.square(y_pred - y_true), axis=-1)
    
When used with `tf.distribute.Strategy`, outside of built-in training loops
such as `tf.keras` `compile` and `fit`, please use 'SUM' or 'NONE' reduction
types, and reduce losses explicitly in your training loop. Using 'AUTO' or
'SUM_OVER_BATCH_SIZE' will raise an error. Please see this custom training
tutorial for more details on this. You can implement 'SUM_OVER_BATCH_SIZE'
using global batch size like:

    
    with strategy.scope():
      loss_obj = tf.keras.losses.CategoricalCrossentropy(
          reduction=tf.keras.losses.Reduction.NONE)
      ....
      loss = (tf.reduce_sum(loss_obj(labels, predictions)) *
              (1. / global_batch_size))
    
| Args  
---  
`reduction` |  (Optional) Type of `tf.keras.losses.Reduction` to apply to loss. Default value is `AUTO`. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used with `tf.distribute.Strategy`, outside of built-in training loops such as `tf.keras` `compile` and `fit`, using `AUTO` or `SUM_OVER_BATCH_SIZE` will raise an error. Please see this custom training tutorial for more details.   
`name` |  Optional name for the op.   
## Methods

### `call`

View source

    
    @abc.abstractmethod
    call(
        y_true, y_pred
    )
    
Invokes the `Loss` instance.

Args  
---  
`y_true` |  Ground truth values. shape = `[batch_size, d0, .. dN]`, except sparse loss functions such as sparse categorical crossentropy where shape = `[batch_size, d0, .. dN-1]`  
`y_pred` |  The predicted values. shape = `[batch_size, d0, .. dN]`  
Returns  
---  
Loss values with the shape `[batch_size, d0, .. dN-1]`.  
### `from_config`

View source

    
    @classmethod
    from_config(
        config
    )
    
Instantiates a `Loss` from its config (output of `get_config()`).

Args  
---  
`config` |  Output of `get_config()`.   
Returns  
---  
A `Loss` instance.  
### `get_config`

View source

    
    get_config()
    
Returns the config dictionary for a `Loss` instance.

### `__call__`

View source

    
    __call__(
        y_true, y_pred, sample_weight=None
    )
    
Invokes the `Loss` instance.

Args  
---  
`y_true` |  Ground truth values. shape = `[batch_size, d0, .. dN]`, except sparse loss functions such as sparse categorical crossentropy where shape = `[batch_size, d0, .. dN-1]`  
`y_pred` |  The predicted values. shape = `[batch_size, d0, .. dN]`  
`sample_weight` |  Optional `sample_weight` acts as a coefficient for the loss. If a scalar is provided, then the loss is simply scaled by the given value. If `sample_weight` is a tensor of size `[batch_size]`, then the total loss for each sample of the batch is rescaled by the corresponding element in the `sample_weight` vector. If the shape of `sample_weight` is `[batch_size, d0, .. dN-1]` (or can be broadcasted to this shape), then each loss element of `y_pred` is scaled by the corresponding value of `sample_weight`. (Note on`dN-1`: all loss functions reduce by 1 dimension, usually axis=-1.)   
Returns  
---  
Weighted loss float `Tensor`. If `reduction` is `NONE`, this has shape
`[batch_size, d0, .. dN-1]`; otherwise, it is scalar. (Note `dN-1` because all
loss functions reduce by 1 dimension, usually axis=-1.)  
Raises  
---  
`ValueError` |  If the shape of `sample_weight` is invalid.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/losses/Loss

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

