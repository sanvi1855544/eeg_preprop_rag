# tf.keras.Input

View source on GitHub  `Input()` is used to instantiate a Keras tensor.

#### View aliases

Main aliases `tf.keras.layers.Input` Compat aliases for migration See
Migration guide for more details. `tf.compat.v1.keras.Input`,
`tf.compat.v1.keras.layers.Input`

    
    tf.keras.Input(
        shape=None, batch_size=None, name=None, dtype=None, sparse=False, tensor=None,
        ragged=False, **kwargs
    )
    
A Keras tensor is a TensorFlow symbolic tensor object, which we augment with certain attributes that allow us to build a Keras model just by knowing the inputs and outputs of the model. For instance, if `a`, `b` and `c` are Keras tensors, it becomes possible to do: `model = Model(input=[a, b], output=c)` | Arguments  
---  
`shape` |  A shape tuple (integers), not including the batch size. For instance, `shape=(32,)` indicates that the expected input will be batches of 32-dimensional vectors. Elements of this tuple can be None; 'None' elements represent dimensions where the shape is not known.   
`batch_size` |  optional static batch size (integer).   
`name` |  An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided.   
`dtype` |  The data type expected by the input, as a string (`float32`, `float64`, `int32`...)   
`sparse` |  A boolean specifying whether the placeholder to be created is sparse. Only one of 'ragged' and 'sparse' can be True. Note that, if `sparse` is False, sparse tensors can still be passed into the input - they will be densified with a default value of 0.   
`tensor` |  Optional existing tensor to wrap into the `Input` layer. If set, the layer will use the `tf.TypeSpec` of this tensor rather than creating a new placeholder tensor.   
`ragged` |  A boolean specifying whether the placeholder to be created is ragged. Only one of 'ragged' and 'sparse' can be True. In this case, values of 'None' in the 'shape' argument represent ragged dimensions. For more information about RaggedTensors, see this guide.   
`**kwargs` |  deprecated arguments support. Supports `batch_shape` and `batch_input_shape`.   
Returns  
---  
A `tensor`.  
#### Example:

    
    # this is a logistic regression in Keras
    x = Input(shape=(32,))
    y = Dense(16, activation='softmax')(x)
    model = Model(x, y)
    
Note that even if eager execution is enabled, `Input` produces a symbolic
tensor (i.e. a placeholder). This symbolic tensor can be used with other
TensorFlow ops, as such:

    
    x = Input(shape=(32,))
    y = tf.square(x)
    
Raises  
---  
`ValueError` |  If both `sparse` and `ragged` are provided.   
`ValueError` |  If both `shape` and (`batch_input_shape` or `batch_shape`) are provided.   
`ValueError` |  If both `shape` and `tensor` are None.   
`ValueError` |  if any unrecognized parameters are provided.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/keras/Input

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

