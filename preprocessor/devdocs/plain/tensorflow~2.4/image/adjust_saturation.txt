# tf.image.adjust_saturation

View source on GitHub  Adjust saturation of RGB images.

#### View aliases

Compat aliases for migration See Migration guide for more details.
`tf.compat.v1.image.adjust_saturation`

    
    tf.image.adjust_saturation(
        image, saturation_factor, name=None
    )
    
This is a convenience method that converts RGB images to float representation,
converts them to HSV, adds an offset to the saturation channel, converts back
to RGB and then back to the original data type. If several adjustments are
chained it is advisable to minimize the number of redundant conversions.
`image` is an RGB image or images. The image saturation is adjusted by
converting the images to HSV and multiplying the saturation (S) channel by
`saturation_factor` and clipping. The images are then converted back to RGB.

#### Usage Example:

    
    x = [[[1.0, 2.0, 3.0],
          [4.0, 5.0, 6.0]],
        [[7.0, 8.0, 9.0],
          [10.0, 11.0, 12.0]]]
    tf.image.adjust_saturation(x, 0.5)
    <tf.Tensor: shape=(2, 2, 3), dtype=float32, numpy=
    array([[[ 2. ,  2.5,  3. ],
            [ 5. ,  5.5,  6. ]],
           [[ 8. ,  8.5,  9. ],
            [11. , 11.5, 12. ]]], dtype=float32)>
    
| Args  
---  
`image` |  RGB image or images. The size of the last dimension must be 3.   
`saturation_factor` |  float. Factor to multiply the saturation by.   
`name` |  A name for this operation (optional).   
Returns  
---  
Adjusted image(s), same shape and DType as `image`.  
Raises  
---  
`InvalidArgumentError` |  input must have 3 channels   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/image/adjust_saturation

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

