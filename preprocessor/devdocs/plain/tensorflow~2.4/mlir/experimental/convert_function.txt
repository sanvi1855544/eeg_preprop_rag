# tf.mlir.experimental.convert_function

Import a ConcreteFunction and convert it to a textual MLIR module.

#### View aliases

Compat aliases for migration

See Migration guide for more details.

`tf.compat.v1.mlir.experimental.convert_function`

    
    tf.mlir.experimental.convert_function(
        concrete_function, pass_pipeline='tf-standard-pipeline'
    )
    
This API is only intended for inspecting the internals of TensorFlow and the
string returned is at the moment intended for debugging purposes.

A tf.function can be imported and converted from TensorFlow to TensorFlow MLIR
with this API by extracting its ConcreteFunction (eagerly-executing wrapper
around a tf.Graph).

#### For example:

    
    @tf.function
    def add(a, b):
      return a + b
    
    
    concrete_function = add.get_concrete_function(
        tf.TensorSpec(None, tf.dtypes.float32),
        tf.TensorSpec(None, tf.dtypes.float32))
    tf.mlir.experimental.convert_function(concrete_function)
    '...module attributes {...} {...}'
    
Args  
---  
`concrete_function` |  An object of type ConcreteFunction.   
`pass_pipeline` |  A textual description of an MLIR Pass Pipeline to run on the module, see MLIR documentation for the textual pass pipeline syntax.   
Returns  
---  
A textual representation of the MLIR module corresponding to the
ConcreteFunction.  
Raises  
---  
`InvalidArgumentError` |  if concrete_function is invalid or cannot be converted to MLIR.   
Â© 2020 The TensorFlow Authors. All rights reserved.  
Licensed under the Creative Commons Attribution License 3.0.  
Code samples licensed under the Apache 2.0 License.  
https://www.tensorflow.org/versions/r2.4/api_docs/python/tf/mlir/experimental/convert_function

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

