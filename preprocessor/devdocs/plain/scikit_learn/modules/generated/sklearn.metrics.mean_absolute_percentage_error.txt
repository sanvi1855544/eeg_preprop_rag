# sklearn.metrics.mean_absolute_percentage_error

`sklearn.metrics.mean_absolute_percentage_error(y_true, y_pred,
sample_weight=None, multioutput='uniform_average')` [source]

    
Mean absolute percentage error regression loss.

Note here that we do not represent the output as a percentage in range [0,
100]. Instead, we represent it in range [0, 1/eps]. Read more in the User
Guide.

New in version 0.24.

Parameters

    
`y_truearray-like of shape (n_samples,) or (n_samples, n_outputs)`

    
Ground truth (correct) target values.

`y_predarray-like of shape (n_samples,) or (n_samples, n_outputs)`

    
Estimated target values.

`sample_weightarray-like of shape (n_samples,), default=None`

    
Sample weights.

`multioutput{‘raw_values’, ‘uniform_average’} or array-like`

    
Defines aggregating of multiple output values. Array-like value defines
weights used to average errors. If input is list then the shape must be
(n_outputs,).

‘raw_values’ :

    
Returns a full set of errors in case of multioutput input.

‘uniform_average’ :

    
Errors of all outputs are averaged with uniform weight.

Returns

    
`lossfloat or ndarray of floats in the range [0, 1/eps]`

    
If multioutput is ‘raw_values’, then mean absolute percentage error is
returned for each output separately. If multioutput is ‘uniform_average’ or an
ndarray of weights, then the weighted average of all output errors is
returned.

MAPE output is non-negative floating point. The best value is 0.0. But note
the fact that bad predictions can lead to arbitarily large MAPE values,
especially if some y_true values are very close to zero. Note that we return a
large value instead of `inf` when y_true is zero.

#### Examples

    
    >>> from sklearn.metrics import mean_absolute_percentage_error
    >>> y_true = [3, -0.5, 2, 7]
    >>> y_pred = [2.5, 0.0, 2, 8]
    >>> mean_absolute_percentage_error(y_true, y_pred)
    0.3273...
    >>> y_true = [[0.5, 1], [-1, 1], [7, -6]]
    >>> y_pred = [[0, 2], [-1, 2], [8, -5]]
    >>> mean_absolute_percentage_error(y_true, y_pred)
    0.5515...
    >>> mean_absolute_percentage_error(y_true, y_pred, multioutput=[0.3, 0.7])
    0.6198...
    
© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-
learn.org/0.24/modules/generated/sklearn.metrics.mean_absolute_percentage_error.html

