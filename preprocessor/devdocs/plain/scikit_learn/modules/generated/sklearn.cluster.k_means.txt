# sklearn.cluster.k_means

`sklearn.cluster.k_means(X, n_clusters, *, sample_weight=None,
init='k-means++', precompute_distances='deprecated', n_init=10, max_iter=300,
verbose=False, tol=0.0001, random_state=None, copy_x=True,
n_jobs='deprecated', algorithm='auto', return_n_iter=False)` [source]

    
K-means clustering algorithm.

Read more in the User Guide.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
The observations to cluster. It must be noted that the data will be converted
to C ordering, which will cause a memory copy if the given data is not
C-contiguous.

`n_clustersint`

    
The number of clusters to form as well as the number of centroids to generate.

`sample_weightarray-like of shape (n_samples,), default=None`

    
The weights for each observation in X. If None, all observations are assigned
equal weight.

`init{‘k-means++’, ‘random’}, callable or array-like of shape (n_clusters,
n_features), default=’k-means++’`

    
Method for initialization:

‘k-means++’ : selects initial cluster centers for k-mean clustering in a smart
way to speed up convergence. See section Notes in k_init for more details.

‘random’: choose `n_clusters` observations (rows) at random from data for the
initial centroids.

If an array is passed, it should be of shape (n_clusters, n_features) and
gives the initial centers.

If a callable is passed, it should take arguments X, n_clusters and a random
state and return an initialization.

`precompute_distances{‘auto’, True, False}`

    
Precompute distances (faster but takes more memory).

‘auto’ : do not precompute distances if n_samples * n_clusters > 12 million.
This corresponds to about 100MB overhead per job using double precision.

True : always precompute distances

False : never precompute distances

Deprecated since version 0.23: ‘precompute_distances’ was deprecated in
version 0.23 and will be removed in 1.0 (renaming of 0.25). It has no effect.

`n_initint, default=10`

    
Number of time the k-means algorithm will be run with different centroid
seeds. The final results will be the best output of n_init consecutive runs in
terms of inertia.

`max_iterint, default=300`

    
Maximum number of iterations of the k-means algorithm to run.

`verbosebool, default=False`

    
Verbosity mode.

`tolfloat, default=1e-4`

    
Relative tolerance with regards to Frobenius norm of the difference in the
cluster centers of two consecutive iterations to declare convergence.

`random_stateint, RandomState instance or None, default=None`

    
Determines random number generation for centroid initialization. Use an int to
make the randomness deterministic. See Glossary.

`copy_xbool, default=True`

    
When pre-computing distances it is more numerically accurate to center the
data first. If copy_x is True (default), then the original data is not
modified. If False, the original data is modified, and put back before the
function returns, but small numerical differences may be introduced by
subtracting and then adding the data mean. Note that if the original data is
not C-contiguous, a copy will be made even if copy_x is False. If the original
data is sparse, but not in CSR format, a copy will be made even if copy_x is
False.

`n_jobsint, default=None`

    
The number of OpenMP threads to use for the computation. Parallelism is
sample-wise on the main cython loop which assigns each sample to its closest
center.

`None` or `-1` means using all processors.

Deprecated since version 0.23: `n_jobs` was deprecated in version 0.23 and
will be removed in 1.0 (renaming of 0.25).

`algorithm{“auto”, “full”, “elkan”}, default=”auto”`

    
K-means algorithm to use. The classical EM-style algorithm is “full”. The
“elkan” variation is more efficient on data with well-defined clusters, by
using the triangle inequality. However it’s more memory intensive due to the
allocation of an extra array of shape (n_samples, n_clusters).

For now “auto” (kept for backward compatibiliy) chooses “elkan” but it might
change in the future for a better heuristic.

`return_n_iterbool, default=False`

    
Whether or not to return the number of iterations.

Returns

    
`centroidndarray of shape (n_clusters, n_features)`

    
Centroids found at the last iteration of k-means.

`labelndarray of shape (n_samples,)`

    
label[i] is the code or index of the centroid the i’th observation is closest
to.

`inertiafloat`

    
The final value of the inertia criterion (sum of squared distances to the
closest centroid for all observations in the training set).

`best_n_iterint`

    
Number of iterations corresponding to the best results. Returned only if
`return_n_iter` is set to True.

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-learn.org/0.24/modules/generated/sklearn.cluster.k_means.html

