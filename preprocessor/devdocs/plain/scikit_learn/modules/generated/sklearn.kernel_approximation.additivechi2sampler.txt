# sklearn.kernel_approximation.AdditiveChi2Sampler

`class sklearn.kernel_approximation.AdditiveChi2Sampler(*, sample_steps=2,
sample_interval=None)` [source]

    
Approximate feature map for additive chi2 kernel.

Uses sampling the fourier transform of the kernel characteristic at regular
intervals.

Since the kernel that is to be approximated is additive, the components of the
input vectors can be treated separately. Each entry in the original space is
transformed into 2*sample_steps+1 features, where sample_steps is a parameter
of the method. Typical values of sample_steps include 1, 2 and 3.

Optimal choices for the sampling interval for certain data ranges can be
computed (see the reference). The default values should be reasonable.

Read more in the User Guide.

Parameters

    
`sample_stepsint, default=2`

    
Gives the number of (complex) sampling points.

`sample_intervalfloat, default=None`

    
Sampling interval. Must be specified when sample_steps not in {1,2,3}.

Attributes

    
`sample_interval_float`

    
Stored sampling interval. Specified as a parameter if sample_steps not in
{1,2,3}.

See also

`SkewedChi2Sampler`

    
A Fourier-approximation to a non-additive variant of the chi squared kernel.

`sklearn.metrics.pairwise.chi2_kernel`

    
The exact chi squared kernel.

`sklearn.metrics.pairwise.additive_chi2_kernel`

    
The exact additive chi squared kernel.

#### Notes

This estimator approximates a slightly different version of the additive chi
squared kernel then `metric.additive_chi2` computes.

#### References

See “Efficient additive kernels via explicit feature maps” A. Vedaldi and A.
Zisserman, Pattern Analysis and Machine Intelligence, 2011

#### Examples

    
    >>> from sklearn.datasets import load_digits
    >>> from sklearn.linear_model import SGDClassifier
    >>> from sklearn.kernel_approximation import AdditiveChi2Sampler
    >>> X, y = load_digits(return_X_y=True)
    >>> chi2sampler = AdditiveChi2Sampler(sample_steps=2)
    >>> X_transformed = chi2sampler.fit_transform(X, y)
    >>> clf = SGDClassifier(max_iter=5, random_state=0, tol=1e-3)
    >>> clf.fit(X_transformed, y)
    SGDClassifier(max_iter=5, random_state=0)
    >>> clf.score(X_transformed, y)
    0.9499...
    
#### Methods

`fit`(X[, y]) | Set the parameters  
---|---  
`fit_transform`(X[, y]) | Fit to data, then transform it.  
`get_params`([deep]) | Get parameters for this estimator.  
`set_params`(**params) | Set the parameters of this estimator.  
`transform`(X) | Apply approximate feature map to X.  
`fit(X, y=None)` [source]

    
Set the parameters

Parameters

    
`Xarray-like, shape (n_samples, n_features)`

    
Training data, where n_samples in the number of samples and n_features is the
number of features.

Returns

    
`selfobject`

    
Returns the transformer.

`fit_transform(X, y=None, **fit_params)` [source]

    
Fit to data, then transform it.

Fits transformer to `X` and `y` with optional parameters `fit_params` and
returns a transformed version of `X`.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

    
Input samples.

`yarray-like of shape (n_samples,) or (n_samples, n_outputs), default=None`

    
Target values (None for unsupervised transformations).

`**fit_paramsdict`

    
Additional fit parameters.

Returns

    
`X_newndarray array of shape (n_samples, n_features_new)`

    
Transformed array.

`get_params(deep=True)` [source]

    
Get parameters for this estimator.

Parameters

    
`deepbool, default=True`

    
If True, will return the parameters for this estimator and contained
subobjects that are estimators.

Returns

    
`paramsdict`

    
Parameter names mapped to their values.

`set_params(**params)` [source]

    
Set the parameters of this estimator.

The method works on simple estimators as well as on nested objects (such as
`Pipeline`). The latter have parameters of the form `<component>__<parameter>`
so that it’s possible to update each component of a nested object.

Parameters

    
`**paramsdict`

    
Estimator parameters.

Returns

    
`selfestimator instance`

    
Estimator instance.

`transform(X)` [source]

    
Apply approximate feature map to X.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

Returns

    
`X_new{ndarray, sparse matrix}, shape = (n_samples, n_features *
(2*sample_steps + 1))`

    
Whether the return value is an array of sparse matrix depends on the type of
the input X.

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-
learn.org/0.24/modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.html

