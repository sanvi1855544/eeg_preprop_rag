# sklearn.neighbors.RadiusNeighborsClassifier

`class sklearn.neighbors.RadiusNeighborsClassifier(radius=1.0, *,
weights='uniform', algorithm='auto', leaf_size=30, p=2, metric='minkowski',
outlier_label=None, metric_params=None, n_jobs=None, **kwargs)` [source]

    
Classifier implementing a vote among neighbors within a given radius

Read more in the User Guide.

Parameters

    
`radiusfloat, default=1.0`

    
Range of parameter space to use by default for `radius_neighbors` queries.

`weights{‘uniform’, ‘distance’} or callable, default=’uniform’`

    
weight function used in prediction. Possible values:

  * ‘uniform’ : uniform weights. All points in each neighborhood are weighted equally.
  * ‘distance’ : weight points by the inverse of their distance. in this case, closer neighbors of a query point will have a greater influence than neighbors which are further away.
  * [callable] : a user-defined function which accepts an array of distances, and returns an array of the same shape containing the weights.

Uniform weights are used by default.

`algorithm{‘auto’, ‘ball_tree’, ‘kd_tree’, ‘brute’}, default=’auto’`

    
Algorithm used to compute the nearest neighbors:

  * ‘ball_tree’ will use `BallTree`
  * ‘kd_tree’ will use `KDTree`
  * ‘brute’ will use a brute-force search.
  * ‘auto’ will attempt to decide the most appropriate algorithm based on the values passed to `fit` method.

Note: fitting on sparse input will override the setting of this parameter,
using brute force.

`leaf_sizeint, default=30`

    
Leaf size passed to BallTree or KDTree. This can affect the speed of the
construction and query, as well as the memory required to store the tree. The
optimal value depends on the nature of the problem.

`pint, default=2`

    
Power parameter for the Minkowski metric. When p = 1, this is equivalent to
using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. For
arbitrary p, minkowski_distance (l_p) is used.

`metricstr or callable, default=’minkowski’`

    
the distance metric to use for the tree. The default metric is minkowski, and
with p=2 is equivalent to the standard Euclidean metric. See the documentation
of `DistanceMetric` for a list of available metrics. If metric is
“precomputed”, X is assumed to be a distance matrix and must be square during
fit. X may be a sparse graph, in which case only “nonzero” elements may be
considered neighbors.

`outlier_label{manual label, ‘most_frequent’}, default=None`

    
label for outlier samples (samples with no neighbors in given radius).

  * manual label: str or int label (should be the same type as y) or list of manual labels if multi-output is used.
  * ‘most_frequent’ : assign the most frequent label of y to outliers.
  * None : when any outlier is detected, ValueError will be raised.

`metric_paramsdict, default=None`

    
Additional keyword arguments for the metric function.

`n_jobsint, default=None`

    
The number of parallel jobs to run for neighbors search. `None` means 1 unless
in a `joblib.parallel_backend` context. `-1` means using all processors. See
Glossary for more details.

Attributes

    
`classes_ndarray of shape (n_classes,)`

    
Class labels known to the classifier.

`effective_metric_str or callable`

    
The distance metric used. It will be same as the `metric` parameter or a
synonym of it, e.g. ‘euclidean’ if the `metric` parameter set to ‘minkowski’
and `p` parameter set to 2.

`effective_metric_params_dict`

    
Additional keyword arguments for the metric function. For most metrics will be
same with `metric_params` parameter, but may also contain the `p` parameter
value if the `effective_metric_` attribute is set to ‘minkowski’.

`n_samples_fit_int`

    
Number of samples in the fitted data.

`outlier_label_int or array-like of shape (n_class,)`

    
Label which is given for outlier samples (samples with no neighbors on given
radius).

`outputs_2d_bool`

    
False when `y`’s shape is (n_samples, ) or (n_samples, 1) during fit otherwise
True.

See also

`KNeighborsClassifier`

`RadiusNeighborsRegressor`

`KNeighborsRegressor`

`NearestNeighbors`

#### Notes

See Nearest Neighbors in the online documentation for a discussion of the
choice of `algorithm` and `leaf_size`.

https://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm

#### Examples

    
    >>> X = [[0], [1], [2], [3]]
    >>> y = [0, 0, 1, 1]
    >>> from sklearn.neighbors import RadiusNeighborsClassifier
    >>> neigh = RadiusNeighborsClassifier(radius=1.0)
    >>> neigh.fit(X, y)
    RadiusNeighborsClassifier(...)
    >>> print(neigh.predict([[1.5]]))
    [0]
    >>> print(neigh.predict_proba([[1.0]]))
    [[0.66666667 0.33333333]]
    
#### Methods

`fit`(X, y) | Fit the radius neighbors classifier from the training dataset.  
---|---  
`get_params`([deep]) | Get parameters for this estimator.  
`predict`(X) | Predict the class labels for the provided data.  
`predict_proba`(X) | Return probability estimates for the test data X.  
`radius_neighbors`([X, radius, …]) | Finds the neighbors within a given radius of a point or points.  
`radius_neighbors_graph`([X, radius, mode, …]) | Computes the (weighted) graph of Neighbors for points in X  
`score`(X, y[, sample_weight]) | Return the mean accuracy on the given test data and labels.  
`set_params`(**params) | Set the parameters of this estimator.  
`fit(X, y)` [source]

    
Fit the radius neighbors classifier from the training dataset.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features) or (n_samples,
n_samples) if metric=’precomputed’`

    
Training data.

`y{array-like, sparse matrix} of shape (n_samples,) or (n_samples, n_outputs)`

    
Target values.

Returns

    
`selfRadiusNeighborsClassifier`

    
The fitted radius neighbors classifier.

`get_params(deep=True)` [source]

    
Get parameters for this estimator.

Parameters

    
`deepbool, default=True`

    
If True, will return the parameters for this estimator and contained
subobjects that are estimators.

Returns

    
`paramsdict`

    
Parameter names mapped to their values.

`predict(X)` [source]

    
Predict the class labels for the provided data.

Parameters

    
`Xarray-like of shape (n_queries, n_features), or (n_queries, n_indexed) if
metric == ‘precomputed’`

    
Test samples.

Returns

    
`yndarray of shape (n_queries,) or (n_queries, n_outputs)`

    
Class labels for each data sample.

`predict_proba(X)` [source]

    
Return probability estimates for the test data X.

Parameters

    
`Xarray-like of shape (n_queries, n_features), or (n_queries, n_indexed) if
metric == ‘precomputed’`

    
Test samples.

Returns

    
`pndarray of shape (n_queries, n_classes), or a list of n_outputs`

    
of such arrays if n_outputs > 1\. The class probabilities of the input
samples. Classes are ordered by lexicographic order.

`radius_neighbors(X=None, radius=None, return_distance=True,
sort_results=False)` [source]

    
Finds the neighbors within a given radius of a point or points.

Return the indices and distances of each point from the dataset lying in a
ball with size `radius` around the points of the query array. Points lying on
the boundary are included in the results.

The result points are not necessarily sorted by distance to their query point.

Parameters

    
`Xarray-like of (n_samples, n_features), default=None`

    
The query point or points. If not provided, neighbors of each indexed point
are returned. In this case, the query point is not considered its own
neighbor.

`radiusfloat, default=None`

    
Limiting distance of neighbors to return. The default is the value passed to
the constructor.

`return_distancebool, default=True`

    
Whether or not to return the distances.

`sort_resultsbool, default=False`

    
If True, the distances and indices will be sorted by increasing distances
before being returned. If False, the results may not be sorted. If
`return_distance=False`, setting `sort_results=True` will result in an error.

New in version 0.22.

Returns

    
`neigh_distndarray of shape (n_samples,) of arrays`

    
Array representing the distances to each point, only present if
`return_distance=True`. The distance values are computed according to the
`metric` constructor parameter.

`neigh_indndarray of shape (n_samples,) of arrays`

    
An array of arrays of indices of the approximate nearest points from the
population matrix that lie within a ball of size `radius` around the query
points.

#### Notes

Because the number of neighbors of each point is not necessarily equal, the
results for multiple query points cannot be fit in a standard data array. For
efficiency, `radius_neighbors` returns arrays of objects, where each object is
a 1D array of indices or distances.

#### Examples

In the following example, we construct a NeighborsClassifier class from an
array representing our data set and ask who’s the closest point to [1, 1, 1]:

    
    >>> import numpy as np
    >>> samples = [[0., 0., 0.], [0., .5, 0.], [1., 1., .5]]
    >>> from sklearn.neighbors import NearestNeighbors
    >>> neigh = NearestNeighbors(radius=1.6)
    >>> neigh.fit(samples)
    NearestNeighbors(radius=1.6)
    >>> rng = neigh.radius_neighbors([[1., 1., 1.]])
    >>> print(np.asarray(rng[0][0]))
    [1.5 0.5]
    >>> print(np.asarray(rng[1][0]))
    [1 2]
    
The first array returned contains the distances to all points which are closer
than 1.6, while the second array returned contains their indices. In general,
multiple points can be queried at the same time.

`radius_neighbors_graph(X=None, radius=None, mode='connectivity',
sort_results=False)` [source]

    
Computes the (weighted) graph of Neighbors for points in X

Neighborhoods are restricted the points at a distance lower than radius.

Parameters

    
`Xarray-like of shape (n_samples, n_features), default=None`

    
The query point or points. If not provided, neighbors of each indexed point
are returned. In this case, the query point is not considered its own
neighbor.

`radiusfloat, default=None`

    
Radius of neighborhoods. The default is the value passed to the constructor.

`mode{‘connectivity’, ‘distance’}, default=’connectivity’`

    
Type of returned matrix: ‘connectivity’ will return the connectivity matrix
with ones and zeros, in ‘distance’ the edges are Euclidean distance between
points.

`sort_resultsbool, default=False`

    
If True, in each row of the result, the non-zero entries will be sorted by
increasing distances. If False, the non-zero entries may not be sorted. Only
used with mode=’distance’.

New in version 0.22.

Returns

    
`Asparse-matrix of shape (n_queries, n_samples_fit)`

    
`n_samples_fit` is the number of samples in the fitted data `A[i, j]` is
assigned the weight of edge that connects `i` to `j`. The matrix if of format
CSR.

See also

`kneighbors_graph`

#### Examples

    
    >>> X = [[0], [3], [1]]
    >>> from sklearn.neighbors import NearestNeighbors
    >>> neigh = NearestNeighbors(radius=1.5)
    >>> neigh.fit(X)
    NearestNeighbors(radius=1.5)
    >>> A = neigh.radius_neighbors_graph(X)
    >>> A.toarray()
    array([[1., 0., 1.],
           [0., 1., 0.],
           [1., 0., 1.]])
    
`score(X, y, sample_weight=None)` [source]

    
Return the mean accuracy on the given test data and labels.

In multi-label classification, this is the subset accuracy which is a harsh
metric since you require for each sample that each label set be correctly
predicted.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

    
Test samples.

`yarray-like of shape (n_samples,) or (n_samples, n_outputs)`

    
True labels for `X`.

`sample_weightarray-like of shape (n_samples,), default=None`

    
Sample weights.

Returns

    
`scorefloat`

    
Mean accuracy of `self.predict(X)` wrt. `y`.

`set_params(**params)` [source]

    
Set the parameters of this estimator.

The method works on simple estimators as well as on nested objects (such as
`Pipeline`). The latter have parameters of the form `<component>__<parameter>`
so that it’s possible to update each component of a nested object.

Parameters

    
`**paramsdict`

    
Estimator parameters.

Returns

    
`selfestimator instance`

    
Estimator instance.

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-
learn.org/0.24/modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.html

