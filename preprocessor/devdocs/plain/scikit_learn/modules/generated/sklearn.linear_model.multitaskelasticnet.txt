# sklearn.linear_model.MultiTaskElasticNet

`class sklearn.linear_model.MultiTaskElasticNet(alpha=1.0, *, l1_ratio=0.5,
fit_intercept=True, normalize=False, copy_X=True, max_iter=1000, tol=0.0001,
warm_start=False, random_state=None, selection='cyclic')` [source]

    
Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer.

The optimization objective for MultiTaskElasticNet is:

    
    (1 / (2 * n_samples)) * ||Y - XW||_Fro^2
    + alpha * l1_ratio * ||W||_21
    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2
    
Where:

    
    ||W||_21 = sum_i sqrt(sum_j W_ij ^ 2)
    
i.e. the sum of norms of each row.

Read more in the User Guide.

Parameters

    
`alphafloat, default=1.0`

    
Constant that multiplies the L1/L2 term. Defaults to 1.0.

`l1_ratiofloat, default=0.5`

    
The ElasticNet mixing parameter, with 0 < l1_ratio <= 1. For l1_ratio = 1 the
penalty is an L1/L2 penalty. For l1_ratio = 0 it is an L2 penalty. For `0 <
l1_ratio < 1`, the penalty is a combination of L1/L2 and L2.

`fit_interceptbool, default=True`

    
Whether to calculate the intercept for this model. If set to false, no
intercept will be used in calculations (i.e. data is expected to be centered).

`normalizebool, default=False`

    
This parameter is ignored when `fit_intercept` is set to False. If True, the
regressors X will be normalized before regression by subtracting the mean and
dividing by the l2-norm. If you wish to standardize, please use
`StandardScaler` before calling `fit` on an estimator with `normalize=False`.

`copy_Xbool, default=True`

    
If `True`, X will be copied; else, it may be overwritten.

`max_iterint, default=1000`

    
The maximum number of iterations.

`tolfloat, default=1e-4`

    
The tolerance for the optimization: if the updates are smaller than `tol`, the
optimization code checks the dual gap for optimality and continues until it is
smaller than `tol`.

`warm_startbool, default=False`

    
When set to `True`, reuse the solution of the previous call to fit as
initialization, otherwise, just erase the previous solution. See the Glossary.

`random_stateint, RandomState instance, default=None`

    
The seed of the pseudo random number generator that selects a random feature
to update. Used when `selection` == ‘random’. Pass an int for reproducible
output across multiple function calls. See Glossary.

`selection{‘cyclic’, ‘random’}, default=’cyclic’`

    
If set to ‘random’, a random coefficient is updated every iteration rather
than looping over features sequentially by default. This (setting to ‘random’)
often leads to significantly faster convergence especially when tol is higher
than 1e-4.

Attributes

    
`intercept_ndarray of shape (n_tasks,)`

    
Independent term in decision function.

`coef_ndarray of shape (n_tasks, n_features)`

    
Parameter vector (W in the cost function formula). If a 1D y is passed in at
fit (non multi-task usage), `coef_` is then a 1D array. Note that `coef_`
stores the transpose of `W`, `W.T`.

`n_iter_int`

    
Number of iterations run by the coordinate descent solver to reach the
specified tolerance.

`dual_gap_float`

    
The dual gaps at the end of the optimization.

`eps_float`

    
The tolerance scaled scaled by the variance of the target `y`.

`sparse_coef_sparse matrix of shape (n_features,) or (n_tasks, n_features)`

    
Sparse representation of the fitted `coef_`.

See also

`MultiTaskElasticNetCV`

    
Multi-task L1/L2 ElasticNet with built-in cross-validation.

`ElasticNet`

`MultiTaskLasso`

#### Notes

The algorithm used to fit the model is coordinate descent.

To avoid unnecessary memory duplication the X and y arguments of the fit
method should be directly passed as Fortran-contiguous numpy arrays.

#### Examples

    
    >>> from sklearn import linear_model
    >>> clf = linear_model.MultiTaskElasticNet(alpha=0.1)
    >>> clf.fit([[0,0], [1, 1], [2, 2]], [[0, 0], [1, 1], [2, 2]])
    MultiTaskElasticNet(alpha=0.1)
    >>> print(clf.coef_)
    [[0.45663524 0.45612256]
     [0.45663524 0.45612256]]
    >>> print(clf.intercept_)
    [0.0872422 0.0872422]
    
#### Methods

`fit`(X, y) | Fit MultiTaskElasticNet model with coordinate descent  
---|---  
`get_params`([deep]) | Get parameters for this estimator.  
`path`(*args, **kwargs) | Compute elastic net path with coordinate descent.  
`predict`(X) | Predict using the linear model.  
`score`(X, y[, sample_weight]) | Return the coefficient of determination \\(R^2\\) of the prediction.  
`set_params`(**params) | Set the parameters of this estimator.  
`fit(X, y)` [source]

    
Fit MultiTaskElasticNet model with coordinate descent

Parameters

    
`Xndarray of shape (n_samples, n_features)`

    
Data.

`yndarray of shape (n_samples, n_tasks)`

    
Target. Will be cast to X’s dtype if necessary.

#### Notes

Coordinate descent is an algorithm that considers each column of data at a
time hence it will automatically convert the X input as a Fortran-contiguous
numpy array if necessary.

To avoid memory re-allocation it is advised to allocate the initial data in
memory directly using that format.

`get_params(deep=True)` [source]

    
Get parameters for this estimator.

Parameters

    
`deepbool, default=True`

    
If True, will return the parameters for this estimator and contained
subobjects that are estimators.

Returns

    
`paramsdict`

    
Parameter names mapped to their values.

`static path(*args, **kwargs)` [source]

    
Compute elastic net path with coordinate descent.

The elastic net optimization function varies for mono and multi-outputs.

For mono-output tasks it is:

    
    1 / (2 * n_samples) * ||y - Xw||^2_2
    + alpha * l1_ratio * ||w||_1
    + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2
    
For multi-output tasks it is:

    
    (1 / (2 * n_samples)) * ||Y - XW||^Fro_2
    + alpha * l1_ratio * ||W||_21
    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2
    
Where:

    
    ||W||_21 = \sum_i \sqrt{\sum_j w_{ij}^2}
    
i.e. the sum of norm of each row.

Read more in the User Guide.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
Training data. Pass directly as Fortran-contiguous data to avoid unnecessary
memory duplication. If `y` is mono-output then `X` can be sparse.

`y{array-like, sparse matrix} of shape (n_samples,) or (n_samples, n_outputs)`

    
Target values.

`l1_ratiofloat, default=0.5`

    
Number between 0 and 1 passed to elastic net (scaling between l1 and l2
penalties). `l1_ratio=1` corresponds to the Lasso.

`epsfloat, default=1e-3`

    
Length of the path. `eps=1e-3` means that `alpha_min / alpha_max = 1e-3`.

`n_alphasint, default=100`

    
Number of alphas along the regularization path.

`alphasndarray, default=None`

    
List of alphas where to compute the models. If None alphas are set
automatically.

`precompute‘auto’, bool or array-like of shape (n_features, n_features),
default=’auto’`

    
Whether to use a precomputed Gram matrix to speed up calculations. If set to
`'auto'` let us decide. The Gram matrix can also be passed as argument.

`Xyarray-like of shape (n_features,) or (n_features, n_outputs), default=None`

    
Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram
matrix is precomputed.

`copy_Xbool, default=True`

    
If `True`, X will be copied; else, it may be overwritten.

`coef_initndarray of shape (n_features, ), default=None`

    
The initial values of the coefficients.

`verbosebool or int, default=False`

    
Amount of verbosity.

`return_n_iterbool, default=False`

    
Whether to return the number of iterations or not.

`positivebool, default=False`

    
If set to True, forces coefficients to be positive. (Only allowed when `y.ndim
== 1`).

`check_inputbool, default=True`

    
If set to False, the input validation checks are skipped (including the Gram
matrix when provided). It is assumed that they are handled by the caller.

`**paramskwargs`

    
Keyword arguments passed to the coordinate descent solver.

Returns

    
`alphasndarray of shape (n_alphas,)`

    
The alphas along the path where models are computed.

`coefsndarray of shape (n_features, n_alphas) or (n_outputs, n_features,
n_alphas)`

    
Coefficients along the path.

`dual_gapsndarray of shape (n_alphas,)`

    
The dual gaps at the end of the optimization for each alpha.

`n_iterslist of int`

    
The number of iterations taken by the coordinate descent optimizer to reach
the specified tolerance for each alpha. (Is returned when `return_n_iter` is
set to True).

See also

`MultiTaskElasticNet`

`MultiTaskElasticNetCV`

`ElasticNet`

`ElasticNetCV`

#### Notes

For an example, see
examples/linear_model/plot_lasso_coordinate_descent_path.py.

`predict(X)` [source]

    
Predict using the linear model.

Parameters

    
`Xarray-like or sparse matrix, shape (n_samples, n_features)`

    
Samples.

Returns

    
`Carray, shape (n_samples,)`

    
Returns predicted values.

`score(X, y, sample_weight=None)` [source]

    
Return the coefficient of determination \\(R^2\\) of the prediction.

The coefficient \\(R^2\\) is defined as \\((1 - \frac{u}{v})\\), where \\(u\\)
is the residual sum of squares `((y_true - y_pred) ** 2).sum()` and \\(v\\) is
the total sum of squares `((y_true - y_true.mean()) ** 2).sum()`. The best
possible score is 1.0 and it can be negative (because the model can be
arbitrarily worse). A constant model that always predicts the expected value
of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

    
Test samples. For some estimators this may be a precomputed kernel matrix or a
list of generic objects instead with shape `(n_samples, n_samples_fitted)`,
where `n_samples_fitted` is the number of samples used in the fitting for the
estimator.

`yarray-like of shape (n_samples,) or (n_samples, n_outputs)`

    
True values for `X`.

`sample_weightarray-like of shape (n_samples,), default=None`

    
Sample weights.

Returns

    
`scorefloat`

    
\\(R^2\\) of `self.predict(X)` wrt. `y`.

#### Notes

The \\(R^2\\) score used when calling `score` on a regressor uses
`multioutput='uniform_average'` from version 0.23 to keep consistent with
default value of `r2_score`. This influences the `score` method of all the
multioutput regressors (except for `MultiOutputRegressor`).

`set_params(**params)` [source]

    
Set the parameters of this estimator.

The method works on simple estimators as well as on nested objects (such as
`Pipeline`). The latter have parameters of the form `<component>__<parameter>`
so that it’s possible to update each component of a nested object.

Parameters

    
`**paramsdict`

    
Estimator parameters.

Returns

    
`selfestimator instance`

    
Estimator instance.

`property sparse_coef_`

    
Sparse representation of the fitted `coef_`.

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-
learn.org/0.24/modules/generated/sklearn.linear_model.MultiTaskElasticNet.html

