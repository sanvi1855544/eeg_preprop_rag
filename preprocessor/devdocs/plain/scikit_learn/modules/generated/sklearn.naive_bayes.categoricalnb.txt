# sklearn.naive_bayes.CategoricalNB

`class sklearn.naive_bayes.CategoricalNB(*, alpha=1.0, fit_prior=True,
class_prior=None, min_categories=None)` [source]

    
Naive Bayes classifier for categorical features

The categorical Naive Bayes classifier is suitable for classification with
discrete features that are categorically distributed. The categories of each
feature are drawn from a categorical distribution.

Read more in the User Guide.

Parameters

    
`alphafloat, default=1.0`

    
Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing).

`fit_priorbool, default=True`

    
Whether to learn class prior probabilities or not. If false, a uniform prior
will be used.

`class_priorarray-like of shape (n_classes,), default=None`

    
Prior probabilities of the classes. If specified the priors are not adjusted
according to the data.

`min_categoriesint or array-like of shape (n_features,), default=None`

    
Minimum number of categories per feature.

  * integer: Sets the minimum number of categories per feature to `n_categories` for each features.
  * array-like: shape (n_features,) where `n_categories[i]` holds the minimum number of categories for the ith column of the input.
  * None (default): Determines the number of categories automatically from the training data.

New in version 0.24.

Attributes

    
`category_count_list of arrays of shape (n_features,)`

    
Holds arrays of shape (n_classes, n_categories of respective feature) for each
feature. Each array provides the number of samples encountered for each class
and category of the specific feature.

`class_count_ndarray of shape (n_classes,)`

    
Number of samples encountered for each class during fitting. This value is
weighted by the sample weight when provided.

`class_log_prior_ndarray of shape (n_classes,)`

    
Smoothed empirical log probability for each class.

`classes_ndarray of shape (n_classes,)`

    
Class labels known to the classifier

`feature_log_prob_list of arrays of shape (n_features,)`

    
Holds arrays of shape (n_classes, n_categories of respective feature) for each
feature. Each array provides the empirical log probability of categories given
the respective feature and class, `P(x_i|y)`.

`n_features_int`

    
Number of features of each sample.

`n_categories_ndarray of shape (n_features,), dtype=np.int64`

    
Number of categories for each feature. This value is inferred from the data or
set by the minimum number of categories.

New in version 0.24.

#### Examples

    
    >>> import numpy as np
    >>> rng = np.random.RandomState(1)
    >>> X = rng.randint(5, size=(6, 100))
    >>> y = np.array([1, 2, 3, 4, 5, 6])
    >>> from sklearn.naive_bayes import CategoricalNB
    >>> clf = CategoricalNB()
    >>> clf.fit(X, y)
    CategoricalNB()
    >>> print(clf.predict(X[2:3]))
    [3]
    
#### Methods

`fit`(X, y[, sample_weight]) | Fit Naive Bayes classifier according to X, y  
---|---  
`get_params`([deep]) | Get parameters for this estimator.  
`partial_fit`(X, y[, classes, sample_weight]) | Incremental fit on a batch of samples.  
`predict`(X) | Perform classification on an array of test vectors X.  
`predict_log_proba`(X) | Return log-probability estimates for the test vector X.  
`predict_proba`(X) | Return probability estimates for the test vector X.  
`score`(X, y[, sample_weight]) | Return the mean accuracy on the given test data and labels.  
`set_params`(**params) | Set the parameters of this estimator.  
`fit(X, y, sample_weight=None)` [source]

    
Fit Naive Bayes classifier according to X, y

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
Training vectors, where n_samples is the number of samples and n_features is
the number of features. Here, each feature of X is assumed to be from a
different categorical distribution. It is further assumed that all categories
of each feature are represented by the numbers 0, …, n - 1, where n refers to
the total number of categories for the given feature. This can, for instance,
be achieved with the help of OrdinalEncoder.

`yarray-like of shape (n_samples,)`

    
Target values.

`sample_weightarray-like of shape (n_samples), default=None`

    
Weights applied to individual samples (1. for unweighted).

Returns

    
`selfobject`

`get_params(deep=True)` [source]

    
Get parameters for this estimator.

Parameters

    
`deepbool, default=True`

    
If True, will return the parameters for this estimator and contained
subobjects that are estimators.

Returns

    
`paramsdict`

    
Parameter names mapped to their values.

`partial_fit(X, y, classes=None, sample_weight=None)` [source]

    
Incremental fit on a batch of samples.

This method is expected to be called several times consecutively on different
chunks of a dataset so as to implement out-of-core or online learning.

This is especially useful when the whole dataset is too big to fit in memory
at once.

This method has some performance overhead hence it is better to call
partial_fit on chunks of data that are as large as possible (as long as
fitting in the memory budget) to hide the overhead.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
Training vectors, where n_samples is the number of samples and n_features is
the number of features. Here, each feature of X is assumed to be from a
different categorical distribution. It is further assumed that all categories
of each feature are represented by the numbers 0, …, n - 1, where n refers to
the total number of categories for the given feature. This can, for instance,
be achieved with the help of OrdinalEncoder.

`yarray-like of shape (n_samples)`

    
Target values.

`classesarray-like of shape (n_classes), default=None`

    
List of all the classes that can possibly appear in the y vector.

Must be provided at the first call to partial_fit, can be omitted in
subsequent calls.

`sample_weightarray-like of shape (n_samples), default=None`

    
Weights applied to individual samples (1. for unweighted).

Returns

    
`selfobject`

`predict(X)` [source]

    
Perform classification on an array of test vectors X.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

Returns

    
`Cndarray of shape (n_samples,)`

    
Predicted target values for X

`predict_log_proba(X)` [source]

    
Return log-probability estimates for the test vector X.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

Returns

    
`Carray-like of shape (n_samples, n_classes)`

    
Returns the log-probability of the samples for each class in the model. The
columns correspond to the classes in sorted order, as they appear in the
attribute classes_.

`predict_proba(X)` [source]

    
Return probability estimates for the test vector X.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

Returns

    
`Carray-like of shape (n_samples, n_classes)`

    
Returns the probability of the samples for each class in the model. The
columns correspond to the classes in sorted order, as they appear in the
attribute classes_.

`score(X, y, sample_weight=None)` [source]

    
Return the mean accuracy on the given test data and labels.

In multi-label classification, this is the subset accuracy which is a harsh
metric since you require for each sample that each label set be correctly
predicted.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

    
Test samples.

`yarray-like of shape (n_samples,) or (n_samples, n_outputs)`

    
True labels for `X`.

`sample_weightarray-like of shape (n_samples,), default=None`

    
Sample weights.

Returns

    
`scorefloat`

    
Mean accuracy of `self.predict(X)` wrt. `y`.

`set_params(**params)` [source]

    
Set the parameters of this estimator.

The method works on simple estimators as well as on nested objects (such as
`Pipeline`). The latter have parameters of the form `<component>__<parameter>`
so that it’s possible to update each component of a nested object.

Parameters

    
`**paramsdict`

    
Estimator parameters.

Returns

    
`selfestimator instance`

    
Estimator instance.

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-
learn.org/0.24/modules/generated/sklearn.naive_bayes.CategoricalNB.html

