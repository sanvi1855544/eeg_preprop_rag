# sklearn.feature_selection.GenericUnivariateSelect

`class sklearn.feature_selection.GenericUnivariateSelect(score_func=<function
f_classif>, *, mode='percentile', param=1e-05)` [source]

    
Univariate feature selector with configurable strategy.

Read more in the User Guide.

Parameters

    
`score_funccallable, default=f_classif`

    
Function taking two arrays X and y, and returning a pair of arrays (scores,
pvalues). For modes ‘percentile’ or ‘kbest’ it can return a single array
scores.

`mode{‘percentile’, ‘k_best’, ‘fpr’, ‘fdr’, ‘fwe’}, default=’percentile’`

    
Feature selection mode.

`paramfloat or int depending on the feature selection mode, default=1e-5`

    
Parameter of the corresponding mode.

Attributes

    
`scores_array-like of shape (n_features,)`

    
Scores of features.

`pvalues_array-like of shape (n_features,)`

    
p-values of feature scores, None if `score_func` returned scores only.

See also

`f_classif`

    
ANOVA F-value between label/feature for classification tasks.

`mutual_info_classif`

    
Mutual information for a discrete target.

`chi2`

    
Chi-squared stats of non-negative features for classification tasks.

`f_regression`

    
F-value between label/feature for regression tasks.

`mutual_info_regression`

    
Mutual information for a continuous target.

`SelectPercentile`

    
Select features based on percentile of the highest scores.

`SelectKBest`

    
Select features based on the k highest scores.

`SelectFpr`

    
Select features based on a false positive rate test.

`SelectFdr`

    
Select features based on an estimated false discovery rate.

`SelectFwe`

    
Select features based on family-wise error rate.

#### Examples

    
    >>> from sklearn.datasets import load_breast_cancer
    >>> from sklearn.feature_selection import GenericUnivariateSelect, chi2
    >>> X, y = load_breast_cancer(return_X_y=True)
    >>> X.shape
    (569, 30)
    >>> transformer = GenericUnivariateSelect(chi2, mode='k_best', param=20)
    >>> X_new = transformer.fit_transform(X, y)
    >>> X_new.shape
    (569, 20)
    
#### Methods

`fit`(X, y) | Run score function on (X, y) and get the appropriate features.  
---|---  
`fit_transform`(X[, y]) | Fit to data, then transform it.  
`get_params`([deep]) | Get parameters for this estimator.  
`get_support`([indices]) | Get a mask, or integer index, of the features selected  
`inverse_transform`(X) | Reverse the transformation operation  
`set_params`(**params) | Set the parameters of this estimator.  
`transform`(X) | Reduce X to the selected features.  
`fit(X, y)` [source]

    
Run score function on (X, y) and get the appropriate features.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

    
The training input samples.

`yarray-like of shape (n_samples,)`

    
The target values (class labels in classification, real numbers in
regression).

Returns

    
`selfobject`

`fit_transform(X, y=None, **fit_params)` [source]

    
Fit to data, then transform it.

Fits transformer to `X` and `y` with optional parameters `fit_params` and
returns a transformed version of `X`.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

    
Input samples.

`yarray-like of shape (n_samples,) or (n_samples, n_outputs), default=None`

    
Target values (None for unsupervised transformations).

`**fit_paramsdict`

    
Additional fit parameters.

Returns

    
`X_newndarray array of shape (n_samples, n_features_new)`

    
Transformed array.

`get_params(deep=True)` [source]

    
Get parameters for this estimator.

Parameters

    
`deepbool, default=True`

    
If True, will return the parameters for this estimator and contained
subobjects that are estimators.

Returns

    
`paramsdict`

    
Parameter names mapped to their values.

`get_support(indices=False)` [source]

    
Get a mask, or integer index, of the features selected

Parameters

    
`indicesbool, default=False`

    
If True, the return value will be an array of integers, rather than a boolean
mask.

Returns

    
`supportarray`

    
An index that selects the retained features from a feature vector. If
`indices` is False, this is a boolean array of shape [# input features], in
which an element is True iff its corresponding feature is selected for
retention. If `indices` is True, this is an integer array of shape [# output
features] whose values are indices into the input feature vector.

`inverse_transform(X)` [source]

    
Reverse the transformation operation

Parameters

    
`Xarray of shape [n_samples, n_selected_features]`

    
The input samples.

Returns

    
`X_rarray of shape [n_samples, n_original_features]`

    
`X` with columns of zeros inserted where features would have been removed by
`transform`.

`set_params(**params)` [source]

    
Set the parameters of this estimator.

The method works on simple estimators as well as on nested objects (such as
`Pipeline`). The latter have parameters of the form `<component>__<parameter>`
so that it’s possible to update each component of a nested object.

Parameters

    
`**paramsdict`

    
Estimator parameters.

Returns

    
`selfestimator instance`

    
Estimator instance.

`transform(X)` [source]

    
Reduce X to the selected features.

Parameters

    
`Xarray of shape [n_samples, n_features]`

    
The input samples.

Returns

    
`X_rarray of shape [n_samples, n_selected_features]`

    
The input samples with only the selected features.

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-
learn.org/0.24/modules/generated/sklearn.feature_selection.GenericUnivariateSelect.html

