# sklearn.cluster.compute_optics_graph

`sklearn.cluster.compute_optics_graph(X, *, min_samples, max_eps, metric, p,
metric_params, algorithm, leaf_size, n_jobs)` [source]

    
Computes the OPTICS reachability graph.

Read more in the User Guide.

Parameters

    
`Xndarray of shape (n_samples, n_features), or (n_samples, n_samples) if
metric=’precomputed’.`

    
A feature array, or array of distances between samples if metric=’precomputed’

`min_samplesint > 1 or float between 0 and 1`

    
The number of samples in a neighborhood for a point to be considered as a core
point. Expressed as an absolute number or a fraction of the number of samples
(rounded to be at least 2).

`max_epsfloat, default=np.inf`

    
The maximum distance between two samples for one to be considered as in the
neighborhood of the other. Default value of `np.inf` will identify clusters
across all scales; reducing `max_eps` will result in shorter run times.

`metricstr or callable, default=’minkowski’`

    
Metric to use for distance computation. Any metric from scikit-learn or
scipy.spatial.distance can be used.

If metric is a callable function, it is called on each pair of instances
(rows) and the resulting value recorded. The callable should take two arrays
as input and return one value indicating the distance between them. This works
for Scipy’s metrics, but is less efficient than passing the metric name as a
string. If metric is “precomputed”, X is assumed to be a distance matrix and
must be square.

Valid values for metric are:

  * from scikit-learn: [‘cityblock’, ‘cosine’, ‘euclidean’, ‘l1’, ‘l2’, ‘manhattan’]
  * from scipy.spatial.distance: [‘braycurtis’, ‘canberra’, ‘chebyshev’, ‘correlation’, ‘dice’, ‘hamming’, ‘jaccard’, ‘kulsinski’, ‘mahalanobis’, ‘minkowski’, ‘rogerstanimoto’, ‘russellrao’, ‘seuclidean’, ‘sokalmichener’, ‘sokalsneath’, ‘sqeuclidean’, ‘yule’]

See the documentation for scipy.spatial.distance for details on these metrics.

`pint, default=2`

    
Parameter for the Minkowski metric from `pairwise_distances`. When p = 1, this
is equivalent to using manhattan_distance (l1), and euclidean_distance (l2)
for p = 2. For arbitrary p, minkowski_distance (l_p) is used.

`metric_paramsdict, default=None`

    
Additional keyword arguments for the metric function.

`algorithm{‘auto’, ‘ball_tree’, ‘kd_tree’, ‘brute’}, default=’auto’`

    
Algorithm used to compute the nearest neighbors:

  * ‘ball_tree’ will use `BallTree`
  * ‘kd_tree’ will use `KDTree`
  * ‘brute’ will use a brute-force search.
  * ‘auto’ will attempt to decide the most appropriate algorithm based on the values passed to `fit` method. (default)

Note: fitting on sparse input will override the setting of this parameter,
using brute force.

`leaf_sizeint, default=30`

    
Leaf size passed to `BallTree` or `KDTree`. This can affect the speed of the
construction and query, as well as the memory required to store the tree. The
optimal value depends on the nature of the problem.

`n_jobsint, default=None`

    
The number of parallel jobs to run for neighbors search. `None` means 1 unless
in a `joblib.parallel_backend` context. `-1` means using all processors. See
Glossary for more details.

Returns

    
`ordering_array of shape (n_samples,)`

    
The cluster ordered list of sample indices.

`core_distances_array of shape (n_samples,)`

    
Distance at which each sample becomes a core point, indexed by object order.
Points which will never be core have a distance of inf. Use
`clust.core_distances_[clust.ordering_]` to access in cluster order.

`reachability_array of shape (n_samples,)`

    
Reachability distances per sample, indexed by object order. Use
`clust.reachability_[clust.ordering_]` to access in cluster order.

`predecessor_array of shape (n_samples,)`

    
Point that a sample was reached from, indexed by object order. Seed points
have a predecessor of -1.

#### References

`1`

    
Ankerst, Mihael, Markus M. Breunig, Hans-Peter Kriegel, and Jörg Sander.
“OPTICS: ordering points to identify the clustering structure.” ACM SIGMOD
Record 28, no. 2 (1999): 49-60.

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-
learn.org/0.24/modules/generated/sklearn.cluster.compute_optics_graph.html

