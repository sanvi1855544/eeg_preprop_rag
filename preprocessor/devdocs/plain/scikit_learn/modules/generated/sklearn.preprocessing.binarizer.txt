# sklearn.preprocessing.Binarizer

`class sklearn.preprocessing.Binarizer(*, threshold=0.0, copy=True)` [source]

    
Binarize data (set feature values to 0 or 1) according to a threshold.

Values greater than the threshold map to 1, while values less than or equal to
the threshold map to 0. With the default threshold of 0, only positive values
map to 1.

Binarization is a common operation on text count data where the analyst can
decide to only consider the presence or absence of a feature rather than a
quantified number of occurrences for instance.

It can also be used as a pre-processing step for estimators that consider
boolean random variables (e.g. modelled using the Bernoulli distribution in a
Bayesian setting).

Read more in the User Guide.

Parameters

    
`thresholdfloat, default=0.0`

    
Feature values below or equal to this are replaced by 0, above it by 1.
Threshold may not be less than 0 for operations on sparse matrices.

`copybool, default=True`

    
set to False to perform inplace binarization and avoid a copy (if the input is
already a numpy array or a scipy.sparse CSR matrix).

See also

`binarize`

    
Equivalent function without the estimator API.

#### Notes

If the input is a sparse matrix, only the non-zero values are subject to
update by the Binarizer class.

This estimator is stateless (besides constructor parameters), the fit method
does nothing but is useful when used in a pipeline.

#### Examples

    
    >>> from sklearn.preprocessing import Binarizer
    >>> X = [[ 1., -1.,  2.],
    ...      [ 2.,  0.,  0.],
    ...      [ 0.,  1., -1.]]
    >>> transformer = Binarizer().fit(X)  # fit does nothing.
    >>> transformer
    Binarizer()
    >>> transformer.transform(X)
    array([[1., 0., 1.],
           [1., 0., 0.],
           [0., 1., 0.]])
    
#### Methods

`fit`(X[, y]) | Do nothing and return the estimator unchanged.  
---|---  
`fit_transform`(X[, y]) | Fit to data, then transform it.  
`get_params`([deep]) | Get parameters for this estimator.  
`set_params`(**params) | Set the parameters of this estimator.  
`transform`(X[, copy]) | Binarize each element of X.  
`fit(X, y=None)` [source]

    
Do nothing and return the estimator unchanged.

This method is just there to implement the usual API and hence work in
pipelines.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
The data.

`yNone`

    
Ignored.

Returns

    
`selfobject`

    
Fitted transformer.

`fit_transform(X, y=None, **fit_params)` [source]

    
Fit to data, then transform it.

Fits transformer to `X` and `y` with optional parameters `fit_params` and
returns a transformed version of `X`.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

    
Input samples.

`yarray-like of shape (n_samples,) or (n_samples, n_outputs), default=None`

    
Target values (None for unsupervised transformations).

`**fit_paramsdict`

    
Additional fit parameters.

Returns

    
`X_newndarray array of shape (n_samples, n_features_new)`

    
Transformed array.

`get_params(deep=True)` [source]

    
Get parameters for this estimator.

Parameters

    
`deepbool, default=True`

    
If True, will return the parameters for this estimator and contained
subobjects that are estimators.

Returns

    
`paramsdict`

    
Parameter names mapped to their values.

`set_params(**params)` [source]

    
Set the parameters of this estimator.

The method works on simple estimators as well as on nested objects (such as
`Pipeline`). The latter have parameters of the form `<component>__<parameter>`
so that it’s possible to update each component of a nested object.

Parameters

    
`**paramsdict`

    
Estimator parameters.

Returns

    
`selfestimator instance`

    
Estimator instance.

`transform(X, copy=None)` [source]

    
Binarize each element of X.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
The data to binarize, element by element. scipy.sparse matrices should be in
CSR format to avoid an un-necessary copy.

`copybool`

    
Copy the input X or not.

Returns

    
`X_tr{ndarray, sparse matrix} of shape (n_samples, n_features)`

    
Transformed array.

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-
learn.org/0.24/modules/generated/sklearn.preprocessing.Binarizer.html

