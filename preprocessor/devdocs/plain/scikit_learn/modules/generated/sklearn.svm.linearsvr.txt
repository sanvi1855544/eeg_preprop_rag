# sklearn.svm.LinearSVR

`class sklearn.svm.LinearSVR(*, epsilon=0.0, tol=0.0001, C=1.0,
loss='epsilon_insensitive', fit_intercept=True, intercept_scaling=1.0,
dual=True, verbose=0, random_state=None, max_iter=1000)` [source]

    
Linear Support Vector Regression.

Similar to SVR with parameter kernel=’linear’, but implemented in terms of
liblinear rather than libsvm, so it has more flexibility in the choice of
penalties and loss functions and should scale better to large numbers of
samples.

This class supports both dense and sparse input.

Read more in the User Guide.

New in version 0.16.

Parameters

    
`epsilonfloat, default=0.0`

    
Epsilon parameter in the epsilon-insensitive loss function. Note that the
value of this parameter depends on the scale of the target variable y. If
unsure, set `epsilon=0`.

`tolfloat, default=1e-4`

    
Tolerance for stopping criteria.

`Cfloat, default=1.0`

    
Regularization parameter. The strength of the regularization is inversely
proportional to C. Must be strictly positive.

`loss{‘epsilon_insensitive’, ‘squared_epsilon_insensitive’},
default=’epsilon_insensitive’`

    
Specifies the loss function. The epsilon-insensitive loss (standard SVR) is
the L1 loss, while the squared epsilon-insensitive loss
(‘squared_epsilon_insensitive’) is the L2 loss.

`fit_interceptbool, default=True`

    
Whether to calculate the intercept for this model. If set to false, no
intercept will be used in calculations (i.e. data is expected to be already
centered).

`intercept_scalingfloat, default=1.`

    
When self.fit_intercept is True, instance vector x becomes [x,
self.intercept_scaling], i.e. a “synthetic” feature with constant value equals
to intercept_scaling is appended to the instance vector. The intercept becomes
intercept_scaling * synthetic feature weight Note! the synthetic feature
weight is subject to l1/l2 regularization as all other features. To lessen the
effect of regularization on synthetic feature weight (and therefore on the
intercept) intercept_scaling has to be increased.

`dualbool, default=True`

    
Select the algorithm to either solve the dual or primal optimization problem.
Prefer dual=False when n_samples > n_features.

`verboseint, default=0`

    
Enable verbose output. Note that this setting takes advantage of a per-process
runtime setting in liblinear that, if enabled, may not work properly in a
multithreaded context.

`random_stateint, RandomState instance or None, default=None`

    
Controls the pseudo random number generation for shuffling the data. Pass an
int for reproducible output across multiple function calls. See Glossary.

`max_iterint, default=1000`

    
The maximum number of iterations to be run.

Attributes

    
`coef_ndarray of shape (n_features) if n_classes == 2 else (n_classes,
n_features)`

    
Weights assigned to the features (coefficients in the primal problem). This is
only available in the case of a linear kernel.

`coef_` is a readonly property derived from `raw_coef_` that follows the
internal memory layout of liblinear.

`intercept_ndarray of shape (1) if n_classes == 2 else (n_classes)`

    
Constants in decision function.

`n_iter_int`

    
Maximum number of iterations run across all classes.

See also

`LinearSVC`

    
Implementation of Support Vector Machine classifier using the same library as
this class (liblinear).

`SVR`

    
Implementation of Support Vector Machine regression using libsvm: the kernel
can be non-linear but its SMO algorithm does not scale to large number of
samples as LinearSVC does.

`sklearn.linear_model.SGDRegressor`

    
SGDRegressor can optimize the same cost function as LinearSVR by adjusting the
penalty and loss parameters. In addition it requires less memory, allows
incremental (online) learning, and implements various loss functions and
regularization regimes.

#### Examples

    
    >>> from sklearn.svm import LinearSVR
    >>> from sklearn.pipeline import make_pipeline
    >>> from sklearn.preprocessing import StandardScaler
    >>> from sklearn.datasets import make_regression
    >>> X, y = make_regression(n_features=4, random_state=0)
    >>> regr = make_pipeline(StandardScaler(),
    ...                      LinearSVR(random_state=0, tol=1e-5))
    >>> regr.fit(X, y)
    Pipeline(steps=[('standardscaler', StandardScaler()),
                    ('linearsvr', LinearSVR(random_state=0, tol=1e-05))])
    
    
    >>> print(regr.named_steps['linearsvr'].coef_)
    [18.582... 27.023... 44.357... 64.522...]
    >>> print(regr.named_steps['linearsvr'].intercept_)
    [-4...]
    >>> print(regr.predict([[0, 0, 0, 0]]))
    [-2.384...]
    
#### Methods

`fit`(X, y[, sample_weight]) | Fit the model according to the given training data.  
---|---  
`get_params`([deep]) | Get parameters for this estimator.  
`predict`(X) | Predict using the linear model.  
`score`(X, y[, sample_weight]) | Return the coefficient of determination \\(R^2\\) of the prediction.  
`set_params`(**params) | Set the parameters of this estimator.  
`fit(X, y, sample_weight=None)` [source]

    
Fit the model according to the given training data.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
Training vector, where n_samples in the number of samples and n_features is
the number of features.

`yarray-like of shape (n_samples,)`

    
Target vector relative to X

`sample_weightarray-like of shape (n_samples,), default=None`

    
Array of weights that are assigned to individual samples. If not provided,
then each sample is given unit weight.

New in version 0.18.

Returns

    
`selfobject`

    
An instance of the estimator.

`get_params(deep=True)` [source]

    
Get parameters for this estimator.

Parameters

    
`deepbool, default=True`

    
If True, will return the parameters for this estimator and contained
subobjects that are estimators.

Returns

    
`paramsdict`

    
Parameter names mapped to their values.

`predict(X)` [source]

    
Predict using the linear model.

Parameters

    
`Xarray-like or sparse matrix, shape (n_samples, n_features)`

    
Samples.

Returns

    
`Carray, shape (n_samples,)`

    
Returns predicted values.

`score(X, y, sample_weight=None)` [source]

    
Return the coefficient of determination \\(R^2\\) of the prediction.

The coefficient \\(R^2\\) is defined as \\((1 - \frac{u}{v})\\), where \\(u\\)
is the residual sum of squares `((y_true - y_pred) ** 2).sum()` and \\(v\\) is
the total sum of squares `((y_true - y_true.mean()) ** 2).sum()`. The best
possible score is 1.0 and it can be negative (because the model can be
arbitrarily worse). A constant model that always predicts the expected value
of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

    
Test samples. For some estimators this may be a precomputed kernel matrix or a
list of generic objects instead with shape `(n_samples, n_samples_fitted)`,
where `n_samples_fitted` is the number of samples used in the fitting for the
estimator.

`yarray-like of shape (n_samples,) or (n_samples, n_outputs)`

    
True values for `X`.

`sample_weightarray-like of shape (n_samples,), default=None`

    
Sample weights.

Returns

    
`scorefloat`

    
\\(R^2\\) of `self.predict(X)` wrt. `y`.

#### Notes

The \\(R^2\\) score used when calling `score` on a regressor uses
`multioutput='uniform_average'` from version 0.23 to keep consistent with
default value of `r2_score`. This influences the `score` method of all the
multioutput regressors (except for `MultiOutputRegressor`).

`set_params(**params)` [source]

    
Set the parameters of this estimator.

The method works on simple estimators as well as on nested objects (such as
`Pipeline`). The latter have parameters of the form `<component>__<parameter>`
so that it’s possible to update each component of a nested object.

Parameters

    
`**paramsdict`

    
Estimator parameters.

Returns

    
`selfestimator instance`

    
Estimator instance.

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-learn.org/0.24/modules/generated/sklearn.svm.LinearSVR.html

