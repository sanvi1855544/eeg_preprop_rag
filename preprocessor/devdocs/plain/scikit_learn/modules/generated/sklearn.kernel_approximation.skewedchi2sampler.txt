# sklearn.kernel_approximation.SkewedChi2Sampler

`class sklearn.kernel_approximation.SkewedChi2Sampler(*, skewedness=1.0,
n_components=100, random_state=None)` [source]

    
Approximates feature map of the “skewed chi-squared” kernel by Monte Carlo
approximation of its Fourier transform.

Read more in the User Guide.

Parameters

    
`skewednessfloat, default=1.0`

    
“skewedness” parameter of the kernel. Needs to be cross-validated.

`n_componentsint, default=100`

    
number of Monte Carlo samples per original feature. Equals the dimensionality
of the computed feature space.

`random_stateint, RandomState instance or None, default=None`

    
Pseudo-random number generator to control the generation of the random weights
and random offset when fitting the training data. Pass an int for reproducible
output across multiple function calls. See Glossary.

Attributes

    
`random_weights_ndarray of shape (n_features, n_components)`

    
Weight array, sampled from a secant hyperbolic distribution, which will be
used to linearly transform the log of the data.

`random_offset_ndarray of shape (n_features, n_components)`

    
Bias term, which will be added to the data. It is uniformly distributed
between 0 and 2*pi.

See also

`AdditiveChi2Sampler`

    
A different approach for approximating an additive variant of the chi squared
kernel.

`sklearn.metrics.pairwise.chi2_kernel`

    
The exact chi squared kernel.

#### References

See “Random Fourier Approximations for Skewed Multiplicative Histogram
Kernels” by Fuxin Li, Catalin Ionescu and Cristian Sminchisescu.

#### Examples

    
    >>> from sklearn.kernel_approximation import SkewedChi2Sampler
    >>> from sklearn.linear_model import SGDClassifier
    >>> X = [[0, 0], [1, 1], [1, 0], [0, 1]]
    >>> y = [0, 0, 1, 1]
    >>> chi2_feature = SkewedChi2Sampler(skewedness=.01,
    ...                                  n_components=10,
    ...                                  random_state=0)
    >>> X_features = chi2_feature.fit_transform(X, y)
    >>> clf = SGDClassifier(max_iter=10, tol=1e-3)
    >>> clf.fit(X_features, y)
    SGDClassifier(max_iter=10)
    >>> clf.score(X_features, y)
    1.0
    
#### Methods

`fit`(X[, y]) | Fit the model with X.  
---|---  
`fit_transform`(X[, y]) | Fit to data, then transform it.  
`get_params`([deep]) | Get parameters for this estimator.  
`set_params`(**params) | Set the parameters of this estimator.  
`transform`(X) | Apply the approximate feature map to X.  
`fit(X, y=None)` [source]

    
Fit the model with X.

Samples random projection according to n_features.

Parameters

    
`Xarray-like, shape (n_samples, n_features)`

    
Training data, where n_samples in the number of samples and n_features is the
number of features.

Returns

    
`selfobject`

    
Returns the transformer.

`fit_transform(X, y=None, **fit_params)` [source]

    
Fit to data, then transform it.

Fits transformer to `X` and `y` with optional parameters `fit_params` and
returns a transformed version of `X`.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

    
Input samples.

`yarray-like of shape (n_samples,) or (n_samples, n_outputs), default=None`

    
Target values (None for unsupervised transformations).

`**fit_paramsdict`

    
Additional fit parameters.

Returns

    
`X_newndarray array of shape (n_samples, n_features_new)`

    
Transformed array.

`get_params(deep=True)` [source]

    
Get parameters for this estimator.

Parameters

    
`deepbool, default=True`

    
If True, will return the parameters for this estimator and contained
subobjects that are estimators.

Returns

    
`paramsdict`

    
Parameter names mapped to their values.

`set_params(**params)` [source]

    
Set the parameters of this estimator.

The method works on simple estimators as well as on nested objects (such as
`Pipeline`). The latter have parameters of the form `<component>__<parameter>`
so that it’s possible to update each component of a nested object.

Parameters

    
`**paramsdict`

    
Estimator parameters.

Returns

    
`selfestimator instance`

    
Estimator instance.

`transform(X)` [source]

    
Apply the approximate feature map to X.

Parameters

    
`Xarray-like, shape (n_samples, n_features)`

    
New data, where n_samples in the number of samples and n_features is the
number of features. All values of X must be strictly greater than
“-skewedness”.

Returns

    
`X_newarray-like, shape (n_samples, n_components)`

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-
learn.org/0.24/modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.html

