# sklearn.ensemble.BaggingClassifier

`class sklearn.ensemble.BaggingClassifier(base_estimator=None,
n_estimators=10, *, max_samples=1.0, max_features=1.0, bootstrap=True,
bootstrap_features=False, oob_score=False, warm_start=False, n_jobs=None,
random_state=None, verbose=0)` [source]

    
A Bagging classifier.

A Bagging classifier is an ensemble meta-estimator that fits base classifiers
each on random subsets of the original dataset and then aggregate their
individual predictions (either by voting or by averaging) to form a final
prediction. Such a meta-estimator can typically be used as a way to reduce the
variance of a black-box estimator (e.g., a decision tree), by introducing
randomization into its construction procedure and then making an ensemble out
of it.

This algorithm encompasses several works from the literature. When random
subsets of the dataset are drawn as random subsets of the samples, then this
algorithm is known as Pasting [1]. If samples are drawn with replacement, then
the method is known as Bagging [2]. When random subsets of the dataset are
drawn as random subsets of the features, then the method is known as Random
Subspaces [3]. Finally, when base estimators are built on subsets of both
samples and features, then the method is known as Random Patches [4].

Read more in the User Guide.

New in version 0.15.

Parameters

    
`base_estimatorobject, default=None`

    
The base estimator to fit on random subsets of the dataset. If None, then the
base estimator is a `DecisionTreeClassifier`.

`n_estimatorsint, default=10`

    
The number of base estimators in the ensemble.

`max_samplesint or float, default=1.0`

    
The number of samples to draw from X to train each base estimator (with
replacement by default, see `bootstrap` for more details).

  * If int, then draw `max_samples` samples.
  * If float, then draw `max_samples * X.shape[0]` samples.

`max_featuresint or float, default=1.0`

    
The number of features to draw from X to train each base estimator ( without
replacement by default, see `bootstrap_features` for more details).

  * If int, then draw `max_features` features.
  * If float, then draw `max_features * X.shape[1]` features.

`bootstrapbool, default=True`

    
Whether samples are drawn with replacement. If False, sampling without
replacement is performed.

`bootstrap_featuresbool, default=False`

    
Whether features are drawn with replacement.

`oob_scorebool, default=False`

    
Whether to use out-of-bag samples to estimate the generalization error.

`warm_startbool, default=False`

    
When set to True, reuse the solution of the previous call to fit and add more
estimators to the ensemble, otherwise, just fit a whole new ensemble. See the
Glossary.

New in version 0.17: warm_start constructor parameter.

`n_jobsint, default=None`

    
The number of jobs to run in parallel for both `fit` and `predict`. `None`
means 1 unless in a `joblib.parallel_backend` context. `-1` means using all
processors. See Glossary for more details.

`random_stateint, RandomState instance or None, default=None`

    
Controls the random resampling of the original dataset (sample wise and
feature wise). If the base estimator accepts a `random_state` attribute, a
different seed is generated for each instance in the ensemble. Pass an int for
reproducible output across multiple function calls. See Glossary.

`verboseint, default=0`

    
Controls the verbosity when fitting and predicting.

Attributes

    
`base_estimator_estimator`

    
The base estimator from which the ensemble is grown.

`n_features_int`

    
The number of features when `fit` is performed.

`estimators_list of estimators`

    
The collection of fitted base estimators.

`estimators_samples_list of arrays`

    
The subset of drawn samples for each base estimator.

`estimators_features_list of arrays`

    
The subset of drawn features for each base estimator.

`classes_ndarray of shape (n_classes,)`

    
The classes labels.

`n_classes_int or list`

    
The number of classes.

`oob_score_float`

    
Score of the training dataset obtained using an out-of-bag estimate. This
attribute exists only when `oob_score` is True.

`oob_decision_function_ndarray of shape (n_samples, n_classes)`

    
Decision function computed with out-of-bag estimate on the training set. If
n_estimators is small it might be possible that a data point was never left
out during the bootstrap. In this case, `oob_decision_function_` might contain
NaN. This attribute exists only when `oob_score` is True.

#### References

`1`

    
L. Breiman, “Pasting small votes for classification in large databases and on-
line”, Machine Learning, 36(1), 85-103, 1999.

`2`

    
L. Breiman, “Bagging predictors”, Machine Learning, 24(2), 123-140, 1996.

`3`

    
T. Ho, “The random subspace method for constructing decision forests”, Pattern
Analysis and Machine Intelligence, 20(8), 832-844, 1998.

`4`

    
G. Louppe and P. Geurts, “Ensembles on Random Patches”, Machine Learning and
Knowledge Discovery in Databases, 346-361, 2012.

#### Examples

    
    >>> from sklearn.svm import SVC
    >>> from sklearn.ensemble import BaggingClassifier
    >>> from sklearn.datasets import make_classification
    >>> X, y = make_classification(n_samples=100, n_features=4,
    ...                            n_informative=2, n_redundant=0,
    ...                            random_state=0, shuffle=False)
    >>> clf = BaggingClassifier(base_estimator=SVC(),
    ...                         n_estimators=10, random_state=0).fit(X, y)
    >>> clf.predict([[0, 0, 0, 0]])
    array([1])
    
#### Methods

`decision_function`(X) | Average of the decision functions of the base classifiers.  
---|---  
`fit`(X, y[, sample_weight]) | Build a Bagging ensemble of estimators from the training  
`get_params`([deep]) | Get parameters for this estimator.  
`predict`(X) | Predict class for X.  
`predict_log_proba`(X) | Predict class log-probabilities for X.  
`predict_proba`(X) | Predict class probabilities for X.  
`score`(X, y[, sample_weight]) | Return the mean accuracy on the given test data and labels.  
`set_params`(**params) | Set the parameters of this estimator.  
`decision_function(X)` [source]

    
Average of the decision functions of the base classifiers.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
The training input samples. Sparse matrices are accepted only if they are
supported by the base estimator.

Returns

    
`scorendarray of shape (n_samples, k)`

    
The decision function of the input samples. The columns correspond to the
classes in sorted order, as they appear in the attribute `classes_`.
Regression and binary classification are special cases with `k == 1`,
otherwise `k==n_classes`.

`property estimators_samples_`

    
The subset of drawn samples for each base estimator.

Returns a dynamically generated list of indices identifying the samples used
for fitting each member of the ensemble, i.e., the in-bag samples.

Note: the list is re-created at each call to the property in order to reduce
the object memory footprint by not storing the sampling data. Thus fetching
the property may be slower than expected.

`fit(X, y, sample_weight=None)` [source]

    
Build a Bagging ensemble of estimators from the training

    
set (X, y).

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
The training input samples. Sparse matrices are accepted only if they are
supported by the base estimator.

`yarray-like of shape (n_samples,)`

    
The target values (class labels in classification, real numbers in
regression).

`sample_weightarray-like of shape (n_samples,), default=None`

    
Sample weights. If None, then samples are equally weighted. Note that this is
supported only if the base estimator supports sample weighting.

Returns

    
`selfobject`

`get_params(deep=True)` [source]

    
Get parameters for this estimator.

Parameters

    
`deepbool, default=True`

    
If True, will return the parameters for this estimator and contained
subobjects that are estimators.

Returns

    
`paramsdict`

    
Parameter names mapped to their values.

`predict(X)` [source]

    
Predict class for X.

The predicted class of an input sample is computed as the class with the
highest mean predicted probability. If base estimators do not implement a
`predict_proba` method, then it resorts to voting.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
The training input samples. Sparse matrices are accepted only if they are
supported by the base estimator.

Returns

    
`yndarray of shape (n_samples,)`

    
The predicted classes.

`predict_log_proba(X)` [source]

    
Predict class log-probabilities for X.

The predicted class log-probabilities of an input sample is computed as the
log of the mean predicted class probabilities of the base estimators in the
ensemble.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
The training input samples. Sparse matrices are accepted only if they are
supported by the base estimator.

Returns

    
`pndarray of shape (n_samples, n_classes)`

    
The class log-probabilities of the input samples. The order of the classes
corresponds to that in the attribute classes_.

`predict_proba(X)` [source]

    
Predict class probabilities for X.

The predicted class probabilities of an input sample is computed as the mean
predicted class probabilities of the base estimators in the ensemble. If base
estimators do not implement a `predict_proba` method, then it resorts to
voting and the predicted class probabilities of an input sample represents the
proportion of estimators predicting each class.

Parameters

    
`X{array-like, sparse matrix} of shape (n_samples, n_features)`

    
The training input samples. Sparse matrices are accepted only if they are
supported by the base estimator.

Returns

    
`pndarray of shape (n_samples, n_classes)`

    
The class probabilities of the input samples. The order of the classes
corresponds to that in the attribute classes_.

`score(X, y, sample_weight=None)` [source]

    
Return the mean accuracy on the given test data and labels.

In multi-label classification, this is the subset accuracy which is a harsh
metric since you require for each sample that each label set be correctly
predicted.

Parameters

    
`Xarray-like of shape (n_samples, n_features)`

    
Test samples.

`yarray-like of shape (n_samples,) or (n_samples, n_outputs)`

    
True labels for `X`.

`sample_weightarray-like of shape (n_samples,), default=None`

    
Sample weights.

Returns

    
`scorefloat`

    
Mean accuracy of `self.predict(X)` wrt. `y`.

`set_params(**params)` [source]

    
Set the parameters of this estimator.

The method works on simple estimators as well as on nested objects (such as
`Pipeline`). The latter have parameters of the form `<component>__<parameter>`
so that it’s possible to update each component of a nested object.

Parameters

    
`**paramsdict`

    
Estimator parameters.

Returns

    
`selfestimator instance`

    
Estimator instance.

© 2007–2020 The scikit-learn developers  
Licensed under the 3-clause BSD License.  
https://scikit-
learn.org/0.24/modules/generated/sklearn.ensemble.BaggingClassifier.html

