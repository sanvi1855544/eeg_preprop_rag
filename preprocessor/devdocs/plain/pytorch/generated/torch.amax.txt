# torch.amax

`torch.amax(input, dim, keepdim=False, *, out=None) → Tensor`

    
Returns the maximum value of each slice of the `input` tensor in the given
dimension(s) `dim`.

Note

`The difference between max/min and amax/amin is:`

    
  * `amax`/`amin` supports reducing on multiple dimensions,
  * `amax`/`amin` does not return indices,
  * `amax`/`amin` evenly distributes gradient between equal values, while `max(dim)`/`min(dim)` propagates gradient only to a single index in the source tensor.

If `keepdim is ``True``, the output tensors are of the same size as `input`
except in the dimension(s) `dim` where they are of size 1. Otherwise, `dim`s
are squeezed (see :func:`torch.squeeze`), resulting in the output tensors
having fewer dimension than `input`.

Parameters

    
  * input (Tensor) – the input tensor.
  * dim (int or tuple of python:ints) – the dimension or dimensions to reduce.
  * keepdim (bool) – whether the output tensor has `dim` retained or not.

Keyword Arguments

    
out (Tensor, optional) – the output tensor.

Example:

    
    >>> a = torch.randn(4, 4)
    >>> a
    tensor([[ 0.8177,  1.4878, -0.2491,  0.9130],
            [-0.7158,  1.1775,  2.0992,  0.4817],
            [-0.0053,  0.0164, -1.3738, -0.0507],
            [ 1.9700,  1.1106, -1.0318, -1.0816]])
    >>> torch.amax(a, 1)
    tensor([1.4878, 2.0992, 0.0164, 1.9700])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.amax.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

