# AvgPool2d

`class torch.nn.AvgPool2d(kernel_size, stride=None, padding=0,
ceil_mode=False, count_include_pad=True, divisor_override=None)` [source]

    
Applies a 2D average pooling over an input signal composed of several input
planes.

In the simplest case, the output value of the layer with input size
(N,C,H,W)(N, C, H, W) , output (N,C,Hout,Wout)(N, C, H_{out}, W_{out}) and
`kernel_size` (kH,kW)(kH, kW) can be precisely described as:

out(Ni,Cj,h,w)=1kH∗kW∑m=0kH−1∑n=0kW−1input(Ni,Cj,stride[0]×h+m,stride[1]×w+n)out(N_i,
C_j, h, w) = \frac{1}{kH * kW} \sum_{m=0}^{kH-1} \sum_{n=0}^{kW-1} input(N_i,
C_j, stride[0] \times h + m, stride[1] \times w + n)

If `padding` is non-zero, then the input is implicitly zero-padded on both
sides for `padding` number of points.

Note

When ceil_mode=True, sliding windows are allowed to go off-bounds if they
start within the left padding or the input. Sliding windows that would start
in the right padded region are ignored.

The parameters `kernel_size`, `stride`, `padding` can either be:

  * a single `int` – in which case the same value is used for the height and width dimension
  * a `tuple` of two ints – in which case, the first `int` is used for the height dimension, and the second `int` for the width dimension

Parameters

    
  * kernel_size – the size of the window
  * stride – the stride of the window. Default value is `kernel_size`
  * padding – implicit zero padding to be added on both sides
  * ceil_mode – when True, will use `ceil` instead of `floor` to compute the output shape
  * count_include_pad – when True, will include the zero-padding in the averaging calculation
  * divisor_override – if specified, it will be used as divisor, otherwise `kernel_size` will be used

Shape:

    
  * Input: (N,C,Hin,Win)(N, C, H_{in}, W_{in})
  * Output: (N,C,Hout,Wout)(N, C, H_{out}, W_{out}) , where
Hout=⌊Hin+2×padding[0]−kernel_size[0]stride[0]+1⌋H_{out} =
\left\lfloor\frac{H_{in} + 2 \times \text{padding}[0] -
\text{kernel\\_size}[0]}{\text{stride}[0]} + 1\right\rfloor

Wout=⌊Win+2×padding[1]−kernel_size[1]stride[1]+1⌋W_{out} =
\left\lfloor\frac{W_{in} + 2 \times \text{padding}[1] -
\text{kernel\\_size}[1]}{\text{stride}[1]} + 1\right\rfloor

Examples:

    
    >>> # pool of square window of size=3, stride=2
    >>> m = nn.AvgPool2d(3, stride=2)
    >>> # pool of non-square window
    >>> m = nn.AvgPool2d((3, 2), stride=(2, 1))
    >>> input = torch.randn(20, 16, 50, 32)
    >>> output = m(input)
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.nn.AvgPool2d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

