# torch.var_mean

`torch.var_mean(input, unbiased=True) -> (Tensor, Tensor)`

    
Returns the variance and mean of all elements in the `input` tensor.

If `unbiased` is `False`, then the variance will be calculated via the biased
estimator. Otherwise, Bessel’s correction will be used.

Parameters

    
  * input (Tensor) – the input tensor.
  * unbiased (bool) – whether to use the unbiased estimation or not

Example:

    
    >>> a = torch.randn(1, 3)
    >>> a
    tensor([[0.0146, 0.4258, 0.2211]])
    >>> torch.var_mean(a)
    (tensor(0.0423), tensor(0.2205))
    
`torch.var_mean(input, dim, keepdim=False, unbiased=True) -> (Tensor, Tensor)`

Returns the variance and mean of each row of the `input` tensor in the given
dimension `dim`.

If `keepdim` is `True`, the output tensor is of the same size as `input`
except in the dimension(s) `dim` where it is of size 1. Otherwise, `dim` is
squeezed (see `torch.squeeze()`), resulting in the output tensor having 1 (or
`len(dim)`) fewer dimension(s).

If `unbiased` is `False`, then the variance will be calculated via the biased
estimator. Otherwise, Bessel’s correction will be used.

Parameters

    
  * input (Tensor) – the input tensor.
  * dim (int or tuple of python:ints) – the dimension or dimensions to reduce.
  * keepdim (bool) – whether the output tensor has `dim` retained or not.
  * unbiased (bool) – whether to use the unbiased estimation or not

Example:

    
    >>> a = torch.randn(4, 4)
    >>> a
    tensor([[-1.5650,  2.0415, -0.1024, -0.5790],
            [ 0.2325, -2.6145, -1.6428, -0.3537],
            [-0.2159, -1.1069,  1.2882, -1.3265],
            [-0.6706, -1.5893,  0.6827,  1.6727]])
    >>> torch.var_mean(a, 1)
    (tensor([2.3174, 1.6403, 1.4092, 2.0791]), tensor([-0.0512, -1.0946, -0.3403,  0.0239]))
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.var_mean.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

