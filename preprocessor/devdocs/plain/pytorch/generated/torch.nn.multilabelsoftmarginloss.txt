# MultiLabelSoftMarginLoss

`class torch.nn.MultiLabelSoftMarginLoss(weight=None, size_average=None,
reduce=None, reduction='mean')` [source]

    
Creates a criterion that optimizes a multi-label one-versus-all loss based on
max-entropy, between input xx and target yy of size (N,C)(N, C) . For each
sample in the minibatch:

loss(x,y)=−1C∗∑iy[i]∗log⁡((1+exp⁡(−x[i]))−1)+(1−y[i])∗log⁡(exp⁡(−x[i])(1+exp⁡(−x[i])))loss(x,
y) = - \frac{1}{C} * \sum_i y[i] * \log((1 + \exp(-x[i]))^{-1}) + (1-y[i]) *
\log\left(\frac{\exp(-x[i])}{(1 + \exp(-x[i]))}\right)

where i∈{0,⋯,x.nElement()−1}i \in \left\\{0, \; \cdots , \;
\text{x.nElement}() - 1\right\\} , y[i]∈{0,1}y[i] \in \left\\{0, \; 1\right\\}
.

Parameters

    
  * weight (Tensor, optional) – a manual rescaling weight given to each class. If given, it has to be a Tensor of size `C`. Otherwise, it is treated as if having all ones.
  * size_average (bool, optional) – Deprecated (see `reduction`). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field `size_average` is set to `False`, the losses are instead summed for each minibatch. Ignored when `reduce` is `False`. Default: `True`
  * reduce (bool, optional) – Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`
  * reduction (string, optional) – Specifies the reduction to apply to the output: `'none'` | `'mean'` | `'sum'`. `'none'`: no reduction will be applied, `'mean'`: the sum of the output will be divided by the number of elements in the output, `'sum'`: the output will be summed. Note: `size_average` and `reduce` are in the process of being deprecated, and in the meantime, specifying either of those two args will override `reduction`. Default: `'mean'`

Shape:

    
  * Input: (N,C)(N, C) where `N` is the batch size and `C` is the number of classes.
  * Target: (N,C)(N, C) , label targets padded by -1 ensuring same shape as the input.
  * Output: scalar. If `reduction` is `'none'`, then (N)(N) .

© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.nn.MultiLabelSoftMarginLoss.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

