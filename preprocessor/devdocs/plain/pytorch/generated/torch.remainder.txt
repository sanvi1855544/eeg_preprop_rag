# torch.remainder

`torch.remainder(input, other, *, out=None) → Tensor`

    
Computes the element-wise remainder of division.

The dividend and divisor may contain both for integer and floating point
numbers. The remainder has the same sign as the divisor `other`.

Supports broadcasting to a common shape, type promotion, and integer and float
inputs.

Note

Complex inputs are not supported. In some cases, it is not mathematically
possible to satisfy the definition of a modulo operation with complex numbers.
See `torch.fmod()` for how division by zero is handled.

Parameters

    
  * input (Tensor) – the dividend
  * other (Tensor or Scalar) – the divisor

Keyword Arguments

    
out (Tensor, optional) – the output tensor.

Example:

    
    >>> torch.remainder(torch.tensor([-3., -2, -1, 1, 2, 3]), 2)
    tensor([ 1.,  0.,  1.,  1.,  0.,  1.])
    >>> torch.remainder(torch.tensor([1, 2, 3, 4, 5]), 1.5)
    tensor([ 1.0000,  0.5000,  0.0000,  1.0000,  0.5000])
    
See also

`torch.fmod()`, which computes the element-wise remainder of division
equivalently to the C library function `fmod()`.

© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.remainder.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

