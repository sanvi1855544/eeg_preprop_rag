# KLDivLoss

`class torch.nn.KLDivLoss(size_average=None, reduce=None, reduction='mean',
log_target=False)` [source]

    
The Kullback-Leibler divergence loss measure

Kullback-Leibler divergence is a useful distance measure for continuous
distributions and is often useful when performing direct regression over the
space of (discretely sampled) continuous output distributions.

As with `NLLLoss`, the `input` given is expected to contain log-probabilities
and is not restricted to a 2D Tensor. The targets are interpreted as
probabilities by default, but could be considered as log-probabilities with
`log_target` set to `True`.

This criterion expects a `target` `Tensor` of the same size as the `input`
`Tensor`.

The unreduced (i.e. with `reduction` set to `'none'`) loss can be described
as:

l(x,y)=L={l1,…,lN},ln=yn⋅(log⁡yn−xn)l(x,y) = L = \\{ l_1,\dots,l_N \\}, \quad
l_n = y_n \cdot \left( \log y_n - x_n \right)

where the index NN spans all dimensions of `input` and LL has the same shape
as `input`. If `reduction` is not `'none'` (default `'mean'`), then:

ℓ(x,y)={mean⁡(L),if reduction=‘mean’;sum⁡(L),if reduction=‘sum’.\ell(x, y) =
\begin{cases} \operatorname{mean}(L), & \text{if reduction} = \text{`mean';}
\\\ \operatorname{sum}(L), & \text{if reduction} = \text{`sum'.} \end{cases}

In default `reduction` mode `'mean'`, the losses are averaged for each
minibatch over observations as well as over dimensions. `'batchmean'` mode
gives the correct KL divergence where losses are averaged over batch dimension
only. `'mean'` mode’s behavior will be changed to the same as `'batchmean'` in
the next major release.

Parameters

    
  * size_average (bool, optional) – Deprecated (see `reduction`). By default, the losses are averaged over each loss element in the batch. Note that for some losses, there are multiple elements per sample. If the field `size_average` is set to `False`, the losses are instead summed for each minibatch. Ignored when `reduce` is `False`. Default: `True`
  * reduce (bool, optional) – Deprecated (see `reduction`). By default, the losses are averaged or summed over observations for each minibatch depending on `size_average`. When `reduce` is `False`, returns a loss per batch element instead and ignores `size_average`. Default: `True`
  * reduction (string, optional) – Specifies the reduction to apply to the output: `'none'` | `'batchmean'` | `'sum'` | `'mean'`. `'none'`: no reduction will be applied. `'batchmean'`: the sum of the output will be divided by batchsize. `'sum'`: the output will be summed. `'mean'`: the output will be divided by the number of elements in the output. Default: `'mean'`
  * log_target (bool, optional) – Specifies whether `target` is passed in the log space. Default: `False`

Note

`size_average` and `reduce` are in the process of being deprecated, and in the
meantime, specifying either of those two args will override `reduction`.

Note

`reduction` = `'mean'` doesn’t return the true kl divergence value, please use
`reduction` = `'batchmean'` which aligns with KL math definition. In the next
major release, `'mean'` will be changed to be the same as `'batchmean'`.

Shape:

    
  * Input: (N,∗)(N, *) where ∗* means, any number of additional dimensions
  * Target: (N,∗)(N, *) , same shape as the input
  * Output: scalar by default. If :attr:`reduction` is `'none'`, then (N,∗)(N, *) , the same shape as the input

© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.nn.KLDivLoss.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

