# PixelShuffle

`class torch.nn.PixelShuffle(upscale_factor)` [source]

    
Rearranges elements in a tensor of shape (∗,C×r2,H,W)(*, C \times r^2, H, W)
to a tensor of shape (∗,C,H×r,W×r)(*, C, H \times r, W \times r) , where r is
an upscale factor.

This is useful for implementing efficient sub-pixel convolution with a stride
of 1/r1/r .

See the paper: Real-Time Single Image and Video Super-Resolution Using an
Efficient Sub-Pixel Convolutional Neural Network by Shi et. al (2016) for more
details.

Parameters

    
upscale_factor (int) – factor to increase spatial resolution by

Shape:

    
  * Input: (∗,Cin,Hin,Win)(*, C_{in}, H_{in}, W_{in}) , where * is zero or more batch dimensions
  * Output: (∗,Cout,Hout,Wout)(*, C_{out}, H_{out}, W_{out}) , where

Cout=Cin÷upscale_factor2C_{out} = C_{in} \div \text{upscale\\_factor}^2

Hout=Hin×upscale_factorH_{out} = H_{in} \times \text{upscale\\_factor}

Wout=Win×upscale_factorW_{out} = W_{in} \times \text{upscale\\_factor}

Examples:

    
    >>> pixel_shuffle = nn.PixelShuffle(3)
    >>> input = torch.randn(1, 9, 4, 4)
    >>> output = pixel_shuffle(input)
    >>> print(output.size())
    torch.Size([1, 1, 12, 12])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.nn.PixelShuffle.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

