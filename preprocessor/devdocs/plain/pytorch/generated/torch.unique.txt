# torch.unique

`torch.unique(*args, **kwargs)`

    
Returns the unique elements of the input tensor.

Note

This function is different from `torch.unique_consecutive()` in the sense that
this function also eliminates non-consecutive duplicate values.

Note

Currently in the CUDA implementation and the CPU implementation when dim is
specified, `torch.unique` always sort the tensor at the beginning regardless
of the `sort` argument. Sorting could be slow, so if your input tensor is
already sorted, it is recommended to use `torch.unique_consecutive()` which
avoids the sorting.

Parameters

    
  * input (Tensor) – the input tensor
  * sorted (bool) – Whether to sort the unique elements in ascending order before returning as output.
  * return_inverse (bool) – Whether to also return the indices for where elements in the original input ended up in the returned unique list.
  * return_counts (bool) – Whether to also return the counts for each unique element.
  * dim (int) – the dimension to apply unique. If `None`, the unique of the flattened input is returned. default: `None`

Returns

    
A tensor or a tuple of tensors containing

  * output (Tensor): the output list of unique scalar elements.
  * inverse_indices (Tensor): (optional) if `return_inverse` is True, there will be an additional returned tensor (same shape as input) representing the indices for where elements in the original input map to in the output; otherwise, this function will only return a single tensor.
  * counts (Tensor): (optional) if `return_counts` is True, there will be an additional returned tensor (same shape as output or output.size(dim), if dim was specified) representing the number of occurrences for each unique value or tensor.

Return type

    
(Tensor, Tensor (optional), Tensor (optional))

Example:

    
    >>> output = torch.unique(torch.tensor([1, 3, 2, 3], dtype=torch.long))
    >>> output
    tensor([ 2,  3,  1])
    
    >>> output, inverse_indices = torch.unique(
    ...     torch.tensor([1, 3, 2, 3], dtype=torch.long), sorted=True, return_inverse=True)
    >>> output
    tensor([ 1,  2,  3])
    >>> inverse_indices
    tensor([ 0,  2,  1,  2])
    
    >>> output, inverse_indices = torch.unique(
    ...     torch.tensor([[1, 3], [2, 3]], dtype=torch.long), sorted=True, return_inverse=True)
    >>> output
    tensor([ 1,  2,  3])
    >>> inverse_indices
    tensor([[ 0,  2],
            [ 1,  2]])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.unique.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

