# torch.addcmul

`torch.addcmul(input, tensor1, tensor2, *, value=1, out=None) → Tensor`

    
Performs the element-wise multiplication of `tensor1` by `tensor2`, multiply
the result by the scalar `value` and add it to `input`.

outi=inputi+value×tensor1i×tensor2i\text{out}_i = \text{input}_i +
\text{value} \times \text{tensor1}_i \times \text{tensor2}_i

The shapes of `tensor`, `tensor1`, and `tensor2` must be broadcastable.

For inputs of type `FloatTensor` or `DoubleTensor`, `value` must be a real
number, otherwise an integer.

Parameters

    
  * input (Tensor) – the tensor to be added
  * tensor1 (Tensor) – the tensor to be multiplied
  * tensor2 (Tensor) – the tensor to be multiplied

Keyword Arguments

    
  * value (Number, optional) – multiplier for tensor1.∗tensor2tensor1 .* tensor2
  * out (Tensor, optional) – the output tensor.

Example:

    
    >>> t = torch.randn(1, 3)
    >>> t1 = torch.randn(3, 1)
    >>> t2 = torch.randn(1, 3)
    >>> torch.addcmul(t, t1, t2, value=0.1)
    tensor([[-0.8635, -0.6391,  1.6174],
            [-0.7617, -0.5879,  1.7388],
            [-0.8353, -0.6249,  1.6511]])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.addcmul.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

