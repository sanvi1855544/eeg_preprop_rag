# torch.std

`torch.std(input, unbiased=True) → Tensor`

    
Returns the standard-deviation of all elements in the `input` tensor.

If `unbiased` is `False`, then the standard-deviation will be calculated via
the biased estimator. Otherwise, Bessel’s correction will be used.

Parameters

    
  * input (Tensor) – the input tensor.
  * unbiased (bool) – whether to use the unbiased estimation or not

Example:

    
    >>> a = torch.randn(1, 3)
    >>> a
    tensor([[-0.8166, -1.3802, -0.3560]])
    >>> torch.std(a)
    tensor(0.5130)
    
`torch.std(input, dim, unbiased=True, keepdim=False, *, out=None) → Tensor`

Returns the standard-deviation of each row of the `input` tensor in the
dimension `dim`. If `dim` is a list of dimensions, reduce over all of them.

If `keepdim` is `True`, the output tensor is of the same size as `input`
except in the dimension(s) `dim` where it is of size 1. Otherwise, `dim` is
squeezed (see `torch.squeeze()`), resulting in the output tensor having 1 (or
`len(dim)`) fewer dimension(s).

If `unbiased` is `False`, then the standard-deviation will be calculated via
the biased estimator. Otherwise, Bessel’s correction will be used.

Parameters

    
  * input (Tensor) – the input tensor.
  * dim (int or tuple of python:ints) – the dimension or dimensions to reduce.
  * unbiased (bool) – whether to use the unbiased estimation or not
  * keepdim (bool) – whether the output tensor has `dim` retained or not.

Keyword Arguments

    
out (Tensor, optional) – the output tensor.

Example:

    
    >>> a = torch.randn(4, 4)
    >>> a
    tensor([[ 0.2035,  1.2959,  1.8101, -0.4644],
            [ 1.5027, -0.3270,  0.5905,  0.6538],
            [-1.5745,  1.3330, -0.5596, -0.6548],
            [ 0.1264, -0.5080,  1.6420,  0.1992]])
    >>> torch.std(a, dim=1)
    tensor([ 1.0311,  0.7477,  1.2204,  0.9087])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.std.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

