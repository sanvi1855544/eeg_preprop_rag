# torch.std_mean

`torch.std_mean(input, unbiased=True) -> (Tensor, Tensor)`

    
Returns the standard-deviation and mean of all elements in the `input` tensor.

If `unbiased` is `False`, then the standard-deviation will be calculated via
the biased estimator. Otherwise, Bessel’s correction will be used.

Parameters

    
  * input (Tensor) – the input tensor.
  * unbiased (bool) – whether to use the unbiased estimation or not

Example:

    
    >>> a = torch.randn(1, 3)
    >>> a
    tensor([[0.3364, 0.3591, 0.9462]])
    >>> torch.std_mean(a)
    (tensor(0.3457), tensor(0.5472))
    
`torch.std_mean(input, dim, unbiased=True, keepdim=False) -> (Tensor, Tensor)`

Returns the standard-deviation and mean of each row of the `input` tensor in
the dimension `dim`. If `dim` is a list of dimensions, reduce over all of
them.

If `keepdim` is `True`, the output tensor is of the same size as `input`
except in the dimension(s) `dim` where it is of size 1. Otherwise, `dim` is
squeezed (see `torch.squeeze()`), resulting in the output tensor having 1 (or
`len(dim)`) fewer dimension(s).

If `unbiased` is `False`, then the standard-deviation will be calculated via
the biased estimator. Otherwise, Bessel’s correction will be used.

Parameters

    
  * input (Tensor) – the input tensor.
  * dim (int or tuple of python:ints) – the dimension or dimensions to reduce.
  * unbiased (bool) – whether to use the unbiased estimation or not
  * keepdim (bool) – whether the output tensor has `dim` retained or not.

Example:

    
    >>> a = torch.randn(4, 4)
    >>> a
    tensor([[ 0.5648, -0.5984, -1.2676, -1.4471],
            [ 0.9267,  1.0612,  1.1050, -0.6014],
            [ 0.0154,  1.9301,  0.0125, -1.0904],
            [-1.9711, -0.7748, -1.3840,  0.5067]])
    >>> torch.std_mean(a, 1)
    (tensor([0.9110, 0.8197, 1.2552, 1.0608]), tensor([-0.6871,  0.6229,  0.2169, -0.9058]))
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.std_mean.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

