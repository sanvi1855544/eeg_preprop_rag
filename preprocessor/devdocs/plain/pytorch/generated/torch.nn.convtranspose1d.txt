# ConvTranspose1d

`class torch.nn.ConvTranspose1d(in_channels, out_channels, kernel_size,
stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1,
padding_mode='zeros')` [source]

    
Applies a 1D transposed convolution operator over an input image composed of
several input planes.

This module can be seen as the gradient of Conv1d with respect to its input.
It is also known as a fractionally-strided convolution or a deconvolution
(although it is not an actual deconvolution operation).

This module supports TensorFloat32.

  * `stride` controls the stride for the cross-correlation.
  * `padding` controls the amount of implicit zero padding on both sides for `dilation * (kernel_size - 1) - padding` number of points. See note below for details.
  * `output_padding` controls the additional size added to one side of the output shape. See note below for details.
  * `dilation` controls the spacing between the kernel points; also known as the à trous algorithm. It is harder to describe, but this link has a nice visualization of what `dilation` does.
  * `groups` controls the connections between inputs and outputs. `in_channels` and `out_channels` must both be divisible by `groups`. For example,
    * At groups=1, all inputs are convolved to all outputs.
    * At groups=2, the operation becomes equivalent to having two conv layers side by side, each seeing half the input channels and producing half the output channels, and both subsequently concatenated.
    * At groups= `in_channels`, each input channel is convolved with its own set of filters (of size out_channelsin_channels\frac{\text{out\\_channels}}{\text{in\\_channels}} ).

Note

The `padding` argument effectively adds `dilation * (kernel_size - 1) -
padding` amount of zero padding to both sizes of the input. This is set so
that when a `Conv1d` and a `ConvTranspose1d` are initialized with same
parameters, they are inverses of each other in regard to the input and output
shapes. However, when `stride > 1`, `Conv1d` maps multiple input shapes to the
same output shape. `output_padding` is provided to resolve this ambiguity by
effectively increasing the calculated output shape on one side. Note that
`output_padding` is only used to find output shape, but does not actually add
zero-padding to output.

Note

In some circumstances when using the CUDA backend with CuDNN, this operator
may select a nondeterministic algorithm to increase performance. If this is
undesirable, you can try to make the operation deterministic (potentially at a
performance cost) by setting `torch.backends.cudnn.deterministic = True`.
Please see the notes on Reproducibility for background.

Parameters

    
  * in_channels (int) – Number of channels in the input image
  * out_channels (int) – Number of channels produced by the convolution
  * kernel_size (int or tuple) – Size of the convolving kernel
  * stride (int or tuple, optional) – Stride of the convolution. Default: 1
  * padding (int or tuple, optional) – `dilation * (kernel_size - 1) - padding` zero-padding will be added to both sides of the input. Default: 0
  * output_padding (int or tuple, optional) – Additional size added to one side of the output shape. Default: 0
  * groups (int, optional) – Number of blocked connections from input channels to output channels. Default: 1
  * bias (bool, optional) – If `True`, adds a learnable bias to the output. Default: `True`
  * dilation (int or tuple, optional) – Spacing between kernel elements. Default: 1

Shape:

    
  * Input: (N,Cin,Lin)(N, C_{in}, L_{in})
  * Output: (N,Cout,Lout)(N, C_{out}, L_{out}) where
Lout=(Lin−1)×stride−2×padding+dilation×(kernel_size−1)+output_padding+1L_{out}
= (L_{in} - 1) \times \text{stride} - 2 \times \text{padding} +
\text{dilation} \times (\text{kernel\\_size} - 1) + \text{output\\_padding} +
1

Variables

    
  * ~ConvTranspose1d.weight (Tensor) – the learnable weights of the module of shape (in_channels,out_channelsgroups,(\text{in\\_channels}, \frac{\text{out\\_channels}}{\text{groups}}, kernel_size)\text{kernel\\_size}) . The values of these weights are sampled from U(−k,k)\mathcal{U}(-\sqrt{k}, \sqrt{k}) where k=groupsCout∗kernel_sizek = \frac{groups}{C_\text{out} * \text{kernel\\_size}}
  * ~ConvTranspose1d.bias (Tensor) – the learnable bias of the module of shape (out_channels). If `bias` is `True`, then the values of these weights are sampled from U(−k,k)\mathcal{U}(-\sqrt{k}, \sqrt{k}) where k=groupsCout∗kernel_sizek = \frac{groups}{C_\text{out} * \text{kernel\\_size}}

© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.nn.ConvTranspose1d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

