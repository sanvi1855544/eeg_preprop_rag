# torch.nansum

`torch.nansum(input, *, dtype=None) → Tensor`

    
Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.

Parameters

    
input (Tensor) – the input tensor.

Keyword Arguments

    
dtype (`torch.dtype`, optional) – the desired data type of returned tensor. If
specified, the input tensor is casted to `dtype` before the operation is
performed. This is useful for preventing data type overflows. Default: None.

Example:

    
    >>> a = torch.tensor([1., 2., float('nan'), 4.])
    >>> torch.nansum(a)
    tensor(7.)
    
`torch.nansum(input, dim, keepdim=False, *, dtype=None) → Tensor`

Returns the sum of each row of the `input` tensor in the given dimension
`dim`, treating Not a Numbers (NaNs) as zero. If `dim` is a list of
dimensions, reduce over all of them.

If `keepdim` is `True`, the output tensor is of the same size as `input`
except in the dimension(s) `dim` where it is of size 1. Otherwise, `dim` is
squeezed (see `torch.squeeze()`), resulting in the output tensor having 1 (or
`len(dim)`) fewer dimension(s).

Parameters

    
  * input (Tensor) – the input tensor.
  * dim (int or tuple of python:ints) – the dimension or dimensions to reduce.
  * keepdim (bool) – whether the output tensor has `dim` retained or not.

Keyword Arguments

    
dtype (`torch.dtype`, optional) – the desired data type of returned tensor. If
specified, the input tensor is casted to `dtype` before the operation is
performed. This is useful for preventing data type overflows. Default: None.

Example:

    
    >>> torch.nansum(torch.tensor([1., float("nan")]))
    1.0
    >>> a = torch.tensor([[1, 2], [3., float("nan")]])
    >>> torch.nansum(a)
    tensor(6.)
    >>> torch.nansum(a, dim=0)
    tensor([4., 2.])
    >>> torch.nansum(a, dim=1)
    tensor([3., 3.])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.nansum.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

