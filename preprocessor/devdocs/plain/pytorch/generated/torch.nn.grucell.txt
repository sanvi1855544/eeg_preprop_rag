# GRUCell

`class torch.nn.GRUCell(input_size, hidden_size, bias=True)` [source]

    
A gated recurrent unit (GRU) cell

r=σ(Wirx+bir+Whrh+bhr)z=σ(Wizx+biz+Whzh+bhz)n=tanh⁡(Winx+bin+r∗(Whnh+bhn))h′=(1−z)∗n+z∗h\begin{array}{ll}
r = \sigma(W_{ir} x + b_{ir} + W_{hr} h + b_{hr}) \\\ z = \sigma(W_{iz} x +
b_{iz} + W_{hz} h + b_{hz}) \\\ n = \tanh(W_{in} x + b_{in} + r * (W_{hn} h +
b_{hn})) \\\ h' = (1 - z) * n + z * h \end{array}

where σ\sigma is the sigmoid function, and ∗* is the Hadamard product.

Parameters

    
  * input_size – The number of expected features in the input `x`
  * hidden_size – The number of features in the hidden state `h`
  * bias – If `False`, then the layer does not use bias weights `b_ih` and `b_hh`. Default: `True`

Inputs: input, hidden

    
  * input of shape `(batch, input_size)`: tensor containing input features
  * hidden of shape `(batch, hidden_size)`: tensor containing the initial hidden state for each element in the batch. Defaults to zero if not provided.

Outputs: h’

    
  * h’ of shape `(batch, hidden_size)`: tensor containing the next hidden state for each element in the batch

Shape:

    
  * Input1: (N,Hin)(N, H_{in}) tensor containing input features where HinH_{in} = `input_size`
  * Input2: (N,Hout)(N, H_{out}) tensor containing the initial hidden state for each element in the batch where HoutH_{out} = `hidden_size` Defaults to zero if not provided.
  * Output: (N,Hout)(N, H_{out}) tensor containing the next hidden state for each element in the batch

Variables

    
  * ~GRUCell.weight_ih – the learnable input-hidden weights, of shape `(3*hidden_size, input_size)`
  * ~GRUCell.weight_hh – the learnable hidden-hidden weights, of shape `(3*hidden_size, hidden_size)`
  * ~GRUCell.bias_ih – the learnable input-hidden bias, of shape `(3*hidden_size)`
  * ~GRUCell.bias_hh – the learnable hidden-hidden bias, of shape `(3*hidden_size)`

Note

All the weights and biases are initialized from U(−k,k)\mathcal{U}(-\sqrt{k},
\sqrt{k}) where k=1hidden_sizek = \frac{1}{\text{hidden\\_size}}

Examples:

    
    >>> rnn = nn.GRUCell(10, 20)
    >>> input = torch.randn(6, 3, 10)
    >>> hx = torch.randn(3, 20)
    >>> output = []
    >>> for i in range(6):
            hx = rnn(input[i], hx)
            output.append(hx)
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.nn.GRUCell.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

