# torch.fmod

`torch.fmod(input, other, *, out=None) → Tensor`

    
Computes the element-wise remainder of division.

The dividend and divisor may contain both for integer and floating point
numbers. The remainder has the same sign as the dividend `input`.

Supports broadcasting to a common shape, type promotion, and integer and float
inputs.

Note

When the divisor is zero, returns `NaN` for floating point dtypes on both CPU
and GPU; raises `RuntimeError` for integer division by zero on CPU; Integer
division by zero on GPU may return any value.

Parameters

    
  * input (Tensor) – the dividend
  * other (Tensor or Scalar) – the divisor

Keyword Arguments

    
out (Tensor, optional) – the output tensor.

Example:

    
    >>> torch.fmod(torch.tensor([-3., -2, -1, 1, 2, 3]), 2)
    tensor([-1., -0., -1.,  1.,  0.,  1.])
    >>> torch.fmod(torch.tensor([1, 2, 3, 4, 5]), 1.5)
    tensor([1.0000, 0.5000, 0.0000, 1.0000, 0.5000])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.fmod.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

