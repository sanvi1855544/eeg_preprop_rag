# LPPool2d

`class torch.nn.LPPool2d(norm_type, kernel_size, stride=None,
ceil_mode=False)` [source]

    
Applies a 2D power-average pooling over an input signal composed of several
input planes.

On each window, the function computed is:

f(X)=∑x∈Xxppf(X) = \sqrt[p]{\sum_{x \in X} x^{p}}

  * At p = ∞\infty , one gets Max Pooling
  * At p = 1, one gets Sum Pooling (which is proportional to average pooling)

The parameters `kernel_size`, `stride` can either be:

  * a single `int` – in which case the same value is used for the height and width dimension
  * a `tuple` of two ints – in which case, the first `int` is used for the height dimension, and the second `int` for the width dimension

Note

If the sum to the power of `p` is zero, the gradient of this function is not
defined. This implementation will set the gradient to zero in this case.

Parameters

    
  * kernel_size – the size of the window
  * stride – the stride of the window. Default value is `kernel_size`
  * ceil_mode – when True, will use `ceil` instead of `floor` to compute the output shape

Shape:

    
  * Input: (N,C,Hin,Win)(N, C, H_{in}, W_{in})
  * Output: (N,C,Hout,Wout)(N, C, H_{out}, W_{out}) , where
Hout=⌊Hin−kernel_size[0]stride[0]+1⌋H_{out} = \left\lfloor\frac{H_{in} -
\text{kernel\\_size}[0]}{\text{stride}[0]} + 1\right\rfloor

Wout=⌊Win−kernel_size[1]stride[1]+1⌋W_{out} = \left\lfloor\frac{W_{in} -
\text{kernel\\_size}[1]}{\text{stride}[1]} + 1\right\rfloor

Examples:

    
    >>> # power-2 pool of square window of size=3, stride=2
    >>> m = nn.LPPool2d(2, 3, stride=2)
    >>> # pool of non-square window of power 1.2
    >>> m = nn.LPPool2d(1.2, (3, 2), stride=(2, 1))
    >>> input = torch.randn(20, 16, 50, 32)
    >>> output = m(input)
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.nn.LPPool2d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

