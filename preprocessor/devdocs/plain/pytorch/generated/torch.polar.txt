# torch.polar

`torch.polar(abs, angle, *, out=None) → Tensor`

    
Constructs a complex tensor whose elements are Cartesian coordinates
corresponding to the polar coordinates with absolute value `abs` and angle
`angle`.

out=abs⋅cos⁡(angle)+abs⋅sin⁡(angle)⋅j\text{out} = \text{abs} \cdot
\cos(\text{angle}) + \text{abs} \cdot \sin(\text{angle}) \cdot j

Parameters

    
  * abs (Tensor) – The absolute value the complex tensor. Must be float or double.
  * angle (Tensor) – The angle of the complex tensor. Must be same dtype as `abs`.

Keyword Arguments

    
out (Tensor) – If the inputs are `torch.float32`, must be `torch.complex64`.
If the inputs are `torch.float64`, must be `torch.complex128`.

Example::

    
    
    >>> import numpy as np
    >>> abs = torch.tensor([1, 2], dtype=torch.float64)
    >>> angle = torch.tensor([np.pi / 2, 5 * np.pi / 4], dtype=torch.float64)
    >>> z = torch.polar(abs, angle)
    >>> z
    tensor([(0.0000+1.0000j), (-1.4142-1.4142j)], dtype=torch.complex128)
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.polar.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

