# torch.xlogy

`torch.xlogy(input, other, *, out=None) → Tensor`

    
Computes `input * log(other)` with the following cases.

outi={NaNif otheri=NaN0if inputi=0.0inputi∗log⁡(otheri)otherwise\text{out}_{i}
= \begin{cases} \text{NaN} & \text{if } \text{other}_{i} = \text{NaN} \\\ 0 &
\text{if } \text{input}_{i} = 0.0 \\\ \text{input}_{i} *
\log{(\text{other}_{i})} & \text{otherwise} \end{cases}

Similar to SciPy’s `scipy.special.xlogy`.

Parameters

    
  * input (Number or Tensor) – 
  * other (Number or Tensor) – 

Note

At least one of `input` or `other` must be a tensor.

Keyword Arguments

    
out (Tensor, optional) – the output tensor.

Example:

    
    >>> x = torch.zeros(5,)
    >>> y = torch.tensor([-1, 0, 1, float('inf'), float('nan')])
    >>> torch.xlogy(x, y)
    tensor([0., 0., 0., 0., nan])
    >>> x = torch.tensor([1, 2, 3])
    >>> y = torch.tensor([3, 2, 1])
    >>> torch.xlogy(x, y)
    tensor([1.0986, 1.3863, 0.0000])
    >>> torch.xlogy(x, 4)
    tensor([1.3863, 2.7726, 4.1589])
    >>> torch.xlogy(2, y)
    tensor([2.1972, 1.3863, 0.0000])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.xlogy.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

