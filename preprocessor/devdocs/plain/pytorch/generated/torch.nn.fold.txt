# Fold

`class torch.nn.Fold(output_size, kernel_size, dilation=1, padding=0,
stride=1)` [source]

    
Combines an array of sliding local blocks into a large containing tensor.

Consider a batched `input` tensor containing sliding local blocks, e.g.,
patches of images, of shape (N,C×∏(kernel_size),L)(N, C \times
\prod(\text{kernel\\_size}), L) , where NN is batch dimension,
C×∏(kernel_size)C \times \prod(\text{kernel\\_size}) is the number of values
within a block (a block has ∏(kernel_size)\prod(\text{kernel\\_size}) spatial
locations each containing a CC -channeled vector), and LL is the total number
of blocks. (This is exactly the same specification as the output shape of
`Unfold`.) This operation combines these local blocks into the large `output`
tensor of shape (N,C,output_size[0],output_size[1],…)(N, C,
\text{output\\_size}[0], \text{output\\_size}[1], \dots) by summing the
overlapping values. Similar to `Unfold`, the arguments must satisfy

L=∏d⌊output_size[d]+2×padding[d]−dilation[d]×(kernel_size[d]−1)−1stride[d]+1⌋,L
= \prod_d \left\lfloor\frac{\text{output\\_size}[d] + 2 \times
\text{padding}[d] % - \text{dilation}[d] \times (\text{kernel\\_size}[d] - 1)
- 1}{\text{stride}[d]} + 1\right\rfloor,

where dd is over all spatial dimensions.

  * `output_size` describes the spatial shape of the large containing tensor of the sliding local blocks. It is useful to resolve the ambiguity when multiple input shapes map to same number of sliding blocks, e.g., with `stride > 0`.

The `padding`, `stride` and `dilation` arguments specify how the sliding
blocks are retrieved.

  * `stride` controls the stride for the sliding blocks.
  * `padding` controls the amount of implicit zero-paddings on both sides for `padding` number of points for each dimension before reshaping.
  * `dilation` controls the spacing between the kernel points; also known as the à trous algorithm. It is harder to describe, but this link has a nice visualization of what `dilation` does.

Parameters

    
  * output_size (int or tuple) – the shape of the spatial dimensions of the output (i.e., `output.sizes()[2:]`)
  * kernel_size (int or tuple) – the size of the sliding blocks
  * stride (int or tuple) – the stride of the sliding blocks in the input spatial dimensions. Default: 1
  * padding (int or tuple, optional) – implicit zero padding to be added on both sides of input. Default: 0
  * dilation (int or tuple, optional) – a parameter that controls the stride of elements within the neighborhood. Default: 1

  * If `output_size`, `kernel_size`, `dilation`, `padding` or `stride` is an int or a tuple of length 1 then their values will be replicated across all spatial dimensions.
  * For the case of two output spatial dimensions this operation is sometimes called `col2im`.

Note

`Fold` calculates each combined value in the resulting large tensor by summing
all values from all containing blocks. `Unfold` extracts the values in the
local blocks by copying from the large tensor. So, if the blocks overlap, they
are not inverses of each other.

In general, folding and unfolding operations are related as follows. Consider
`Fold` and `Unfold` instances created with the same parameters:

    
    >>> fold_params = dict(kernel_size=..., dilation=..., padding=..., stride=...)
    >>> fold = nn.Fold(output_size=..., **fold_params)
    >>> unfold = nn.Unfold(**fold_params)
    
Then for any (supported) `input` tensor the following equality holds:

    
    fold(unfold(input)) == divisor * input
    
where `divisor` is a tensor that depends only on the shape and dtype of the
`input`:

    
    >>> input_ones = torch.ones(input.shape, dtype=input.dtype)
    >>> divisor = fold(unfold(input_ones))
    
When the `divisor` tensor contains no zero elements, then `fold` and `unfold`
operations are inverses of each other (up to constant divisor).

Warning

Currently, only 4-D output tensors (batched image-like tensors) are supported.

Shape:

    
  * Input: (N,C×∏(kernel_size),L)(N, C \times \prod(\text{kernel\\_size}), L)
  * Output: (N,C,output_size[0],output_size[1],…)(N, C, \text{output\\_size}[0], \text{output\\_size}[1], \dots) as described above

Examples:

    
    >>> fold = nn.Fold(output_size=(4, 5), kernel_size=(2, 2))
    >>> input = torch.randn(1, 3 * 2 * 2, 12)
    >>> output = fold(input)
    >>> output.size()
    torch.Size([1, 3, 4, 5])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.nn.Fold.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

