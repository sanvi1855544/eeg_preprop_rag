# torch.fmin

`torch.fmin(input, other, *, out=None) → Tensor`

    
Computes the element-wise minimum of `input` and `other`.

This is like `torch.minimum()` except it handles NaNs differently: if exactly
one of the two elements being compared is a NaN then the non-NaN element is
taken as the minimum. Only if both elements are NaN is NaN propagated.

This function is a wrapper around C++’s `std::fmin` and is similar to NumPy’s
`fmin` function.

Supports broadcasting to a common shape, type promotion, and integer and
floating-point inputs.

Parameters

    
  * input (Tensor) – the input tensor.
  * other (Tensor) – the second input tensor

Keyword Arguments

    
out (Tensor, optional) – the output tensor.

Example:

    
    >>> a = torch.tensor([2.2, float('nan'), 2.1, float('nan')])
    >>> b = torch.tensor([-9.3, 0.1, float('nan'), float('nan')])
    >>> torch.fmin(a, b)
    tensor([-9.3000, 0.1000, 2.1000,    nan])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.fmin.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

