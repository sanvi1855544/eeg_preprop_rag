# ReplicationPad1d

`class torch.nn.ReplicationPad1d(padding)` [source]

    
Pads the input tensor using replication of the input boundary.

For `N`-dimensional padding, use `torch.nn.functional.pad()`.

Parameters

    
padding (int, tuple) – the size of the padding. If is `int`, uses the same
padding in all boundaries. If a 2-`tuple`, uses
(padding_left\text{padding\\_left} , padding_right\text{padding\\_right} )

Shape:

    
  * Input: (N,C,Win)(N, C, W_{in})
  * Output: (N,C,Wout)(N, C, W_{out}) where
Wout=Win+padding_left+padding_rightW_{out} = W_{in} + \text{padding\\_left} +
\text{padding\\_right}

Examples:

    
    >>> m = nn.ReplicationPad1d(2)
    >>> input = torch.arange(8, dtype=torch.float).reshape(1, 2, 4)
    >>> input
    tensor([[[0., 1., 2., 3.],
             [4., 5., 6., 7.]]])
    >>> m(input)
    tensor([[[0., 0., 0., 1., 2., 3., 3., 3.],
             [4., 4., 4., 5., 6., 7., 7., 7.]]])
    >>> # using different paddings for different sides
    >>> m = nn.ReplicationPad1d((3, 1))
    >>> m(input)
    tensor([[[0., 0., 0., 0., 1., 2., 3., 3.],
             [4., 4., 4., 4., 5., 6., 7., 7.]]])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.nn.ReplicationPad1d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

