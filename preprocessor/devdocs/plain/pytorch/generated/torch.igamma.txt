# torch.igamma

`torch.igamma(input, other, *, out=None) → Tensor`

    
Computes the regularized lower incomplete gamma function:

outi=1Γ(inputi)∫0otheritinputi−1e−tdt\text{out}_{i} =
\frac{1}{\Gamma(\text{input}_i)} \int_0^{\text{other}_i} t^{\text{input}_i-1}
e^{-t} dt

where both inputi\text{input}_i and otheri\text{other}_i are weakly positive
and at least one is strictly positive. If both are zero or either is negative
then outi=nan\text{out}_i=\text{nan} . Γ(⋅)\Gamma(\cdot) in the equation above
is the gamma function,

Γ(inputi)=∫0∞t(inputi−1)e−tdt.\Gamma(\text{input}_i) = \int_0^\infty
t^{(\text{input}_i-1)} e^{-t} dt.

See `torch.igammac()` and `torch.lgamma()` for related functions.

Supports broadcasting to a common shape and float inputs.

Note

The backward pass with respect to `input` is not yet supported. Please open an
issue on PyTorch’s Github to request it.

Parameters

    
  * input (Tensor) – the first non-negative input tensor
  * other (Tensor) – the second non-negative input tensor

Keyword Arguments

    
out (Tensor, optional) – the output tensor.

Example:

    
    >>> a1 = torch.tensor([4.0])
    >>> a2 = torch.tensor([3.0, 4.0, 5.0])
    >>> a = torch.igammac(a1, a2)
    tensor([0.3528, 0.5665, 0.7350])
    tensor([0.3528, 0.5665, 0.7350])
    >>> b = torch.igamma(a1, a2) + torch.igammac(a1, a2)
    tensor([1., 1., 1.])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.igamma.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

