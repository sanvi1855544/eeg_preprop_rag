# torch.logspace

`torch.logspace(start, end, steps, base=10.0, *, out=None, dtype=None,
layout=torch.strided, device=None, requires_grad=False) → Tensor`

    
Creates a one-dimensional tensor of size `steps` whose values are evenly
spaced from basestart{{\text{{base}}}}^{{\text{{start}}}} to
baseend{{\text{{base}}}}^{{\text{{end}}}} , inclusive, on a logarithmic scale
with base `base`. That is, the values are:

(basestart,base(start+end−startsteps−1),…,base(start+(steps−2)∗end−startsteps−1),baseend)(\text{base}^{\text{start}},
\text{base}^{(\text{start} + \frac{\text{end} - \text{start}}{ \text{steps} -
1})}, \ldots, \text{base}^{(\text{start} + (\text{steps} - 2) *
\frac{\text{end} - \text{start}}{ \text{steps} - 1})},
\text{base}^{\text{end}})

Warning

Not providing a value for `steps` is deprecated. For backwards compatibility,
not providing a value for `steps` will create a tensor with 100 elements. Note
that this behavior is not reflected in the documented function signature and
should not be relied on. In a future PyTorch release, failing to provide a
value for `steps` will throw a runtime error.

Parameters

    
  * start (float) – the starting value for the set of points
  * end (float) – the ending value for the set of points
  * steps (int) – size of the constructed tensor
  * base (float, optional) – base of the logarithm function. Default: `10.0`.

Keyword Arguments

    
  * out (Tensor, optional) – the output tensor.
  * dtype (`torch.dtype`, optional) – the desired data type of returned tensor. Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).
  * layout (`torch.layout`, optional) – the desired layout of returned Tensor. Default: `torch.strided`.
  * device (`torch.device`, optional) – the desired device of returned tensor. Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`). `device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.
  * requires_grad (bool, optional) – If autograd should record operations on the returned tensor. Default: `False`.

Example:

    
    >>> torch.logspace(start=-10, end=10, steps=5)
    tensor([ 1.0000e-10,  1.0000e-05,  1.0000e+00,  1.0000e+05,  1.0000e+10])
    >>> torch.logspace(start=0.1, end=1.0, steps=5)
    tensor([  1.2589,   2.1135,   3.5481,   5.9566,  10.0000])
    >>> torch.logspace(start=0.1, end=1.0, steps=1)
    tensor([1.2589])
    >>> torch.logspace(start=2, end=2, steps=1, base=2)
    tensor([4.0])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.logspace.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

