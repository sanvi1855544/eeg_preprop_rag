# torch.full

`torch.full(size, fill_value, *, out=None, dtype=None, layout=torch.strided,
device=None, requires_grad=False) → Tensor`

    
Creates a tensor of size `size` filled with `fill_value`. The tensor’s dtype
is inferred from `fill_value`.

Parameters

    
  * size (int...) – a list, tuple, or `torch.Size` of integers defining the shape of the output tensor.
  * fill_value (Scalar) – the value to fill the output tensor with.

Keyword Arguments

    
  * out (Tensor, optional) – the output tensor.
  * dtype (`torch.dtype`, optional) – the desired data type of returned tensor. Default: if `None`, uses a global default (see `torch.set_default_tensor_type()`).
  * layout (`torch.layout`, optional) – the desired layout of returned Tensor. Default: `torch.strided`.
  * device (`torch.device`, optional) – the desired device of returned tensor. Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`). `device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.
  * requires_grad (bool, optional) – If autograd should record operations on the returned tensor. Default: `False`.

Example:

    
    >>> torch.full((2, 3), 3.141592)
    tensor([[ 3.1416,  3.1416,  3.1416],
            [ 3.1416,  3.1416,  3.1416]])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.full.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

