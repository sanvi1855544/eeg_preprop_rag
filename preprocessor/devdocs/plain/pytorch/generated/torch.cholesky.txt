# torch.cholesky

`torch.cholesky(input, upper=False, *, out=None) → Tensor`

    
Computes the Cholesky decomposition of a symmetric positive-definite matrix AA
or for batches of symmetric positive-definite matrices.

If `upper` is `True`, the returned matrix `U` is upper-triangular, and the
decomposition has the form:

A=UTUA = U^TU

If `upper` is `False`, the returned matrix `L` is lower-triangular, and the
decomposition has the form:

A=LLTA = LL^T

If `upper` is `True`, and AA is a batch of symmetric positive-definite
matrices, then the returned tensor will be composed of upper-triangular
Cholesky factors of each of the individual matrices. Similarly, when `upper`
is `False`, the returned tensor will be composed of lower-triangular Cholesky
factors of each of the individual matrices.

Note

`torch.linalg.cholesky()` should be used over `torch.cholesky` when possible.
Note however that `torch.linalg.cholesky()` does not yet support the `upper`
parameter and instead always returns the lower triangular matrix.

Parameters

    
  * input (Tensor) – the input tensor AA of size (∗,n,n)(*, n, n) where `*` is zero or more batch dimensions consisting of symmetric positive-definite matrices.
  * upper (bool, optional) – flag that indicates whether to return a upper or lower triangular matrix. Default: `False`

Keyword Arguments

    
out (Tensor, optional) – the output matrix

Example:

    
    >>> a = torch.randn(3, 3)
    >>> a = torch.mm(a, a.t()) # make symmetric positive-definite
    >>> l = torch.cholesky(a)
    >>> a
    tensor([[ 2.4112, -0.7486,  1.4551],
            [-0.7486,  1.3544,  0.1294],
            [ 1.4551,  0.1294,  1.6724]])
    >>> l
    tensor([[ 1.5528,  0.0000,  0.0000],
            [-0.4821,  1.0592,  0.0000],
            [ 0.9371,  0.5487,  0.7023]])
    >>> torch.mm(l, l.t())
    tensor([[ 2.4112, -0.7486,  1.4551],
            [-0.7486,  1.3544,  0.1294],
            [ 1.4551,  0.1294,  1.6724]])
    >>> a = torch.randn(3, 2, 2)
    >>> a = torch.matmul(a, a.transpose(-1, -2)) + 1e-03 # make symmetric positive-definite
    >>> l = torch.cholesky(a)
    >>> z = torch.matmul(l, l.transpose(-1, -2))
    >>> torch.max(torch.abs(z - a)) # Max non-zero
    tensor(2.3842e-07)
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.cholesky.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

