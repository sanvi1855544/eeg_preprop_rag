# torch.as_tensor

`torch.as_tensor(data, dtype=None, device=None) → Tensor`

    
Convert the data into a `torch.Tensor`. If the data is already a `Tensor` with
the same `dtype` and `device`, no copy will be performed, otherwise a new
`Tensor` will be returned with computational graph retained if data `Tensor`
has `requires_grad=True`. Similarly, if the data is an `ndarray` of the
corresponding `dtype` and the `device` is the cpu, no copy will be performed.

Parameters

    
  * data (array_like) – Initial data for the tensor. Can be a list, tuple, NumPy `ndarray`, scalar, and other types.
  * dtype (`torch.dtype`, optional) – the desired data type of returned tensor. Default: if `None`, infers data type from `data`.
  * device (`torch.device`, optional) – the desired device of returned tensor. Default: if `None`, uses the current device for the default tensor type (see `torch.set_default_tensor_type()`). `device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.

Example:

    
    >>> a = numpy.array([1, 2, 3])
    >>> t = torch.as_tensor(a)
    >>> t
    tensor([ 1,  2,  3])
    >>> t[0] = -1
    >>> a
    array([-1,  2,  3])
    
    >>> a = numpy.array([1, 2, 3])
    >>> t = torch.as_tensor(a, device=torch.device('cuda'))
    >>> t
    tensor([ 1,  2,  3])
    >>> t[0] = -1
    >>> a
    array([1,  2,  3])
    
© 2019 Torch Contributors  
Licensed under the 3-clause BSD License.  
https://pytorch.org/docs/1.8.0/generated/torch.as_tensor.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

