# backend_svg

matplotlib.backends.backend_svg.FigureCanvas[source]

    
alias of `matplotlib.backends.backend_svg.FigureCanvasSVG`

classmatplotlib.backends.backend_svg.FigureCanvasSVG(figure=None)[source]

    
Bases: `matplotlib.backend_bases.FigureCanvasBase`

draw()[source]

    
Render the `Figure`.

It is important that this method actually walk the artist tree even if not
output is produced because this will trigger deferred work (like computing
limits auto-limits and tick values) that users may want access to before
saving to disk.

filetypes={'svg': 'Scalable Vector Graphics', 'svgz': 'Scalable Vector
Graphics'}

fixed_dpi=72

get_default_filetype()[source]

    
Return the default savefig file format as specified in
`rcParams["savefig.format"]` (default: `'png'`).

The returned string does not include a period. This method is overridden in
backends that only support a single file type.

print_svg(filename, *args, dpi=<deprecated parameter>,
bbox_inches_restore=None, metadata=None)[source]

    
Parameters

    
filenamestr or path-like or file-like

    
Output target; if a string, a file will be opened for writing.

metadatadict[str, Any], optional

    
Metadata in the SVG file defined as key-value pairs of strings, datetimes, or
lists of strings, e.g., `{'Creator': 'My software', 'Contributor': ['Me', 'My
Friend'], 'Title': 'Awesome'}`.

The standard keys and their value types are:

  * str: `'Coverage'`, `'Description'`, `'Format'`, `'Identifier'`, `'Language'`, `'Relation'`, `'Source'`, `'Title'`, and `'Type'`.
  * str or list of str: `'Contributor'`, `'Creator'`, `'Keywords'`, `'Publisher'`, and `'Rights'`.
  * str, date, datetime, or tuple of same: `'Date'`. If a non-str, then it will be formatted as ISO 8601.

Values have been predefined for `'Creator'`, `'Date'`, `'Format'`, and
`'Type'`. They can be removed by setting them to `None`.

Information is encoded as Dublin Core Metadata.

print_svgz(filename, *args, **kwargs)[source]

classmatplotlib.backends.backend_svg.RendererSVG(width, height, svgwriter,
basename=None, image_dpi=72, *, metadata=None)[source]

    
Bases: `matplotlib.backend_bases.RendererBase`

close_group(s)[source]

    
Close a grouping element with label s.

Only used by the SVG renderer.

draw_gouraud_triangle(gc, points, colors, trans)[source]

    
Draw a Gouraud-shaded triangle.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

points(3, 2) array-like

    
Array of (x, y) points for the triangle.

colors(3, 4) array-like

    
RGBA colors for each point of the triangle.

transform`matplotlib.transforms.Transform`

    
An affine transform to apply to the points.

draw_gouraud_triangles(gc, triangles_array, colors_array, transform)[source]

    
Draw a series of Gouraud triangles.

Parameters

    
points(N, 3, 2) array-like

    
Array of N (x, y) points for the triangles.

colors(N, 3, 4) array-like

    
Array of N RGBA colors for each point of the triangles.

transform`matplotlib.transforms.Transform`

    
An affine transform to apply to the points.

draw_image(gc, x, y, im, transform=None)[source]

    
Draw an RGBA image.

Parameters

    
gc`GraphicsContextBase`

    
A graphics context with clipping information.

xscalar

    
The distance in physical units (i.e., dots or pixels) from the left hand side
of the canvas.

yscalar

    
The distance in physical units (i.e., dots or pixels) from the bottom side of
the canvas.

im(N, M, 4) array-like of np.uint8

    
An array of RGBA pixels.

transform`matplotlib.transforms.Affine2DBase`

    
If and only if the concrete backend is written such that
`option_scale_image()` returns `True`, an affine transformation (i.e., an
`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the
transformation is given in physical units (i.e., dots or pixels). Note that
the transformation does not override x and y, and has to be applied before
translating the result by x and y (this can be accomplished by adding x and y
to the translation vector defined by transform).

draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace=None)[source]

    
Draw a marker at each of path's vertices (excluding control points).

This provides a fallback implementation of draw_markers that makes multiple
calls to `draw_path()`. Some backends may want to override this method in
order to draw the marker only once and reuse it multiple times.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

marker_trans`matplotlib.transforms.Transform`

    
An affine transform applied to the marker.

trans`matplotlib.transforms.Transform`

    
An affine transform applied to the path.

draw_path(gc, path, transform, rgbFace=None)[source]

    
Draw a `Path` instance using the given affine transform.

draw_path_collection(gc, master_transform, paths, all_transforms, offsets,
offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds,
urls, offset_position)[source]

    
Draw a collection of paths selecting drawing properties from the lists
facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a
list of offsets to apply to each of the paths. The offsets in offsets are
first transformed by offsetTrans before being applied.

offset_position is unused now, but the argument is kept for backwards
compatibility.

This provides a fallback implementation of `draw_path_collection()` that makes
multiple calls to `draw_path()`. Some backends may want to override this in
order to render each set of path data only once, and then reference that path
multiple times with the different offsets, colors, styles etc. The generator
methods `_iter_collection_raw_paths()` and `_iter_collection()` are provided
to help with (and standardize) the implementation across backends. It is
highly recommended to use those generators, so that changes to the behavior of
`draw_path_collection()` can be made globally.

draw_tex(gc, x, y, s, prop, angle, *, mtext=None)[source]

draw_text(gc, x, y, s, prop, angle, ismath=False, mtext=None)[source]

    
Draw the text instance.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

xfloat

    
The x location of the text in display coords.

yfloat

    
The y location of the text baseline in display coords.

sstr

    
The text string.

prop`matplotlib.font_manager.FontProperties`

    
The font properties.

anglefloat

    
The rotation angle in degrees anti-clockwise.

mtext`matplotlib.text.Text`

    
The original text object to be rendered.

#### Notes

Note for backend implementers:

When you are trying to determine if you have gotten your bounding box right
(which is what enables the text layout/alignment to work properly), it helps
to change the line in text.py:

    
    if 0: bbox_artist(self, renderer)
    
to if 1, and then the actual bounding box will be plotted along with your
text.

finalize()[source]

flipy()[source]

    
Return whether y values increase from top to bottom.

Note that this only affects drawing of texts and images.

get_canvas_width_height()[source]

    
Return the canvas width and height in display coords.

get_image_magnification()[source]

    
Get the factor by which to magnify images passed to `draw_image()`. Allows a
backend to have images at a different resolution to other artists.

get_text_width_height_descent(s, prop, ismath)[source]

    
Get the width, height, and descent (offset from the bottom to the baseline),
in display coords, of the string s with `FontProperties` prop.

propertymathtext_parser[source]

open_group(s, gid=None)[source]

    
Open a grouping element with label s and gid (if set) as id.

Only used by the SVG renderer.

option_image_nocomposite()[source]

    
Return whether image composition by Matplotlib should be skipped.

Raster backends should usually return False (letting the C-level rasterizer
take care of image composition); vector backends should usually return `not
rcParams["image.composite_image"]`.

option_scale_image()[source]

    
Return whether arbitrary affine transformations in `draw_image()` are
supported (True for most vector backends).

classmatplotlib.backends.backend_svg.XMLWriter(file)[source]

    
Bases: `object`

Parameters

    
filewritable text file-like object

close(id)[source]

    
Close open elements, up to (and including) the element identified by the given
identifier.

Parameters

    
id

    
Element identifier, as returned by the `start()` method.

comment(comment)[source]

    
Add a comment to the output stream.

Parameters

    
commentstr

    
Comment text.

data(text)[source]

    
Add character data to the output stream.

Parameters

    
textstr

    
Character data.

element(tag, text=None, attrib={}, **extra)[source]

    
Add an entire element. This is the same as calling `start()`, `data()`, and
`end()` in sequence. The text argument can be omitted.

end(tag=None, indent=True)[source]

    
Close the current element (opened by the most recent call to `start()`).

Parameters

    
tag

    
Element tag. If given, the tag must match the start tag. If omitted, the
current element is closed.

flush()[source]

    
Flush the output stream.

start(tag, attrib={}, **extra)[source]

    
Open a new element. Attributes can be given as keyword arguments, or as a
string/string dictionary. The method returns an opaque identifier that can be
passed to the `close()` method, to close all open elements up to and including
this one.

Parameters

    
tag

    
Element tag.

attrib

    
Attribute dictionary. Alternatively, attributes can be given as keyword
arguments.

Returns

    
An element identifier.

matplotlib.backends.backend_svg.escape_attrib(s)[source]

matplotlib.backends.backend_svg.escape_cdata(s)[source]

matplotlib.backends.backend_svg.escape_comment(s)[source]

matplotlib.backends.backend_svg.generate_css(attrib={})[source]

matplotlib.backends.backend_svg.generate_transform(transform_list=[])[source]

matplotlib.backends.backend_svg.short_float_fmt(x)[source]

    
Create a short string representation of a float, which is %f formatting with
trailing zeros and the decimal point removed.

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/backend_svg_api.html

