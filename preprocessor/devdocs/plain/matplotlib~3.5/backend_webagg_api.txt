# backend_webagg

Displays Agg images in the browser, with interactivity

matplotlib.backends.backend_webagg.FigureCanvas[source]

    
alias of `matplotlib.backends.backend_webagg.FigureCanvasWebAgg`

classmatplotlib.backends.backend_webagg.FigureCanvasWebAgg(*args,
**kwargs)[source]

    
Bases: `matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore`

classmatplotlib.backends.backend_webagg.ServerThread(group=None, target=None,
name=None, args=(), kwargs=None, *, daemon=None)[source]

    
Bases: `threading.Thread`

This constructor should always be called with keyword arguments. Arguments
are:

group should be None; reserved for future extension when a ThreadGroup class
is implemented.

target is the callable object to be invoked by the run() method. Defaults to
None, meaning nothing is called.

name is the thread name. By default, a unique name is constructed of the form
"Thread-N" where N is a small decimal number.

args is the argument tuple for the target invocation. Defaults to ().

kwargs is a dictionary of keyword arguments for the target invocation.
Defaults to {}.

If a subclass overrides the constructor, it must make sure to invoke the base
class constructor (Thread.__init__()) before doing anything else to the
thread.

run()[source]

    
Method representing the thread's activity.

You may override this method in a subclass. The standard run() method invokes
the callable object passed to the object's constructor as the target argument,
if any, with sequential and keyword arguments taken from the args and kwargs
arguments, respectively.

classmatplotlib.backends.backend_webagg.WebAggApplication(url_prefix='')[source]

    
Bases: `tornado.web.Application`

classAllFiguresPage(application, request, *, url_prefix='', **kwargs)[source]

    
Bases: `tornado.web.RequestHandler`

get()[source]

classDownload(application:tornado.web.Application,
request:tornado.httputil.HTTPServerRequest, **kwargs:Any)[source]

    
Bases: `tornado.web.RequestHandler`

get(fignum, fmt)[source]

classFavIcon(application:tornado.web.Application,
request:tornado.httputil.HTTPServerRequest, **kwargs:Any)[source]

    
Bases: `tornado.web.RequestHandler`

get()[source]

classMplJs(application:tornado.web.Application,
request:tornado.httputil.HTTPServerRequest, **kwargs:Any)[source]

    
Bases: `tornado.web.RequestHandler`

get()[source]

classSingleFigurePage(application, request, *, url_prefix='',
**kwargs)[source]

    
Bases: `tornado.web.RequestHandler`

get(fignum)[source]

classWebSocket(application:tornado.web.Application,
request:tornado.httputil.HTTPServerRequest, **kwargs:Any)[source]

    
Bases: `tornado.websocket.WebSocketHandler`

on_close()[source]

    
Invoked when the WebSocket is closed.

If the connection was closed cleanly and a status code or reason phrase was
supplied, these values will be available as the attributes `self.close_code`
and `self.close_reason`.

Changed in version 4.0: Added `close_code` and `close_reason` attributes.

on_message(message)[source]

    
Handle incoming messages on the WebSocket

This method must be overridden.

Changed in version 4.5: `on_message` can be a coroutine.

open(fignum)[source]

    
Invoked when a new WebSocket is opened.

The arguments to `open` are extracted from the `tornado.web.URLSpec` regular
expression, just like the arguments to `tornado.web.RequestHandler.get`.

`open` may be a coroutine. `on_message` will not be called until `open` has
returned.

Changed in version 5.1: `open` may be a coroutine.

send_binary(blob)[source]

send_json(content)[source]

supports_binary=True

classmethodinitialize(url_prefix='', port=None, address=None)[source]

initialized=False

classmethodstart()[source]

started=False

matplotlib.backends.backend_webagg.ipython_inline_display(figure)[source]

matplotlib.backends.backend_webagg.show()[source]

    
Show all figures.

`show` blocks by calling `mainloop` if block is `True`, or if it is `None` and
we are neither in IPython's `%pylab` mode, nor in `interactive` mode.

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/backend_webagg_api.html

