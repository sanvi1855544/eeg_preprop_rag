# backend_pdf

A PDF Matplotlib backend.

Author: Jouni K Sepp√§nen <jks@iki.fi> and others.

matplotlib.backends.backend_pdf.FigureCanvas[source]

    
alias of `matplotlib.backends.backend_pdf.FigureCanvasPdf`

classmatplotlib.backends.backend_pdf.FigureCanvasPdf(figure=None)[source]

    
Bases: `matplotlib.backend_bases.FigureCanvasBase`

draw()[source]

    
Render the `Figure`.

It is important that this method actually walk the artist tree even if not
output is produced because this will trigger deferred work (like computing
limits auto-limits and tick values) that users may want access to before
saving to disk.

filetypes={'pdf': 'Portable Document Format'}

fixed_dpi=72

get_default_filetype()[source]

    
Return the default savefig file format as specified in
`rcParams["savefig.format"]` (default: `'png'`).

The returned string does not include a period. This method is overridden in
backends that only support a single file type.

print_pdf(filename, *, dpi=<deprecated parameter>, bbox_inches_restore=None,
metadata=None)[source]

classmatplotlib.backends.backend_pdf.GraphicsContextPdf(file)[source]

    
Bases: `matplotlib.backend_bases.GraphicsContextBase`

alpha_cmd(alpha, forced, effective_alphas)[source]

capstyle_cmd(style)[source]

capstyles={'butt': 0, 'projecting': 2, 'round': 1}

clip_cmd(cliprect, clippath)[source]

    
Set clip rectangle. Calls `pop()` and `push()`.

commands=((('_cliprect', '_clippath'), <function
GraphicsContextPdf.clip_cmd>), (('_alpha', '_forced_alpha',
'_effective_alphas'), <function GraphicsContextPdf.alpha_cmd>),
(('_capstyle',), <function GraphicsContextPdf.capstyle_cmd>),
(('_fillcolor',), <function GraphicsContextPdf.fillcolor_cmd>),
(('_joinstyle',), <function GraphicsContextPdf.joinstyle_cmd>),
(('_linewidth',), <function GraphicsContextPdf.linewidth_cmd>), (('_dashes',),
<function GraphicsContextPdf.dash_cmd>), (('_rgb',), <function
GraphicsContextPdf.rgb_cmd>), (('_hatch', '_hatch_color'), <function
GraphicsContextPdf.hatch_cmd>))

copy_properties(other)[source]

    
Copy properties of other into self.

dash_cmd(dashes)[source]

delta(other)[source]

    
Copy properties of other into self and return PDF commands needed to transform
self into other.

fill(*args)[source]

    
Predicate: does the path need to be filled?

An optional argument can be used to specify an alternative _fillcolor, as
needed by RendererPdf.draw_markers.

fillcolor_cmd(rgb)[source]

finalize()[source]

    
Make sure every pushed graphics state is popped.

hatch_cmd(hatch, hatch_color)[source]

joinstyle_cmd(style)[source]

joinstyles={'bevel': 2, 'miter': 0, 'round': 1}

linewidth_cmd(width)[source]

paint()[source]

    
Return the appropriate pdf operator to cause the path to be stroked, filled,
or both.

pop()[source]

push()[source]

rgb_cmd(rgb)[source]

stroke()[source]

    
Predicate: does the path need to be stroked (its outline drawn)? This tests
for the various conditions that disable stroking the path, in which case it
would presumably be filled.

classmatplotlib.backends.backend_pdf.Name(name)[source]

    
Bases: `object`

PDF name object.

statichexify(match)[source]

name

pdfRepr()[source]

classmatplotlib.backends.backend_pdf.Op(value)[source]

    
Bases: `matplotlib.backends.backend_pdf.Operator`, `enum.Enum`

An enumeration.

begin_text=(b'BT',)[source]

clip=b'W'[source]

close_fill_stroke=b'b'[source]

close_stroke=b's'[source]

closepath=(b'h',)[source]

concat_matrix=b'cm'[source]

curveto=b'c'[source]

end_text=b'ET'[source]

endpath=b'n'[source]

fill=b'f'[source]

fill_stroke=b'B'[source]

grestore=b'Q'[source]

gsave=(b'q',)[source]

lineto=b'l'[source]

moveto=(b'm',)[source]

op

classmethodpaint_path(fill, stroke)[source]

    
Return the PDF operator to paint a path.

Parameters

    
fillbool

    
Fill the path with the fill color.

strokebool

    
Stroke the outline of the path with the line color.

rectangle=b're'[source]

selectfont=b'Tf'[source]

setcolor_nonstroke=b'scn'[source]

setcolor_stroke=b'SCN'[source]

setcolorspace_nonstroke=(b'cs',)[source]

setcolorspace_stroke=b'CS'[source]

setdash=(b'd',)[source]

setgray_nonstroke=b'g'[source]

setgray_stroke=(b'G',)[source]

setgstate=b'gs'[source]

setlinecap=b'J'[source]

setlinejoin=b'j'[source]

setlinewidth=b'w'[source]

setrgb_nonstroke=(b'rg',)[source]

setrgb_stroke=b'RG'[source]

shading=b'sh'[source]

show=b'Tj'[source]

showkern=b'TJ'[source]

stroke=b'S'[source]

textmatrix=(b'Tm',)[source]

textpos=b'Td'[source]

use_xobject=b'Do'[source]

classmatplotlib.backends.backend_pdf.Operator(op)[source]

    
Bases: `object`

PDF operator object.

op

pdfRepr()[source]

classmatplotlib.backends.backend_pdf.PdfFile(filename, metadata=None)[source]

    
Bases: `object`

PDF file object.

Parameters

    
filenamestr or path-like or file-like

    
Output target; if a string, a file will be opened for writing.

metadatadict from strings to strings and dates

    
Information dictionary object (see PDF reference section 10.2.1 'Document
Information Dictionary'), e.g.: `{'Creator': 'My software', 'Author': 'Me',
'Title': 'Awesome'}`.

The standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator',
'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been
predefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed
by setting them to `None`.

addGouraudTriangles(points, colors)[source]

    
Add a Gouraud triangle shading.

Parameters

    
pointsnp.ndarray

    
Triangle vertices, shape (n, 3, 2) where n = number of triangles, 3 =
vertices, 2 = x, y.

colorsnp.ndarray

    
Vertex colors, shape (n, 3, 1) or (n, 3, 4) as with points, but last dimension
is either (gray,) or (r, g, b, alpha).

Returns

    
Name, Reference

alphaState(alpha)[source]

    
Return name of an ExtGState that sets alpha to the given value.

beginStream(id, len, extra=None, png=None)[source]

close()[source]

    
Flush all buffers and free all resources.

createType1Descriptor(t1font, fontfile)[source]

dviFontName(dvifont)[source]

    
Given a dvi font object, return a name suitable for Op.selectfont. This
registers the font information in `self.dviFontInfo` if not yet registered.

embedTTF(filename, characters)[source]

    
Embed the TTF font from the named file into the document.

endStream()[source]

finalize()[source]

    
Write out the various deferred objects and the pdf end matter.

fontName(fontprop)[source]

    
Select a font based on fontprop and return a name suitable for Op.selectfont.
If fontprop is a string, it will be interpreted as the filename of the font.

hatchPattern(hatch_style)[source]

imageObject(image)[source]

    
Return name of an image XObject representing the given image.

markerObject(path, trans, fill, stroke, lw, joinstyle, capstyle)[source]

    
Return name of a marker XObject representing the given path.

newPage(width, height)[source]

newTextnote(text, positionRect=[- 100, - 100, 0, 0])[source]

output(*data)[source]

pathCollectionObject(gc, path, trans, padding, filled, stroked)[source]

staticpathOperations(path, transform, clip=None, simplify=None,
sketch=None)[source]

recordXref(id)[source]

reserveObject(name='')[source]

    
Reserve an ID for an indirect object.

The name is used for debugging in case we forget to print out the object with
writeObject.

write(data)[source]

writeExtGSTates()[source]

writeFonts()[source]

writeGouraudTriangles()[source]

writeHatches()[source]

writeImages()[source]

writeInfoDict()[source]

    
Write out the info dictionary, checking it for good form

writeMarkers()[source]

writeObject(object, contents)[source]

writePath(path, transform, clip=False, sketch=None)[source]

writePathCollectionTemplates()[source]

writeTrailer()[source]

    
Write out the PDF trailer.

writeXref()[source]

    
Write out the xref table.

classmatplotlib.backends.backend_pdf.PdfPages(filename, keep_empty=True,
metadata=None)[source]

    
Bases: `object`

A multi-page PDF file.

#### Notes

In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid
confusion when using `savefig` and forgetting the format argument.

#### Examples

    
    >>> import matplotlib.pyplot as plt
    >>> # Initialize:
    >>> with PdfPages('foo.pdf') as pdf:
    ...     # As many times as you like, create a figure fig and save it:
    ...     fig = plt.figure()
    ...     pdf.savefig(fig)
    ...     # When no figure is specified the current figure is saved
    ...     pdf.savefig()
    
Create a new PdfPages object.

Parameters

    
filenamestr or path-like or file-like

    
Plots using `PdfPages.savefig` will be written to a file at this location. The
file is opened at once and any older file with the same name is overwritten.

keep_emptybool, optional

    
If set to False, then empty pdf files will be deleted automatically when
closed.

metadatadict, optional

    
Information dictionary object (see PDF reference section 10.2.1 'Document
Information Dictionary'), e.g.: `{'Creator': 'My software', 'Author': 'Me',
'Title': 'Awesome'}`.

The standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator',
'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been
predefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed
by setting them to `None`.

attach_note(text, positionRect=[- 100, - 100, 0, 0])[source]

    
Add a new text note to the page to be saved next. The optional positionRect
specifies the position of the new note on the page. It is outside the page per
default to make sure it is invisible on printouts.

close()[source]

    
Finalize this object, making the underlying file a complete PDF file.

get_pagecount()[source]

    
Return the current number of pages in the multipage pdf file.

infodict()[source]

    
Return a modifiable information dictionary object (see PDF reference section
10.2.1 'Document Information Dictionary').

keep_empty

savefig(figure=None, **kwargs)[source]

    
Save a `Figure` to this file as a new page.

Any other keyword arguments are passed to `savefig`.

Parameters

    
figure`Figure` or int, default: the active figure

    
The figure, or index of the figure, that is saved to the file.

classmatplotlib.backends.backend_pdf.Reference(id)[source]

    
Bases: `object`

PDF reference object.

Use PdfFile.reserveObject() to create References.

pdfRepr()[source]

write(contents, file)[source]

classmatplotlib.backends.backend_pdf.RendererPdf(file, image_dpi, height,
width)[source]

    
Bases: `matplotlib.backends._backend_pdf_ps.RendererPDFPSBase`

check_gc(gc, fillcolor=None)[source]

draw_gouraud_triangle(gc, points, colors, trans)[source]

    
Draw a Gouraud-shaded triangle.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

points(3, 2) array-like

    
Array of (x, y) points for the triangle.

colors(3, 4) array-like

    
RGBA colors for each point of the triangle.

transform`matplotlib.transforms.Transform`

    
An affine transform to apply to the points.

draw_gouraud_triangles(gc, points, colors, trans)[source]

    
Draw a series of Gouraud triangles.

Parameters

    
points(N, 3, 2) array-like

    
Array of N (x, y) points for the triangles.

colors(N, 3, 4) array-like

    
Array of N RGBA colors for each point of the triangles.

transform`matplotlib.transforms.Transform`

    
An affine transform to apply to the points.

draw_image(gc, x, y, im, transform=None)[source]

    
Draw an RGBA image.

Parameters

    
gc`GraphicsContextBase`

    
A graphics context with clipping information.

xscalar

    
The distance in physical units (i.e., dots or pixels) from the left hand side
of the canvas.

yscalar

    
The distance in physical units (i.e., dots or pixels) from the bottom side of
the canvas.

im(N, M, 4) array-like of np.uint8

    
An array of RGBA pixels.

transform`matplotlib.transforms.Affine2DBase`

    
If and only if the concrete backend is written such that
`option_scale_image()` returns `True`, an affine transformation (i.e., an
`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the
transformation is given in physical units (i.e., dots or pixels). Note that
the transformation does not override x and y, and has to be applied before
translating the result by x and y (this can be accomplished by adding x and y
to the translation vector defined by transform).

draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace=None)[source]

    
Draw a marker at each of path's vertices (excluding control points).

This provides a fallback implementation of draw_markers that makes multiple
calls to `draw_path()`. Some backends may want to override this method in
order to draw the marker only once and reuse it multiple times.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

marker_trans`matplotlib.transforms.Transform`

    
An affine transform applied to the marker.

trans`matplotlib.transforms.Transform`

    
An affine transform applied to the path.

draw_mathtext(gc, x, y, s, prop, angle)[source]

draw_path(gc, path, transform, rgbFace=None)[source]

    
Draw a `Path` instance using the given affine transform.

draw_path_collection(gc, master_transform, paths, all_transforms, offsets,
offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds,
urls, offset_position)[source]

    
Draw a collection of paths selecting drawing properties from the lists
facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a
list of offsets to apply to each of the paths. The offsets in offsets are
first transformed by offsetTrans before being applied.

offset_position is unused now, but the argument is kept for backwards
compatibility.

This provides a fallback implementation of `draw_path_collection()` that makes
multiple calls to `draw_path()`. Some backends may want to override this in
order to render each set of path data only once, and then reference that path
multiple times with the different offsets, colors, styles etc. The generator
methods `_iter_collection_raw_paths()` and `_iter_collection()` are provided
to help with (and standardize) the implementation across backends. It is
highly recommended to use those generators, so that changes to the behavior of
`draw_path_collection()` can be made globally.

draw_tex(gc, x, y, s, prop, angle, *, mtext=None)[source]

draw_text(gc, x, y, s, prop, angle, ismath=False, mtext=None)[source]

    
Draw the text instance.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

xfloat

    
The x location of the text in display coords.

yfloat

    
The y location of the text baseline in display coords.

sstr

    
The text string.

prop`matplotlib.font_manager.FontProperties`

    
The font properties.

anglefloat

    
The rotation angle in degrees anti-clockwise.

mtext`matplotlib.text.Text`

    
The original text object to be rendered.

#### Notes

Note for backend implementers:

When you are trying to determine if you have gotten your bounding box right
(which is what enables the text layout/alignment to work properly), it helps
to change the line in text.py:

    
    if 0: bbox_artist(self, renderer)
    
to if 1, and then the actual bounding box will be plotted along with your
text.

encode_string(s, fonttype)[source]

finalize()[source]

get_image_magnification()[source]

    
Get the factor by which to magnify images passed to `draw_image()`. Allows a
backend to have images at a different resolution to other artists.

propertymathtext_parser[source]

new_gc()[source]

    
Return an instance of a `GraphicsContextBase`.

classmatplotlib.backends.backend_pdf.Stream(id, len, file, extra=None,
png=None)[source]

    
Bases: `object`

PDF stream object.

This has no pdfRepr method. Instead, call begin(), then output the contents of
the stream by calling write(), and finally call end().

Parameters

    
idint

    
Object id of the stream.

lenReference or None

    
An unused Reference object for the length of the stream; None means to use a
memory buffer so the length can be inlined.

filePdfFile

    
The underlying object to write the stream to.

extradict from Name to anything, or None

    
Extra key-value pairs to include in the stream header.

pngdict or None

    
If the data is already png encoded, the decode parameters.

compressobj

end()[source]

    
Finalize stream.

extra

file

id

len

pdfFile

pos

write(data)[source]

    
Write some data on the stream.

classmatplotlib.backends.backend_pdf.Verbatim(x)[source]

    
Bases: `object`

Store verbatim PDF command content for later inclusion in the stream.

pdfRepr()[source]

matplotlib.backends.backend_pdf.fill(strings, linelen=75)[source]

    
Make one string from sequence of strings, with whitespace in between.

The whitespace is chosen to form lines of at most linelen characters, if
possible.

matplotlib.backends.backend_pdf.pdfRepr(obj)[source]

    
Map Python objects to PDF syntax.

¬© 2012‚Äì2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/backend_pdf_api.html

