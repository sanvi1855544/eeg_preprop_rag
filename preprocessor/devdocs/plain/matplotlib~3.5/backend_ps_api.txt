# backend_ps

A PostScript backend, which can produce both PostScript .ps and .eps.

matplotlib.backends.backend_ps.FigureCanvas[source]

    
alias of `matplotlib.backends.backend_ps.FigureCanvasPS`

classmatplotlib.backends.backend_ps.FigureCanvasPS(figure=None)[source]

    
Bases: `matplotlib.backend_bases.FigureCanvasBase`

draw()[source]

    
Render the `Figure`.

It is important that this method actually walk the artist tree even if not
output is produced because this will trigger deferred work (like computing
limits auto-limits and tick values) that users may want access to before
saving to disk.

filetypes={'eps': 'Encapsulated Postscript', 'ps': 'Postscript'}

fixed_dpi=72

get_default_filetype()[source]

    
Return the default savefig file format as specified in
`rcParams["savefig.format"]` (default: `'png'`).

The returned string does not include a period. This method is overridden in
backends that only support a single file type.

print_eps(outfile, *args, **kwargs)[source]

print_ps(outfile, *args, **kwargs)[source]

classmatplotlib.backends.backend_ps.GraphicsContextPS[source]

    
Bases: `matplotlib.backend_bases.GraphicsContextBase`

[Deprecated]

#### Notes

Deprecated since version 3.4:

get_capstyle()[source]

    
Return the `CapStyle`.

get_joinstyle()[source]

    
Return the `JoinStyle`.

classmatplotlib.backends.backend_ps.PsBackendHelper[source]

    
Bases: `object`

classmatplotlib.backends.backend_ps.RendererPS(width, height, pswriter,
imagedpi=72)[source]

    
Bases: `matplotlib.backends._backend_pdf_ps.RendererPDFPSBase`

The renderer handles all the drawing primitives using a graphics context
instance that controls the colors/styles.

create_hatch(hatch)[source]

draw_gouraud_triangle(gc, points, colors, trans)[source]

    
Draw a Gouraud-shaded triangle.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

points(3, 2) array-like

    
Array of (x, y) points for the triangle.

colors(3, 4) array-like

    
RGBA colors for each point of the triangle.

transform`matplotlib.transforms.Transform`

    
An affine transform to apply to the points.

draw_gouraud_triangles(gc, points, colors, trans)[source]

    
Draw a series of Gouraud triangles.

Parameters

    
points(N, 3, 2) array-like

    
Array of N (x, y) points for the triangles.

colors(N, 3, 4) array-like

    
Array of N RGBA colors for each point of the triangles.

transform`matplotlib.transforms.Transform`

    
An affine transform to apply to the points.

draw_image(gc, x, y, im, transform=None)[source]

    
Draw an RGBA image.

Parameters

    
gc`GraphicsContextBase`

    
A graphics context with clipping information.

xscalar

    
The distance in physical units (i.e., dots or pixels) from the left hand side
of the canvas.

yscalar

    
The distance in physical units (i.e., dots or pixels) from the bottom side of
the canvas.

im(N, M, 4) array-like of np.uint8

    
An array of RGBA pixels.

transform`matplotlib.transforms.Affine2DBase`

    
If and only if the concrete backend is written such that
`option_scale_image()` returns `True`, an affine transformation (i.e., an
`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the
transformation is given in physical units (i.e., dots or pixels). Note that
the transformation does not override x and y, and has to be applied before
translating the result by x and y (this can be accomplished by adding x and y
to the translation vector defined by transform).

draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace=None)[source]

    
Draw a marker at each of path's vertices (excluding control points).

This provides a fallback implementation of draw_markers that makes multiple
calls to `draw_path()`. Some backends may want to override this method in
order to draw the marker only once and reuse it multiple times.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

marker_trans`matplotlib.transforms.Transform`

    
An affine transform applied to the marker.

trans`matplotlib.transforms.Transform`

    
An affine transform applied to the path.

draw_mathtext(gc, x, y, s, prop, angle)[source]

    
Draw the math text using matplotlib.mathtext.

draw_path(gc, path, transform, rgbFace=None)[source]

    
Draw a `Path` instance using the given affine transform.

draw_path_collection(gc, master_transform, paths, all_transforms, offsets,
offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds,
urls, offset_position)[source]

    
Draw a collection of paths selecting drawing properties from the lists
facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a
list of offsets to apply to each of the paths. The offsets in offsets are
first transformed by offsetTrans before being applied.

offset_position is unused now, but the argument is kept for backwards
compatibility.

This provides a fallback implementation of `draw_path_collection()` that makes
multiple calls to `draw_path()`. Some backends may want to override this in
order to render each set of path data only once, and then reference that path
multiple times with the different offsets, colors, styles etc. The generator
methods `_iter_collection_raw_paths()` and `_iter_collection()` are provided
to help with (and standardize) the implementation across backends. It is
highly recommended to use those generators, so that changes to the behavior of
`draw_path_collection()` can be made globally.

draw_tex(gc, x, y, s, prop, angle, *, mtext=None)[source]

draw_text(gc, x, y, s, prop, angle, ismath=False, mtext=None)[source]

    
Draw the text instance.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

xfloat

    
The x location of the text in display coords.

yfloat

    
The y location of the text baseline in display coords.

sstr

    
The text string.

prop`matplotlib.font_manager.FontProperties`

    
The font properties.

anglefloat

    
The rotation angle in degrees anti-clockwise.

mtext`matplotlib.text.Text`

    
The original text object to be rendered.

#### Notes

Note for backend implementers:

When you are trying to determine if you have gotten your bounding box right
(which is what enables the text layout/alignment to work properly), it helps
to change the line in text.py:

    
    if 0: bbox_artist(self, renderer)
    
to if 1, and then the actual bounding box will be plotted along with your
text.

get_image_magnification()[source]

    
Get the factor by which to magnify images passed to draw_image. Allows a
backend to have images at a different resolution to other artists.

propertymathtext_parser[source]

set_color(r, g, b, store=True)[source]

set_font(fontname, fontsize, store=True)[source]

set_linecap(linecap, store=True)[source]

set_linedash(offset, seq, store=True)[source]

set_linejoin(linejoin, store=True)[source]

set_linewidth(linewidth, store=True)[source]

matplotlib.backends.backend_ps.convert_psfrags(tmpfile, psfrags,
font_preamble, custom_preamble, paper_width, paper_height,
orientation)[source]

    
When we want to use the LaTeX backend with postscript, we write PSFrag tags to
a temporary postscript file, each one marking a position for LaTeX to render
some text. convert_psfrags generates a LaTeX document containing the commands
to convert those tags to text. LaTeX/dvips produces the postscript file that
includes the actual text.

matplotlib.backends.backend_ps.get_bbox_header(lbrt, rotated=False)[source]

    
Return a postscript header string for the given bbox lbrt=(l, b, r, t).
Optionally, return rotate command.

matplotlib.backends.backend_ps.gs_distill(tmpfile, eps=False, ptype='letter',
bbox=None, rotated=False)[source]

    
Use ghostscript's pswrite or epswrite device to distill a file. This yields
smaller files without illegal encapsulated postscript operators. The output is
low-level, converting text to outlines.

matplotlib.backends.backend_ps.pstoeps(tmpfile, bbox=None,
rotated=False)[source]

    
Convert the postscript to encapsulated postscript. The bbox of the eps file
will be replaced with the given bbox argument. If None, original bbox will be
used.

matplotlib.backends.backend_ps.quote_ps_string(s)[source]

    
Quote dangerous characters of S for use in a PostScript string constant.

matplotlib.backends.backend_ps.xpdf_distill(tmpfile, eps=False,
ptype='letter', bbox=None, rotated=False)[source]

    
Use ghostscript's ps2pdf and xpdf's/poppler's pdftops to distill a file. This
yields smaller files without illegal encapsulated postscript operators. This
distiller is preferred, generating high-level postscript output that treats
text as text.

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/backend_ps_api.html

