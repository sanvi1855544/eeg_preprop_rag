# matplotlib.figure

`matplotlib.figure` implements the following classes:

`Figure`

    
Top level `Artist`, which holds all plot elements. Many methods are
implemented in `FigureBase`.

`SubFigure`

    
A logical figure inside a figure, usually added to a figure (or parent
`SubFigure`) with `Figure.add_subfigure` or `Figure.subfigures` methods
(provisional API v3.4).

`SubplotParams`

    
Control the default spacing between subplots.

classmatplotlib.figure.Figure(figsize=None, dpi=None, facecolor=None,
edgecolor=None, linewidth=0.0, frameon=None, subplotpars=None,
tight_layout=None, constrained_layout=None, *, layout=None, **kwargs)[source]

    
The top level container for all the plot elements.

The Figure instance supports callbacks through a callbacks attribute which is
a `CallbackRegistry` instance. The events you can connect to are
'dpi_changed', and the callback will be called with `func(fig)` where fig is
the `Figure` instance.

Attributes

    
patch

    
The `Rectangle` instance representing the figure background patch.

suppressComposite

    
For multiple images, the figure will make composite images depending on the
renderer option_image_nocomposite function. If suppressComposite is a boolean,
this will override the renderer.

Parameters

    
figsize2-tuple of floats, default: `rcParams["figure.figsize"]` (default:
`[6.4, 4.8]`)

    
Figure dimension `(width, height)` in inches.

dpifloat, default: `rcParams["figure.dpi"]` (default: `100.0`)

    
Dots per inch.

facecolordefault: `rcParams["figure.facecolor"]` (default: `'white'`)

    
The figure patch facecolor.

edgecolordefault: `rcParams["figure.edgecolor"]` (default: `'white'`)

    
The figure patch edge color.

linewidthfloat

    
The linewidth of the frame (i.e. the edge linewidth of the figure patch).

frameonbool, default: `rcParams["figure.frameon"]` (default: `True`)

    
If `False`, suppress drawing the figure background patch.

subplotpars`SubplotParams`

    
Subplot parameters. If not given, the default subplot parameters
`rcParams["figure.subplot.*"]` are used.

tight_layoutbool or dict, default: `rcParams["figure.autolayout"]` (default:
`False`)

    
Whether to use the tight layout mechanism. See `set_tight_layout`.

Discouraged

The use of this parameter is discouraged. Please use `layout='tight'` instead
for the common case of `tight_layout=True` and use `set_tight_layout`
otherwise.

constrained_layoutbool, default: `rcParams["figure.constrained_layout.use"]`
(default: `False`)

    
This is equal to `layout='constrained'`.

Discouraged

The use of this parameter is discouraged. Please use `layout='constrained'`
instead.

layout{'constrained', 'tight'}, optional

    
The layout mechanism for positioning of plot elements. Supported values:

  * 'constrained': The constrained layout solver usually gives the best layout results and is thus recommended. However, it is computationally expensive and can be slow for complex figures with many elements.
See Constrained Layout Guide for examples.

  * 'tight': Use the tight layout mechanism. This is a relatively simple algorithm, that adjusts the subplot parameters so that decorations like tick labels, axis labels and titles have enough space. See `Figure.set_tight_layout` for further details.

If not given, fall back to using the parameters tight_layout and
constrained_layout, including their config defaults
`rcParams["figure.autolayout"]` (default: `False`) and
`rcParams["figure.constrained_layout.use"]` (default: `False`).

Other Parameters

    
**kwargs`Figure` properties, optional

     Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`canvas` | FigureCanvas  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`constrained_layout` | bool or dict or None  
`constrained_layout_pads` | float, default: `rcParams["figure.constrained_layout.w_pad"]` (default: `0.04167`)  
`dpi` | float  
`edgecolor` | color  
`facecolor` | color  
`figheight` | float  
`figure` | `Figure`  
`figwidth` | float  
`frameon` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`linewidth` | number  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`rasterized` | bool  
`size_inches` | (float, float) or float  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`tight_layout` | bool or dict with keys "pad", "w_pad", "h_pad", "rect" or None  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`zorder` | float  
add_artist(artist, clip=False)[source]

    
Add an `Artist` to the figure.

Usually artists are added to Axes objects using `Axes.add_artist`; this method
can be used in the rare cases where one needs to add artists directly to the
figure instead.

Parameters

    
artist`Artist`

    
The artist to add to the figure. If the added artist has no transform
previously set, its transform will be set to `figure.transSubfigure`.

clipbool, default: False

    
Whether the added artist should be clipped by the figure patch.

Returns

    
`Artist`

    
The added artist.

add_axes(*args, **kwargs)[source]

    
Add an Axes to the figure.

Call signatures:

    
    add_axes(rect, projection=None, polar=False, **kwargs)
    add_axes(ax)
    
Parameters

    
rectsequence of float

    
The dimensions [left, bottom, width, height] of the new Axes. All quantities
are in fractions of figure width and height.

projection{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar',
'rectilinear', str}, optional

    
The projection type of the `Axes`. str is the name of a custom projection, see
`projections`. The default None results in a 'rectilinear' projection.

polarbool, default: False

    
If True, equivalent to projection='polar'.

axes_classsubclass type of `Axes`, optional

    
The `axes.Axes` subclass that is instantiated. This parameter is incompatible
with projection and polar. See axisartist for examples.

sharex, sharey`Axes`, optional

    
Share the x or y `axis` with sharex and/or sharey. The axis will have the same
limits, ticks, and scale as the axis of the shared axes.

labelstr

    
A label for the returned Axes.

Returns

    
`Axes`, or a subclass of `Axes`

    
The returned axes class depends on the projection used. It is `Axes` if
rectilinear projection is used and `projections.polar.PolarAxes` if polar
projection is used.

Other Parameters

    
**kwargs

    
This method also takes the keyword arguments for the returned Axes class. The
keyword arguments for the rectilinear Axes class `Axes` can be found in the
following table but there might also be other keyword arguments if another
projection is used, see the actual Axes class.

Property | Description  
---|---  
`adjustable` | {'box', 'datalim'}  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`anchor` | (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  
`animated` | bool  
`aspect` | {'auto', 'equal'} or float  
`autoscale_on` | bool  
`autoscalex_on` | bool  
`autoscaley_on` | bool  
`axes_locator` | Callable[[Axes, Renderer], Bbox]  
`axisbelow` | bool or 'line'  
`box_aspect` | float or None  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`facecolor` or fc | color  
`figure` | `Figure`  
`frame_on` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`navigate` | bool  
`navigate_mode` | unknown  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | [left, bottom, width, height] or `Bbox`  
`prop_cycle` | unknown  
`rasterization_zorder` | float or None  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`title` | str  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`xbound` | unknown  
`xlabel` | str  
`xlim` | (bottom: float, top: float)  
`xmargin` | float greater than -0.5  
`xscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`xticklabels` | unknown  
`xticks` | unknown  
`ybound` | unknown  
`ylabel` | str  
`ylim` | (bottom: float, top: float)  
`ymargin` | float greater than -0.5  
`yscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`yticklabels` | unknown  
`yticks` | unknown  
`zorder` | float  
See also

`Figure.add_subplot`

`pyplot.subplot`

`pyplot.axes`

`Figure.subplots`

`pyplot.subplots`

#### Notes

In rare circumstances, `add_axes` may be called with a single argument, an
Axes instance already created in the present figure but not in the figure's
list of Axes.

#### Examples

Some simple examples:

    
    rect = l, b, w, h
    fig = plt.figure()
    fig.add_axes(rect)
    fig.add_axes(rect, frameon=False, facecolor='g')
    fig.add_axes(rect, polar=True)
    ax = fig.add_axes(rect, projection='polar')
    fig.delaxes(ax)
    fig.add_axes(ax)
    
add_axobserver(func)[source]

    
Whenever the Axes state change, `func(self)` will be called.

add_callback(func)[source]

    
Add a callback function that will be called whenever one of the `Artist`'s
properties changes.

Parameters

    
funccallable

    
The callback function. It must have the signature:

    
    def func(artist: Artist) -> Any
    
where artist is the calling `Artist`. Return values may exist but are ignored.

Returns

    
int

    
The observer id associated with the callback. This id can be used for removing
the callback with `remove_callback` later.

See also

`remove_callback`

add_gridspec(nrows=1, ncols=1, **kwargs)[source]

    
Return a `GridSpec` that has this figure as a parent. This allows complex
layout of Axes in the figure.

Parameters

    
nrowsint, default: 1

    
Number of rows in grid.

ncolsint, default: 1

    
Number or columns in grid.

Returns

    
`GridSpec`

Other Parameters

    
**kwargs

    
Keyword arguments are passed to `GridSpec`.

See also

`matplotlib.pyplot.subplots`

#### Examples

Adding a subplot that spans two rows:

    
    fig = plt.figure()
    gs = fig.add_gridspec(2, 2)
    ax1 = fig.add_subplot(gs[0, 0])
    ax2 = fig.add_subplot(gs[1, 0])
    # spans two rows:
    ax3 = fig.add_subplot(gs[:, 1])
    
add_subfigure(subplotspec, **kwargs)[source]

    
Add a `SubFigure` to the figure as part of a subplot arrangement.

Parameters

    
subplotspec`gridspec.SubplotSpec`

    
Defines the region in a parent gridspec where the subfigure will be placed.

Returns

    
`figure.SubFigure`

Other Parameters

    
**kwargs

    
Are passed to the `SubFigure` object.

See also

`Figure.subfigures`

add_subplot(*args, **kwargs)[source]

    
Add an `Axes` to the figure as part of a subplot arrangement.

Call signatures:

    
    add_subplot(nrows, ncols, index, **kwargs)
    add_subplot(pos, **kwargs)
    add_subplot(ax)
    add_subplot()
    
Parameters

    
*argsint, (int, int, index), or `SubplotSpec`, default: (1, 1, 1)
    
The position of the subplot described by one of

  * Three integers (nrows, ncols, index). The subplot will take the index position on a grid with nrows rows and ncols columns. index starts at 1 in the upper left corner and increases to the right. index can also be a two-tuple specifying the (first, last) indices (1-based, and including last) of the subplot, e.g., `fig.add_subplot(3, 1, (1, 2))` makes a subplot that spans the upper 2/3 of the figure.
  * A 3-digit integer. The digits are interpreted as if given separately as three single-digit integers, i.e. `fig.add_subplot(235)` is the same as `fig.add_subplot(2, 3, 5)`. Note that this can only be used if there are no more than 9 subplots.
  * A `SubplotSpec`.

In rare circumstances, `add_subplot` may be called with a single argument, a
subplot Axes instance already created in the present figure but not in the
figure's list of Axes.

projection{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar',
'rectilinear', str}, optional

    
The projection type of the subplot (`Axes`). str is the name of a custom
projection, see `projections`. The default None results in a 'rectilinear'
projection.

polarbool, default: False

    
If True, equivalent to projection='polar'.

axes_classsubclass type of `Axes`, optional

    
The `axes.Axes` subclass that is instantiated. This parameter is incompatible
with projection and polar. See axisartist for examples.

sharex, sharey`Axes`, optional

    
Share the x or y `axis` with sharex and/or sharey. The axis will have the same
limits, ticks, and scale as the axis of the shared axes.

labelstr

    
A label for the returned Axes.

Returns

    
`axes.SubplotBase`, or another subclass of `Axes`

    
The Axes of the subplot. The returned Axes base class depends on the
projection used. It is `Axes` if rectilinear projection is used and
`projections.polar.PolarAxes` if polar projection is used. The returned Axes
is then a subplot subclass of the base class.

Other Parameters

    
**kwargs

    
This method also takes the keyword arguments for the returned Axes base class;
except for the figure argument. The keyword arguments for the rectilinear base
class `Axes` can be found in the following table but there might also be other
keyword arguments if another projection is used.

Property | Description  
---|---  
`adjustable` | {'box', 'datalim'}  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`anchor` | (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  
`animated` | bool  
`aspect` | {'auto', 'equal'} or float  
`autoscale_on` | bool  
`autoscalex_on` | bool  
`autoscaley_on` | bool  
`axes_locator` | Callable[[Axes, Renderer], Bbox]  
`axisbelow` | bool or 'line'  
`box_aspect` | float or None  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`facecolor` or fc | color  
`figure` | `Figure`  
`frame_on` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`navigate` | bool  
`navigate_mode` | unknown  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | [left, bottom, width, height] or `Bbox`  
`prop_cycle` | unknown  
`rasterization_zorder` | float or None  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`title` | str  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`xbound` | unknown  
`xlabel` | str  
`xlim` | (bottom: float, top: float)  
`xmargin` | float greater than -0.5  
`xscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`xticklabels` | unknown  
`xticks` | unknown  
`ybound` | unknown  
`ylabel` | str  
`ylim` | (bottom: float, top: float)  
`ymargin` | float greater than -0.5  
`yscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`yticklabels` | unknown  
`yticks` | unknown  
`zorder` | float  
See also

`Figure.add_axes`

`pyplot.subplot`

`pyplot.axes`

`Figure.subplots`

`pyplot.subplots`

#### Examples

    
    fig = plt.figure()
    
    fig.add_subplot(231)
    ax1 = fig.add_subplot(2, 3, 1)  # equivalent but more general
    
    fig.add_subplot(232, frameon=False)  # subplot with no frame
    fig.add_subplot(233, projection='polar')  # polar subplot
    fig.add_subplot(234, sharex=ax1)  # subplot sharing x-axis with ax1
    fig.add_subplot(235, facecolor="red")  # red subplot
    
    ax1.remove()  # delete ax1 from the figure
    fig.add_subplot(ax1)  # add ax1 back to the figure
    
align_labels(axs=None)[source]

    
Align the xlabels and ylabels of subplots with the same subplots row or column
(respectively) if label alignment is being done automatically (i.e. the label
position is not manually set).

Alignment persists for draw events after this is called.

Parameters

    
axslist of `Axes`

    
Optional list (or ndarray) of `Axes` to align the labels. Default is to align
all Axes on the figure.

See also

`matplotlib.figure.Figure.align_xlabels`

`matplotlib.figure.Figure.align_ylabels`

align_xlabels(axs=None)[source]

    
Align the xlabels of subplots in the same subplot column if label alignment is
being done automatically (i.e. the label position is not manually set).

Alignment persists for draw events after this is called.

If a label is on the bottom, it is aligned with labels on Axes that also have
their label on the bottom and that have the same bottom-most subplot row. If
the label is on the top, it is aligned with labels on Axes with the same top-
most row.

Parameters

    
axslist of `Axes`

    
Optional list of (or ndarray) `Axes` to align the xlabels. Default is to align
all Axes on the figure.

See also

`matplotlib.figure.Figure.align_ylabels`

`matplotlib.figure.Figure.align_labels`

#### Notes

This assumes that `axs` are from the same `GridSpec`, so that their
`SubplotSpec` positions correspond to figure positions.

#### Examples

Example with rotated xtick labels:

    
    fig, axs = plt.subplots(1, 2)
    for tick in axs[0].get_xticklabels():
        tick.set_rotation(55)
    axs[0].set_xlabel('XLabel 0')
    axs[1].set_xlabel('XLabel 1')
    fig.align_xlabels()
    
align_ylabels(axs=None)[source]

    
Align the ylabels of subplots in the same subplot column if label alignment is
being done automatically (i.e. the label position is not manually set).

Alignment persists for draw events after this is called.

If a label is on the left, it is aligned with labels on Axes that also have
their label on the left and that have the same left-most subplot column. If
the label is on the right, it is aligned with labels on Axes with the same
right-most column.

Parameters

    
axslist of `Axes`

    
Optional list (or ndarray) of `Axes` to align the ylabels. Default is to align
all Axes on the figure.

See also

`matplotlib.figure.Figure.align_xlabels`

`matplotlib.figure.Figure.align_labels`

#### Notes

This assumes that `axs` are from the same `GridSpec`, so that their
`SubplotSpec` positions correspond to figure positions.

#### Examples

Example with large yticks labels:

    
    fig, axs = plt.subplots(2, 1)
    axs[0].plot(np.arange(0, 1000, 50))
    axs[0].set_ylabel('YLabel 0')
    axs[1].set_ylabel('YLabel 1')
    fig.align_ylabels()
    
autofmt_xdate(bottom=0.2, rotation=30, ha='right', which='major')[source]

    
Date ticklabels often overlap, so it is useful to rotate them and right align
them. Also, a common use case is a number of subplots with shared x-axis where
the x-axis is date data. The ticklabels are often long, and it helps to rotate
them on the bottom subplot and turn them off on other subplots, as well as
turn off xlabels.

Parameters

    
bottomfloat, default: 0.2

    
The bottom of the subplots for `subplots_adjust`.

rotationfloat, default: 30 degrees

    
The rotation angle of the xtick labels in degrees.

ha{'left', 'center', 'right'}, default: 'right'

    
The horizontal alignment of the xticklabels.

which{'major', 'minor', 'both'}, default: 'major'

    
Selects which ticklabels to rotate.

propertyaxes

    
List of Axes in the Figure. You can access and modify the Axes in the Figure
through this list.

Do not modify the list itself. Instead, use `add_axes`, `add_subplot` or
`delaxes` to add or remove an Axes.

Note: The `Figure.axes` property and `get_axes` method are equivalent.

clear(keep_observers=False)[source]

    
Clear the figure -- synonym for `clf`.

clf(keep_observers=False)[source]

    
Clear the figure.

Set keep_observers to True if, for example, a gui widget is tracking the Axes
in the figure.

colorbar(mappable, cax=None, ax=None, use_gridspec=True, **kw)[source]

    
Add a colorbar to a plot.

Parameters

    
mappable

    
The `matplotlib.cm.ScalarMappable` (i.e., `AxesImage`, `ContourSet`, etc.)
described by this colorbar. This argument is mandatory for the
`Figure.colorbar` method but optional for the `pyplot.colorbar` function,
which sets the default to the current image.

Note that one can create a `ScalarMappable` "on-the-fly" to generate colorbars
not attached to a previously drawn artist, e.g.

    
    fig.colorbar(cm.ScalarMappable(norm=norm, cmap=cmap), ax=ax)
    
cax`Axes`, optional

    
Axes into which the colorbar will be drawn.

ax`Axes`, list of Axes, optional

    
One or more parent axes from which space for a new colorbar axes will be
stolen, if cax is None. This has no effect if cax is set.

use_gridspecbool, optional

    
If cax is `None`, a new cax is created as an instance of Axes. If ax is an
instance of Subplot and use_gridspec is `True`, cax is created as an instance
of Subplot using the `gridspec` module.

Returns

    
colorbar`Colorbar`

#### Notes

Additional keyword arguments are of two kinds:

axes properties:

locationNone or {'left', 'right', 'top', 'bottom'}

    
The location, relative to the parent axes, where the colorbar axes is created.
It also determines the orientation of the colorbar (colorbars on the left and
right are vertical, colorbars at the top and bottom are horizontal). If None,
the location will come from the orientation if it is set (vertical colorbars
on the right, horizontal ones at the bottom), or default to 'right' if
orientation is unset.

orientationNone or {'vertical', 'horizontal'}

    
The orientation of the colorbar. It is preferable to set the location of the
colorbar, as that also determines the orientation; passing incompatible values
for location and orientation raises an exception.

fractionfloat, default: 0.15

    
Fraction of original axes to use for colorbar.

shrinkfloat, default: 1.0

    
Fraction by which to multiply the size of the colorbar.

aspectfloat, default: 20

    
Ratio of long to short dimensions.

padfloat, default: 0.05 if vertical, 0.15 if horizontal

    
Fraction of original axes between colorbar and new image axes.

anchor(float, float), optional

    
The anchor point of the colorbar axes. Defaults to (0.0, 0.5) if vertical;
(0.5, 1.0) if horizontal.

panchor(float, float), or False, optional

    
The anchor point of the colorbar parent axes. If False, the parent axes'
anchor will be unchanged. Defaults to (1.0, 0.5) if vertical; (0.5, 0.0) if
horizontal.

colorbar properties:

Property | Description  
---|---  
extend | {'neither', 'both', 'min', 'max'} If not 'neither', make pointed end(s) for out-of- range values. These are set for a given colormap using the colormap set_under and set_over methods.  
extendfrac | {None, 'auto', length, lengths} If set to None, both the minimum and maximum triangular colorbar extensions with have a length of 5% of the interior colorbar length (this is the default setting). If set to 'auto', makes the triangular colorbar extensions the same lengths as the interior boxes (when spacing is set to 'uniform') or the same lengths as the respective adjacent interior boxes (when spacing is set to 'proportional'). If a scalar, indicates the length of both the minimum and maximum triangular colorbar extensions as a fraction of the interior colorbar length. A two-element sequence of fractions may also be given, indicating the lengths of the minimum and maximum colorbar extensions respectively as a fraction of the interior colorbar length.  
extendrect | bool If False the minimum and maximum colorbar extensions will be triangular (the default). If True the extensions will be rectangular.  
spacing | {'uniform', 'proportional'} Uniform spacing gives each discrete color the same space; proportional makes the space proportional to the data interval.  
ticks | None or list of ticks or Locator If None, ticks are determined automatically from the input.  
format | None or str or Formatter If None, `ScalarFormatter` is used. If a format string is given, e.g., '%.3f', that is used. An alternative `Formatter` may be given instead.  
drawedges | bool Whether to draw lines at color boundaries.  
label | str The label on the colorbar's long axis.  
The following will probably be useful only in the context of indexed colors
(that is, when the mappable has norm=NoNorm()), or other unusual
circumstances.

Property | Description  
---|---  
boundaries | None or a sequence  
values | None or a sequence which must be of length 1 less than the sequence of boundaries. For each region delimited by adjacent entries in boundaries, the colormapped to the corresponding value in values will be used.  
If mappable is a `ContourSet`, its extend kwarg is included automatically.

The shrink kwarg provides a simple way to scale the colorbar with respect to
the axes. Note that if cax is specified, it determines the size of the
colorbar and shrink and aspect kwargs are ignored.

For more precise control, you can manually specify the positions of the axes
objects in which the mappable and the colorbar are drawn. In this case, do not
use any of the axes properties kwargs.

It is known that some vector graphics viewers (svg and pdf) renders white gaps
between segments of the colorbar. This is due to bugs in the viewers, not
Matplotlib. As a workaround, the colorbar can be rendered with overlapping
segments:

    
    cbar = colorbar()
    cbar.solids.set_edgecolor("face")
    draw()
    
However this has negative consequences in other circumstances, e.g. with semi-
transparent images (alpha < 1) and colorbar extensions; therefore, this
workaround is not used by default (see issue #1188).

contains(mouseevent)[source]

    
Test whether the mouse event occurred on the figure.

Returns

    
bool, {}

convert_xunits(x)[source]

    
Convert x using the unit type of the xaxis.

If the artist is not in contained in an Axes or if the xaxis does not have
units, x itself is returned.

convert_yunits(y)[source]

    
Convert y using the unit type of the yaxis.

If the artist is not in contained in an Axes or if the yaxis does not have
units, y itself is returned.

delaxes(ax)[source]

    
Remove the `Axes` ax from the figure; update the current Axes.

propertydpi

    
The resolution in dots per inch.

draw(renderer)[source]

    
Draw the Artist (and its children) using the given renderer.

This has no effect if the artist is not visible (`Artist.get_visible` returns
False).

Parameters

    
renderer`RendererBase` subclass.

#### Notes

This method is overridden in the Artist subclasses.

draw_artist(a)[source]

    
Draw `Artist` a only.

This method can only be used after an initial draw of the figure, because that
creates and caches the renderer needed here.

draw_without_rendering()[source]

    
Draw the figure with no output. Useful to get the final size of artists that
require a draw before their size is known (e.g. text).

execute_constrained_layout(renderer=None)[source]

    
Use `layoutgrid` to determine pos positions within Axes.

See also `set_constrained_layout_pads`.

Returns

    
layoutgridprivate debugging object

figimage(X, xo=0, yo=0, alpha=None, norm=None, cmap=None, vmin=None,
vmax=None, origin=None, resize=False, **kwargs)[source]

    
Add a non-resampled image to the figure.

The image is attached to the lower or upper left corner depending on origin.

Parameters

    
X

    
The image data. This is an array of one of the following shapes:

  * MxN: luminance (grayscale) values
  * MxNx3: RGB values
  * MxNx4: RGBA values

xo, yoint

    
The x/y image offset in pixels.

alphaNone or float

    
The alpha blending value.

norm`matplotlib.colors.Normalize`

    
A `Normalize` instance to map the luminance to the interval [0, 1].

cmapstr or `matplotlib.colors.Colormap`, default: `rcParams["image.cmap"]`
(default: `'viridis'`)

    
The colormap to use.

vmin, vmaxfloat

    
If norm is not given, these values set the data limits for the colormap.

origin{'upper', 'lower'}, default: `rcParams["image.origin"]` (default:
`'upper'`)

    
Indicates where the [0, 0] index of the array is in the upper left or lower
left corner of the axes.

resizebool

    
If True, resize the figure to match the given image size.

Returns

    
`matplotlib.image.FigureImage`

Other Parameters

    
**kwargs

    
Additional kwargs are `Artist` kwargs passed on to `FigureImage`.

#### Notes

figimage complements the Axes image (`imshow`) which will be resampled to fit
the current Axes. If you want a resampled image to fill the entire figure, you
can define an `Axes` with extent [0, 0, 1, 1].

#### Examples

    
    f = plt.figure()
    nx = int(f.get_figwidth() * f.dpi)
    ny = int(f.get_figheight() * f.dpi)
    data = np.random.random((ny, nx))
    f.figimage(data)
    plt.show()
    
findobj(match=None, include_self=True)[source]

    
Find artist objects.

Recursively find all `Artist` instances contained in the artist.

Parameters

    
match

    
A filter criterion for the matches. This can be

  * None: Return all objects contained in artist.
  * A function with signature `def match(artist: Artist) -> bool`. The result will only contain artists for which the function returns True.
  * A class instance: e.g., `Line2D`. The result will only contain artists of this class or its subclasses (`isinstance` check).

include_selfbool

    
Include self in the list to be checked for a match.

Returns

    
list of `Artist`

format_cursor_data(data)[source]

    
Return a string representation of data.

Note

This method is intended to be overridden by artist subclasses. As an end-user
of Matplotlib you will most likely not call this method yourself.

The default implementation converts ints and floats and arrays of ints and
floats into a comma-separated string enclosed in square brackets, unless the
artist has an associated colorbar, in which case scalar values are formatted
using the colorbar's formatter.

See also

`get_cursor_data`

propertyframeon

    
Return the figure's background patch visibility, i.e. whether the figure
background will be drawn. Equivalent to `Figure.patch.get_visible()`.

gca(**kwargs)[source]

    
Get the current Axes.

If there is currently no Axes on this Figure, a new one is created using
`Figure.add_subplot`. (To test whether there is currently an Axes on a Figure,
check whether `figure.axes` is empty. To test whether there is currently a
Figure on the pyplot figure stack, check whether `pyplot.get_fignums()` is
empty.)

The following kwargs are supported for ensuring the returned Axes adheres to
the given projection etc., and for Axes creation if the active Axes does not
exist:

Property | Description  
---|---  
`adjustable` | {'box', 'datalim'}  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`anchor` | (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  
`animated` | bool  
`aspect` | {'auto', 'equal'} or float  
`autoscale_on` | bool  
`autoscalex_on` | bool  
`autoscaley_on` | bool  
`axes_locator` | Callable[[Axes, Renderer], Bbox]  
`axisbelow` | bool or 'line'  
`box_aspect` | float or None  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`facecolor` or fc | color  
`figure` | `Figure`  
`frame_on` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`navigate` | bool  
`navigate_mode` | unknown  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | [left, bottom, width, height] or `Bbox`  
`prop_cycle` | unknown  
`rasterization_zorder` | float or None  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`title` | str  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`xbound` | unknown  
`xlabel` | str  
`xlim` | (bottom: float, top: float)  
`xmargin` | float greater than -0.5  
`xscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`xticklabels` | unknown  
`xticks` | unknown  
`ybound` | unknown  
`ylabel` | str  
`ylim` | (bottom: float, top: float)  
`ymargin` | float greater than -0.5  
`yscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`yticklabels` | unknown  
`yticks` | unknown  
`zorder` | float  
get_agg_filter()[source]

    
Return filter function to be used for agg filter.

get_alpha()[source]

    
Return the alpha value used for blending - not supported on all backends.

get_animated()[source]

    
Return whether the artist is animated.

get_axes()[source]

    
List of Axes in the Figure. You can access and modify the Axes in the Figure
through this list.

Do not modify the list itself. Instead, use `add_axes`, `add_subplot` or
`delaxes` to add or remove an Axes.

Note: The `Figure.axes` property and `get_axes` method are equivalent.

get_children()[source]

    
Get a list of artists contained in the figure.

get_clip_box()[source]

    
Return the clipbox.

get_clip_on()[source]

    
Return whether the artist uses clipping.

get_clip_path()[source]

    
Return the clip path.

get_constrained_layout()[source]

    
Return whether constrained layout is being used.

See Constrained Layout Guide.

get_constrained_layout_pads(relative=False)[source]

    
Get padding for `constrained_layout`.

Returns a list of `w_pad, h_pad` in inches and `wspace` and `hspace` as
fractions of the subplot.

See Constrained Layout Guide.

Parameters

    
relativebool

    
If `True`, then convert from inches to figure relative.

get_cursor_data(event)[source]

    
Return the cursor data for a given event.

Note

This method is intended to be overridden by artist subclasses. As an end-user
of Matplotlib you will most likely not call this method yourself.

Cursor data can be used by Artists to provide additional context information
for a given event. The default implementation just returns None.

Subclasses can override the method and return arbitrary data. However, when
doing so, they must ensure that `format_cursor_data` can convert the data to a
string representation.

The only current use case is displaying the z-value of an `AxesImage` in the
status bar of a plot window, while moving the mouse.

Parameters

    
event`matplotlib.backend_bases.MouseEvent`

See also

`format_cursor_data`

get_default_bbox_extra_artists()[source]

get_dpi()[source]

    
Return the resolution in dots per inch as a float.

get_edgecolor()[source]

    
Get the edge color of the Figure rectangle.

get_facecolor()[source]

    
Get the face color of the Figure rectangle.

get_figheight()[source]

    
Return the figure height in inches.

get_figure()[source]

    
Return the `Figure` instance the artist belongs to.

get_figwidth()[source]

    
Return the figure width in inches.

get_frameon()[source]

    
Return the figure's background patch visibility, i.e. whether the figure
background will be drawn. Equivalent to `Figure.patch.get_visible()`.

get_gid()[source]

    
Return the group id.

get_in_layout()[source]

    
Return boolean flag, `True` if artist is included in layout calculations.

E.g. Constrained Layout Guide, `Figure.tight_layout()`, and
`fig.savefig(fname, bbox_inches='tight')`.

get_label()[source]

    
Return the label used for this artist in the legend.

get_linewidth()[source]

    
Get the line width of the Figure rectangle.

get_path_effects()[source]

get_picker()[source]

    
Return the picking behavior of the artist.

The possible values are described in `set_picker`.

See also

`set_picker`, `pickable`, `pick`

get_rasterized()[source]

    
Return whether the artist is to be rasterized.

get_size_inches()[source]

    
Return the current size of the figure in inches.

Returns

    
ndarray

    
The size (width, height) of the figure in inches.

See also

`matplotlib.figure.Figure.set_size_inches`

`matplotlib.figure.Figure.get_figwidth`

`matplotlib.figure.Figure.get_figheight`

#### Notes

The size in pixels can be obtained by multiplying with `Figure.dpi`.

get_sketch_params()[source]

    
Return the sketch parameters for the artist.

Returns

    
tuple or None

    
A 3-tuple with the following elements:

  * scale: The amplitude of the wiggle perpendicular to the source line.
  * length: The length of the wiggle along the line.
  * randomness: The scale factor by which the length is shrunken or expanded.

Returns None if no sketch parameters were set.

get_snap()[source]

    
Return the snap setting.

See `set_snap` for details.

get_tight_layout()[source]

    
Return whether `tight_layout` is called when drawing.

get_tightbbox(renderer, bbox_extra_artists=None)[source]

    
Return a (tight) bounding box of the figure in inches.

Note that `FigureBase` differs from all other artists, which return their
`Bbox` in pixels.

Artists that have `artist.set_in_layout(False)` are not included in the bbox.

Parameters

    
renderer`RendererBase` subclass

    
renderer that will be used to draw the figures (i.e.
`fig.canvas.get_renderer()`)

bbox_extra_artistslist of `Artist` or `None`

    
List of artists to include in the tight bounding box. If `None` (default),
then all artist children of each Axes are included in the tight bounding box.

Returns

    
`BboxBase`

    
containing the bounding box (in figure inches).

get_transform()[source]

    
Return the `Transform` instance used by this artist.

get_transformed_clip_path_and_affine()[source]

    
Return the clip path with the non-affine part of its transformation applied,
and the remaining affine part of its transformation.

get_url()[source]

    
Return the url.

get_visible()[source]

    
Return the visibility.

get_window_extent(*args, **kwargs)[source]

    
Get the artist's bounding box in display space.

The bounding box' width and height are nonnegative.

Subclasses should override for inclusion in the bounding box "tight"
calculation. Default is to return an empty bounding box at 0, 0.

Be careful when using this function, the results will not update if the artist
window extent of the artist changes. The extent can change due to any changes
in the transform stack, such as changing the axes limits, the figure size, or
the canvas used (as is done when saving a figure). This can lead to unexpected
behavior where interactive figures will look fine on the screen, but will save
incorrectly.

get_zorder()[source]

    
Return the artist's zorder.

ginput(n=1, timeout=30, show_clicks=True, mouse_add=MouseButton.LEFT,
mouse_pop=MouseButton.RIGHT, mouse_stop=MouseButton.MIDDLE)[source]

    
Blocking call to interact with a figure.

Wait until the user clicks n times on the figure, and return the coordinates
of each click in a list.

There are three possible interactions:

  * Add a point.
  * Remove the most recently added point.
  * Stop the interaction and return the points added so far.

The actions are assigned to mouse buttons via the arguments mouse_add,
mouse_pop and mouse_stop.

Parameters

    
nint, default: 1

    
Number of mouse clicks to accumulate. If negative, accumulate clicks until the
input is terminated manually.

timeoutfloat, default: 30 seconds

    
Number of seconds to wait before timing out. If zero or negative will never
timeout.

show_clicksbool, default: True

    
If True, show a red cross at the location of each click.

mouse_add`MouseButton` or None, default: `MouseButton.LEFT`

    
Mouse button used to add points.

mouse_pop`MouseButton` or None, default: `MouseButton.RIGHT`

    
Mouse button used to remove the most recently added point.

mouse_stop`MouseButton` or None, default: `MouseButton.MIDDLE`

    
Mouse button used to stop input.

Returns

    
list of tuples

    
A list of the clicked (x, y) coordinates.

#### Notes

The keyboard can also be used to select points in case your mouse does not
have one or more of the buttons. The delete and backspace keys act like right
clicking (i.e., remove last point), the enter key terminates input and any
other key (not already used by the window manager) selects a point.

have_units()[source]

    
Return whether units are set on any axis.

is_transform_set()[source]

    
Return whether the Artist has an explicitly set transform.

This is True after `set_transform` has been called.

legend(*args, **kwargs)[source]

    
Place a legend on the figure.

Call signatures:

    
    legend()
    legend(handles, labels)
    legend(handles=handles)
    legend(labels)
    
The call signatures correspond to the following different ways to use this
method:

1\. Automatic detection of elements to be shown in the legend

The elements to be added to the legend are automatically determined, when you
do not pass in any extra arguments.

In this case, the labels are taken from the artist. You can specify them
either at artist creation or by calling the `set_label()` method on the
artist:

    
    ax.plot([1, 2, 3], label='Inline label')
    fig.legend()
    
or:

    
    line, = ax.plot([1, 2, 3])
    line.set_label('Label via method')
    fig.legend()
    
Specific lines can be excluded from the automatic legend element selection by
defining a label starting with an underscore. This is default for all artists,
so calling `Figure.legend` without any arguments and without setting the
labels manually will result in no legend being drawn.

2\. Explicitly listing the artists and labels in the legend

For full control of which artists have a legend entry, it is possible to pass
an iterable of legend artists followed by an iterable of legend labels
respectively:

    
    fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])
    
3\. Explicitly listing the artists in the legend

This is similar to 2, but the labels are taken from the artists' label
properties. Example:

    
    line1, = ax1.plot([1, 2, 3], label='label1')
    line2, = ax2.plot([1, 2, 3], label='label2')
    fig.legend(handles=[line1, line2])
    
4\. Labeling existing plot elements

Discouraged

This call signature is discouraged, because the relation between plot elements
and labels is only implicit by their order and can easily be mixed up.

To make a legend for all artists on all Axes, call this function with an
iterable of strings, one for each legend item. For example:

    
    fig, (ax1, ax2)  = plt.subplots(1, 2)
    ax1.plot([1, 3, 5], color='blue')
    ax2.plot([2, 4, 6], color='red')
    fig.legend(['the blues', 'the reds'])
    
Parameters

    
handleslist of `Artist`, optional

    
A list of Artists (lines, patches) to be added to the legend. Use this
together with labels, if you need full control on what is shown in the legend
and the automatic mechanism described above is not sufficient.

The length of handles and labels should be the same in this case. If they are
not, they are truncated to the smaller length.

labelslist of str, optional

    
A list of labels to show next to the artists. Use this together with handles,
if you need full control on what is shown in the legend and the automatic
mechanism described above is not sufficient.

Returns

    
`Legend`

Other Parameters

    
locstr or pair of floats, default: `rcParams["legend.loc"]` (default:
`'best'`) ('best' for axes, 'upper right' for figures)

    
The location of the legend.

The strings `'upper left', 'upper right', 'lower left', 'lower right'` place
the legend at the corresponding corner of the axes/figure.

The strings `'upper center', 'lower center', 'center left', 'center right'`
place the legend at the center of the corresponding edge of the axes/figure.

The string `'center'` places the legend at the center of the axes/figure.

The string `'best'` places the legend at the location, among the nine
locations defined so far, with the minimum overlap with other drawn artists.
This option can be quite slow for plots with large amounts of data; your
plotting speed may benefit from providing a specific location.

The location can also be a 2-tuple giving the coordinates of the lower-left
corner of the legend in axes coordinates (in which case bbox_to_anchor will be
ignored).

For back-compatibility, `'center right'` (but no other location) can also be
spelled `'right'`, and each "string" locations can also be given as a numeric
value:

Location String | Location Code  
---|---  
'best' | 0  
'upper right' | 1  
'upper left' | 2  
'lower left' | 3  
'lower right' | 4  
'right' | 5  
'center left' | 6  
'center right' | 7  
'lower center' | 8  
'upper center' | 9  
'center' | 10  
bbox_to_anchor`BboxBase`, 2-tuple, or 4-tuple of floats

    
Box that is used to position the legend in conjunction with loc. Defaults to
`axes.bbox` (if called as a method to `Axes.legend`) or `figure.bbox` (if
`Figure.legend`). This argument allows arbitrary placement of the legend.

Bbox coordinates are interpreted in the coordinate system given by
bbox_transform, with the default transform Axes or Figure coordinates,
depending on which `legend` is called.

If a 4-tuple or `BboxBase` is given, then it specifies the bbox `(x, y, width,
height)` that the legend is placed in. To put the legend in the best location
in the bottom right quadrant of the axes (or figure):

    
    loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)
    
A 2-tuple `(x, y)` places the corner of the legend specified by loc at x, y.
For example, to put the legend's upper right-hand corner in the center of the
axes (or figure) the following keywords can be used:

    
    loc='upper right', bbox_to_anchor=(0.5, 0.5)
    
ncolint, default: 1

    
The number of columns that the legend has.

propNone or `matplotlib.font_manager.FontProperties` or dict

    
The font properties of the legend. If None (default), the current
`matplotlib.rcParams` will be used.

fontsizeint or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large',
'xx-large'}

    
The font size of the legend. If the value is numeric the size will be the
absolute font size in points. String values are relative to the current
default font size. This argument is only used if prop is not specified.

labelcolorstr or list, default: `rcParams["legend.labelcolor"]` (default:
`'None'`)

    
The color of the text in the legend. Either a valid color string (for example,
'red'), or a list of color strings. The labelcolor can also be made to match
the color of the line or marker using 'linecolor', 'markerfacecolor' (or
'mfc'), or 'markeredgecolor' (or 'mec').

Labelcolor can be set globally using `rcParams["legend.labelcolor"]` (default:
`'None'`). If None, use `rcParams["text.color"]` (default: `'black'`).

numpointsint, default: `rcParams["legend.numpoints"]` (default: `1`)

    
The number of marker points in the legend when creating a legend entry for a
`Line2D` (line).

scatterpointsint, default: `rcParams["legend.scatterpoints"]` (default: `1`)

    
The number of marker points in the legend when creating a legend entry for a
`PathCollection` (scatter plot).

scatteryoffsetsiterable of floats, default: `[0.375, 0.5, 0.3125]`

    
The vertical offset (relative to the font size) for the markers created for a
scatter plot legend entry. 0.0 is at the base the legend text, and 1.0 is at
the top. To draw all markers at the same height, set to `[0.5]`.

markerscalefloat, default: `rcParams["legend.markerscale"]` (default: `1.0`)

    
The relative size of legend markers compared with the originally drawn ones.

markerfirstbool, default: True

    
If True, legend marker is placed to the left of the legend label. If False,
legend marker is placed to the right of the legend label.

frameonbool, default: `rcParams["legend.frameon"]` (default: `True`)

    
Whether the legend should be drawn on a patch (frame).

fancyboxbool, default: `rcParams["legend.fancybox"]` (default: `True`)

    
Whether round edges should be enabled around the `FancyBboxPatch` which makes
up the legend's background.

shadowbool, default: `rcParams["legend.shadow"]` (default: `False`)

    
Whether to draw a shadow behind the legend.

framealphafloat, default: `rcParams["legend.framealpha"]` (default: `0.8`)

    
The alpha transparency of the legend's background. If shadow is activated and
framealpha is `None`, the default value is ignored.

facecolor"inherit" or color, default: `rcParams["legend.facecolor"]` (default:
`'inherit'`)

    
The legend's background color. If `"inherit"`, use
`rcParams["axes.facecolor"]` (default: `'white'`).

edgecolor"inherit" or color, default: `rcParams["legend.edgecolor"]` (default:
`'0.8'`)

    
The legend's background patch edge color. If `"inherit"`, use take
`rcParams["axes.edgecolor"]` (default: `'black'`).

mode{"expand", None}

    
If mode is set to `"expand"` the legend will be horizontally expanded to fill
the axes area (or bbox_to_anchor if defines the legend's size).

bbox_transformNone or `matplotlib.transforms.Transform`

    
The transform for the bounding box (bbox_to_anchor). For a value of `None`
(default) the Axes' `transAxes` transform will be used.

titlestr or None

    
The legend's title. Default is no title (`None`).

title_fontpropertiesNone or `matplotlib.font_manager.FontProperties` or dict

    
The font properties of the legend's title. If None (default), the
title_fontsize argument will be used if present; if title_fontsize is also
None, the current `rcParams["legend.title_fontsize"]` (default: `None`) will
be used.

title_fontsizeint or {'xx-small', 'x-small', 'small', 'medium', 'large',
'x-large', 'xx-large'}, default: `rcParams["legend.title_fontsize"]` (default:
`None`)

    
The font size of the legend's title. Note: This cannot be combined with
title_fontproperties. If you want to set the fontsize alongside other font
properties, use the size parameter in title_fontproperties.

borderpadfloat, default: `rcParams["legend.borderpad"]` (default: `0.4`)

    
The fractional whitespace inside the legend border, in font-size units.

labelspacingfloat, default: `rcParams["legend.labelspacing"]` (default: `0.5`)

    
The vertical space between the legend entries, in font-size units.

handlelengthfloat, default: `rcParams["legend.handlelength"]` (default: `2.0`)

    
The length of the legend handles, in font-size units.

handleheightfloat, default: `rcParams["legend.handleheight"]` (default: `0.7`)

    
The height of the legend handles, in font-size units.

handletextpadfloat, default: `rcParams["legend.handletextpad"]` (default:
`0.8`)

    
The pad between the legend handle and text, in font-size units.

borderaxespadfloat, default: `rcParams["legend.borderaxespad"]` (default:
`0.5`)

    
The pad between the axes and legend border, in font-size units.

columnspacingfloat, default: `rcParams["legend.columnspacing"]` (default:
`2.0`)

    
The spacing between columns, in font-size units.

handler_mapdict or None

    
The custom dictionary mapping instances or types to a legend handler. This
handler_map updates the default handler map found at
`matplotlib.legend.Legend.get_legend_handler_map`.

See also

`Axes.legend`

#### Notes

Some artists are not supported by this function. See Legend guide for details.

propertymouseover

    
If this property is set to True, the artist will be queried for custom context
information when the mouse cursor moves over it.

See also `get_cursor_data()`, `ToolCursorPosition` and `NavigationToolbar2`.

pchanged()[source]

    
Call all of the registered callbacks.

This function is triggered internally when a property is changed.

See also

`add_callback`

`remove_callback`

pick(mouseevent)[source]

    
Process a pick event.

Each child artist will fire a pick event if mouseevent is over the artist and
the artist has picker set.

See also

`set_picker`, `get_picker`, `pickable`

pickable()[source]

    
Return whether the artist is pickable.

See also

`set_picker`, `get_picker`, `pick`

properties()[source]

    
Return a dictionary of all the properties of the artist.

remove()[source]

    
Remove the artist from the figure if possible.

The effect will not be visible until the figure is redrawn, e.g., with
`FigureCanvasBase.draw_idle`. Call `relim` to update the axes limits if
desired.

Note: `relim` will not see collections even if the collection was added to the
axes with autolim = True.

Note: there is no support for removing the artist's legend entry.

remove_callback(oid)[source]

    
Remove a callback based on its observer id.

See also

`add_callback`

savefig(fname, *, transparent=None, **kwargs)[source]

    
Save the current figure.

Call signature:

    
    savefig(fname, *, dpi='figure', format=None, metadata=None,
            bbox_inches=None, pad_inches=0.1,
            facecolor='auto', edgecolor='auto',
            backend=None, **kwargs
           )
    
The available output formats depend on the backend being used.

Parameters

    
fnamestr or path-like or binary file-like

    
A path, or a Python file-like object, or possibly some backend-dependent
object such as `matplotlib.backends.backend_pdf.PdfPages`.

If format is set, it determines the output format, and the file is saved as
fname. Note that fname is used verbatim, and there is no attempt to make the
extension, if any, of fname match format, and no extension is appended.

If format is not set, then the format is inferred from the extension of fname,
if there is one. If format is not set and fname has no extension, then the
file is saved with `rcParams["savefig.format"]` (default: `'png'`) and the
appropriate extension is appended to fname.

Other Parameters

    
dpifloat or 'figure', default: `rcParams["savefig.dpi"]` (default: `'figure'`)

    
The resolution in dots per inch. If 'figure', use the figure's dpi value.

formatstr

    
The file format, e.g. 'png', 'pdf', 'svg', ... The behavior when this is unset
is documented under fname.

metadatadict, optional

    
Key/value pairs to store in the image metadata. The supported keys and
defaults depend on the image format and backend:

  * 'png' with Agg backend: See the parameter `metadata` of `print_png`.
  * 'pdf' with pdf backend: See the parameter `metadata` of `PdfPages`.
  * 'svg' with svg backend: See the parameter `metadata` of `print_svg`.
  * 'eps' and 'ps' with PS backend: Only 'Creator' is supported.

bbox_inchesstr or `Bbox`, default: `rcParams["savefig.bbox"]` (default:
`None`)

    
Bounding box in inches: only the given portion of the figure is saved. If
'tight', try to figure out the tight bbox of the figure.

pad_inchesfloat, default: `rcParams["savefig.pad_inches"]` (default: `0.1`)

    
Amount of padding around the figure when bbox_inches is 'tight'.

facecolorcolor or 'auto', default: `rcParams["savefig.facecolor"]` (default:
`'auto'`)

    
The facecolor of the figure. If 'auto', use the current figure facecolor.

edgecolorcolor or 'auto', default: `rcParams["savefig.edgecolor"]` (default:
`'auto'`)

    
The edgecolor of the figure. If 'auto', use the current figure edgecolor.

backendstr, optional

    
Use a non-default backend to render the file, e.g. to render a png file with
the "cairo" backend rather than the default "agg", or a pdf file with the
"pgf" backend rather than the default "pdf". Note that the default backend is
normally sufficient. See The builtin backends for a list of valid backends for
each file format. Custom backends can be referenced as "module://...".

orientation{'landscape', 'portrait'}

    
Currently only supported by the postscript backend.

papertypestr

    
One of 'letter', 'legal', 'executive', 'ledger', 'a0' through 'a10', 'b0'
through 'b10'. Only supported for postscript output.

transparentbool

    
If True, the Axes patches will all be transparent; the Figure patch will also
be transparent unless facecolor and/or edgecolor are specified via kwargs.

If False has no effect and the color of the Axes and Figure patches are
unchanged (unless the Figure patch is specified via the facecolor and/or
edgecolor keyword arguments in which case those colors are used).

The transparency of these patches will be restored to their original values
upon exit of this function.

This is useful, for example, for displaying a plot on top of a colored
background on a web page.

bbox_extra_artistslist of `Artist`, optional

    
A list of extra artists that will be considered when the tight bbox is
calculated.

pil_kwargsdict, optional

    
Additional keyword arguments that are passed to `PIL.Image.Image.save` when
saving the figure.

sca(a)[source]

    
Set the current Axes to be a and return a.

set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, canvas=<UNSET>,
clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>,
constrained_layout=<UNSET>, constrained_layout_pads=<UNSET>, dpi=<UNSET>,
edgecolor=<UNSET>, facecolor=<UNSET>, figheight=<UNSET>, figwidth=<UNSET>,
frameon=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>,
linewidth=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>,
size_inches=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>,
tight_layout=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>,
zorder=<UNSET>)[source]

    
Set multiple properties at once.

Supported properties are

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`canvas` | FigureCanvas  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`constrained_layout` | bool or dict or None  
`constrained_layout_pads` | float, default: `rcParams["figure.constrained_layout.w_pad"]` (default: `0.04167`)  
`dpi` | float  
`edgecolor` | color  
`facecolor` | color  
`figheight` | float  
`figure` | `Figure`  
`figwidth` | float  
`frameon` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`linewidth` | number  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`rasterized` | bool  
`size_inches` | (float, float) or float  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`tight_layout` | bool or dict with keys "pad", "w_pad", "h_pad", "rect" or None  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`zorder` | float  
set_agg_filter(filter_func)[source]

    
Set the agg filter.

Parameters

    
filter_funccallable

    
A filter function, which takes a (m, n, 3) float array and a dpi value, and
returns a (m, n, 3) array.

set_alpha(alpha)[source]

    
Set the alpha value used for blending - not supported on all backends.

Parameters

    
alphascalar or None

    
alpha must be within the 0-1 range, inclusive.

set_animated(b)[source]

    
Set whether the artist is intended to be used in an animation.

If True, the artist is excluded from regular drawing of the figure. You have
to call `Figure.draw_artist` / `Axes.draw_artist` explicitly on the artist.
This appoach is used to speed up animations using blitting.

See also `matplotlib.animation` and Faster rendering by using blitting.

Parameters

    
bbool

set_canvas(canvas)[source]

    
Set the canvas that contains the figure

Parameters

    
canvasFigureCanvas

set_clip_box(clipbox)[source]

    
Set the artist's clip `Bbox`.

Parameters

    
clipbox`Bbox`

set_clip_on(b)[source]

    
Set whether the artist uses clipping.

When False artists will be visible outside of the axes which can lead to
unexpected results.

Parameters

    
bbool

set_clip_path(path, transform=None)[source]

    
Set the artist's clip path.

Parameters

    
path`Patch` or `Path` or `TransformedPath` or None

    
The clip path. If given a `Path`, transform must be provided as well. If None,
a previously set clip path is removed.

transform`Transform`, optional

    
Only used if path is a `Path`, in which case the given `Path` is converted to
a `TransformedPath` using transform.

#### Notes

For efficiency, if path is a `Rectangle` this method will set the clipping box
to the corresponding rectangle and set the clipping path to `None`.

For technical reasons (support of `set`), a tuple (path, transform) is also
accepted as a single positional parameter.

set_constrained_layout(constrained)[source]

    
Set whether `constrained_layout` is used upon drawing. If None,
`rcParams["figure.constrained_layout.use"]` (default: `False`) value will be
used.

When providing a dict containing the keys `w_pad`, `h_pad` the default
`constrained_layout` paddings will be overridden. These pads are in inches and
default to 3.0/72.0. `w_pad` is the width padding and `h_pad` is the height
padding.

See Constrained Layout Guide.

Parameters

    
constrainedbool or dict or None

set_constrained_layout_pads(*, w_pad=None, h_pad=None, wspace=None,
hspace=None)[source]

    
Set padding for `constrained_layout`.

Tip: The parameters can be passed from a dictionary by using
`fig.set_constrained_layout(**pad_dict)`.

See Constrained Layout Guide.

Parameters

    
w_padfloat, default: `rcParams["figure.constrained_layout.w_pad"]` (default:
`0.04167`)

    
Width padding in inches. This is the pad around Axes and is meant to make sure
there is enough room for fonts to look good. Defaults to 3 pts = 0.04167
inches

h_padfloat, default: `rcParams["figure.constrained_layout.h_pad"]` (default:
`0.04167`)

    
Height padding in inches. Defaults to 3 pts.

wspacefloat, default: `rcParams["figure.constrained_layout.wspace"]` (default:
`0.02`)

    
Width padding between subplots, expressed as a fraction of the subplot width.
The total padding ends up being w_pad + wspace.

hspacefloat, default: `rcParams["figure.constrained_layout.hspace"]` (default:
`0.02`)

    
Height padding between subplots, expressed as a fraction of the subplot width.
The total padding ends up being h_pad + hspace.

set_dpi(val)[source]

    
Set the resolution of the figure in dots-per-inch.

Parameters

    
valfloat

set_edgecolor(color)[source]

    
Set the edge color of the Figure rectangle.

Parameters

    
colorcolor

set_facecolor(color)[source]

    
Set the face color of the Figure rectangle.

Parameters

    
colorcolor

set_figheight(val, forward=True)[source]

    
Set the height of the figure in inches.

Parameters

    
valfloat

forwardbool

    
See `set_size_inches`.

See also

`matplotlib.figure.Figure.set_figwidth`

`matplotlib.figure.Figure.set_size_inches`

set_figure(fig)[source]

    
Set the `Figure` instance the artist belongs to.

Parameters

    
fig`Figure`

set_figwidth(val, forward=True)[source]

    
Set the width of the figure in inches.

Parameters

    
valfloat

forwardbool

    
See `set_size_inches`.

See also

`matplotlib.figure.Figure.set_figheight`

`matplotlib.figure.Figure.set_size_inches`

set_frameon(b)[source]

    
Set the figure's background patch visibility, i.e. whether the figure
background will be drawn. Equivalent to `Figure.patch.set_visible()`.

Parameters

    
bbool

set_gid(gid)[source]

    
Set the (group) id for the artist.

Parameters

    
gidstr

set_in_layout(in_layout)[source]

    
Set if artist is to be included in layout calculations, E.g. Constrained
Layout Guide, `Figure.tight_layout()`, and `fig.savefig(fname,
bbox_inches='tight')`.

Parameters

    
in_layoutbool

set_label(s)[source]

    
Set a label that will be displayed in the legend.

Parameters

    
sobject

    
s will be converted to a string by calling `str`.

set_linewidth(linewidth)[source]

    
Set the line width of the Figure rectangle.

Parameters

    
linewidthnumber

set_path_effects(path_effects)[source]

    
Set the path effects.

Parameters

    
path_effects`AbstractPathEffect`

set_picker(picker)[source]

    
Define the picking behavior of the artist.

Parameters

    
pickerNone or bool or float or callable

    
This can be one of the following:

  * None: Picking is disabled for this artist (default).
  * A boolean: If True then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist.
  * A float: If picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if its data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event
  * A function: If picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:
        hit, props = picker(artist, mouseevent)
    
to determine the hit test. if the mouse event is over the artist, return
hit=True and props is a dictionary of properties you want added to the
PickEvent attributes.

set_rasterized(rasterized)[source]

    
Force rasterized (bitmap) drawing for vector graphics output.

Rasterized drawing is not supported by all artists. If you try to enable this
on an artist that does not support it, the command has no effect and a warning
will be issued.

This setting is ignored for pixel-based output.

See also Rasterization for vector graphics.

Parameters

    
rasterizedbool

set_size_inches(w, h=None, forward=True)[source]

    
Set the figure size in inches.

Call signatures:

    
    fig.set_size_inches(w, h)  # OR
    fig.set_size_inches((w, h))
    
Parameters

    
w(float, float) or float

    
Width and height in inches (if height not specified as a separate argument) or
width.

hfloat

    
Height in inches.

forwardbool, default: True

    
If `True`, the canvas size is automatically updated, e.g., you can resize the
figure window from the shell.

See also

`matplotlib.figure.Figure.get_size_inches`

`matplotlib.figure.Figure.set_figwidth`

`matplotlib.figure.Figure.set_figheight`

#### Notes

To transform from pixels to inches divide by `Figure.dpi`.

set_sketch_params(scale=None, length=None, randomness=None)[source]

    
Set the sketch parameters.

Parameters

    
scalefloat, optional

    
The amplitude of the wiggle perpendicular to the source line, in pixels. If
scale is `None`, or not provided, no sketch filter will be provided.

lengthfloat, optional

    
The length of the wiggle along the line, in pixels (default 128.0)

randomnessfloat, optional

    
The scale factor by which the length is shrunken or expanded (default 16.0)

The PGF backend uses this argument as an RNG seed and not as described above.
Using the same seed yields the same random shape.

set_snap(snap)[source]

    
Set the snapping behavior.

Snapping aligns positions with the pixel grid, which results in clearer
images. For example, if a black line of 1px width was defined at a position in
between two pixels, the resulting image would contain the interpolated value
of that line in the pixel grid, which would be a grey value on both adjacent
pixel positions. In contrast, snapping will move the line to the nearest
integer pixel value, so that the resulting image will really contain a 1px
wide black line.

Snapping is currently only supported by the Agg and MacOSX backends.

Parameters

    
snapbool or None

    
Possible values:

  * True: Snap vertices to the nearest pixel center.
  * False: Do not modify vertex positions.
  * None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center.

set_tight_layout(tight)[source]

    
Set whether and how `tight_layout` is called when drawing.

Parameters

    
tightbool or dict with keys "pad", "w_pad", "h_pad", "rect" or None

    
If a bool, sets whether to call `tight_layout` upon drawing. If `None`, use
`rcParams["figure.autolayout"]` (default: `False`) instead. If a dict, pass it
as kwargs to `tight_layout`, overriding the default paddings.

set_transform(t)[source]

    
Set the artist transform.

Parameters

    
t`Transform`

set_url(url)[source]

    
Set the url for the artist.

Parameters

    
urlstr

set_visible(b)[source]

    
Set the artist's visibility.

Parameters

    
bbool

set_zorder(level)[source]

    
Set the zorder for the artist. Artists with lower zorder values are drawn
first.

Parameters

    
levelfloat

show(warn=True)[source]

    
If using a GUI backend with pyplot, display the figure window.

If the figure was not created using `figure`, it will lack a
`FigureManagerBase`, and this method will raise an AttributeError.

Warning

This does not manage an GUI event loop. Consequently, the figure may only be
shown briefly or not shown at all if you or your environment are not managing
an event loop.

Proper use cases for `Figure.show` include running this from a GUI application
or an IPython shell.

If you're running a pure python shell or executing a non-GUI python script,
you should use `matplotlib.pyplot.show` instead, which takes care of managing
the event loop for you.

Parameters

    
warnbool, default: True

    
If `True` and we are not running headless (i.e. on Linux with an unset
DISPLAY), issue warning when called on a non-GUI backend.

propertystale

    
Whether the artist is 'stale' and needs to be re-drawn for the output to match
the internal state of the artist.

propertysticky_edges

    
`x` and `y` sticky edge lists for autoscaling.

When performing autoscaling, if a data limit coincides with a value in the
corresponding sticky_edges list, then no margin will be added--the view limit
"sticks" to the edge. A typical use case is histograms, where one usually
expects no margin on the bottom edge (0) of the histogram.

Moreover, margin expansion "bumps" against sticky edges and cannot cross them.
For example, if the upper data limit is 1.0, the upper view limit computed by
simple margin application is 1.2, but there is a sticky edge at 1.1, then the
actual upper view limit will be 1.1.

This attribute cannot be assigned to; however, the `x` and `y` lists can be
modified in place as needed.

#### Examples

    
    >>> artist.sticky_edges.x[:] = (xmin, xmax)
    >>> artist.sticky_edges.y[:] = (ymin, ymax)
    
subfigures(nrows=1, ncols=1, squeeze=True, wspace=None, hspace=None,
width_ratios=None, height_ratios=None, **kwargs)[source]

    
Add a subfigure to this figure or subfigure.

A subfigure has the same artist methods as a figure, and is logically the same
as a figure, but cannot print itself. See Figure subfigures.

Parameters

    
nrows, ncolsint, default: 1

    
Number of rows/columns of the subfigure grid.

squeezebool, default: True

    
If True, extra dimensions are squeezed out from the returned array of
subfigures.

wspace, hspacefloat, default: None

    
The amount of width/height reserved for space between subfigures, expressed as
a fraction of the average subfigure width/height. If not given, the values
will be inferred from a figure or rcParams when necessary.

width_ratiosarray-like of length ncols, optional

    
Defines the relative widths of the columns. Each column gets a relative width
of `width_ratios[i] / sum(width_ratios)`. If not given, all columns will have
the same width.

height_ratiosarray-like of length nrows, optional

    
Defines the relative heights of the rows. Each row gets a relative height of
`height_ratios[i] / sum(height_ratios)`. If not given, all rows will have the
same height.

subplot_mosaic(mosaic, *, sharex=False, sharey=False, subplot_kw=None,
gridspec_kw=None, empty_sentinel='.')[source]

    
Build a layout of Axes based on ASCII art or nested lists.

This is a helper function to build complex GridSpec layouts visually.

Note

This API is provisional and may be revised in the future based on early user
feedback.

Parameters

    
mosaiclist of list of {hashable or nested} or str

    
A visual layout of how you want your Axes to be arranged labeled as strings.
For example

    
    x = [['A panel', 'A panel', 'edge'],
         ['C panel', '.',       'edge']]
    
produces 4 Axes:

  * 'A panel' which is 1 row high and spans the first two columns
  * 'edge' which is 2 rows high and is on the right edge
  * 'C panel' which in 1 row and 1 column wide in the bottom left
  * a blank space 1 row and 1 column wide in the bottom center

Any of the entries in the layout can be a list of lists of the same form to
create nested layouts.

If input is a str, then it can either be a multi-line string of the form

    
    '''
    AAE
    C.E
    '''
    
where each character is a column and each line is a row. Or it can be a
single-line string where rows are separated by `;`:

    
    'AB;CC'
    
The string notation allows only single character Axes labels and does not
support nesting but is very terse.

sharex, shareybool, default: False

    
If True, the x-axis (sharex) or y-axis (sharey) will be shared among all
subplots. In that case, tick label visibility and axis units behave as for
`subplots`. If False, each subplot's x- or y-axis will be independent.

subplot_kwdict, optional

    
Dictionary with keywords passed to the `Figure.add_subplot` call used to
create each subplot.

gridspec_kwdict, optional

    
Dictionary with keywords passed to the `GridSpec` constructor used to create
the grid the subplots are placed on.

empty_sentinelobject, optional

    
Entry in the layout to mean "leave this space empty". Defaults to `'.'`. Note,
if layout is a string, it is processed via `inspect.cleandoc` to remove
leading white space, which may interfere with using white-space as the empty
sentinel.

Returns

    
dict[label, Axes]

    
A dictionary mapping the labels to the Axes objects. The order of the axes is
left-to-right and top-to-bottom of their position in the total layout.

subplots(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True,
subplot_kw=None, gridspec_kw=None)[source]

    
Add a set of subplots to this figure.

This utility wrapper makes it convenient to create common layouts of subplots
in a single call.

Parameters

    
nrows, ncolsint, default: 1

    
Number of rows/columns of the subplot grid.

sharex, shareybool or {'none', 'all', 'row', 'col'}, default: False

    
Controls sharing of x-axis (sharex) or y-axis (sharey):

  * True or 'all': x- or y-axis will be shared among all subplots.
  * False or 'none': each subplot x- or y-axis will be independent.
  * 'row': each subplot row will share an x- or y-axis.
  * 'col': each subplot column will share an x- or y-axis.

When subplots have a shared x-axis along a column, only the x tick labels of
the bottom subplot are created. Similarly, when subplots have a shared y-axis
along a row, only the y tick labels of the first column subplot are created.
To later turn other subplots' ticklabels on, use `tick_params`.

When subplots have a shared axis that has units, calling `Axis.set_units` will
update each axis with the new units.

squeezebool, default: True

    
  * If True, extra dimensions are squeezed out from the returned array of Axes:
    * if only one subplot is constructed (nrows=ncols=1), the resulting single Axes object is returned as a scalar.
    * for Nx1 or 1xM subplots, the returned object is a 1D numpy object array of Axes objects.
    * for NxM, subplots with N>1 and M>1 are returned as a 2D array.
  * If False, no squeezing at all is done: the returned Axes object is always a 2D array containing Axes instances, even if it ends up being 1x1.

subplot_kwdict, optional

    
Dict with keywords passed to the `Figure.add_subplot` call used to create each
subplot.

gridspec_kwdict, optional

    
Dict with keywords passed to the `GridSpec` constructor used to create the
grid the subplots are placed on.

Returns

    
`Axes` or array of Axes

    
Either a single `Axes` object or an array of Axes objects if more than one
subplot was created. The dimensions of the resulting array can be controlled
with the squeeze keyword, see above.

See also

`pyplot.subplots`

`Figure.add_subplot`

`pyplot.subplot`

#### Examples

    
    # First create some toy data:
    x = np.linspace(0, 2*np.pi, 400)
    y = np.sin(x**2)
    
    # Create a figure
    plt.figure()
    
    # Create a subplot
    ax = fig.subplots()
    ax.plot(x, y)
    ax.set_title('Simple plot')
    
    # Create two subplots and unpack the output array immediately
    ax1, ax2 = fig.subplots(1, 2, sharey=True)
    ax1.plot(x, y)
    ax1.set_title('Sharing Y axis')
    ax2.scatter(x, y)
    
    # Create four polar Axes and access them through the returned array
    axes = fig.subplots(2, 2, subplot_kw=dict(projection='polar'))
    axes[0, 0].plot(x, y)
    axes[1, 1].scatter(x, y)
    
    # Share a X axis with each column of subplots
    fig.subplots(2, 2, sharex='col')
    
    # Share a Y axis with each row of subplots
    fig.subplots(2, 2, sharey='row')
    
    # Share both X and Y axes with all subplots
    fig.subplots(2, 2, sharex='all', sharey='all')
    
    # Note that this is the same as
    fig.subplots(2, 2, sharex=True, sharey=True)
    
subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None,
hspace=None)[source]

    
Adjust the subplot layout parameters.

Unset parameters are left unmodified; initial values are given by
`rcParams["figure.subplot.[name]"]`.

Parameters

    
leftfloat, optional

    
The position of the left edge of the subplots, as a fraction of the figure
width.

rightfloat, optional

    
The position of the right edge of the subplots, as a fraction of the figure
width.

bottomfloat, optional

    
The position of the bottom edge of the subplots, as a fraction of the figure
height.

topfloat, optional

    
The position of the top edge of the subplots, as a fraction of the figure
height.

wspacefloat, optional

    
The width of the padding between subplots, as a fraction of the average Axes
width.

hspacefloat, optional

    
The height of the padding between subplots, as a fraction of the average Axes
height.

suptitle(t, **kwargs)[source]

    
Add a centered suptitle to the figure.

Parameters

    
tstr

    
The suptitle text.

xfloat, default: 0.5

    
The x location of the text in figure coordinates.

yfloat, default: 0.98

    
The y location of the text in figure coordinates.

horizontalalignment, ha{'center', 'left', 'right'}, default: center

    
The horizontal alignment of the text relative to (x, y).

verticalalignment, va{'top', 'center', 'bottom', 'baseline'}, default: top

    
The vertical alignment of the text relative to (x, y).

fontsize, sizedefault: `rcParams["figure.titlesize"]` (default: `'large'`)

    
The font size of the text. See `Text.set_size` for possible values.

fontweight, weightdefault: `rcParams["figure.titleweight"]` (default:
`'normal'`)

    
The font weight of the text. See `Text.set_weight` for possible values.

Returns

    
text

    
The `Text` instance of the suptitle.

Other Parameters

    
fontpropertiesNone or dict, optional

    
A dict of font properties. If fontproperties is given the default values for
font size and weight are taken from the `FontProperties` defaults.
`rcParams["figure.titlesize"]` (default: `'large'`) and
`rcParams["figure.titleweight"]` (default: `'normal'`) are ignored in this
case.

**kwargs

    
Additional kwargs are `matplotlib.text.Text` properties.

supxlabel(t, **kwargs)[source]

    
Add a centered supxlabel to the figure.

Parameters

    
tstr

    
The supxlabel text.

xfloat, default: 0.5

    
The x location of the text in figure coordinates.

yfloat, default: 0.01

    
The y location of the text in figure coordinates.

horizontalalignment, ha{'center', 'left', 'right'}, default: center

    
The horizontal alignment of the text relative to (x, y).

verticalalignment, va{'top', 'center', 'bottom', 'baseline'}, default: bottom

    
The vertical alignment of the text relative to (x, y).

fontsize, sizedefault: `rcParams["figure.titlesize"]` (default: `'large'`)

    
The font size of the text. See `Text.set_size` for possible values.

fontweight, weightdefault: `rcParams["figure.titleweight"]` (default:
`'normal'`)

    
The font weight of the text. See `Text.set_weight` for possible values.

Returns

    
text

    
The `Text` instance of the supxlabel.

Other Parameters

    
fontpropertiesNone or dict, optional

    
A dict of font properties. If fontproperties is given the default values for
font size and weight are taken from the `FontProperties` defaults.
`rcParams["figure.titlesize"]` (default: `'large'`) and
`rcParams["figure.titleweight"]` (default: `'normal'`) are ignored in this
case.

**kwargs

    
Additional kwargs are `matplotlib.text.Text` properties.

supylabel(t, **kwargs)[source]

    
Add a centered supylabel to the figure.

Parameters

    
tstr

    
The supylabel text.

xfloat, default: 0.02

    
The x location of the text in figure coordinates.

yfloat, default: 0.5

    
The y location of the text in figure coordinates.

horizontalalignment, ha{'center', 'left', 'right'}, default: left

    
The horizontal alignment of the text relative to (x, y).

verticalalignment, va{'top', 'center', 'bottom', 'baseline'}, default: center

    
The vertical alignment of the text relative to (x, y).

fontsize, sizedefault: `rcParams["figure.titlesize"]` (default: `'large'`)

    
The font size of the text. See `Text.set_size` for possible values.

fontweight, weightdefault: `rcParams["figure.titleweight"]` (default:
`'normal'`)

    
The font weight of the text. See `Text.set_weight` for possible values.

Returns

    
text

    
The `Text` instance of the supylabel.

Other Parameters

    
fontpropertiesNone or dict, optional

    
A dict of font properties. If fontproperties is given the default values for
font size and weight are taken from the `FontProperties` defaults.
`rcParams["figure.titlesize"]` (default: `'large'`) and
`rcParams["figure.titleweight"]` (default: `'normal'`) are ignored in this
case.

**kwargs

    
Additional kwargs are `matplotlib.text.Text` properties.

text(x, y, s, fontdict=None, **kwargs)[source]

    
Add text to figure.

Parameters

    
x, yfloat

    
The position to place the text. By default, this is in figure coordinates,
floats in [0, 1]. The coordinate system can be changed using the transform
keyword.

sstr

    
The text string.

fontdictdict, optional

    
A dictionary to override the default text properties. If not given, the
defaults are determined by `rcParams["font.*"]`. Properties passed as kwargs
override the corresponding ones given in fontdict.

Returns

    
`Text`

Other Parameters

    
**kwargs`Text` properties

    
Other miscellaneous text parameters.

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`backgroundcolor` | color  
`bbox` | dict with properties for `patches.FancyBboxPatch`  
`clip_box` | unknown  
`clip_on` | unknown  
`clip_path` | unknown  
`color` or c | color  
`figure` | `Figure`  
`fontfamily` or family | {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  
`fontproperties` or font or font_properties | `font_manager.FontProperties` or `str` or `pathlib.Path`  
`fontsize` or size | float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  
`fontstretch` or stretch | {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  
`fontstyle` or style | {'normal', 'italic', 'oblique'}  
`fontvariant` or variant | {'normal', 'small-caps'}  
`fontweight` or weight | {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  
`gid` | str  
`horizontalalignment` or ha | {'center', 'right', 'left'}  
`in_layout` | bool  
`label` | object  
`linespacing` | float (multiple of font size)  
`math_fontfamily` | str  
`multialignment` or ma | {'left', 'right', 'center'}  
`parse_math` | bool  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | (float, float)  
`rasterized` | bool  
`rotation` | float or {'vertical', 'horizontal'}  
`rotation_mode` | {None, 'default', 'anchor'}  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`text` | object  
`transform` | `Transform`  
`transform_rotates_text` | bool  
`url` | str  
`usetex` | bool or None  
`verticalalignment` or va | {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  
`visible` | bool  
`wrap` | bool  
`x` | float  
`y` | float  
`zorder` | float  
See also

`Axes.text`

`pyplot.text`

tight_layout(*, pad=1.08, h_pad=None, w_pad=None, rect=None)[source]

    
Adjust the padding between and around subplots.

To exclude an artist on the Axes from the bounding box calculation that
determines the subplot parameters (i.e. legend, or annotation), set
`a.set_in_layout(False)` for that artist.

Parameters

    
padfloat, default: 1.08

    
Padding between the figure edge and the edges of subplots, as a fraction of
the font size.

h_pad, w_padfloat, default: pad

    
Padding (height/width) between edges of adjacent subplots, as a fraction of
the font size.

recttuple (left, bottom, right, top), default: (0, 0, 1, 1)

    
A rectangle in normalized figure coordinates into which the whole subplots
area (including labels) will fit.

See also

`Figure.set_tight_layout`

`pyplot.tight_layout`

update(props)[source]

    
Update this artist's properties from the dict props.

Parameters

    
propsdict

update_from(other)[source]

    
Copy properties from other to self.

waitforbuttonpress(timeout=\- 1)[source]

    
Blocking call to interact with the figure.

Wait for user input and return True if a key was pressed, False if a mouse
button was pressed and None if no input was given within timeout seconds.
Negative values deactivate timeout.

zorder=0

classmatplotlib.figure.FigureBase(**kwargs)[source]

    
Base class for `figure.Figure` and `figure.SubFigure` containing the methods
that add artists to the figure or subfigure, create Axes, etc.

add_artist(artist, clip=False)[source]

    
Add an `Artist` to the figure.

Usually artists are added to Axes objects using `Axes.add_artist`; this method
can be used in the rare cases where one needs to add artists directly to the
figure instead.

Parameters

    
artist`Artist`

    
The artist to add to the figure. If the added artist has no transform
previously set, its transform will be set to `figure.transSubfigure`.

clipbool, default: False

    
Whether the added artist should be clipped by the figure patch.

Returns

    
`Artist`

    
The added artist.

add_axes(*args, **kwargs)[source]

    
Add an Axes to the figure.

Call signatures:

    
    add_axes(rect, projection=None, polar=False, **kwargs)
    add_axes(ax)
    
Parameters

    
rectsequence of float

    
The dimensions [left, bottom, width, height] of the new Axes. All quantities
are in fractions of figure width and height.

projection{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar',
'rectilinear', str}, optional

    
The projection type of the `Axes`. str is the name of a custom projection, see
`projections`. The default None results in a 'rectilinear' projection.

polarbool, default: False

    
If True, equivalent to projection='polar'.

axes_classsubclass type of `Axes`, optional

    
The `axes.Axes` subclass that is instantiated. This parameter is incompatible
with projection and polar. See axisartist for examples.

sharex, sharey`Axes`, optional

    
Share the x or y `axis` with sharex and/or sharey. The axis will have the same
limits, ticks, and scale as the axis of the shared axes.

labelstr

    
A label for the returned Axes.

Returns

    
`Axes`, or a subclass of `Axes`

    
The returned axes class depends on the projection used. It is `Axes` if
rectilinear projection is used and `projections.polar.PolarAxes` if polar
projection is used.

Other Parameters

    
**kwargs

    
This method also takes the keyword arguments for the returned Axes class. The
keyword arguments for the rectilinear Axes class `Axes` can be found in the
following table but there might also be other keyword arguments if another
projection is used, see the actual Axes class.

Property | Description  
---|---  
`adjustable` | {'box', 'datalim'}  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`anchor` | (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  
`animated` | bool  
`aspect` | {'auto', 'equal'} or float  
`autoscale_on` | bool  
`autoscalex_on` | bool  
`autoscaley_on` | bool  
`axes_locator` | Callable[[Axes, Renderer], Bbox]  
`axisbelow` | bool or 'line'  
`box_aspect` | float or None  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`facecolor` or fc | color  
`figure` | `Figure`  
`frame_on` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`navigate` | bool  
`navigate_mode` | unknown  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | [left, bottom, width, height] or `Bbox`  
`prop_cycle` | unknown  
`rasterization_zorder` | float or None  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`title` | str  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`xbound` | unknown  
`xlabel` | str  
`xlim` | (bottom: float, top: float)  
`xmargin` | float greater than -0.5  
`xscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`xticklabels` | unknown  
`xticks` | unknown  
`ybound` | unknown  
`ylabel` | str  
`ylim` | (bottom: float, top: float)  
`ymargin` | float greater than -0.5  
`yscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`yticklabels` | unknown  
`yticks` | unknown  
`zorder` | float  
See also

`Figure.add_subplot`

`pyplot.subplot`

`pyplot.axes`

`Figure.subplots`

`pyplot.subplots`

#### Notes

In rare circumstances, `add_axes` may be called with a single argument, an
Axes instance already created in the present figure but not in the figure's
list of Axes.

#### Examples

Some simple examples:

    
    rect = l, b, w, h
    fig = plt.figure()
    fig.add_axes(rect)
    fig.add_axes(rect, frameon=False, facecolor='g')
    fig.add_axes(rect, polar=True)
    ax = fig.add_axes(rect, projection='polar')
    fig.delaxes(ax)
    fig.add_axes(ax)
    
add_callback(func)[source]

    
Add a callback function that will be called whenever one of the `Artist`'s
properties changes.

Parameters

    
funccallable

    
The callback function. It must have the signature:

    
    def func(artist: Artist) -> Any
    
where artist is the calling `Artist`. Return values may exist but are ignored.

Returns

    
int

    
The observer id associated with the callback. This id can be used for removing
the callback with `remove_callback` later.

See also

`remove_callback`

add_gridspec(nrows=1, ncols=1, **kwargs)[source]

    
Return a `GridSpec` that has this figure as a parent. This allows complex
layout of Axes in the figure.

Parameters

    
nrowsint, default: 1

    
Number of rows in grid.

ncolsint, default: 1

    
Number or columns in grid.

Returns

    
`GridSpec`

Other Parameters

    
**kwargs

    
Keyword arguments are passed to `GridSpec`.

See also

`matplotlib.pyplot.subplots`

#### Examples

Adding a subplot that spans two rows:

    
    fig = plt.figure()
    gs = fig.add_gridspec(2, 2)
    ax1 = fig.add_subplot(gs[0, 0])
    ax2 = fig.add_subplot(gs[1, 0])
    # spans two rows:
    ax3 = fig.add_subplot(gs[:, 1])
    
add_subfigure(subplotspec, **kwargs)[source]

    
Add a `SubFigure` to the figure as part of a subplot arrangement.

Parameters

    
subplotspec`gridspec.SubplotSpec`

    
Defines the region in a parent gridspec where the subfigure will be placed.

Returns

    
`figure.SubFigure`

Other Parameters

    
**kwargs

    
Are passed to the `SubFigure` object.

See also

`Figure.subfigures`

add_subplot(*args, **kwargs)[source]

    
Add an `Axes` to the figure as part of a subplot arrangement.

Call signatures:

    
    add_subplot(nrows, ncols, index, **kwargs)
    add_subplot(pos, **kwargs)
    add_subplot(ax)
    add_subplot()
    
Parameters

    
*argsint, (int, int, index), or `SubplotSpec`, default: (1, 1, 1)
    
The position of the subplot described by one of

  * Three integers (nrows, ncols, index). The subplot will take the index position on a grid with nrows rows and ncols columns. index starts at 1 in the upper left corner and increases to the right. index can also be a two-tuple specifying the (first, last) indices (1-based, and including last) of the subplot, e.g., `fig.add_subplot(3, 1, (1, 2))` makes a subplot that spans the upper 2/3 of the figure.
  * A 3-digit integer. The digits are interpreted as if given separately as three single-digit integers, i.e. `fig.add_subplot(235)` is the same as `fig.add_subplot(2, 3, 5)`. Note that this can only be used if there are no more than 9 subplots.
  * A `SubplotSpec`.

In rare circumstances, `add_subplot` may be called with a single argument, a
subplot Axes instance already created in the present figure but not in the
figure's list of Axes.

projection{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar',
'rectilinear', str}, optional

    
The projection type of the subplot (`Axes`). str is the name of a custom
projection, see `projections`. The default None results in a 'rectilinear'
projection.

polarbool, default: False

    
If True, equivalent to projection='polar'.

axes_classsubclass type of `Axes`, optional

    
The `axes.Axes` subclass that is instantiated. This parameter is incompatible
with projection and polar. See axisartist for examples.

sharex, sharey`Axes`, optional

    
Share the x or y `axis` with sharex and/or sharey. The axis will have the same
limits, ticks, and scale as the axis of the shared axes.

labelstr

    
A label for the returned Axes.

Returns

    
`axes.SubplotBase`, or another subclass of `Axes`

    
The Axes of the subplot. The returned Axes base class depends on the
projection used. It is `Axes` if rectilinear projection is used and
`projections.polar.PolarAxes` if polar projection is used. The returned Axes
is then a subplot subclass of the base class.

Other Parameters

    
**kwargs

    
This method also takes the keyword arguments for the returned Axes base class;
except for the figure argument. The keyword arguments for the rectilinear base
class `Axes` can be found in the following table but there might also be other
keyword arguments if another projection is used.

Property | Description  
---|---  
`adjustable` | {'box', 'datalim'}  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`anchor` | (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  
`animated` | bool  
`aspect` | {'auto', 'equal'} or float  
`autoscale_on` | bool  
`autoscalex_on` | bool  
`autoscaley_on` | bool  
`axes_locator` | Callable[[Axes, Renderer], Bbox]  
`axisbelow` | bool or 'line'  
`box_aspect` | float or None  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`facecolor` or fc | color  
`figure` | `Figure`  
`frame_on` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`navigate` | bool  
`navigate_mode` | unknown  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | [left, bottom, width, height] or `Bbox`  
`prop_cycle` | unknown  
`rasterization_zorder` | float or None  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`title` | str  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`xbound` | unknown  
`xlabel` | str  
`xlim` | (bottom: float, top: float)  
`xmargin` | float greater than -0.5  
`xscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`xticklabels` | unknown  
`xticks` | unknown  
`ybound` | unknown  
`ylabel` | str  
`ylim` | (bottom: float, top: float)  
`ymargin` | float greater than -0.5  
`yscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`yticklabels` | unknown  
`yticks` | unknown  
`zorder` | float  
See also

`Figure.add_axes`

`pyplot.subplot`

`pyplot.axes`

`Figure.subplots`

`pyplot.subplots`

#### Examples

    
    fig = plt.figure()
    
    fig.add_subplot(231)
    ax1 = fig.add_subplot(2, 3, 1)  # equivalent but more general
    
    fig.add_subplot(232, frameon=False)  # subplot with no frame
    fig.add_subplot(233, projection='polar')  # polar subplot
    fig.add_subplot(234, sharex=ax1)  # subplot sharing x-axis with ax1
    fig.add_subplot(235, facecolor="red")  # red subplot
    
    ax1.remove()  # delete ax1 from the figure
    fig.add_subplot(ax1)  # add ax1 back to the figure
    
align_labels(axs=None)[source]

    
Align the xlabels and ylabels of subplots with the same subplots row or column
(respectively) if label alignment is being done automatically (i.e. the label
position is not manually set).

Alignment persists for draw events after this is called.

Parameters

    
axslist of `Axes`

    
Optional list (or ndarray) of `Axes` to align the labels. Default is to align
all Axes on the figure.

See also

`matplotlib.figure.Figure.align_xlabels`

`matplotlib.figure.Figure.align_ylabels`

align_xlabels(axs=None)[source]

    
Align the xlabels of subplots in the same subplot column if label alignment is
being done automatically (i.e. the label position is not manually set).

Alignment persists for draw events after this is called.

If a label is on the bottom, it is aligned with labels on Axes that also have
their label on the bottom and that have the same bottom-most subplot row. If
the label is on the top, it is aligned with labels on Axes with the same top-
most row.

Parameters

    
axslist of `Axes`

    
Optional list of (or ndarray) `Axes` to align the xlabels. Default is to align
all Axes on the figure.

See also

`matplotlib.figure.Figure.align_ylabels`

`matplotlib.figure.Figure.align_labels`

#### Notes

This assumes that `axs` are from the same `GridSpec`, so that their
`SubplotSpec` positions correspond to figure positions.

#### Examples

Example with rotated xtick labels:

    
    fig, axs = plt.subplots(1, 2)
    for tick in axs[0].get_xticklabels():
        tick.set_rotation(55)
    axs[0].set_xlabel('XLabel 0')
    axs[1].set_xlabel('XLabel 1')
    fig.align_xlabels()
    
align_ylabels(axs=None)[source]

    
Align the ylabels of subplots in the same subplot column if label alignment is
being done automatically (i.e. the label position is not manually set).

Alignment persists for draw events after this is called.

If a label is on the left, it is aligned with labels on Axes that also have
their label on the left and that have the same left-most subplot column. If
the label is on the right, it is aligned with labels on Axes with the same
right-most column.

Parameters

    
axslist of `Axes`

    
Optional list (or ndarray) of `Axes` to align the ylabels. Default is to align
all Axes on the figure.

See also

`matplotlib.figure.Figure.align_xlabels`

`matplotlib.figure.Figure.align_labels`

#### Notes

This assumes that `axs` are from the same `GridSpec`, so that their
`SubplotSpec` positions correspond to figure positions.

#### Examples

Example with large yticks labels:

    
    fig, axs = plt.subplots(2, 1)
    axs[0].plot(np.arange(0, 1000, 50))
    axs[0].set_ylabel('YLabel 0')
    axs[1].set_ylabel('YLabel 1')
    fig.align_ylabels()
    
autofmt_xdate(bottom=0.2, rotation=30, ha='right', which='major')[source]

    
Date ticklabels often overlap, so it is useful to rotate them and right align
them. Also, a common use case is a number of subplots with shared x-axis where
the x-axis is date data. The ticklabels are often long, and it helps to rotate
them on the bottom subplot and turn them off on other subplots, as well as
turn off xlabels.

Parameters

    
bottomfloat, default: 0.2

    
The bottom of the subplots for `subplots_adjust`.

rotationfloat, default: 30 degrees

    
The rotation angle of the xtick labels in degrees.

ha{'left', 'center', 'right'}, default: 'right'

    
The horizontal alignment of the xticklabels.

which{'major', 'minor', 'both'}, default: 'major'

    
Selects which ticklabels to rotate.

propertyaxes

    
The `Axes` instance the artist resides in, or None.

colorbar(mappable, cax=None, ax=None, use_gridspec=True, **kw)[source]

    
Add a colorbar to a plot.

Parameters

    
mappable

    
The `matplotlib.cm.ScalarMappable` (i.e., `AxesImage`, `ContourSet`, etc.)
described by this colorbar. This argument is mandatory for the
`Figure.colorbar` method but optional for the `pyplot.colorbar` function,
which sets the default to the current image.

Note that one can create a `ScalarMappable` "on-the-fly" to generate colorbars
not attached to a previously drawn artist, e.g.

    
    fig.colorbar(cm.ScalarMappable(norm=norm, cmap=cmap), ax=ax)
    
cax`Axes`, optional

    
Axes into which the colorbar will be drawn.

ax`Axes`, list of Axes, optional

    
One or more parent axes from which space for a new colorbar axes will be
stolen, if cax is None. This has no effect if cax is set.

use_gridspecbool, optional

    
If cax is `None`, a new cax is created as an instance of Axes. If ax is an
instance of Subplot and use_gridspec is `True`, cax is created as an instance
of Subplot using the `gridspec` module.

Returns

    
colorbar`Colorbar`

#### Notes

Additional keyword arguments are of two kinds:

axes properties:

locationNone or {'left', 'right', 'top', 'bottom'}

    
The location, relative to the parent axes, where the colorbar axes is created.
It also determines the orientation of the colorbar (colorbars on the left and
right are vertical, colorbars at the top and bottom are horizontal). If None,
the location will come from the orientation if it is set (vertical colorbars
on the right, horizontal ones at the bottom), or default to 'right' if
orientation is unset.

orientationNone or {'vertical', 'horizontal'}

    
The orientation of the colorbar. It is preferable to set the location of the
colorbar, as that also determines the orientation; passing incompatible values
for location and orientation raises an exception.

fractionfloat, default: 0.15

    
Fraction of original axes to use for colorbar.

shrinkfloat, default: 1.0

    
Fraction by which to multiply the size of the colorbar.

aspectfloat, default: 20

    
Ratio of long to short dimensions.

padfloat, default: 0.05 if vertical, 0.15 if horizontal

    
Fraction of original axes between colorbar and new image axes.

anchor(float, float), optional

    
The anchor point of the colorbar axes. Defaults to (0.0, 0.5) if vertical;
(0.5, 1.0) if horizontal.

panchor(float, float), or False, optional

    
The anchor point of the colorbar parent axes. If False, the parent axes'
anchor will be unchanged. Defaults to (1.0, 0.5) if vertical; (0.5, 0.0) if
horizontal.

colorbar properties:

Property | Description  
---|---  
extend | {'neither', 'both', 'min', 'max'} If not 'neither', make pointed end(s) for out-of- range values. These are set for a given colormap using the colormap set_under and set_over methods.  
extendfrac | {None, 'auto', length, lengths} If set to None, both the minimum and maximum triangular colorbar extensions with have a length of 5% of the interior colorbar length (this is the default setting). If set to 'auto', makes the triangular colorbar extensions the same lengths as the interior boxes (when spacing is set to 'uniform') or the same lengths as the respective adjacent interior boxes (when spacing is set to 'proportional'). If a scalar, indicates the length of both the minimum and maximum triangular colorbar extensions as a fraction of the interior colorbar length. A two-element sequence of fractions may also be given, indicating the lengths of the minimum and maximum colorbar extensions respectively as a fraction of the interior colorbar length.  
extendrect | bool If False the minimum and maximum colorbar extensions will be triangular (the default). If True the extensions will be rectangular.  
spacing | {'uniform', 'proportional'} Uniform spacing gives each discrete color the same space; proportional makes the space proportional to the data interval.  
ticks | None or list of ticks or Locator If None, ticks are determined automatically from the input.  
format | None or str or Formatter If None, `ScalarFormatter` is used. If a format string is given, e.g., '%.3f', that is used. An alternative `Formatter` may be given instead.  
drawedges | bool Whether to draw lines at color boundaries.  
label | str The label on the colorbar's long axis.  
The following will probably be useful only in the context of indexed colors
(that is, when the mappable has norm=NoNorm()), or other unusual
circumstances.

Property | Description  
---|---  
boundaries | None or a sequence  
values | None or a sequence which must be of length 1 less than the sequence of boundaries. For each region delimited by adjacent entries in boundaries, the colormapped to the corresponding value in values will be used.  
If mappable is a `ContourSet`, its extend kwarg is included automatically.

The shrink kwarg provides a simple way to scale the colorbar with respect to
the axes. Note that if cax is specified, it determines the size of the
colorbar and shrink and aspect kwargs are ignored.

For more precise control, you can manually specify the positions of the axes
objects in which the mappable and the colorbar are drawn. In this case, do not
use any of the axes properties kwargs.

It is known that some vector graphics viewers (svg and pdf) renders white gaps
between segments of the colorbar. This is due to bugs in the viewers, not
Matplotlib. As a workaround, the colorbar can be rendered with overlapping
segments:

    
    cbar = colorbar()
    cbar.solids.set_edgecolor("face")
    draw()
    
However this has negative consequences in other circumstances, e.g. with semi-
transparent images (alpha < 1) and colorbar extensions; therefore, this
workaround is not used by default (see issue #1188).

contains(mouseevent)[source]

    
Test whether the mouse event occurred on the figure.

Returns

    
bool, {}

convert_xunits(x)[source]

    
Convert x using the unit type of the xaxis.

If the artist is not in contained in an Axes or if the xaxis does not have
units, x itself is returned.

convert_yunits(y)[source]

    
Convert y using the unit type of the yaxis.

If the artist is not in contained in an Axes or if the yaxis does not have
units, y itself is returned.

delaxes(ax)[source]

    
Remove the `Axes` ax from the figure; update the current Axes.

draw(renderer)[source]

    
Draw the Artist (and its children) using the given renderer.

This has no effect if the artist is not visible (`Artist.get_visible` returns
False).

Parameters

    
renderer`RendererBase` subclass.

#### Notes

This method is overridden in the Artist subclasses.

findobj(match=None, include_self=True)[source]

    
Find artist objects.

Recursively find all `Artist` instances contained in the artist.

Parameters

    
match

    
A filter criterion for the matches. This can be

  * None: Return all objects contained in artist.
  * A function with signature `def match(artist: Artist) -> bool`. The result will only contain artists for which the function returns True.
  * A class instance: e.g., `Line2D`. The result will only contain artists of this class or its subclasses (`isinstance` check).

include_selfbool

    
Include self in the list to be checked for a match.

Returns

    
list of `Artist`

format_cursor_data(data)[source]

    
Return a string representation of data.

Note

This method is intended to be overridden by artist subclasses. As an end-user
of Matplotlib you will most likely not call this method yourself.

The default implementation converts ints and floats and arrays of ints and
floats into a comma-separated string enclosed in square brackets, unless the
artist has an associated colorbar, in which case scalar values are formatted
using the colorbar's formatter.

See also

`get_cursor_data`

propertyframeon

    
Return the figure's background patch visibility, i.e. whether the figure
background will be drawn. Equivalent to `Figure.patch.get_visible()`.

gca(**kwargs)[source]

    
Get the current Axes.

If there is currently no Axes on this Figure, a new one is created using
`Figure.add_subplot`. (To test whether there is currently an Axes on a Figure,
check whether `figure.axes` is empty. To test whether there is currently a
Figure on the pyplot figure stack, check whether `pyplot.get_fignums()` is
empty.)

The following kwargs are supported for ensuring the returned Axes adheres to
the given projection etc., and for Axes creation if the active Axes does not
exist:

Property | Description  
---|---  
`adjustable` | {'box', 'datalim'}  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`anchor` | (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  
`animated` | bool  
`aspect` | {'auto', 'equal'} or float  
`autoscale_on` | bool  
`autoscalex_on` | bool  
`autoscaley_on` | bool  
`axes_locator` | Callable[[Axes, Renderer], Bbox]  
`axisbelow` | bool or 'line'  
`box_aspect` | float or None  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`facecolor` or fc | color  
`figure` | `Figure`  
`frame_on` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`navigate` | bool  
`navigate_mode` | unknown  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | [left, bottom, width, height] or `Bbox`  
`prop_cycle` | unknown  
`rasterization_zorder` | float or None  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`title` | str  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`xbound` | unknown  
`xlabel` | str  
`xlim` | (bottom: float, top: float)  
`xmargin` | float greater than -0.5  
`xscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`xticklabels` | unknown  
`xticks` | unknown  
`ybound` | unknown  
`ylabel` | str  
`ylim` | (bottom: float, top: float)  
`ymargin` | float greater than -0.5  
`yscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`yticklabels` | unknown  
`yticks` | unknown  
`zorder` | float  
get_agg_filter()[source]

    
Return filter function to be used for agg filter.

get_alpha()[source]

    
Return the alpha value used for blending - not supported on all backends.

get_animated()[source]

    
Return whether the artist is animated.

get_children()[source]

    
Get a list of artists contained in the figure.

get_clip_box()[source]

    
Return the clipbox.

get_clip_on()[source]

    
Return whether the artist uses clipping.

get_clip_path()[source]

    
Return the clip path.

get_cursor_data(event)[source]

    
Return the cursor data for a given event.

Note

This method is intended to be overridden by artist subclasses. As an end-user
of Matplotlib you will most likely not call this method yourself.

Cursor data can be used by Artists to provide additional context information
for a given event. The default implementation just returns None.

Subclasses can override the method and return arbitrary data. However, when
doing so, they must ensure that `format_cursor_data` can convert the data to a
string representation.

The only current use case is displaying the z-value of an `AxesImage` in the
status bar of a plot window, while moving the mouse.

Parameters

    
event`matplotlib.backend_bases.MouseEvent`

See also

`format_cursor_data`

get_default_bbox_extra_artists()[source]

get_edgecolor()[source]

    
Get the edge color of the Figure rectangle.

get_facecolor()[source]

    
Get the face color of the Figure rectangle.

get_figure()[source]

    
Return the `Figure` instance the artist belongs to.

get_frameon()[source]

    
Return the figure's background patch visibility, i.e. whether the figure
background will be drawn. Equivalent to `Figure.patch.get_visible()`.

get_gid()[source]

    
Return the group id.

get_in_layout()[source]

    
Return boolean flag, `True` if artist is included in layout calculations.

E.g. Constrained Layout Guide, `Figure.tight_layout()`, and
`fig.savefig(fname, bbox_inches='tight')`.

get_label()[source]

    
Return the label used for this artist in the legend.

get_linewidth()[source]

    
Get the line width of the Figure rectangle.

get_path_effects()[source]

get_picker()[source]

    
Return the picking behavior of the artist.

The possible values are described in `set_picker`.

See also

`set_picker`, `pickable`, `pick`

get_rasterized()[source]

    
Return whether the artist is to be rasterized.

get_sketch_params()[source]

    
Return the sketch parameters for the artist.

Returns

    
tuple or None

    
A 3-tuple with the following elements:

  * scale: The amplitude of the wiggle perpendicular to the source line.
  * length: The length of the wiggle along the line.
  * randomness: The scale factor by which the length is shrunken or expanded.

Returns None if no sketch parameters were set.

get_snap()[source]

    
Return the snap setting.

See `set_snap` for details.

get_tightbbox(renderer, bbox_extra_artists=None)[source]

    
Return a (tight) bounding box of the figure in inches.

Note that `FigureBase` differs from all other artists, which return their
`Bbox` in pixels.

Artists that have `artist.set_in_layout(False)` are not included in the bbox.

Parameters

    
renderer`RendererBase` subclass

    
renderer that will be used to draw the figures (i.e.
`fig.canvas.get_renderer()`)

bbox_extra_artistslist of `Artist` or `None`

    
List of artists to include in the tight bounding box. If `None` (default),
then all artist children of each Axes are included in the tight bounding box.

Returns

    
`BboxBase`

    
containing the bounding box (in figure inches).

get_transform()[source]

    
Return the `Transform` instance used by this artist.

get_transformed_clip_path_and_affine()[source]

    
Return the clip path with the non-affine part of its transformation applied,
and the remaining affine part of its transformation.

get_url()[source]

    
Return the url.

get_visible()[source]

    
Return the visibility.

get_window_extent(*args, **kwargs)[source]

    
Get the artist's bounding box in display space.

The bounding box' width and height are nonnegative.

Subclasses should override for inclusion in the bounding box "tight"
calculation. Default is to return an empty bounding box at 0, 0.

Be careful when using this function, the results will not update if the artist
window extent of the artist changes. The extent can change due to any changes
in the transform stack, such as changing the axes limits, the figure size, or
the canvas used (as is done when saving a figure). This can lead to unexpected
behavior where interactive figures will look fine on the screen, but will save
incorrectly.

get_zorder()[source]

    
Return the artist's zorder.

have_units()[source]

    
Return whether units are set on any axis.

is_transform_set()[source]

    
Return whether the Artist has an explicitly set transform.

This is True after `set_transform` has been called.

legend(*args, **kwargs)[source]

    
Place a legend on the figure.

Call signatures:

    
    legend()
    legend(handles, labels)
    legend(handles=handles)
    legend(labels)
    
The call signatures correspond to the following different ways to use this
method:

1\. Automatic detection of elements to be shown in the legend

The elements to be added to the legend are automatically determined, when you
do not pass in any extra arguments.

In this case, the labels are taken from the artist. You can specify them
either at artist creation or by calling the `set_label()` method on the
artist:

    
    ax.plot([1, 2, 3], label='Inline label')
    fig.legend()
    
or:

    
    line, = ax.plot([1, 2, 3])
    line.set_label('Label via method')
    fig.legend()
    
Specific lines can be excluded from the automatic legend element selection by
defining a label starting with an underscore. This is default for all artists,
so calling `Figure.legend` without any arguments and without setting the
labels manually will result in no legend being drawn.

2\. Explicitly listing the artists and labels in the legend

For full control of which artists have a legend entry, it is possible to pass
an iterable of legend artists followed by an iterable of legend labels
respectively:

    
    fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])
    
3\. Explicitly listing the artists in the legend

This is similar to 2, but the labels are taken from the artists' label
properties. Example:

    
    line1, = ax1.plot([1, 2, 3], label='label1')
    line2, = ax2.plot([1, 2, 3], label='label2')
    fig.legend(handles=[line1, line2])
    
4\. Labeling existing plot elements

Discouraged

This call signature is discouraged, because the relation between plot elements
and labels is only implicit by their order and can easily be mixed up.

To make a legend for all artists on all Axes, call this function with an
iterable of strings, one for each legend item. For example:

    
    fig, (ax1, ax2)  = plt.subplots(1, 2)
    ax1.plot([1, 3, 5], color='blue')
    ax2.plot([2, 4, 6], color='red')
    fig.legend(['the blues', 'the reds'])
    
Parameters

    
handleslist of `Artist`, optional

    
A list of Artists (lines, patches) to be added to the legend. Use this
together with labels, if you need full control on what is shown in the legend
and the automatic mechanism described above is not sufficient.

The length of handles and labels should be the same in this case. If they are
not, they are truncated to the smaller length.

labelslist of str, optional

    
A list of labels to show next to the artists. Use this together with handles,
if you need full control on what is shown in the legend and the automatic
mechanism described above is not sufficient.

Returns

    
`Legend`

Other Parameters

    
locstr or pair of floats, default: `rcParams["legend.loc"]` (default:
`'best'`) ('best' for axes, 'upper right' for figures)

    
The location of the legend.

The strings `'upper left', 'upper right', 'lower left', 'lower right'` place
the legend at the corresponding corner of the axes/figure.

The strings `'upper center', 'lower center', 'center left', 'center right'`
place the legend at the center of the corresponding edge of the axes/figure.

The string `'center'` places the legend at the center of the axes/figure.

The string `'best'` places the legend at the location, among the nine
locations defined so far, with the minimum overlap with other drawn artists.
This option can be quite slow for plots with large amounts of data; your
plotting speed may benefit from providing a specific location.

The location can also be a 2-tuple giving the coordinates of the lower-left
corner of the legend in axes coordinates (in which case bbox_to_anchor will be
ignored).

For back-compatibility, `'center right'` (but no other location) can also be
spelled `'right'`, and each "string" locations can also be given as a numeric
value:

Location String | Location Code  
---|---  
'best' | 0  
'upper right' | 1  
'upper left' | 2  
'lower left' | 3  
'lower right' | 4  
'right' | 5  
'center left' | 6  
'center right' | 7  
'lower center' | 8  
'upper center' | 9  
'center' | 10  
bbox_to_anchor`BboxBase`, 2-tuple, or 4-tuple of floats

    
Box that is used to position the legend in conjunction with loc. Defaults to
`axes.bbox` (if called as a method to `Axes.legend`) or `figure.bbox` (if
`Figure.legend`). This argument allows arbitrary placement of the legend.

Bbox coordinates are interpreted in the coordinate system given by
bbox_transform, with the default transform Axes or Figure coordinates,
depending on which `legend` is called.

If a 4-tuple or `BboxBase` is given, then it specifies the bbox `(x, y, width,
height)` that the legend is placed in. To put the legend in the best location
in the bottom right quadrant of the axes (or figure):

    
    loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)
    
A 2-tuple `(x, y)` places the corner of the legend specified by loc at x, y.
For example, to put the legend's upper right-hand corner in the center of the
axes (or figure) the following keywords can be used:

    
    loc='upper right', bbox_to_anchor=(0.5, 0.5)
    
ncolint, default: 1

    
The number of columns that the legend has.

propNone or `matplotlib.font_manager.FontProperties` or dict

    
The font properties of the legend. If None (default), the current
`matplotlib.rcParams` will be used.

fontsizeint or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large',
'xx-large'}

    
The font size of the legend. If the value is numeric the size will be the
absolute font size in points. String values are relative to the current
default font size. This argument is only used if prop is not specified.

labelcolorstr or list, default: `rcParams["legend.labelcolor"]` (default:
`'None'`)

    
The color of the text in the legend. Either a valid color string (for example,
'red'), or a list of color strings. The labelcolor can also be made to match
the color of the line or marker using 'linecolor', 'markerfacecolor' (or
'mfc'), or 'markeredgecolor' (or 'mec').

Labelcolor can be set globally using `rcParams["legend.labelcolor"]` (default:
`'None'`). If None, use `rcParams["text.color"]` (default: `'black'`).

numpointsint, default: `rcParams["legend.numpoints"]` (default: `1`)

    
The number of marker points in the legend when creating a legend entry for a
`Line2D` (line).

scatterpointsint, default: `rcParams["legend.scatterpoints"]` (default: `1`)

    
The number of marker points in the legend when creating a legend entry for a
`PathCollection` (scatter plot).

scatteryoffsetsiterable of floats, default: `[0.375, 0.5, 0.3125]`

    
The vertical offset (relative to the font size) for the markers created for a
scatter plot legend entry. 0.0 is at the base the legend text, and 1.0 is at
the top. To draw all markers at the same height, set to `[0.5]`.

markerscalefloat, default: `rcParams["legend.markerscale"]` (default: `1.0`)

    
The relative size of legend markers compared with the originally drawn ones.

markerfirstbool, default: True

    
If True, legend marker is placed to the left of the legend label. If False,
legend marker is placed to the right of the legend label.

frameonbool, default: `rcParams["legend.frameon"]` (default: `True`)

    
Whether the legend should be drawn on a patch (frame).

fancyboxbool, default: `rcParams["legend.fancybox"]` (default: `True`)

    
Whether round edges should be enabled around the `FancyBboxPatch` which makes
up the legend's background.

shadowbool, default: `rcParams["legend.shadow"]` (default: `False`)

    
Whether to draw a shadow behind the legend.

framealphafloat, default: `rcParams["legend.framealpha"]` (default: `0.8`)

    
The alpha transparency of the legend's background. If shadow is activated and
framealpha is `None`, the default value is ignored.

facecolor"inherit" or color, default: `rcParams["legend.facecolor"]` (default:
`'inherit'`)

    
The legend's background color. If `"inherit"`, use
`rcParams["axes.facecolor"]` (default: `'white'`).

edgecolor"inherit" or color, default: `rcParams["legend.edgecolor"]` (default:
`'0.8'`)

    
The legend's background patch edge color. If `"inherit"`, use take
`rcParams["axes.edgecolor"]` (default: `'black'`).

mode{"expand", None}

    
If mode is set to `"expand"` the legend will be horizontally expanded to fill
the axes area (or bbox_to_anchor if defines the legend's size).

bbox_transformNone or `matplotlib.transforms.Transform`

    
The transform for the bounding box (bbox_to_anchor). For a value of `None`
(default) the Axes' `transAxes` transform will be used.

titlestr or None

    
The legend's title. Default is no title (`None`).

title_fontpropertiesNone or `matplotlib.font_manager.FontProperties` or dict

    
The font properties of the legend's title. If None (default), the
title_fontsize argument will be used if present; if title_fontsize is also
None, the current `rcParams["legend.title_fontsize"]` (default: `None`) will
be used.

title_fontsizeint or {'xx-small', 'x-small', 'small', 'medium', 'large',
'x-large', 'xx-large'}, default: `rcParams["legend.title_fontsize"]` (default:
`None`)

    
The font size of the legend's title. Note: This cannot be combined with
title_fontproperties. If you want to set the fontsize alongside other font
properties, use the size parameter in title_fontproperties.

borderpadfloat, default: `rcParams["legend.borderpad"]` (default: `0.4`)

    
The fractional whitespace inside the legend border, in font-size units.

labelspacingfloat, default: `rcParams["legend.labelspacing"]` (default: `0.5`)

    
The vertical space between the legend entries, in font-size units.

handlelengthfloat, default: `rcParams["legend.handlelength"]` (default: `2.0`)

    
The length of the legend handles, in font-size units.

handleheightfloat, default: `rcParams["legend.handleheight"]` (default: `0.7`)

    
The height of the legend handles, in font-size units.

handletextpadfloat, default: `rcParams["legend.handletextpad"]` (default:
`0.8`)

    
The pad between the legend handle and text, in font-size units.

borderaxespadfloat, default: `rcParams["legend.borderaxespad"]` (default:
`0.5`)

    
The pad between the axes and legend border, in font-size units.

columnspacingfloat, default: `rcParams["legend.columnspacing"]` (default:
`2.0`)

    
The spacing between columns, in font-size units.

handler_mapdict or None

    
The custom dictionary mapping instances or types to a legend handler. This
handler_map updates the default handler map found at
`matplotlib.legend.Legend.get_legend_handler_map`.

See also

`Axes.legend`

#### Notes

Some artists are not supported by this function. See Legend guide for details.

propertymouseover

    
If this property is set to True, the artist will be queried for custom context
information when the mouse cursor moves over it.

See also `get_cursor_data()`, `ToolCursorPosition` and `NavigationToolbar2`.

pchanged()[source]

    
Call all of the registered callbacks.

This function is triggered internally when a property is changed.

See also

`add_callback`

`remove_callback`

pick(mouseevent)[source]

    
Process a pick event.

Each child artist will fire a pick event if mouseevent is over the artist and
the artist has picker set.

See also

`set_picker`, `get_picker`, `pickable`

pickable()[source]

    
Return whether the artist is pickable.

See also

`set_picker`, `get_picker`, `pick`

properties()[source]

    
Return a dictionary of all the properties of the artist.

remove()[source]

    
Remove the artist from the figure if possible.

The effect will not be visible until the figure is redrawn, e.g., with
`FigureCanvasBase.draw_idle`. Call `relim` to update the axes limits if
desired.

Note: `relim` will not see collections even if the collection was added to the
axes with autolim = True.

Note: there is no support for removing the artist's legend entry.

remove_callback(oid)[source]

    
Remove a callback based on its observer id.

See also

`add_callback`

sca(a)[source]

    
Set the current Axes to be a and return a.

set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, clip_box=<UNSET>,
clip_on=<UNSET>, clip_path=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>,
frameon=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>,
linewidth=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>,
sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>,
visible=<UNSET>, zorder=<UNSET>)[source]

    
Set multiple properties at once.

Supported properties are

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`edgecolor` | color  
`facecolor` | color  
`figure` | `Figure`  
`frameon` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`linewidth` | number  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`zorder` | float  
set_agg_filter(filter_func)[source]

    
Set the agg filter.

Parameters

    
filter_funccallable

    
A filter function, which takes a (m, n, 3) float array and a dpi value, and
returns a (m, n, 3) array.

set_alpha(alpha)[source]

    
Set the alpha value used for blending - not supported on all backends.

Parameters

    
alphascalar or None

    
alpha must be within the 0-1 range, inclusive.

set_animated(b)[source]

    
Set whether the artist is intended to be used in an animation.

If True, the artist is excluded from regular drawing of the figure. You have
to call `Figure.draw_artist` / `Axes.draw_artist` explicitly on the artist.
This appoach is used to speed up animations using blitting.

See also `matplotlib.animation` and Faster rendering by using blitting.

Parameters

    
bbool

set_clip_box(clipbox)[source]

    
Set the artist's clip `Bbox`.

Parameters

    
clipbox`Bbox`

set_clip_on(b)[source]

    
Set whether the artist uses clipping.

When False artists will be visible outside of the axes which can lead to
unexpected results.

Parameters

    
bbool

set_clip_path(path, transform=None)[source]

    
Set the artist's clip path.

Parameters

    
path`Patch` or `Path` or `TransformedPath` or None

    
The clip path. If given a `Path`, transform must be provided as well. If None,
a previously set clip path is removed.

transform`Transform`, optional

    
Only used if path is a `Path`, in which case the given `Path` is converted to
a `TransformedPath` using transform.

#### Notes

For efficiency, if path is a `Rectangle` this method will set the clipping box
to the corresponding rectangle and set the clipping path to `None`.

For technical reasons (support of `set`), a tuple (path, transform) is also
accepted as a single positional parameter.

set_edgecolor(color)[source]

    
Set the edge color of the Figure rectangle.

Parameters

    
colorcolor

set_facecolor(color)[source]

    
Set the face color of the Figure rectangle.

Parameters

    
colorcolor

set_figure(fig)[source]

    
Set the `Figure` instance the artist belongs to.

Parameters

    
fig`Figure`

set_frameon(b)[source]

    
Set the figure's background patch visibility, i.e. whether the figure
background will be drawn. Equivalent to `Figure.patch.set_visible()`.

Parameters

    
bbool

set_gid(gid)[source]

    
Set the (group) id for the artist.

Parameters

    
gidstr

set_in_layout(in_layout)[source]

    
Set if artist is to be included in layout calculations, E.g. Constrained
Layout Guide, `Figure.tight_layout()`, and `fig.savefig(fname,
bbox_inches='tight')`.

Parameters

    
in_layoutbool

set_label(s)[source]

    
Set a label that will be displayed in the legend.

Parameters

    
sobject

    
s will be converted to a string by calling `str`.

set_linewidth(linewidth)[source]

    
Set the line width of the Figure rectangle.

Parameters

    
linewidthnumber

set_path_effects(path_effects)[source]

    
Set the path effects.

Parameters

    
path_effects`AbstractPathEffect`

set_picker(picker)[source]

    
Define the picking behavior of the artist.

Parameters

    
pickerNone or bool or float or callable

    
This can be one of the following:

  * None: Picking is disabled for this artist (default).
  * A boolean: If True then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist.
  * A float: If picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if its data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event
  * A function: If picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:
        hit, props = picker(artist, mouseevent)
    
to determine the hit test. if the mouse event is over the artist, return
hit=True and props is a dictionary of properties you want added to the
PickEvent attributes.

set_rasterized(rasterized)[source]

    
Force rasterized (bitmap) drawing for vector graphics output.

Rasterized drawing is not supported by all artists. If you try to enable this
on an artist that does not support it, the command has no effect and a warning
will be issued.

This setting is ignored for pixel-based output.

See also Rasterization for vector graphics.

Parameters

    
rasterizedbool

set_sketch_params(scale=None, length=None, randomness=None)[source]

    
Set the sketch parameters.

Parameters

    
scalefloat, optional

    
The amplitude of the wiggle perpendicular to the source line, in pixels. If
scale is `None`, or not provided, no sketch filter will be provided.

lengthfloat, optional

    
The length of the wiggle along the line, in pixels (default 128.0)

randomnessfloat, optional

    
The scale factor by which the length is shrunken or expanded (default 16.0)

The PGF backend uses this argument as an RNG seed and not as described above.
Using the same seed yields the same random shape.

set_snap(snap)[source]

    
Set the snapping behavior.

Snapping aligns positions with the pixel grid, which results in clearer
images. For example, if a black line of 1px width was defined at a position in
between two pixels, the resulting image would contain the interpolated value
of that line in the pixel grid, which would be a grey value on both adjacent
pixel positions. In contrast, snapping will move the line to the nearest
integer pixel value, so that the resulting image will really contain a 1px
wide black line.

Snapping is currently only supported by the Agg and MacOSX backends.

Parameters

    
snapbool or None

    
Possible values:

  * True: Snap vertices to the nearest pixel center.
  * False: Do not modify vertex positions.
  * None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center.

set_transform(t)[source]

    
Set the artist transform.

Parameters

    
t`Transform`

set_url(url)[source]

    
Set the url for the artist.

Parameters

    
urlstr

set_visible(b)[source]

    
Set the artist's visibility.

Parameters

    
bbool

set_zorder(level)[source]

    
Set the zorder for the artist. Artists with lower zorder values are drawn
first.

Parameters

    
levelfloat

propertystale

    
Whether the artist is 'stale' and needs to be re-drawn for the output to match
the internal state of the artist.

propertysticky_edges

    
`x` and `y` sticky edge lists for autoscaling.

When performing autoscaling, if a data limit coincides with a value in the
corresponding sticky_edges list, then no margin will be added--the view limit
"sticks" to the edge. A typical use case is histograms, where one usually
expects no margin on the bottom edge (0) of the histogram.

Moreover, margin expansion "bumps" against sticky edges and cannot cross them.
For example, if the upper data limit is 1.0, the upper view limit computed by
simple margin application is 1.2, but there is a sticky edge at 1.1, then the
actual upper view limit will be 1.1.

This attribute cannot be assigned to; however, the `x` and `y` lists can be
modified in place as needed.

#### Examples

    
    >>> artist.sticky_edges.x[:] = (xmin, xmax)
    >>> artist.sticky_edges.y[:] = (ymin, ymax)
    
subfigures(nrows=1, ncols=1, squeeze=True, wspace=None, hspace=None,
width_ratios=None, height_ratios=None, **kwargs)[source]

    
Add a subfigure to this figure or subfigure.

A subfigure has the same artist methods as a figure, and is logically the same
as a figure, but cannot print itself. See Figure subfigures.

Parameters

    
nrows, ncolsint, default: 1

    
Number of rows/columns of the subfigure grid.

squeezebool, default: True

    
If True, extra dimensions are squeezed out from the returned array of
subfigures.

wspace, hspacefloat, default: None

    
The amount of width/height reserved for space between subfigures, expressed as
a fraction of the average subfigure width/height. If not given, the values
will be inferred from a figure or rcParams when necessary.

width_ratiosarray-like of length ncols, optional

    
Defines the relative widths of the columns. Each column gets a relative width
of `width_ratios[i] / sum(width_ratios)`. If not given, all columns will have
the same width.

height_ratiosarray-like of length nrows, optional

    
Defines the relative heights of the rows. Each row gets a relative height of
`height_ratios[i] / sum(height_ratios)`. If not given, all rows will have the
same height.

subplot_mosaic(mosaic, *, sharex=False, sharey=False, subplot_kw=None,
gridspec_kw=None, empty_sentinel='.')[source]

    
Build a layout of Axes based on ASCII art or nested lists.

This is a helper function to build complex GridSpec layouts visually.

Note

This API is provisional and may be revised in the future based on early user
feedback.

Parameters

    
mosaiclist of list of {hashable or nested} or str

    
A visual layout of how you want your Axes to be arranged labeled as strings.
For example

    
    x = [['A panel', 'A panel', 'edge'],
         ['C panel', '.',       'edge']]
    
produces 4 Axes:

  * 'A panel' which is 1 row high and spans the first two columns
  * 'edge' which is 2 rows high and is on the right edge
  * 'C panel' which in 1 row and 1 column wide in the bottom left
  * a blank space 1 row and 1 column wide in the bottom center

Any of the entries in the layout can be a list of lists of the same form to
create nested layouts.

If input is a str, then it can either be a multi-line string of the form

    
    '''
    AAE
    C.E
    '''
    
where each character is a column and each line is a row. Or it can be a
single-line string where rows are separated by `;`:

    
    'AB;CC'
    
The string notation allows only single character Axes labels and does not
support nesting but is very terse.

sharex, shareybool, default: False

    
If True, the x-axis (sharex) or y-axis (sharey) will be shared among all
subplots. In that case, tick label visibility and axis units behave as for
`subplots`. If False, each subplot's x- or y-axis will be independent.

subplot_kwdict, optional

    
Dictionary with keywords passed to the `Figure.add_subplot` call used to
create each subplot.

gridspec_kwdict, optional

    
Dictionary with keywords passed to the `GridSpec` constructor used to create
the grid the subplots are placed on.

empty_sentinelobject, optional

    
Entry in the layout to mean "leave this space empty". Defaults to `'.'`. Note,
if layout is a string, it is processed via `inspect.cleandoc` to remove
leading white space, which may interfere with using white-space as the empty
sentinel.

Returns

    
dict[label, Axes]

    
A dictionary mapping the labels to the Axes objects. The order of the axes is
left-to-right and top-to-bottom of their position in the total layout.

subplots(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True,
subplot_kw=None, gridspec_kw=None)[source]

    
Add a set of subplots to this figure.

This utility wrapper makes it convenient to create common layouts of subplots
in a single call.

Parameters

    
nrows, ncolsint, default: 1

    
Number of rows/columns of the subplot grid.

sharex, shareybool or {'none', 'all', 'row', 'col'}, default: False

    
Controls sharing of x-axis (sharex) or y-axis (sharey):

  * True or 'all': x- or y-axis will be shared among all subplots.
  * False or 'none': each subplot x- or y-axis will be independent.
  * 'row': each subplot row will share an x- or y-axis.
  * 'col': each subplot column will share an x- or y-axis.

When subplots have a shared x-axis along a column, only the x tick labels of
the bottom subplot are created. Similarly, when subplots have a shared y-axis
along a row, only the y tick labels of the first column subplot are created.
To later turn other subplots' ticklabels on, use `tick_params`.

When subplots have a shared axis that has units, calling `Axis.set_units` will
update each axis with the new units.

squeezebool, default: True

    
  * If True, extra dimensions are squeezed out from the returned array of Axes:
    * if only one subplot is constructed (nrows=ncols=1), the resulting single Axes object is returned as a scalar.
    * for Nx1 or 1xM subplots, the returned object is a 1D numpy object array of Axes objects.
    * for NxM, subplots with N>1 and M>1 are returned as a 2D array.
  * If False, no squeezing at all is done: the returned Axes object is always a 2D array containing Axes instances, even if it ends up being 1x1.

subplot_kwdict, optional

    
Dict with keywords passed to the `Figure.add_subplot` call used to create each
subplot.

gridspec_kwdict, optional

    
Dict with keywords passed to the `GridSpec` constructor used to create the
grid the subplots are placed on.

Returns

    
`Axes` or array of Axes

    
Either a single `Axes` object or an array of Axes objects if more than one
subplot was created. The dimensions of the resulting array can be controlled
with the squeeze keyword, see above.

See also

`pyplot.subplots`

`Figure.add_subplot`

`pyplot.subplot`

#### Examples

    
    # First create some toy data:
    x = np.linspace(0, 2*np.pi, 400)
    y = np.sin(x**2)
    
    # Create a figure
    plt.figure()
    
    # Create a subplot
    ax = fig.subplots()
    ax.plot(x, y)
    ax.set_title('Simple plot')
    
    # Create two subplots and unpack the output array immediately
    ax1, ax2 = fig.subplots(1, 2, sharey=True)
    ax1.plot(x, y)
    ax1.set_title('Sharing Y axis')
    ax2.scatter(x, y)
    
    # Create four polar Axes and access them through the returned array
    axes = fig.subplots(2, 2, subplot_kw=dict(projection='polar'))
    axes[0, 0].plot(x, y)
    axes[1, 1].scatter(x, y)
    
    # Share a X axis with each column of subplots
    fig.subplots(2, 2, sharex='col')
    
    # Share a Y axis with each row of subplots
    fig.subplots(2, 2, sharey='row')
    
    # Share both X and Y axes with all subplots
    fig.subplots(2, 2, sharex='all', sharey='all')
    
    # Note that this is the same as
    fig.subplots(2, 2, sharex=True, sharey=True)
    
subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None,
hspace=None)[source]

    
Adjust the subplot layout parameters.

Unset parameters are left unmodified; initial values are given by
`rcParams["figure.subplot.[name]"]`.

Parameters

    
leftfloat, optional

    
The position of the left edge of the subplots, as a fraction of the figure
width.

rightfloat, optional

    
The position of the right edge of the subplots, as a fraction of the figure
width.

bottomfloat, optional

    
The position of the bottom edge of the subplots, as a fraction of the figure
height.

topfloat, optional

    
The position of the top edge of the subplots, as a fraction of the figure
height.

wspacefloat, optional

    
The width of the padding between subplots, as a fraction of the average Axes
width.

hspacefloat, optional

    
The height of the padding between subplots, as a fraction of the average Axes
height.

suptitle(t, **kwargs)[source]

    
Add a centered suptitle to the figure.

Parameters

    
tstr

    
The suptitle text.

xfloat, default: 0.5

    
The x location of the text in figure coordinates.

yfloat, default: 0.98

    
The y location of the text in figure coordinates.

horizontalalignment, ha{'center', 'left', 'right'}, default: center

    
The horizontal alignment of the text relative to (x, y).

verticalalignment, va{'top', 'center', 'bottom', 'baseline'}, default: top

    
The vertical alignment of the text relative to (x, y).

fontsize, sizedefault: `rcParams["figure.titlesize"]` (default: `'large'`)

    
The font size of the text. See `Text.set_size` for possible values.

fontweight, weightdefault: `rcParams["figure.titleweight"]` (default:
`'normal'`)

    
The font weight of the text. See `Text.set_weight` for possible values.

Returns

    
text

    
The `Text` instance of the suptitle.

Other Parameters

    
fontpropertiesNone or dict, optional

    
A dict of font properties. If fontproperties is given the default values for
font size and weight are taken from the `FontProperties` defaults.
`rcParams["figure.titlesize"]` (default: `'large'`) and
`rcParams["figure.titleweight"]` (default: `'normal'`) are ignored in this
case.

**kwargs

    
Additional kwargs are `matplotlib.text.Text` properties.

supxlabel(t, **kwargs)[source]

    
Add a centered supxlabel to the figure.

Parameters

    
tstr

    
The supxlabel text.

xfloat, default: 0.5

    
The x location of the text in figure coordinates.

yfloat, default: 0.01

    
The y location of the text in figure coordinates.

horizontalalignment, ha{'center', 'left', 'right'}, default: center

    
The horizontal alignment of the text relative to (x, y).

verticalalignment, va{'top', 'center', 'bottom', 'baseline'}, default: bottom

    
The vertical alignment of the text relative to (x, y).

fontsize, sizedefault: `rcParams["figure.titlesize"]` (default: `'large'`)

    
The font size of the text. See `Text.set_size` for possible values.

fontweight, weightdefault: `rcParams["figure.titleweight"]` (default:
`'normal'`)

    
The font weight of the text. See `Text.set_weight` for possible values.

Returns

    
text

    
The `Text` instance of the supxlabel.

Other Parameters

    
fontpropertiesNone or dict, optional

    
A dict of font properties. If fontproperties is given the default values for
font size and weight are taken from the `FontProperties` defaults.
`rcParams["figure.titlesize"]` (default: `'large'`) and
`rcParams["figure.titleweight"]` (default: `'normal'`) are ignored in this
case.

**kwargs

    
Additional kwargs are `matplotlib.text.Text` properties.

supylabel(t, **kwargs)[source]

    
Add a centered supylabel to the figure.

Parameters

    
tstr

    
The supylabel text.

xfloat, default: 0.02

    
The x location of the text in figure coordinates.

yfloat, default: 0.5

    
The y location of the text in figure coordinates.

horizontalalignment, ha{'center', 'left', 'right'}, default: left

    
The horizontal alignment of the text relative to (x, y).

verticalalignment, va{'top', 'center', 'bottom', 'baseline'}, default: center

    
The vertical alignment of the text relative to (x, y).

fontsize, sizedefault: `rcParams["figure.titlesize"]` (default: `'large'`)

    
The font size of the text. See `Text.set_size` for possible values.

fontweight, weightdefault: `rcParams["figure.titleweight"]` (default:
`'normal'`)

    
The font weight of the text. See `Text.set_weight` for possible values.

Returns

    
text

    
The `Text` instance of the supylabel.

Other Parameters

    
fontpropertiesNone or dict, optional

    
A dict of font properties. If fontproperties is given the default values for
font size and weight are taken from the `FontProperties` defaults.
`rcParams["figure.titlesize"]` (default: `'large'`) and
`rcParams["figure.titleweight"]` (default: `'normal'`) are ignored in this
case.

**kwargs

    
Additional kwargs are `matplotlib.text.Text` properties.

text(x, y, s, fontdict=None, **kwargs)[source]

    
Add text to figure.

Parameters

    
x, yfloat

    
The position to place the text. By default, this is in figure coordinates,
floats in [0, 1]. The coordinate system can be changed using the transform
keyword.

sstr

    
The text string.

fontdictdict, optional

    
A dictionary to override the default text properties. If not given, the
defaults are determined by `rcParams["font.*"]`. Properties passed as kwargs
override the corresponding ones given in fontdict.

Returns

    
`Text`

Other Parameters

    
**kwargs`Text` properties

    
Other miscellaneous text parameters.

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`backgroundcolor` | color  
`bbox` | dict with properties for `patches.FancyBboxPatch`  
`clip_box` | unknown  
`clip_on` | unknown  
`clip_path` | unknown  
`color` or c | color  
`figure` | `Figure`  
`fontfamily` or family | {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  
`fontproperties` or font or font_properties | `font_manager.FontProperties` or `str` or `pathlib.Path`  
`fontsize` or size | float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  
`fontstretch` or stretch | {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  
`fontstyle` or style | {'normal', 'italic', 'oblique'}  
`fontvariant` or variant | {'normal', 'small-caps'}  
`fontweight` or weight | {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  
`gid` | str  
`horizontalalignment` or ha | {'center', 'right', 'left'}  
`in_layout` | bool  
`label` | object  
`linespacing` | float (multiple of font size)  
`math_fontfamily` | str  
`multialignment` or ma | {'left', 'right', 'center'}  
`parse_math` | bool  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | (float, float)  
`rasterized` | bool  
`rotation` | float or {'vertical', 'horizontal'}  
`rotation_mode` | {None, 'default', 'anchor'}  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`text` | object  
`transform` | `Transform`  
`transform_rotates_text` | bool  
`url` | str  
`usetex` | bool or None  
`verticalalignment` or va | {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  
`visible` | bool  
`wrap` | bool  
`x` | float  
`y` | float  
`zorder` | float  
See also

`Axes.text`

`pyplot.text`

update(props)[source]

    
Update this artist's properties from the dict props.

Parameters

    
propsdict

update_from(other)[source]

    
Copy properties from other to self.

zorder=0

classmatplotlib.figure.SubFigure(parent, subplotspec, *, facecolor=None,
edgecolor=None, linewidth=0.0, frameon=None, **kwargs)[source]

    
Logical figure that can be placed inside a figure.

Typically instantiated using `Figure.add_subfigure` or
`SubFigure.add_subfigure`, or `SubFigure.subfigures`. A subfigure has the same
methods as a figure except for those particularly tied to the size or dpi of
the figure, and is confined to a prescribed region of the figure. For example
the following puts two subfigures side-by-side:

    
    fig = plt.figure()
    sfigs = fig.subfigures(1, 2)
    axsL = sfigs[0].subplots(1, 2)
    axsR = sfigs[1].subplots(2, 1)
    
See Figure subfigures

Parameters

    
parent`figure.Figure` or `figure.SubFigure`

    
Figure or subfigure that contains the SubFigure. SubFigures can be nested.

subplotspec`gridspec.SubplotSpec`

    
Defines the region in a parent gridspec where the subfigure will be placed.

facecolordefault: `rcParams["figure.facecolor"]` (default: `'white'`)

    
The figure patch face color.

edgecolordefault: `rcParams["figure.edgecolor"]` (default: `'white'`)

    
The figure patch edge color.

linewidthfloat

    
The linewidth of the frame (i.e. the edge linewidth of the figure patch).

frameonbool, default: `rcParams["figure.frameon"]` (default: `True`)

    
If `False`, suppress drawing the figure background patch.

Other Parameters

    
**kwargs`SubFigure` properties, optional

     Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`edgecolor` | color  
`facecolor` | color  
`figure` | `Figure`  
`frameon` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`linewidth` | number  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`zorder` | float  
add_artist(artist, clip=False)[source]

    
Add an `Artist` to the figure.

Usually artists are added to Axes objects using `Axes.add_artist`; this method
can be used in the rare cases where one needs to add artists directly to the
figure instead.

Parameters

    
artist`Artist`

    
The artist to add to the figure. If the added artist has no transform
previously set, its transform will be set to `figure.transSubfigure`.

clipbool, default: False

    
Whether the added artist should be clipped by the figure patch.

Returns

    
`Artist`

    
The added artist.

add_axes(*args, **kwargs)[source]

    
Add an Axes to the figure.

Call signatures:

    
    add_axes(rect, projection=None, polar=False, **kwargs)
    add_axes(ax)
    
Parameters

    
rectsequence of float

    
The dimensions [left, bottom, width, height] of the new Axes. All quantities
are in fractions of figure width and height.

projection{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar',
'rectilinear', str}, optional

    
The projection type of the `Axes`. str is the name of a custom projection, see
`projections`. The default None results in a 'rectilinear' projection.

polarbool, default: False

    
If True, equivalent to projection='polar'.

axes_classsubclass type of `Axes`, optional

    
The `axes.Axes` subclass that is instantiated. This parameter is incompatible
with projection and polar. See axisartist for examples.

sharex, sharey`Axes`, optional

    
Share the x or y `axis` with sharex and/or sharey. The axis will have the same
limits, ticks, and scale as the axis of the shared axes.

labelstr

    
A label for the returned Axes.

Returns

    
`Axes`, or a subclass of `Axes`

    
The returned axes class depends on the projection used. It is `Axes` if
rectilinear projection is used and `projections.polar.PolarAxes` if polar
projection is used.

Other Parameters

    
**kwargs

    
This method also takes the keyword arguments for the returned Axes class. The
keyword arguments for the rectilinear Axes class `Axes` can be found in the
following table but there might also be other keyword arguments if another
projection is used, see the actual Axes class.

Property | Description  
---|---  
`adjustable` | {'box', 'datalim'}  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`anchor` | (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  
`animated` | bool  
`aspect` | {'auto', 'equal'} or float  
`autoscale_on` | bool  
`autoscalex_on` | bool  
`autoscaley_on` | bool  
`axes_locator` | Callable[[Axes, Renderer], Bbox]  
`axisbelow` | bool or 'line'  
`box_aspect` | float or None  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`facecolor` or fc | color  
`figure` | `Figure`  
`frame_on` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`navigate` | bool  
`navigate_mode` | unknown  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | [left, bottom, width, height] or `Bbox`  
`prop_cycle` | unknown  
`rasterization_zorder` | float or None  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`title` | str  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`xbound` | unknown  
`xlabel` | str  
`xlim` | (bottom: float, top: float)  
`xmargin` | float greater than -0.5  
`xscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`xticklabels` | unknown  
`xticks` | unknown  
`ybound` | unknown  
`ylabel` | str  
`ylim` | (bottom: float, top: float)  
`ymargin` | float greater than -0.5  
`yscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`yticklabels` | unknown  
`yticks` | unknown  
`zorder` | float  
See also

`Figure.add_subplot`

`pyplot.subplot`

`pyplot.axes`

`Figure.subplots`

`pyplot.subplots`

#### Notes

In rare circumstances, `add_axes` may be called with a single argument, an
Axes instance already created in the present figure but not in the figure's
list of Axes.

#### Examples

Some simple examples:

    
    rect = l, b, w, h
    fig = plt.figure()
    fig.add_axes(rect)
    fig.add_axes(rect, frameon=False, facecolor='g')
    fig.add_axes(rect, polar=True)
    ax = fig.add_axes(rect, projection='polar')
    fig.delaxes(ax)
    fig.add_axes(ax)
    
add_callback(func)[source]

    
Add a callback function that will be called whenever one of the `Artist`'s
properties changes.

Parameters

    
funccallable

    
The callback function. It must have the signature:

    
    def func(artist: Artist) -> Any
    
where artist is the calling `Artist`. Return values may exist but are ignored.

Returns

    
int

    
The observer id associated with the callback. This id can be used for removing
the callback with `remove_callback` later.

See also

`remove_callback`

add_gridspec(nrows=1, ncols=1, **kwargs)[source]

    
Return a `GridSpec` that has this figure as a parent. This allows complex
layout of Axes in the figure.

Parameters

    
nrowsint, default: 1

    
Number of rows in grid.

ncolsint, default: 1

    
Number or columns in grid.

Returns

    
`GridSpec`

Other Parameters

    
**kwargs

    
Keyword arguments are passed to `GridSpec`.

See also

`matplotlib.pyplot.subplots`

#### Examples

Adding a subplot that spans two rows:

    
    fig = plt.figure()
    gs = fig.add_gridspec(2, 2)
    ax1 = fig.add_subplot(gs[0, 0])
    ax2 = fig.add_subplot(gs[1, 0])
    # spans two rows:
    ax3 = fig.add_subplot(gs[:, 1])
    
add_subfigure(subplotspec, **kwargs)[source]

    
Add a `SubFigure` to the figure as part of a subplot arrangement.

Parameters

    
subplotspec`gridspec.SubplotSpec`

    
Defines the region in a parent gridspec where the subfigure will be placed.

Returns

    
`figure.SubFigure`

Other Parameters

    
**kwargs

    
Are passed to the `SubFigure` object.

See also

`Figure.subfigures`

add_subplot(*args, **kwargs)[source]

    
Add an `Axes` to the figure as part of a subplot arrangement.

Call signatures:

    
    add_subplot(nrows, ncols, index, **kwargs)
    add_subplot(pos, **kwargs)
    add_subplot(ax)
    add_subplot()
    
Parameters

    
*argsint, (int, int, index), or `SubplotSpec`, default: (1, 1, 1)
    
The position of the subplot described by one of

  * Three integers (nrows, ncols, index). The subplot will take the index position on a grid with nrows rows and ncols columns. index starts at 1 in the upper left corner and increases to the right. index can also be a two-tuple specifying the (first, last) indices (1-based, and including last) of the subplot, e.g., `fig.add_subplot(3, 1, (1, 2))` makes a subplot that spans the upper 2/3 of the figure.
  * A 3-digit integer. The digits are interpreted as if given separately as three single-digit integers, i.e. `fig.add_subplot(235)` is the same as `fig.add_subplot(2, 3, 5)`. Note that this can only be used if there are no more than 9 subplots.
  * A `SubplotSpec`.

In rare circumstances, `add_subplot` may be called with a single argument, a
subplot Axes instance already created in the present figure but not in the
figure's list of Axes.

projection{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar',
'rectilinear', str}, optional

    
The projection type of the subplot (`Axes`). str is the name of a custom
projection, see `projections`. The default None results in a 'rectilinear'
projection.

polarbool, default: False

    
If True, equivalent to projection='polar'.

axes_classsubclass type of `Axes`, optional

    
The `axes.Axes` subclass that is instantiated. This parameter is incompatible
with projection and polar. See axisartist for examples.

sharex, sharey`Axes`, optional

    
Share the x or y `axis` with sharex and/or sharey. The axis will have the same
limits, ticks, and scale as the axis of the shared axes.

labelstr

    
A label for the returned Axes.

Returns

    
`axes.SubplotBase`, or another subclass of `Axes`

    
The Axes of the subplot. The returned Axes base class depends on the
projection used. It is `Axes` if rectilinear projection is used and
`projections.polar.PolarAxes` if polar projection is used. The returned Axes
is then a subplot subclass of the base class.

Other Parameters

    
**kwargs

    
This method also takes the keyword arguments for the returned Axes base class;
except for the figure argument. The keyword arguments for the rectilinear base
class `Axes` can be found in the following table but there might also be other
keyword arguments if another projection is used.

Property | Description  
---|---  
`adjustable` | {'box', 'datalim'}  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`anchor` | (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  
`animated` | bool  
`aspect` | {'auto', 'equal'} or float  
`autoscale_on` | bool  
`autoscalex_on` | bool  
`autoscaley_on` | bool  
`axes_locator` | Callable[[Axes, Renderer], Bbox]  
`axisbelow` | bool or 'line'  
`box_aspect` | float or None  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`facecolor` or fc | color  
`figure` | `Figure`  
`frame_on` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`navigate` | bool  
`navigate_mode` | unknown  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | [left, bottom, width, height] or `Bbox`  
`prop_cycle` | unknown  
`rasterization_zorder` | float or None  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`title` | str  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`xbound` | unknown  
`xlabel` | str  
`xlim` | (bottom: float, top: float)  
`xmargin` | float greater than -0.5  
`xscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`xticklabels` | unknown  
`xticks` | unknown  
`ybound` | unknown  
`ylabel` | str  
`ylim` | (bottom: float, top: float)  
`ymargin` | float greater than -0.5  
`yscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`yticklabels` | unknown  
`yticks` | unknown  
`zorder` | float  
See also

`Figure.add_axes`

`pyplot.subplot`

`pyplot.axes`

`Figure.subplots`

`pyplot.subplots`

#### Examples

    
    fig = plt.figure()
    
    fig.add_subplot(231)
    ax1 = fig.add_subplot(2, 3, 1)  # equivalent but more general
    
    fig.add_subplot(232, frameon=False)  # subplot with no frame
    fig.add_subplot(233, projection='polar')  # polar subplot
    fig.add_subplot(234, sharex=ax1)  # subplot sharing x-axis with ax1
    fig.add_subplot(235, facecolor="red")  # red subplot
    
    ax1.remove()  # delete ax1 from the figure
    fig.add_subplot(ax1)  # add ax1 back to the figure
    
align_labels(axs=None)[source]

    
Align the xlabels and ylabels of subplots with the same subplots row or column
(respectively) if label alignment is being done automatically (i.e. the label
position is not manually set).

Alignment persists for draw events after this is called.

Parameters

    
axslist of `Axes`

    
Optional list (or ndarray) of `Axes` to align the labels. Default is to align
all Axes on the figure.

See also

`matplotlib.figure.Figure.align_xlabels`

`matplotlib.figure.Figure.align_ylabels`

align_xlabels(axs=None)[source]

    
Align the xlabels of subplots in the same subplot column if label alignment is
being done automatically (i.e. the label position is not manually set).

Alignment persists for draw events after this is called.

If a label is on the bottom, it is aligned with labels on Axes that also have
their label on the bottom and that have the same bottom-most subplot row. If
the label is on the top, it is aligned with labels on Axes with the same top-
most row.

Parameters

    
axslist of `Axes`

    
Optional list of (or ndarray) `Axes` to align the xlabels. Default is to align
all Axes on the figure.

See also

`matplotlib.figure.Figure.align_ylabels`

`matplotlib.figure.Figure.align_labels`

#### Notes

This assumes that `axs` are from the same `GridSpec`, so that their
`SubplotSpec` positions correspond to figure positions.

#### Examples

Example with rotated xtick labels:

    
    fig, axs = plt.subplots(1, 2)
    for tick in axs[0].get_xticklabels():
        tick.set_rotation(55)
    axs[0].set_xlabel('XLabel 0')
    axs[1].set_xlabel('XLabel 1')
    fig.align_xlabels()
    
align_ylabels(axs=None)[source]

    
Align the ylabels of subplots in the same subplot column if label alignment is
being done automatically (i.e. the label position is not manually set).

Alignment persists for draw events after this is called.

If a label is on the left, it is aligned with labels on Axes that also have
their label on the left and that have the same left-most subplot column. If
the label is on the right, it is aligned with labels on Axes with the same
right-most column.

Parameters

    
axslist of `Axes`

    
Optional list (or ndarray) of `Axes` to align the ylabels. Default is to align
all Axes on the figure.

See also

`matplotlib.figure.Figure.align_xlabels`

`matplotlib.figure.Figure.align_labels`

#### Notes

This assumes that `axs` are from the same `GridSpec`, so that their
`SubplotSpec` positions correspond to figure positions.

#### Examples

Example with large yticks labels:

    
    fig, axs = plt.subplots(2, 1)
    axs[0].plot(np.arange(0, 1000, 50))
    axs[0].set_ylabel('YLabel 0')
    axs[1].set_ylabel('YLabel 1')
    fig.align_ylabels()
    
autofmt_xdate(bottom=0.2, rotation=30, ha='right', which='major')[source]

    
Date ticklabels often overlap, so it is useful to rotate them and right align
them. Also, a common use case is a number of subplots with shared x-axis where
the x-axis is date data. The ticklabels are often long, and it helps to rotate
them on the bottom subplot and turn them off on other subplots, as well as
turn off xlabels.

Parameters

    
bottomfloat, default: 0.2

    
The bottom of the subplots for `subplots_adjust`.

rotationfloat, default: 30 degrees

    
The rotation angle of the xtick labels in degrees.

ha{'left', 'center', 'right'}, default: 'right'

    
The horizontal alignment of the xticklabels.

which{'major', 'minor', 'both'}, default: 'major'

    
Selects which ticklabels to rotate.

propertyaxes

    
List of Axes in the SubFigure. You can access and modify the Axes in the
SubFigure through this list.

Do not modify the list itself. Instead, use `add_axes`, `add_subplot` or
`delaxes` to add or remove an Axes.

Note: The `SubFigure.axes` property and `get_axes` method are equivalent.

colorbar(mappable, cax=None, ax=None, use_gridspec=True, **kw)[source]

    
Add a colorbar to a plot.

Parameters

    
mappable

    
The `matplotlib.cm.ScalarMappable` (i.e., `AxesImage`, `ContourSet`, etc.)
described by this colorbar. This argument is mandatory for the
`Figure.colorbar` method but optional for the `pyplot.colorbar` function,
which sets the default to the current image.

Note that one can create a `ScalarMappable` "on-the-fly" to generate colorbars
not attached to a previously drawn artist, e.g.

    
    fig.colorbar(cm.ScalarMappable(norm=norm, cmap=cmap), ax=ax)
    
cax`Axes`, optional

    
Axes into which the colorbar will be drawn.

ax`Axes`, list of Axes, optional

    
One or more parent axes from which space for a new colorbar axes will be
stolen, if cax is None. This has no effect if cax is set.

use_gridspecbool, optional

    
If cax is `None`, a new cax is created as an instance of Axes. If ax is an
instance of Subplot and use_gridspec is `True`, cax is created as an instance
of Subplot using the `gridspec` module.

Returns

    
colorbar`Colorbar`

#### Notes

Additional keyword arguments are of two kinds:

axes properties:

locationNone or {'left', 'right', 'top', 'bottom'}

    
The location, relative to the parent axes, where the colorbar axes is created.
It also determines the orientation of the colorbar (colorbars on the left and
right are vertical, colorbars at the top and bottom are horizontal). If None,
the location will come from the orientation if it is set (vertical colorbars
on the right, horizontal ones at the bottom), or default to 'right' if
orientation is unset.

orientationNone or {'vertical', 'horizontal'}

    
The orientation of the colorbar. It is preferable to set the location of the
colorbar, as that also determines the orientation; passing incompatible values
for location and orientation raises an exception.

fractionfloat, default: 0.15

    
Fraction of original axes to use for colorbar.

shrinkfloat, default: 1.0

    
Fraction by which to multiply the size of the colorbar.

aspectfloat, default: 20

    
Ratio of long to short dimensions.

padfloat, default: 0.05 if vertical, 0.15 if horizontal

    
Fraction of original axes between colorbar and new image axes.

anchor(float, float), optional

    
The anchor point of the colorbar axes. Defaults to (0.0, 0.5) if vertical;
(0.5, 1.0) if horizontal.

panchor(float, float), or False, optional

    
The anchor point of the colorbar parent axes. If False, the parent axes'
anchor will be unchanged. Defaults to (1.0, 0.5) if vertical; (0.5, 0.0) if
horizontal.

colorbar properties:

Property | Description  
---|---  
extend | {'neither', 'both', 'min', 'max'} If not 'neither', make pointed end(s) for out-of- range values. These are set for a given colormap using the colormap set_under and set_over methods.  
extendfrac | {None, 'auto', length, lengths} If set to None, both the minimum and maximum triangular colorbar extensions with have a length of 5% of the interior colorbar length (this is the default setting). If set to 'auto', makes the triangular colorbar extensions the same lengths as the interior boxes (when spacing is set to 'uniform') or the same lengths as the respective adjacent interior boxes (when spacing is set to 'proportional'). If a scalar, indicates the length of both the minimum and maximum triangular colorbar extensions as a fraction of the interior colorbar length. A two-element sequence of fractions may also be given, indicating the lengths of the minimum and maximum colorbar extensions respectively as a fraction of the interior colorbar length.  
extendrect | bool If False the minimum and maximum colorbar extensions will be triangular (the default). If True the extensions will be rectangular.  
spacing | {'uniform', 'proportional'} Uniform spacing gives each discrete color the same space; proportional makes the space proportional to the data interval.  
ticks | None or list of ticks or Locator If None, ticks are determined automatically from the input.  
format | None or str or Formatter If None, `ScalarFormatter` is used. If a format string is given, e.g., '%.3f', that is used. An alternative `Formatter` may be given instead.  
drawedges | bool Whether to draw lines at color boundaries.  
label | str The label on the colorbar's long axis.  
The following will probably be useful only in the context of indexed colors
(that is, when the mappable has norm=NoNorm()), or other unusual
circumstances.

Property | Description  
---|---  
boundaries | None or a sequence  
values | None or a sequence which must be of length 1 less than the sequence of boundaries. For each region delimited by adjacent entries in boundaries, the colormapped to the corresponding value in values will be used.  
If mappable is a `ContourSet`, its extend kwarg is included automatically.

The shrink kwarg provides a simple way to scale the colorbar with respect to
the axes. Note that if cax is specified, it determines the size of the
colorbar and shrink and aspect kwargs are ignored.

For more precise control, you can manually specify the positions of the axes
objects in which the mappable and the colorbar are drawn. In this case, do not
use any of the axes properties kwargs.

It is known that some vector graphics viewers (svg and pdf) renders white gaps
between segments of the colorbar. This is due to bugs in the viewers, not
Matplotlib. As a workaround, the colorbar can be rendered with overlapping
segments:

    
    cbar = colorbar()
    cbar.solids.set_edgecolor("face")
    draw()
    
However this has negative consequences in other circumstances, e.g. with semi-
transparent images (alpha < 1) and colorbar extensions; therefore, this
workaround is not used by default (see issue #1188).

contains(mouseevent)[source]

    
Test whether the mouse event occurred on the figure.

Returns

    
bool, {}

convert_xunits(x)[source]

    
Convert x using the unit type of the xaxis.

If the artist is not in contained in an Axes or if the xaxis does not have
units, x itself is returned.

convert_yunits(y)[source]

    
Convert y using the unit type of the yaxis.

If the artist is not in contained in an Axes or if the yaxis does not have
units, y itself is returned.

delaxes(ax)[source]

    
Remove the `Axes` ax from the figure; update the current Axes.

propertydpi

draw(renderer)[source]

    
Draw the Artist (and its children) using the given renderer.

This has no effect if the artist is not visible (`Artist.get_visible` returns
False).

Parameters

    
renderer`RendererBase` subclass.

#### Notes

This method is overridden in the Artist subclasses.

findobj(match=None, include_self=True)[source]

    
Find artist objects.

Recursively find all `Artist` instances contained in the artist.

Parameters

    
match

    
A filter criterion for the matches. This can be

  * None: Return all objects contained in artist.
  * A function with signature `def match(artist: Artist) -> bool`. The result will only contain artists for which the function returns True.
  * A class instance: e.g., `Line2D`. The result will only contain artists of this class or its subclasses (`isinstance` check).

include_selfbool

    
Include self in the list to be checked for a match.

Returns

    
list of `Artist`

format_cursor_data(data)[source]

    
Return a string representation of data.

Note

This method is intended to be overridden by artist subclasses. As an end-user
of Matplotlib you will most likely not call this method yourself.

The default implementation converts ints and floats and arrays of ints and
floats into a comma-separated string enclosed in square brackets, unless the
artist has an associated colorbar, in which case scalar values are formatted
using the colorbar's formatter.

See also

`get_cursor_data`

propertyframeon

    
Return the figure's background patch visibility, i.e. whether the figure
background will be drawn. Equivalent to `Figure.patch.get_visible()`.

gca(**kwargs)[source]

    
Get the current Axes.

If there is currently no Axes on this Figure, a new one is created using
`Figure.add_subplot`. (To test whether there is currently an Axes on a Figure,
check whether `figure.axes` is empty. To test whether there is currently a
Figure on the pyplot figure stack, check whether `pyplot.get_fignums()` is
empty.)

The following kwargs are supported for ensuring the returned Axes adheres to
the given projection etc., and for Axes creation if the active Axes does not
exist:

Property | Description  
---|---  
`adjustable` | {'box', 'datalim'}  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`anchor` | (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  
`animated` | bool  
`aspect` | {'auto', 'equal'} or float  
`autoscale_on` | bool  
`autoscalex_on` | bool  
`autoscaley_on` | bool  
`axes_locator` | Callable[[Axes, Renderer], Bbox]  
`axisbelow` | bool or 'line'  
`box_aspect` | float or None  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`facecolor` or fc | color  
`figure` | `Figure`  
`frame_on` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`navigate` | bool  
`navigate_mode` | unknown  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | [left, bottom, width, height] or `Bbox`  
`prop_cycle` | unknown  
`rasterization_zorder` | float or None  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`title` | str  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`xbound` | unknown  
`xlabel` | str  
`xlim` | (bottom: float, top: float)  
`xmargin` | float greater than -0.5  
`xscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`xticklabels` | unknown  
`xticks` | unknown  
`ybound` | unknown  
`ylabel` | str  
`ylim` | (bottom: float, top: float)  
`ymargin` | float greater than -0.5  
`yscale` | {"linear", "log", "symlog", "logit", ...} or `ScaleBase`  
`yticklabels` | unknown  
`yticks` | unknown  
`zorder` | float  
get_agg_filter()[source]

    
Return filter function to be used for agg filter.

get_alpha()[source]

    
Return the alpha value used for blending - not supported on all backends.

get_animated()[source]

    
Return whether the artist is animated.

get_axes()[source]

    
List of Axes in the SubFigure. You can access and modify the Axes in the
SubFigure through this list.

Do not modify the list itself. Instead, use `add_axes`, `add_subplot` or
`delaxes` to add or remove an Axes.

Note: The `SubFigure.axes` property and `get_axes` method are equivalent.

get_children()[source]

    
Get a list of artists contained in the figure.

get_clip_box()[source]

    
Return the clipbox.

get_clip_on()[source]

    
Return whether the artist uses clipping.

get_clip_path()[source]

    
Return the clip path.

get_constrained_layout()[source]

    
Return whether constrained layout is being used.

See Constrained Layout Guide.

get_constrained_layout_pads(relative=False)[source]

    
Get padding for `constrained_layout`.

Returns a list of `w_pad, h_pad` in inches and `wspace` and `hspace` as
fractions of the subplot.

See Constrained Layout Guide.

Parameters

    
relativebool

    
If `True`, then convert from inches to figure relative.

get_cursor_data(event)[source]

    
Return the cursor data for a given event.

Note

This method is intended to be overridden by artist subclasses. As an end-user
of Matplotlib you will most likely not call this method yourself.

Cursor data can be used by Artists to provide additional context information
for a given event. The default implementation just returns None.

Subclasses can override the method and return arbitrary data. However, when
doing so, they must ensure that `format_cursor_data` can convert the data to a
string representation.

The only current use case is displaying the z-value of an `AxesImage` in the
status bar of a plot window, while moving the mouse.

Parameters

    
event`matplotlib.backend_bases.MouseEvent`

See also

`format_cursor_data`

get_default_bbox_extra_artists()[source]

get_edgecolor()[source]

    
Get the edge color of the Figure rectangle.

get_facecolor()[source]

    
Get the face color of the Figure rectangle.

get_figure()[source]

    
Return the `Figure` instance the artist belongs to.

get_frameon()[source]

    
Return the figure's background patch visibility, i.e. whether the figure
background will be drawn. Equivalent to `Figure.patch.get_visible()`.

get_gid()[source]

    
Return the group id.

get_in_layout()[source]

    
Return boolean flag, `True` if artist is included in layout calculations.

E.g. Constrained Layout Guide, `Figure.tight_layout()`, and
`fig.savefig(fname, bbox_inches='tight')`.

get_label()[source]

    
Return the label used for this artist in the legend.

get_linewidth()[source]

    
Get the line width of the Figure rectangle.

get_path_effects()[source]

get_picker()[source]

    
Return the picking behavior of the artist.

The possible values are described in `set_picker`.

See also

`set_picker`, `pickable`, `pick`

get_rasterized()[source]

    
Return whether the artist is to be rasterized.

get_sketch_params()[source]

    
Return the sketch parameters for the artist.

Returns

    
tuple or None

    
A 3-tuple with the following elements:

  * scale: The amplitude of the wiggle perpendicular to the source line.
  * length: The length of the wiggle along the line.
  * randomness: The scale factor by which the length is shrunken or expanded.

Returns None if no sketch parameters were set.

get_snap()[source]

    
Return the snap setting.

See `set_snap` for details.

get_tightbbox(renderer, bbox_extra_artists=None)[source]

    
Return a (tight) bounding box of the figure in inches.

Note that `FigureBase` differs from all other artists, which return their
`Bbox` in pixels.

Artists that have `artist.set_in_layout(False)` are not included in the bbox.

Parameters

    
renderer`RendererBase` subclass

    
renderer that will be used to draw the figures (i.e.
`fig.canvas.get_renderer()`)

bbox_extra_artistslist of `Artist` or `None`

    
List of artists to include in the tight bounding box. If `None` (default),
then all artist children of each Axes are included in the tight bounding box.

Returns

    
`BboxBase`

    
containing the bounding box (in figure inches).

get_transform()[source]

    
Return the `Transform` instance used by this artist.

get_transformed_clip_path_and_affine()[source]

    
Return the clip path with the non-affine part of its transformation applied,
and the remaining affine part of its transformation.

get_url()[source]

    
Return the url.

get_visible()[source]

    
Return the visibility.

get_window_extent(*args, **kwargs)[source]

    
Get the artist's bounding box in display space.

The bounding box' width and height are nonnegative.

Subclasses should override for inclusion in the bounding box "tight"
calculation. Default is to return an empty bounding box at 0, 0.

Be careful when using this function, the results will not update if the artist
window extent of the artist changes. The extent can change due to any changes
in the transform stack, such as changing the axes limits, the figure size, or
the canvas used (as is done when saving a figure). This can lead to unexpected
behavior where interactive figures will look fine on the screen, but will save
incorrectly.

get_zorder()[source]

    
Return the artist's zorder.

have_units()[source]

    
Return whether units are set on any axis.

is_transform_set()[source]

    
Return whether the Artist has an explicitly set transform.

This is True after `set_transform` has been called.

legend(*args, **kwargs)[source]

    
Place a legend on the figure.

Call signatures:

    
    legend()
    legend(handles, labels)
    legend(handles=handles)
    legend(labels)
    
The call signatures correspond to the following different ways to use this
method:

1\. Automatic detection of elements to be shown in the legend

The elements to be added to the legend are automatically determined, when you
do not pass in any extra arguments.

In this case, the labels are taken from the artist. You can specify them
either at artist creation or by calling the `set_label()` method on the
artist:

    
    ax.plot([1, 2, 3], label='Inline label')
    fig.legend()
    
or:

    
    line, = ax.plot([1, 2, 3])
    line.set_label('Label via method')
    fig.legend()
    
Specific lines can be excluded from the automatic legend element selection by
defining a label starting with an underscore. This is default for all artists,
so calling `Figure.legend` without any arguments and without setting the
labels manually will result in no legend being drawn.

2\. Explicitly listing the artists and labels in the legend

For full control of which artists have a legend entry, it is possible to pass
an iterable of legend artists followed by an iterable of legend labels
respectively:

    
    fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])
    
3\. Explicitly listing the artists in the legend

This is similar to 2, but the labels are taken from the artists' label
properties. Example:

    
    line1, = ax1.plot([1, 2, 3], label='label1')
    line2, = ax2.plot([1, 2, 3], label='label2')
    fig.legend(handles=[line1, line2])
    
4\. Labeling existing plot elements

Discouraged

This call signature is discouraged, because the relation between plot elements
and labels is only implicit by their order and can easily be mixed up.

To make a legend for all artists on all Axes, call this function with an
iterable of strings, one for each legend item. For example:

    
    fig, (ax1, ax2)  = plt.subplots(1, 2)
    ax1.plot([1, 3, 5], color='blue')
    ax2.plot([2, 4, 6], color='red')
    fig.legend(['the blues', 'the reds'])
    
Parameters

    
handleslist of `Artist`, optional

    
A list of Artists (lines, patches) to be added to the legend. Use this
together with labels, if you need full control on what is shown in the legend
and the automatic mechanism described above is not sufficient.

The length of handles and labels should be the same in this case. If they are
not, they are truncated to the smaller length.

labelslist of str, optional

    
A list of labels to show next to the artists. Use this together with handles,
if you need full control on what is shown in the legend and the automatic
mechanism described above is not sufficient.

Returns

    
`Legend`

Other Parameters

    
locstr or pair of floats, default: `rcParams["legend.loc"]` (default:
`'best'`) ('best' for axes, 'upper right' for figures)

    
The location of the legend.

The strings `'upper left', 'upper right', 'lower left', 'lower right'` place
the legend at the corresponding corner of the axes/figure.

The strings `'upper center', 'lower center', 'center left', 'center right'`
place the legend at the center of the corresponding edge of the axes/figure.

The string `'center'` places the legend at the center of the axes/figure.

The string `'best'` places the legend at the location, among the nine
locations defined so far, with the minimum overlap with other drawn artists.
This option can be quite slow for plots with large amounts of data; your
plotting speed may benefit from providing a specific location.

The location can also be a 2-tuple giving the coordinates of the lower-left
corner of the legend in axes coordinates (in which case bbox_to_anchor will be
ignored).

For back-compatibility, `'center right'` (but no other location) can also be
spelled `'right'`, and each "string" locations can also be given as a numeric
value:

Location String | Location Code  
---|---  
'best' | 0  
'upper right' | 1  
'upper left' | 2  
'lower left' | 3  
'lower right' | 4  
'right' | 5  
'center left' | 6  
'center right' | 7  
'lower center' | 8  
'upper center' | 9  
'center' | 10  
bbox_to_anchor`BboxBase`, 2-tuple, or 4-tuple of floats

    
Box that is used to position the legend in conjunction with loc. Defaults to
`axes.bbox` (if called as a method to `Axes.legend`) or `figure.bbox` (if
`Figure.legend`). This argument allows arbitrary placement of the legend.

Bbox coordinates are interpreted in the coordinate system given by
bbox_transform, with the default transform Axes or Figure coordinates,
depending on which `legend` is called.

If a 4-tuple or `BboxBase` is given, then it specifies the bbox `(x, y, width,
height)` that the legend is placed in. To put the legend in the best location
in the bottom right quadrant of the axes (or figure):

    
    loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)
    
A 2-tuple `(x, y)` places the corner of the legend specified by loc at x, y.
For example, to put the legend's upper right-hand corner in the center of the
axes (or figure) the following keywords can be used:

    
    loc='upper right', bbox_to_anchor=(0.5, 0.5)
    
ncolint, default: 1

    
The number of columns that the legend has.

propNone or `matplotlib.font_manager.FontProperties` or dict

    
The font properties of the legend. If None (default), the current
`matplotlib.rcParams` will be used.

fontsizeint or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large',
'xx-large'}

    
The font size of the legend. If the value is numeric the size will be the
absolute font size in points. String values are relative to the current
default font size. This argument is only used if prop is not specified.

labelcolorstr or list, default: `rcParams["legend.labelcolor"]` (default:
`'None'`)

    
The color of the text in the legend. Either a valid color string (for example,
'red'), or a list of color strings. The labelcolor can also be made to match
the color of the line or marker using 'linecolor', 'markerfacecolor' (or
'mfc'), or 'markeredgecolor' (or 'mec').

Labelcolor can be set globally using `rcParams["legend.labelcolor"]` (default:
`'None'`). If None, use `rcParams["text.color"]` (default: `'black'`).

numpointsint, default: `rcParams["legend.numpoints"]` (default: `1`)

    
The number of marker points in the legend when creating a legend entry for a
`Line2D` (line).

scatterpointsint, default: `rcParams["legend.scatterpoints"]` (default: `1`)

    
The number of marker points in the legend when creating a legend entry for a
`PathCollection` (scatter plot).

scatteryoffsetsiterable of floats, default: `[0.375, 0.5, 0.3125]`

    
The vertical offset (relative to the font size) for the markers created for a
scatter plot legend entry. 0.0 is at the base the legend text, and 1.0 is at
the top. To draw all markers at the same height, set to `[0.5]`.

markerscalefloat, default: `rcParams["legend.markerscale"]` (default: `1.0`)

    
The relative size of legend markers compared with the originally drawn ones.

markerfirstbool, default: True

    
If True, legend marker is placed to the left of the legend label. If False,
legend marker is placed to the right of the legend label.

frameonbool, default: `rcParams["legend.frameon"]` (default: `True`)

    
Whether the legend should be drawn on a patch (frame).

fancyboxbool, default: `rcParams["legend.fancybox"]` (default: `True`)

    
Whether round edges should be enabled around the `FancyBboxPatch` which makes
up the legend's background.

shadowbool, default: `rcParams["legend.shadow"]` (default: `False`)

    
Whether to draw a shadow behind the legend.

framealphafloat, default: `rcParams["legend.framealpha"]` (default: `0.8`)

    
The alpha transparency of the legend's background. If shadow is activated and
framealpha is `None`, the default value is ignored.

facecolor"inherit" or color, default: `rcParams["legend.facecolor"]` (default:
`'inherit'`)

    
The legend's background color. If `"inherit"`, use
`rcParams["axes.facecolor"]` (default: `'white'`).

edgecolor"inherit" or color, default: `rcParams["legend.edgecolor"]` (default:
`'0.8'`)

    
The legend's background patch edge color. If `"inherit"`, use take
`rcParams["axes.edgecolor"]` (default: `'black'`).

mode{"expand", None}

    
If mode is set to `"expand"` the legend will be horizontally expanded to fill
the axes area (or bbox_to_anchor if defines the legend's size).

bbox_transformNone or `matplotlib.transforms.Transform`

    
The transform for the bounding box (bbox_to_anchor). For a value of `None`
(default) the Axes' `transAxes` transform will be used.

titlestr or None

    
The legend's title. Default is no title (`None`).

title_fontpropertiesNone or `matplotlib.font_manager.FontProperties` or dict

    
The font properties of the legend's title. If None (default), the
title_fontsize argument will be used if present; if title_fontsize is also
None, the current `rcParams["legend.title_fontsize"]` (default: `None`) will
be used.

title_fontsizeint or {'xx-small', 'x-small', 'small', 'medium', 'large',
'x-large', 'xx-large'}, default: `rcParams["legend.title_fontsize"]` (default:
`None`)

    
The font size of the legend's title. Note: This cannot be combined with
title_fontproperties. If you want to set the fontsize alongside other font
properties, use the size parameter in title_fontproperties.

borderpadfloat, default: `rcParams["legend.borderpad"]` (default: `0.4`)

    
The fractional whitespace inside the legend border, in font-size units.

labelspacingfloat, default: `rcParams["legend.labelspacing"]` (default: `0.5`)

    
The vertical space between the legend entries, in font-size units.

handlelengthfloat, default: `rcParams["legend.handlelength"]` (default: `2.0`)

    
The length of the legend handles, in font-size units.

handleheightfloat, default: `rcParams["legend.handleheight"]` (default: `0.7`)

    
The height of the legend handles, in font-size units.

handletextpadfloat, default: `rcParams["legend.handletextpad"]` (default:
`0.8`)

    
The pad between the legend handle and text, in font-size units.

borderaxespadfloat, default: `rcParams["legend.borderaxespad"]` (default:
`0.5`)

    
The pad between the axes and legend border, in font-size units.

columnspacingfloat, default: `rcParams["legend.columnspacing"]` (default:
`2.0`)

    
The spacing between columns, in font-size units.

handler_mapdict or None

    
The custom dictionary mapping instances or types to a legend handler. This
handler_map updates the default handler map found at
`matplotlib.legend.Legend.get_legend_handler_map`.

See also

`Axes.legend`

#### Notes

Some artists are not supported by this function. See Legend guide for details.

propertymouseover

    
If this property is set to True, the artist will be queried for custom context
information when the mouse cursor moves over it.

See also `get_cursor_data()`, `ToolCursorPosition` and `NavigationToolbar2`.

pchanged()[source]

    
Call all of the registered callbacks.

This function is triggered internally when a property is changed.

See also

`add_callback`

`remove_callback`

pick(mouseevent)[source]

    
Process a pick event.

Each child artist will fire a pick event if mouseevent is over the artist and
the artist has picker set.

See also

`set_picker`, `get_picker`, `pickable`

pickable()[source]

    
Return whether the artist is pickable.

See also

`set_picker`, `get_picker`, `pick`

properties()[source]

    
Return a dictionary of all the properties of the artist.

remove()[source]

    
Remove the artist from the figure if possible.

The effect will not be visible until the figure is redrawn, e.g., with
`FigureCanvasBase.draw_idle`. Call `relim` to update the axes limits if
desired.

Note: `relim` will not see collections even if the collection was added to the
axes with autolim = True.

Note: there is no support for removing the artist's legend entry.

remove_callback(oid)[source]

    
Remove a callback based on its observer id.

See also

`add_callback`

sca(a)[source]

    
Set the current Axes to be a and return a.

set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, clip_box=<UNSET>,
clip_on=<UNSET>, clip_path=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>,
frameon=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>,
linewidth=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>,
sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>,
visible=<UNSET>, zorder=<UNSET>)[source]

    
Set multiple properties at once.

Supported properties are

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`edgecolor` | color  
`facecolor` | color  
`figure` | `Figure`  
`frameon` | bool  
`gid` | str  
`in_layout` | bool  
`label` | object  
`linewidth` | number  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`zorder` | float  
set_agg_filter(filter_func)[source]

    
Set the agg filter.

Parameters

    
filter_funccallable

    
A filter function, which takes a (m, n, 3) float array and a dpi value, and
returns a (m, n, 3) array.

set_alpha(alpha)[source]

    
Set the alpha value used for blending - not supported on all backends.

Parameters

    
alphascalar or None

    
alpha must be within the 0-1 range, inclusive.

set_animated(b)[source]

    
Set whether the artist is intended to be used in an animation.

If True, the artist is excluded from regular drawing of the figure. You have
to call `Figure.draw_artist` / `Axes.draw_artist` explicitly on the artist.
This appoach is used to speed up animations using blitting.

See also `matplotlib.animation` and Faster rendering by using blitting.

Parameters

    
bbool

set_clip_box(clipbox)[source]

    
Set the artist's clip `Bbox`.

Parameters

    
clipbox`Bbox`

set_clip_on(b)[source]

    
Set whether the artist uses clipping.

When False artists will be visible outside of the axes which can lead to
unexpected results.

Parameters

    
bbool

set_clip_path(path, transform=None)[source]

    
Set the artist's clip path.

Parameters

    
path`Patch` or `Path` or `TransformedPath` or None

    
The clip path. If given a `Path`, transform must be provided as well. If None,
a previously set clip path is removed.

transform`Transform`, optional

    
Only used if path is a `Path`, in which case the given `Path` is converted to
a `TransformedPath` using transform.

#### Notes

For efficiency, if path is a `Rectangle` this method will set the clipping box
to the corresponding rectangle and set the clipping path to `None`.

For technical reasons (support of `set`), a tuple (path, transform) is also
accepted as a single positional parameter.

set_edgecolor(color)[source]

    
Set the edge color of the Figure rectangle.

Parameters

    
colorcolor

set_facecolor(color)[source]

    
Set the face color of the Figure rectangle.

Parameters

    
colorcolor

set_figure(fig)[source]

    
Set the `Figure` instance the artist belongs to.

Parameters

    
fig`Figure`

set_frameon(b)[source]

    
Set the figure's background patch visibility, i.e. whether the figure
background will be drawn. Equivalent to `Figure.patch.set_visible()`.

Parameters

    
bbool

set_gid(gid)[source]

    
Set the (group) id for the artist.

Parameters

    
gidstr

set_in_layout(in_layout)[source]

    
Set if artist is to be included in layout calculations, E.g. Constrained
Layout Guide, `Figure.tight_layout()`, and `fig.savefig(fname,
bbox_inches='tight')`.

Parameters

    
in_layoutbool

set_label(s)[source]

    
Set a label that will be displayed in the legend.

Parameters

    
sobject

    
s will be converted to a string by calling `str`.

set_linewidth(linewidth)[source]

    
Set the line width of the Figure rectangle.

Parameters

    
linewidthnumber

set_path_effects(path_effects)[source]

    
Set the path effects.

Parameters

    
path_effects`AbstractPathEffect`

set_picker(picker)[source]

    
Define the picking behavior of the artist.

Parameters

    
pickerNone or bool or float or callable

    
This can be one of the following:

  * None: Picking is disabled for this artist (default).
  * A boolean: If True then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist.
  * A float: If picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if its data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event
  * A function: If picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:
        hit, props = picker(artist, mouseevent)
    
to determine the hit test. if the mouse event is over the artist, return
hit=True and props is a dictionary of properties you want added to the
PickEvent attributes.

set_rasterized(rasterized)[source]

    
Force rasterized (bitmap) drawing for vector graphics output.

Rasterized drawing is not supported by all artists. If you try to enable this
on an artist that does not support it, the command has no effect and a warning
will be issued.

This setting is ignored for pixel-based output.

See also Rasterization for vector graphics.

Parameters

    
rasterizedbool

set_sketch_params(scale=None, length=None, randomness=None)[source]

    
Set the sketch parameters.

Parameters

    
scalefloat, optional

    
The amplitude of the wiggle perpendicular to the source line, in pixels. If
scale is `None`, or not provided, no sketch filter will be provided.

lengthfloat, optional

    
The length of the wiggle along the line, in pixels (default 128.0)

randomnessfloat, optional

    
The scale factor by which the length is shrunken or expanded (default 16.0)

The PGF backend uses this argument as an RNG seed and not as described above.
Using the same seed yields the same random shape.

set_snap(snap)[source]

    
Set the snapping behavior.

Snapping aligns positions with the pixel grid, which results in clearer
images. For example, if a black line of 1px width was defined at a position in
between two pixels, the resulting image would contain the interpolated value
of that line in the pixel grid, which would be a grey value on both adjacent
pixel positions. In contrast, snapping will move the line to the nearest
integer pixel value, so that the resulting image will really contain a 1px
wide black line.

Snapping is currently only supported by the Agg and MacOSX backends.

Parameters

    
snapbool or None

    
Possible values:

  * True: Snap vertices to the nearest pixel center.
  * False: Do not modify vertex positions.
  * None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center.

set_transform(t)[source]

    
Set the artist transform.

Parameters

    
t`Transform`

set_url(url)[source]

    
Set the url for the artist.

Parameters

    
urlstr

set_visible(b)[source]

    
Set the artist's visibility.

Parameters

    
bbool

set_zorder(level)[source]

    
Set the zorder for the artist. Artists with lower zorder values are drawn
first.

Parameters

    
levelfloat

propertystale

    
Whether the artist is 'stale' and needs to be re-drawn for the output to match
the internal state of the artist.

propertysticky_edges

    
`x` and `y` sticky edge lists for autoscaling.

When performing autoscaling, if a data limit coincides with a value in the
corresponding sticky_edges list, then no margin will be added--the view limit
"sticks" to the edge. A typical use case is histograms, where one usually
expects no margin on the bottom edge (0) of the histogram.

Moreover, margin expansion "bumps" against sticky edges and cannot cross them.
For example, if the upper data limit is 1.0, the upper view limit computed by
simple margin application is 1.2, but there is a sticky edge at 1.1, then the
actual upper view limit will be 1.1.

This attribute cannot be assigned to; however, the `x` and `y` lists can be
modified in place as needed.

#### Examples

    
    >>> artist.sticky_edges.x[:] = (xmin, xmax)
    >>> artist.sticky_edges.y[:] = (ymin, ymax)
    
subfigures(nrows=1, ncols=1, squeeze=True, wspace=None, hspace=None,
width_ratios=None, height_ratios=None, **kwargs)[source]

    
Add a subfigure to this figure or subfigure.

A subfigure has the same artist methods as a figure, and is logically the same
as a figure, but cannot print itself. See Figure subfigures.

Parameters

    
nrows, ncolsint, default: 1

    
Number of rows/columns of the subfigure grid.

squeezebool, default: True

    
If True, extra dimensions are squeezed out from the returned array of
subfigures.

wspace, hspacefloat, default: None

    
The amount of width/height reserved for space between subfigures, expressed as
a fraction of the average subfigure width/height. If not given, the values
will be inferred from a figure or rcParams when necessary.

width_ratiosarray-like of length ncols, optional

    
Defines the relative widths of the columns. Each column gets a relative width
of `width_ratios[i] / sum(width_ratios)`. If not given, all columns will have
the same width.

height_ratiosarray-like of length nrows, optional

    
Defines the relative heights of the rows. Each row gets a relative height of
`height_ratios[i] / sum(height_ratios)`. If not given, all rows will have the
same height.

subplot_mosaic(mosaic, *, sharex=False, sharey=False, subplot_kw=None,
gridspec_kw=None, empty_sentinel='.')[source]

    
Build a layout of Axes based on ASCII art or nested lists.

This is a helper function to build complex GridSpec layouts visually.

Note

This API is provisional and may be revised in the future based on early user
feedback.

Parameters

    
mosaiclist of list of {hashable or nested} or str

    
A visual layout of how you want your Axes to be arranged labeled as strings.
For example

    
    x = [['A panel', 'A panel', 'edge'],
         ['C panel', '.',       'edge']]
    
produces 4 Axes:

  * 'A panel' which is 1 row high and spans the first two columns
  * 'edge' which is 2 rows high and is on the right edge
  * 'C panel' which in 1 row and 1 column wide in the bottom left
  * a blank space 1 row and 1 column wide in the bottom center

Any of the entries in the layout can be a list of lists of the same form to
create nested layouts.

If input is a str, then it can either be a multi-line string of the form

    
    '''
    AAE
    C.E
    '''
    
where each character is a column and each line is a row. Or it can be a
single-line string where rows are separated by `;`:

    
    'AB;CC'
    
The string notation allows only single character Axes labels and does not
support nesting but is very terse.

sharex, shareybool, default: False

    
If True, the x-axis (sharex) or y-axis (sharey) will be shared among all
subplots. In that case, tick label visibility and axis units behave as for
`subplots`. If False, each subplot's x- or y-axis will be independent.

subplot_kwdict, optional

    
Dictionary with keywords passed to the `Figure.add_subplot` call used to
create each subplot.

gridspec_kwdict, optional

    
Dictionary with keywords passed to the `GridSpec` constructor used to create
the grid the subplots are placed on.

empty_sentinelobject, optional

    
Entry in the layout to mean "leave this space empty". Defaults to `'.'`. Note,
if layout is a string, it is processed via `inspect.cleandoc` to remove
leading white space, which may interfere with using white-space as the empty
sentinel.

Returns

    
dict[label, Axes]

    
A dictionary mapping the labels to the Axes objects. The order of the axes is
left-to-right and top-to-bottom of their position in the total layout.

subplots(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True,
subplot_kw=None, gridspec_kw=None)[source]

    
Add a set of subplots to this figure.

This utility wrapper makes it convenient to create common layouts of subplots
in a single call.

Parameters

    
nrows, ncolsint, default: 1

    
Number of rows/columns of the subplot grid.

sharex, shareybool or {'none', 'all', 'row', 'col'}, default: False

    
Controls sharing of x-axis (sharex) or y-axis (sharey):

  * True or 'all': x- or y-axis will be shared among all subplots.
  * False or 'none': each subplot x- or y-axis will be independent.
  * 'row': each subplot row will share an x- or y-axis.
  * 'col': each subplot column will share an x- or y-axis.

When subplots have a shared x-axis along a column, only the x tick labels of
the bottom subplot are created. Similarly, when subplots have a shared y-axis
along a row, only the y tick labels of the first column subplot are created.
To later turn other subplots' ticklabels on, use `tick_params`.

When subplots have a shared axis that has units, calling `Axis.set_units` will
update each axis with the new units.

squeezebool, default: True

    
  * If True, extra dimensions are squeezed out from the returned array of Axes:
    * if only one subplot is constructed (nrows=ncols=1), the resulting single Axes object is returned as a scalar.
    * for Nx1 or 1xM subplots, the returned object is a 1D numpy object array of Axes objects.
    * for NxM, subplots with N>1 and M>1 are returned as a 2D array.
  * If False, no squeezing at all is done: the returned Axes object is always a 2D array containing Axes instances, even if it ends up being 1x1.

subplot_kwdict, optional

    
Dict with keywords passed to the `Figure.add_subplot` call used to create each
subplot.

gridspec_kwdict, optional

    
Dict with keywords passed to the `GridSpec` constructor used to create the
grid the subplots are placed on.

Returns

    
`Axes` or array of Axes

    
Either a single `Axes` object or an array of Axes objects if more than one
subplot was created. The dimensions of the resulting array can be controlled
with the squeeze keyword, see above.

See also

`pyplot.subplots`

`Figure.add_subplot`

`pyplot.subplot`

#### Examples

    
    # First create some toy data:
    x = np.linspace(0, 2*np.pi, 400)
    y = np.sin(x**2)
    
    # Create a figure
    plt.figure()
    
    # Create a subplot
    ax = fig.subplots()
    ax.plot(x, y)
    ax.set_title('Simple plot')
    
    # Create two subplots and unpack the output array immediately
    ax1, ax2 = fig.subplots(1, 2, sharey=True)
    ax1.plot(x, y)
    ax1.set_title('Sharing Y axis')
    ax2.scatter(x, y)
    
    # Create four polar Axes and access them through the returned array
    axes = fig.subplots(2, 2, subplot_kw=dict(projection='polar'))
    axes[0, 0].plot(x, y)
    axes[1, 1].scatter(x, y)
    
    # Share a X axis with each column of subplots
    fig.subplots(2, 2, sharex='col')
    
    # Share a Y axis with each row of subplots
    fig.subplots(2, 2, sharey='row')
    
    # Share both X and Y axes with all subplots
    fig.subplots(2, 2, sharex='all', sharey='all')
    
    # Note that this is the same as
    fig.subplots(2, 2, sharex=True, sharey=True)
    
subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None,
hspace=None)[source]

    
Adjust the subplot layout parameters.

Unset parameters are left unmodified; initial values are given by
`rcParams["figure.subplot.[name]"]`.

Parameters

    
leftfloat, optional

    
The position of the left edge of the subplots, as a fraction of the figure
width.

rightfloat, optional

    
The position of the right edge of the subplots, as a fraction of the figure
width.

bottomfloat, optional

    
The position of the bottom edge of the subplots, as a fraction of the figure
height.

topfloat, optional

    
The position of the top edge of the subplots, as a fraction of the figure
height.

wspacefloat, optional

    
The width of the padding between subplots, as a fraction of the average Axes
width.

hspacefloat, optional

    
The height of the padding between subplots, as a fraction of the average Axes
height.

suptitle(t, **kwargs)[source]

    
Add a centered suptitle to the figure.

Parameters

    
tstr

    
The suptitle text.

xfloat, default: 0.5

    
The x location of the text in figure coordinates.

yfloat, default: 0.98

    
The y location of the text in figure coordinates.

horizontalalignment, ha{'center', 'left', 'right'}, default: center

    
The horizontal alignment of the text relative to (x, y).

verticalalignment, va{'top', 'center', 'bottom', 'baseline'}, default: top

    
The vertical alignment of the text relative to (x, y).

fontsize, sizedefault: `rcParams["figure.titlesize"]` (default: `'large'`)

    
The font size of the text. See `Text.set_size` for possible values.

fontweight, weightdefault: `rcParams["figure.titleweight"]` (default:
`'normal'`)

    
The font weight of the text. See `Text.set_weight` for possible values.

Returns

    
text

    
The `Text` instance of the suptitle.

Other Parameters

    
fontpropertiesNone or dict, optional

    
A dict of font properties. If fontproperties is given the default values for
font size and weight are taken from the `FontProperties` defaults.
`rcParams["figure.titlesize"]` (default: `'large'`) and
`rcParams["figure.titleweight"]` (default: `'normal'`) are ignored in this
case.

**kwargs

    
Additional kwargs are `matplotlib.text.Text` properties.

supxlabel(t, **kwargs)[source]

    
Add a centered supxlabel to the figure.

Parameters

    
tstr

    
The supxlabel text.

xfloat, default: 0.5

    
The x location of the text in figure coordinates.

yfloat, default: 0.01

    
The y location of the text in figure coordinates.

horizontalalignment, ha{'center', 'left', 'right'}, default: center

    
The horizontal alignment of the text relative to (x, y).

verticalalignment, va{'top', 'center', 'bottom', 'baseline'}, default: bottom

    
The vertical alignment of the text relative to (x, y).

fontsize, sizedefault: `rcParams["figure.titlesize"]` (default: `'large'`)

    
The font size of the text. See `Text.set_size` for possible values.

fontweight, weightdefault: `rcParams["figure.titleweight"]` (default:
`'normal'`)

    
The font weight of the text. See `Text.set_weight` for possible values.

Returns

    
text

    
The `Text` instance of the supxlabel.

Other Parameters

    
fontpropertiesNone or dict, optional

    
A dict of font properties. If fontproperties is given the default values for
font size and weight are taken from the `FontProperties` defaults.
`rcParams["figure.titlesize"]` (default: `'large'`) and
`rcParams["figure.titleweight"]` (default: `'normal'`) are ignored in this
case.

**kwargs

    
Additional kwargs are `matplotlib.text.Text` properties.

supylabel(t, **kwargs)[source]

    
Add a centered supylabel to the figure.

Parameters

    
tstr

    
The supylabel text.

xfloat, default: 0.02

    
The x location of the text in figure coordinates.

yfloat, default: 0.5

    
The y location of the text in figure coordinates.

horizontalalignment, ha{'center', 'left', 'right'}, default: left

    
The horizontal alignment of the text relative to (x, y).

verticalalignment, va{'top', 'center', 'bottom', 'baseline'}, default: center

    
The vertical alignment of the text relative to (x, y).

fontsize, sizedefault: `rcParams["figure.titlesize"]` (default: `'large'`)

    
The font size of the text. See `Text.set_size` for possible values.

fontweight, weightdefault: `rcParams["figure.titleweight"]` (default:
`'normal'`)

    
The font weight of the text. See `Text.set_weight` for possible values.

Returns

    
text

    
The `Text` instance of the supylabel.

Other Parameters

    
fontpropertiesNone or dict, optional

    
A dict of font properties. If fontproperties is given the default values for
font size and weight are taken from the `FontProperties` defaults.
`rcParams["figure.titlesize"]` (default: `'large'`) and
`rcParams["figure.titleweight"]` (default: `'normal'`) are ignored in this
case.

**kwargs

    
Additional kwargs are `matplotlib.text.Text` properties.

text(x, y, s, fontdict=None, **kwargs)[source]

    
Add text to figure.

Parameters

    
x, yfloat

    
The position to place the text. By default, this is in figure coordinates,
floats in [0, 1]. The coordinate system can be changed using the transform
keyword.

sstr

    
The text string.

fontdictdict, optional

    
A dictionary to override the default text properties. If not given, the
defaults are determined by `rcParams["font.*"]`. Properties passed as kwargs
override the corresponding ones given in fontdict.

Returns

    
`Text`

Other Parameters

    
**kwargs`Text` properties

    
Other miscellaneous text parameters.

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`backgroundcolor` | color  
`bbox` | dict with properties for `patches.FancyBboxPatch`  
`clip_box` | unknown  
`clip_on` | unknown  
`clip_path` | unknown  
`color` or c | color  
`figure` | `Figure`  
`fontfamily` or family | {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  
`fontproperties` or font or font_properties | `font_manager.FontProperties` or `str` or `pathlib.Path`  
`fontsize` or size | float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  
`fontstretch` or stretch | {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  
`fontstyle` or style | {'normal', 'italic', 'oblique'}  
`fontvariant` or variant | {'normal', 'small-caps'}  
`fontweight` or weight | {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  
`gid` | str  
`horizontalalignment` or ha | {'center', 'right', 'left'}  
`in_layout` | bool  
`label` | object  
`linespacing` | float (multiple of font size)  
`math_fontfamily` | str  
`multialignment` or ma | {'left', 'right', 'center'}  
`parse_math` | bool  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | (float, float)  
`rasterized` | bool  
`rotation` | float or {'vertical', 'horizontal'}  
`rotation_mode` | {None, 'default', 'anchor'}  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`text` | object  
`transform` | `Transform`  
`transform_rotates_text` | bool  
`url` | str  
`usetex` | bool or None  
`verticalalignment` or va | {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  
`visible` | bool  
`wrap` | bool  
`x` | float  
`y` | float  
`zorder` | float  
See also

`Axes.text`

`pyplot.text`

update(props)[source]

    
Update this artist's properties from the dict props.

Parameters

    
propsdict

update_from(other)[source]

    
Copy properties from other to self.

zorder=0

classmatplotlib.figure.SubplotParams(left=None, bottom=None, right=None,
top=None, wspace=None, hspace=None)[source]

    
A class to hold the parameters for a subplot.

Defaults are given by `rcParams["figure.subplot.[name]"]`.

Parameters

    
leftfloat

    
The position of the left edge of the subplots, as a fraction of the figure
width.

rightfloat

    
The position of the right edge of the subplots, as a fraction of the figure
width.

bottomfloat

    
The position of the bottom edge of the subplots, as a fraction of the figure
height.

topfloat

    
The position of the top edge of the subplots, as a fraction of the figure
height.

wspacefloat

    
The width of the padding between subplots, as a fraction of the average Axes
width.

hspacefloat

    
The height of the padding between subplots, as a fraction of the average Axes
height.

update(left=None, bottom=None, right=None, top=None, wspace=None,
hspace=None)[source]

    
Update the dimensions of the passed parameters. None means unchanged.

propertyvalidate[source]

matplotlib.figure.figaspect(arg)[source]

    
Calculate the width and height for a figure with a specified aspect ratio.

While the height is taken from `rcParams["figure.figsize"]` (default: `[6.4,
4.8]`), the width is adjusted to match the desired aspect ratio. Additionally,
it is ensured that the width is in the range [4., 16.] and the height is in
the range [2., 16.]. If necessary, the default height is adjusted to ensure
this.

Parameters

    
argfloat or 2D array

    
If a float, this defines the aspect ratio (i.e. the ratio height / width). In
case of an array the aspect ratio is number of rows / number of columns, so
that the array could be fitted in the figure undistorted.

Returns

    
width, heightfloat

    
The figure size in inches.

#### Notes

If you want to create an Axes within the figure, that still preserves the
aspect ratio, be sure to create it with equal width and height. See examples
below.

Thanks to Fernando Perez for this function.

#### Examples

Make a figure twice as tall as it is wide:

    
    w, h = figaspect(2.)
    fig = Figure(figsize=(w, h))
    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
    ax.imshow(A, **kwargs)
    
Make a figure with the proper aspect for an array:

    
    A = rand(5, 3)
    w, h = figaspect(A)
    fig = Figure(figsize=(w, h))
    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
    ax.imshow(A, **kwargs)
    
© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/figure_api.html

