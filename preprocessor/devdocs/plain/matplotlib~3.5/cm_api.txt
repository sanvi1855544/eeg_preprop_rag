# matplotlib.cm

Builtin colormaps, colormap handling utilities, and the `ScalarMappable`
mixin.

See also

Colormap reference for a list of builtin colormaps.

Creating Colormaps in Matplotlib for examples of how to make colormaps.

Choosing Colormaps in Matplotlib an in-depth discussion of choosing colormaps.

Colormap Normalization for more details about data normalization.

classmatplotlib.cm.ColormapRegistry(cmaps)[source]

    
Bases: `collections.abc.Mapping`

Container for colormaps that are known to Matplotlib by name.

Experimental

While we expect the API to be final, we formally mark it as experimental for
3.5 because we want to keep the option to still adapt the API for 3.6 should
the need arise.

The universal registry instance is `matplotlib.colormaps`. There should be no
need for users to instantiate `ColormapRegistry` themselves.

Read access uses a dict-like interface mapping names to `Colormap`s:

    
    import matplotlib as mpl
    cmap = mpl.colormaps['viridis']
    
Returned `Colormap`s are copies, so that their modification does not change
the global definition of the colormap.

Additional colormaps can be added via `ColormapRegistry.register`:

    
    mpl.colormaps.register(my_colormap)
    
register(cmap, *, name=None, force=False)[source]

    
Register a new colormap.

The colormap name can then be used as a string argument to any `cmap`
parameter in Matplotlib. It is also available in `pyplot.get_cmap`.

The colormap registry stores a copy of the given colormap, so that future
changes to the original colormap instance do not affect the registered
colormap. Think of this as the registry taking a snapshot of the colormap at
registration.

Parameters

    
cmapmatplotlib.colors.Colormap

    
The colormap to register.

namestr, optional

    
The name for the colormap. If not given, `cmap.name` is used.

force: bool, default: False

    
If False, a ValueError is raised if trying to overwrite an already registered
name. True supports overwriting registered colormaps other than the builtin
colormaps.

classmatplotlib.cm.ScalarMappable(norm=None, cmap=None)[source]

    
Bases: `object`

A mixin class to map scalar data to RGBA.

The ScalarMappable applies data normalization before returning RGBA colors
from the given colormap.

Parameters

    
norm`matplotlib.colors.Normalize` (or subclass thereof)

    
The normalizing object which scales data, typically into the interval `[0,
1]`. If None, norm defaults to a colors.Normalize object which initializes its
scaling based on the first data processed.

cmapstr or `Colormap`

    
The colormap used to map normalized data values to RGBA colors.

autoscale()[source]

    
Autoscale the scalar limits on the norm instance using the current array

autoscale_None()[source]

    
Autoscale the scalar limits on the norm instance using the current array,
changing only limits that are None

propertycallbacksSM[source]

changed()[source]

    
Call this whenever the mappable is changed to notify all the callbackSM
listeners to the 'changed' signal.

colorbar

    
The last colorbar associated with this ScalarMappable. May be None.

get_alpha()[source]

    
Returns

    
float

    
Always returns 1.

get_array()[source]

    
Return the array of values, that are mapped to colors.

The base class `ScalarMappable` does not make any assumptions on the
dimensionality and shape of the array.

get_clim()[source]

    
Return the values (min, max) that are mapped to the colormap limits.

get_cmap()[source]

    
Return the `Colormap` instance.

propertynorm

set_array(A)[source]

    
Set the value array from array-like A.

Parameters

    
Aarray-like or None

    
The values that are mapped to colors.

The base class `ScalarMappable` does not make any assumptions on the
dimensionality and shape of the value array A.

set_clim(vmin=None, vmax=None)[source]

    
Set the norm limits for image scaling.

Parameters

    
vmin, vmaxfloat

    
The limits.

The limits may also be passed as a tuple (vmin, vmax) as a single positional
argument.

set_cmap(cmap)[source]

    
Set the colormap for luminance data.

Parameters

    
cmap`Colormap` or str or None

set_norm(norm)[source]

    
Set the normalization instance.

Parameters

    
norm`Normalize` or None

#### Notes

If there are any colorbars using the mappable for this norm, setting the norm
of the mappable will reset the norm, locator, and formatters on the colorbar
to default.

to_rgba(x, alpha=None, bytes=False, norm=True)[source]

    
Return a normalized rgba array corresponding to x.

In the normal case, x is a 1D or 2D sequence of scalars, and the corresponding
ndarray of rgba values will be returned, based on the norm and colormap set
for this ScalarMappable.

There is one special case, for handling images that are already rgb or rgba,
such as might have been read from an image file. If x is an ndarray with 3
dimensions, and the last dimension is either 3 or 4, then it will be treated
as an rgb or rgba array, and no mapping will be done. The array can be uint8,
or it can be floating point with values in the 0-1 range; otherwise a
ValueError will be raised. If it is a masked array, the mask will be ignored.
If the last dimension is 3, the alpha kwarg (defaulting to 1) will be used to
fill in the transparency. If the last dimension is 4, the alpha kwarg is
ignored; it does not replace the pre-existing alpha. A ValueError will be
raised if the third dimension is other than 3 or 4.

In either case, if bytes is False (default), the rgba array will be floats in
the 0-1 range; if it is True, the returned rgba array will be uint8 in the 0
to 255 range.

If norm is False, no normalization of the input data is performed, and it is
assumed to be in the range (0-1).

matplotlib.cm.get_cmap(name=None, lut=None)[source]

    
Get a colormap instance, defaulting to rc values if name is None.

Colormaps added with `register_cmap()` take precedence over built-in
colormaps.

Parameters

    
name`matplotlib.colors.Colormap` or str or None, default: None

    
If a `Colormap` instance, it will be returned. Otherwise, the name of a
colormap known to Matplotlib, which will be resampled by lut. The default,
None, means `rcParams["image.cmap"]` (default: `'viridis'`).

lutint or None, default: None

    
If name is not already a Colormap instance and lut is not None, the colormap
will be resampled to have lut entries in the lookup table.

#### Notes

Currently, this returns the global colormap object, which is deprecated. In
Matplotlib 3.5, you will no longer be able to modify the global colormaps in-
place.

matplotlib.cm.register_cmap(name=None, cmap=None, *,
override_builtin=False)[source]

    
Add a colormap to the set recognized by `get_cmap()`.

Register a new colormap to be accessed by name

    
    LinearSegmentedColormap('swirly', data, lut)
    register_cmap(cmap=swirly_cmap)
    
Parameters

    
namestr, optional

    
The name that can be used in `get_cmap()` or `rcParams["image.cmap"]`
(default: `'viridis'`)

If absent, the name will be the `name` attribute of the cmap.

cmapmatplotlib.colors.Colormap

    
Despite being the second argument and having a default value, this is a
required argument.

override_builtinbool

    
Allow built-in colormaps to be overridden by a user-supplied colormap.

Please do not use this unless you are sure you need it.

#### Notes

Registering a colormap stores a reference to the colormap object which can
currently be modified and inadvertently change the global colormap state. This
behavior is deprecated and in Matplotlib 3.5 the registered colormap will be
immutable.

matplotlib.cm.unregister_cmap(name)[source]

    
Remove a colormap recognized by `get_cmap()`.

You may not remove built-in colormaps.

If the named colormap is not registered, returns with no error, raises if you
try to de-register a default colormap.

Warning

Colormap names are currently a shared namespace that may be used by multiple
packages. Use `unregister_cmap` only if you know you have registered that name
before. In particular, do not unregister just in case to clean the name before
registering a new colormap.

Parameters

    
namestr

    
The name of the colormap to be un-registered

Returns

    
ColorMap or None

    
If the colormap was registered, return it if not return `None`

Raises

    
ValueError

    
If you try to de-register a default built-in colormap.

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/cm_api.html

