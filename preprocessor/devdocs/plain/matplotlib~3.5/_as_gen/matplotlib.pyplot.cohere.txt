# matplotlib.pyplot.cohere

matplotlib.pyplot.cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend=<function
detrend_none>, window=<function window_hanning>, noverlap=0, pad_to=None,
sides='default', scale_by_freq=None, *, data=None, **kwargs)[source]

    
Plot the coherence between x and y.

Plot the coherence between x and y. Coherence is the normalized cross spectral
density:

\\[C_{xy} = \frac{|P_{xy}|^2}{P_{xx}P_{yy}}\\]

Parameters

    
Fsfloat, default: 2

    
The sampling frequency (samples per time unit). It is used to calculate the
Fourier frequencies, freqs, in cycles per time unit.

windowcallable or ndarray, default: `window_hanning`

    
A function or a vector of length NFFT. To create window vectors see
`window_hanning`, `window_none`, `numpy.blackman`, `numpy.hamming`,
`numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc. If a
function is passed as the argument, it must take a data segment as an argument
and return the windowed version of the segment.

sides{'default', 'onesided', 'twosided'}, optional

    
Which sides of the spectrum to return. 'default' is one-sided for real data
and two-sided for complex data. 'onesided' forces the return of a one-sided
spectrum, while 'twosided' forces two-sided.

pad_toint, optional

    
The number of points to which the data segment is padded when performing the
FFT. This can be different from NFFT, which specifies the number of data
points used. While not increasing the actual resolution of the spectrum (the
minimum distance between resolvable peaks), this can give more points in the
plot, allowing for more detail. This corresponds to the n parameter in the
call to fft(). The default is None, which sets pad_to equal to NFFT

NFFTint, default: 256

    
The number of data points used in each block for the FFT. A power 2 is most
efficient. This should NOT be used to get zero padding, or the scaling of the
result will be incorrect; use pad_to for this instead.

detrend{'none', 'mean', 'linear'} or callable, default: 'none'

    
The function applied to each segment before fft-ing, designed to remove the
mean or linear trend. Unlike in MATLAB, where the detrend parameter is a
vector, in Matplotlib it is a function. The `mlab` module defines
`detrend_none`, `detrend_mean`, and `detrend_linear`, but you can use a custom
function as well. You can also use a string to choose one of the functions:
'none' calls `detrend_none`. 'mean' calls `detrend_mean`. 'linear' calls
`detrend_linear`.

scale_by_freqbool, default: True

    
Whether the resulting density values should be scaled by the scaling
frequency, which gives density in units of Hz^-1. This allows for integration
over the returned frequency values. The default is True for MATLAB
compatibility.

noverlapint, default: 0 (no overlap)

    
The number of points of overlap between blocks.

Fcint, default: 0

    
The center frequency of x, which offsets the x extents of the plot to reflect
the frequency range used when a signal is acquired and then filtered and
downsampled to baseband.

Returns

    
Cxy1-D array

    
The coherence vector.

freqs1-D array

    
The frequencies for the elements in Cxy.

Other Parameters

    
dataindexable object, optional

    
If given, the following parameters also accept a string `s`, which is
interpreted as `data[s]` (unless this raises an exception):

x, y

**kwargs

    
Keyword arguments control the `Line2D` properties:

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`antialiased` or aa | bool  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`color` or c | color  
`dash_capstyle` | `CapStyle` or {'butt', 'projecting', 'round'}  
`dash_joinstyle` | `JoinStyle` or {'miter', 'round', 'bevel'}  
`dashes` | sequence of floats (on/off ink in points) or (None, None)  
`data` | (2, N) array or two 1D arrays  
`drawstyle` or ds | {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  
`figure` | `Figure`  
`fillstyle` | {'full', 'left', 'right', 'bottom', 'top', 'none'}  
`gid` | str  
`in_layout` | bool  
`label` | object  
`linestyle` or ls | {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  
`linewidth` or lw | float  
`marker` | marker style string, `Path` or `MarkerStyle`  
`markeredgecolor` or mec | color  
`markeredgewidth` or mew | float  
`markerfacecolor` or mfc | color  
`markerfacecoloralt` or mfcalt | color  
`markersize` or ms | float  
`markevery` | None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  
`path_effects` | `AbstractPathEffect`  
`picker` | float or callable[[Artist, Event], tuple[bool, dict]]  
`pickradius` | float  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`solid_capstyle` | `CapStyle` or {'butt', 'projecting', 'round'}  
`solid_joinstyle` | `JoinStyle` or {'miter', 'round', 'bevel'}  
`transform` | unknown  
`url` | str  
`visible` | bool  
`xdata` | 1D array  
`ydata` | 1D array  
`zorder` | float  
#### References

Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John
Wiley & Sons (1986)

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/_as_gen/matplotlib.pyplot.cohere.html

