# matplotlib.pyplot.spy

matplotlib.pyplot.spy(Z, precision=0, marker=None, markersize=None,
aspect='equal', origin='upper', **kwargs)[source]

    
Plot the sparsity pattern of a 2D array.

This visualizes the non-zero values of the array.

Two plotting styles are available: image and marker. Both are available for
full arrays, but only the marker style works for `scipy.sparse.spmatrix`
instances.

Image style

If marker and markersize are None, `imshow` is used. Any extra remaining
keyword arguments are passed to this method.

Marker style

If Z is a `scipy.sparse.spmatrix` or marker or markersize are None, a `Line2D`
object will be returned with the value of marker determining the marker type,
and any remaining keyword arguments passed to `plot`.

Parameters

    
Z(M, N) array-like

    
The array to be plotted.

precisionfloat or 'present', default: 0

    
If precision is 0, any non-zero value will be plotted. Otherwise, values of
\\(|Z| > precision\\) will be plotted.

For `scipy.sparse.spmatrix` instances, you can also pass 'present'. In this
case any value present in the array will be plotted, even if it is identically
zero.

aspect{'equal', 'auto', None} or float, default: 'equal'

    
The aspect ratio of the Axes. This parameter is particularly relevant for
images since it determines whether data pixels are square.

This parameter is a shortcut for explicitly calling `Axes.set_aspect`. See
there for further details.

  * 'equal': Ensures an aspect ratio of 1. Pixels will be square.
  * 'auto': The Axes is kept fixed and the aspect is adjusted so that the data fit in the Axes. In general, this will result in non-square pixels.
  * None: Use `rcParams["image.aspect"]` (default: `'equal'`).

origin{'upper', 'lower'}, default: `rcParams["image.origin"]` (default:
`'upper'`)

    
Place the [0, 0] index of the array in the upper left or lower left corner of
the Axes. The convention 'upper' is typically used for matrices and images.

Returns

    
`AxesImage` or `Line2D`

    
The return type depends on the plotting style (see above).

Other Parameters

    
**kwargs

    
The supported additional parameters depend on the plotting style.

For the image style, you can pass the following additional parameters of
`imshow`:

  * cmap
  * alpha
  * url
  * any `Artist` properties (passed on to the `AxesImage`)

For the marker style, you can pass any `Line2D` property except for linestyle:

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`antialiased` or aa | bool  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`color` or c | color  
`dash_capstyle` | `CapStyle` or {'butt', 'projecting', 'round'}  
`dash_joinstyle` | `JoinStyle` or {'miter', 'round', 'bevel'}  
`dashes` | sequence of floats (on/off ink in points) or (None, None)  
`data` | (2, N) array or two 1D arrays  
`drawstyle` or ds | {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  
`figure` | `Figure`  
`fillstyle` | {'full', 'left', 'right', 'bottom', 'top', 'none'}  
`gid` | str  
`in_layout` | bool  
`label` | object  
`linestyle` or ls | {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  
`linewidth` or lw | float  
`marker` | marker style string, `Path` or `MarkerStyle`  
`markeredgecolor` or mec | color  
`markeredgewidth` or mew | float  
`markerfacecolor` or mfc | color  
`markerfacecoloralt` or mfcalt | color  
`markersize` or ms | float  
`markevery` | None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  
`path_effects` | `AbstractPathEffect`  
`picker` | float or callable[[Artist, Event], tuple[bool, dict]]  
`pickradius` | float  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`solid_capstyle` | `CapStyle` or {'butt', 'projecting', 'round'}  
`solid_joinstyle` | `JoinStyle` or {'miter', 'round', 'bevel'}  
`transform` | unknown  
`url` | str  
`visible` | bool  
`xdata` | 1D array  
`ydata` | 1D array  
`zorder` | float  
© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/_as_gen/matplotlib.pyplot.spy.html

