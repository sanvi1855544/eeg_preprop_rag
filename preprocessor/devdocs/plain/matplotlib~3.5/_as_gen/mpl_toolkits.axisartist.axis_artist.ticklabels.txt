# mpl_toolkits.axisartist.axis_artist.TickLabels

classmpl_toolkits.axisartist.axis_artist.TickLabels(*,
axis_direction='bottom', **kwargs)[source]

    
Bases: `mpl_toolkits.axisartist.axis_artist.AxisLabel`

Tick Labels. While derived from Text, this single artist draws all ticklabels.
As in AxisLabel, the position of the text is updated in the fly, so changing
text position has no effect. Otherwise, the properties can be changed as a
normal Text. Unlike the ticklabels of the mainline matplotlib, properties of
single ticklabel alone cannot modified.

To change the pad between ticks and ticklabels, use set_pad.

draw(renderer)[source]

    
Draw the Artist (and its children) using the given renderer.

This has no effect if the artist is not visible (`Artist.get_visible` returns
False).

Parameters

    
renderer`RendererBase` subclass.

#### Notes

This method is overridden in the Artist subclasses.

get_ref_artist()[source]

    
Return the underlying artist that actually defines some properties (e.g.,
color) of this artist.

get_texts_widths_heights_descents(renderer)[source]

    
Return a list of `(width, height, descent)` tuples for ticklabels.

Empty labels are left out.

get_window_extents(renderer)[source]

invert_axis_direction()[source]

set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>,
axis_direction=<UNSET>, backgroundcolor=<UNSET>, bbox=<UNSET>,
clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>,
default_alignment=<UNSET>, default_angle=<UNSET>, fontfamily=<UNSET>,
fontproperties=<UNSET>, fontsize=<UNSET>, fontstretch=<UNSET>,
fontstyle=<UNSET>, fontvariant=<UNSET>, fontweight=<UNSET>, gid=<UNSET>,
horizontalalignment=<UNSET>, in_layout=<UNSET>, label=<UNSET>,
linespacing=<UNSET>, locs_angles_labels=<UNSET>, math_fontfamily=<UNSET>,
multialignment=<UNSET>, pad=<UNSET>, parse_math=<UNSET>, path_effects=<UNSET>,
picker=<UNSET>, position=<UNSET>, rasterized=<UNSET>, rotation=<UNSET>,
rotation_mode=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, text=<UNSET>,
transform=<UNSET>, transform_rotates_text=<UNSET>, url=<UNSET>,
usetex=<UNSET>, verticalalignment=<UNSET>, visible=<UNSET>, wrap=<UNSET>,
x=<UNSET>, y=<UNSET>, zorder=<UNSET>)[source]

    
Set multiple properties at once.

Supported properties are

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`axis_direction` | unknown  
`backgroundcolor` | color  
`bbox` | dict with properties for `patches.FancyBboxPatch`  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`color` or c | color  
`default_alignment` | unknown  
`default_angle` | unknown  
`figure` | `Figure`  
`fontfamily` or family | {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  
`fontproperties` or font or font_properties | `font_manager.FontProperties` or `str` or `pathlib.Path`  
`fontsize` or size | float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  
`fontstretch` or stretch | {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  
`fontstyle` or style | {'normal', 'italic', 'oblique'}  
`fontvariant` or variant | {'normal', 'small-caps'}  
`fontweight` or weight | {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  
`gid` | str  
`horizontalalignment` or ha | {'center', 'right', 'left'}  
`in_layout` | bool  
`label` | object  
`linespacing` | float (multiple of font size)  
`locs_angles_labels` | unknown  
`math_fontfamily` | str  
`multialignment` or ma | {'left', 'right', 'center'}  
`pad` | unknown  
`parse_math` | bool  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | (float, float)  
`rasterized` | bool  
`rotation` | float or {'vertical', 'horizontal'}  
`rotation_mode` | {None, 'default', 'anchor'}  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`text` | object  
`transform` | `Transform`  
`transform_rotates_text` | bool  
`url` | str  
`usetex` | bool or None  
`verticalalignment` or va | {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  
`visible` | bool  
`wrap` | bool  
`x` | float  
`y` | float  
`zorder` | float  
set_axis_direction(label_direction)[source]

    
Adjust the text angle and text alignment of ticklabels according to the
matplotlib convention.

The label_direction must be one of [left, right, bottom, top].

property | left | bottom | right | top  
---|---|---|---|---  
ticklabels angle | 90 | 0 | -90 | 180  
ticklabel va | center | baseline | center | baseline  
ticklabel ha | right | center | right | center  
Note that the text angles are actually relative to (90 + angle of the
direction to the ticklabel), which gives 0 for bottom axis.

set_locs_angles_labels(locs_angles_labels)[source]

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/_as_gen/mpl_toolkits.axisartist.axis_artist.TickLabels.html

