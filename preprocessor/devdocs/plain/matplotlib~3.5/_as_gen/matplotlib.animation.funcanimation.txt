# matplotlib.animation.FuncAnimation

classmatplotlib.animation.FuncAnimation(fig, func, frames=None,
init_func=None, fargs=None, save_count=None, *, cache_frame_data=True,
**kwargs)[source]

    
Makes an animation by repeatedly calling a function func.

Note

You must store the created Animation in a variable that lives as long as the
animation should run. Otherwise, the Animation object will be garbage-
collected and the animation stops.

Parameters

    
fig`Figure`

    
The figure object used to get needed events, such as draw or resize.

funccallable

    
The function to call at each frame. The first argument will be the next value
in frames. Any additional positional arguments can be supplied via the fargs
parameter.

The required signature is:

    
    def func(frame, *fargs) -> iterable_of_artists
    
If `blit == True`, func must return an iterable of all artists that were
modified or created. This information is used by the blitting algorithm to
determine which parts of the figure have to be updated. The return value is
unused if `blit == False` and may be omitted in that case.

framesiterable, int, generator function, or None, optional

    
Source of data to pass func and each frame of the animation

  * If an iterable, then simply use the values provided. If the iterable has a length, it will override the save_count kwarg.
  * If an integer, then equivalent to passing `range(frames)`
  * If a generator function, then must have the signature:
        def gen_function() -> obj
    
  * If None, then equivalent to passing `itertools.count`.

In all of these cases, the values in frames is simply passed through to the
user-supplied func and thus can be of any type.

init_funccallable, optional

    
A function used to draw a clear frame. If not given, the results of drawing
from the first item in the frames sequence will be used. This function will be
called once before the first frame.

The required signature is:

    
    def init_func() -> iterable_of_artists
    
If `blit == True`, init_func must return an iterable of artists to be re-
drawn. This information is used by the blitting algorithm to determine which
parts of the figure have to be updated. The return value is unused if `blit ==
False` and may be omitted in that case.

fargstuple or None, optional

    
Additional arguments to pass to each call to func.

save_countint, default: 100

    
Fallback for the number of values from frames to cache. This is only used if
the number of frames cannot be inferred from frames, i.e. when it's an
iterator without length or a generator.

intervalint, default: 200

    
Delay between frames in milliseconds.

repeat_delayint, default: 0

    
The delay in milliseconds between consecutive animation runs, if repeat is
True.

repeatbool, default: True

    
Whether the animation repeats when the sequence of frames is completed.

blitbool, default: False

    
Whether blitting is used to optimize drawing. Note: when using blitting, any
animated artists will be drawn according to their zorder; however, they will
be drawn on top of any previous artists, regardless of their zorder.

cache_frame_databool, default: True

    
Whether frame data is cached. Disabling cache might be helpful when frames
contain large objects.

__init__(fig, func, frames=None, init_func=None, fargs=None, save_count=None,
*, cache_frame_data=True, **kwargs)[source]

#### Methods

`__init__`(fig, func[, frames, init_func, ...]) |   
---|---  
`new_frame_seq`() | Return a new sequence of frame information.  
`new_saved_frame_seq`() | Return a new sequence of saved/cached frame information.  
`pause`() | Pause the animation.  
`resume`() | Resume the animation.  
`save`(filename[, writer, fps, dpi, codec, ...]) | Save the animation as a movie file by drawing every frame.  
`to_html5_video`([embed_limit]) | Convert the animation to an HTML5 `<video>` tag.  
`to_jshtml`([fps, embed_frames, default_mode]) | Generate HTML representation of the animation.  
new_frame_seq()[source]

    
Return a new sequence of frame information.

new_saved_frame_seq()[source]

    
Return a new sequence of saved/cached frame information.

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/_as_gen/matplotlib.animation.FuncAnimation.html

