# mpl_toolkits.axisartist.axis_artist.LabelBase

classmpl_toolkits.axisartist.axis_artist.LabelBase(*args, **kwargs)[source]

    
Bases: `matplotlib.text.Text`

A base class for AxisLabel and TickLabels. The position and angle of the text
are calculated by to offset_ref_angle, text_ref_angle, and offset_radius
attributes.

Create a `Text` instance at x, y with string text.

Valid keyword arguments are:

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`backgroundcolor` | color  
`bbox` | dict with properties for `patches.FancyBboxPatch`  
`clip_box` | unknown  
`clip_on` | unknown  
`clip_path` | unknown  
`color` or c | color  
`figure` | `Figure`  
`fontfamily` or family | {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  
`fontproperties` or font or font_properties | `font_manager.FontProperties` or `str` or `pathlib.Path`  
`fontsize` or size | float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  
`fontstretch` or stretch | {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  
`fontstyle` or style | {'normal', 'italic', 'oblique'}  
`fontvariant` or variant | {'normal', 'small-caps'}  
`fontweight` or weight | {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  
`gid` | str  
`horizontalalignment` or ha | {'center', 'right', 'left'}  
`in_layout` | bool  
`label` | object  
`linespacing` | float (multiple of font size)  
`math_fontfamily` | str  
`multialignment` or ma | {'left', 'right', 'center'}  
`parse_math` | bool  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | (float, float)  
`rasterized` | bool  
`rotation` | float or {'vertical', 'horizontal'}  
`rotation_mode` | {None, 'default', 'anchor'}  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`text` | object  
`transform` | `Transform`  
`transform_rotates_text` | bool  
`url` | str  
`usetex` | bool or None  
`verticalalignment` or va | {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  
`visible` | bool  
`wrap` | bool  
`x` | float  
`y` | float  
`zorder` | float  
draw(renderer)[source]

    
Draw the Artist (and its children) using the given renderer.

This has no effect if the artist is not visible (`Artist.get_visible` returns
False).

Parameters

    
renderer`RendererBase` subclass.

#### Notes

This method is overridden in the Artist subclasses.

get_window_extent(renderer)[source]

    
Return the `Bbox` bounding the text, in display units.

In addition to being used internally, this is useful for specifying clickable
regions in a png file on a web page.

Parameters

    
rendererRenderer, optional

    
A renderer is needed to compute the bounding box. If the artist has already
been drawn, the renderer is cached; thus, it is only necessary to pass this
argument when calling `get_window_extent` before the first `draw`. In
practice, it is usually easier to trigger a draw first (e.g. by saving the
figure).

dpifloat, optional

    
The dpi value for computing the bbox, defaults to `self.figure.dpi` (not the
renderer dpi); should be set e.g. if to match regions with a figure saved with
a custom dpi value.

set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>,
backgroundcolor=<UNSET>, bbox=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>,
clip_path=<UNSET>, color=<UNSET>, fontfamily=<UNSET>, fontproperties=<UNSET>,
fontsize=<UNSET>, fontstretch=<UNSET>, fontstyle=<UNSET>, fontvariant=<UNSET>,
fontweight=<UNSET>, gid=<UNSET>, horizontalalignment=<UNSET>,
in_layout=<UNSET>, label=<UNSET>, linespacing=<UNSET>,
math_fontfamily=<UNSET>, multialignment=<UNSET>, parse_math=<UNSET>,
path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, rasterized=<UNSET>,
rotation=<UNSET>, rotation_mode=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>,
text=<UNSET>, transform=<UNSET>, transform_rotates_text=<UNSET>, url=<UNSET>,
usetex=<UNSET>, verticalalignment=<UNSET>, visible=<UNSET>, wrap=<UNSET>,
x=<UNSET>, y=<UNSET>, zorder=<UNSET>)[source]

    
Set multiple properties at once.

Supported properties are

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`backgroundcolor` | color  
`bbox` | dict with properties for `patches.FancyBboxPatch`  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`color` or c | color  
`figure` | `Figure`  
`fontfamily` or family | {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  
`fontproperties` or font or font_properties | `font_manager.FontProperties` or `str` or `pathlib.Path`  
`fontsize` or size | float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  
`fontstretch` or stretch | {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  
`fontstyle` or style | {'normal', 'italic', 'oblique'}  
`fontvariant` or variant | {'normal', 'small-caps'}  
`fontweight` or weight | {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  
`gid` | str  
`horizontalalignment` or ha | {'center', 'right', 'left'}  
`in_layout` | bool  
`label` | object  
`linespacing` | float (multiple of font size)  
`math_fontfamily` | str  
`multialignment` or ma | {'left', 'right', 'center'}  
`parse_math` | bool  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | (float, float)  
`rasterized` | bool  
`rotation` | float or {'vertical', 'horizontal'}  
`rotation_mode` | {None, 'default', 'anchor'}  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`text` | object  
`transform` | `Transform`  
`transform_rotates_text` | bool  
`url` | str  
`usetex` | bool or None  
`verticalalignment` or va | {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  
`visible` | bool  
`wrap` | bool  
`x` | float  
`y` | float  
`zorder` | float  
© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/_as_gen/mpl_toolkits.axisartist.axis_artist.LabelBase.html

