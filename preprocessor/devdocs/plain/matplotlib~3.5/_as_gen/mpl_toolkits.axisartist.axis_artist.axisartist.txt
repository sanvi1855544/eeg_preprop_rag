# mpl_toolkits.axisartist.axis_artist.AxisArtist

classmpl_toolkits.axisartist.axis_artist.AxisArtist(axes, helper, offset=None,
axis_direction='bottom', **kwargs)[source]

    
Bases: `matplotlib.artist.Artist`

An artist which draws axis (a line along which the n-th axes coord is
constant) line, ticks, ticklabels, and axis label.

Parameters

    
axes`mpl_toolkits.axisartist.axislines.Axes`

helper`AxisArtistHelper`

propertyLABELPAD

ZORDER=2.5

draw(renderer)[source]

    
Draw the Artist (and its children) using the given renderer.

This has no effect if the artist is not visible (`Artist.get_visible` returns
False).

Parameters

    
renderer`RendererBase` subclass.

#### Notes

This method is overridden in the Artist subclasses.

get_axisline_style()[source]

    
Return the current axisline style.

get_helper()[source]

    
Return axis artist helper instance.

get_tightbbox(renderer)[source]

    
Like `Artist.get_window_extent`, but includes any clipping.

Parameters

    
renderer`RendererBase` subclass

    
renderer that will be used to draw the figures (i.e.
`fig.canvas.get_renderer()`)

Returns

    
`Bbox`

    
The enclosing bounding box (in figure pixel coordinates).

get_transform()[source]

    
Return the `Transform` instance used by this artist.

invert_ticklabel_direction()[source]

set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>,
axis_direction=<UNSET>, axislabel_direction=<UNSET>, axisline_style=<UNSET>,
clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>,
in_layout=<UNSET>, label=<UNSET>, path_effects=<UNSET>, picker=<UNSET>,
rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>,
ticklabel_direction=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>,
zorder=<UNSET>)[source]

    
Set multiple properties at once.

Supported properties are

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`axis_direction` | unknown  
`axislabel_direction` | {"+", "-"}  
`axisline_style` | str or None  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`figure` | `Figure`  
`gid` | str  
`in_layout` | bool  
`label` | unknown  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`rasterized` | bool  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`ticklabel_direction` | {"+", "-"}  
`transform` | `Transform`  
`url` | str  
`visible` | bool  
`zorder` | float  
set_axis_direction(axis_direction)[source]

    
Adjust the direction, text angle, text alignment of ticklabels, labels
following the matplotlib convention for the rectangle axes.

The axis_direction must be one of [left, right, bottom, top].

property | left | bottom | right | top  
---|---|---|---|---  
ticklabels location | "-" | "+" | "+" | "-"  
axislabel location | "-" | "+" | "+" | "-"  
ticklabels angle | 90 | 0 | -90 | 180  
ticklabel va | center | baseline | center | baseline  
ticklabel ha | right | center | right | center  
axislabel angle | 180 | 0 | 0 | 180  
axislabel va | center | top | center | bottom  
axislabel ha | right | center | right | center  
Note that the direction "+" and "-" are relative to the direction of the
increasing coordinate. Also, the text angles are actually relative to (90 +
angle of the direction to the ticklabel), which gives 0 for bottom axis.

set_axislabel_direction(label_direction)[source]

    
Adjust the direction of the axislabel.

Note that the label_directions '+' and '-' are relative to the direction of
the increasing coordinate.

Parameters

    
label_direction{"+", "-"}

set_axisline_style(axisline_style=None, **kwargs)[source]

    
Set the axisline style.

The new style is completely defined by the passed attributes. Existing style
attributes are forgotten.

Parameters

    
axisline_stylestr or None

    
The line style, e.g. '->', optionally followed by a comma-separated list of
attributes. Alternatively, the attributes can be provided as keywords.

If None this returns a string containing the available styles.

#### Examples

The following two commands are equal: >>> set_axisline_style("->,size=1.5")
>>> set_axisline_style("->", size=1.5)

set_label(s)[source]

    
Set a label that will be displayed in the legend.

Parameters

    
sobject

    
s will be converted to a string by calling `str`.

set_ticklabel_direction(tick_direction)[source]

    
Adjust the direction of the ticklabel.

Note that the label_directions '+' and '-' are relative to the direction of
the increasing coordinate.

Parameters

    
tick_direction{"+", "-"}

toggle(all=None, ticks=None, ticklabels=None, label=None)[source]

    
Toggle visibility of ticks, ticklabels, and (axis) label. To turn all off,

    
    axis.toggle(all=False)
    
To turn all off but ticks on

    
    axis.toggle(all=False, ticks=True)
    
To turn all on but (axis) label off

    
    axis.toggle(all=True, label=False))
    
zorder=2.5

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/_as_gen/mpl_toolkits.axisartist.axis_artist.AxisArtist.html

