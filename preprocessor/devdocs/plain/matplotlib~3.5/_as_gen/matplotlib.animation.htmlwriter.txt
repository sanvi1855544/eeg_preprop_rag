# matplotlib.animation.HTMLWriter

classmatplotlib.animation.HTMLWriter(fps=30, codec=None, bitrate=None,
extra_args=None, metadata=None, embed_frames=False, default_mode='loop',
embed_limit=None)[source]

    
Writer for JavaScript-based HTML movies.

Parameters

    
fpsint, default: 5

    
Movie frame rate (per second).

codecstr or None, default: `rcParams["animation.codec"]` (default: `'h264'`)

    
The codec to use.

bitrateint, default: `rcParams["animation.bitrate"]` (default: `-1`)

    
The bitrate of the movie, in kilobits per second. Higher values means higher
quality movies, but increase the file size. A value of -1 lets the underlying
movie encoder select the bitrate.

extra_argslist of str or None, optional

    
Extra command-line arguments passed to the underlying movie encoder. The
default, None, means to use `rcParams["animation.[name-of-encoder]_args"]` for
the builtin writers.

metadatadict[str, str], default: {}

    
A dictionary of keys and values for metadata to include in the output file.
Some keys that may be of use include: title, artist, genre, subject,
copyright, srcform, comment.

__init__(fps=30, codec=None, bitrate=None, extra_args=None, metadata=None,
embed_frames=False, default_mode='loop', embed_limit=None)[source]

    
Parameters

    
fpsint, default: 5

    
Movie frame rate (per second).

codecstr or None, default: `rcParams["animation.codec"]` (default: `'h264'`)

    
The codec to use.

bitrateint, default: `rcParams["animation.bitrate"]` (default: `-1`)

    
The bitrate of the movie, in kilobits per second. Higher values means higher
quality movies, but increase the file size. A value of -1 lets the underlying
movie encoder select the bitrate.

extra_argslist of str or None, optional

    
Extra command-line arguments passed to the underlying movie encoder. The
default, None, means to use `rcParams["animation.[name-of-encoder]_args"]` for
the builtin writers.

metadatadict[str, str], default: {}

    
A dictionary of keys and values for metadata to include in the output file.
Some keys that may be of use include: title, artist, genre, subject,
copyright, srcform, comment.

#### Methods

`__init__`([fps, codec, bitrate, extra_args, ...]) | 
Parameters  
---|---  
`bin_path`() | Return the binary path to the commandline tool used by a specific subclass.  
`cleanup`() | [Deprecated]  
`finish`() | Finish any processing for writing the movie.  
`grab_frame`(**savefig_kwargs) | Grab the image information from the figure and save as a movie frame.  
`isAvailable`() | Return whether a MovieWriter subclass is actually available.  
`saving`(fig, outfile, dpi, *args, **kwargs) | Context manager to facilitate writing the movie file.  
`setup`(fig, outfile, dpi[, frame_dir]) | Setup for writing the movie file.  
#### Attributes

`frame_format` | Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.  
---|---  
`frame_size` | A tuple `(width, height)` in pixels of a movie frame.  
`supported_formats` |   
finish()[source]

    
Finish any processing for writing the movie.

grab_frame(**savefig_kwargs)[source]

    
Grab the image information from the figure and save as a movie frame.

All keyword arguments in savefig_kwargs are passed on to the `savefig` call
that saves the figure.

classmethodisAvailable()[source]

    
Return whether a MovieWriter subclass is actually available.

setup(fig, outfile, dpi, frame_dir=None)[source]

    
Setup for writing the movie file.

Parameters

    
fig`Figure`

    
The figure to grab the rendered frames from.

outfilestr

    
The filename of the resulting movie file.

dpifloat, default: `fig.dpi`

    
The dpi of the output file. This, with the figure size, controls the size in
pixels of the resulting movie file.

frame_prefixstr, optional

    
The filename prefix to use for temporary files. If None (the default), files
are written to a temporary directory which is deleted by `cleanup`; if not
None, no temporary files are deleted.

supported_formats=['png', 'jpeg', 'tiff', 'svg']

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/_as_gen/matplotlib.animation.HTMLWriter.html

