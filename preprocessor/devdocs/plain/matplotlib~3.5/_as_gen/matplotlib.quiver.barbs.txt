# matplotlib.quiver.Barbs

classmatplotlib.quiver.Barbs(ax, *args, pivot='tip', length=7, barbcolor=None,
flagcolor=None, sizes=None, fill_empty=False, barb_increments=None,
rounding=True, flip_barb=False, **kw)[source]

    
Bases: `matplotlib.collections.PolyCollection`

Specialized PolyCollection for barbs.

The only API method is `set_UVC()`, which can be used to change the size,
orientation, and color of the arrows. Locations are changed using the
`set_offsets()` collection method. Possibly this method will be useful in
animations.

There is one internal function `_find_tails()` which finds exactly what should
be put on the barb given the vector magnitude. From there `_make_barbs()` is
used to find the vertices of the polygon to represent the barb based on this
information.

The constructor takes one required argument, an Axes instance, followed by the
args and kwargs described by the following pyplot interface documentation:

Plot a 2D field of barbs.

Call signature:

    
    barbs([X, Y], U, V, [C], **kw)
    
Where X, Y define the barb locations, U, V define the barb directions, and C
optionally sets the color.

All arguments may be 1D or 2D. U, V, C may be masked arrays, but masked X, Y
are not supported at present.

Barbs are traditionally used in meteorology as a way to plot the speed and
direction of wind observations, but can technically be used to plot any two
dimensional vector quantity. As opposed to arrows, which give vector magnitude
by the length of the arrow, the barbs give more quantitative information about
the vector magnitude by putting slanted lines or a triangle for various
increments in magnitude, as show schematically below:

    
    :                   /\    \
    :                  /  \    \
    :                 /    \    \    \
    :                /      \    \    \
    :               ------------------------------
    
The largest increment is given by a triangle (or "flag"). After those come
full lines (barbs). The smallest increment is a half line. There is only, of
course, ever at most 1 half line. If the magnitude is small and only needs a
single half-line and no full lines or triangles, the half-line is offset from
the end of the barb so that it can be easily distinguished from barbs with a
single full line. The magnitude for the barb shown above would nominally be
65, using the standard increments of 50, 10, and 5.

See also https://en.wikipedia.org/wiki/Wind_barb.

Parameters

    
X, Y1D or 2D array-like, optional

    
The x and y coordinates of the barb locations. See pivot for how the barbs are
drawn to the x, y positions.

If not given, they will be generated as a uniform integer meshgrid based on
the dimensions of U and V.

If X and Y are 1D but U, V are 2D, X, Y are expanded to 2D using `X, Y =
np.meshgrid(X, Y)`. In this case `len(X)` and `len(Y)` must match the column
and row dimensions of U and V.

U, V1D or 2D array-like

    
The x and y components of the barb shaft.

C1D or 2D array-like, optional

    
Numeric data that defines the barb colors by colormapping via norm and cmap.

This does not support explicit colors. If you want to set colors directly, use
barbcolor instead.

lengthfloat, default: 7

    
Length of the barb in points; the other parts of the barb are scaled against
this.

pivot{'tip', 'middle'} or float, default: 'tip'

    
The part of the arrow that is anchored to the X, Y grid. The barb rotates
about this point. This can also be a number, which shifts the start of the
barb that many points away from grid point.

barbcolorcolor or color sequence

    
The color of all parts of the barb except for the flags. This parameter is
analogous to the edgecolor parameter for polygons, which can be used instead.
However this parameter will override facecolor.

flagcolorcolor or color sequence

    
The color of any flags on the barb. This parameter is analogous to the
facecolor parameter for polygons, which can be used instead. However, this
parameter will override facecolor. If this is not set (and C has not either)
then flagcolor will be set to match barbcolor so that the barb has a uniform
color. If C has been set, flagcolor has no effect.

sizesdict, optional

    
A dictionary of coefficients specifying the ratio of a given feature to the
length of the barb. Only those values one wishes to override need to be
included. These features include:

  * 'spacing' - space between features (flags, full/half barbs)
  * 'height' - height (distance from shaft to top) of a flag or full barb
  * 'width' - width of a flag, twice the width of a full barb
  * 'emptybarb' - radius of the circle used for low magnitudes

fill_emptybool, default: False

    
Whether the empty barbs (circles) that are drawn should be filled with the
flag color. If they are not filled, the center is transparent.

roundingbool, default: True

    
Whether the vector magnitude should be rounded when allocating barb
components. If True, the magnitude is rounded to the nearest multiple of the
half-barb increment. If False, the magnitude is simply truncated to the next
lowest multiple.

barb_incrementsdict, optional

    
A dictionary of increments specifying values to associate with different parts
of the barb. Only those values one wishes to override need to be included.

  * 'half' - half barbs (Default is 5)
  * 'full' - full barbs (Default is 10)
  * 'flag' - flags (default is 50)

flip_barbbool or array-like of bool, default: False

    
Whether the lines and flags should point opposite to normal. Normal behavior
is for the barbs and lines to point right (comes from wind barbs having these
features point towards low pressure in the Northern Hemisphere).

A single value is applied to all barbs. Individual barbs can be flipped by
passing a bool array of the same size as U and V.

Returns

    
barbs`Barbs`

Other Parameters

    
dataindexable object, optional

    
DATA_PARAMETER_PLACEHOLDER

**kwargs

    
The barbs can further be customized using `PolyCollection` keyword arguments:

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | array-like or scalar or None  
`animated` | bool  
`antialiased` or aa or antialiaseds | bool or list of bools  
`array` | array-like or None  
`capstyle` | `CapStyle` or {'butt', 'projecting', 'round'}  
`clim` | (vmin: float, vmax: float)  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`cmap` | `Colormap` or str or None  
`color` | color or list of rgba tuples  
`edgecolor` or ec or edgecolors | color or list of colors or 'face'  
`facecolor` or facecolors or fc | color or list of colors  
`figure` | `Figure`  
`gid` | str  
`hatch` | {'/', '\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  
`in_layout` | bool  
`joinstyle` | `JoinStyle` or {'miter', 'round', 'bevel'}  
`label` | object  
`linestyle` or dashes or linestyles or ls | str or tuple or list thereof  
`linewidth` or linewidths or lw | float or list of floats  
`norm` | `Normalize` or None  
`offset_transform` | `Transform`  
`offsets` | (N, 2) or (2,) array-like  
`path_effects` | `AbstractPathEffect`  
`paths` | list of array-like  
`picker` | None or bool or float or callable  
`pickradius` | float  
`rasterized` | bool  
`sizes` | ndarray or None  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`transform` | `Transform`  
`url` | str  
`urls` | list of str or None  
`verts` | list of array-like  
`verts_and_codes` | unknown  
`visible` | bool  
`zorder` | float  
barbs_doc='\nPlot a 2D field of barbs.\n\nCall signature::\n\n barbs([X, Y],
U, V, [C], **kw)\n\nWhere *X*, *Y* define the barb locations, *U*, *V* define
the barb\ndirections, and *C* optionally sets the color.\n\nAll arguments may
be 1D or 2D. *U*, *V*, *C* may be masked arrays, but masked\n*X*, *Y* are not
supported at present.\n\nBarbs are traditionally used in meteorology as a way
to plot the speed\nand direction of wind observations, but can technically be
used to\nplot any two dimensional vector quantity. As opposed to arrows,
which\ngive vector magnitude by the length of the arrow, the barbs give
more\nquantitative information about the vector magnitude by putting
slanted\nlines or a triangle for various increments in magnitude, as
show\nschematically below::\n\n : /\\\ \\\\\n : / \\\ \\\\\n : / \\\ \\\
\\\\\n : / \\\ \\\ \\\\\n : ------------------------------\n\nThe largest
increment is given by a triangle (or "flag"). After those\ncome full lines
(barbs). The smallest increment is a half line. There\nis only, of course,
ever at most 1 half line. If the magnitude is\nsmall and only needs a single
half-line and no full lines or\ntriangles, the half-line is offset from the
end of the barb so that it\ncan be easily distinguished from barbs with a
single full line. The\nmagnitude for the barb shown above would nominally be
65, using the\nstandard increments of 50, 10, and 5.\n\nSee also
https://en.wikipedia.org/wiki/Wind_barb.\n\nParameters\n----------\nX, Y : 1D
or 2D array-like, optional\n The x and y coordinates of the barb locations.
See *pivot* for how the\n barbs are drawn to the x, y positions.\n\n If not
given, they will be generated as a uniform integer meshgrid based\n on the
dimensions of *U* and *V*.\n\n If *X* and *Y* are 1D but *U*, *V* are 2D, *X*,
*Y* are expanded to 2D\n using ``X, Y = np.meshgrid(X, Y)``. In this case
``len(X)`` and ``len(Y)``\n must match the column and row dimensions of *U*
and *V*.\n\nU, V : 1D or 2D array-like\n The x and y components of the barb
shaft.\n\nC : 1D or 2D array-like, optional\n Numeric data that defines the
barb colors by colormapping via *norm* and\n *cmap*.\n\n This does not support
explicit colors. If you want to set colors directly,\n use *barbcolor*
instead.\n\nlength : float, default: 7\n Length of the barb in points; the
other parts of the barb\n are scaled against this.\n\npivot : {\'tip\',
\'middle\'} or float, default: \'tip\'\n The part of the arrow that is
anchored to the *X*, *Y* grid. The barb\n rotates about this point. This can
also be a number, which shifts the\n start of the barb that many points away
from grid point.\n\nbarbcolor : color or color sequence\n The color of all
parts of the barb except for the flags. This parameter\n is analogous to the
*edgecolor* parameter for polygons, which can be used\n instead. However this
parameter will override facecolor.\n\nflagcolor : color or color sequence\n
The color of any flags on the barb. This parameter is analogous to the\n
*facecolor* parameter for polygons, which can be used instead. However,\n this
parameter will override facecolor. If this is not set (and *C* has\n not
either) then *flagcolor* will be set to match *barbcolor* so that the\n barb
has a uniform color. If *C* has been set, *flagcolor* has no effect.\n\nsizes
: dict, optional\n A dictionary of coefficients specifying the ratio of a
given\n feature to the length of the barb. Only those values one wishes to\n
override need to be included. These features include:\n\n - \'spacing\' -
space between features (flags, full/half barbs)\n - \'height\' - height
(distance from shaft to top) of a flag or full barb\n - \'width\' - width of a
flag, twice the width of a full barb\n - \'emptybarb\' - radius of the circle
used for low magnitudes\n\nfill_empty : bool, default: False\n Whether the
empty barbs (circles) that are drawn should be filled with\n the flag color.
If they are not filled, the center is transparent.\n\nrounding : bool,
default: True\n Whether the vector magnitude should be rounded when allocating
barb\n components. If True, the magnitude is rounded to the nearest multiple\n
of the half-barb increment. If False, the magnitude is simply truncated\n to
the next lowest multiple.\n\nbarb_increments : dict, optional\n A dictionary
of increments specifying values to associate with\n different parts of the
barb. Only those values one wishes to\n override need to be included.\n\n -
\'half\' - half barbs (Default is 5)\n - \'full\' - full barbs (Default is
10)\n - \'flag\' - flags (default is 50)\n\nflip_barb : bool or array-like of
bool, default: False\n Whether the lines and flags should point opposite to
normal.\n Normal behavior is for the barbs and lines to point right (comes
from wind\n barbs having these features point towards low pressure in the
Northern\n Hemisphere).\n\n A single value is applied to all barbs. Individual
barbs can be flipped by\n passing a bool array of the same size as *U* and
*V*.\n\nReturns\n-------\nbarbs : `~matplotlib.quiver.Barbs`\n\nOther
Parameters\n----------------\ndata : indexable object, optional\n
DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n The barbs can further be customized
using `.PolyCollection` keyword\n arguments:\n\n \n .. table::\n :class:
property-table\n\n
=================================================================================================
=====================================================================================================\n
Property Description \n
=================================================================================================
=====================================================================================================\n
:meth:`agg_filter <matplotlib.artist.Artist.set_agg_filter>` a filter
function, which takes a (m, n, 3) float array and a dpi value, and returns a
(m, n, 3) array\n :meth:`alpha <matplotlib.collections.Collection.set_alpha>`
array-like or scalar or None \n :meth:`animated
<matplotlib.artist.Artist.set_animated>` bool \n :meth:`antialiased
<matplotlib.collections.Collection.set_antialiased>` or aa or antialiaseds
bool or list of bools \n :meth:`array
<matplotlib.cm.ScalarMappable.set_array>` array-like or None \n
:meth:`capstyle <matplotlib.collections.Collection.set_capstyle>` `.CapStyle`
or {\'butt\', \'projecting\', \'round\'} \n :meth:`clim
<matplotlib.cm.ScalarMappable.set_clim>` (vmin: float, vmax: float) \n
:meth:`clip_box <matplotlib.artist.Artist.set_clip_box>` `.Bbox` \n
:meth:`clip_on <matplotlib.artist.Artist.set_clip_on>` bool \n
:meth:`clip_path <matplotlib.artist.Artist.set_clip_path>` Patch or (Path,
Transform) or None \n :meth:`cmap <matplotlib.cm.ScalarMappable.set_cmap>`
`.Colormap` or str or None \n :meth:`color
<matplotlib.collections.Collection.set_color>` color or list of rgba tuples \n
:meth:`edgecolor <matplotlib.collections.Collection.set_edgecolor>` or ec or
edgecolors color or list of colors or \'face\' \n :meth:`facecolor
<matplotlib.collections.Collection.set_facecolor>` or facecolors or fc color
or list of colors \n :meth:`figure <matplotlib.artist.Artist.set_figure>`
`.Figure` \n :meth:`gid <matplotlib.artist.Artist.set_gid>` str \n
:meth:`hatch <matplotlib.collections.Collection.set_hatch>` {\'/\',
\'\\\\\\\\\', \'|\', \'-\', \'+\', \'x\', \'o\', \'O\', \'.\', \'*\'} \n
:meth:`in_layout <matplotlib.artist.Artist.set_in_layout>` bool \n
:meth:`joinstyle <matplotlib.collections.Collection.set_joinstyle>`
`.JoinStyle` or {\'miter\', \'round\', \'bevel\'} \n :meth:`label
<matplotlib.artist.Artist.set_label>` object \n :meth:`linestyle
<matplotlib.collections.Collection.set_linestyle>` or dashes or linestyles or
ls str or tuple or list thereof \n :meth:`linewidth
<matplotlib.collections.Collection.set_linewidth>` or linewidths or lw float
or list of floats \n :meth:`norm <matplotlib.cm.ScalarMappable.set_norm>`
`.Normalize` or None \n :meth:`offset_transform
<matplotlib.collections.Collection.set_offset_transform>` `.Transform` \n
:meth:`offsets <matplotlib.collections.Collection.set_offsets>` (N, 2) or (2,)
array-like \n :meth:`path_effects <matplotlib.artist.Artist.set_path_effects>`
`.AbstractPathEffect` \n :meth:`paths
<matplotlib.collections.PolyCollection.set_verts>` list of array-like \n
:meth:`picker <matplotlib.artist.Artist.set_picker>` None or bool or float or
callable \n :meth:`pickradius
<matplotlib.collections.Collection.set_pickradius>` float \n :meth:`rasterized
<matplotlib.artist.Artist.set_rasterized>` bool \n :meth:`sizes
<matplotlib.collections._CollectionWithSizes.set_sizes>` ndarray or None \n
:meth:`sketch_params <matplotlib.artist.Artist.set_sketch_params>` (scale:
float, length: float, randomness: float) \n :meth:`snap
<matplotlib.artist.Artist.set_snap>` bool or None \n :meth:`transform
<matplotlib.artist.Artist.set_transform>` `.Transform` \n :meth:`url
<matplotlib.artist.Artist.set_url>` str \n :meth:`urls
<matplotlib.collections.Collection.set_urls>` list of str or None \n
:meth:`verts <matplotlib.collections.PolyCollection.set_verts>` list of array-
like \n :meth:`verts_and_codes
<matplotlib.collections.PolyCollection.set_verts_and_codes>` unknown \n
:meth:`visible <matplotlib.artist.Artist.set_visible>` bool \n :meth:`zorder
<matplotlib.artist.Artist.set_zorder>` float \n
=================================================================================================
=====================================================================================================\n\n'

set(*, UVC=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>,
antialiased=<UNSET>, array=<UNSET>, capstyle=<UNSET>, clim=<UNSET>,
clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, cmap=<UNSET>,
color=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>, gid=<UNSET>,
hatch=<UNSET>, in_layout=<UNSET>, joinstyle=<UNSET>, label=<UNSET>,
linestyle=<UNSET>, linewidth=<UNSET>, norm=<UNSET>, offset_transform=<UNSET>,
offsets=<UNSET>, path_effects=<UNSET>, paths=<UNSET>, picker=<UNSET>,
pickradius=<UNSET>, rasterized=<UNSET>, sizes=<UNSET>, sketch_params=<UNSET>,
snap=<UNSET>, transform=<UNSET>, url=<UNSET>, urls=<UNSET>, verts=<UNSET>,
verts_and_codes=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]

    
Set multiple properties at once.

Supported properties are

Property | Description  
---|---  
`UVC` | unknown  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | array-like or scalar or None  
`animated` | bool  
`antialiased` or aa or antialiaseds | bool or list of bools  
`array` | array-like or None  
`capstyle` | `CapStyle` or {'butt', 'projecting', 'round'}  
`clim` | (vmin: float, vmax: float)  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`cmap` | `Colormap` or str or None  
`color` | color or list of rgba tuples  
`edgecolor` or ec or edgecolors | color or list of colors or 'face'  
`facecolor` or facecolors or fc | color or list of colors  
`figure` | `Figure`  
`gid` | str  
`hatch` | {'/', '\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  
`in_layout` | bool  
`joinstyle` | `JoinStyle` or {'miter', 'round', 'bevel'}  
`label` | object  
`linestyle` or dashes or linestyles or ls | str or tuple or list thereof  
`linewidth` or linewidths or lw | float or list of floats  
`norm` | `Normalize` or None  
`offset_transform` | `Transform`  
`offsets` | sequence of pairs of floats  
`path_effects` | `AbstractPathEffect`  
`paths` | list of array-like  
`picker` | None or bool or float or callable  
`pickradius` | float  
`rasterized` | bool  
`sizes` | ndarray or None  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`transform` | `Transform`  
`url` | str  
`urls` | list of str or None  
`verts` | list of array-like  
`verts_and_codes` | unknown  
`visible` | bool  
`zorder` | float  
set_UVC(U, V, C=None)[source]

set_offsets(xy)[source]

    
Set the offsets for the barb polygons. This saves the offsets passed in and
masks them as appropriate for the existing U/V data.

Parameters

    
xysequence of pairs of floats

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/_as_gen/matplotlib.quiver.Barbs.html

