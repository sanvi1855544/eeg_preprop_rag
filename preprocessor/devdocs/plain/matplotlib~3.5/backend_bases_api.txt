# matplotlib.backend_bases

Abstract base classes define the primitives that renderers and graphics
contexts must implement to serve as a Matplotlib backend.

`RendererBase`

    
An abstract base class to handle drawing/rendering operations.

`FigureCanvasBase`

    
The abstraction layer that separates the `Figure` from the backend specific
details like a user interface drawing area.

`GraphicsContextBase`

    
An abstract base class that provides color, line styles, etc.

`Event`

    
The base class for all of the Matplotlib event handling. Derived classes such
as `KeyEvent` and `MouseEvent` store the meta data like keys and buttons
pressed, x and y locations in pixel and `Axes` coordinates.

`ShowBase`

    
The base class for the `Show` class of each interactive backend; the 'show'
callable is then set to `Show.__call__`.

`ToolContainerBase`

    
The base class for the Toolbar class of each interactive backend.

classmatplotlib.backend_bases.CloseEvent(name, canvas, guiEvent=None)[source]

    
Bases: `matplotlib.backend_bases.Event`

An event triggered by a figure being closed.

classmatplotlib.backend_bases.DrawEvent(name, canvas, renderer)[source]

    
Bases: `matplotlib.backend_bases.Event`

An event triggered by a draw operation on the canvas.

In most backends, callbacks subscribed to this event will be fired after the
rendering is complete but before the screen is updated. Any extra artists
drawn to the canvas's renderer will be reflected without an explicit call to
`blit`.

Warning

Calling `canvas.draw` and `canvas.blit` in these callbacks may not be safe
with all backends and may cause infinite recursion.

A DrawEvent has a number of special attributes in addition to those defined by
the parent `Event` class.

Attributes

    
renderer`RendererBase`

    
The renderer for the draw event.

classmatplotlib.backend_bases.Event(name, canvas, guiEvent=None)[source]

    
Bases: `object`

A Matplotlib event.

The following attributes are defined and shown with their default values.
Subclasses may define additional attributes.

Attributes

    
namestr

    
The event name.

canvas`FigureCanvasBase`

    
The backend-specific canvas instance generating the event.

guiEvent

    
The GUI event that triggered the Matplotlib event.

classmatplotlib.backend_bases.FigureCanvasBase(figure=None)[source]

    
Bases: `object`

The canvas the figure renders into.

Attributes

    
figure`matplotlib.figure.Figure`

    
A high-level figure instance.

blit(bbox=None)[source]

    
Blit the canvas in bbox (default entire canvas).

propertybutton_pick_id

button_press_event(x, y, button, dblclick=False, guiEvent=None)[source]

    
Callback processing for mouse button press events.

Backend derived classes should call this function on any mouse button press.
(x, y) are the canvas coords ((0, 0) is lower left). button and key are as
defined in `MouseEvent`.

This method will call all functions connected to the 'button_press_event' with
a `MouseEvent` instance.

button_release_event(x, y, button, guiEvent=None)[source]

    
Callback processing for mouse button release events.

Backend derived classes should call this function on any mouse button release.

This method will call all functions connected to the 'button_release_event'
with a `MouseEvent` instance.

Parameters

    
xfloat

    
The canvas coordinates where 0=left.

yfloat

    
The canvas coordinates where 0=bottom.

guiEvent

    
The native UI event that generated the Matplotlib event.

propertycallbacks

close_event(guiEvent=None)[source]

    
Pass a `CloseEvent` to all functions connected to `close_event`.

propertydevice_pixel_ratio

    
The ratio of physical to logical pixels used for the canvas on screen.

By default, this is 1, meaning physical and logical pixels are the same size.
Subclasses that support High DPI screens may set this property to indicate
that said ratio is different. All Matplotlib interaction, unless working
directly with the canvas, remains in logical pixels.

draw(*args, **kwargs)[source]

    
Render the `Figure`.

It is important that this method actually walk the artist tree even if not
output is produced because this will trigger deferred work (like computing
limits auto-limits and tick values) that users may want access to before
saving to disk.

draw_event(renderer)[source]

    
Pass a `DrawEvent` to all functions connected to `draw_event`.

draw_idle(*args, **kwargs)[source]

    
Request a widget redraw once control returns to the GUI event loop.

Even if multiple calls to `draw_idle` occur before control returns to the GUI
event loop, the figure will only be rendered once.

#### Notes

Backends may choose to override the method and implement their own strategy to
prevent multiple renderings.

enter_notify_event(guiEvent=None, xy=None)[source]

    
Callback processing for the mouse cursor entering the canvas.

Backend derived classes should call this function when entering canvas.

Parameters

    
guiEvent

    
The native UI event that generated the Matplotlib event.

xy(float, float)

    
The coordinate location of the pointer when the canvas is entered.

events=['resize_event', 'draw_event', 'key_press_event', 'key_release_event',
'button_press_event', 'button_release_event', 'scroll_event',
'motion_notify_event', 'pick_event', 'figure_enter_event',
'figure_leave_event', 'axes_enter_event', 'axes_leave_event', 'close_event']

filetypes={'eps': 'Encapsulated Postscript', 'jpeg': 'Joint Photographic
Experts Group', 'jpg': 'Joint Photographic Experts Group', 'pdf': 'Portable
Document Format', 'pgf': 'PGF code for LaTeX', 'png': 'Portable Network
Graphics', 'ps': 'Postscript', 'raw': 'Raw RGBA bitmap', 'rgba': 'Raw RGBA
bitmap', 'svg': 'Scalable Vector Graphics', 'svgz': 'Scalable Vector
Graphics', 'tif': 'Tagged Image File Format', 'tiff': 'Tagged Image File
Format'}

fixed_dpi=None

flush_events()[source]

    
Flush the GUI events for the figure.

Interactive backends need to reimplement this method.

get_default_filename()[source]

    
Return a string, which includes extension, suitable for use as a default
filename.

classmethodget_default_filetype()[source]

    
Return the default savefig file format as specified in
`rcParams["savefig.format"]` (default: `'png'`).

The returned string does not include a period. This method is overridden in
backends that only support a single file type.

classmethodget_supported_filetypes()[source]

    
Return dict of savefig file formats supported by this backend.

classmethodget_supported_filetypes_grouped()[source]

    
Return a dict of savefig file formats supported by this backend, where the
keys are a file type name, such as 'Joint Photographic Experts Group', and the
values are a list of filename extensions used for that filetype, such as
['jpg', 'jpeg'].

get_width_height(*, physical=False)[source]

    
Return the figure width and height in integral points or pixels.

When the figure is used on High DPI screens (and the backend supports it), the
truncation to integers occurs after scaling by the device pixel ratio.

Parameters

    
physicalbool, default: False

    
Whether to return true physical pixels or logical pixels. Physical pixels may
be used by backends that support HiDPI, but still configure the canvas using
its actual size.

Returns

    
width, heightint

    
The size of the figure, in points or pixels, depending on the backend.

get_window_title()[source]

    
[Deprecated] Return the title text of the window containing the figure, or
None if there is no window (e.g., a PS backend).

#### Notes

Deprecated since version 3.4.

grab_mouse(ax)[source]

    
Set the child `Axes` which is grabbing the mouse events.

Usually called by the widgets themselves. It is an error to call this if the
mouse is already grabbed by another axes.

inaxes(xy)[source]

    
Return the topmost visible `Axes` containing the point xy.

Parameters

    
xy(float, float)

    
(x, y) pixel positions from left/bottom of the canvas.

Returns

    
`Axes` or None

    
The topmost visible axes containing the point, or None if no axes.

is_saving()[source]

    
Return whether the renderer is in the process of saving to a file, rather than
rendering for an on-screen buffer.

key_press_event(key, guiEvent=None)[source]

    
Pass a `KeyEvent` to all functions connected to `key_press_event`.

key_release_event(key, guiEvent=None)[source]

    
Pass a `KeyEvent` to all functions connected to `key_release_event`.

leave_notify_event(guiEvent=None)[source]

    
Callback processing for the mouse cursor leaving the canvas.

Backend derived classes should call this function when leaving canvas.

Parameters

    
guiEvent

    
The native UI event that generated the Matplotlib event.

motion_notify_event(x, y, guiEvent=None)[source]

    
Callback processing for mouse movement events.

Backend derived classes should call this function on any motion-notify-event.

This method will call all functions connected to the 'motion_notify_event'
with a `MouseEvent` instance.

Parameters

    
xfloat

    
The canvas coordinates where 0=left.

yfloat

    
The canvas coordinates where 0=bottom.

guiEvent

    
The native UI event that generated the Matplotlib event.

mpl_connect(s, func)[source]

    
Bind function func to event s.

Parameters

    
sstr

    
One of the following events ids:

  * 'button_press_event'
  * 'button_release_event'
  * 'draw_event'
  * 'key_press_event'
  * 'key_release_event'
  * 'motion_notify_event'
  * 'pick_event'
  * 'resize_event'
  * 'scroll_event'
  * 'figure_enter_event',
  * 'figure_leave_event',
  * 'axes_enter_event',
  * 'axes_leave_event'
  * 'close_event'.

funccallable

    
The callback function to be executed, which must have the signature:

    
    def func(event: Event) -> Any
    
For the location events (button and key press/release), if the mouse is over
the axes, the `inaxes` attribute of the event will be set to the `Axes` the
event occurs is over, and additionally, the variables `xdata` and `ydata`
attributes will be set to the mouse location in data coordinates. See
`KeyEvent` and `MouseEvent` for more info.

Returns

    
cid

    
A connection id that can be used with `FigureCanvasBase.mpl_disconnect`.

#### Examples

    
    def on_press(event):
        print('you pressed', event.button, event.xdata, event.ydata)
    
    cid = canvas.mpl_connect('button_press_event', on_press)
    
mpl_disconnect(cid)[source]

    
Disconnect the callback with id cid.

#### Examples

    
    cid = canvas.mpl_connect('button_press_event', on_press)
    # ... later
    canvas.mpl_disconnect(cid)
    
new_timer(interval=None, callbacks=None)[source]

    
Create a new backend-specific subclass of `Timer`.

This is useful for getting periodic events through the backend's native event
loop. Implemented only for backends with GUIs.

Parameters

    
intervalint

    
Timer interval in milliseconds.

callbackslist[tuple[callable, tuple, dict]]

    
Sequence of (func, args, kwargs) where `func(*args, **kwargs)` will be
executed by the timer every interval.

Callbacks which return `False` or `0` will be removed from the timer.

#### Examples

    
    >>> timer = fig.canvas.new_timer(callbacks=[(f1, (1,), {'a': 3})])
    
pick(mouseevent)[source]

pick_event(mouseevent, artist, **kwargs)[source]

    
Callback processing for pick events.

This method will be called by artists who are picked and will fire off
`PickEvent` callbacks registered listeners.

Note that artists are not pickable by default (see `Artist.set_picker`).

print_figure(filename, dpi=None, facecolor=None, edgecolor=None,
orientation='portrait', format=None, *, bbox_inches=None, pad_inches=None,
bbox_extra_artists=None, backend=None, **kwargs)[source]

    
Render the figure to hardcopy. Set the figure patch face and edge colors. This
is useful because some of the GUIs have a gray figure face color background
and you'll probably want to override this on hardcopy.

Parameters

    
filenamestr or path-like or file-like

    
The file where the figure is saved.

dpifloat, default: `rcParams["savefig.dpi"]` (default: `'figure'`)

    
The dots per inch to save the figure in.

facecolorcolor or 'auto', default: `rcParams["savefig.facecolor"]` (default:
`'auto'`)

    
The facecolor of the figure. If 'auto', use the current figure facecolor.

edgecolorcolor or 'auto', default: `rcParams["savefig.edgecolor"]` (default:
`'auto'`)

    
The edgecolor of the figure. If 'auto', use the current figure edgecolor.

orientation{'landscape', 'portrait'}, default: 'portrait'

    
Only currently applies to PostScript printing.

formatstr, optional

    
Force a specific file format. If not given, the format is inferred from the
filename extension, and if that fails from `rcParams["savefig.format"]`
(default: `'png'`).

bbox_inches'tight' or `Bbox`, default: `rcParams["savefig.bbox"]` (default:
`None`)

    
Bounding box in inches: only the given portion of the figure is saved. If
'tight', try to figure out the tight bbox of the figure.

pad_inchesfloat, default: `rcParams["savefig.pad_inches"]` (default: `0.1`)

    
Amount of padding around the figure when bbox_inches is 'tight'.

bbox_extra_artistslist of `Artist`, optional

    
A list of extra artists that will be considered when the tight bbox is
calculated.

backendstr, optional

    
Use a non-default backend to render the file, e.g. to render a png file with
the "cairo" backend rather than the default "agg", or a pdf file with the
"pgf" backend rather than the default "pdf". Note that the default backend is
normally sufficient. See The builtin backends for a list of valid backends for
each file format. Custom backends can be referenced as "module://...".

release_mouse(ax)[source]

    
Release the mouse grab held by the `Axes` ax.

Usually called by the widgets. It is ok to call this even if ax doesn't have
the mouse grab currently.

required_interactive_framework=None

resize(w, h)[source]

    
UNUSED: Set the canvas size in pixels.

Certain backends may implement a similar method internally, but this is not a
requirement of, nor is it used by, Matplotlib itself.

resize_event()[source]

    
Pass a `ResizeEvent` to all functions connected to `resize_event`.

scroll_event(x, y, step, guiEvent=None)[source]

    
Callback processing for scroll events.

Backend derived classes should call this function on any scroll wheel event.
(x, y) are the canvas coords ((0, 0) is lower left). button and key are as
defined in `MouseEvent`.

This method will call all functions connected to the 'scroll_event' with a
`MouseEvent` instance.

propertyscroll_pick_id

set_cursor(cursor)[source]

    
Set the current cursor.

This may have no effect if the backend does not display anything.

If required by the backend, this method should trigger an update in the
backend event loop after the cursor is set, as this method may be called e.g.
before a long-running task during which the GUI is not updated.

Parameters

    
cursor`Cursors`

    
The cursor to display over the canvas. Note: some backends may change the
cursor for the entire window.

set_window_title(title)[source]

    
[Deprecated] Set the title text of the window containing the figure. Note that
this has no effect if there is no window (e.g., a PS backend).

#### Notes

Deprecated since version 3.4.

start_event_loop(timeout=0)[source]

    
Start a blocking event loop.

Such an event loop is used by interactive functions, such as `ginput` and
`waitforbuttonpress`, to wait for events.

The event loop blocks until a callback function triggers `stop_event_loop`, or
timeout is reached.

If timeout is 0 or negative, never timeout.

Only interactive backends need to reimplement this method and it relies on
`flush_events` being properly implemented.

Interactive backends should implement this in a more native way.

stop_event_loop()[source]

    
Stop the current blocking event loop.

Interactive backends need to reimplement this to match `start_event_loop`

supports_blit=False

switch_backends(FigureCanvasClass)[source]

    
Instantiate an instance of FigureCanvasClass

This is used for backend switching, e.g., to instantiate a FigureCanvasPS from
a FigureCanvasGTK. Note, deep copying is not done, so any changes to one of
the instances (e.g., setting figure size or line props), will be reflected in
the other

classmatplotlib.backend_bases.FigureManagerBase(canvas, num)[source]

    
Bases: `object`

A backend-independent abstraction of a figure container and controller.

The figure manager is used by pyplot to interact with the window in a backend-
independent way. It's an adapter for the real (GUI) framework that represents
the visual figure on screen.

GUI backends define from this class to translate common operations such as
show or resize to the GUI-specific code. Non-GUI backends do not support these
operations an can just use the base class.

This following basic operations are accessible:

Window operations

  * `show`
  * `destroy`
  * `full_screen_toggle`
  * `resize`
  * `get_window_title`
  * `set_window_title`

Key and mouse button press handling

The figure manager sets up default key and mouse button press handling by
hooking up the `key_press_handler` to the matplotlib event system. This
ensures the same shortcuts and mouse actions across backends.

Other operations

Subclasses will have additional attributes and functions to access additional
functionality. This is of course backend-specific. For example, most GUI
backends have `window` and `toolbar` attributes that give access to the native
GUI widgets of the respective framework.

Attributes

    
canvas`FigureCanvasBase`

    
The backend-specific canvas instance.

numint or str

    
The figure number.

key_press_handler_idint

    
The default key handler cid, when using the toolmanager. To disable the
default key press handling use:

    
    figure.canvas.mpl_disconnect(
        figure.canvas.manager.key_press_handler_id)
    
button_press_handler_idint

    
The default mouse button handler cid, when using the toolmanager. To disable
the default button press handling use:

    
    figure.canvas.mpl_disconnect(
        figure.canvas.manager.button_press_handler_id)
    
button_press(event)[source]

    
[Deprecated] The default Matplotlib button actions for extra mouse buttons.

#### Notes

Deprecated since version 3.4.

destroy()[source]

full_screen_toggle()[source]

get_window_title()[source]

    
Return the title text of the window containing the figure, or None if there is
no window (e.g., a PS backend).

key_press(event)[source]

    
[Deprecated] Implement the default Matplotlib key bindings defined at
Navigation keyboard shortcuts.

#### Notes

Deprecated since version 3.4.

resize(w, h)[source]

    
For GUI backends, resize the window (in physical pixels).

set_window_title(title)[source]

    
Set the title text of the window containing the figure.

This has no effect for non-GUI (e.g., PS) backends.

show()[source]

    
For GUI backends, show the figure window and redraw. For non-GUI backends,
raise an exception, unless running headless (i.e. on Linux with an unset
DISPLAY); this exception is converted to a warning in `Figure.show`.

classmatplotlib.backend_bases.GraphicsContextBase[source]

    
Bases: `object`

An abstract base class that provides color, line styles, etc.

copy_properties(gc)[source]

    
Copy properties from gc to self.

get_alpha()[source]

    
Return the alpha value used for blending - not supported on all backends.

get_antialiased()[source]

    
Return whether the object should try to do antialiased rendering.

get_capstyle()[source]

    
Return the `CapStyle`.

get_clip_path()[source]

    
Return the clip path in the form (path, transform), where path is a `Path`
instance, and transform is an affine transform to apply to the path before
clipping.

get_clip_rectangle()[source]

    
Return the clip rectangle as a `Bbox` instance.

get_dashes()[source]

    
Return the dash style as an (offset, dash-list) pair.

The dash list is a even-length list that gives the ink on, ink off in points.
See p. 107 of to PostScript blue book for more info.

Default value is (None, None).

get_forced_alpha()[source]

    
Return whether the value given by get_alpha() should be used to override any
other alpha-channel values.

get_gid()[source]

    
Return the object identifier if one is set, None otherwise.

get_hatch()[source]

    
Get the current hatch style.

get_hatch_color()[source]

    
Get the hatch color.

get_hatch_linewidth()[source]

    
Get the hatch linewidth.

get_hatch_path(density=6.0)[source]

    
Return a `Path` for the current hatch.

get_joinstyle()[source]

    
Return the `JoinStyle`.

get_linewidth()[source]

    
Return the line width in points.

get_rgb()[source]

    
Return a tuple of three or four floats from 0-1.

get_sketch_params()[source]

    
Return the sketch parameters for the artist.

Returns

    
tuple or `None`

    
A 3-tuple with the following elements:

  * `scale`: The amplitude of the wiggle perpendicular to the source line.
  * `length`: The length of the wiggle along the line.
  * `randomness`: The scale factor by which the length is shrunken or expanded.

May return `None` if no sketch parameters were set.

get_snap()[source]

    
Return the snap setting, which can be:

  * True: snap vertices to the nearest pixel center
  * False: leave vertices as-is
  * None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center

get_url()[source]

    
Return a url if one is set, None otherwise.

restore()[source]

    
Restore the graphics context from the stack - needed only for backends that
save graphics contexts on a stack.

set_alpha(alpha)[source]

    
Set the alpha value used for blending - not supported on all backends.

If `alpha=None` (the default), the alpha components of the foreground and fill
colors will be used to set their respective transparencies (where applicable);
otherwise, `alpha` will override them.

set_antialiased(b)[source]

    
Set whether object should be drawn with antialiased rendering.

set_capstyle(cs)[source]

    
Set how to draw endpoints of lines.

Parameters

    
cs`CapStyle` or {'butt', 'projecting', 'round'}

set_clip_path(path)[source]

    
Set the clip path to a `TransformedPath` or None.

set_clip_rectangle(rectangle)[source]

    
Set the clip rectangle to a `Bbox` or None.

set_dashes(dash_offset, dash_list)[source]

    
Set the dash style for the gc.

Parameters

    
dash_offsetfloat

    
The offset (usually 0).

dash_listarray-like or None

    
The on-off sequence as points. None specifies a solid line.

#### Notes

See p. 107 of to PostScript blue book for more info.

set_foreground(fg, isRGBA=False)[source]

    
Set the foreground color.

Parameters

    
fgcolor

isRGBAbool

    
If fg is known to be an `(r, g, b, a)` tuple, isRGBA can be set to True to
improve performance.

set_gid(id)[source]

    
Set the id.

set_hatch(hatch)[source]

    
Set the hatch style (for fills).

set_hatch_color(hatch_color)[source]

    
Set the hatch color.

set_joinstyle(js)[source]

    
Set how to draw connections between line segments.

Parameters

    
js`JoinStyle` or {'miter', 'round', 'bevel'}

set_linewidth(w)[source]

    
Set the linewidth in points.

set_sketch_params(scale=None, length=None, randomness=None)[source]

    
Set the sketch parameters.

Parameters

    
scalefloat, optional

    
The amplitude of the wiggle perpendicular to the source line, in pixels. If
scale is `None`, or not provided, no sketch filter will be provided.

lengthfloat, default: 128

    
The length of the wiggle along the line, in pixels.

randomnessfloat, default: 16

    
The scale factor by which the length is shrunken or expanded.

set_snap(snap)[source]

    
Set the snap setting which may be:

  * True: snap vertices to the nearest pixel center
  * False: leave vertices as-is
  * None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center

set_url(url)[source]

    
Set the url for links in compatible backends.

classmatplotlib.backend_bases.KeyEvent(name, canvas, key, x=0, y=0,
guiEvent=None)[source]

    
Bases: `matplotlib.backend_bases.LocationEvent`

A key event (key press, key release).

A KeyEvent has a number of special attributes in addition to those defined by
the parent `Event` and `LocationEvent` classes.

#### Notes

Modifier keys will be prefixed to the pressed key and will be in the order
"ctrl", "alt", "super". The exception to this rule is when the pressed key is
itself a modifier key, therefore "ctrl+alt" and "alt+control" can both be
valid key values.

#### Examples

    
    def on_key(event):
        print('you pressed', event.key, event.xdata, event.ydata)
    
    cid = fig.canvas.mpl_connect('key_press_event', on_key)
    
Attributes

    
keyNone or str

    
The key(s) pressed. Could be None, a single case sensitive Unicode character
("g", "G", "#", etc.), a special key ("control", "shift", "f1", "up", etc.) or
a combination of the above (e.g., "ctrl+alt+g", "ctrl+alt+G").

classmatplotlib.backend_bases.LocationEvent(name, canvas, x, y,
guiEvent=None)[source]

    
Bases: `matplotlib.backend_bases.Event`

An event that has a screen location.

A LocationEvent has a number of special attributes in addition to those
defined by the parent `Event` class.

Attributes

    
x, yint or None

    
Event location in pixels from bottom left of canvas.

inaxes`Axes` or None

    
The `Axes` instance over which the mouse is, if any.

xdata, ydatafloat or None

    
Data coordinates of the mouse within inaxes, or None if the mouse is not over
an Axes.

lastevent=None

classmatplotlib.backend_bases.MouseButton(value)[source]

    
Bases: `enum.IntEnum`

An enumeration.

BACK=8[source]

FORWARD=9[source]

LEFT=1[source]

MIDDLE=2[source]

RIGHT=3[source]

classmatplotlib.backend_bases.MouseEvent(name, canvas, x, y, button=None,
key=None, step=0, dblclick=False, guiEvent=None)[source]

    
Bases: `matplotlib.backend_bases.LocationEvent`

A mouse event ('button_press_event', 'button_release_event', 'scroll_event',
'motion_notify_event').

A MouseEvent has a number of special attributes in addition to those defined
by the parent `Event` and `LocationEvent` classes.

#### Examples

    
    def on_press(event):
        print('you pressed', event.button, event.xdata, event.ydata)
    
    cid = fig.canvas.mpl_connect('button_press_event', on_press)
    
Attributes

    
buttonNone or `MouseButton` or {'up', 'down'}

    
The button pressed. 'up' and 'down' are used for scroll events. Note that LEFT
and RIGHT actually refer to the "primary" and "secondary" buttons, i.e. if the
user inverts their left and right buttons ("left-handed setting") then the
LEFT button will be the one physically on the right.

keyNone or str

    
The key pressed when the mouse event triggered, e.g. 'shift'. See `KeyEvent`.

Warning

This key is currently obtained from the last 'key_press_event' or
'key_release_event' that occurred within the canvas. Thus, if the last change
of keyboard state occurred while the canvas did not have focus, this attribute
will be wrong.

stepfloat

    
The number of scroll steps (positive for 'up', negative for 'down'). This
applies only to 'scroll_event' and defaults to 0 otherwise.

dblclickbool

    
Whether the event is a double-click. This applies only to 'button_press_event'
and is False otherwise. In particular, it's not used in
'button_release_event'.

classmatplotlib.backend_bases.NavigationToolbar2(canvas)[source]

    
Bases: `object`

Base class for the navigation cursor, version 2.

Backends must implement a canvas that handles connections for
'button_press_event' and 'button_release_event'. See
`FigureCanvasBase.mpl_connect()` for more information.

They must also define

`save_figure()`

    
save the current figure

`draw_rubberband()` (optional)

    
draw the zoom to rect "rubberband" rectangle

`set_message()` (optional)

    
display message

`set_history_buttons()` (optional)

    
you can change the history back / forward buttons to indicate disabled /
enabled state.

and override `__init__` to set up the toolbar -- without forgetting to call
the base-class init. Typically, `__init__` needs to set up toolbar buttons
connected to the `home`, `back`, `forward`, `pan`, `zoom`, and `save_figure`
methods and using standard icons in the "images" subdirectory of the data
path.

That's it, we'll do the rest!

back(*args)[source]

    
Move back up the view lim stack.

For convenience of being directly connected as a GUI callback, which often get
passed additional parameters, this method accepts arbitrary parameters, but
does not use them.

configure_subplots(*args)[source]

drag_pan(event)[source]

    
Callback for dragging in pan/zoom mode.

drag_zoom(event)[source]

    
Callback for dragging in zoom mode.

draw_rubberband(event, x0, y0, x1, y1)[source]

    
Draw a rectangle rubberband to indicate zoom limits.

Note that it is not guaranteed that `x0 <= x1` and `y0 <= y1`.

forward(*args)[source]

    
Move forward in the view lim stack.

For convenience of being directly connected as a GUI callback, which often get
passed additional parameters, this method accepts arbitrary parameters, but
does not use them.

home(*args)[source]

    
Restore the original view.

For convenience of being directly connected as a GUI callback, which often get
passed additional parameters, this method accepts arbitrary parameters, but
does not use them.

mouse_move(event)[source]

pan(*args)[source]

    
Toggle the pan/zoom tool.

Pan with left button, zoom with right.

press_pan(event)[source]

    
Callback for mouse button press in pan/zoom mode.

press_zoom(event)[source]

    
Callback for mouse button press in zoom to rect mode.

push_current()[source]

    
Push the current view limits and position onto the stack.

release_pan(event)[source]

    
Callback for mouse button release in pan/zoom mode.

release_zoom(event)[source]

    
Callback for mouse button release in zoom to rect mode.

remove_rubberband()[source]

    
Remove the rubberband.

save_figure(*args)[source]

    
Save the current figure.

set_cursor(cursor)[source]

    
[Deprecated] Set the current cursor to one of the `Cursors` enums values.

If required by the backend, this method should trigger an update in the
backend event loop after the cursor is set, as this method may be called e.g.
before a long-running task during which the GUI is not updated.

#### Notes

Deprecated since version 3.5.

set_history_buttons()[source]

    
Enable or disable the back/forward button.

set_message(s)[source]

    
Display a message on toolbar or in status bar.

toolitems=(('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to
previous view', 'back', 'back'), ('Forward', 'Forward to next view',
'forward', 'forward'), (None, None, None, None), ('Pan', 'Left button pans,
Right button zooms\nx/y fixes axis, CTRL fixes aspect', 'move', 'pan'),
('Zoom', 'Zoom to rectangle\nx/y fixes axis', 'zoom_to_rect', 'zoom'),
('Subplots', 'Configure subplots', 'subplots', 'configure_subplots'), (None,
None, None, None), ('Save', 'Save the figure', 'filesave', 'save_figure'))

update()[source]

    
Reset the axes stack.

zoom(*args)[source]

    
Toggle zoom to rect mode.

exceptionmatplotlib.backend_bases.NonGuiException[source]

    
Bases: `Exception`

Raised when trying show a figure in a non-GUI backend.

classmatplotlib.backend_bases.PickEvent(name, canvas, mouseevent, artist,
guiEvent=None, **kwargs)[source]

    
Bases: `matplotlib.backend_bases.Event`

A pick event.

This event is fired when the user picks a location on the canvas sufficiently
close to an artist that has been made pickable with `Artist.set_picker`.

A PickEvent has a number of special attributes in addition to those defined by
the parent `Event` class.

#### Examples

Bind a function `on_pick()` to pick events, that prints the coordinates of the
picked data point:

    
    ax.plot(np.rand(100), 'o', picker=5)  # 5 points tolerance
    
    def on_pick(event):
        line = event.artist
        xdata, ydata = line.get_data()
        ind = event.ind
        print('on pick line:', np.array([xdata[ind], ydata[ind]]).T)
    
    cid = fig.canvas.mpl_connect('pick_event', on_pick)
    
Attributes

    
mouseevent`MouseEvent`

    
The mouse event that generated the pick.

artist`matplotlib.artist.Artist`

    
The picked artist. Note that artists are not pickable by default (see
`Artist.set_picker`).

other

    
Additional attributes may be present depending on the type of the picked
object; e.g., a `Line2D` pick may define different extra attributes than a
`PatchCollection` pick.

classmatplotlib.backend_bases.RendererBase[source]

    
Bases: `object`

An abstract base class to handle drawing/rendering operations.

The following methods must be implemented in the backend for full
functionality (though just implementing `draw_path()` alone would give a
highly capable backend):

  * `draw_path()`
  * `draw_image()`
  * `draw_gouraud_triangle()`

The following methods should be implemented in the backend for optimization
reasons:

  * `draw_text()`
  * `draw_markers()`
  * `draw_path_collection()`
  * `draw_quad_mesh()`

close_group(s)[source]

    
Close a grouping element with label s.

Only used by the SVG renderer.

draw_gouraud_triangle(gc, points, colors, transform)[source]

    
Draw a Gouraud-shaded triangle.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

points(3, 2) array-like

    
Array of (x, y) points for the triangle.

colors(3, 4) array-like

    
RGBA colors for each point of the triangle.

transform`matplotlib.transforms.Transform`

    
An affine transform to apply to the points.

draw_gouraud_triangles(gc, triangles_array, colors_array, transform)[source]

    
Draw a series of Gouraud triangles.

Parameters

    
points(N, 3, 2) array-like

    
Array of N (x, y) points for the triangles.

colors(N, 3, 4) array-like

    
Array of N RGBA colors for each point of the triangles.

transform`matplotlib.transforms.Transform`

    
An affine transform to apply to the points.

draw_image(gc, x, y, im, transform=None)[source]

    
Draw an RGBA image.

Parameters

    
gc`GraphicsContextBase`

    
A graphics context with clipping information.

xscalar

    
The distance in physical units (i.e., dots or pixels) from the left hand side
of the canvas.

yscalar

    
The distance in physical units (i.e., dots or pixels) from the bottom side of
the canvas.

im(N, M, 4) array-like of np.uint8

    
An array of RGBA pixels.

transform`matplotlib.transforms.Affine2DBase`

    
If and only if the concrete backend is written such that
`option_scale_image()` returns `True`, an affine transformation (i.e., an
`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the
transformation is given in physical units (i.e., dots or pixels). Note that
the transformation does not override x and y, and has to be applied before
translating the result by x and y (this can be accomplished by adding x and y
to the translation vector defined by transform).

draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace=None)[source]

    
Draw a marker at each of path's vertices (excluding control points).

This provides a fallback implementation of draw_markers that makes multiple
calls to `draw_path()`. Some backends may want to override this method in
order to draw the marker only once and reuse it multiple times.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

marker_trans`matplotlib.transforms.Transform`

    
An affine transform applied to the marker.

trans`matplotlib.transforms.Transform`

    
An affine transform applied to the path.

draw_path(gc, path, transform, rgbFace=None)[source]

    
Draw a `Path` instance using the given affine transform.

draw_path_collection(gc, master_transform, paths, all_transforms, offsets,
offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds,
urls, offset_position)[source]

    
Draw a collection of paths selecting drawing properties from the lists
facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a
list of offsets to apply to each of the paths. The offsets in offsets are
first transformed by offsetTrans before being applied.

offset_position is unused now, but the argument is kept for backwards
compatibility.

This provides a fallback implementation of `draw_path_collection()` that makes
multiple calls to `draw_path()`. Some backends may want to override this in
order to render each set of path data only once, and then reference that path
multiple times with the different offsets, colors, styles etc. The generator
methods `_iter_collection_raw_paths()` and `_iter_collection()` are provided
to help with (and standardize) the implementation across backends. It is
highly recommended to use those generators, so that changes to the behavior of
`draw_path_collection()` can be made globally.

draw_quad_mesh(gc, master_transform, meshWidth, meshHeight, coordinates,
offsets, offsetTrans, facecolors, antialiased, edgecolors)[source]

    
Fallback implementation of `draw_quad_mesh()` that generates paths and then
calls `draw_path_collection()`.

draw_tex(gc, x, y, s, prop, angle, *, mtext=None)[source]

draw_text(gc, x, y, s, prop, angle, ismath=False, mtext=None)[source]

    
Draw the text instance.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

xfloat

    
The x location of the text in display coords.

yfloat

    
The y location of the text baseline in display coords.

sstr

    
The text string.

prop`matplotlib.font_manager.FontProperties`

    
The font properties.

anglefloat

    
The rotation angle in degrees anti-clockwise.

mtext`matplotlib.text.Text`

    
The original text object to be rendered.

#### Notes

Note for backend implementers:

When you are trying to determine if you have gotten your bounding box right
(which is what enables the text layout/alignment to work properly), it helps
to change the line in text.py:

    
    if 0: bbox_artist(self, renderer)
    
to if 1, and then the actual bounding box will be plotted along with your
text.

flipy()[source]

    
Return whether y values increase from top to bottom.

Note that this only affects drawing of texts and images.

get_canvas_width_height()[source]

    
Return the canvas width and height in display coords.

get_image_magnification()[source]

    
Get the factor by which to magnify images passed to `draw_image()`. Allows a
backend to have images at a different resolution to other artists.

get_texmanager()[source]

    
Return the `TexManager` instance.

get_text_width_height_descent(s, prop, ismath)[source]

    
Get the width, height, and descent (offset from the bottom to the baseline),
in display coords, of the string s with `FontProperties` prop.

new_gc()[source]

    
Return an instance of a `GraphicsContextBase`.

open_group(s, gid=None)[source]

    
Open a grouping element with label s and gid (if set) as id.

Only used by the SVG renderer.

option_image_nocomposite()[source]

    
Return whether image composition by Matplotlib should be skipped.

Raster backends should usually return False (letting the C-level rasterizer
take care of image composition); vector backends should usually return `not
rcParams["image.composite_image"]`.

option_scale_image()[source]

    
Return whether arbitrary affine transformations in `draw_image()` are
supported (True for most vector backends).

points_to_pixels(points)[source]

    
Convert points to display units.

You need to override this function (unless your backend doesn't have a dpi,
e.g., postscript or svg). Some imaging systems assume some value for pixels
per inch:

    
    points to pixels = points * pixels_per_inch/72 * dpi/72
    
Parameters

    
pointsfloat or array-like

    
a float or a numpy array of float

Returns

    
Points converted to pixels

start_filter()[source]

    
Switch to a temporary renderer for image filtering effects.

Currently only supported by the agg renderer.

start_rasterizing()[source]

    
Switch to the raster renderer.

Used by `MixedModeRenderer`.

stop_filter(filter_func)[source]

    
Switch back to the original renderer. The contents of the temporary renderer
is processed with the filter_func and is drawn on the original renderer as an
image.

Currently only supported by the agg renderer.

stop_rasterizing()[source]

    
Switch back to the vector renderer and draw the contents of the raster
renderer as an image on the vector renderer.

Used by `MixedModeRenderer`.

classmatplotlib.backend_bases.ResizeEvent(name, canvas)[source]

    
Bases: `matplotlib.backend_bases.Event`

An event triggered by a canvas resize.

A ResizeEvent has a number of special attributes in addition to those defined
by the parent `Event` class.

Attributes

    
widthint

    
Width of the canvas in pixels.

heightint

    
Height of the canvas in pixels.

classmatplotlib.backend_bases.ShowBase[source]

    
Bases: `matplotlib.backend_bases._Backend`

Simple base class to generate a `show()` function in backends.

Subclass must override `mainloop()` method.

classmatplotlib.backend_bases.TimerBase(interval=None, callbacks=None)[source]

    
Bases: `object`

A base class for providing timer events, useful for things animations.
Backends need to implement a few specific methods in order to use their own
timing mechanisms so that the timer events are integrated into their event
loops.

Subclasses must override the following methods:

  * `_timer_start`: Backend-specific code for starting the timer.
  * `_timer_stop`: Backend-specific code for stopping the timer.

Subclasses may additionally override the following methods:

  * `_timer_set_single_shot`: Code for setting the timer to single shot operating mode, if supported by the timer object. If not, the `Timer` class itself will store the flag and the `_on_timer` method should be overridden to support such behavior.
  * `_timer_set_interval`: Code for setting the interval on the timer, if there is a method for doing so on the timer object.
  * `_on_timer`: The internal function that any timer object should call, which will handle the task of running all callbacks that have been set.

Parameters

    
intervalint, default: 1000ms

    
The time between timer events in milliseconds. Will be stored as
`timer.interval`.

callbackslist[tuple[callable, tuple, dict]]

    
List of (func, args, kwargs) tuples that will be called upon timer events.
This list is accessible as `timer.callbacks` and can be manipulated directly,
or the functions `add_callback` and `remove_callback` can be used.

add_callback(func, *args, **kwargs)[source]

    
Register func to be called by timer when the event fires. Any additional
arguments provided will be passed to func.

This function returns func, which makes it possible to use it as a decorator.

propertyinterval

    
The time between timer events, in milliseconds.

remove_callback(func, *args, **kwargs)[source]

    
Remove func from list of callbacks.

args and kwargs are optional and used to distinguish between copies of the
same function registered to be called with different arguments. This behavior
is deprecated. In the future, `*args, **kwargs` won't be considered anymore;
to keep a specific callback removable by itself, pass it to `add_callback` as
a `functools.partial` object.

propertysingle_shot

    
Whether this timer should stop after a single run.

start(interval=None)[source]

    
Start the timer object.

Parameters

    
intervalint, optional

    
Timer interval in milliseconds; overrides a previously set interval if
provided.

stop()[source]

    
Stop the timer.

classmatplotlib.backend_bases.ToolContainerBase(toolmanager)[source]

    
Bases: `object`

Base class for all tool containers, e.g. toolbars.

Attributes

    
toolmanager`ToolManager`

    
The tools with which this `ToolContainer` wants to communicate.

add_tool(tool, group, position=\- 1)[source]

    
Add a tool to this container.

Parameters

    
tooltool_like

    
The tool to add, see `ToolManager.get_tool`.

groupstr

    
The name of the group to add this tool to.

positionint, default: -1

    
The position within the group to place this tool.

add_toolitem(name, group, position, image, description, toggle)[source]

    
Add a toolitem to the container.

This method must be implemented per backend.

The callback associated with the button click event, must be exactly
`self.trigger_tool(name)`.

Parameters

    
namestr

    
Name of the tool to add, this gets used as the tool's ID and as the default
label of the buttons.

groupstr

    
Name of the group that this tool belongs to.

positionint

    
Position of the tool within its group, if -1 it goes at the end.

imagestr

    
Filename of the image for the button or `None`.

descriptionstr

    
Description of the tool, used for the tooltips.

togglebool

    
  * `True` : The button is a toggle (change the pressed/unpressed state between consecutive clicks).
  * `False` : The button is a normal button (returns to unpressed state after release).

remove_toolitem(name)[source]

    
Remove a toolitem from the `ToolContainer`.

This method must get implemented per backend.

Called when `ToolManager` emits a `tool_removed_event`.

Parameters

    
namestr

    
Name of the tool to remove.

set_message(s)[source]

    
Display a message on the toolbar.

Parameters

    
sstr

    
Message text.

toggle_toolitem(name, toggled)[source]

    
Toggle the toolitem without firing event.

Parameters

    
namestr

    
Id of the tool to toggle.

toggledbool

    
Whether to set this tool as toggled or not.

trigger_tool(name)[source]

    
Trigger the tool.

Parameters

    
namestr

    
Name (id) of the tool triggered from within the container.

matplotlib.backend_bases.button_press_handler(event, canvas=None,
toolbar=None)[source]

    
The default Matplotlib button actions for extra mouse buttons.

Parameters are as for `key_press_handler`, except that event is a
`MouseEvent`.

matplotlib.backend_bases.get_registered_canvas_class(format)[source]

    
Return the registered default canvas for given file format. Handles deferred
import of required backend.

matplotlib.backend_bases.key_press_handler(event, canvas=None,
toolbar=None)[source]

    
Implement the default Matplotlib key bindings for the canvas and toolbar
described at Navigation keyboard shortcuts.

Parameters

    
event`KeyEvent`

    
A key press/release event.

canvas`FigureCanvasBase`, default: `event.canvas`

    
The backend-specific canvas instance. This parameter is kept for back-
compatibility, but, if set, should always be equal to `event.canvas`.

toolbar`NavigationToolbar2`, default: `event.canvas.toolbar`

    
The navigation cursor toolbar. This parameter is kept for back-compatibility,
but, if set, should always be equal to `event.canvas.toolbar`.

matplotlib.backend_bases.register_backend(format, backend,
description=None)[source]

    
Register a backend for saving to a given file format.

Parameters

    
formatstr

    
File extension

backendmodule string or canvas class

    
Backend for handling file output

descriptionstr, default: ""

    
Description of the file type.

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/backend_bases_api.html

