# backend_mixed

classmatplotlib.backends.backend_mixed.MixedModeRenderer(figure, width,
height, dpi, vector_renderer, raster_renderer_class=None,
bbox_inches_restore=None)[source]

    
Bases: `object`

A helper class to implement a renderer that switches between vector and raster
drawing. An example may be a PDF writer, where most things are drawn with PDF
vector commands, but some very complex objects, such as quad meshes, are
rasterised and then output as images.

Parameters

    
figure`matplotlib.figure.Figure`

    
The figure instance.

widthscalar

    
The width of the canvas in logical units

heightscalar

    
The height of the canvas in logical units

dpifloat

    
The dpi of the canvas

vector_renderer`matplotlib.backend_bases.RendererBase`

    
An instance of a subclass of `RendererBase` that will be used for the vector
drawing.

raster_renderer_class`matplotlib.backend_bases.RendererBase`

    
The renderer class to use for the raster drawing. If not provided, this will
use the Agg backend (which is currently the only viable option anyway.)

start_rasterizing()[source]

    
Enter "raster" mode. All subsequent drawing commands (until `stop_rasterizing`
is called) will be drawn with the raster backend.

stop_rasterizing()[source]

    
Exit "raster" mode. All of the drawing that was done since the last
`start_rasterizing` call will be copied to the vector backend by calling
draw_image.

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/backend_mixed_api.html

