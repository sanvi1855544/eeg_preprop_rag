# matplotlib.contour

Classes to support contour plotting and labelling for the Axes class.

classmatplotlib.contour.ClabelText(x=0, y=0, text='', color=None,
verticalalignment='baseline', horizontalalignment='left', multialignment=None,
fontproperties=None, rotation=None, linespacing=None, rotation_mode=None,
usetex=None, wrap=False, transform_rotates_text=False, *, parse_math=True,
**kwargs)[source]

    
Bases: `matplotlib.text.Text`

Unlike the ordinary text, the get_rotation returns an updated angle in the
pixel coordinate assuming that the input rotation is an angle in data
coordinate (or whatever transform set).

Create a `Text` instance at x, y with string text.

Valid keyword arguments are:

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`backgroundcolor` | color  
`bbox` | dict with properties for `patches.FancyBboxPatch`  
`clip_box` | unknown  
`clip_on` | unknown  
`clip_path` | unknown  
`color` or c | color  
`figure` | `Figure`  
`fontfamily` or family | {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  
`fontproperties` or font or font_properties | `font_manager.FontProperties` or `str` or `pathlib.Path`  
`fontsize` or size | float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  
`fontstretch` or stretch | {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  
`fontstyle` or style | {'normal', 'italic', 'oblique'}  
`fontvariant` or variant | {'normal', 'small-caps'}  
`fontweight` or weight | {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  
`gid` | str  
`horizontalalignment` or ha | {'center', 'right', 'left'}  
`in_layout` | bool  
`label` | object  
`linespacing` | float (multiple of font size)  
`math_fontfamily` | str  
`multialignment` or ma | {'left', 'right', 'center'}  
`parse_math` | bool  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | (float, float)  
`rasterized` | bool  
`rotation` | float or {'vertical', 'horizontal'}  
`rotation_mode` | {None, 'default', 'anchor'}  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`text` | object  
`transform` | `Transform`  
`transform_rotates_text` | bool  
`url` | str  
`usetex` | bool or None  
`verticalalignment` or va | {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  
`visible` | bool  
`wrap` | bool  
`x` | float  
`y` | float  
`zorder` | float  
get_rotation()[source]

    
Return the text angle in degrees between 0 and 360.

set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>,
backgroundcolor=<UNSET>, bbox=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>,
clip_path=<UNSET>, color=<UNSET>, fontfamily=<UNSET>, fontproperties=<UNSET>,
fontsize=<UNSET>, fontstretch=<UNSET>, fontstyle=<UNSET>, fontvariant=<UNSET>,
fontweight=<UNSET>, gid=<UNSET>, horizontalalignment=<UNSET>,
in_layout=<UNSET>, label=<UNSET>, linespacing=<UNSET>,
math_fontfamily=<UNSET>, multialignment=<UNSET>, parse_math=<UNSET>,
path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, rasterized=<UNSET>,
rotation=<UNSET>, rotation_mode=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>,
text=<UNSET>, transform=<UNSET>, transform_rotates_text=<UNSET>, url=<UNSET>,
usetex=<UNSET>, verticalalignment=<UNSET>, visible=<UNSET>, wrap=<UNSET>,
x=<UNSET>, y=<UNSET>, zorder=<UNSET>)[source]

    
Set multiple properties at once.

Supported properties are

Property | Description  
---|---  
`agg_filter` | a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  
`alpha` | scalar or None  
`animated` | bool  
`backgroundcolor` | color  
`bbox` | dict with properties for `patches.FancyBboxPatch`  
`clip_box` | `Bbox`  
`clip_on` | bool  
`clip_path` | Patch or (Path, Transform) or None  
`color` or c | color  
`figure` | `Figure`  
`fontfamily` or family | {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  
`fontproperties` or font or font_properties | `font_manager.FontProperties` or `str` or `pathlib.Path`  
`fontsize` or size | float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  
`fontstretch` or stretch | {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  
`fontstyle` or style | {'normal', 'italic', 'oblique'}  
`fontvariant` or variant | {'normal', 'small-caps'}  
`fontweight` or weight | {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  
`gid` | str  
`horizontalalignment` or ha | {'center', 'right', 'left'}  
`in_layout` | bool  
`label` | object  
`linespacing` | float (multiple of font size)  
`math_fontfamily` | str  
`multialignment` or ma | {'left', 'right', 'center'}  
`parse_math` | bool  
`path_effects` | `AbstractPathEffect`  
`picker` | None or bool or float or callable  
`position` | (float, float)  
`rasterized` | bool  
`rotation` | float or {'vertical', 'horizontal'}  
`rotation_mode` | {None, 'default', 'anchor'}  
`sketch_params` | (scale: float, length: float, randomness: float)  
`snap` | bool or None  
`text` | object  
`transform` | `Transform`  
`transform_rotates_text` | bool  
`url` | str  
`usetex` | bool or None  
`verticalalignment` or va | {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  
`visible` | bool  
`wrap` | bool  
`x` | float  
`y` | float  
`zorder` | float  
classmatplotlib.contour.ContourLabeler[source]

    
Bases: `object`

Mixin to provide labelling capability to `ContourSet`.

add_label(x, y, rotation, lev, cvalue)[source]

    
Add contour label using `Text` class.

add_label_clabeltext(x, y, rotation, lev, cvalue)[source]

    
Add contour label using `ClabelText` class.

add_label_near(x, y, inline=True, inline_spacing=5, transform=None)[source]

    
Add a label near the point `(x, y)`.

Parameters

    
x, yfloat

    
The approximate location of the label.

inlinebool, default: True

    
If True remove the segment of the contour beneath the label.

inline_spacingint, default: 5

    
Space in pixels to leave on each side of label when placing inline. This
spacing will be exact for labels at locations where the contour is straight,
less so for labels on curved contours.

transform`Transform` or `False`, default: `self.axes.transData`

    
A transform applied to `(x, y)` before labeling. The default causes `(x, y)`
to be interpreted as data coordinates. `False` is a synonym for
`IdentityTransform`; i.e. `(x, y)` should be interpreted as display
coordinates.

calc_label_rot_and_inline(slc, ind, lw, lc=None, spacing=5)[source]

    
Calculate the appropriate label rotation given the linecontour coordinates in
screen units, the index of the label location and the label width.

If lc is not None or empty, also break contours and compute inlining.

spacing is the empty space to leave around the label, in pixels.

Both tasks are done together to avoid calculating path lengths multiple times,
which is relatively costly.

The method used here involves computing the path length along the contour in
pixel coordinates and then looking approximately (label width / 2) away from
central point to determine rotation and then to break contour if desired.

clabel(levels=None, *, fontsize=None, inline=True, inline_spacing=5, fmt=None,
colors=None, use_clabeltext=False, manual=False, rightside_up=True,
zorder=None)[source]

    
Label a contour plot.

Adds labels to line contours in this `ContourSet` (which inherits from this
mixin class).

Parameters

    
levelsarray-like, optional

    
A list of level values, that should be labeled. The list must be a subset of
`cs.levels`. If not given, all levels are labeled.

fontsizestr or float, default: `rcParams["font.size"]` (default: `10.0`)

    
Size in points or relative size e.g., 'smaller', 'x-large'. See
`Text.set_size` for accepted string values.

colorscolor or colors or None, default: None

    
The label colors:

  * If None, the color of each label matches the color of the corresponding contour.
  * If one string color, e.g., colors = 'r' or colors = 'red', all labels will be plotted in this color.
  * If a tuple of colors (string, float, rgb, etc), different labels will be plotted in different colors in the order specified.

inlinebool, default: True

    
If `True` the underlying contour is removed where the label is placed.

inline_spacingfloat, default: 5

    
Space in pixels to leave on each side of label when placing inline.

This spacing will be exact for labels at locations where the contour is
straight, less so for labels on curved contours.

fmt`Formatter` or str or callable or dict, optional

    
How the levels are formatted:

  * If a `Formatter`, it is used to format all levels at once, using its `Formatter.format_ticks` method.
  * If a str, it is interpreted as a %-style format string.
  * If a callable, it is called with one level at a time and should return the corresponding label.
  * If a dict, it should directly map levels to labels.

The default is to use a standard `ScalarFormatter`.

manualbool or iterable, default: False

    
If `True`, contour labels will be placed manually using mouse clicks. Click
the first button near a contour to add a label, click the second button (or
potentially both mouse buttons at once) to finish adding labels. The third
button can be used to remove the last label added, but only if labels are not
inline. Alternatively, the keyboard can be used to select label locations
(enter to end label placement, delete or backspace act like the third mouse
button, and any other key will select a label location).

manual can also be an iterable object of (x, y) tuples. Contour labels will be
created as if mouse is clicked at each (x, y) position.

rightside_upbool, default: True

    
If `True`, label rotations will always be plus or minus 90 degrees from level.

use_clabeltextbool, default: False

    
If `True`, `ClabelText` class (instead of `Text`) is used to create labels.
`ClabelText` recalculates rotation angles of texts during the drawing time,
therefore this can be used if aspect of the axes changes.

zorderfloat or None, default: `(2 + contour.get_zorder())`

    
zorder of the contour labels.

Returns

    
labels

    
A list of `Text` instances for the labels.

get_label_coords(distances, XX, YY, ysize, lw)[source]

    
[Deprecated] Return x, y, and the index of a label location.

Labels are plotted at a location with the smallest deviation of the contour
from a straight line unless there is another label nearby, in which case the
next best place on the contour is picked up. If all such candidates are
rejected, the beginning of the contour is chosen.

#### Notes

Deprecated since version 3.4.

get_label_width(lev, fmt, fsize)[source]

    
[Deprecated] Return the width of the label in points.

#### Notes

Deprecated since version 3.5.

get_text(lev, fmt)[source]

    
Get the text of the label.

labels(inline, inline_spacing)[source]

locate_label(linecontour, labelwidth)[source]

    
Find good place to draw a label (relatively flat part of the contour).

pop_label(index=\- 1)[source]

    
Defaults to removing last label, but any index can be supplied

print_label(linecontour, labelwidth)[source]

    
Return whether a contour is long enough to hold a label.

set_label_props(label, text, color)[source]

    
Set the label properties - color, fontsize, text.

too_close(x, y, lw)[source]

    
Return whether a label is already near this location.

classmatplotlib.contour.ContourSet(ax, *args, levels=None, filled=False,
linewidths=None, linestyles=None, hatches=(None,), alpha=None, origin=None,
extent=None, cmap=None, colors=None, norm=None, vmin=None, vmax=None,
extend='neither', antialiased=None, nchunk=0, locator=None, transform=None,
**kwargs)[source]

    
Bases: `matplotlib.cm.ScalarMappable`, `matplotlib.contour.ContourLabeler`

Store a set of contour lines or filled regions.

User-callable method: `clabel`

Parameters

    
ax`Axes`

levels[level0, level1, ..., leveln]

    
A list of floating point numbers indicating the contour levels.

allsegs[level0segs, level1segs, ...]

    
List of all the polygon segments for all the levels. For contour lines
`len(allsegs) == len(levels)`, and for filled contour regions `len(allsegs) =
len(levels)-1`. The lists should look like

    
    level0segs = [polygon0, polygon1, ...]
    polygon0 = [[x0, y0], [x1, y1], ...]
    
allkinds`None` or [level0kinds, level1kinds, ...]

    
Optional list of all the polygon vertex kinds (code types), as described and
used in Path. This is used to allow multiply- connected paths such as holes
within filled polygons. If not `None`, `len(allkinds) == len(allsegs)`. The
lists should look like

    
    level0kinds = [polygon0kinds, ...]
    polygon0kinds = [vertexcode0, vertexcode1, ...]
    
If allkinds is not `None`, usually all polygons for a particular contour level
are grouped together so that `level0segs = [polygon0]` and `level0kinds =
[polygon0kinds]`.

**kwargs

    
Keyword arguments are as described in the docstring of `contour`.

Attributes

    
ax`Axes`

    
The Axes object in which the contours are drawn.

collections`silent_list` of `PathCollection`s

    
The `Artist`s representing the contour. This is a list of `PathCollection`s
for both line and filled contours.

levelsarray

    
The values of the contour levels.

layersarray

    
Same as levels for line contours; half-way between levels for filled contours.
See `ContourSet._process_colors`.

Draw contour lines or filled regions, depending on whether keyword arg filled
is `False` (default) or `True`.

Call signature:

    
    ContourSet(ax, levels, allsegs, [allkinds], **kwargs)
    
Parameters

    
ax`Axes`

    
The `Axes` object to draw on.

levels[level0, level1, ..., leveln]

    
A list of floating point numbers indicating the contour levels.

allsegs[level0segs, level1segs, ...]

    
List of all the polygon segments for all the levels. For contour lines
`len(allsegs) == len(levels)`, and for filled contour regions `len(allsegs) =
len(levels)-1`. The lists should look like

    
    level0segs = [polygon0, polygon1, ...]
    polygon0 = [[x0, y0], [x1, y1], ...]
    
allkinds[level0kinds, level1kinds, ...], optional

    
Optional list of all the polygon vertex kinds (code types), as described and
used in Path. This is used to allow multiply- connected paths such as holes
within filled polygons. If not `None`, `len(allkinds) == len(allsegs)`. The
lists should look like

    
    level0kinds = [polygon0kinds, ...]
    polygon0kinds = [vertexcode0, vertexcode1, ...]
    
If allkinds is not `None`, usually all polygons for a particular contour level
are grouped together so that `level0segs = [polygon0]` and `level0kinds =
[polygon0kinds]`.

**kwargs

    
Keyword arguments are as described in the docstring of `contour`.

changed()[source]

    
Call this whenever the mappable is changed to notify all the callbackSM
listeners to the 'changed' signal.

find_nearest_contour(x, y, indices=None, pixel=True)[source]

    
Find the point in the contour plot that is closest to `(x, y)`.

Parameters

    
x, yfloat

    
The reference point.

indiceslist of int or None, default: None

    
Indices of contour levels to consider. If None (the default), all levels are
considered.

pixelbool, default: True

    
If True, measure distance in pixel (screen) space, which is useful for manual
contour labeling; else, measure distance in axes space.

Returns

    
contour`Collection`

    
The contour that is closest to `(x, y)`.

segmentint

    
The index of the `Path` in contour that is closest to `(x, y)`.

indexint

    
The index of the path segment in segment that is closest to `(x, y)`.

xmin, yminfloat

    
The point in the contour plot that is closest to `(x, y)`.

d2float

    
The squared distance from `(xmin, ymin)` to `(x, y)`.

get_alpha()[source]

    
Return alpha to be applied to all ContourSet artists.

get_transform()[source]

    
Return the `Transform` instance used by this ContourSet.

legend_elements(variable_name='x', str_format=<class 'str'>)[source]

    
Return a list of artists and labels suitable for passing through to `legend`
which represent this ContourSet.

The labels have the form "0 < x <= 1" stating the data ranges which the
artists represent.

Parameters

    
variable_namestr

    
The string used inside the inequality used on the labels.

str_formatfunction: float -> str

    
Function used to format the numbers in the labels.

Returns

    
artistslist[`Artist`]

    
A list of the artists.

labelslist[str]

    
A list of the labels.

set_alpha(alpha)[source]

    
Set the alpha blending value for all ContourSet artists. alpha must be between
0 (transparent) and 1 (opaque).

classmatplotlib.contour.QuadContourSet(ax, *args, levels=None, filled=False,
linewidths=None, linestyles=None, hatches=(None,), alpha=None, origin=None,
extent=None, cmap=None, colors=None, norm=None, vmin=None, vmax=None,
extend='neither', antialiased=None, nchunk=0, locator=None, transform=None,
**kwargs)[source]

    
Bases: `matplotlib.contour.ContourSet`

Create and store a set of contour lines or filled regions.

This class is typically not instantiated directly by the user but by `contour`
and `contourf`.

Attributes

    
ax`Axes`

    
The Axes object in which the contours are drawn.

collections`silent_list` of `PathCollection`s

    
The `Artist`s representing the contour. This is a list of `PathCollection`s
for both line and filled contours.

levelsarray

    
The values of the contour levels.

layersarray

    
Same as levels for line contours; half-way between levels for filled contours.
See `ContourSet._process_colors`.

Draw contour lines or filled regions, depending on whether keyword arg filled
is `False` (default) or `True`.

Call signature:

    
    ContourSet(ax, levels, allsegs, [allkinds], **kwargs)
    
Parameters

    
ax`Axes`

    
The `Axes` object to draw on.

levels[level0, level1, ..., leveln]

    
A list of floating point numbers indicating the contour levels.

allsegs[level0segs, level1segs, ...]

    
List of all the polygon segments for all the levels. For contour lines
`len(allsegs) == len(levels)`, and for filled contour regions `len(allsegs) =
len(levels)-1`. The lists should look like

    
    level0segs = [polygon0, polygon1, ...]
    polygon0 = [[x0, y0], [x1, y1], ...]
    
allkinds[level0kinds, level1kinds, ...], optional

    
Optional list of all the polygon vertex kinds (code types), as described and
used in Path. This is used to allow multiply- connected paths such as holes
within filled polygons. If not `None`, `len(allkinds) == len(allsegs)`. The
lists should look like

    
    level0kinds = [polygon0kinds, ...]
    polygon0kinds = [vertexcode0, vertexcode1, ...]
    
If allkinds is not `None`, usually all polygons for a particular contour level
are grouped together so that `level0segs = [polygon0]` and `level0kinds =
[polygon0kinds]`.

**kwargs

    
Keyword arguments are as described in the docstring of `contour`.

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/contour_api.html

