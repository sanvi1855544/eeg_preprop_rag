# backend_pgf

matplotlib.backends.backend_pgf.FigureCanvas[source]

    
alias of `matplotlib.backends.backend_pgf.FigureCanvasPgf`

classmatplotlib.backends.backend_pgf.FigureCanvasPgf(figure=None)[source]

    
Bases: `matplotlib.backend_bases.FigureCanvasBase`

draw()[source]

    
Render the `Figure`.

It is important that this method actually walk the artist tree even if not
output is produced because this will trigger deferred work (like computing
limits auto-limits and tick values) that users may want access to before
saving to disk.

filetypes={'pdf': 'LaTeX compiled PGF picture', 'pgf': 'LaTeX PGF picture',
'png': 'Portable Network Graphics'}

get_default_filetype()[source]

    
Return the default savefig file format as specified in
`rcParams["savefig.format"]` (default: `'png'`).

The returned string does not include a period. This method is overridden in
backends that only support a single file type.

get_renderer()[source]

print_pdf(fname_or_fh, *, metadata=None, **kwargs)[source]

    
Use LaTeX to compile a pgf generated figure to pdf.

print_pgf(fname_or_fh, **kwargs)[source]

    
Output pgf macros for drawing the figure so it can be included and rendered in
latex documents.

print_png(fname_or_fh, **kwargs)[source]

    
Use LaTeX to compile a pgf figure to pdf and convert it to png.

exceptionmatplotlib.backends.backend_pgf.LatexError(message,
latex_output='')[source]

    
Bases: `Exception`

classmatplotlib.backends.backend_pgf.LatexManager[source]

    
Bases: `object`

The LatexManager opens an instance of the LaTeX application for determining
the metrics of text elements. The LaTeX environment can be modified by setting
fonts and/or a custom preamble in `rcParams`.

get_width_height_descent(text, prop)[source]

    
Get the width, total height, and descent (in TeX points) for a text typeset by
the current LaTeX environment.

propertystr_cache[source]

classmatplotlib.backends.backend_pgf.PdfPages(filename, *, keep_empty=True,
metadata=None)[source]

    
Bases: `object`

A multi-page PDF file using the pgf backend

#### Examples

    
    >>> import matplotlib.pyplot as plt
    >>> # Initialize:
    >>> with PdfPages('foo.pdf') as pdf:
    ...     # As many times as you like, create a figure fig and save it:
    ...     fig = plt.figure()
    ...     pdf.savefig(fig)
    ...     # When no figure is specified the current figure is saved
    ...     pdf.savefig()
    
Create a new PdfPages object.

Parameters

    
filenamestr or path-like

    
Plots using `PdfPages.savefig` will be written to a file at this location. Any
older file with the same name is overwritten.

keep_emptybool, default: True

    
If set to False, then empty pdf files will be deleted automatically when
closed.

metadatadict, optional

    
Information dictionary object (see PDF reference section 10.2.1 'Document
Information Dictionary'), e.g.: `{'Creator': 'My software', 'Author': 'Me',
'Title': 'Awesome'}`.

The standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator',
'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been
predefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed
by setting them to `None`.

Note that some versions of LaTeX engines may ignore the 'Producer' key and set
it to themselves.

close()[source]

    
Finalize this object, running LaTeX in a temporary directory and moving the
final pdf file to filename.

get_pagecount()[source]

    
Return the current number of pages in the multipage pdf file.

keep_empty

savefig(figure=None, **kwargs)[source]

    
Save a `Figure` to this file as a new page.

Any other keyword arguments are passed to `savefig`.

Parameters

    
figure`Figure` or int, default: the active figure

    
The figure, or index of the figure, that is saved to the file.

classmatplotlib.backends.backend_pgf.RendererPgf(figure, fh)[source]

    
Bases: `matplotlib.backend_bases.RendererBase`

Create a new PGF renderer that translates any drawing instruction into text
commands to be interpreted in a latex pgfpicture environment.

Attributes

    
figure`matplotlib.figure.Figure`

    
Matplotlib figure to initialize height, width and dpi from.

fhfile-like

    
File handle for the output of the drawing commands.

draw_image(gc, x, y, im, transform=None)[source]

    
Draw an RGBA image.

Parameters

    
gc`GraphicsContextBase`

    
A graphics context with clipping information.

xscalar

    
The distance in physical units (i.e., dots or pixels) from the left hand side
of the canvas.

yscalar

    
The distance in physical units (i.e., dots or pixels) from the bottom side of
the canvas.

im(N, M, 4) array-like of np.uint8

    
An array of RGBA pixels.

transform`matplotlib.transforms.Affine2DBase`

    
If and only if the concrete backend is written such that
`option_scale_image()` returns `True`, an affine transformation (i.e., an
`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the
transformation is given in physical units (i.e., dots or pixels). Note that
the transformation does not override x and y, and has to be applied before
translating the result by x and y (this can be accomplished by adding x and y
to the translation vector defined by transform).

draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace=None)[source]

    
Draw a marker at each of path's vertices (excluding control points).

This provides a fallback implementation of draw_markers that makes multiple
calls to `draw_path()`. Some backends may want to override this method in
order to draw the marker only once and reuse it multiple times.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

marker_trans`matplotlib.transforms.Transform`

    
An affine transform applied to the marker.

trans`matplotlib.transforms.Transform`

    
An affine transform applied to the path.

draw_path(gc, path, transform, rgbFace=None)[source]

    
Draw a `Path` instance using the given affine transform.

draw_tex(gc, x, y, s, prop, angle, ismath='TeX', mtext=None)[source]

draw_text(gc, x, y, s, prop, angle, ismath=False, mtext=None)[source]

    
Draw the text instance.

Parameters

    
gc`GraphicsContextBase`

    
The graphics context.

xfloat

    
The x location of the text in display coords.

yfloat

    
The y location of the text baseline in display coords.

sstr

    
The text string.

prop`matplotlib.font_manager.FontProperties`

    
The font properties.

anglefloat

    
The rotation angle in degrees anti-clockwise.

mtext`matplotlib.text.Text`

    
The original text object to be rendered.

#### Notes

Note for backend implementers:

When you are trying to determine if you have gotten your bounding box right
(which is what enables the text layout/alignment to work properly), it helps
to change the line in text.py:

    
    if 0: bbox_artist(self, renderer)
    
to if 1, and then the actual bounding box will be plotted along with your
text.

flipy()[source]

    
Return whether y values increase from top to bottom.

Note that this only affects drawing of texts and images.

get_canvas_width_height()[source]

    
Return the canvas width and height in display coords.

get_text_width_height_descent(s, prop, ismath)[source]

    
Get the width, height, and descent (offset from the bottom to the baseline),
in display coords, of the string s with `FontProperties` prop.

option_image_nocomposite()[source]

    
Return whether image composition by Matplotlib should be skipped.

Raster backends should usually return False (letting the C-level rasterizer
take care of image composition); vector backends should usually return `not
rcParams["image.composite_image"]`.

option_scale_image()[source]

    
Return whether arbitrary affine transformations in `draw_image()` are
supported (True for most vector backends).

points_to_pixels(points)[source]

    
Convert points to display units.

You need to override this function (unless your backend doesn't have a dpi,
e.g., postscript or svg). Some imaging systems assume some value for pixels
per inch:

    
    points to pixels = points * pixels_per_inch/72 * dpi/72
    
Parameters

    
pointsfloat or array-like

    
a float or a numpy array of float

Returns

    
Points converted to pixels

classmatplotlib.backends.backend_pgf.TmpDirCleaner(*args, **kwargs)[source]

    
Bases: `object`

[Deprecated]

#### Notes

Deprecated since version 3.4:

staticadd(tmpdir)[source]

    
[Deprecated]

#### Notes

Deprecated since version 3.4:

staticcleanup_remaining_tmpdirs()[source]

    
[Deprecated]

#### Notes

Deprecated since version 3.4:

remaining_tmpdirs={}

matplotlib.backends.backend_pgf.common_texification(text)[source]

    
Do some necessary and/or useful substitutions for texts to be included in
LaTeX documents.

This distinguishes text-mode and math-mode by replacing the math separator `$`
with `\(\displaystyle %s\)`. Escaped math separators (`\$`) are ignored.

The following characters are escaped in text segments: `_^$%`

matplotlib.backends.backend_pgf.get_fontspec()[source]

    
Build fontspec preamble from rc.

matplotlib.backends.backend_pgf.get_preamble()[source]

    
Get LaTeX preamble from rc.

matplotlib.backends.backend_pgf.make_pdf_to_png_converter()[source]

    
Return a function that converts a pdf file to a png file.

matplotlib.backends.backend_pgf.writeln(fh, line)[source]

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/backend_pgf_api.html

