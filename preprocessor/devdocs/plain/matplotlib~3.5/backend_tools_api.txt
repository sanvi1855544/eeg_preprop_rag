# matplotlib.backend_tools

Abstract base classes define the primitives for Tools. These tools are used by
`matplotlib.backend_managers.ToolManager`

`ToolBase`

    
Simple stateless tool

`ToolToggleBase`

    
Tool that has two states, only one Toggle tool can be active at any given time
for the same `matplotlib.backend_managers.ToolManager`

classmatplotlib.backend_tools.AxisScaleBase(*args, **kwargs)[source]

    
Bases: `matplotlib.backend_tools.ToolToggleBase`

Base Tool to toggle between linear and logarithmic.

disable(event)[source]

    
Disable the toggle tool.

`trigger` call this method when `toggled` is True.

This can happen in different circumstances.

  * Click on the toolbar tool button.
  * Call to `matplotlib.backend_managers.ToolManager.trigger_tool`.
  * Another `ToolToggleBase` derived tool is triggered (from the same `ToolManager`).

enable(event)[source]

    
Enable the toggle tool.

`trigger` calls this method when `toggled` is False.

trigger(sender, event, data=None)[source]

    
Calls `enable` or `disable` based on `toggled` value.

classmatplotlib.backend_tools.ConfigureSubplotsBase(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Base tool for the configuration of subplots.

description='Configure subplots'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

image='subplots'

    
Filename of the image.

`str`: Filename of the image to use in a Toolbar. If None, the name is used as
a label in the toolbar button.

classmatplotlib.backend_tools.Cursors(value)[source]

    
Bases: `enum.IntEnum`

Backend-independent cursor types.

HAND=2[source]

MOVE=4[source]

POINTER=1[source]

RESIZE_HORIZONTAL=6[source]

RESIZE_VERTICAL=7[source]

SELECT_REGION=3[source]

WAIT=5[source]

classmatplotlib.backend_tools.RubberbandBase(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Draw and remove a rubberband.

draw_rubberband(*data)[source]

    
Draw rubberband.

This method must get implemented per backend.

remove_rubberband()[source]

    
Remove rubberband.

This method should get implemented per backend.

trigger(sender, event, data)[source]

    
Call `draw_rubberband` or `remove_rubberband` based on data.

classmatplotlib.backend_tools.SaveFigureBase(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Base tool for figure saving.

default_keymap=['s', 'ctrl+s']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Save the figure'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

image='filesave'

    
Filename of the image.

`str`: Filename of the image to use in a Toolbar. If None, the name is used as
a label in the toolbar button.

classmatplotlib.backend_tools.SetCursorBase(*args, **kwargs)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Change to the current cursor while inaxes.

This tool, keeps track of all `ToolToggleBase` derived tools, and calls
`set_cursor` when a tool gets triggered.

set_cursor(cursor)[source]

    
[Deprecated] Set the cursor.

#### Notes

Deprecated since version 3.5.

set_figure(figure)[source]

classmatplotlib.backend_tools.ToolBack(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ViewsPositionsBase`

Move back up the view limits stack.

default_keymap=['left', 'c', 'backspace', 'MouseButton.BACK']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Back to previous view'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

image='back'

    
Filename of the image.

`str`: Filename of the image to use in a Toolbar. If None, the name is used as
a label in the toolbar button.

classmatplotlib.backend_tools.ToolBase(toolmanager, name)[source]

    
Bases: `object`

Base tool class.

A base tool, only implements `trigger` method or no method at all. The tool is
instantiated by `matplotlib.backend_managers.ToolManager`.

propertycanvas

    
The canvas of the figure affected by this tool, or None.

default_keymap=None

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description=None

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

destroy()[source]

    
Destroy the tool.

This method is called by `ToolManager.remove_tool`.

propertyfigure

    
The Figure affected by this tool, or None.

image=None

    
Filename of the image.

`str`: Filename of the image to use in a Toolbar. If None, the name is used as
a label in the toolbar button.

propertyname

    
The tool id (str, must be unique among tools of a tool manager).

set_figure(figure)[source]

propertytoolmanager

    
The `ToolManager` that controls this tool.

trigger(sender, event, data=None)[source]

    
Called when this tool gets used.

This method is called by `ToolManager.trigger_tool`.

Parameters

    
event`Event`

    
The canvas event that caused this tool to be called.

senderobject

    
Object that requested the tool to be triggered.

dataobject

    
Extra data.

matplotlib.backend_tools.ToolCopyToClipboard[source]

    
alias of `matplotlib.backend_tools.ToolCopyToClipboardBase`

classmatplotlib.backend_tools.ToolCopyToClipboardBase(toolmanager,
name)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Tool to copy the figure to the clipboard.

default_keymap=['ctrl+c', 'cmd+c']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Copy the canvas figure to clipboard'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

trigger(*args, **kwargs)[source]

    
Called when this tool gets used.

This method is called by `ToolManager.trigger_tool`.

Parameters

    
event`Event`

    
The canvas event that caused this tool to be called.

senderobject

    
Object that requested the tool to be triggered.

dataobject

    
Extra data.

classmatplotlib.backend_tools.ToolCursorPosition(*args, **kwargs)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Send message with the current pointer position.

This tool runs in the background reporting the position of the cursor.

send_message(event)[source]

    
Call `matplotlib.backend_managers.ToolManager.message_event`.

set_figure(figure)[source]

classmatplotlib.backend_tools.ToolForward(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ViewsPositionsBase`

Move forward in the view lim stack.

default_keymap=['right', 'v', 'MouseButton.FORWARD']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Forward to next view'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

image='forward'

    
Filename of the image.

`str`: Filename of the image to use in a Toolbar. If None, the name is used as
a label in the toolbar button.

classmatplotlib.backend_tools.ToolFullScreen(*args, **kwargs)[source]

    
Bases: `matplotlib.backend_tools.ToolToggleBase`

Tool to toggle full screen.

default_keymap=['f', 'ctrl+f']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Toggle fullscreen mode'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

disable(event)[source]

    
Disable the toggle tool.

`trigger` call this method when `toggled` is True.

This can happen in different circumstances.

  * Click on the toolbar tool button.
  * Call to `matplotlib.backend_managers.ToolManager.trigger_tool`.
  * Another `ToolToggleBase` derived tool is triggered (from the same `ToolManager`).

enable(event)[source]

    
Enable the toggle tool.

`trigger` calls this method when `toggled` is False.

classmatplotlib.backend_tools.ToolGrid(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Tool to toggle the major grids of the figure.

default_keymap=['g']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Toggle major grids'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

trigger(sender, event, data=None)[source]

    
Called when this tool gets used.

This method is called by `ToolManager.trigger_tool`.

Parameters

    
event`Event`

    
The canvas event that caused this tool to be called.

senderobject

    
Object that requested the tool to be triggered.

dataobject

    
Extra data.

classmatplotlib.backend_tools.ToolHelpBase(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

default_keymap=['f1']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Print tool list, shortcuts and description'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

staticformat_shortcut(key_sequence)[source]

    
Convert a shortcut string from the notation used in rc config to the standard
notation for displaying shortcuts, e.g. 'ctrl+a' -> 'Ctrl+A'.

image='help'

    
Filename of the image.

`str`: Filename of the image to use in a Toolbar. If None, the name is used as
a label in the toolbar button.

classmatplotlib.backend_tools.ToolHome(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ViewsPositionsBase`

Restore the original view limits.

default_keymap=['h', 'r', 'home']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Reset original view'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

image='home'

    
Filename of the image.

`str`: Filename of the image to use in a Toolbar. If None, the name is used as
a label in the toolbar button.

classmatplotlib.backend_tools.ToolMinorGrid(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Tool to toggle the major and minor grids of the figure.

default_keymap=['G']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Toggle major and minor grids'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

trigger(sender, event, data=None)[source]

    
Called when this tool gets used.

This method is called by `ToolManager.trigger_tool`.

Parameters

    
event`Event`

    
The canvas event that caused this tool to be called.

senderobject

    
Object that requested the tool to be triggered.

dataobject

    
Extra data.

classmatplotlib.backend_tools.ToolPan(*args)[source]

    
Bases: `matplotlib.backend_tools.ZoomPanBase`

Pan axes with left mouse, zoom with right.

cursor=4[source]

    
Cursor to use when the tool is active.

default_keymap=['p']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Pan axes with left mouse, zoom with right'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

image='move'

    
Filename of the image.

`str`: Filename of the image to use in a Toolbar. If None, the name is used as
a label in the toolbar button.

radio_group='default'

    
Attribute to group 'radio' like tools (mutually exclusive).

`str` that identifies the group or None if not belonging to a group.

classmatplotlib.backend_tools.ToolQuit(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Tool to call the figure manager destroy method.

default_keymap=['ctrl+w', 'cmd+w', 'q']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Quit the figure'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

trigger(sender, event, data=None)[source]

    
Called when this tool gets used.

This method is called by `ToolManager.trigger_tool`.

Parameters

    
event`Event`

    
The canvas event that caused this tool to be called.

senderobject

    
Object that requested the tool to be triggered.

dataobject

    
Extra data.

classmatplotlib.backend_tools.ToolQuitAll(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Tool to call the figure manager destroy method.

default_keymap=[]

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Quit all figures'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

trigger(sender, event, data=None)[source]

    
Called when this tool gets used.

This method is called by `ToolManager.trigger_tool`.

Parameters

    
event`Event`

    
The canvas event that caused this tool to be called.

senderobject

    
Object that requested the tool to be triggered.

dataobject

    
Extra data.

matplotlib.backend_tools.ToolSetCursor[source]

    
alias of `matplotlib.backend_tools.SetCursorBase`

classmatplotlib.backend_tools.ToolToggleBase(*args, **kwargs)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Toggleable tool.

Every time it is triggered, it switches between enable and disable.

Parameters

    
``*args``

    
Variable length argument to be used by the Tool.

``**kwargs``

    
`toggled` if present and True, sets the initial state of the Tool Arbitrary
keyword arguments to be consumed by the Tool

cursor=None

    
Cursor to use when the tool is active.

default_toggled=False

    
Default of toggled state.

disable(event=None)[source]

    
Disable the toggle tool.

`trigger` call this method when `toggled` is True.

This can happen in different circumstances.

  * Click on the toolbar tool button.
  * Call to `matplotlib.backend_managers.ToolManager.trigger_tool`.
  * Another `ToolToggleBase` derived tool is triggered (from the same `ToolManager`).

enable(event=None)[source]

    
Enable the toggle tool.

`trigger` calls this method when `toggled` is False.

radio_group=None

    
Attribute to group 'radio' like tools (mutually exclusive).

`str` that identifies the group or None if not belonging to a group.

set_figure(figure)[source]

propertytoggled

    
State of the toggled tool.

trigger(sender, event, data=None)[source]

    
Calls `enable` or `disable` based on `toggled` value.

classmatplotlib.backend_tools.ToolViewsPositions(*args, **kwargs)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Auxiliary Tool to handle changes in views and positions.

Runs in the background and should get used by all the tools that need to
access the figure's history of views and positions, e.g.

  * `ToolZoom`
  * `ToolPan`
  * `ToolHome`
  * `ToolBack`
  * `ToolForward`

add_figure(figure)[source]

    
Add the current figure to the stack of views and positions.

back()[source]

    
Back one step in the stack of views and positions.

clear(figure)[source]

    
Reset the axes stack.

forward()[source]

    
Forward one step in the stack of views and positions.

home()[source]

    
Recall the first view and position from the stack.

push_current(figure=None)[source]

    
Push the current view limits and position onto their respective stacks.

update_home_views(figure=None)[source]

    
Make sure that `self.home_views` has an entry for all axes present in the
figure.

update_view()[source]

    
Update the view limits and position for each axes from the current stack
position. If any axes are present in the figure that aren't in the current
stack position, use the home view limits for those axes and don't update any
positions.

classmatplotlib.backend_tools.ToolXScale(*args, **kwargs)[source]

    
Bases: `matplotlib.backend_tools.AxisScaleBase`

Tool to toggle between linear and logarithmic scales on the X axis.

default_keymap=['k', 'L']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Toggle scale X axis'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

set_scale(ax, scale)[source]

classmatplotlib.backend_tools.ToolYScale(*args, **kwargs)[source]

    
Bases: `matplotlib.backend_tools.AxisScaleBase`

Tool to toggle between linear and logarithmic scales on the Y axis.

default_keymap=['l']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Toggle scale Y axis'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

set_scale(ax, scale)[source]

classmatplotlib.backend_tools.ToolZoom(*args)[source]

    
Bases: `matplotlib.backend_tools.ZoomPanBase`

A Tool for zooming using a rectangle selector.

cursor=3[source]

    
Cursor to use when the tool is active.

default_keymap=['o']

    
Keymap to associate with this tool.

`list[str]`: List of keys that will trigger this tool when a keypress event is
emitted on `self.figure.canvas`.

description='Zoom to rectangle'

    
Description of the Tool.

`str`: Tooltip used if the Tool is included in a Toolbar.

image='zoom_to_rect'

    
Filename of the image.

`str`: Filename of the image to use in a Toolbar. If None, the name is used as
a label in the toolbar button.

radio_group='default'

    
Attribute to group 'radio' like tools (mutually exclusive).

`str` that identifies the group or None if not belonging to a group.

classmatplotlib.backend_tools.ViewsPositionsBase(toolmanager, name)[source]

    
Bases: `matplotlib.backend_tools.ToolBase`

Base class for `ToolHome`, `ToolBack` and `ToolForward`.

trigger(sender, event, data=None)[source]

    
Called when this tool gets used.

This method is called by `ToolManager.trigger_tool`.

Parameters

    
event`Event`

    
The canvas event that caused this tool to be called.

senderobject

    
Object that requested the tool to be triggered.

dataobject

    
Extra data.

classmatplotlib.backend_tools.ZoomPanBase(*args)[source]

    
Bases: `matplotlib.backend_tools.ToolToggleBase`

Base class for `ToolZoom` and `ToolPan`.

disable(event)[source]

    
Release the canvas and disconnect press/release events.

enable(event)[source]

    
Connect press/release events and lock the canvas.

scroll_zoom(event)[source]

trigger(sender, event, data=None)[source]

    
Calls `enable` or `disable` based on `toggled` value.

matplotlib.backend_tools.add_tools_to_container(container,
tools=[['navigation', ['home', 'back', 'forward']], ['zoompan', ['pan',
'zoom', 'subplots']], ['io', ['save', 'help']]])[source]

    
Add multiple tools to the container.

Parameters

    
containerContainer

    
`backend_bases.ToolContainerBase` object that will get the tools added.

toolslist, optional

    
List in the form `[[group1, [tool1, tool2 ...]], [group2, [...]]]` where the
tools `[tool1, tool2, ...]` will display in group1. See `add_tool` for
details.

matplotlib.backend_tools.add_tools_to_manager(toolmanager, tools={'back':
<class 'matplotlib.backend_tools.ToolBack'>, 'copy': 'ToolCopyToClipboard',
'cursor': 'ToolSetCursor', 'forward': <class
'matplotlib.backend_tools.ToolForward'>, 'fullscreen': <class
'matplotlib.backend_tools.ToolFullScreen'>, 'grid': <class
'matplotlib.backend_tools.ToolGrid'>, 'grid_minor': <class
'matplotlib.backend_tools.ToolMinorGrid'>, 'help': 'ToolHelp', 'home': <class
'matplotlib.backend_tools.ToolHome'>, 'pan': <class
'matplotlib.backend_tools.ToolPan'>, 'position': <class
'matplotlib.backend_tools.ToolCursorPosition'>, 'quit': <class
'matplotlib.backend_tools.ToolQuit'>, 'quit_all': <class
'matplotlib.backend_tools.ToolQuitAll'>, 'rubberband': 'ToolRubberband',
'save': 'ToolSaveFigure', 'subplots': 'ToolConfigureSubplots', 'viewpos':
<class 'matplotlib.backend_tools.ToolViewsPositions'>, 'xscale': <class
'matplotlib.backend_tools.ToolXScale'>, 'yscale': <class
'matplotlib.backend_tools.ToolYScale'>, 'zoom': <class
'matplotlib.backend_tools.ToolZoom'>})[source]

    
Add multiple tools to a `ToolManager`.

Parameters

    
toolmanager`backend_managers.ToolManager`

    
Manager to which the tools are added.

tools{str: class_like}, optional

    
The tools to add in a {name: tool} dict, see `add_tool` for more info.

matplotlib.backend_tools.cursors[source]

    
alias of `matplotlib.backend_tools.Cursors`

matplotlib.backend_tools.default_toolbar_tools=[['navigation', ['home',
'back', 'forward']], ['zoompan', ['pan', 'zoom', 'subplots']], ['io', ['save',
'help']]]

    
Default tools in the toolbar

matplotlib.backend_tools.default_tools={'back': <class
'matplotlib.backend_tools.ToolBack'>, 'copy': 'ToolCopyToClipboard', 'cursor':
'ToolSetCursor', 'forward': <class 'matplotlib.backend_tools.ToolForward'>,
'fullscreen': <class 'matplotlib.backend_tools.ToolFullScreen'>, 'grid':
<class 'matplotlib.backend_tools.ToolGrid'>, 'grid_minor': <class
'matplotlib.backend_tools.ToolMinorGrid'>, 'help': 'ToolHelp', 'home': <class
'matplotlib.backend_tools.ToolHome'>, 'pan': <class
'matplotlib.backend_tools.ToolPan'>, 'position': <class
'matplotlib.backend_tools.ToolCursorPosition'>, 'quit': <class
'matplotlib.backend_tools.ToolQuit'>, 'quit_all': <class
'matplotlib.backend_tools.ToolQuitAll'>, 'rubberband': 'ToolRubberband',
'save': 'ToolSaveFigure', 'subplots': 'ToolConfigureSubplots', 'viewpos':
<class 'matplotlib.backend_tools.ToolViewsPositions'>, 'xscale': <class
'matplotlib.backend_tools.ToolXScale'>, 'yscale': <class
'matplotlib.backend_tools.ToolYScale'>, 'zoom': <class
'matplotlib.backend_tools.ToolZoom'>}

    
Default tools

© 2012–2021 Matplotlib Development Team. All rights reserved.  
Licensed under the Matplotlib License Agreement.  
https://matplotlib.org/3.5.1/api/backend_tools_api.html

