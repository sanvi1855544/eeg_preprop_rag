# Using Django

Introductions to all the key parts of Django you’ll need to know:

  * How to install Django
    * Install Python
    * Install Apache and `mod_wsgi`
    * Get your database running
    * Install the Django code
  * Models and databases
    * Models
    * Making queries
    * Aggregation
    * Search
    * Managers
    * Performing raw SQL queries
    * Database transactions
    * Multiple databases
    * Tablespaces
    * Database access optimization
    * Database instrumentation
    * Examples of model relationship API usage
  * Handling HTTP requests
    * URL dispatcher
    * Writing views
    * View decorators
    * File Uploads
    * Django shortcut functions
    * Generic views
    * Middleware
    * How to use sessions
  * Working with forms
    * HTML forms
    * Django’s role in forms
    * Forms in Django
    * Building a form
    * More about Django `Form` classes
    * Working with form templates
    * Further topics
  * Templates
    * The Django template language
    * Support for template engines
  * Class-based views
    * Introduction to class-based views
    * Built-in class-based generic views
    * Form handling with class-based views
    * Using mixins with class-based views
    * Basic examples
    * Usage in your URLconf
    * Subclassing generic views
  * Migrations
    * The Commands
    * Backend Support
    * Workflow
    * Transactions
    * Dependencies
    * Migration files
    * Adding migrations to apps
    * Reversing migrations
    * Historical models
    * Considerations when removing model fields
    * Data Migrations
    * Squashing migrations
    * Serializing values
    * Supporting multiple Django versions
  * Managing files
    * Using files in models
    * The `File` object
    * File storage
  * Testing in Django
    * Writing and running tests
    * Testing tools
    * Advanced testing topics
  * User authentication in Django
    * Overview
    * Installation
    * Usage
  * Django’s cache framework
    * Setting up the cache
    * The per-site cache
    * The per-view cache
    * Template fragment caching
    * The low-level cache API
    * Asynchronous support
    * Downstream caches
    * Using `Vary` headers
    * Controlling cache: Using other headers
    * Order of `MIDDLEWARE`
  * Conditional View Processing
    * The `condition` decorator
    * Shortcuts for only computing one value
    * Using the decorators with other HTTP methods
    * Comparison with middleware conditional processing
  * Cryptographic signing
    * Protecting the `SECRET_KEY`
    * Using the low-level API
  * Sending email
    * Quick example
    * `send_mail()`
    * `send_mass_mail()`
    * `mail_admins()`
    * `mail_managers()`
    * Examples
    * Preventing header injection
    * The `EmailMessage` class
    * Email backends
    * Configuring email for development
  * Internationalization and localization
    * Overview
    * Definitions
  * Logging
    * Overview
    * Security implications
    * Configuring logging
  * Pagination
    * The `Paginator` class
    * Example
    * Paginating a `ListView`
    * Using `Paginator` in a view function
  * Security in Django
    * Cross site scripting (XSS) protection
    * Cross site request forgery (CSRF) protection
    * SQL injection protection
    * Clickjacking protection
    * SSL/HTTPS
    * Host header validation
    * Referrer policy
    * Cross-origin opener policy
    * Session security
    * User-uploaded content
    * Additional security topics
  * Performance and optimization
    * Introduction
    * General approaches
    * Caching
    * Understanding laziness
    * Databases
    * HTTP performance
    * Template performance
    * Using different versions of available software
  * Serializing Django objects
    * Serializing data
    * Deserializing data
    * Serialization formats
    * Natural keys
  * Django settings
    * The basics
    * Designating the settings
    * Default settings
    * Using settings in Python code
    * Altering settings at runtime
    * Security
    * Available settings
    * Creating your own settings
    * Using settings without setting `DJANGO_SETTINGS_MODULE`
  * Signals
    * Listening to signals
    * Defining and sending signals
    * Disconnecting signals
  * System check framework
    * Writing your own checks
  * External packages
    * Localflavor
    * Comments
    * Formtools
  * Asynchronous support
    * Async views
    * Async safety
    * Async adapter functions

© Django Software Foundation and individual contributors  
Licensed under the BSD License.  
https://docs.djangoproject.com/en/4.0/topics/index/

  *[ISP]: Internet Service Provider

