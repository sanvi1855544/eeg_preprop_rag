# Django Exceptions

Django raises some of its own exceptions as well as standard Python
exceptions.

## Django Core Exceptions

Django core exception classes are defined in `django.core.exceptions`.

### `AppRegistryNotReady`

`exception AppRegistryNotReady` [source]

    
This exception is raised when attempting to use models before the app loading
process, which initializes the ORM, is complete.

### `ObjectDoesNotExist`

`exception ObjectDoesNotExist` [source]

    
The base class for `Model.DoesNotExist` exceptions. A `try/except` for
`ObjectDoesNotExist` will catch `DoesNotExist` exceptions for all models.

See `get()`.

### `EmptyResultSet`

`exception EmptyResultSet` [source]

    
`EmptyResultSet` may be raised during query generation if a query won’t return
any results. Most Django projects won’t encounter this exception, but it might
be useful for implementing custom lookups and expressions.

### `FieldDoesNotExist`

`exception FieldDoesNotExist` [source]

    
The `FieldDoesNotExist` exception is raised by a model’s `_meta.get_field()`
method when the requested field does not exist on the model or on the model’s
parents.

### `MultipleObjectsReturned`

`exception MultipleObjectsReturned` [source]

    
The base class for `Model.MultipleObjectsReturned` exceptions. A `try/except`
for `MultipleObjectsReturned` will catch `MultipleObjectsReturned` exceptions
for all models.

See `get()`.

### `SuspiciousOperation`

`exception SuspiciousOperation` [source]

    
The `SuspiciousOperation` exception is raised when a user has performed an
operation that should be considered suspicious from a security perspective,
such as tampering with a session cookie. Subclasses of `SuspiciousOperation`
include:

  * `DisallowedHost`
  * `DisallowedModelAdminLookup`
  * `DisallowedModelAdminToField`
  * `DisallowedRedirect`
  * `InvalidSessionKey`
  * `RequestDataTooBig`
  * `SuspiciousFileOperation`
  * `SuspiciousMultipartForm`
  * `SuspiciousSession`
  * `TooManyFieldsSent`

If a `SuspiciousOperation` exception reaches the ASGI/WSGI handler level it is
logged at the `Error` level and results in a `HttpResponseBadRequest`. See the
logging documentation for more information.

### `PermissionDenied`

`exception PermissionDenied` [source]

    
The `PermissionDenied` exception is raised when a user does not have
permission to perform the action requested.

### `ViewDoesNotExist`

`exception ViewDoesNotExist` [source]

    
The `ViewDoesNotExist` exception is raised by `django.urls` when a requested
view does not exist.

### `MiddlewareNotUsed`

`exception MiddlewareNotUsed` [source]

    
The `MiddlewareNotUsed` exception is raised when a middleware is not used in
the server configuration.

### `ImproperlyConfigured`

`exception ImproperlyConfigured` [source]

    
The `ImproperlyConfigured` exception is raised when Django is somehow
improperly configured – for example, if a value in `settings.py` is incorrect
or unparseable.

### `FieldError`

`exception FieldError` [source]

    
The `FieldError` exception is raised when there is a problem with a model
field. This can happen for several reasons:

  * A field in a model clashes with a field of the same name from an abstract base class
  * An infinite loop is caused by ordering
  * A keyword cannot be parsed from the filter parameters
  * A field cannot be determined from a keyword in the query parameters
  * A join is not permitted on the specified field
  * A field name is invalid
  * A query contains invalid order_by arguments

### `ValidationError`

`exception ValidationError` [source]

    
The `ValidationError` exception is raised when data fails form or model field
validation. For more information about validation, see Form and Field
Validation, Model Field Validation and the Validator Reference.

#### `NON_FIELD_ERRORS`

`NON_FIELD_ERRORS`

`ValidationError`s that don’t belong to a particular field in a form or model
are classified as `NON_FIELD_ERRORS`. This constant is used as a key in
dictionaries that otherwise map fields to their respective list of errors.

### `BadRequest`

`exception BadRequest` [source]

    
New in Django 3.2.

The `BadRequest` exception is raised when the request cannot be processed due
to a client error. If a `BadRequest` exception reaches the ASGI/WSGI handler
level it results in a `HttpResponseBadRequest`.

### `RequestAborted`

`exception RequestAborted` [source]

    
The `RequestAborted` exception is raised when an HTTP body being read in by
the handler is cut off midstream and the client connection closes, or when the
client does not send data and hits a timeout where the server closes the
connection.

It is internal to the HTTP handler modules and you are unlikely to see it
elsewhere. If you are modifying HTTP handling code, you should raise this when
you encounter an aborted request to make sure the socket is closed cleanly.

### `SynchronousOnlyOperation`

`exception SynchronousOnlyOperation` [source]

    
The `SynchronousOnlyOperation` exception is raised when code that is only
allowed in synchronous Python code is called from an asynchronous context (a
thread with a running asynchronous event loop). These parts of Django are
generally heavily reliant on thread-safety to function and don’t work
correctly under coroutines sharing the same thread.

If you are trying to call code that is synchronous-only from an asynchronous
thread, then create a synchronous thread and call it in that. You can
accomplish this is with `asgiref.sync.sync_to_async()`.

## URL Resolver exceptions

URL Resolver exceptions are defined in `django.urls`.

### `Resolver404`

`exception Resolver404`

    
The `Resolver404` exception is raised by `resolve()` if the path passed to
`resolve()` doesn’t map to a view. It’s a subclass of `django.http.Http404`.

### `NoReverseMatch`

`exception NoReverseMatch`

    
The `NoReverseMatch` exception is raised by `django.urls` when a matching URL
in your URLconf cannot be identified based on the parameters supplied.

## Database Exceptions

Database exceptions may be imported from `django.db`.

Django wraps the standard database exceptions so that your Django code has a
guaranteed common implementation of these classes.

`exception Error`

`exception InterfaceError`

`exception DatabaseError`

`exception DataError`

`exception OperationalError`

`exception IntegrityError`

`exception InternalError`

`exception ProgrammingError`

`exception NotSupportedError`

The Django wrappers for database exceptions behave exactly the same as the
underlying database exceptions. See PEP 249, the Python Database API
Specification v2.0, for further information.

As per PEP 3134, a `__cause__` attribute is set with the original (underlying)
database exception, allowing access to any additional information provided.

`exception models.ProtectedError`

Raised to prevent deletion of referenced objects when using
`django.db.models.PROTECT`. `models.ProtectedError` is a subclass of
`IntegrityError`.

`exception models.RestrictedError`

Raised to prevent deletion of referenced objects when using
`django.db.models.RESTRICT`. `models.RestrictedError` is a subclass of
`IntegrityError`.

## HTTP Exceptions

HTTP exceptions may be imported from `django.http`.

### `UnreadablePostError`

`exception UnreadablePostError`

    
`UnreadablePostError` is raised when a user cancels an upload.

## Sessions Exceptions

Sessions exceptions are defined in `django.contrib.sessions.exceptions`.

### `SessionInterrupted`

`exception SessionInterrupted` [source]

    
New in Django 3.2.

`SessionInterrupted` is raised when a session is destroyed in a concurrent
request. It’s a subclass of `BadRequest`.

## Transaction Exceptions

Transaction exceptions are defined in `django.db.transaction`.

### `TransactionManagementError`

`exception TransactionManagementError`

    
`TransactionManagementError` is raised for any and all problems related to
database transactions.

## Testing Framework Exceptions

Exceptions provided by the `django.test` package.

### `RedirectCycleError`

`exception client.RedirectCycleError`

    
`RedirectCycleError` is raised when the test client detects a loop or an
overly long chain of redirects.

## Python Exceptions

Django raises built-in Python exceptions when appropriate as well. See the
Python documentation for further information on the Built-in Exceptions.

© Django Software Foundation and individual contributors  
Licensed under the BSD License.  
https://docs.djangoproject.com/en/4.0/ref/exceptions/

  *[ISP]: Internet Service Provider

