# Installing Geospatial libraries

GeoDjango uses and/or provides interfaces for the following open source
geospatial libraries:

Program | Description | Required | Supported Versions  
---|---|---|---  
GEOS | Geometry Engine Open Source | Yes | 3.10, 3.9, 3.8, 3.7, 3.6  
PROJ | Cartographic Projections library | Yes (PostgreSQL and SQLite only) | 8.x, 7.x, 6.x, 5.x, 4.x  
GDAL | Geospatial Data Abstraction Library | Yes | 3.3, 3.2, 3.1, 3.0, 2.4, 2.3, 2.2, 2.1  
GeoIP | IP-based geolocation library | No | 2  
PostGIS | Spatial extensions for PostgreSQL | Yes (PostgreSQL only) | 3.1, 3.0, 2.5, 2.4  
SpatiaLite | Spatial extensions for SQLite | Yes (SQLite only) | 5.0, 4.3  
Note that older or more recent versions of these libraries may also work
totally fine with GeoDjango. Your mileage may vary.

Note

The GeoDjango interfaces to GEOS, GDAL, and GeoIP may be used independently of
Django. In other words, no database or settings file required – import them as
normal from `django.contrib.gis`.

On Debian/Ubuntu, you are advised to install the following packages which will
install, directly or by dependency, the required geospatial libraries:

    
    $ sudo apt-get install binutils libproj-dev gdal-bin
    
Please also consult platform-specific instructions if you are on macOS or
Windows.

## Building from source

When installing from source on UNIX and GNU/Linux systems, please follow the
installation instructions carefully, and install the libraries in the given
order. If using MySQL or Oracle as the spatial database, only GEOS is
required.

Note

On Linux platforms, it may be necessary to run the `ldconfig` command after
installing each library. For example:

    
    $ sudo make install
    $ sudo ldconfig
    
Note

macOS users must install Xcode in order to compile software from source.

### GEOS

GEOS is a C++ library for performing geometric operations, and is the default
internal geometry representation used by GeoDjango (it’s behind the “lazy”
geometries). Specifically, the C API library is called (e.g., `libgeos_c.so`)
directly from Python using ctypes.

First, download GEOS from the GEOS website and untar the source archive:

    
    $ wget https://download.osgeo.org/geos/geos-X.Y.Z.tar.bz2
    $ tar xjf geos-X.Y.Z.tar.bz2
    
Next, change into the directory where GEOS was unpacked, run the configure
script, compile, and install:

    
    $ cd geos-X.Y.Z
    $ ./configure
    $ make
    $ sudo make install
    $ cd ..
    
#### Troubleshooting

##### Can’t find GEOS library

When GeoDjango can’t find GEOS, this error is raised:

    
    ImportError: Could not find the GEOS library (tried "geos_c"). Try setting GEOS_LIBRARY_PATH in your settings.
    
The most common solution is to properly configure your Library environment
settings or set GEOS_LIBRARY_PATH in your settings.

If using a binary package of GEOS (e.g., on Ubuntu), you may need to Install
binutils.

##### `GEOS_LIBRARY_PATH`

If your GEOS library is in a non-standard location, or you don’t want to
modify the system’s library path then the `GEOS_LIBRARY_PATH` setting may be
added to your Django settings file with the full path to the GEOS C library.
For example:

    
    GEOS_LIBRARY_PATH = '/home/bob/local/lib/libgeos_c.so'
    
Note

The setting must be the full path to the C shared library; in other words you
want to use `libgeos_c.so`, not `libgeos.so`.

See also My logs are filled with GEOS-related errors.

### PROJ

PROJ is a library for converting geospatial data to different coordinate
reference systems.

First, download the PROJ source code:

    
    $ wget https://download.osgeo.org/proj/proj-X.Y.Z.tar.gz
    
… and datum shifting files (download `proj-datumgrid-X.Y.tar.gz` for PROJ <
7.x) [1]:

    
    $ wget https://download.osgeo.org/proj/proj-data-X.Y.tar.gz
    
Next, untar the source code archive, and extract the datum shifting files in
the `data` subdirectory (use `nad` subdirectory for PROJ < 6.x). This must be
done prior to configuration:

    
    $ tar xzf proj-X.Y.Z.tar.gz
    $ cd proj-X.Y.Z/data
    $ tar xzf ../../proj-data-X.Y.tar.gz
    $ cd ..
    
Finally, configure, make and install PROJ:

    
    $ ./configure
    $ make
    $ sudo make install
    $ cd ..
    
### GDAL

GDAL is an excellent open source geospatial library that has support for
reading most vector and raster spatial data formats. Currently, GeoDjango only
supports GDAL’s vector data capabilities [2]. GEOS and PROJ should be
installed prior to building GDAL.

First download the latest GDAL release version and untar the archive:

    
    $ wget https://download.osgeo.org/gdal/X.Y.Z/gdal-X.Y.Z.tar.gz
    $ tar xzf gdal-X.Y.Z.tar.gz
    $ cd gdal-X.Y.Z
    
Configure, make and install:

    
    $ ./configure
    $ make # Go get some coffee, this takes a while.
    $ sudo make install
    $ cd ..
    
Note

Because GeoDjango has its own Python interface, the preceding instructions do
not build GDAL’s own Python bindings. The bindings may be built by adding the
`--with-python` flag when running `configure`. See GDAL/OGR In Python for more
information on GDAL’s bindings.

If you have any problems, please see the troubleshooting section below for
suggestions and solutions.

#### Troubleshooting

##### Can’t find GDAL library

When GeoDjango can’t find the GDAL library, configure your Library environment
settings or set GDAL_LIBRARY_PATH in your settings.

##### `GDAL_LIBRARY_PATH`

If your GDAL library is in a non-standard location, or you don’t want to
modify the system’s library path then the `GDAL_LIBRARY_PATH` setting may be
added to your Django settings file with the full path to the GDAL library. For
example:

    
    GDAL_LIBRARY_PATH = '/home/sue/local/lib/libgdal.so'
    
#### Footnotes

[1] | The datum shifting files are needed for converting data to and from certain projections. For example, the PROJ string for the Google projection (900913 or 3857) requires the `null` grid file only included in the extra datum shifting files. It is easier to install the shifting files now, then to have debug a problem caused by their absence later.  
---|---  
[2] | Specifically, GeoDjango provides support for the OGR library, a component of GDAL.  
---|---  
© Django Software Foundation and individual contributors  
Licensed under the BSD License.  
https://docs.djangoproject.com/en/4.0/ref/contrib/gis/install/geolibs/

  *[ISP]: Internet Service Provider

