# Installing PostGIS

PostGIS adds geographic object support to PostgreSQL, turning it into a
spatial database. GEOS, PROJ and GDAL should be installed prior to building
PostGIS. You might also need additional libraries, see PostGIS requirements.

The psycopg2 module is required for use as the database adapter when using
GeoDjango with PostGIS.

On Debian/Ubuntu, you are advised to install the following packages:
postgresql-x.x, postgresql-x.x-postgis, postgresql-server-dev-x.x, python-
psycopg2 (x.x matching the PostgreSQL version you want to install).
Alternately, you can build from source. Consult the platform-specific
instructions if you are on macOS or Windows.

## Post-installation

### Creating a spatial database

PostGIS 2 includes an extension for PostgreSQL that’s used to enable spatial
functionality:

    
    $ createdb  <db name>
    $ psql <db name>
    > CREATE EXTENSION postgis;
    
The database user must be a superuser in order to run `CREATE EXTENSION
postgis;`. The command is run during the `migrate` process. An alternative is
to use a migration operation in your project:

    
    from django.contrib.postgres.operations import CreateExtension
    from django.db import migrations
    
    class Migration(migrations.Migration):
    
        operations = [
            CreateExtension('postgis'),
            ...
        ]
    
If you plan to use PostGIS raster functionality on PostGIS 3+, you should also
activate the `postgis_raster` extension. You can install the extension using
the `CreateExtension` migration operation, or directly by running `CREATE
EXTENSION postgis_raster;`.

GeoDjango does not currently leverage any PostGIS topology functionality. If
you plan to use those features at some point, you can also install the
`postgis_topology` extension by issuing `CREATE EXTENSION postgis_topology;`.

### Managing the database

To administer the database, you can either use the pgAdmin III program (Start
‣ PostgreSQL X ‣ pgAdmin III) or the SQL Shell (Start ‣ PostgreSQL X ‣ SQL
Shell). For example, to create a `geodjango` spatial database and user, the
following may be executed from the SQL Shell as the `postgres` user:

    
    postgres# CREATE USER geodjango PASSWORD 'my_passwd';
    postgres# CREATE DATABASE geodjango OWNER geodjango;
    
© Django Software Foundation and individual contributors  
Licensed under the BSD License.  
https://docs.djangoproject.com/en/4.0/ref/contrib/gis/install/postgis/

  *[ISP]: Internet Service Provider

