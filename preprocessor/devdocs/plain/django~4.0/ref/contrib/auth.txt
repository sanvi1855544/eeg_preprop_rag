# django.contrib.auth

This document provides API reference material for the components of Django’s
authentication system. For more details on the usage of these components or
how to customize authentication and authorization see the authentication topic
guide.

##  `User` model

`class models.User`

### Fields

`class models.User`

    
`User` objects have the following fields:

`username`

    
Required. 150 characters or fewer. Usernames may contain alphanumeric, `_`,
`@`, `+`, `.` and `-` characters.

The `max_length` should be sufficient for many use cases. If you need a longer
length, please use a custom user model. If you use MySQL with the `utf8mb4`
encoding (recommended for proper Unicode support), specify at most
`max_length=191` because MySQL can only create unique indexes with 191
characters in that case by default.

`first_name`

    
Optional (`blank=True`). 150 characters or fewer.

`last_name`

    
Optional (`blank=True`). 150 characters or fewer.

`email`

    
Optional (`blank=True`). Email address.

`password`

    
Required. A hash of, and metadata about, the password. (Django doesn’t store
the raw password.) Raw passwords can be arbitrarily long and can contain any
character. See the password documentation.

`groups`

    
Many-to-many relationship to `Group`

`user_permissions`

    
Many-to-many relationship to `Permission`

`is_staff`

    
Boolean. Designates whether this user can access the admin site.

`is_active`

    
Boolean. Designates whether this user account should be considered active. We
recommend that you set this flag to `False` instead of deleting accounts; that
way, if your applications have any foreign keys to users, the foreign keys
won’t break.

This doesn’t necessarily control whether or not the user can log in.
Authentication backends aren’t required to check for the `is_active` flag but
the default backend (`ModelBackend`) and the `RemoteUserBackend` do. You can
use `AllowAllUsersModelBackend` or `AllowAllUsersRemoteUserBackend` if you
want to allow inactive users to login. In this case, you’ll also want to
customize the `AuthenticationForm` used by the `LoginView` as it rejects
inactive users. Be aware that the permission-checking methods such as
`has_perm()` and the authentication in the Django admin all return `False` for
inactive users.

`is_superuser`

    
Boolean. Designates that this user has all permissions without explicitly
assigning them.

`last_login`

    
A datetime of the user’s last login.

`date_joined`

    
A datetime designating when the account was created. Is set to the current
date/time by default when the account is created.

### Attributes

`class models.User`

    
`is_authenticated`

    
Read-only attribute which is always `True` (as opposed to
`AnonymousUser.is_authenticated` which is always `False`). This is a way to
tell if the user has been authenticated. This does not imply any permissions
and doesn’t check if the user is active or has a valid session. Even though
normally you will check this attribute on `request.user` to find out whether
it has been populated by the `AuthenticationMiddleware` (representing the
currently logged-in user), you should know this attribute is `True` for any
`User` instance.

`is_anonymous`

    
Read-only attribute which is always `False`. This is a way of differentiating
`User` and `AnonymousUser` objects. Generally, you should prefer using
`is_authenticated` to this attribute.

### Methods

`class models.User`

    
`get_username()`

    
Returns the username for the user. Since the `User` model can be swapped out,
you should use this method instead of referencing the username attribute
directly.

`get_full_name()`

    
Returns the `first_name` plus the `last_name`, with a space in between.

`get_short_name()`

    
Returns the `first_name`.

`set_password(raw_password)`

    
Sets the user’s password to the given raw string, taking care of the password
hashing. Doesn’t save the `User` object.

When the `raw_password` is `None`, the password will be set to an unusable
password, as if `set_unusable_password()` were used.

`check_password(raw_password)`

    
Returns `True` if the given raw string is the correct password for the user.
(This takes care of the password hashing in making the comparison.)

`set_unusable_password()`

    
Marks the user as having no password set. This isn’t the same as having a
blank string for a password. `check_password()` for this user will never
return `True`. Doesn’t save the `User` object.

You may need this if authentication for your application takes place against
an existing external source such as an LDAP directory.

`has_usable_password()`

    
Returns `False` if `set_unusable_password()` has been called for this user.

`get_user_permissions(obj=None)`

    
Returns a set of permission strings that the user has directly.

If `obj` is passed in, only returns the user permissions for this specific
object.

`get_group_permissions(obj=None)`

    
Returns a set of permission strings that the user has, through their groups.

If `obj` is passed in, only returns the group permissions for this specific
object.

`get_all_permissions(obj=None)`

    
Returns a set of permission strings that the user has, both through group and
user permissions.

If `obj` is passed in, only returns the permissions for this specific object.

`has_perm(perm, obj=None)`

    
Returns `True` if the user has the specified permission, where perm is in the
format `"<app label>.<permission codename>"`. (see documentation on
permissions). If the user is inactive, this method will always return `False`.
For an active superuser, this method will always return `True`.

If `obj` is passed in, this method won’t check for a permission for the model,
but for this specific object.

`has_perms(perm_list, obj=None)`

    
Returns `True` if the user has each of the specified permissions, where each
perm is in the format `"<app label>.<permission codename>"`. If the user is
inactive, this method will always return `False`. For an active superuser,
this method will always return `True`.

If `obj` is passed in, this method won’t check for permissions for the model,
but for the specific object.

`has_module_perms(package_name)`

    
Returns `True` if the user has any permissions in the given package (the
Django app label). If the user is inactive, this method will always return
`False`. For an active superuser, this method will always return `True`.

`email_user(subject, message, from_email=None, **kwargs)`

    
Sends an email to the user. If `from_email` is `None`, Django uses the
`DEFAULT_FROM_EMAIL`. Any `**kwargs` are passed to the underlying
`send_mail()` call.

### Manager methods

`class models.UserManager`

    
The `User` model has a custom manager that has the following helper methods
(in addition to the methods provided by `BaseUserManager`):

`create_user(username, email=None, password=None, **extra_fields)`

    
Creates, saves and returns a `User`.

The `username` and `password` are set as given. The domain portion of `email`
is automatically converted to lowercase, and the returned `User` object will
have `is_active` set to `True`.

If no password is provided, `set_unusable_password()` will be called.

The `extra_fields` keyword arguments are passed through to the `User`’s
`__init__` method to allow setting arbitrary fields on a custom user model.

See Creating users for example usage.

`create_superuser(username, email=None, password=None, **extra_fields)`

    
Same as `create_user()`, but sets `is_staff` and `is_superuser` to `True`.

`with_perm(perm, is_active=True, include_superusers=True, backend=None,
obj=None)`

    
Returns users that have the given permission `perm` either in the `"<app
label>.<permission codename>"` format or as a `Permission` instance. Returns
an empty queryset if no users who have the `perm` found.

If `is_active` is `True` (default), returns only active users, or if `False`,
returns only inactive users. Use `None` to return all users irrespective of
active state.

If `include_superusers` is `True` (default), the result will include
superusers.

If `backend` is passed in and it’s defined in `AUTHENTICATION_BACKENDS`, then
this method will use it. Otherwise, it will use the `backend` in
`AUTHENTICATION_BACKENDS`, if there is only one, or raise an exception.

##  `AnonymousUser` object

`class models.AnonymousUser`

    
`django.contrib.auth.models.AnonymousUser` is a class that implements the
`django.contrib.auth.models.User` interface, with these differences:

  * id is always `None`.
  * `username` is always the empty string.
  * `get_username()` always returns the empty string.
  * `is_anonymous` is `True` instead of `False`.
  * `is_authenticated` is `False` instead of `True`.
  * `is_staff` and `is_superuser` are always `False`.
  * `is_active` is always `False`.
  * `groups` and `user_permissions` are always empty.
  * `set_password()`, `check_password()`, `save()` and `delete()` raise `NotImplementedError`.

In practice, you probably won’t need to use `AnonymousUser` objects on your
own, but they’re used by web requests, as explained in the next section.

##  `Permission` model

`class models.Permission`

### Fields

`Permission` objects have the following fields:

`class models.Permission`

    
`name`

    
Required. 255 characters or fewer. Example: `'Can vote'`.

`content_type`

    
Required. A reference to the `django_content_type` database table, which
contains a record for each installed model.

`codename`

    
Required. 100 characters or fewer. Example: `'can_vote'`.

### Methods

`Permission` objects have the standard data-access methods like any other
Django model.

##  `Group` model

`class models.Group`

### Fields

`Group` objects have the following fields:

`class models.Group`

    
`name`

    
Required. 150 characters or fewer. Any characters are permitted. Example:
`'Awesome Users'`.

`permissions`

    
Many-to-many field to `Permission`:

    
    group.permissions.set([permission_list])
    group.permissions.add(permission, permission, ...)
    group.permissions.remove(permission, permission, ...)
    group.permissions.clear()
    
## Validators

`class validators.ASCIIUsernameValidator`

    
A field validator allowing only ASCII letters and numbers, in addition to `@`,
`.`, `+`, `-`, and `_`.

`class validators.UnicodeUsernameValidator`

    
A field validator allowing Unicode characters, in addition to `@`, `.`, `+`,
`-`, and `_`. The default validator for `User.username`.

## Login and logout signals

The auth framework uses the following signals that can be used for
notification when a user logs in or out.

`user_logged_in()`

    
Sent when a user logs in successfully.

Arguments sent with this signal:

`sender`

    The class of the user that just logged in.
`request`

    The current `HttpRequest` instance.
`user`

    The user instance that just logged in.
`user_logged_out()`

    
Sent when the logout method is called.

`sender`

    As above: the class of the user that just logged out or `None` if the user was not authenticated.
`request`

    The current `HttpRequest` instance.
`user`

    The user instance that just logged out or `None` if the user was not authenticated.
`user_login_failed()`

    
Sent when the user failed to login successfully

`sender`

    The name of the module used for authentication.
`credentials`

    A dictionary of keyword arguments containing the user credentials that were passed to `authenticate()` or your own custom authentication backend. Credentials matching a set of ‘sensitive’ patterns, (including password) will not be sent in the clear as part of the signal.
`request`

    The `HttpRequest` object, if one was provided to `authenticate()`.
## Authentication backends

This section details the authentication backends that come with Django. For
information on how to use them and how to write your own authentication
backends, see the Other authentication sources section of the User
authentication guide.

### Available authentication backends

The following backends are available in `django.contrib.auth.backends`:

`class BaseBackend`

    
A base class that provides default implementations for all required methods.
By default, it will reject any user and provide no permissions.

`get_user_permissions(user_obj, obj=None)`

    
Returns an empty set.

`get_group_permissions(user_obj, obj=None)`

    
Returns an empty set.

`get_all_permissions(user_obj, obj=None)`

    
Uses `get_user_permissions()` and `get_group_permissions()` to get the set of
permission strings the `user_obj` has.

`has_perm(user_obj, perm, obj=None)`

    
Uses `get_all_permissions()` to check if `user_obj` has the permission string
`perm`.

`class ModelBackend`

    
This is the default authentication backend used by Django. It authenticates
using credentials consisting of a user identifier and password. For Django’s
default user model, the user identifier is the username, for custom user
models it is the field specified by USERNAME_FIELD (see Customizing Users and
authentication).

It also handles the default permissions model as defined for `User` and
`PermissionsMixin`.

`has_perm()`, `get_all_permissions()`, `get_user_permissions()`, and
`get_group_permissions()` allow an object to be passed as a parameter for
object-specific permissions, but this backend does not implement them other
than returning an empty set of permissions if `obj is not None`.

`with_perm()` also allows an object to be passed as a parameter, but unlike
others methods it returns an empty queryset if `obj is not None`.

`authenticate(request, username=None, password=None, **kwargs)`

    
Tries to authenticate `username` with `password` by calling
`User.check_password`. If no `username` is provided, it tries to fetch a
username from `kwargs` using the key `CustomUser.USERNAME_FIELD`. Returns an
authenticated user or `None`.

`request` is an `HttpRequest` and may be `None` if it wasn’t provided to
`authenticate()` (which passes it on to the backend).

`get_user_permissions(user_obj, obj=None)`

    
Returns the set of permission strings the `user_obj` has from their own user
permissions. Returns an empty set if `is_anonymous` or `is_active` is `False`.

`get_group_permissions(user_obj, obj=None)`

    
Returns the set of permission strings the `user_obj` has from the permissions
of the groups they belong. Returns an empty set if `is_anonymous` or
`is_active` is `False`.

`get_all_permissions(user_obj, obj=None)`

    
Returns the set of permission strings the `user_obj` has, including both user
permissions and group permissions. Returns an empty set if `is_anonymous` or
`is_active` is `False`.

`has_perm(user_obj, perm, obj=None)`

    
Uses `get_all_permissions()` to check if `user_obj` has the permission string
`perm`. Returns `False` if the user is not `is_active`.

`has_module_perms(user_obj, app_label)`

    
Returns whether the `user_obj` has any permissions on the app `app_label`.

`user_can_authenticate()`

    
Returns whether the user is allowed to authenticate. To match the behavior of
`AuthenticationForm` which `prohibits inactive users from logging in`, this
method returns `False` for users with `is_active=False`. Custom user models
that don’t have an `is_active` field are allowed.

`with_perm(perm, is_active=True, include_superusers=True, obj=None)`

    
Returns all active users who have the permission `perm` either in the form of
`"<app label>.<permission codename>"` or a `Permission` instance. Returns an
empty queryset if no users who have the `perm` found.

If `is_active` is `True` (default), returns only active users, or if `False`,
returns only inactive users. Use `None` to return all users irrespective of
active state.

If `include_superusers` is `True` (default), the result will include
superusers.

`class AllowAllUsersModelBackend`

    
Same as `ModelBackend` except that it doesn’t reject inactive users because
`user_can_authenticate()` always returns `True`.

When using this backend, you’ll likely want to customize the
`AuthenticationForm` used by the `LoginView` by overriding the
`confirm_login_allowed()` method as it rejects inactive users.

`class RemoteUserBackend`

    
Use this backend to take advantage of external-to-Django-handled
authentication. It authenticates using usernames passed in
`request.META['REMOTE_USER']`. See the Authenticating against REMOTE_USER
documentation.

If you need more control, you can create your own authentication backend that
inherits from this class and override these attributes or methods:

`create_unknown_user`

    
`True` or `False`. Determines whether or not a user object is created if not
already in the database Defaults to `True`.

`authenticate(request, remote_user)`

    
The username passed as `remote_user` is considered trusted. This method
returns the user object with the given username, creating a new user object if
`create_unknown_user` is `True`.

Returns `None` if `create_unknown_user` is `False` and a `User` object with
the given username is not found in the database.

`request` is an `HttpRequest` and may be `None` if it wasn’t provided to
`authenticate()` (which passes it on to the backend).

`clean_username(username)`

    
Performs any cleaning on the `username` (e.g. stripping LDAP DN information)
prior to using it to get or create a user object. Returns the cleaned
username.

`configure_user(request, user)`

    
Configures a newly created user. This method is called immediately after a new
user is created, and can be used to perform custom setup actions, such as
setting the user’s groups based on attributes in an LDAP directory. Returns
the user object.

`request` is an `HttpRequest` and may be `None` if it wasn’t provided to
`authenticate()` (which passes it on to the backend).

`user_can_authenticate()`

    
Returns whether the user is allowed to authenticate. This method returns
`False` for users with `is_active=False`. Custom user models that don’t have
an `is_active` field are allowed.

`class AllowAllUsersRemoteUserBackend`

    
Same as `RemoteUserBackend` except that it doesn’t reject inactive users
because `user_can_authenticate` always returns `True`.

## Utility functions

`get_user(request)`

    
Returns the user model instance associated with the given `request`’s session.

It checks if the authentication backend stored in the session is present in
`AUTHENTICATION_BACKENDS`. If so, it uses the backend’s `get_user()` method to
retrieve the user model instance and then verifies the session by calling the
user model’s `get_session_auth_hash()` method.

Returns an instance of `AnonymousUser` if the authentication backend stored in
the session is no longer in `AUTHENTICATION_BACKENDS`, if a user isn’t
returned by the backend’s `get_user()` method, or if the session auth hash
doesn’t validate.

© Django Software Foundation and individual contributors  
Licensed under the BSD License.  
https://docs.djangoproject.com/en/4.0/ref/contrib/auth/

  *[ISP]: Internet Service Provider

