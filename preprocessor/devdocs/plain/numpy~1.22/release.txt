# Release notes

  * 1.22.0
    * Expired deprecations
      * Deprecated numeric style dtype strings have been removed
      * Expired deprecations for `loads`, `ndfromtxt`, and `mafromtxt` in npyio
    * Deprecations
      * Use delimiter rather than delimitor as kwarg in mrecords
      * Passing boolean `kth` values to (arg-)partition has been deprecated
      * The `np.MachAr` class has been deprecated
    * Compatibility notes
      * Distutils forces strict floating point model on clang
      * Removed floor division support for complex types
      * `numpy.vectorize` functions now produce the same output class as the base function
      * Python 3.7 is no longer supported
      * str/repr of complex dtypes now include space after punctuation
      * Corrected `advance` in `PCG64DSXM` and `PCG64`
      * Change in generation of random 32 bit floating point variates
    * C API changes
      * Masked inner-loops cannot be customized anymore
      * Experimental exposure of future DType and UFunc API
    * New Features
      * NEP 49 configurable allocators
      * Implementation of the NEP 47 (adopting the array API standard)
      * Generate C/C++ API reference documentation from comments blocks is now possible
      * Assign the platform-specific `c_intp` precision via a mypy plugin
      * Add NEP 47-compatible dlpack support
      * `keepdims` optional argument added to `numpy.argmin`, `numpy.argmax`
      * `bit_count` to compute the number of 1-bits in an integer
      * The `ndim` and `axis` attributes have been added to `numpy.AxisError`
      * Preliminary support for `windows/arm64` target
      * Added support for LoongArch
      * A `.clang-format` file has been added
      * `is_integer` is now available to `numpy.floating` and `numpy.integer`
      * Symbolic parser for Fortran dimension specifications
      * `ndarray`, `dtype` and `number` are now runtime-subscriptable
    * Improvements
      * `ctypeslib.load_library` can now take any path-like object
      * Add `smallest_normal` and `smallest_subnormal` attributes to `finfo`
      * `numpy.linalg.qr` accepts stacked matrices as inputs
      * `numpy.fromregex` now accepts `os.PathLike` implementations
      * Add new methods for `quantile` and `percentile`
      * Missing parameters have been added to the `nan<x>` functions
      * Annotating the main Numpy namespace
      * Vectorize umath module using AVX-512
      * OpenBLAS v0.3.17
  * 1.21.4
    * Contributors
    * Pull requests merged
  * 1.21.3
    * Contributors
    * Pull requests merged
  * 1.21.2
    * Contributors
    * Pull requests merged
  * 1.21.1
    * Contributors
    * Pull requests merged
  * 1.21.0
    * New functions
      * Add `PCG64DXSM` `BitGenerator`
    * Expired deprecations
    * Deprecations
      * The `.dtype` attribute must return a `dtype`
      * Inexact matches for `numpy.convolve` and `numpy.correlate` are deprecated
      * `np.typeDict` has been formally deprecated
      * Exceptions will be raised during array-like creation
      * Four `ndarray.ctypes` methods have been deprecated
    * Expired deprecations
      * Remove deprecated `PolyBase` and unused `PolyError` and `PolyDomainError`
    * Compatibility notes
      * Error type changes in universal functions
      * `__array_ufunc__` argument validation
      * `__array_ufunc__` and additional positional arguments
      * Validate input values in `Generator.uniform`
      * `/usr/include` removed from default include paths
      * Changes to comparisons with `dtype=...`
      * Changes to `dtype` and `signature` arguments in ufuncs
      * Ufunc `signature=...` and `dtype=` generalization and `casting`
      * Distutils forces strict floating point model on clang
    * C API changes
      * Use of `ufunc->type_resolver` and “type tuple”
    * New Features
      * Added a mypy plugin for handling platform-specific `numpy.number` precisions
      * Let the mypy plugin manage extended-precision `numpy.number` subclasses
      * New `min_digits` argument for printing float values
      * f2py now recognizes Fortran abstract interface blocks
      * BLAS and LAPACK configuration via environment variables
      * A runtime-subcriptable alias has been added for `ndarray`
    * Improvements
      * Arbitrary `period` option for `numpy.unwrap`
      * `np.unique` now returns single `NaN`
      * `Generator.rayleigh` and `Generator.geometric` performance improved
      * Placeholder annotations have been improved
    * Performance improvements
      * Improved performance in integer division of NumPy arrays
      * Improve performance of `np.save` and `np.load` for small arrays
    * Changes
      * `numpy.piecewise` output class now matches the input class
      * Enable Accelerate Framework
  * 1.20.3
    * Contributors
    * Pull requests merged
  * 1.20.2
    * Contributors
    * Pull requests merged
  * 1.20.1
    * Highlights
    * Contributors
    * Pull requests merged
  * 1.20.0
    * New functions
      * The random.Generator class has a new `permuted` function.
      * `sliding_window_view` provides a sliding window view for numpy arrays
      * `numpy.broadcast_shapes` is a new user-facing function
    * Deprecations
      * Using the aliases of builtin types like `np.int` is deprecated
      * Passing `shape=None` to functions with a non-optional shape argument is deprecated
      * Indexing errors will be reported even when index result is empty
      * Inexact matches for `mode` and `searchside` are deprecated
      * Deprecation of `numpy.dual`
      * `outer` and `ufunc.outer` deprecated for matrix
      * Further Numeric Style types Deprecated
      * The `ndincr` method of `ndindex` is deprecated
      * ArrayLike objects which do not define `__len__` and `__getitem__`
    * Future Changes
      * Arrays cannot be using subarray dtypes
    * Expired deprecations
      * Financial functions removed
    * Compatibility notes
      * `isinstance(dtype, np.dtype)` and not `type(dtype) is not np.dtype`
      * Same kind casting in concatenate with `axis=None`
      * NumPy Scalars are cast when assigned to arrays
      * Array coercion changes when Strings and other types are mixed
      * Array coercion restructure
      * Writing to the result of `numpy.broadcast_arrays` will export readonly buffers
      * Numeric-style type names have been removed from type dictionaries
      * The `operator.concat` function now raises TypeError for array arguments
      * `nickname` attribute removed from ABCPolyBase
      * `float->timedelta` and `uint64->timedelta` promotion will raise a TypeError
      * `numpy.genfromtxt` now correctly unpacks structured arrays
      * `mgrid`, `r_`, etc. consistently return correct outputs for non-default precision input
      * Boolean array indices with mismatching shapes now properly give `IndexError`
      * Casting errors interrupt Iteration
      * f2py generated code may return unicode instead of byte strings
      * The first element of the `__array_interface__["data"]` tuple must be an integer
      * poly1d respects the dtype of all-zero argument
      * The numpy.i file for swig is Python 3 only.
      * Void dtype discovery in `np.array`
    * C API changes
      * The `PyArray_DescrCheck` macro is modified
      * Size of `np.ndarray` and `np.void_` changed
    * New Features
      * `where` keyword argument for `numpy.all` and `numpy.any` functions
      * `where` keyword argument for `numpy` functions `mean`, `std`, `var`
      * `norm=backward`, `forward` keyword options for `numpy.fft` functions
      * NumPy is now typed
      * `numpy.typing` is accessible at runtime
      * New `__f2py_numpy_version__` attribute for f2py generated modules.
      * `mypy` tests can be run via runtests.py
      * Negation of user defined BLAS/LAPACK detection order
      * Allow passing optimizations arguments to asv build
      * The NVIDIA HPC SDK nvfortran compiler is now supported
      * `dtype` option for `cov` and `corrcoef`
    * Improvements
      * Improved string representation for polynomials (`__str__`)
      * Remove the Accelerate library as a candidate LAPACK library
      * Object arrays containing multi-line objects have a more readable `repr`
      * Concatenate supports providing an output dtype
      * Thread safe f2py callback functions
      * `numpy.core.records.fromfile` now supports file-like objects
      * RPATH support on AIX added to distutils
      * Use f90 compiler specified by the command line args
      * Add NumPy declarations for Cython 3.0 and later
      * Make the window functions exactly symmetric
    * Performance improvements and changes
      * Enable multi-platform SIMD compiler optimizations
    * Changes
      * Changed behavior of `divmod(1., 0.)` and related functions
      * `np.linspace` on integers now uses floor
  * 1.19.5
    * Contributors
    * Pull requests merged
  * 1.19.4
    * Contributors
    * Pull requests merged
  * 1.19.3
    * Contributors
    * Pull requests merged
  * 1.19.2
    * Improvements
      * Add NumPy declarations for Cython 3.0 and later
    * Contributors
    * Pull requests merged
  * 1.19.1
    * Contributors
    * Pull requests merged
  * 1.19.0
    * Highlights
    * Expired deprecations
      * `numpy.insert` and `numpy.delete` can no longer be passed an axis on 0d arrays
      * `numpy.delete` no longer ignores out-of-bounds indices
      * `numpy.insert` and `numpy.delete` no longer accept non-integral indices
      * `numpy.delete` no longer casts boolean indices to integers
    * Compatibility notes
      * Changed random variate stream from `numpy.random.Generator.dirichlet`
      * Scalar promotion in `PyArray_ConvertToCommonType`
      * Fasttake and fastputmask slots are deprecated and NULL’ed
      * `np.ediff1d` casting behaviour with `to_end` and `to_begin`
      * Converting of empty array-like objects to NumPy arrays
      * Removed `multiarray.int_asbuffer`
      * `numpy.distutils.compat` has been removed
      * `issubdtype` no longer interprets `float` as `np.floating`
      * Change output of `round` on scalars to be consistent with Python
      * The `numpy.ndarray` constructor no longer interprets `strides=()` as `strides=None`
      * C-Level string to datetime casts changed
      * `SeedSequence` with small seeds no longer conflicts with spawning
    * Deprecations
      * Deprecate automatic `dtype=object` for ragged input
      * Passing `shape=0` to factory functions in `numpy.rec` is deprecated
      * Deprecation of probably unused C-API functions
      * Converting certain types to dtypes is Deprecated
      * Deprecation of `round` for `np.complexfloating` scalars
      * `numpy.ndarray.tostring()` is deprecated in favor of `tobytes()`
    * C API changes
      * Better support for `const` dimensions in API functions
      * Const qualify UFunc inner loops
    * New Features
      * `numpy.frompyfunc` now accepts an identity argument
      * `np.str_` scalars now support the buffer protocol
      * `subok` option for `numpy.copy`
      * `numpy.linalg.multi_dot` now accepts an `out` argument
      * `keepdims` parameter for `numpy.count_nonzero`
      * `equal_nan` parameter for `numpy.array_equal`
    * Improvements
    * Improve detection of CPU features
      * Use 64-bit integer size on 64-bit platforms in fallback lapack_lite
      * Use AVX512 intrinsic to implement `np.exp` when input is `np.float64`
      * Ability to disable madvise hugepages
      * `numpy.einsum` accepts NumPy `int64` type in subscript list
      * `np.logaddexp2.identity` changed to `-inf`
    * Changes
      * Remove handling of extra argument to `__array__`
      * `numpy.random._bit_generator` moved to `numpy.random.bit_generator`
      * Cython access to the random distributions is provided via a `pxd` file
      * Fixed `eigh` and `cholesky` methods in `numpy.random.multivariate_normal`
      * Fixed the jumping implementation in `MT19937.jumped`
  * 1.18.5
    * Contributors
    * Pull requests merged
  * 1.18.4
    * Contributors
    * Pull requests merged
  * 1.18.3
    * Highlights
    * Contributors
    * Pull requests merged
  * 1.18.2
    * Contributors
    * Pull requests merged
  * 1.18.1
    * Contributors
    * Pull requests merged
  * 1.18.0
    * Highlights
    * New functions
      * Multivariate hypergeometric distribution added to `numpy.random`
    * Deprecations
      * `np.fromfile` and `np.fromstring` will error on bad data
      * Deprecate non-scalar arrays as fill values in `ma.fill_value`
      * Deprecate `PyArray_As1D`, `PyArray_As2D`
      * Deprecate `np.alen`
      * Deprecate the financial functions
      * The `axis` argument to `numpy.ma.mask_cols` and `numpy.ma.mask_row` is deprecated
    * Expired deprecations
    * Compatibility notes
      * `numpy.lib.recfunctions.drop_fields` can no longer return None
      * `numpy.argmin/argmax/min/max` returns `NaT` if it exists in array
      * `np.can_cast(np.uint64, np.timedelta64, casting='safe')` is now `False`
      * Changed random variate stream from `numpy.random.Generator.integers`
      * Add more ufunc loops for `datetime64`, `timedelta64`
      * Moved modules in `numpy.random`
    * C API changes
      * `PyDataType_ISUNSIZED(descr)` now returns False for structured datatypes
    * New Features
      * Add our own `*.pxd` cython import file
      * A tuple of axes can now be input to `expand_dims`
      * Support for 64-bit OpenBLAS
      * Add `--f2cmap` option to F2PY
    * Improvements
      * Different C numeric types of the same size have unique names
      * `argwhere` now produces a consistent result on 0d arrays
      * Add `axis` argument for `random.permutation` and `random.shuffle`
      * `method` keyword argument for `np.random.multivariate_normal`
      * Add complex number support for `numpy.fromstring`
      * `numpy.unique` has consistent axes order when `axis` is not None
      * `numpy.matmul` with boolean output now converts to boolean values
      * `numpy.random.randint` produced incorrect value when the range was `2**32`
      * Add complex number support for `numpy.fromfile`
      * `std=c99` added if compiler is named `gcc`
    * Changes
      * `NaT` now sorts to the end of arrays
      * Incorrect `threshold` in `np.set_printoptions` raises `TypeError` or `ValueError`
      * Warn when saving a dtype with metadata
      * `numpy.distutils` append behavior changed for LDFLAGS and similar
      * Remove `numpy.random.entropy` without a deprecation
      * Add options to quiet build configuration and build with `-Werror`
  * 1.17.5
    * Contributors
    * Pull requests merged
  * 1.17.4
    * Highlights
    * Contributors
    * Pull requests merged
  * 1.17.3
    * Highlights
    * Compatibility notes
    * Contributors
    * Pull requests merged
  * 1.17.2
    * Contributors
    * Pull requests merged
  * 1.17.1
    * Contributors
    * Pull requests merged
  * 1.17.0
    * Highlights
    * New functions
    * Deprecations
      * `numpy.polynomial` functions warn when passed `float` in place of `int`
      * Deprecate `numpy.distutils.exec_command` and `temp_file_name`
      * Writeable flag of C-API wrapped arrays
      * `numpy.nonzero` should no longer be called on 0d arrays
      * Writing to the result of `numpy.broadcast_arrays` will warn
    * Future Changes
      * Shape-1 fields in dtypes won’t be collapsed to scalars in a future version
    * Compatibility notes
      * `float16` subnormal rounding
      * Signed zero when using divmod
      * `MaskedArray.mask` now returns a view of the mask, not the mask itself
      * Do not lookup `__buffer__` attribute in `numpy.frombuffer`
      * `out` is buffered for memory overlaps in `take`, `choose`, `put`
      * Unpickling while loading requires explicit opt-in
      * Potential changes to the random stream in old random module
      * `i0` now always returns a result with the same shape as the input
      * `can_cast` no longer assumes all unsafe casting is allowed
      * `ndarray.flags.writeable` can be switched to true slightly more often
    * C API changes
      * dimension or stride input arguments are now passed by `npy_intp const*`
    * New Features
      * New extensible `numpy.random` module with selectable random number generators
      * libFLAME
      * User-defined BLAS detection order
      * User-defined LAPACK detection order
      * `ufunc.reduce` and related functions now accept a `where` mask
      * Timsort and radix sort have replaced mergesort for stable sorting
      * `packbits` and `unpackbits` accept an `order` keyword
      * `unpackbits` now accepts a `count` parameter
      * `linalg.svd` and `linalg.pinv` can be faster on hermitian inputs
      * divmod operation is now supported for two `timedelta64` operands
      * `fromfile` now takes an `offset` argument
      * New mode “empty” for `pad`
      * `empty_like` and related functions now accept a `shape` argument
      * Floating point scalars implement `as_integer_ratio` to match the builtin float
      * Structured `dtype` objects can be indexed with multiple fields names
      * `.npy` files support unicode field names
    * Improvements
      * Array comparison assertions include maximum differences
      * Replacement of the fftpack based `fft` module by the pocketfft library
      * Further improvements to `ctypes` support in `numpy.ctypeslib`
      * `numpy.errstate` is now also a function decorator
      * `numpy.exp` and `numpy.log` speed up for float32 implementation
      * Improve performance of `numpy.pad`
      * `numpy.interp` handles infinities more robustly
      * Pathlib support for `fromfile`, `tofile` and `ndarray.dump`
      * Specialized `isnan`, `isinf`, and `isfinite` ufuncs for bool and int types
      * `isfinite` supports `datetime64` and `timedelta64` types
      * New keywords added to `nan_to_num`
      * MemoryErrors caused by allocated overly large arrays are more descriptive
      * `floor`, `ceil`, and `trunc` now respect builtin magic methods
      * `quantile` now works on `fraction.Fraction` and `decimal.Decimal` objects
      * Support of object arrays in `matmul`
    * Changes
      * `median` and `percentile` family of functions no longer warn about `nan`
      * `timedelta64 % 0` behavior adjusted to return `NaT`
      * NumPy functions now always support overrides with `__array_function__`
      * `lib.recfunctions.structured_to_unstructured` does not squeeze single-field views
      * `clip` now uses a ufunc under the hood
      * `__array_interface__` offset now works as documented
      * Pickle protocol in `savez` set to 3 for `force zip64` flag
      * Structured arrays indexed with non-existent fields raise `KeyError` not `ValueError`
  * 1.16.6
    * Highlights
    * New functions
      * Allow matmul (`@` operator) to work with object arrays.
    * Compatibility notes
      * Fix regression in matmul (`@` operator) for boolean types
    * Improvements
      * Array comparison assertions include maximum differences
    * Contributors
    * Pull requests merged
  * 1.16.5
    * Contributors
    * Pull requests merged
  * 1.16.4
    * New deprecations
      * Writeable flag of C-API wrapped arrays
    * Compatibility notes
      * Potential changes to the random stream
    * Changes
      * `numpy.lib.recfunctions.structured_to_unstructured` does not squeeze single-field views
    * Contributors
    * Pull requests merged
  * 1.16.3
    * Compatibility notes
      * Unpickling while loading requires explicit opt-in
    * Improvements
      * Covariance in `random.mvnormal` cast to double
    * Changes
      * `__array_interface__` offset now works as documented
  * 1.16.2
    * Compatibility notes
      * Signed zero when using divmod
    * Contributors
    * Pull requests merged
  * 1.16.1
    * Contributors
    * Enhancements
    * Compatibility notes
    * New Features
      * divmod operation is now supported for two `timedelta64` operands
    * Improvements
      * Further improvements to `ctypes` support in `np.ctypeslib`
      * Array comparison assertions include maximum differences
    * Changes
      * `timedelta64 % 0` behavior adjusted to return `NaT`
  * 1.16.0
    * Highlights
    * New functions
    * New deprecations
    * Expired deprecations
    * Future changes
    * Compatibility notes
      * f2py script on Windows
      * NaT comparisons
      * complex64/128 alignment has changed
      * nd_grid __len__ removal
      * `np.unravel_index` now accepts `shape` keyword argument
      * multi-field views return a view instead of a copy
    * C API changes
    * New Features
      * Integrated squared error (ISE) estimator added to `histogram`
      * `max_rows` keyword added for `np.loadtxt`
      * modulus operator support added for `np.timedelta64` operands
    * Improvements
      * no-copy pickling of numpy arrays
      * build shell independence
      * `np.polynomial.Polynomial` classes render in LaTeX in Jupyter notebooks
      * `randint` and `choice` now work on empty distributions
      * `linalg.lstsq`, `linalg.qr`, and `linalg.svd` now work with empty arrays
      * Chain exceptions to give better error messages for invalid PEP3118 format strings
      * Einsum optimization path updates and efficiency improvements
      * `numpy.angle` and `numpy.expand_dims` now work on `ndarray` subclasses
      * `NPY_NO_DEPRECATED_API` compiler warning suppression
      * `np.diff` Added kwargs prepend and append
      * ARM support updated
      * Appending to build flags
      * Generalized ufunc signatures now allow fixed-size dimensions
      * Generalized ufunc signatures now allow flexible dimensions
      * `np.clip` and the `clip` method check for memory overlap
      * New value `unscaled` for option `cov` in `np.polyfit`
      * Detailed docstrings for scalar numeric types
      * `__module__` attribute now points to public modules
      * Large allocations marked as suitable for transparent hugepages
      * Alpine Linux (and other musl c library distros) support
      * Speedup `np.block` for large arrays
      * Speedup `np.take` for read-only arrays
      * Support path-like objects for more functions
      * Better behaviour of ufunc identities during reductions
      * Improved conversion from ctypes objects
      * A new `ndpointer.contents` member
      * `matmul` is now a `ufunc`
      * Start and stop arrays for `linspace`, `logspace` and `geomspace`
      * CI extended with additional services
    * Changes
      * Comparison ufuncs will now error rather than return NotImplemented
      * Positive will now raise a deprecation warning for non-numerical arrays
      * `NDArrayOperatorsMixin` now implements matrix multiplication
      * The scaling of the covariance matrix in `np.polyfit` is different
      * `maximum` and `minimum` no longer emit warnings
      * Umath and multiarray c-extension modules merged into a single module
      * `getfield` validity checks extended
      * NumPy functions now support overrides with `__array_function__`
      * Arrays based off readonly buffers cannot be set `writeable`
  * 1.15.4
    * Compatibility Note
    * Contributors
    * Pull requests merged
  * 1.15.3
    * Compatibility Note
    * Contributors
    * Pull requests merged
  * 1.15.2
    * Compatibility Note
    * Contributors
    * Pull requests merged
  * 1.15.1
    * Compatibility Note
    * Contributors
    * Pull requests merged
  * 1.15.0
    * Highlights
    * New functions
    * Deprecations
    * Future Changes
    * Compatibility notes
      * Compiled testing modules renamed and made private
      * The `NpzFile` returned by `np.savez` is now a `collections.abc.Mapping`
      * Under certain conditions, `nditer` must be used in a context manager
      * Numpy has switched to using pytest instead of nose for testing
      * Numpy no longer monkey-patches `ctypes` with `__array_interface__`
      * `np.ma.notmasked_contiguous` and `np.ma.flatnotmasked_contiguous` always return lists
      * `np.squeeze` restores old behavior of objects that cannot handle an `axis` argument
      * unstructured void array’s `.item` method now returns a bytes object
      * `copy.copy` and `copy.deepcopy` no longer turn `masked` into an array
      * Multifield Indexing of Structured Arrays will still return a copy
    * C API changes
      * New functions `npy_get_floatstatus_barrier` and `npy_clear_floatstatus_barrier`
      * Changes to `PyArray_GetDTypeTransferFunction`
    * New Features
      * `np.gcd` and `np.lcm` ufuncs added for integer and objects types
      * Support for cross-platform builds for iOS
      * `return_indices` keyword added for `np.intersect1d`
      * `np.quantile` and `np.nanquantile`
      * Build system
    * Improvements
      * `np.einsum` updates
      * `np.ufunc.reduce` and related functions now accept an initial value
      * `np.flip` can operate over multiple axes
      * `histogram` and `histogramdd` functions have moved to `np.lib.histograms`
      * `histogram` will accept NaN values when explicit bins are given
      * `histogram` works on datetime types, when explicit bin edges are given
      * `histogram` “auto” estimator handles limited variance better
      * The edges returned by `histogram`` and `histogramdd` now match the data float type
      * `histogramdd` allows explicit ranges to be given in a subset of axes
      * The normed arguments of `histogramdd` and `histogram2d` have been renamed
      * `np.r_` works with 0d arrays, and `np.ma.mr_` works with `np.ma.masked`
      * `np.ptp` accepts a `keepdims` argument, and extended axis tuples
      * `MaskedArray.astype` now is identical to `ndarray.astype`
      * Enable AVX2/AVX512 at compile time
      * `nan_to_num` always returns scalars when receiving scalar or 0d inputs
      * `np.flatnonzero` works on numpy-convertible types
      * `np.interp` returns numpy scalars rather than builtin scalars
      * Allow dtype field names to be unicode in Python 2
      * Comparison ufuncs accept `dtype=object`, overriding the default `bool`
      * `sort` functions accept `kind='stable'`
      * Do not make temporary copies for in-place accumulation
      * `linalg.matrix_power` can now handle stacks of matrices
      * Increased performance in `random.permutation` for multidimensional arrays
      * Generalized ufuncs now accept `axes`, `axis` and `keepdims` arguments
      * float128 values now print correctly on ppc systems
      * New `np.take_along_axis` and `np.put_along_axis` functions
  * 1.14.6
    * Contributors
    * Pull requests merged
  * 1.14.5
    * Contributors
    * Pull requests merged
  * 1.14.4
    * Contributors
    * Pull requests merged
  * 1.14.3
    * Contributors
    * Pull requests merged
  * 1.14.2
    * Contributors
    * Pull requests merged
  * 1.14.1
    * Contributors
    * Pull requests merged
  * 1.14.0
    * Highlights
    * New functions
    * Deprecations
    * Future Changes
    * Compatibility notes
      * The mask of a masked array view is also a view rather than a copy
      * `np.ma.masked` is no longer writeable
      * `np.ma` functions producing `fill_value` s have changed
      * `a.flat.__array__()` returns non-writeable arrays when `a` is non-contiguous
      * `np.tensordot` now returns zero array when contracting over 0-length dimension
      * `numpy.testing` reorganized
      * `np.asfarray` no longer accepts non-dtypes through the `dtype` argument
      * 1D `np.linalg.norm` preserves float input types, even for arbitrary orders
      * `count_nonzero(arr, axis=())` now counts over no axes, not all axes
      * `__init__.py` files added to test directories
      * `.astype(bool)` on unstructured void arrays now calls `bool` on each element
      * `MaskedArray.squeeze` never returns `np.ma.masked`
      * Renamed first parameter of `can_cast` from `from` to `from_`
      * `isnat` raises `TypeError` when passed wrong type
      * `dtype.__getitem__` raises `TypeError` when passed wrong type
      * User-defined types now need to implement `__str__` and `__repr__`
      * Many changes to array printing, disableable with the new “legacy” printing mode
    * C API changes
      * PyPy compatible alternative to `UPDATEIFCOPY` arrays
    * New Features
      * Encoding argument for text IO functions
      * External `nose` plugins are usable by `numpy.testing.Tester`
      * `parametrize` decorator added to `numpy.testing`
      * `chebinterpolate` function added to `numpy.polynomial.chebyshev`
      * Support for reading lzma compressed text files in Python 3
      * `sign` option added to `np.setprintoptions` and `np.array2string`
      * `hermitian` option added to``np.linalg.matrix_rank``
      * `threshold` and `edgeitems` options added to `np.array2string`
      * `concatenate` and `stack` gained an `out` argument
      * Support for PGI flang compiler on Windows
    * Improvements
      * Numerator degrees of freedom in `random.noncentral_f` need only be positive.
      * The GIL is released for all `np.einsum` variations
      * The `np.einsum` function will use BLAS when possible and optimize by default
      * `f2py` now handles arrays of dimension 0
      * `numpy.distutils` supports using MSVC and mingw64-gfortran together
      * `np.linalg.pinv` now works on stacked matrices
      * `numpy.save` aligns data to 64 bytes instead of 16
      * NPZ files now can be written without using temporary files
      * Better support for empty structured and string types
      * Support for `decimal.Decimal` in `np.lib.financial`
      * Float printing now uses “dragon4” algorithm for shortest decimal representation
      * `void` datatype elements are now printed in hex notation
      * printing style for `void` datatypes is now independently customizable
      * Reduced memory usage of `np.loadtxt`
    * Changes
      * Multiple-field indexing/assignment of structured arrays
      * Integer and Void scalars are now unaffected by `np.set_string_function`
      * 0d array printing changed, `style` arg of array2string deprecated
      * Seeding `RandomState` using an array requires a 1-d array
      * `MaskedArray` objects show a more useful `repr`
      * The `repr` of `np.polynomial` classes is more explicit
  * 1.13.3
    * Contributors
    * Pull requests merged
  * 1.13.2
    * Contributors
    * Pull requests merged
  * 1.13.1
    * Pull requests merged
    * Contributors
  * 1.13.0
    * Highlights
    * New functions
    * Deprecations
    * Future Changes
    * Build System Changes
    * Compatibility notes
      * Error type changes
      * Tuple object dtypes
      * DeprecationWarning to error
      * FutureWarning to changed behavior
      * dtypes are now always true
      * `__getslice__` and `__setslice__` are no longer needed in `ndarray` subclasses
      * Indexing MaskedArrays/Constants with `...` (ellipsis) now returns MaskedArray
    * C API changes
      * GUfuncs on empty arrays and NpyIter axis removal
      * `PyArray_MapIterArrayCopyIfOverlap` added to NumPy C-API
    * New Features
      * `__array_ufunc__` added
      * New `positive` ufunc
      * New `divmod` ufunc
      * `np.isnat` ufunc tests for NaT special datetime and timedelta values
      * `np.heaviside` ufunc computes the Heaviside function
      * `np.block` function for creating blocked arrays
      * `isin` function, improving on `in1d`
      * Temporary elision
      * `axes` argument for `unique`
      * `np.gradient` now supports unevenly spaced data
      * Support for returning arrays of arbitrary dimensions in `apply_along_axis`
      * `.ndim` property added to `dtype` to complement `.shape`
      * Support for tracemalloc in Python 3.6
      * NumPy may be built with relaxed stride checking debugging
    * Improvements
      * Ufunc behavior for overlapping inputs
      * Partial support for 64-bit f2py extensions with MinGW
      * Performance improvements for `packbits` and `unpackbits`
      * Fix for PPC long double floating point information
      * Better default repr for `ndarray` subclasses
      * More reliable comparisons of masked arrays
      * np.matrix with booleans elements can now be created using the string syntax
      * More `linalg` operations now accept empty vectors and matrices
      * Bundled version of LAPACK is now 3.2.2
      * `reduce` of `np.hypot.reduce` and `np.logical_xor` allowed in more cases
      * Better `repr` of object arrays
    * Changes
      * `argsort` on masked arrays takes the same default arguments as `sort`
      * `average` now preserves subclasses
      * `array == None` and `array != None` do element-wise comparison
      * `np.equal, np.not_equal` for object arrays ignores object identity
      * Boolean indexing changes
      * `np.random.multivariate_normal` behavior with bad covariance matrix
      * `assert_array_less` compares `np.inf` and `-np.inf` now
      * `assert_array_` and masked arrays `assert_equal` hide less warnings
      * `offset` attribute value in `memmap` objects
      * `np.real` and `np.imag` return scalars for scalar inputs
      * The polynomial convenience classes cannot be passed to ufuncs
      * Output arguments to ufuncs can be tuples also for ufunc methods
  * 1.12.1
    * Bugs Fixed
  * 1.12.0
    * Highlights
    * Dropped Support
    * Added Support
    * Build System Changes
    * Deprecations
      * Assignment of ndarray object’s `data` attribute
      * Unsafe int casting of the num attribute in `linspace`
      * Insufficient bit width parameter to `binary_repr`
    * Future Changes
      * Multiple-field manipulation of structured arrays
    * Compatibility notes
      * DeprecationWarning to error
      * FutureWarning to changed behavior
      * `power` and `**` raise errors for integer to negative integer powers
      * Relaxed stride checking is the default
      * The `np.percentile` ‘midpoint’ interpolation method fixed for exact indices
      * `keepdims` kwarg is passed through to user-class methods
      * `bitwise_and` identity changed
      * ma.median warns and returns nan when unmasked invalid values are encountered
      * Greater consistency in `assert_almost_equal`
      * `NoseTester` behaviour of warnings during testing
      * `assert_warns` and `deprecated` decorator more specific
      * C API
    * New Features
      * Writeable keyword argument for `as_strided`
      * `axes` keyword argument for `rot90`
      * Generalized `flip`
      * BLIS support in `numpy.distutils`
      * Hook in `numpy/__init__.py` to run distribution-specific checks
      * New nanfunctions `nancumsum` and `nancumprod` added
      * `np.interp` can now interpolate complex values
      * New polynomial evaluation function `polyvalfromroots` added
      * New array creation function `geomspace` added
      * New context manager for testing warnings
      * New masked array functions `ma.convolve` and `ma.correlate` added
      * New `float_power` ufunc
      * `np.loadtxt` now supports a single integer as `usecol` argument
      * Improved automated bin estimators for `histogram`
      * `np.roll` can now roll multiple axes at the same time
      * The `__complex__` method has been implemented for the ndarrays
      * `pathlib.Path` objects now supported
      * New `bits` attribute for `np.finfo`
      * New `signature` argument to `np.vectorize`
      * Emit py3kwarnings for division of integer arrays
      * numpy.sctypes now includes bytes on Python3 too
    * Improvements
      * `bitwise_and` identity changed
      * Generalized Ufuncs will now unlock the GIL
      * Caches in `np.fft` are now bounded in total size and item count
      * Improved handling of zero-width string/unicode dtypes
      * Integer ufuncs vectorized with AVX2
      * Order of operations optimization in `np.einsum`
      * quicksort has been changed to an introsort
      * `ediff1d` improved performance and subclass handling
      * Improved precision of `ndarray.mean` for float16 arrays
    * Changes
      * All array-like methods are now called with keyword arguments in fromnumeric.py
      * Operations on np.memmap objects return numpy arrays in most cases
      * stacklevel of warnings increased
  * 1.11.3
    * Contributors to maintenance/1.11.3
    * Pull Requests Merged
  * 1.11.2
    * Pull Requests Merged
  * 1.11.1
    * Fixes Merged
  * 1.11.0
    * Highlights
    * Build System Changes
    * Future Changes
    * Compatibility notes
      * datetime64 changes
      * `linalg.norm` return type changes
      * polynomial fit changes
      * np.dot now raises `TypeError` instead of `ValueError`
      * FutureWarning to changed behavior
      * `%` and `//` operators
      * C API
      * object dtype detection for old-style classes
    * New Features
    * Improvements
      * `np.gradient` now supports an `axis` argument
      * `np.lexsort` now supports arrays with object data-type
      * `np.ma.core.MaskedArray` now supports an `order` argument
      * Memory and speed improvements for masked arrays
      * `ndarray.tofile` now uses fallocate on linux
      * Optimizations for operations of the form `A.T @ A` and `A @ A.T`
      * `np.testing.assert_warns` can now be used as a context manager
      * Speed improvement for np.random.shuffle
    * Changes
      * Pyrex support was removed from `numpy.distutils`
      * `np.broadcast` can now be called with a single argument
      * `np.trace` now respects array subclasses
      * `np.dot` now raises `TypeError` instead of `ValueError`
      * `linalg.norm` return type changes
    * Deprecations
      * Views of arrays in Fortran order
      * Invalid arguments for array ordering
      * Random number generator in the `testing` namespace
      * Random integer generation on a closed interval
    * FutureWarnings
      * Assigning to slices/views of `MaskedArray`
  * 1.10.4
    * Compatibility notes
    * Issues Fixed
    * Merged PRs
  * 1.10.3
  * 1.10.2
    * Compatibility notes
      * Relaxed stride checking is no longer the default
      * Fix swig bug in `numpy.i`
      * Deprecate views changing dimensions in fortran order
    * Issues Fixed
    * Merged PRs
    * Notes
  * 1.10.1
  * 1.10.0
    * Highlights
    * Dropped Support
    * Future Changes
    * Compatibility notes
      * Default casting rule change
      * numpy version string
      * relaxed stride checking
      * Concatenation of 1d arrays along any but `axis=0` raises `IndexError`
      * np.ravel, np.diagonal and np.diag now preserve subtypes
      * rollaxis and swapaxes always return a view
      * nonzero now returns base ndarrays
      * C API
      * recarray field return types
      * recarray views
      * ‘out’ keyword argument of ufuncs now accepts tuples of arrays
      * byte-array indices now raises an IndexError
      * Masked arrays containing objects with arrays
      * Median warns and returns nan when invalid values are encountered
      * Functions available from numpy.ma.testutils have changed
    * New Features
      * Reading extra flags from site.cfg
      * np.cbrt to compute cube root for real floats
      * numpy.distutils now allows parallel compilation
      * genfromtxt has a new `max_rows` argument
      * New function np.broadcast_to for invoking array broadcasting
      * New context manager clear_and_catch_warnings for testing warnings
      * cov has new `fweights` and `aweights` arguments
      * Support for the ‘@’ operator in Python 3.5+
      * New argument `norm` to fft functions
    * Improvements
      * np.digitize using binary search
      * np.poly now casts integer inputs to float
      * np.interp can now be used with periodic functions
      * np.pad supports more input types for `pad_width` and `constant_values`
      * np.argmax and np.argmin now support an `out` argument
      * More system C99 complex functions detected and used
      * np.loadtxt support for the strings produced by the `float.hex` method
      * np.isclose properly handles minimal values of integer dtypes
      * np.allclose uses np.isclose internally.
      * np.genfromtxt now handles large integers correctly
      * np.load, np.save have pickle backward compatibility flags
      * MaskedArray support for more complicated base classes
    * Changes
      * dotblas functionality moved to multiarray
      * stricter check of gufunc signature compliance
      * views returned from np.einsum are writeable
      * np.argmin skips NaT values
    * Deprecations
      * Array comparisons involving strings or structured dtypes
      * SafeEval
      * alterdot, restoredot
      * pkgload, PackageLoader
      * bias, ddof arguments to corrcoef
      * dtype string representation changes
  * 1.9.2
    * Issues fixed
  * 1.9.1
    * Issues fixed
  * 1.9.0
    * Highlights
    * Dropped Support
    * Future Changes
    * Compatibility notes
      * The diagonal and diag functions return readonly views.
      * Special scalar float values don’t cause upcast to double anymore
      * Percentile output changes
      * ndarray.tofile exception type
      * Invalid fill value exceptions
      * Polynomial Classes no longer derived from PolyBase
      * Using numpy.random.binomial may change the RNG state vs. numpy < 1.9
      * Random seed enforced to be a 32 bit unsigned integer
      * Argmin and argmax out argument
      * Einsum
      * Indexing
      * Non-integer reduction axis indexes are deprecated
      * `promote_types` and string dtype
      * `can_cast` and string dtype
      * astype and string dtype
      * `npyio.recfromcsv` keyword arguments change
      * The `doc/swig` directory moved
      * The `npy_3kcompat.h` header changed
      * Negative indices in C-Api `sq_item` and `sq_ass_item` sequence methods
      * NDIter
      * `zeros_like` for string dtypes now returns empty strings
    * New Features
      * Percentile supports more interpolation options
      * Generalized axis support for median and percentile
      * Dtype parameter added to `np.linspace` and `np.logspace`
      * More general `np.triu` and `np.tril` broadcasting
      * `tobytes` alias for `tostring` method
      * Build system
      * Compatibility to python `numbers` module
      * `increasing` parameter added to `np.vander`
      * `unique_counts` parameter added to `np.unique`
      * Support for median and percentile in nanfunctions
      * NumpyVersion class added
      * Allow saving arrays with large number of named columns
      * Full broadcasting support for `np.cross`
    * Improvements
      * Better numerical stability for sum in some cases
      * Percentile implemented in terms of `np.partition`
      * Performance improvement for `np.array`
      * Performance improvement for `np.searchsorted`
      * Optional reduced verbosity for np.distutils
      * Covariance check in `np.random.multivariate_normal`
      * Polynomial Classes no longer template based
      * More GIL releases
      * MaskedArray support for more complicated base classes
      * C-API
    * Deprecations
      * Non-integer scalars for sequence repetition
      * `select` input deprecations
      * `rank` function
      * Object array equality comparisons
      * C-API
  * 1.8.2
    * Issues fixed
  * 1.8.1
    * Issues fixed
    * Changes
      * NDIter
      * Optional reduced verbosity for np.distutils
    * Deprecations
      * C-API
  * 1.8.0
    * Highlights
    * Dropped Support
    * Future Changes
    * Compatibility notes
      * NPY_RELAXED_STRIDES_CHECKING
      * Binary operations with non-arrays as second argument
      * Function `median` used with `overwrite_input` only partially sorts array
      * Fix to financial.npv
      * Runtime warnings when comparing NaN numbers
    * New Features
      * Support for linear algebra on stacked arrays
      * In place fancy indexing for ufuncs
      * New functions `partition` and `argpartition`
      * New functions `nanmean`, `nanvar` and `nanstd`
      * New functions `full` and `full_like`
      * IO compatibility with large files
      * Building against OpenBLAS
      * New constant
      * New modes for qr
      * New `invert` argument to `in1d`
      * Advanced indexing using `np.newaxis`
      * C-API
      * runtests.py
    * Improvements
      * IO performance improvements
      * Performance improvements to `pad`
      * Performance improvements to `isnan`, `isinf`, `isfinite` and `byteswap`
      * Performance improvements via SSE2 vectorization
      * Performance improvements to `median`
      * Overridable operand flags in ufunc C-API
    * Changes
      * General
      * C-API Array Additions
      * C-API Ufunc Additions
      * C-API Developer Improvements
    * Deprecations
      * General
    * Authors
  * 1.7.2
    * Issues fixed
  * 1.7.1
    * Issues fixed
  * 1.7.0
    * Highlights
    * Compatibility notes
    * New features
      * Reduction UFuncs Generalize axis= Parameter
      * Reduction UFuncs New keepdims= Parameter
      * Datetime support
      * Custom formatter for printing arrays
      * New function numpy.random.choice
      * New function isclose
      * Preliminary multi-dimensional support in the polynomial package
      * Ability to pad rank-n arrays
      * New argument to searchsorted
      * Build system
      * C API
    * Changes
      * General
      * Casting Rules
    * Deprecations
      * General
      * C-API
  * 1.6.2
    * Issues fixed
      * `numpy.core`
      * `numpy.lib`
      * `numpy.distutils`
      * `numpy.random`
    * Changes
      * `numpy.f2py`
      * `numpy.poly`
  * 1.6.1
    * Issues Fixed
  * 1.6.0
    * Highlights
    * New features
      * New 16-bit floating point type
      * New iterator
      * Legendre, Laguerre, Hermite, HermiteE polynomials in `numpy.polynomial`
      * Fortran assumed shape array and size function support in `numpy.f2py`
      * Other new functions
    * Changes
      * `default error handling`
      * `numpy.distutils`
      * `numpy.testing`
      * `C API`
    * Deprecated features
    * Removed features
      * `numpy.fft`
      * `numpy.memmap`
      * `numpy.lib`
      * `numpy.ma`
      * `numpy.distutils`
  * 1.5.0
    * Highlights
      * Python 3 compatibility
      * PEP 3118 compatibility
    * New features
      * Warning on casting complex to real
      * Dot method for ndarrays
      * linalg.slogdet function
      * new header
    * Changes
      * polynomial.polynomial
      * polynomial.chebyshev
      * histogram
      * correlate
  * 1.4.0
    * Highlights
    * New features
      * Extended array wrapping mechanism for ufuncs
      * Automatic detection of forward incompatibilities
      * New iterators
      * New polynomial support
      * New C API
      * New ufuncs
      * New defines
      * Testing
      * Reusing npymath
      * Improved set operations
    * Improvements
    * Deprecations
    * Internal changes
      * Use C99 complex functions when available
      * split multiarray and umath source code
      * Separate compilation
      * Separate core math library
  * 1.3.0
    * Highlights
      * Python 2.6 support
      * Generalized ufuncs
      * Experimental Windows 64 bits support
    * New features
      * Formatting issues
      * Nan handling in max/min
      * Nan handling in sign
      * New ufuncs
      * Masked arrays
      * gfortran support on windows
      * Arch option for windows binary
    * Deprecated features
      * Histogram
    * Documentation changes
    * New C API
      * Multiarray API
      * Ufunc API
      * New defines
      * Portable NAN, INFINITY, etc…
    * Internal changes
      * numpy.core math configuration revamp
      * umath refactor
      * Improvements to build warnings
      * Separate core math library
      * CPU arch detection

© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/release.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

