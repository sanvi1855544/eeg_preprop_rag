# Bit Generators

The random values produced by `Generator` originate in a BitGenerator. The
BitGenerators do not directly provide random numbers and only contains methods
used for seeding, getting or setting the state, jumping or advancing the
state, and for accessing low-level wrappers for consumption by code that can
efficiently access the functions provided, e.g., numba.

## Supported BitGenerators

The included BitGenerators are:

  * PCG-64 - The default. A fast generator that can be advanced by an arbitrary amount. See the documentation for `advance`. PCG-64 has a period of \\(2^{128}\\). See the PCG author’s page for more details about this class of PRNG.
  * PCG-64 DXSM - An upgraded version of PCG-64 with better statistical properties in parallel contexts. See Upgrading PCG64 with PCG64DXSM for more information on these improvements.
  * MT19937 - The standard Python BitGenerator. Adds a `MT19937.jumped` function that returns a new generator with state as-if \\(2^{128}\\) draws have been made.
  * Philox - A counter-based generator capable of being advanced an arbitrary number of steps or generating independent streams. See the Random123 page for more details about this class of bit generators.
  * SFC64 - A fast generator based on random invertible mappings. Usually the fastest generator of the four. See the SFC author’s page for (a little) more detail.

`BitGenerator`([seed]) | Base Class for generic BitGenerators, which provide a stream of random bits based on different algorithms.  
---|---  
  * MT19937
  * PCG64
  * PCG64DXSM
  * Philox
  * SFC64

© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/random/bit_generators/index.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

