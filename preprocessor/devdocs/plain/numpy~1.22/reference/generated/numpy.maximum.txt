# numpy.maximum

numpy.maximum(x1, x2, /, out=None, *, where=True, casting='same_kind',
order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'maximum'>

    
Element-wise maximum of array elements.

Compare two arrays and returns a new array containing the element-wise maxima.
If one of the elements being compared is a NaN, then that element is returned.
If both elements are NaNs then the first is returned. The latter distinction
is important for complex NaNs, which are defined as at least one of the real
or imaginary parts being a NaN. The net effect is that NaNs are propagated.

Parameters

    
x1, x2array_like

    
The arrays holding the elements to be compared. If `x1.shape != x2.shape`,
they must be broadcastable to a common shape (which becomes the shape of the
output).

outndarray, None, or tuple of ndarray and None, optional

    
A location into which the result is stored. If provided, it must have a shape
that the inputs broadcast to. If not provided or None, a freshly-allocated
array is returned. A tuple (possible only as a keyword argument) must have
length equal to the number of outputs.

wherearray_like, optional

    
This condition is broadcast over the input. At locations where the condition
is True, the `out` array will be set to the ufunc result. Elsewhere, the `out`
array will retain its original value. Note that if an uninitialized `out`
array is created via the default `out=None`, locations within it where the
condition is False will remain uninitialized.

**kwargs

    
For other keyword-only arguments, see the ufunc docs.

Returns

    
yndarray or scalar

    
The maximum of `x1` and `x2`, element-wise. This is a scalar if both `x1` and
`x2` are scalars.

See also

`minimum`

    
Element-wise minimum of two arrays, propagates NaNs.

`fmax`

    
Element-wise maximum of two arrays, ignores NaNs.

`amax`

    
The maximum value of an array along a given axis, propagates NaNs.

`nanmax`

    
The maximum value of an array along a given axis, ignores NaNs.

`fmin`, `amin`, `nanmin`

#### Notes

The maximum is equivalent to `np.where(x1 >= x2, x1, x2)` when neither x1 nor
x2 are nans, but it is faster and does proper broadcasting.

#### Examples

    
    >>> np.maximum([2, 3, 4], [1, 5, 2])
    array([2, 5, 4])
    
    
    >>> np.maximum(np.eye(2), [0.5, 2]) # broadcasting
    array([[ 1. ,  2. ],
           [ 0.5,  2. ]])
    
    
    >>> np.maximum([np.nan, 0, np.nan], [0, np.nan, np.nan])
    array([nan, nan, nan])
    >>> np.maximum(np.Inf, 1)
    inf
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.maximum.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

