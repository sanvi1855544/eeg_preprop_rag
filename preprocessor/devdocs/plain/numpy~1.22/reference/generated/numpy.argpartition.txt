# numpy.argpartition

numpy.argpartition(a, kth, axis=\- 1, kind='introselect', order=None)[source]

    
Perform an indirect partition along the given axis using the algorithm
specified by the `kind` keyword. It returns an array of indices of the same
shape as `a` that index data along the given axis in partitioned order.

New in version 1.8.0.

Parameters

    
aarray_like

    
Array to sort.

kthint or sequence of ints

    
Element index to partition by. The k-th element will be in its final sorted
position and all smaller elements will be moved before it and all larger
elements behind it. The order all elements in the partitions is undefined. If
provided with a sequence of k-th it will partition all of them into their
sorted position at once.

Deprecated since version 1.22.0: Passing booleans as index is deprecated.

axisint or None, optional

    
Axis along which to sort. The default is -1 (the last axis). If None, the
flattened array is used.

kind{‘introselect’}, optional

    
Selection algorithm. Default is ‘introselect’

orderstr or list of str, optional

    
When `a` is an array with fields defined, this argument specifies which fields
to compare first, second, etc. A single field can be specified as a string,
and not all fields need be specified, but unspecified fields will still be
used, in the order in which they come up in the dtype, to break ties.

Returns

    
index_arrayndarray, int

    
Array of indices that partition `a` along the specified axis. If `a` is one-
dimensional, `a[index_array]` yields a partitioned `a`. More generally,
`np.take_along_axis(a, index_array, axis=a)` always yields the partitioned
`a`, irrespective of dimensionality.

See also

`partition`

    
Describes partition algorithms used.

`ndarray.partition`

    
Inplace partition.

`argsort`

    
Full indirect sort.

`take_along_axis`

    
Apply `index_array` from argpartition to an array as if by calling partition.

#### Notes

See `partition` for notes on the different selection algorithms.

#### Examples

One dimensional array:

    
    >>> x = np.array([3, 4, 2, 1])
    >>> x[np.argpartition(x, 3)]
    array([2, 1, 3, 4])
    >>> x[np.argpartition(x, (1, 3))]
    array([1, 2, 3, 4])
    
    
    >>> x = [3, 4, 2, 1]
    >>> np.array(x)[np.argpartition(x, 3)]
    array([2, 1, 3, 4])
    
Multi-dimensional array:

    
    >>> x = np.array([[3, 4, 2], [1, 3, 1]])
    >>> index_array = np.argpartition(x, kth=1, axis=-1)
    >>> np.take_along_axis(x, index_array, axis=-1)  # same as np.partition(x, kth=1)
    array([[2, 3, 4],
           [1, 1, 3]])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.argpartition.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

