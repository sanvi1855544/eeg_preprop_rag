# numpy.polynomial.polynomial.polyder

polynomial.polynomial.polyder(c, m=1, scl=1, axis=0)[source]

    
Differentiate a polynomial.

Returns the polynomial coefficients `c` differentiated `m` times along `axis`.
At each iteration the result is multiplied by `scl` (the scaling factor is for
use in a linear change of variable). The argument `c` is an array of
coefficients from low to high degree along each axis, e.g., [1,2,3] represents
the polynomial `1 + 2*x + 3*x**2` while [[1,2],[1,2]] represents `1 + 1*x +
2*y + 2*x*y` if axis=0 is `x` and axis=1 is `y`.

Parameters

    
carray_like

    
Array of polynomial coefficients. If c is multidimensional the different axis
correspond to different variables with the degree in each axis given by the
corresponding index.

mint, optional

    
Number of derivatives taken, must be non-negative. (Default: 1)

sclscalar, optional

    
Each differentiation is multiplied by `scl`. The end result is multiplication
by `scl**m`. This is for use in a linear change of variable. (Default: 1)

axisint, optional

    
Axis over which the derivative is taken. (Default: 0).

New in version 1.7.0.

Returns

    
derndarray

    
Polynomial coefficients of the derivative.

See also

`polyint`

#### Examples

    
    >>> from numpy.polynomial import polynomial as P
    >>> c = (1,2,3,4) # 1 + 2x + 3x**2 + 4x**3
    >>> P.polyder(c) # (d/dx)(c) = 2 + 6x + 12x**2
    array([  2.,   6.,  12.])
    >>> P.polyder(c,3) # (d**3/dx**3)(c) = 24
    array([24.])
    >>> P.polyder(c,scl=-1) # (d/d(-x))(c) = -2 - 6x - 12x**2
    array([ -2.,  -6., -12.])
    >>> P.polyder(c,2,-1) # (d**2/d(-x)**2)(c) = 6 + 24x
    array([  6.,  24.])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.polynomial.polynomial.polyder.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

