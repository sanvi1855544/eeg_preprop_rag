# numpy.nanmean

numpy.nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *,
where=<no value>)[source]

    
Compute the arithmetic mean along the specified axis, ignoring NaNs.

Returns the average of the array elements. The average is taken over the
flattened array by default, otherwise over the specified axis. `float64`
intermediate and return values are used for integer inputs.

For all-NaN slices, NaN is returned and a `RuntimeWarning` is raised.

New in version 1.8.0.

Parameters

    
aarray_like

    
Array containing numbers whose mean is desired. If `a` is not an array, a
conversion is attempted.

axis{int, tuple of int, None}, optional

    
Axis or axes along which the means are computed. The default is to compute the
mean of the flattened array.

dtypedata-type, optional

    
Type to use in computing the mean. For integer inputs, the default is
`float64`; for inexact inputs, it is the same as the input dtype.

outndarray, optional

    
Alternate output array in which to place the result. The default is `None`; if
provided, it must have the same shape as the expected output, but the type
will be cast if necessary. See Output type determination for more details.

keepdimsbool, optional

    
If this is set to True, the axes which are reduced are left in the result as
dimensions with size one. With this option, the result will broadcast
correctly against the original `a`.

If the value is anything but the default, then `keepdims` will be passed
through to the `mean` or `sum` methods of sub-classes of `ndarray`. If the
sub-classes methods does not implement `keepdims` any exceptions will be
raised.

wherearray_like of bool, optional

    
Elements to include in the mean. See `reduce` for details.

New in version 1.22.0.

Returns

    
mndarray, see dtype parameter above

    
If `out=None`, returns a new array containing the mean values, otherwise a
reference to the output array is returned. Nan is returned for slices that
contain only NaNs.

See also

`average`

    
Weighted average

`mean`

    
Arithmetic mean taken while not ignoring NaNs

`var`, `nanvar`

#### Notes

The arithmetic mean is the sum of the non-NaN elements along the axis divided
by the number of non-NaN elements.

Note that for floating-point input, the mean is computed using the same
precision the input has. Depending on the input data, this can cause the
results to be inaccurate, especially for `float32`. Specifying a higher-
precision accumulator using the `dtype` keyword can alleviate this issue.

#### Examples

    
    >>> a = np.array([[1, np.nan], [3, 4]])
    >>> np.nanmean(a)
    2.6666666666666665
    >>> np.nanmean(a, axis=0)
    array([2.,  4.])
    >>> np.nanmean(a, axis=1)
    array([1.,  3.5]) # may vary
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.nanmean.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

