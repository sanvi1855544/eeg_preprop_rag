# numpy.seterrcall

numpy.seterrcall(func)[source]

    
Set the floating-point error callback function or log object.

There are two ways to capture floating-point error messages. The first is to
set the error-handler to ‘call’, using `seterr`. Then, set the function to
call using this function.

The second is to set the error-handler to ‘log’, using `seterr`. Floating-
point errors then trigger a call to the ‘write’ method of the provided object.

Parameters

    
funccallable f(err, flag) or object with write method

    
Function to call upon floating-point errors (‘call’-mode) or object whose
‘write’ method is used to log such message (‘log’-mode).

The call function takes two arguments. The first is a string describing the
type of error (such as “divide by zero”, “overflow”, “underflow”, or “invalid
value”), and the second is the status flag. The flag is a byte, whose four
least-significant bits indicate the type of error, one of “divide”, “over”,
“under”, “invalid”:

    
    [0 0 0 0 divide over under invalid]
    
In other words, `flags = divide + 2*over + 4*under + 8*invalid`.

If an object is provided, its write method should take one argument, a string.

Returns

    
hcallable, log instance or None

    
The old error handler.

See also

`seterr`, `geterr`, `geterrcall`

#### Examples

Callback upon error:

    
    >>> def err_handler(type, flag):
    ...     print("Floating point error (%s), with flag %s" % (type, flag))
    ...
    
    
    >>> saved_handler = np.seterrcall(err_handler)
    >>> save_err = np.seterr(all='call')
    
    
    >>> np.array([1, 2, 3]) / 0.0
    Floating point error (divide by zero), with flag 1
    array([inf, inf, inf])
    
    
    >>> np.seterrcall(saved_handler)
    <function err_handler at 0x...>
    >>> np.seterr(**save_err)
    {'divide': 'call', 'over': 'call', 'under': 'call', 'invalid': 'call'}
    
Log error message:

    
    >>> class Log:
    ...     def write(self, msg):
    ...         print("LOG: %s" % msg)
    ...
    
    
    >>> log = Log()
    >>> saved_handler = np.seterrcall(log)
    >>> save_err = np.seterr(all='log')
    
    
    >>> np.array([1, 2, 3]) / 0.0
    LOG: Warning: divide by zero encountered in true_divide
    array([inf, inf, inf])
    
    
    >>> np.seterrcall(saved_handler)
    <numpy.core.numeric.Log object at 0x...>
    >>> np.seterr(**save_err)
    {'divide': 'log', 'over': 'log', 'under': 'log', 'invalid': 'log'}
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.seterrcall.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

