# numpy.ptp

numpy.ptp(a, axis=None, out=None, keepdims=<no value>)[source]

    
Range of values (maximum - minimum) along an axis.

The name of the function comes from the acronym for ‘peak to peak’.

Warning

`ptp` preserves the data type of the array. This means the return value for an
input of signed integers with n bits (e.g. `np.int8`, `np.int16`, etc) is also
a signed integer with n bits. In that case, peak-to-peak values greater than
`2**(n-1)-1` will be returned as negative values. An example with a work-
around is shown below.

Parameters

    
aarray_like

    
Input values.

axisNone or int or tuple of ints, optional

    
Axis along which to find the peaks. By default, flatten the array. `axis` may
be negative, in which case it counts from the last to the first axis.

New in version 1.15.0.

If this is a tuple of ints, a reduction is performed on multiple axes, instead
of a single axis or all the axes as before.

outarray_like

    
Alternative output array in which to place the result. It must have the same
shape and buffer length as the expected output, but the type of the output
values will be cast if necessary.

keepdimsbool, optional

    
If this is set to True, the axes which are reduced are left in the result as
dimensions with size one. With this option, the result will broadcast
correctly against the input array.

If the default value is passed, then `keepdims` will not be passed through to
the `ptp` method of sub-classes of `ndarray`, however any non-default value
will be. If the sub-class’ method does not implement `keepdims` any exceptions
will be raised.

Returns

    
ptpndarray

    
A new array holding the result, unless `out` was specified, in which case a
reference to `out` is returned.

#### Examples

    
    >>> x = np.array([[4, 9, 2, 10],
    ...               [6, 9, 7, 12]])
    
    
    >>> np.ptp(x, axis=1)
    array([8, 6])
    
    
    >>> np.ptp(x, axis=0)
    array([2, 0, 5, 2])
    
    
    >>> np.ptp(x)
    10
    
This example shows that a negative value can be returned when the input is an
array of signed integers.

    
    >>> y = np.array([[1, 127],
    ...               [0, 127],
    ...               [-1, 127],
    ...               [-2, 127]], dtype=np.int8)
    >>> np.ptp(y, axis=1)
    array([ 126,  127, -128, -127], dtype=int8)
    
A work-around is to use the `view()` method to view the result as unsigned
integers with the same bit width:

    
    >>> np.ptp(y, axis=1).view(np.uint8)
    array([126, 127, 128, 129], dtype=uint8)
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.ptp.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

