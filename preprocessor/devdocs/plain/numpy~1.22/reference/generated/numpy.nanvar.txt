# numpy.nanvar

numpy.nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>,
*, where=<no value>)[source]

    
Compute the variance along the specified axis, while ignoring NaNs.

Returns the variance of the array elements, a measure of the spread of a
distribution. The variance is computed for the flattened array by default,
otherwise over the specified axis.

For all-NaN slices or slices with zero degrees of freedom, NaN is returned and
a `RuntimeWarning` is raised.

New in version 1.8.0.

Parameters

    
aarray_like

    
Array containing numbers whose variance is desired. If `a` is not an array, a
conversion is attempted.

axis{int, tuple of int, None}, optional

    
Axis or axes along which the variance is computed. The default is to compute
the variance of the flattened array.

dtypedata-type, optional

    
Type to use in computing the variance. For arrays of integer type the default
is `float64`; for arrays of float types it is the same as the array type.

outndarray, optional

    
Alternate output array in which to place the result. It must have the same
shape as the expected output, but the type is cast if necessary.

ddofint, optional

    
“Delta Degrees of Freedom”: the divisor used in the calculation is `N - ddof`,
where `N` represents the number of non-NaN elements. By default `ddof` is
zero.

keepdimsbool, optional

    
If this is set to True, the axes which are reduced are left in the result as
dimensions with size one. With this option, the result will broadcast
correctly against the original `a`.

wherearray_like of bool, optional

    
Elements to include in the variance. See `reduce` for details.

New in version 1.22.0.

Returns

    
variancendarray, see dtype parameter above

    
If `out` is None, return a new array containing the variance, otherwise return
a reference to the output array. If ddof is >= the number of non-NaN elements
in a slice or the slice contains only NaNs, then the result for that slice is
NaN.

See also

`std`

    
Standard deviation

`mean`

    
Average

`var`

    
Variance while not ignoring NaNs

`nanstd`, `nanmean`

Output type determination

#### Notes

The variance is the average of the squared deviations from the mean, i.e.,
`var = mean(abs(x - x.mean())**2)`.

The mean is normally calculated as `x.sum() / N`, where `N = len(x)`. If,
however, `ddof` is specified, the divisor `N - ddof` is used instead. In
standard statistical practice, `ddof=1` provides an unbiased estimator of the
variance of a hypothetical infinite population. `ddof=0` provides a maximum
likelihood estimate of the variance for normally distributed variables.

Note that for complex numbers, the absolute value is taken before squaring, so
that the result is always real and nonnegative.

For floating-point input, the variance is computed using the same precision
the input has. Depending on the input data, this can cause the results to be
inaccurate, especially for `float32` (see example below). Specifying a higher-
accuracy accumulator using the `dtype` keyword can alleviate this issue.

For this function to work on sub-classes of ndarray, they must define `sum`
with the kwarg `keepdims`

#### Examples

    
    >>> a = np.array([[1, np.nan], [3, 4]])
    >>> np.nanvar(a)
    1.5555555555555554
    >>> np.nanvar(a, axis=0)
    array([1.,  0.])
    >>> np.nanvar(a, axis=1)
    array([0.,  0.25])  # may vary
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.nanvar.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

