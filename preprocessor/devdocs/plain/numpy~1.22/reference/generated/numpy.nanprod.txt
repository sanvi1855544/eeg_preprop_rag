# numpy.nanprod

numpy.nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>,
initial=<no value>, where=<no value>)[source]

    
Return the product of array elements over a given axis treating Not a Numbers
(NaNs) as ones.

One is returned for slices that are all-NaN or empty.

New in version 1.10.0.

Parameters

    
aarray_like

    
Array containing numbers whose product is desired. If `a` is not an array, a
conversion is attempted.

axis{int, tuple of int, None}, optional

    
Axis or axes along which the product is computed. The default is to compute
the product of the flattened array.

dtypedata-type, optional

    
The type of the returned array and of the accumulator in which the elements
are summed. By default, the dtype of `a` is used. An exception is when `a` has
an integer type with less precision than the platform (u)intp. In that case,
the default will be either (u)int32 or (u)int64 depending on whether the
platform is 32 or 64 bits. For inexact inputs, dtype must be inexact.

outndarray, optional

    
Alternate output array in which to place the result. The default is `None`. If
provided, it must have the same shape as the expected output, but the type
will be cast if necessary. See Output type determination for more details. The
casting of NaN to integer can yield unexpected results.

keepdimsbool, optional

    
If True, the axes which are reduced are left in the result as dimensions with
size one. With this option, the result will broadcast correctly against the
original `arr`.

initialscalar, optional

    
The starting value for this product. See `reduce` for details.

New in version 1.22.0.

wherearray_like of bool, optional

    
Elements to include in the product. See `reduce` for details.

New in version 1.22.0.

Returns

    
nanprodndarray

    
A new array holding the result is returned unless `out` is specified, in which
case it is returned.

See also

`numpy.prod`

    
Product across array propagating NaNs.

`isnan`

    
Show which elements are NaN.

#### Examples

    
    >>> np.nanprod(1)
    1
    >>> np.nanprod([1])
    1
    >>> np.nanprod([1, np.nan])
    1.0
    >>> a = np.array([[1, 2], [3, np.nan]])
    >>> np.nanprod(a)
    6.0
    >>> np.nanprod(a, axis=0)
    array([3., 2.])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.nanprod.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

