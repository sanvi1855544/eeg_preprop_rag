# numpy.ma.conjugate

ma.conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K',
dtype=None, subok=True[, signature, extobj]) =
<numpy.ma.core._MaskedUnaryOperation object>

    
Return the complex conjugate, element-wise.

The complex conjugate of a complex number is obtained by changing the sign of
its imaginary part.

Parameters

    
xarray_like

    
Input value.

outndarray, None, or tuple of ndarray and None, optional

    
A location into which the result is stored. If provided, it must have a shape
that the inputs broadcast to. If not provided or None, a freshly-allocated
array is returned. A tuple (possible only as a keyword argument) must have
length equal to the number of outputs.

wherearray_like, optional

    
This condition is broadcast over the input. At locations where the condition
is True, the `out` array will be set to the ufunc result. Elsewhere, the `out`
array will retain its original value. Note that if an uninitialized `out`
array is created via the default `out=None`, locations within it where the
condition is False will remain uninitialized.

**kwargs

    
For other keyword-only arguments, see the ufunc docs.

Returns

    
yndarray

    
The complex conjugate of `x`, with same dtype as `y`. This is a scalar if `x`
is a scalar.

#### Notes

`conj` is an alias for `conjugate`:

    
    >>> np.conj is np.conjugate
    True
    
#### Examples

    
    >>> np.conjugate(1+2j)
    (1-2j)
    
    
    >>> x = np.eye(2) + 1j * np.eye(2)
    >>> np.conjugate(x)
    array([[ 1.-1.j,  0.-0.j],
           [ 0.-0.j,  1.-1.j]])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.ma.conjugate.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

