# numpy.fft.rfftn

fft.rfftn(a, s=None, axes=None, norm=None)[source]

    
Compute the N-dimensional discrete Fourier Transform for real input.

This function computes the N-dimensional discrete Fourier Transform over any
number of axes in an M-dimensional real array by means of the Fast Fourier
Transform (FFT). By default, all axes are transformed, with the real transform
performed over the last axis, while the remaining transforms are complex.

Parameters

    
aarray_like

    
Input array, taken to be real.

ssequence of ints, optional

    
Shape (length along each transformed axis) to use from the input. (`s[0]`
refers to axis 0, `s[1]` to axis 1, etc.). The final element of `s`
corresponds to `n` for `rfft(x, n)`, while for the remaining axes, it
corresponds to `n` for `fft(x, n)`. Along any axis, if the given shape is
smaller than that of the input, the input is cropped. If it is larger, the
input is padded with zeros. if `s` is not given, the shape of the input along
the axes specified by `axes` is used.

axessequence of ints, optional

    
Axes over which to compute the FFT. If not given, the last `len(s)` axes are
used, or all axes if `s` is also not specified.

norm{“backward”, “ortho”, “forward”}, optional

    
New in version 1.10.0.

Normalization mode (see `numpy.fft`). Default is “backward”. Indicates which
direction of the forward/backward pair of transforms is scaled and with what
normalization factor.

New in version 1.20.0: The “backward”, “forward” values were added.

Returns

    
outcomplex ndarray

    
The truncated or zero-padded input, transformed along the axes indicated by
`axes`, or by a combination of `s` and `a`, as explained in the parameters
section above. The length of the last axis transformed will be `s[-1]//2+1`,
while the remaining transformed axes will have lengths according to `s`, or
unchanged from the input.

Raises

    
ValueError

    
If `s` and `axes` have different length.

IndexError

    
If an element of `axes` is larger than than the number of axes of `a`.

See also

`irfftn`

    
The inverse of `rfftn`, i.e. the inverse of the n-dimensional FFT of real
input.

`fft`

    
The one-dimensional FFT, with definitions and conventions used.

`rfft`

    
The one-dimensional FFT of real input.

`fftn`

    
The n-dimensional FFT.

`rfft2`

    
The two-dimensional FFT of real input.

#### Notes

The transform for real input is performed over the last transformation axis,
as by `rfft`, then the transform over the remaining axes is performed as by
`fftn`. The order of the output is as for `rfft` for the final transformation
axis, and as for `fftn` for the remaining transformation axes.

See `fft` for details, definitions and conventions used.

#### Examples

    
    >>> a = np.ones((2, 2, 2))
    >>> np.fft.rfftn(a)
    array([[[8.+0.j,  0.+0.j], # may vary
            [0.+0.j,  0.+0.j]],
           [[0.+0.j,  0.+0.j],
            [0.+0.j,  0.+0.j]]])
    
    
    >>> np.fft.rfftn(a, axes=(2, 0))
    array([[[4.+0.j,  0.+0.j], # may vary
            [4.+0.j,  0.+0.j]],
           [[0.+0.j,  0.+0.j],
            [0.+0.j,  0.+0.j]]])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.fft.rfftn.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

