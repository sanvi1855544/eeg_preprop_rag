# numpy.nansum

numpy.nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>,
initial=<no value>, where=<no value>)[source]

    
Return the sum of array elements over a given axis treating Not a Numbers
(NaNs) as zero.

In NumPy versions <= 1.9.0 Nan is returned for slices that are all-NaN or
empty. In later versions zero is returned.

Parameters

    
aarray_like

    
Array containing numbers whose sum is desired. If `a` is not an array, a
conversion is attempted.

axis{int, tuple of int, None}, optional

    
Axis or axes along which the sum is computed. The default is to compute the
sum of the flattened array.

dtypedata-type, optional

    
The type of the returned array and of the accumulator in which the elements
are summed. By default, the dtype of `a` is used. An exception is when `a` has
an integer type with less precision than the platform (u)intp. In that case,
the default will be either (u)int32 or (u)int64 depending on whether the
platform is 32 or 64 bits. For inexact inputs, dtype must be inexact.

New in version 1.8.0.

outndarray, optional

    
Alternate output array in which to place the result. The default is `None`. If
provided, it must have the same shape as the expected output, but the type
will be cast if necessary. See Output type determination for more details. The
casting of NaN to integer can yield unexpected results.

New in version 1.8.0.

keepdimsbool, optional

    
If this is set to True, the axes which are reduced are left in the result as
dimensions with size one. With this option, the result will broadcast
correctly against the original `a`.

If the value is anything but the default, then `keepdims` will be passed
through to the `mean` or `sum` methods of sub-classes of `ndarray`. If the
sub-classes methods does not implement `keepdims` any exceptions will be
raised.

New in version 1.8.0.

initialscalar, optional

    
Starting value for the sum. See `reduce` for details.

New in version 1.22.0.

wherearray_like of bool, optional

    
Elements to include in the sum. See `reduce` for details.

New in version 1.22.0.

Returns

    
nansumndarray.

    
A new array holding the result is returned unless `out` is specified, in which
it is returned. The result has the same size as `a`, and the same shape as `a`
if `axis` is not None or `a` is a 1-d array.

See also

`numpy.sum`

    
Sum across array propagating NaNs.

`isnan`

    
Show which elements are NaN.

`isfinite`

    
Show which elements are not NaN or +/-inf.

#### Notes

If both positive and negative infinity are present, the sum will be Not A
Number (NaN).

#### Examples

    
    >>> np.nansum(1)
    1
    >>> np.nansum([1])
    1
    >>> np.nansum([1, np.nan])
    1.0
    >>> a = np.array([[1, 1], [1, np.nan]])
    >>> np.nansum(a)
    3.0
    >>> np.nansum(a, axis=0)
    array([2.,  1.])
    >>> np.nansum([1, np.nan, np.inf])
    inf
    >>> np.nansum([1, np.nan, np.NINF])
    -inf
    >>> from numpy.testing import suppress_warnings
    >>> with suppress_warnings() as sup:
    ...     sup.filter(RuntimeWarning)
    ...     np.nansum([1, np.nan, np.inf, -np.inf]) # both +/- infinity present
    nan
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.nansum.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

