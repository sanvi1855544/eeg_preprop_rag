# numpy.in1d

numpy.in1d(ar1, ar2, assume_unique=False, invert=False)[source]

    
Test whether each element of a 1-D array is also present in a second array.

Returns a boolean array the same length as `ar1` that is True where an element
of `ar1` is in `ar2` and False otherwise.

We recommend using `isin` instead of `in1d` for new code.

Parameters

    
ar1(M,) array_like

    
Input array.

ar2array_like

    
The values against which to test each value of `ar1`.

assume_uniquebool, optional

    
If True, the input arrays are both assumed to be unique, which can speed up
the calculation. Default is False.

invertbool, optional

    
If True, the values in the returned array are inverted (that is, False where
an element of `ar1` is in `ar2` and True otherwise). Default is False.
`np.in1d(a, b, invert=True)` is equivalent to (but is faster than)
`np.invert(in1d(a, b))`.

New in version 1.8.0.

Returns

    
in1d(M,) ndarray, bool

    
The values `ar1[in1d]` are in `ar2`.

See also

`isin`

    
Version of this function that preserves the shape of ar1.

`numpy.lib.arraysetops`

    
Module with a number of other functions for performing set operations on
arrays.

#### Notes

`in1d` can be considered as an element-wise function version of the python
keyword `in`, for 1-D sequences. `in1d(a, b)` is roughly equivalent to
`np.array([item in b for item in a])`. However, this idea fails if `ar2` is a
set, or similar (non-sequence) container: As `ar2` is converted to an array,
in those cases `asarray(ar2)` is an object array rather than the expected
array of contained values.

New in version 1.4.0.

#### Examples

    
    >>> test = np.array([0, 1, 2, 5, 0])
    >>> states = [0, 2]
    >>> mask = np.in1d(test, states)
    >>> mask
    array([ True, False,  True, False,  True])
    >>> test[mask]
    array([0, 2, 0])
    >>> mask = np.in1d(test, states, invert=True)
    >>> mask
    array([False,  True, False,  True, False])
    >>> test[mask]
    array([1, 5])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.in1d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

