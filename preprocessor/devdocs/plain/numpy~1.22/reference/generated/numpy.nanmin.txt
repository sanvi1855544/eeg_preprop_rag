# numpy.nanmin

numpy.nanmin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>,
where=<no value>)[source]

    
Return minimum of an array or minimum along an axis, ignoring any NaNs. When
all-NaN slices are encountered a `RuntimeWarning` is raised and Nan is
returned for that slice.

Parameters

    
aarray_like

    
Array containing numbers whose minimum is desired. If `a` is not an array, a
conversion is attempted.

axis{int, tuple of int, None}, optional

    
Axis or axes along which the minimum is computed. The default is to compute
the minimum of the flattened array.

outndarray, optional

    
Alternate output array in which to place the result. The default is `None`; if
provided, it must have the same shape as the expected output, but the type
will be cast if necessary. See Output type determination for more details.

New in version 1.8.0.

keepdimsbool, optional

    
If this is set to True, the axes which are reduced are left in the result as
dimensions with size one. With this option, the result will broadcast
correctly against the original `a`.

If the value is anything but the default, then `keepdims` will be passed
through to the `min` method of sub-classes of `ndarray`. If the sub-classes
methods does not implement `keepdims` any exceptions will be raised.

New in version 1.8.0.

initialscalar, optional

    
The maximum value of an output element. Must be present to allow computation
on empty slice. See `reduce` for details.

New in version 1.22.0.

wherearray_like of bool, optional

    
Elements to compare for the minimum. See `reduce` for details.

New in version 1.22.0.

Returns

    
nanminndarray

    
An array with the same shape as `a`, with the specified axis removed. If `a`
is a 0-d array, or if axis is None, an ndarray scalar is returned. The same
dtype as `a` is returned.

See also

`nanmax`

    
The maximum value of an array along a given axis, ignoring any NaNs.

`amin`

    
The minimum value of an array along a given axis, propagating any NaNs.

`fmin`

    
Element-wise minimum of two arrays, ignoring any NaNs.

`minimum`

    
Element-wise minimum of two arrays, propagating any NaNs.

`isnan`

    
Shows which elements are Not a Number (NaN).

`isfinite`

    
Shows which elements are neither NaN nor infinity.

`amax`, `fmax`, `maximum`

#### Notes

NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE
754). This means that Not a Number is not equivalent to infinity. Positive
infinity is treated as a very large number and negative infinity is treated as
a very small (i.e. negative) number.

If the input has a integer type the function is equivalent to np.min.

#### Examples

    
    >>> a = np.array([[1, 2], [3, np.nan]])
    >>> np.nanmin(a)
    1.0
    >>> np.nanmin(a, axis=0)
    array([1.,  2.])
    >>> np.nanmin(a, axis=1)
    array([1.,  3.])
    
When positive infinity and negative infinity are present:

    
    >>> np.nanmin([1, 2, np.nan, np.inf])
    1.0
    >>> np.nanmin([1, 2, np.nan, np.NINF])
    -inf
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.nanmin.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

