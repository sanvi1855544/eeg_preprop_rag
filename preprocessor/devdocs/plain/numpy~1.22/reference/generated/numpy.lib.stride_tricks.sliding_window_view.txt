# numpy.lib.stride_tricks.sliding_window_view

lib.stride_tricks.sliding_window_view(x, window_shape, axis=None, *,
subok=False, writeable=False)[source]

    
Create a sliding window view into the array with the given window shape.

Also known as rolling or moving window, the window slides across all
dimensions of the array and extracts subsets of the array at all window
positions.

New in version 1.20.0.

Parameters

    
xarray_like

    
Array to create the sliding window view from.

window_shapeint or tuple of int

    
Size of window over each axis that takes part in the sliding window. If `axis`
is not present, must have same length as the number of input array dimensions.
Single integers `i` are treated as if they were the tuple `(i,)`.

axisint or tuple of int, optional

    
Axis or axes along which the sliding window is applied. By default, the
sliding window is applied to all axes and `window_shape[i]` will refer to axis
`i` of `x`. If `axis` is given as a `tuple of int`, `window_shape[i]` will
refer to the axis `axis[i]` of `x`. Single integers `i` are treated as if they
were the tuple `(i,)`.

subokbool, optional

    
If True, sub-classes will be passed-through, otherwise the returned array will
be forced to be a base-class array (default).

writeablebool, optional

    
When true, allow writing to the returned view. The default is false, as this
should be used with caution: the returned view contains the same memory
location multiple times, so writing to one location will cause others to
change.

Returns

    
viewndarray

    
Sliding window view of the array. The sliding window dimensions are inserted
at the end, and the original dimensions are trimmed as required by the size of
the sliding window. That is, `view.shape = x_shape_trimmed + window_shape`,
where `x_shape_trimmed` is `x.shape` with every entry reduced by one less than
the corresponding window size.

See also

`lib.stride_tricks.as_strided`

    
A lower-level and less safe routine for creating arbitrary views from custom
shape and strides.

`broadcast_to`

    
broadcast an array to a given shape.

#### Notes

For many applications using a sliding window view can be convenient, but
potentially very slow. Often specialized solutions exist, for example:

  * `scipy.signal.fftconvolve`
  * filtering functions in `scipy.ndimage`
  * moving window functions provided by bottleneck.

As a rough estimate, a sliding window approach with an input size of `N` and a
window size of `W` will scale as `O(N*W)` where frequently a special algorithm
can achieve `O(N)`. That means that the sliding window variant for a window
size of 100 can be a 100 times slower than a more specialized version.

Nevertheless, for small window sizes, when no custom algorithm exists, or as a
prototyping and developing tool, this function can be a good solution.

#### Examples

    
    >>> x = np.arange(6)
    >>> x.shape
    (6,)
    >>> v = sliding_window_view(x, 3)
    >>> v.shape
    (4, 3)
    >>> v
    array([[0, 1, 2],
           [1, 2, 3],
           [2, 3, 4],
           [3, 4, 5]])
    
This also works in more dimensions, e.g.

    
    >>> i, j = np.ogrid[:3, :4]
    >>> x = 10*i + j
    >>> x.shape
    (3, 4)
    >>> x
    array([[ 0,  1,  2,  3],
           [10, 11, 12, 13],
           [20, 21, 22, 23]])
    >>> shape = (2,2)
    >>> v = sliding_window_view(x, shape)
    >>> v.shape
    (2, 3, 2, 2)
    >>> v
    array([[[[ 0,  1],
             [10, 11]],
            [[ 1,  2],
             [11, 12]],
            [[ 2,  3],
             [12, 13]]],
           [[[10, 11],
             [20, 21]],
            [[11, 12],
             [21, 22]],
            [[12, 13],
             [22, 23]]]])
    
The axis can be specified explicitly:

    
    >>> v = sliding_window_view(x, 3, 0)
    >>> v.shape
    (1, 4, 3)
    >>> v
    array([[[ 0, 10, 20],
            [ 1, 11, 21],
            [ 2, 12, 22],
            [ 3, 13, 23]]])
    
The same axis can be used several times. In that case, every use reduces the
corresponding original dimension:

    
    >>> v = sliding_window_view(x, (2, 3), (1, 1))
    >>> v.shape
    (3, 1, 2, 3)
    >>> v
    array([[[[ 0,  1,  2],
             [ 1,  2,  3]]],
           [[[10, 11, 12],
             [11, 12, 13]]],
           [[[20, 21, 22],
             [21, 22, 23]]]])
    
Combining with stepped slicing (`::step`), this can be used to take sliding
views which skip elements:

    
    >>> x = np.arange(7)
    >>> sliding_window_view(x, 5)[:, ::2]
    array([[0, 2, 4],
           [1, 3, 5],
           [2, 4, 6]])
    
or views which move by multiple elements

    
    >>> x = np.arange(7)
    >>> sliding_window_view(x, 3)[::2, :]
    array([[0, 1, 2],
           [2, 3, 4],
           [4, 5, 6]])
    
A common application of `sliding_window_view` is the calculation of running
statistics. The simplest example is the moving average:

    
    >>> x = np.arange(6)
    >>> x.shape
    (6,)
    >>> v = sliding_window_view(x, 3)
    >>> v.shape
    (4, 3)
    >>> v
    array([[0, 1, 2],
           [1, 2, 3],
           [2, 3, 4],
           [3, 4, 5]])
    >>> moving_average = v.mean(axis=-1)
    >>> moving_average
    array([1., 2., 3., 4.])
    
Note that a sliding window approach is often not optimal (see Notes).

© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.lib.stride_tricks.sliding_window_view.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

