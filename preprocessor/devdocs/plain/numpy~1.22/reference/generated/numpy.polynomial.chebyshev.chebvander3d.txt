# numpy.polynomial.chebyshev.chebvander3d

polynomial.chebyshev.chebvander3d(x, y, z, deg)[source]

    
Pseudo-Vandermonde matrix of given degrees.

Returns the pseudo-Vandermonde matrix of degrees `deg` and sample points `(x,
y, z)`. If `l, m, n` are the given degrees in `x, y, z`, then The pseudo-
Vandermonde matrix is defined by

\\[V[..., (m+1)(n+1)i + (n+1)j + k] = T_i(x)*T_j(y)*T_k(z),\\]

where `0 <= i <= l`, `0 <= j <= m`, and `0 <= j <= n`. The leading indices of
`V` index the points `(x, y, z)` and the last index encodes the degrees of the
Chebyshev polynomials.

If `V = chebvander3d(x, y, z, [xdeg, ydeg, zdeg])`, then the columns of `V`
correspond to the elements of a 3-D coefficient array `c` of shape (xdeg + 1,
ydeg + 1, zdeg + 1) in the order

\\[c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\\]

and `np.dot(V, c.flat)` and `chebval3d(x, y, z, c)` will be the same up to
roundoff. This equivalence is useful both for least squares fitting and for
the evaluation of a large number of 3-D Chebyshev series of the same degrees
and sample points.

Parameters

    
x, y, zarray_like

    
Arrays of point coordinates, all of the same shape. The dtypes will be
converted to either float64 or complex128 depending on whether any of the
elements are complex. Scalars are converted to 1-D arrays.

deglist of ints

    
List of maximum degrees of the form [x_deg, y_deg, z_deg].

Returns

    
vander3dndarray

    
The shape of the returned matrix is `x.shape + (order,)`, where \\(order =
(deg[0]+1)*(deg[1]+1)*(deg[2]+1)\\). The dtype will be the same as the
converted `x`, `y`, and `z`.

See also

`chebvander`, `chebvander3d`, `chebval2d`, `chebval3d`

#### Notes

New in version 1.7.0.

© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.polynomial.chebyshev.chebvander3d.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

