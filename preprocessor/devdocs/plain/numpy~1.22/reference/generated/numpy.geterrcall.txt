# numpy.geterrcall

numpy.geterrcall()[source]

    
Return the current callback function used on floating-point errors.

When the error handling for a floating-point error (one of “divide”, “over”,
“under”, or “invalid”) is set to ‘call’ or ‘log’, the function that is called
or the log instance that is written to is returned by `geterrcall`. This
function or log instance has been set with `seterrcall`.

Returns

    
errobjcallable, log instance or None

    
The current error handler. If no handler was set through `seterrcall`, `None`
is returned.

See also

`seterrcall`, `seterr`, `geterr`

#### Notes

For complete documentation of the types of floating-point exceptions and
treatment options, see `seterr`.

#### Examples

    
    >>> np.geterrcall()  # we did not yet set a handler, returns None
    
    
    >>> oldsettings = np.seterr(all='call')
    >>> def err_handler(type, flag):
    ...     print("Floating point error (%s), with flag %s" % (type, flag))
    >>> oldhandler = np.seterrcall(err_handler)
    >>> np.array([1, 2, 3]) / 0.0
    Floating point error (divide by zero), with flag 1
    array([inf, inf, inf])
    
    
    >>> cur_handler = np.geterrcall()
    >>> cur_handler is err_handler
    True
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.geterrcall.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

