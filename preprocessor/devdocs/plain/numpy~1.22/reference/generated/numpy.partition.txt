# numpy.partition

numpy.partition(a, kth, axis=\- 1, kind='introselect', order=None)[source]

    
Return a partitioned copy of an array.

Creates a copy of the array with its elements rearranged in such a way that
the value of the element in k-th position is in the position it would be in a
sorted array. All elements smaller than the k-th element are moved before this
element and all equal or greater are moved behind it. The ordering of the
elements in the two partitions is undefined.

New in version 1.8.0.

Parameters

    
aarray_like

    
Array to be sorted.

kthint or sequence of ints

    
Element index to partition by. The k-th value of the element will be in its
final sorted position and all smaller elements will be moved before it and all
equal or greater elements behind it. The order of all elements in the
partitions is undefined. If provided with a sequence of k-th it will partition
all elements indexed by k-th of them into their sorted position at once.

Deprecated since version 1.22.0: Passing booleans as index is deprecated.

axisint or None, optional

    
Axis along which to sort. If None, the array is flattened before sorting. The
default is -1, which sorts along the last axis.

kind{‘introselect’}, optional

    
Selection algorithm. Default is ‘introselect’.

orderstr or list of str, optional

    
When `a` is an array with fields defined, this argument specifies which fields
to compare first, second, etc. A single field can be specified as a string.
Not all fields need be specified, but unspecified fields will still be used,
in the order in which they come up in the dtype, to break ties.

Returns

    
partitioned_arrayndarray

    
Array of the same type and shape as `a`.

See also

`ndarray.partition`

    
Method to sort an array in-place.

`argpartition`

    
Indirect partition.

`sort`

    
Full sorting

#### Notes

The various selection algorithms are characterized by their average speed,
worst case performance, work space size, and whether they are stable. A stable
sort keeps items with the same key in the same relative order. The available
algorithms have the following properties:

kind | speed | worst case | work space | stable  
---|---|---|---|---  
‘introselect’ | 1 | O(n) | 0 | no  
All the partition algorithms make temporary copies of the data when
partitioning along any but the last axis. Consequently, partitioning along the
last axis is faster and uses less space than partitioning along any other
axis.

The sort order for complex numbers is lexicographic. If both the real and
imaginary parts are non-nan then the order is determined by the real parts
except when they are equal, in which case the order is determined by the
imaginary parts.

#### Examples

    
    >>> a = np.array([3, 4, 2, 1])
    >>> np.partition(a, 3)
    array([2, 1, 3, 4])
    
    
    >>> np.partition(a, (1, 3))
    array([1, 2, 3, 4])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.partition.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

