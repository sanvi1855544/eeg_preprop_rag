# numpy.arctan2

numpy.arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind',
order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arctan2'>

    
Element-wise arc tangent of `x1/x2` choosing the quadrant correctly.

The quadrant (i.e., branch) is chosen so that `arctan2(x1, x2)` is the signed
angle in radians between the ray ending at the origin and passing through the
point (1,0), and the ray ending at the origin and passing through the point
(`x2`, `x1`). (Note the role reversal: the “`y`-coordinate” is the first
function parameter, the “`x`-coordinate” is the second.) By IEEE convention,
this function is defined for `x2` = +/-0 and for either or both of `x1` and
`x2` = +/-inf (see Notes for specific values).

This function is not defined for complex-valued arguments; for the so-called
argument of complex values, use `angle`.

Parameters

    
x1array_like, real-valued

    
`y`-coordinates.

x2array_like, real-valued

    
`x`-coordinates. If `x1.shape != x2.shape`, they must be broadcastable to a
common shape (which becomes the shape of the output).

outndarray, None, or tuple of ndarray and None, optional

    
A location into which the result is stored. If provided, it must have a shape
that the inputs broadcast to. If not provided or None, a freshly-allocated
array is returned. A tuple (possible only as a keyword argument) must have
length equal to the number of outputs.

wherearray_like, optional

    
This condition is broadcast over the input. At locations where the condition
is True, the `out` array will be set to the ufunc result. Elsewhere, the `out`
array will retain its original value. Note that if an uninitialized `out`
array is created via the default `out=None`, locations within it where the
condition is False will remain uninitialized.

**kwargs

    
For other keyword-only arguments, see the ufunc docs.

Returns

    
anglendarray

    
Array of angles in radians, in the range `[-pi, pi]`. This is a scalar if both
`x1` and `x2` are scalars.

See also

`arctan`, `tan`, `angle`

#### Notes

arctan2 is identical to the `atan2` function of the underlying C library. The
following special values are defined in the C standard: [1]

`x1` | `x2` | `arctan2(x1,x2)`  
---|---|---  
+/- 0 | +0 | +/- 0  
+/- 0 | -0 | +/- pi  
> 0 | +/-inf | +0 / +pi  
< 0 | +/-inf | -0 / -pi  
+/-inf | +inf | +/- (pi/4)  
+/-inf | -inf | +/- (3*pi/4)  
Note that +0 and -0 are distinct floating point numbers, as are +inf and -inf.

#### References

1

    
ISO/IEC standard 9899:1999, “Programming language C.”

#### Examples

Consider four points in different quadrants:

    
    >>> x = np.array([-1, +1, +1, -1])
    >>> y = np.array([-1, -1, +1, +1])
    >>> np.arctan2(y, x) * 180 / np.pi
    array([-135.,  -45.,   45.,  135.])
    
Note the order of the parameters. `arctan2` is defined also when `x2` = 0 and
at several other special points, obtaining values in the range `[-pi, pi]`:

    
    >>> np.arctan2([1., -1.], [0., 0.])
    array([ 1.57079633, -1.57079633])
    >>> np.arctan2([0., 0., np.inf], [+0., -0., np.inf])
    array([ 0.        ,  3.14159265,  0.78539816])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.arctan2.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

