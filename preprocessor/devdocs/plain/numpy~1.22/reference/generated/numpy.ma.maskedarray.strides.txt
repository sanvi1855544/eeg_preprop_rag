# numpy.ma.MaskedArray.strides

attribute

ma.MaskedArray.strides

    
Tuple of bytes to step in each dimension when traversing an array.

The byte offset of element `(i[0], i[1], ..., i[n])` in an array `a` is:

    
    offset = sum(np.array(i) * a.strides)
    
A more detailed explanation of strides can be found in the “ndarray.rst” file
in the NumPy reference guide.

See also

`numpy.lib.stride_tricks.as_strided`

#### Notes

Imagine an array of 32-bit integers (each 4 bytes):

    
    x = np.array([[0, 1, 2, 3, 4],
                  [5, 6, 7, 8, 9]], dtype=np.int32)
    
This array is stored in memory as 40 bytes, one after the other (known as a
contiguous block of memory). The strides of an array tell us how many bytes we
have to skip in memory to move to the next position along a certain axis. For
example, we have to skip 4 bytes (1 value) to move to the next column, but 20
bytes (5 values) to get to the same position in the next row. As such, the
strides for the array `x` will be `(20, 4)`.

#### Examples

    
    >>> y = np.reshape(np.arange(2*3*4), (2,3,4))
    >>> y
    array([[[ 0,  1,  2,  3],
            [ 4,  5,  6,  7],
            [ 8,  9, 10, 11]],
           [[12, 13, 14, 15],
            [16, 17, 18, 19],
            [20, 21, 22, 23]]])
    >>> y.strides
    (48, 16, 4)
    >>> y[1,1,1]
    17
    >>> offset=sum(y.strides * np.array((1,1,1)))
    >>> offset/y.itemsize
    17
    
    
    >>> x = np.reshape(np.arange(5*6*7*8), (5,6,7,8)).transpose(2,3,1,0)
    >>> x.strides
    (32, 4, 224, 1344)
    >>> i = np.array([3,5,2,2])
    >>> offset = sum(i * x.strides)
    >>> x[3,5,2,2]
    813
    >>> offset / x.itemsize
    813
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.ma.MaskedArray.strides.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

