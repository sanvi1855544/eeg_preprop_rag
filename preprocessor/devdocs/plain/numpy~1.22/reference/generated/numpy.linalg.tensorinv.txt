# numpy.linalg.tensorinv

linalg.tensorinv(a, ind=2)[source]

    
Compute the ‘inverse’ of an N-dimensional array.

The result is an inverse for `a` relative to the tensordot operation
`tensordot(a, b, ind)`, i. e., up to floating-point accuracy,
`tensordot(tensorinv(a), a, ind)` is the “identity” tensor for the tensordot
operation.

Parameters

    
aarray_like

    
Tensor to ‘invert’. Its shape must be ‘square’, i. e., `prod(a.shape[:ind]) ==
prod(a.shape[ind:])`.

indint, optional

    
Number of first indices that are involved in the inverse sum. Must be a
positive integer, default is 2.

Returns

    
bndarray

    
`a`’s tensordot inverse, shape `a.shape[ind:] + a.shape[:ind]`.

Raises

    
LinAlgError

    
If `a` is singular or not ‘square’ (in the above sense).

See also

`numpy.tensordot`, `tensorsolve`

#### Examples

    
    >>> a = np.eye(4*6)
    >>> a.shape = (4, 6, 8, 3)
    >>> ainv = np.linalg.tensorinv(a, ind=2)
    >>> ainv.shape
    (8, 3, 4, 6)
    >>> b = np.random.randn(4, 6)
    >>> np.allclose(np.tensordot(ainv, b), np.linalg.tensorsolve(a, b))
    True
    
    
    >>> a = np.eye(4*6)
    >>> a.shape = (24, 8, 3)
    >>> ainv = np.linalg.tensorinv(a, ind=1)
    >>> ainv.shape
    (8, 3, 24)
    >>> b = np.random.randn(24)
    >>> np.allclose(np.tensordot(ainv, b, 1), np.linalg.tensorsolve(a, b))
    True
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.linalg.tensorinv.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

