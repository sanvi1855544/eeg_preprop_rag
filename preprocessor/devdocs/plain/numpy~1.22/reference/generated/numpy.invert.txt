# numpy.invert

numpy.invert(x, /, out=None, *, where=True, casting='same_kind', order='K',
dtype=None, subok=True[, signature, extobj]) = <ufunc 'invert'>

    
Compute bit-wise inversion, or bit-wise NOT, element-wise.

Computes the bit-wise NOT of the underlying binary representation of the
integers in the input arrays. This ufunc implements the C/Python operator `~`.

For signed integer inputs, the two’s complement is returned. In a
two’s-complement system negative numbers are represented by the two’s
complement of the absolute value. This is the most common method of
representing signed integers on computers [1]. A N-bit two’s-complement system
can represent every integer in the range \\(-2^{N-1}\\) to \\(+2^{N-1}-1\\).

Parameters

    
xarray_like

    
Only integer and boolean types are handled.

outndarray, None, or tuple of ndarray and None, optional

    
A location into which the result is stored. If provided, it must have a shape
that the inputs broadcast to. If not provided or None, a freshly-allocated
array is returned. A tuple (possible only as a keyword argument) must have
length equal to the number of outputs.

wherearray_like, optional

    
This condition is broadcast over the input. At locations where the condition
is True, the `out` array will be set to the ufunc result. Elsewhere, the `out`
array will retain its original value. Note that if an uninitialized `out`
array is created via the default `out=None`, locations within it where the
condition is False will remain uninitialized.

**kwargs

    
For other keyword-only arguments, see the ufunc docs.

Returns

    
outndarray or scalar

    
Result. This is a scalar if `x` is a scalar.

See also

`bitwise_and`, `bitwise_or`, `bitwise_xor`

`logical_not`

`binary_repr`

    
Return the binary representation of the input number as a string.

#### Notes

`bitwise_not` is an alias for `invert`:

    
    >>> np.bitwise_not is np.invert
    True
    
#### References

1

    
Wikipedia, “Two’s complement”, https://en.wikipedia.org/wiki/Two’s_complement

#### Examples

We’ve seen that 13 is represented by `00001101`. The invert or bit-wise NOT of
13 is then:

    
    >>> x = np.invert(np.array(13, dtype=np.uint8))
    >>> x
    242
    >>> np.binary_repr(x, width=8)
    '11110010'
    
The result depends on the bit-width:

    
    >>> x = np.invert(np.array(13, dtype=np.uint16))
    >>> x
    65522
    >>> np.binary_repr(x, width=16)
    '1111111111110010'
    
When using signed integer types the result is the two’s complement of the
result for the unsigned type:

    
    >>> np.invert(np.array([13], dtype=np.int8))
    array([-14], dtype=int8)
    >>> np.binary_repr(-14, width=8)
    '11110010'
    
Booleans are accepted as well:

    
    >>> np.invert(np.array([True, False]))
    array([False,  True])
    
The `~` operator can be used as a shorthand for `np.invert` on ndarrays.

    
    >>> x1 = np.array([True, False])
    >>> ~x1
    array([False,  True])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.invert.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

