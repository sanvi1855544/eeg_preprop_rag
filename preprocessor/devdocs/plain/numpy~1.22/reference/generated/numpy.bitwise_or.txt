# numpy.bitwise_or

numpy.bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind',
order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'bitwise_or'>

    
Compute the bit-wise OR of two arrays element-wise.

Computes the bit-wise OR of the underlying binary representation of the
integers in the input arrays. This ufunc implements the C/Python operator `|`.

Parameters

    
x1, x2array_like

    
Only integer and boolean types are handled. If `x1.shape != x2.shape`, they
must be broadcastable to a common shape (which becomes the shape of the
output).

outndarray, None, or tuple of ndarray and None, optional

    
A location into which the result is stored. If provided, it must have a shape
that the inputs broadcast to. If not provided or None, a freshly-allocated
array is returned. A tuple (possible only as a keyword argument) must have
length equal to the number of outputs.

wherearray_like, optional

    
This condition is broadcast over the input. At locations where the condition
is True, the `out` array will be set to the ufunc result. Elsewhere, the `out`
array will retain its original value. Note that if an uninitialized `out`
array is created via the default `out=None`, locations within it where the
condition is False will remain uninitialized.

**kwargs

    
For other keyword-only arguments, see the ufunc docs.

Returns

    
outndarray or scalar

    
Result. This is a scalar if both `x1` and `x2` are scalars.

See also

`logical_or`

`bitwise_and`

`bitwise_xor`

`binary_repr`

    
Return the binary representation of the input number as a string.

#### Examples

The number 13 has the binary representation `00001101`. Likewise, 16 is
represented by `00010000`. The bit-wise OR of 13 and 16 is then `000111011`,
or 29:

    
    >>> np.bitwise_or(13, 16)
    29
    >>> np.binary_repr(29)
    '11101'
    
    
    >>> np.bitwise_or(32, 2)
    34
    >>> np.bitwise_or([33, 4], 1)
    array([33,  5])
    >>> np.bitwise_or([33, 4], [1, 2])
    array([33,  6])
    
    
    >>> np.bitwise_or(np.array([2, 5, 255]), np.array([4, 4, 4]))
    array([  6,   5, 255])
    >>> np.array([2, 5, 255]) | np.array([4, 4, 4])
    array([  6,   5, 255])
    >>> np.bitwise_or(np.array([2, 5, 255, 2147483647], dtype=np.int32),
    ...               np.array([4, 4, 4, 2147483647], dtype=np.int32))
    array([         6,          5,        255, 2147483647])
    >>> np.bitwise_or([True, True], [False, True])
    array([ True,  True])
    
The `|` operator can be used as a shorthand for `np.bitwise_or` on ndarrays.

    
    >>> x1 = np.array([2, 5, 255])
    >>> x2 = np.array([4, 4, 4])
    >>> x1 | x2
    array([  6,   5, 255])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.bitwise_or.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

