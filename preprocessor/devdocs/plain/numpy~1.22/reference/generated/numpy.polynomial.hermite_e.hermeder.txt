# numpy.polynomial.hermite_e.hermeder

polynomial.hermite_e.hermeder(c, m=1, scl=1, axis=0)[source]

    
Differentiate a Hermite_e series.

Returns the series coefficients `c` differentiated `m` times along `axis`. At
each iteration the result is multiplied by `scl` (the scaling factor is for
use in a linear change of variable). The argument `c` is an array of
coefficients from low to high degree along each axis, e.g., [1,2,3] represents
the series `1*He_0 + 2*He_1 + 3*He_2` while [[1,2],[1,2]] represents
`1*He_0(x)*He_0(y) + 1*He_1(x)*He_0(y) + 2*He_0(x)*He_1(y) +
2*He_1(x)*He_1(y)` if axis=0 is `x` and axis=1 is `y`.

Parameters

    
carray_like

    
Array of Hermite_e series coefficients. If `c` is multidimensional the
different axis correspond to different variables with the degree in each axis
given by the corresponding index.

mint, optional

    
Number of derivatives taken, must be non-negative. (Default: 1)

sclscalar, optional

    
Each differentiation is multiplied by `scl`. The end result is multiplication
by `scl**m`. This is for use in a linear change of variable. (Default: 1)

axisint, optional

    
Axis over which the derivative is taken. (Default: 0).

New in version 1.7.0.

Returns

    
derndarray

    
Hermite series of the derivative.

See also

`hermeint`

#### Notes

In general, the result of differentiating a Hermite series does not resemble
the same operation on a power series. Thus the result of this function may be
“unintuitive,” albeit correct; see Examples section below.

#### Examples

    
    >>> from numpy.polynomial.hermite_e import hermeder
    >>> hermeder([ 1.,  1.,  1.,  1.])
    array([1.,  2.,  3.])
    >>> hermeder([-0.25,  1.,  1./2.,  1./3.,  1./4 ], m=2)
    array([1.,  2.,  3.])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.polynomial.hermite_e.hermeder.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

