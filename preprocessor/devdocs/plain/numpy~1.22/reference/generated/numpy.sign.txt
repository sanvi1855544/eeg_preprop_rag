# numpy.sign

numpy.sign(x, /, out=None, *, where=True, casting='same_kind', order='K',
dtype=None, subok=True[, signature, extobj]) = <ufunc 'sign'>

    
Returns an element-wise indication of the sign of a number.

The `sign` function returns `-1 if x < 0, 0 if x==0, 1 if x > 0`. nan is
returned for nan inputs.

For complex inputs, the `sign` function returns `sign(x.real) + 0j if x.real
!= 0 else sign(x.imag) + 0j`.

complex(nan, 0) is returned for complex nan inputs.

Parameters

    
xarray_like

    
Input values.

outndarray, None, or tuple of ndarray and None, optional

    
A location into which the result is stored. If provided, it must have a shape
that the inputs broadcast to. If not provided or None, a freshly-allocated
array is returned. A tuple (possible only as a keyword argument) must have
length equal to the number of outputs.

wherearray_like, optional

    
This condition is broadcast over the input. At locations where the condition
is True, the `out` array will be set to the ufunc result. Elsewhere, the `out`
array will retain its original value. Note that if an uninitialized `out`
array is created via the default `out=None`, locations within it where the
condition is False will remain uninitialized.

**kwargs

    
For other keyword-only arguments, see the ufunc docs.

Returns

    
yndarray

    
The sign of `x`. This is a scalar if `x` is a scalar.

#### Notes

There is more than one definition of sign in common use for complex numbers.
The definition used here is equivalent to \\(x/\sqrt{x*x}\\) which is
different from a common alternative, \\(x/|x|\\).

#### Examples

    
    >>> np.sign([-5., 4.5])
    array([-1.,  1.])
    >>> np.sign(0)
    0
    >>> np.sign(5-2j)
    (1+0j)
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.sign.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

