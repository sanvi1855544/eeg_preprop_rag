# numpy.amin

numpy.amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>,
where=<no value>)[source]

    
Return the minimum of an array or minimum along an axis.

Parameters

    
aarray_like

    
Input data.

axisNone or int or tuple of ints, optional

    
Axis or axes along which to operate. By default, flattened input is used.

New in version 1.7.0.

If this is a tuple of ints, the minimum is selected over multiple axes,
instead of a single axis or all the axes as before.

outndarray, optional

    
Alternative output array in which to place the result. Must be of the same
shape and buffer length as the expected output. See Output type determination
for more details.

keepdimsbool, optional

    
If this is set to True, the axes which are reduced are left in the result as
dimensions with size one. With this option, the result will broadcast
correctly against the input array.

If the default value is passed, then `keepdims` will not be passed through to
the `amin` method of sub-classes of `ndarray`, however any non-default value
will be. If the sub-class’ method does not implement `keepdims` any exceptions
will be raised.

initialscalar, optional

    
The maximum value of an output element. Must be present to allow computation
on empty slice. See `reduce` for details.

New in version 1.15.0.

wherearray_like of bool, optional

    
Elements to compare for the minimum. See `reduce` for details.

New in version 1.17.0.

Returns

    
aminndarray or scalar

    
Minimum of `a`. If `axis` is None, the result is a scalar value. If `axis` is
given, the result is an array of dimension `a.ndim - 1`.

See also

`amax`

    
The maximum value of an array along a given axis, propagating any NaNs.

`nanmin`

    
The minimum value of an array along a given axis, ignoring any NaNs.

`minimum`

    
Element-wise minimum of two arrays, propagating any NaNs.

`fmin`

    
Element-wise minimum of two arrays, ignoring any NaNs.

`argmin`

    
Return the indices of the minimum values.

`nanmax`, `maximum`, `fmax`

#### Notes

NaN values are propagated, that is if at least one item is NaN, the
corresponding min value will be NaN as well. To ignore NaN values (MATLAB
behavior), please use nanmin.

Don’t use `amin` for element-wise comparison of 2 arrays; when `a.shape[0]` is
2, `minimum(a[0], a[1])` is faster than `amin(a, axis=0)`.

#### Examples

    
    >>> a = np.arange(4).reshape((2,2))
    >>> a
    array([[0, 1],
           [2, 3]])
    >>> np.amin(a)           # Minimum of the flattened array
    0
    >>> np.amin(a, axis=0)   # Minima along the first axis
    array([0, 1])
    >>> np.amin(a, axis=1)   # Minima along the second axis
    array([0, 2])
    >>> np.amin(a, where=[False, True], initial=10, axis=0)
    array([10,  1])
    
    
    >>> b = np.arange(5, dtype=float)
    >>> b[2] = np.NaN
    >>> np.amin(b)
    nan
    >>> np.amin(b, where=~np.isnan(b), initial=10)
    0.0
    >>> np.nanmin(b)
    0.0
    
    
    >>> np.amin([[-50], [10]], axis=-1, initial=0)
    array([-50,   0])
    
Notice that the initial value is used as one of the elements for which the
minimum is determined, unlike for the default argument Python’s max function,
which is only used for empty iterables.

Notice that this isn’t the same as Python’s `default` argument.

    
    >>> np.amin([6], initial=5)
    5
    >>> min([6], default=5)
    6
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.amin.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

