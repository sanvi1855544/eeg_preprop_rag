# numpy.isclose

numpy.isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)[source]

    
Returns a boolean array where two arrays are element-wise equal within a
tolerance.

The tolerance values are positive, typically very small numbers. The relative
difference (`rtol` * abs(`b`)) and the absolute difference `atol` are added
together to compare against the absolute difference between `a` and `b`.

Warning

The default `atol` is not appropriate for comparing numbers that are much
smaller than one (see Notes).

Parameters

    
a, barray_like

    
Input arrays to compare.

rtolfloat

    
The relative tolerance parameter (see Notes).

atolfloat

    
The absolute tolerance parameter (see Notes).

equal_nanbool

    
Whether to compare NaN’s as equal. If True, NaN’s in `a` will be considered
equal to NaN’s in `b` in the output array.

Returns

    
yarray_like

    
Returns a boolean array of where `a` and `b` are equal within the given
tolerance. If both `a` and `b` are scalars, returns a single boolean value.

See also

`allclose`

`math.isclose`

#### Notes

New in version 1.7.0.

For finite values, isclose uses the following equation to test whether two
floating point values are equivalent.

absolute(`a` \- `b`) <= (`atol` \+ `rtol` * absolute(`b`))

Unlike the built-in `math.isclose`, the above equation is not symmetric in `a`
and `b` – it assumes `b` is the reference value – so that `isclose(a, b)`
might be different from `isclose(b, a)`. Furthermore, the default value of
atol is not zero, and is used to determine what small values should be
considered close to zero. The default value is appropriate for expected values
of order unity: if the expected values are significantly smaller than one, it
can result in false positives. `atol` should be carefully selected for the use
case at hand. A zero value for `atol` will result in `False` if either `a` or
`b` is zero.

`isclose` is not defined for non-numeric data types. `bool` is considered a
numeric data-type for this purpose.

#### Examples

    
    >>> np.isclose([1e10,1e-7], [1.00001e10,1e-8])
    array([ True, False])
    >>> np.isclose([1e10,1e-8], [1.00001e10,1e-9])
    array([ True, True])
    >>> np.isclose([1e10,1e-8], [1.0001e10,1e-9])
    array([False,  True])
    >>> np.isclose([1.0, np.nan], [1.0, np.nan])
    array([ True, False])
    >>> np.isclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)
    array([ True, True])
    >>> np.isclose([1e-8, 1e-7], [0.0, 0.0])
    array([ True, False])
    >>> np.isclose([1e-100, 1e-7], [0.0, 0.0], atol=0.0)
    array([False, False])
    >>> np.isclose([1e-10, 1e-10], [1e-20, 0.0])
    array([ True,  True])
    >>> np.isclose([1e-10, 1e-10], [1e-20, 0.999999e-10], atol=0.0)
    array([False,  True])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.isclose.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

