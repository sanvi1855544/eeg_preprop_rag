# numpy.char.lstrip

char.lstrip(a, chars=None)[source]

    
For each element in `a`, return a copy with the leading characters removed.

Calls `str.lstrip` element-wise.

Parameters

    
aarray-like, {str, unicode}

    
Input array.

chars{str, unicode}, optional

    
The `chars` argument is a string specifying the set of characters to be
removed. If omitted or None, the `chars` argument defaults to removing
whitespace. The `chars` argument is not a prefix; rather, all combinations of
its values are stripped.

Returns

    
outndarray, {str, unicode}

    
Output array of str or unicode, depending on input type

See also

`str.lstrip`

#### Examples

    
    >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])
    >>> c
    array(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')
    
The ‘a’ variable is unstripped from c[1] because whitespace leading.

    
    >>> np.char.lstrip(c, 'a')
    array(['AaAaA', '  aA  ', 'bBABba'], dtype='<U7')
    
    
    >>> np.char.lstrip(c, 'A') # leaves c unchanged
    array(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')
    >>> (np.char.lstrip(c, ' ') == np.char.lstrip(c, '')).all()
    ... # XXX: is this a regression? This used to return True
    ... # np.char.lstrip(c,'') does not modify c at all.
    False
    >>> (np.char.lstrip(c, ' ') == np.char.lstrip(c, None)).all()
    True
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.char.lstrip.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

