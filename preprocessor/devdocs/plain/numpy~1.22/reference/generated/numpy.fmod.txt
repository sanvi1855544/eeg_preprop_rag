# numpy.fmod

numpy.fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K',
dtype=None, subok=True[, signature, extobj]) = <ufunc 'fmod'>

    
Returns the element-wise remainder of division.

This is the NumPy implementation of the C library function fmod, the remainder
has the same sign as the dividend `x1`. It is equivalent to the Matlab(TM)
`rem` function and should not be confused with the Python modulus operator `x1
% x2`.

Parameters

    
x1array_like

    
Dividend.

x2array_like

    
Divisor. If `x1.shape != x2.shape`, they must be broadcastable to a common
shape (which becomes the shape of the output).

outndarray, None, or tuple of ndarray and None, optional

    
A location into which the result is stored. If provided, it must have a shape
that the inputs broadcast to. If not provided or None, a freshly-allocated
array is returned. A tuple (possible only as a keyword argument) must have
length equal to the number of outputs.

wherearray_like, optional

    
This condition is broadcast over the input. At locations where the condition
is True, the `out` array will be set to the ufunc result. Elsewhere, the `out`
array will retain its original value. Note that if an uninitialized `out`
array is created via the default `out=None`, locations within it where the
condition is False will remain uninitialized.

**kwargs

    
For other keyword-only arguments, see the ufunc docs.

Returns

    
yarray_like

    
The remainder of the division of `x1` by `x2`. This is a scalar if both `x1`
and `x2` are scalars.

See also

`remainder`

    
Equivalent to the Python `%` operator.

`divide`

#### Notes

The result of the modulo operation for negative dividend and divisors is bound
by conventions. For `fmod`, the sign of result is the sign of the dividend,
while for `remainder` the sign of the result is the sign of the divisor. The
`fmod` function is equivalent to the Matlab(TM) `rem` function.

#### Examples

    
    >>> np.fmod([-3, -2, -1, 1, 2, 3], 2)
    array([-1,  0, -1,  1,  0,  1])
    >>> np.remainder([-3, -2, -1, 1, 2, 3], 2)
    array([1, 0, 1, 1, 0, 1])
    
    
    >>> np.fmod([5, 3], [2, 2.])
    array([ 1.,  1.])
    >>> a = np.arange(-3, 3).reshape(3, 2)
    >>> a
    array([[-3, -2],
           [-1,  0],
           [ 1,  2]])
    >>> np.fmod(a, [2,2])
    array([[-1,  0],
           [-1,  0],
           [ 1,  0]])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.fmod.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

