# numpy.left_shift

numpy.left_shift(x1, x2, /, out=None, *, where=True, casting='same_kind',
order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'left_shift'>

    
Shift the bits of an integer to the left.

Bits are shifted to the left by appending `x2` 0s at the right of `x1`. Since
the internal representation of numbers is in binary format, this operation is
equivalent to multiplying `x1` by `2**x2`.

Parameters

    
x1array_like of integer type

    
Input values.

x2array_like of integer type

    
Number of zeros to append to `x1`. Has to be non-negative. If `x1.shape !=
x2.shape`, they must be broadcastable to a common shape (which becomes the
shape of the output).

outndarray, None, or tuple of ndarray and None, optional

    
A location into which the result is stored. If provided, it must have a shape
that the inputs broadcast to. If not provided or None, a freshly-allocated
array is returned. A tuple (possible only as a keyword argument) must have
length equal to the number of outputs.

wherearray_like, optional

    
This condition is broadcast over the input. At locations where the condition
is True, the `out` array will be set to the ufunc result. Elsewhere, the `out`
array will retain its original value. Note that if an uninitialized `out`
array is created via the default `out=None`, locations within it where the
condition is False will remain uninitialized.

**kwargs

    
For other keyword-only arguments, see the ufunc docs.

Returns

    
outarray of integer type

    
Return `x1` with bits shifted `x2` times to the left. This is a scalar if both
`x1` and `x2` are scalars.

See also

`right_shift`

    
Shift the bits of an integer to the right.

`binary_repr`

    
Return the binary representation of the input number as a string.

#### Examples

    
    >>> np.binary_repr(5)
    '101'
    >>> np.left_shift(5, 2)
    20
    >>> np.binary_repr(20)
    '10100'
    
    
    >>> np.left_shift(5, [1,2,3])
    array([10, 20, 40])
    
Note that the dtype of the second argument may change the dtype of the result
and can lead to unexpected results in some cases (see Casting Rules):

    
    >>> a = np.left_shift(np.uint8(255), 1) # Expect 254
    >>> print(a, type(a)) # Unexpected result due to upcasting
    510 <class 'numpy.int64'>
    >>> b = np.left_shift(np.uint8(255), np.uint8(1))
    >>> print(b, type(b))
    254 <class 'numpy.uint8'>
    
The `<<` operator can be used as a shorthand for `np.left_shift` on ndarrays.

    
    >>> x1 = 5
    >>> x2 = np.array([1, 2, 3])
    >>> x1 << x2
    array([10, 20, 40])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.left_shift.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

