# numpy.expm1

numpy.expm1(x, /, out=None, *, where=True, casting='same_kind', order='K',
dtype=None, subok=True[, signature, extobj]) = <ufunc 'expm1'>

    
Calculate `exp(x) - 1` for all elements in the array.

Parameters

    
xarray_like

    
Input values.

outndarray, None, or tuple of ndarray and None, optional

    
A location into which the result is stored. If provided, it must have a shape
that the inputs broadcast to. If not provided or None, a freshly-allocated
array is returned. A tuple (possible only as a keyword argument) must have
length equal to the number of outputs.

wherearray_like, optional

    
This condition is broadcast over the input. At locations where the condition
is True, the `out` array will be set to the ufunc result. Elsewhere, the `out`
array will retain its original value. Note that if an uninitialized `out`
array is created via the default `out=None`, locations within it where the
condition is False will remain uninitialized.

**kwargs

    
For other keyword-only arguments, see the ufunc docs.

Returns

    
outndarray or scalar

    
Element-wise exponential minus one: `out = exp(x) - 1`. This is a scalar if
`x` is a scalar.

See also

`log1p`

    
`log(1 + x)`, the inverse of expm1.

#### Notes

This function provides greater precision than `exp(x) - 1` for small values of
`x`.

#### Examples

The true value of `exp(1e-10) - 1` is `1.00000000005e-10` to about 32
significant digits. This example shows the superiority of expm1 in this case.

    
    >>> np.expm1(1e-10)
    1.00000000005e-10
    >>> np.exp(1e-10) - 1
    1.000000082740371e-10
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.expm1.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

