# numpy.all

numpy.all(a, axis=None, out=None, keepdims=<no value>, *, where=<no
value>)[source]

    
Test whether all array elements along a given axis evaluate to True.

Parameters

    
aarray_like

    
Input array or object that can be converted to an array.

axisNone or int or tuple of ints, optional

    
Axis or axes along which a logical AND reduction is performed. The default
(`axis=None`) is to perform a logical AND over all the dimensions of the input
array. `axis` may be negative, in which case it counts from the last to the
first axis.

New in version 1.7.0.

If this is a tuple of ints, a reduction is performed on multiple axes, instead
of a single axis or all the axes as before.

outndarray, optional

    
Alternate output array in which to place the result. It must have the same
shape as the expected output and its type is preserved (e.g., if `dtype(out)`
is float, the result will consist of 0.0’s and 1.0’s). See Output type
determination for more details.

keepdimsbool, optional

    
If this is set to True, the axes which are reduced are left in the result as
dimensions with size one. With this option, the result will broadcast
correctly against the input array.

If the default value is passed, then `keepdims` will not be passed through to
the `all` method of sub-classes of `ndarray`, however any non-default value
will be. If the sub-class’ method does not implement `keepdims` any exceptions
will be raised.

wherearray_like of bool, optional

    
Elements to include in checking for all `True` values. See `reduce` for
details.

New in version 1.20.0.

Returns

    
allndarray, bool

    
A new boolean or array is returned unless `out` is specified, in which case a
reference to `out` is returned.

See also

`ndarray.all`

    
equivalent method

`any`

    
Test whether any element along a given axis evaluates to True.

#### Notes

Not a Number (NaN), positive infinity and negative infinity evaluate to `True`
because these are not equal to zero.

#### Examples

    
    >>> np.all([[True,False],[True,True]])
    False
    
    
    >>> np.all([[True,False],[True,True]], axis=0)
    array([ True, False])
    
    
    >>> np.all([-1, 4, 5])
    True
    
    
    >>> np.all([1.0, np.nan])
    True
    
    
    >>> np.all([[True, True], [False, True]], where=[[True], [False]])
    True
    
    
    >>> o=np.array(False)
    >>> z=np.all([-1, 4, 5], out=o)
    >>> id(z), id(o), z
    (28293632, 28293632, array(True)) # may vary
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.all.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

