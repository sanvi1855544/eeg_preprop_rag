# numpy.testing.assert_equal

testing.assert_equal(actual, desired, err_msg='', verbose=True)[source]

    
Raises an AssertionError if two objects are not equal.

Given two objects (scalars, lists, tuples, dictionaries or numpy arrays),
check that all elements of these objects are equal. An exception is raised at
the first conflicting values.

When one of `actual` and `desired` is a scalar and the other is array_like,
the function checks that each element of the array_like object is equal to the
scalar.

This function handles NaN comparisons as if NaN was a “normal” number. That
is, AssertionError is not raised if both objects have NaNs in the same
positions. This is in contrast to the IEEE standard on NaNs, which says that
NaN compared to anything must return False.

Parameters

    
actualarray_like

    
The object to check.

desiredarray_like

    
The expected object.

err_msgstr, optional

    
The error message to be printed in case of failure.

verbosebool, optional

    
If True, the conflicting values are appended to the error message.

Raises

    
AssertionError

    
If actual and desired are not equal.

#### Examples

    
    >>> np.testing.assert_equal([4,5], [4,6])
    Traceback (most recent call last):
        ...
    AssertionError:
    Items are not equal:
    item=1
     ACTUAL: 5
     DESIRED: 6
    
The following comparison does not raise an exception. There are NaNs in the
inputs, but they are in the same positions.

    
    >>> np.testing.assert_equal(np.array([1.0, 2.0, np.nan]), [1, 2, np.nan])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.testing.assert_equal.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

