# numpy.bitwise_xor

numpy.bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind',
order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc
'bitwise_xor'>

    
Compute the bit-wise XOR of two arrays element-wise.

Computes the bit-wise XOR of the underlying binary representation of the
integers in the input arrays. This ufunc implements the C/Python operator `^`.

Parameters

    
x1, x2array_like

    
Only integer and boolean types are handled. If `x1.shape != x2.shape`, they
must be broadcastable to a common shape (which becomes the shape of the
output).

outndarray, None, or tuple of ndarray and None, optional

    
A location into which the result is stored. If provided, it must have a shape
that the inputs broadcast to. If not provided or None, a freshly-allocated
array is returned. A tuple (possible only as a keyword argument) must have
length equal to the number of outputs.

wherearray_like, optional

    
This condition is broadcast over the input. At locations where the condition
is True, the `out` array will be set to the ufunc result. Elsewhere, the `out`
array will retain its original value. Note that if an uninitialized `out`
array is created via the default `out=None`, locations within it where the
condition is False will remain uninitialized.

**kwargs

    
For other keyword-only arguments, see the ufunc docs.

Returns

    
outndarray or scalar

    
Result. This is a scalar if both `x1` and `x2` are scalars.

See also

`logical_xor`

`bitwise_and`

`bitwise_or`

`binary_repr`

    
Return the binary representation of the input number as a string.

#### Examples

The number 13 is represented by `00001101`. Likewise, 17 is represented by
`00010001`. The bit-wise XOR of 13 and 17 is therefore `00011100`, or 28:

    
    >>> np.bitwise_xor(13, 17)
    28
    >>> np.binary_repr(28)
    '11100'
    
    
    >>> np.bitwise_xor(31, 5)
    26
    >>> np.bitwise_xor([31,3], 5)
    array([26,  6])
    
    
    >>> np.bitwise_xor([31,3], [5,6])
    array([26,  5])
    >>> np.bitwise_xor([True, True], [False, True])
    array([ True, False])
    
The `^` operator can be used as a shorthand for `np.bitwise_xor` on ndarrays.

    
    >>> x1 = np.array([True, True])
    >>> x2 = np.array([False, True])
    >>> x1 ^ x2
    array([ True, False])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.bitwise_xor.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

