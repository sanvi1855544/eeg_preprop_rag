# numpy.linalg.solve

linalg.solve(a, b)[source]

    
Solve a linear matrix equation, or system of linear scalar equations.

Computes the “exact” solution, `x`, of the well-determined, i.e., full rank,
linear matrix equation `ax = b`.

Parameters

    
a(…, M, M) array_like

    
Coefficient matrix.

b{(…, M,), (…, M, K)}, array_like

    
Ordinate or “dependent variable” values.

Returns

    
x{(…, M,), (…, M, K)} ndarray

    
Solution to the system a x = b. Returned shape is identical to `b`.

Raises

    
LinAlgError

    
If `a` is singular or not square.

See also

`scipy.linalg.solve`

    
Similar function in SciPy.

#### Notes

New in version 1.8.0.

Broadcasting rules apply, see the `numpy.linalg` documentation for details.

The solutions are computed using LAPACK routine `_gesv`.

`a` must be square and of full-rank, i.e., all rows (or, equivalently,
columns) must be linearly independent; if either is not true, use `lstsq` for
the least-squares best “solution” of the system/equation.

#### References

1

    
G. Strang, Linear Algebra and Its Applications, 2nd Ed., Orlando, FL, Academic
Press, Inc., 1980, pg. 22.

#### Examples

Solve the system of equations `x0 + 2 * x1 = 1` and `3 * x0 + 5 * x1 = 2`:

    
    >>> a = np.array([[1, 2], [3, 5]])
    >>> b = np.array([1, 2])
    >>> x = np.linalg.solve(a, b)
    >>> x
    array([-1.,  1.])
    
Check that the solution is correct:

    
    >>> np.allclose(np.dot(a, x), b)
    True
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.linalg.solve.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

