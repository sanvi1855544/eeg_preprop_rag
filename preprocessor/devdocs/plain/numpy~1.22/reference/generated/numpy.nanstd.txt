# numpy.nanstd

numpy.nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>,
*, where=<no value>)[source]

    
Compute the standard deviation along the specified axis, while ignoring NaNs.

Returns the standard deviation, a measure of the spread of a distribution, of
the non-NaN array elements. The standard deviation is computed for the
flattened array by default, otherwise over the specified axis.

For all-NaN slices or slices with zero degrees of freedom, NaN is returned and
a `RuntimeWarning` is raised.

New in version 1.8.0.

Parameters

    
aarray_like

    
Calculate the standard deviation of the non-NaN values.

axis{int, tuple of int, None}, optional

    
Axis or axes along which the standard deviation is computed. The default is to
compute the standard deviation of the flattened array.

dtypedtype, optional

    
Type to use in computing the standard deviation. For arrays of integer type
the default is float64, for arrays of float types it is the same as the array
type.

outndarray, optional

    
Alternative output array in which to place the result. It must have the same
shape as the expected output but the type (of the calculated values) will be
cast if necessary.

ddofint, optional

    
Means Delta Degrees of Freedom. The divisor used in calculations is `N -
ddof`, where `N` represents the number of non-NaN elements. By default `ddof`
is zero.

keepdimsbool, optional

    
If this is set to True, the axes which are reduced are left in the result as
dimensions with size one. With this option, the result will broadcast
correctly against the original `a`.

If this value is anything but the default it is passed through as-is to the
relevant functions of the sub-classes. If these functions do not have a
`keepdims` kwarg, a RuntimeError will be raised.

wherearray_like of bool, optional

    
Elements to include in the standard deviation. See `reduce` for details.

New in version 1.22.0.

Returns

    
standard_deviationndarray, see dtype parameter above.

    
If `out` is None, return a new array containing the standard deviation,
otherwise return a reference to the output array. If ddof is >= the number of
non-NaN elements in a slice or the slice contains only NaNs, then the result
for that slice is NaN.

See also

`var`, `mean`, `std`

`nanvar`, `nanmean`

Output type determination

#### Notes

The standard deviation is the square root of the average of the squared
deviations from the mean: `std = sqrt(mean(abs(x - x.mean())**2))`.

The average squared deviation is normally calculated as `x.sum() / N`, where
`N = len(x)`. If, however, `ddof` is specified, the divisor `N - ddof` is used
instead. In standard statistical practice, `ddof=1` provides an unbiased
estimator of the variance of the infinite population. `ddof=0` provides a
maximum likelihood estimate of the variance for normally distributed
variables. The standard deviation computed in this function is the square root
of the estimated variance, so even with `ddof=1`, it will not be an unbiased
estimate of the standard deviation per se.

Note that, for complex numbers, `std` takes the absolute value before
squaring, so that the result is always real and nonnegative.

For floating-point input, the std is computed using the same precision the
input has. Depending on the input data, this can cause the results to be
inaccurate, especially for float32 (see example below). Specifying a higher-
accuracy accumulator using the `dtype` keyword can alleviate this issue.

#### Examples

    
    >>> a = np.array([[1, np.nan], [3, 4]])
    >>> np.nanstd(a)
    1.247219128924647
    >>> np.nanstd(a, axis=0)
    array([1., 0.])
    >>> np.nanstd(a, axis=1)
    array([0.,  0.5]) # may vary
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.nanstd.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

