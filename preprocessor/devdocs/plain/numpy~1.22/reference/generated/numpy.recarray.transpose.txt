# numpy.recarray.transpose

method

recarray.transpose(*axes)

    
Returns a view of the array with axes transposed.

For a 1-D array this has no effect, as a transposed vector is simply the same
vector. To convert a 1-D array into a 2D column vector, an additional
dimension must be added. `np.atleast2d(a).T` achieves this, as does `a[:,
np.newaxis]`. For a 2-D array, this is a standard matrix transpose. For an n-D
array, if axes are given, their order indicates how the axes are permuted (see
Examples). If axes are not provided and `a.shape = (i[0], i[1], ... i[n-2],
i[n-1])`, then `a.transpose().shape = (i[n-1], i[n-2], ... i[1], i[0])`.

Parameters

    
axesNone, tuple of ints, or `n` ints

    
  * None or no argument: reverses the order of the axes.
  * tuple of ints: `i` in the `j`-th place in the tuple means `a`’s `i`-th axis becomes `a.transpose()`’s `j`-th axis.
  * `n` ints: same as an n-tuple of the same ints (this form is intended simply as a “convenience” alternative to the tuple form)

Returns

    
outndarray

    
View of `a`, with axes suitably permuted.

See also

`transpose`

    
Equivalent function

`ndarray.T`

    
Array property returning the array transposed.

`ndarray.reshape`

    
Give a new shape to an array without changing its data.

#### Examples

    
    >>> a = np.array([[1, 2], [3, 4]])
    >>> a
    array([[1, 2],
           [3, 4]])
    >>> a.transpose()
    array([[1, 3],
           [2, 4]])
    >>> a.transpose((1, 0))
    array([[1, 3],
           [2, 4]])
    >>> a.transpose(1, 0)
    array([[1, 3],
           [2, 4]])
    
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/generated/numpy.recarray.transpose.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

