# Universal functions (ufunc)

See also

Universal functions (ufunc) basics

A universal function (or ufunc for short) is a function that operates on
`ndarrays` in an element-by-element fashion, supporting array broadcasting,
type casting, and several other standard features. That is, a ufunc is a
“vectorized” wrapper for a function that takes a fixed number of specific
inputs and produces a fixed number of specific outputs. For detailed
information on universal functions, see Universal functions (ufunc) basics.

## ufunc

`numpy.ufunc`() | Functions that operate element by element on whole arrays.  
---|---  
### Optional keyword arguments

All ufuncs take optional keyword arguments. Most of these represent advanced
usage and will not typically be used.

#### out

New in version 1.6.

The first output can be provided as either a positional or a keyword
parameter. Keyword ‘out’ arguments are incompatible with positional ones.

New in version 1.10.

The ‘out’ keyword argument is expected to be a tuple with one entry per output
(which can be None for arrays to be allocated by the ufunc). For ufuncs with a
single output, passing a single array (instead of a tuple holding a single
array) is also valid.

Passing a single array in the ‘out’ keyword argument to a ufunc with multiple
outputs is deprecated, and will raise a warning in numpy 1.10, and an error in
a future release.

If ‘out’ is None (the default), a uninitialized return array is created. The
output array is then filled with the results of the ufunc in the places that
the broadcast ‘where’ is True. If ‘where’ is the scalar True (the default),
then this corresponds to the entire output being filled. Note that outputs not
explicitly filled are left with their uninitialized values.

New in version 1.13.

Operations where ufunc input and output operands have memory overlap are
defined to be the same as for equivalent operations where there is no memory
overlap. Operations affected make temporary copies as needed to eliminate data
dependency. As detecting these cases is computationally expensive, a heuristic
is used, which may in rare cases result in needless temporary copies. For
operations where the data dependency is simple enough for the heuristic to
analyze, temporary copies will not be made even if the arrays overlap, if it
can be deduced copies are not necessary. As an example, `np.add(a, b, out=a)`
will not involve copies.

#### where

New in version 1.7.

Accepts a boolean array which is broadcast together with the operands. Values
of True indicate to calculate the ufunc at that position, values of False
indicate to leave the value in the output alone. This argument cannot be used
for generalized ufuncs as those take non-scalar input.

Note that if an uninitialized return array is created, values of False will
leave those values uninitialized.

#### axes

New in version 1.15.

A list of tuples with indices of axes a generalized ufunc should operate on.
For instance, for a signature of `(i,j),(j,k)->(i,k)` appropriate for matrix
multiplication, the base elements are two-dimensional matrices and these are
taken to be stored in the two last axes of each argument. The corresponding
axes keyword would be `[(-2, -1), (-2, -1), (-2, -1)]`. For simplicity, for
generalized ufuncs that operate on 1-dimensional arrays (vectors), a single
integer is accepted instead of a single-element tuple, and for generalized
ufuncs for which all outputs are scalars, the output tuples can be omitted.

#### axis

New in version 1.15.

A single axis over which a generalized ufunc should operate. This is a short-
cut for ufuncs that operate over a single, shared core dimension, equivalent
to passing in `axes` with entries of `(axis,)` for each single-core-dimension
argument and `()` for all others. For instance, for a signature `(i),(i)->()`,
it is equivalent to passing in `axes=[(axis,), (axis,), ()]`.

#### keepdims

New in version 1.15.

If this is set to `True`, axes which are reduced over will be left in the
result as a dimension with size one, so that the result will broadcast
correctly against the inputs. This option can only be used for generalized
ufuncs that operate on inputs that all have the same number of core dimensions
and with outputs that have no core dimensions, i.e., with signatures like
`(i),(i)->()` or `(m,m)->()`. If used, the location of the dimensions in the
output can be controlled with `axes` and `axis`.

#### casting

New in version 1.6.

May be ‘no’, ‘equiv’, ‘safe’, ‘same_kind’, or ‘unsafe’. See `can_cast` for
explanations of the parameter values.

Provides a policy for what kind of casting is permitted. For compatibility
with previous versions of NumPy, this defaults to ‘unsafe’ for numpy < 1.7. In
numpy 1.7 a transition to ‘same_kind’ was begun where ufuncs produce a
DeprecationWarning for calls which are allowed under the ‘unsafe’ rules, but
not under the ‘same_kind’ rules. From numpy 1.10 and onwards, the default is
‘same_kind’.

#### order

New in version 1.6.

Specifies the calculation iteration order/memory layout of the output array.
Defaults to ‘K’. ‘C’ means the output should be C-contiguous, ‘F’ means
F-contiguous, ‘A’ means F-contiguous if the inputs are F-contiguous and not
also not C-contiguous, C-contiguous otherwise, and ‘K’ means to match the
element ordering of the inputs as closely as possible.

#### dtype

New in version 1.6.

Overrides the DType of the output arrays the same way as the signature. This
should ensure a matching precision of the calculation. The exact calculation
DTypes chosen may depend on the ufunc and the inputs may be cast to this DType
to perform the calculation.

#### subok

New in version 1.6.

Defaults to true. If set to false, the output will always be a strict array,
not a subtype.

#### signature

Either a Dtype, a tuple of DTypes, or a special signature string indicating
the input and output types of a ufunc.

This argument allows the user to specify exact DTypes to be used for the
calculation. Casting will be used as necessary. The actual DType of the input
arrays is not considered unless `signature` is `None` for that array.

When all DTypes are fixed, a specific loop is chosen or an error raised if no
matching loop exists. If some DTypes are not specified and left `None`, the
behaviour may depend on the ufunc. At this time, a list of available
signatures is provided by the types attribute of the ufunc. (This list may be
missing DTypes not defined by NumPy.)

The `signature` only specifies the DType class/type. For example, it can
specify that the operation should be `datetime64` or `float64` operation. It
does not specify the `datetime64` time-unit or the `float64` byte-order.

For backwards compatibility this argument can also be provided as sig,
although the long form is preferred. Note that this should not be confused
with the generalized ufunc signature that is stored in the signature attribute
of the of the ufunc object.

#### extobj

A list of length 3 specifying the ufunc buffer-size, the error mode integer,
and the error call-back function. Normally, these values are looked up in a
thread-specific dictionary. Passing them here circumvents that look up and
uses the low-level specification provided for the error mode. This may be
useful, for example, as an optimization for calculations requiring many ufunc
calls on small arrays in a loop.

### Attributes

There are some informational attributes that universal functions possess. None
of the attributes can be set.

__doc__ | A docstring for each ufunc. The first part of the docstring is dynamically generated from the number of outputs, the name, and the number of inputs. The second part of the docstring is provided at creation time and stored with the ufunc.  
---|---  
__name__ | The name of the ufunc.  
`ufunc.nin` | The number of inputs.  
---|---  
`ufunc.nout` | The number of outputs.  
`ufunc.nargs` | The number of arguments.  
`ufunc.ntypes` | The number of types.  
`ufunc.types` | Returns a list with types grouped input->output.  
`ufunc.identity` | The identity value.  
`ufunc.signature` | Definition of the core elements a generalized ufunc operates on.  
### Methods

`ufunc.reduce`(array[, axis, dtype, out, ...]) | Reduces `array`'s dimension by one, by applying ufunc along one axis.  
---|---  
`ufunc.accumulate`(array[, axis, dtype, out]) | Accumulate the result of applying the operator to all elements.  
`ufunc.reduceat`(array, indices[, axis, ...]) | Performs a (local) reduce with specified slices over a single axis.  
`ufunc.outer`(A, B, /, **kwargs) | Apply the ufunc `op` to all pairs (a, b) with a in `A` and b in `B`.  
`ufunc.at`(a, indices[, b]) | Performs unbuffered in place operation on operand 'a' for elements specified by 'indices'.  
Warning

A reduce-like operation on an array with a data-type that has a range “too
small” to handle the result will silently wrap. One should use `dtype` to
increase the size of the data-type over which reduction takes place.

## Available ufuncs

There are currently more than 60 universal functions defined in `numpy` on one
or more types, covering a wide variety of operations. Some of these ufuncs are
called automatically on arrays when the relevant infix notation is used (e.g.,
`add(a, b)` is called internally when `a + b` is written and a or b is an
`ndarray`). Nevertheless, you may still want to use the ufunc call in order to
use the optional output argument(s) to place the output(s) in an object (or
objects) of your choice.

Recall that each ufunc operates element-by-element. Therefore, each scalar
ufunc will be described as if acting on a set of scalar inputs to return a set
of scalar outputs.

Note

The ufunc still returns its output(s) even if you use the optional output
argument(s).

### Math operations

`add`(x1, x2, /[, out, where, casting, order, ...]) | Add arguments element-wise.  
---|---  
`subtract`(x1, x2, /[, out, where, casting, ...]) | Subtract arguments, element-wise.  
`multiply`(x1, x2, /[, out, where, casting, ...]) | Multiply arguments element-wise.  
`matmul`(x1, x2, /[, out, casting, order, ...]) | Matrix product of two arrays.  
`divide`(x1, x2, /[, out, where, casting, ...]) | Returns a true division of the inputs, element-wise.  
`logaddexp`(x1, x2, /[, out, where, casting, ...]) | Logarithm of the sum of exponentiations of the inputs.  
`logaddexp2`(x1, x2, /[, out, where, casting, ...]) | Logarithm of the sum of exponentiations of the inputs in base-2.  
`true_divide`(x1, x2, /[, out, where, ...]) | Returns a true division of the inputs, element-wise.  
`floor_divide`(x1, x2, /[, out, where, ...]) | Return the largest integer smaller or equal to the division of the inputs.  
`negative`(x, /[, out, where, casting, order, ...]) | Numerical negative, element-wise.  
`positive`(x, /[, out, where, casting, order, ...]) | Numerical positive, element-wise.  
`power`(x1, x2, /[, out, where, casting, ...]) | First array elements raised to powers from second array, element-wise.  
`float_power`(x1, x2, /[, out, where, ...]) | First array elements raised to powers from second array, element-wise.  
`remainder`(x1, x2, /[, out, where, casting, ...]) | Returns the element-wise remainder of division.  
`mod`(x1, x2, /[, out, where, casting, order, ...]) | Returns the element-wise remainder of division.  
`fmod`(x1, x2, /[, out, where, casting, ...]) | Returns the element-wise remainder of division.  
`divmod`(x1, x2[, out1, out2], / [[, out, ...]) | Return element-wise quotient and remainder simultaneously.  
`absolute`(x, /[, out, where, casting, order, ...]) | Calculate the absolute value element-wise.  
`fabs`(x, /[, out, where, casting, order, ...]) | Compute the absolute values element-wise.  
`rint`(x, /[, out, where, casting, order, ...]) | Round elements of the array to the nearest integer.  
`sign`(x, /[, out, where, casting, order, ...]) | Returns an element-wise indication of the sign of a number.  
`heaviside`(x1, x2, /[, out, where, casting, ...]) | Compute the Heaviside step function.  
`conj`(x, /[, out, where, casting, order, ...]) | Return the complex conjugate, element-wise.  
`conjugate`(x, /[, out, where, casting, ...]) | Return the complex conjugate, element-wise.  
`exp`(x, /[, out, where, casting, order, ...]) | Calculate the exponential of all elements in the input array.  
`exp2`(x, /[, out, where, casting, order, ...]) | Calculate `2**p` for all `p` in the input array.  
`log`(x, /[, out, where, casting, order, ...]) | Natural logarithm, element-wise.  
`log2`(x, /[, out, where, casting, order, ...]) | Base-2 logarithm of `x`.  
`log10`(x, /[, out, where, casting, order, ...]) | Return the base 10 logarithm of the input array, element-wise.  
`expm1`(x, /[, out, where, casting, order, ...]) | Calculate `exp(x) - 1` for all elements in the array.  
`log1p`(x, /[, out, where, casting, order, ...]) | Return the natural logarithm of one plus the input array, element-wise.  
`sqrt`(x, /[, out, where, casting, order, ...]) | Return the non-negative square-root of an array, element-wise.  
`square`(x, /[, out, where, casting, order, ...]) | Return the element-wise square of the input.  
`cbrt`(x, /[, out, where, casting, order, ...]) | Return the cube-root of an array, element-wise.  
`reciprocal`(x, /[, out, where, casting, ...]) | Return the reciprocal of the argument, element-wise.  
`gcd`(x1, x2, /[, out, where, casting, order, ...]) | Returns the greatest common divisor of `|x1|` and `|x2|`  
`lcm`(x1, x2, /[, out, where, casting, order, ...]) | Returns the lowest common multiple of `|x1|` and `|x2|`  
Tip

The optional output arguments can be used to help you save memory for large
calculations. If your arrays are large, complicated expressions can take
longer than absolutely necessary due to the creation and (later) destruction
of temporary calculation spaces. For example, the expression `G = A * B + C`
is equivalent to `T1 = A * B; G = T1 + C; del T1`. It will be more quickly
executed as `G = A * B; add(G, C, G)` which is the same as `G = A * B; G +=
C`.

### Trigonometric functions

All trigonometric functions use radians when an angle is called for. The ratio
of degrees to radians is \\(180^{\circ}/\pi.\\)

`sin`(x, /[, out, where, casting, order, ...]) | Trigonometric sine, element-wise.  
---|---  
`cos`(x, /[, out, where, casting, order, ...]) | Cosine element-wise.  
`tan`(x, /[, out, where, casting, order, ...]) | Compute tangent element-wise.  
`arcsin`(x, /[, out, where, casting, order, ...]) | Inverse sine, element-wise.  
`arccos`(x, /[, out, where, casting, order, ...]) | Trigonometric inverse cosine, element-wise.  
`arctan`(x, /[, out, where, casting, order, ...]) | Trigonometric inverse tangent, element-wise.  
`arctan2`(x1, x2, /[, out, where, casting, ...]) | Element-wise arc tangent of `x1/x2` choosing the quadrant correctly.  
`hypot`(x1, x2, /[, out, where, casting, ...]) | Given the "legs" of a right triangle, return its hypotenuse.  
`sinh`(x, /[, out, where, casting, order, ...]) | Hyperbolic sine, element-wise.  
`cosh`(x, /[, out, where, casting, order, ...]) | Hyperbolic cosine, element-wise.  
`tanh`(x, /[, out, where, casting, order, ...]) | Compute hyperbolic tangent element-wise.  
`arcsinh`(x, /[, out, where, casting, order, ...]) | Inverse hyperbolic sine element-wise.  
`arccosh`(x, /[, out, where, casting, order, ...]) | Inverse hyperbolic cosine, element-wise.  
`arctanh`(x, /[, out, where, casting, order, ...]) | Inverse hyperbolic tangent element-wise.  
`degrees`(x, /[, out, where, casting, order, ...]) | Convert angles from radians to degrees.  
`radians`(x, /[, out, where, casting, order, ...]) | Convert angles from degrees to radians.  
`deg2rad`(x, /[, out, where, casting, order, ...]) | Convert angles from degrees to radians.  
`rad2deg`(x, /[, out, where, casting, order, ...]) | Convert angles from radians to degrees.  
### Bit-twiddling functions

These function all require integer arguments and they manipulate the bit-
pattern of those arguments.

`bitwise_and`(x1, x2, /[, out, where, ...]) | Compute the bit-wise AND of two arrays element-wise.  
---|---  
`bitwise_or`(x1, x2, /[, out, where, casting, ...]) | Compute the bit-wise OR of two arrays element-wise.  
`bitwise_xor`(x1, x2, /[, out, where, ...]) | Compute the bit-wise XOR of two arrays element-wise.  
`invert`(x, /[, out, where, casting, order, ...]) | Compute bit-wise inversion, or bit-wise NOT, element-wise.  
`left_shift`(x1, x2, /[, out, where, casting, ...]) | Shift the bits of an integer to the left.  
`right_shift`(x1, x2, /[, out, where, ...]) | Shift the bits of an integer to the right.  
### Comparison functions

`greater`(x1, x2, /[, out, where, casting, ...]) | Return the truth value of (x1 > x2) element-wise.  
---|---  
`greater_equal`(x1, x2, /[, out, where, ...]) | Return the truth value of (x1 >= x2) element-wise.  
`less`(x1, x2, /[, out, where, casting, ...]) | Return the truth value of (x1 < x2) element-wise.  
`less_equal`(x1, x2, /[, out, where, casting, ...]) | Return the truth value of (x1 <= x2) element-wise.  
`not_equal`(x1, x2, /[, out, where, casting, ...]) | Return (x1 != x2) element-wise.  
`equal`(x1, x2, /[, out, where, casting, ...]) | Return (x1 == x2) element-wise.  
Warning

Do not use the Python keywords `and` and `or` to combine logical array expressions. These keywords will test the truth value of the entire array (not element-by-element as you might expect). Use the bitwise operators & and | instead.
`logical_and`(x1, x2, /[, out, where, ...]) | Compute the truth value of x1 AND x2 element-wise.  
---|---  
`logical_or`(x1, x2, /[, out, where, casting, ...]) | Compute the truth value of x1 OR x2 element-wise.  
`logical_xor`(x1, x2, /[, out, where, ...]) | Compute the truth value of x1 XOR x2, element-wise.  
`logical_not`(x, /[, out, where, casting, ...]) | Compute the truth value of NOT x element-wise.  
Warning

The bit-wise operators & and | are the proper way to perform element-by-element array comparisons. Be sure you understand the operator precedence: `(a > 2) & (a < 5)` is the proper syntax because `a > 2 & a < 5` will result in an error due to the fact that `2 & a` is evaluated first.
`maximum`(x1, x2, /[, out, where, casting, ...]) | Element-wise maximum of array elements.  
---|---  
Tip

The Python function `max()` will find the maximum over a one-dimensional
array, but it will do so using a slower sequence interface. The reduce method
of the maximum ufunc is much faster. Also, the `max()` method will not give
answers you might expect for arrays with greater than one dimension. The
reduce method of minimum also allows you to compute a total minimum over an
array.

`minimum`(x1, x2, /[, out, where, casting, ...]) | Element-wise minimum of array elements.  
---|---  
Warning

the behavior of `maximum(a, b)` is different than that of `max(a, b)`. As a
ufunc, `maximum(a, b)` performs an element-by-element comparison of `a` and
`b` and chooses each element of the result according to which element in the
two arrays is larger. In contrast, `max(a, b)` treats the objects `a` and `b`
as a whole, looks at the (total) truth value of `a > b` and uses it to return
either `a` or `b` (as a whole). A similar difference exists between
`minimum(a, b)` and `min(a, b)`.

`fmax`(x1, x2, /[, out, where, casting, ...]) | Element-wise maximum of array elements.  
---|---  
`fmin`(x1, x2, /[, out, where, casting, ...]) | Element-wise minimum of array elements.  
### Floating functions

Recall that all of these functions work element-by-element over an array,
returning an array output. The description details only a single operation.

`isfinite`(x, /[, out, where, casting, order, ...]) | Test element-wise for finiteness (not infinity and not Not a Number).  
---|---  
`isinf`(x, /[, out, where, casting, order, ...]) | Test element-wise for positive or negative infinity.  
`isnan`(x, /[, out, where, casting, order, ...]) | Test element-wise for NaN and return result as a boolean array.  
`isnat`(x, /[, out, where, casting, order, ...]) | Test element-wise for NaT (not a time) and return result as a boolean array.  
`fabs`(x, /[, out, where, casting, order, ...]) | Compute the absolute values element-wise.  
`signbit`(x, /[, out, where, casting, order, ...]) | Returns element-wise True where signbit is set (less than zero).  
`copysign`(x1, x2, /[, out, where, casting, ...]) | Change the sign of x1 to that of x2, element-wise.  
`nextafter`(x1, x2, /[, out, where, casting, ...]) | Return the next floating-point value after x1 towards x2, element-wise.  
`spacing`(x, /[, out, where, casting, order, ...]) | Return the distance between x and the nearest adjacent number.  
`modf`(x[, out1, out2], / [[, out, where, ...]) | Return the fractional and integral parts of an array, element-wise.  
`ldexp`(x1, x2, /[, out, where, casting, ...]) | Returns x1 * 2**x2, element-wise.  
`frexp`(x[, out1, out2], / [[, out, where, ...]) | Decompose the elements of x into mantissa and twos exponent.  
`fmod`(x1, x2, /[, out, where, casting, ...]) | Returns the element-wise remainder of division.  
`floor`(x, /[, out, where, casting, order, ...]) | Return the floor of the input, element-wise.  
`ceil`(x, /[, out, where, casting, order, ...]) | Return the ceiling of the input, element-wise.  
`trunc`(x, /[, out, where, casting, order, ...]) | Return the truncated value of the input, element-wise.  
© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/ufuncs.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

