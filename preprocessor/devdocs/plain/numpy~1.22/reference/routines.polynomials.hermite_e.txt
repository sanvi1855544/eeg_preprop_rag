# HermiteE Series, “Probabilists” (numpy.polynomial.hermite_e)

This module provides a number of objects (mostly functions) useful for dealing
with Hermite_e series, including a `HermiteE` class that encapsulates the
usual arithmetic operations. (General information on how this module
represents and works with such polynomials is in the docstring for its
“parent” sub-package, `numpy.polynomial`).

## Classes

`HermiteE`(coef[, domain, window]) | An HermiteE series class.  
---|---  
## Constants

`hermedomain` | An array object represents a multidimensional, homogeneous array of fixed-size items.  
---|---  
`hermezero` | An array object represents a multidimensional, homogeneous array of fixed-size items.  
`hermeone` | An array object represents a multidimensional, homogeneous array of fixed-size items.  
`hermex` | An array object represents a multidimensional, homogeneous array of fixed-size items.  
## Arithmetic

`hermeadd`(c1, c2) | Add one Hermite series to another.  
---|---  
`hermesub`(c1, c2) | Subtract one Hermite series from another.  
`hermemulx`(c) | Multiply a Hermite series by x.  
`hermemul`(c1, c2) | Multiply one Hermite series by another.  
`hermediv`(c1, c2) | Divide one Hermite series by another.  
`hermepow`(c, pow[, maxpower]) | Raise a Hermite series to a power.  
`hermeval`(x, c[, tensor]) | Evaluate an HermiteE series at points x.  
`hermeval2d`(x, y, c) | Evaluate a 2-D HermiteE series at points (x, y).  
`hermeval3d`(x, y, z, c) | Evaluate a 3-D Hermite_e series at points (x, y, z).  
`hermegrid2d`(x, y, c) | Evaluate a 2-D HermiteE series on the Cartesian product of x and y.  
`hermegrid3d`(x, y, z, c) | Evaluate a 3-D HermiteE series on the Cartesian product of x, y, and z.  
## Calculus

`hermeder`(c[, m, scl, axis]) | Differentiate a Hermite_e series.  
---|---  
`hermeint`(c[, m, k, lbnd, scl, axis]) | Integrate a Hermite_e series.  
## Misc Functions

`hermefromroots`(roots) | Generate a HermiteE series with given roots.  
---|---  
`hermeroots`(c) | Compute the roots of a HermiteE series.  
`hermevander`(x, deg) | Pseudo-Vandermonde matrix of given degree.  
`hermevander2d`(x, y, deg) | Pseudo-Vandermonde matrix of given degrees.  
`hermevander3d`(x, y, z, deg) | Pseudo-Vandermonde matrix of given degrees.  
`hermegauss`(deg) | Gauss-HermiteE quadrature.  
`hermeweight`(x) | Weight function of the Hermite_e polynomials.  
`hermecompanion`(c) | Return the scaled companion matrix of c.  
`hermefit`(x, y, deg[, rcond, full, w]) | Least squares fit of Hermite series to data.  
`hermetrim`(c[, tol]) | Remove "small" "trailing" coefficients from a polynomial.  
`hermeline`(off, scl) | Hermite series whose graph is a straight line.  
`herme2poly`(c) | Convert a Hermite series to a polynomial.  
`poly2herme`(pol) | Convert a polynomial to a Hermite series.  
## See also

`numpy.polynomial`

© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/routines.polynomials.hermite_e.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

