# Hermite Series, “Physicists” (numpy.polynomial.hermite)

This module provides a number of objects (mostly functions) useful for dealing
with Hermite series, including a `Hermite` class that encapsulates the usual
arithmetic operations. (General information on how this module represents and
works with such polynomials is in the docstring for its “parent” sub-package,
`numpy.polynomial`).

## Classes

`Hermite`(coef[, domain, window]) | An Hermite series class.  
---|---  
## Constants

`hermdomain` | An array object represents a multidimensional, homogeneous array of fixed-size items.  
---|---  
`hermzero` | An array object represents a multidimensional, homogeneous array of fixed-size items.  
`hermone` | An array object represents a multidimensional, homogeneous array of fixed-size items.  
`hermx` | An array object represents a multidimensional, homogeneous array of fixed-size items.  
## Arithmetic

`hermadd`(c1, c2) | Add one Hermite series to another.  
---|---  
`hermsub`(c1, c2) | Subtract one Hermite series from another.  
`hermmulx`(c) | Multiply a Hermite series by x.  
`hermmul`(c1, c2) | Multiply one Hermite series by another.  
`hermdiv`(c1, c2) | Divide one Hermite series by another.  
`hermpow`(c, pow[, maxpower]) | Raise a Hermite series to a power.  
`hermval`(x, c[, tensor]) | Evaluate an Hermite series at points x.  
`hermval2d`(x, y, c) | Evaluate a 2-D Hermite series at points (x, y).  
`hermval3d`(x, y, z, c) | Evaluate a 3-D Hermite series at points (x, y, z).  
`hermgrid2d`(x, y, c) | Evaluate a 2-D Hermite series on the Cartesian product of x and y.  
`hermgrid3d`(x, y, z, c) | Evaluate a 3-D Hermite series on the Cartesian product of x, y, and z.  
## Calculus

`hermder`(c[, m, scl, axis]) | Differentiate a Hermite series.  
---|---  
`hermint`(c[, m, k, lbnd, scl, axis]) | Integrate a Hermite series.  
## Misc Functions

`hermfromroots`(roots) | Generate a Hermite series with given roots.  
---|---  
`hermroots`(c) | Compute the roots of a Hermite series.  
`hermvander`(x, deg) | Pseudo-Vandermonde matrix of given degree.  
`hermvander2d`(x, y, deg) | Pseudo-Vandermonde matrix of given degrees.  
`hermvander3d`(x, y, z, deg) | Pseudo-Vandermonde matrix of given degrees.  
`hermgauss`(deg) | Gauss-Hermite quadrature.  
`hermweight`(x) | Weight function of the Hermite polynomials.  
`hermcompanion`(c) | Return the scaled companion matrix of c.  
`hermfit`(x, y, deg[, rcond, full, w]) | Least squares fit of Hermite series to data.  
`hermtrim`(c[, tol]) | Remove "small" "trailing" coefficients from a polynomial.  
`hermline`(off, scl) | Hermite series whose graph is a straight line.  
`herm2poly`(c) | Convert a Hermite series to a polynomial.  
`poly2herm`(pol) | Convert a polynomial to a Hermite series.  
## See also

`numpy.polynomial`

© 2005–2021 NumPy Developers  
Licensed under the 3-clause BSD License.  
https://numpy.org/doc/1.22/reference/routines.polynomials.hermite.html

  *[ISP]: Internet Service Provider
  *[LIFO]: last-in, first-out
  *[FIFO]: first-in, first-out

