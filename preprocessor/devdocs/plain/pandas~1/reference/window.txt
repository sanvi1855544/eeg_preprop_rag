# Window

Rolling objects are returned by `.rolling` calls:
`pandas.DataFrame.rolling()`, `pandas.Series.rolling()`, etc. Expanding
objects are returned by `.expanding` calls: `pandas.DataFrame.expanding()`,
`pandas.Series.expanding()`, etc. ExponentialMovingWindow objects are returned
by `.ewm` calls: `pandas.DataFrame.ewm()`, `pandas.Series.ewm()`, etc.

## Rolling window functions

`Rolling.count`() | Calculate the rolling count of non NaN observations.  
---|---  
`Rolling.sum`(*args[, engine, engine_kwargs]) | Calculate the rolling sum.  
`Rolling.mean`(*args[, engine, engine_kwargs]) | Calculate the rolling mean.  
`Rolling.median`([engine, engine_kwargs]) | Calculate the rolling median.  
`Rolling.var`([ddof, engine, engine_kwargs]) | Calculate the rolling variance.  
`Rolling.std`([ddof, engine, engine_kwargs]) | Calculate the rolling standard deviation.  
`Rolling.min`(*args[, engine, engine_kwargs]) | Calculate the rolling minimum.  
`Rolling.max`(*args[, engine, engine_kwargs]) | Calculate the rolling maximum.  
`Rolling.corr`([other, pairwise, ddof]) | Calculate the rolling correlation.  
`Rolling.cov`([other, pairwise, ddof]) | Calculate the rolling sample covariance.  
`Rolling.skew`(**kwargs) | Calculate the rolling unbiased skewness.  
`Rolling.kurt`(**kwargs) | Calculate the rolling Fisher's definition of kurtosis without bias.  
`Rolling.apply`(func[, raw, engine, ...]) | Calculate the rolling custom aggregation function.  
`Rolling.aggregate`(func, *args, **kwargs) | Aggregate using one or more operations over the specified axis.  
`Rolling.quantile`(quantile[, interpolation]) | Calculate the rolling quantile.  
`Rolling.sem`([ddof]) | Calculate the rolling standard error of mean.  
`Rolling.rank`([method, ascending, pct]) | Calculate the rolling rank.  
## Weighted window functions

`Window.mean`(*args, **kwargs) | Calculate the rolling weighted window mean.  
---|---  
`Window.sum`(*args, **kwargs) | Calculate the rolling weighted window sum.  
`Window.var`([ddof]) | Calculate the rolling weighted window variance.  
`Window.std`([ddof]) | Calculate the rolling weighted window standard deviation.  
## Expanding window functions

`Expanding.count`() | Calculate the expanding count of non NaN observations.  
---|---  
`Expanding.sum`(*args[, engine, engine_kwargs]) | Calculate the expanding sum.  
`Expanding.mean`(*args[, engine, engine_kwargs]) | Calculate the expanding mean.  
`Expanding.median`([engine, engine_kwargs]) | Calculate the expanding median.  
`Expanding.var`([ddof, engine, engine_kwargs]) | Calculate the expanding variance.  
`Expanding.std`([ddof, engine, engine_kwargs]) | Calculate the expanding standard deviation.  
`Expanding.min`(*args[, engine, engine_kwargs]) | Calculate the expanding minimum.  
`Expanding.max`(*args[, engine, engine_kwargs]) | Calculate the expanding maximum.  
`Expanding.corr`([other, pairwise, ddof]) | Calculate the expanding correlation.  
`Expanding.cov`([other, pairwise, ddof]) | Calculate the expanding sample covariance.  
`Expanding.skew`(**kwargs) | Calculate the expanding unbiased skewness.  
`Expanding.kurt`(**kwargs) | Calculate the expanding Fisher's definition of kurtosis without bias.  
`Expanding.apply`(func[, raw, engine, ...]) | Calculate the expanding custom aggregation function.  
`Expanding.aggregate`(func, *args, **kwargs) | Aggregate using one or more operations over the specified axis.  
`Expanding.quantile`(quantile[, interpolation]) | Calculate the expanding quantile.  
`Expanding.sem`([ddof]) | Calculate the expanding standard error of mean.  
`Expanding.rank`([method, ascending, pct]) | Calculate the expanding rank.  
## Exponentially-weighted window functions

`ExponentialMovingWindow.mean`(*args[, ...]) | Calculate the ewm (exponential weighted moment) mean.  
---|---  
`ExponentialMovingWindow.sum`(*args[, engine, ...]) | Calculate the ewm (exponential weighted moment) sum.  
`ExponentialMovingWindow.std`([bias]) | Calculate the ewm (exponential weighted moment) standard deviation.  
`ExponentialMovingWindow.var`([bias]) | Calculate the ewm (exponential weighted moment) variance.  
`ExponentialMovingWindow.corr`([other, pairwise]) | Calculate the ewm (exponential weighted moment) sample correlation.  
`ExponentialMovingWindow.cov`([other, ...]) | Calculate the ewm (exponential weighted moment) sample covariance.  
## Window indexer

Base class for defining custom window boundaries.

`api.indexers.BaseIndexer`([index_array, ...]) | Base class for window bounds calculations.  
---|---  
`api.indexers.FixedForwardWindowIndexer`([...]) | Creates window boundaries for fixed-length windows that include the current row.  
`api.indexers.VariableOffsetWindowIndexer`([...]) | Calculate window boundaries based on a non-fixed offset such as a BusinessDay.  
© 2008–2022, AQR Capital Management, LLC, Lambda Foundry, Inc. and PyData
Development Team  
Licensed under the 3-clause BSD License.  
https://pandas.pydata.org/pandas-docs/version/1.4.0/reference/window.html

