# pandas.Series.__array__

Series.__array__(dtype=None)[source]

    
Return the values as a NumPy array.

Users should not call this directly. Rather, it is invoked by `numpy.array()`
and `numpy.asarray()`.

Parameters

    
dtype:str or numpy.dtype, optional

    
The dtype to use for the resulting NumPy array. By default, the dtype is
inferred from the data.

Returns

    
numpy.ndarray

    
The values in the series converted to a `numpy.ndarray` with the specified
dtype.

See also

`array`

    
Create a new array from data.

`Series.array`

    
Zero-copy view to the array backing the Series.

`Series.to_numpy`

    
Series method for similar behavior.

Examples

    
    >>> ser = pd.Series([1, 2, 3])
    >>> np.asarray(ser)
    array([1, 2, 3])
    
For timezone-aware data, the timezones may be retained with `dtype='object'`

    
    >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz="CET"))
    >>> np.asarray(tzser, dtype="object")
    array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),
           Timestamp('2000-01-02 00:00:00+0100', tz='CET')],
          dtype=object)
    
Or the values may be localized to UTC and the tzinfo discarded with
`dtype='datetime64[ns]'`

    
    >>> np.asarray(tzser, dtype="datetime64[ns]")  
    array(['1999-12-31T23:00:00.000000000', ...],
          dtype='datetime64[ns]')
    
© 2008–2022, AQR Capital Management, LLC, Lambda Foundry, Inc. and PyData
Development Team  
Licensed under the 3-clause BSD License.  
https://pandas.pydata.org/pandas-
docs/version/1.4.0/reference/api/pandas.Series.__array__.html

