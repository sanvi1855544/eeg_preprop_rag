# pandas.core.groupby.DataFrameGroupBy.transform

DataFrameGroupBy.transform(func, *args, engine=None, engine_kwargs=None,
**kwargs)[source]

    
Call function producing a like-indexed DataFrame on each group and return a
DataFrame having the same indexes as the original object filled with the
transformed values.

Parameters

    
f:function

    
Function to apply to each group.

Can also accept a Numba JIT function with `engine='numba'` specified.

If the `'numba'` engine is chosen, the function must be a user defined
function with `values` and `index` as the first and second arguments
respectively in the function signature. Each group’s index will be passed to
the user defined function and optionally available for use.

Changed in version 1.1.0.

*args
    
Positional arguments to pass to func.

engine:str, default None

    
  * `'cython'` : Runs the function through C-extensions from cython.
  * `'numba'` : Runs the function through JIT compiled code from numba.
  * `None` : Defaults to `'cython'` or the global setting `compute.use_numba`

New in version 1.1.0.

engine_kwargs:dict, default None

    
  * For `'cython'` engine, there are no accepted `engine_kwargs`
  * For `'numba'` engine, the engine can accept `nopython`, `nogil` and `parallel` dictionary keys. The values must either be `True` or `False`. The default `engine_kwargs` for the `'numba'` engine is `{'nopython': True, 'nogil': False, 'parallel': False}` and will be applied to the function

New in version 1.1.0.

**kwargs

    
Keyword arguments to be passed into func.

Returns

    
DataFrame

See also

`DataFrame.groupby.apply`

    
Apply function `func` group-wise and combine the results together.

`DataFrame.groupby.aggregate`

    
Aggregate using one or more operations over the specified axis.

`DataFrame.transform`

    
Call `func` on self producing a DataFrame with the same axis shape as self.

Notes

Each group is endowed the attribute ‘name’ in case you need to know which
group you are working on.

The current implementation imposes three requirements on f:

  * f must return a value that either has the same shape as the input subframe or can be broadcast to the shape of the input subframe. For example, if f returns a scalar it will be broadcast to have the same shape as the input subframe.
  * if this is a DataFrame, f must support application column-by-column in the subframe. If f also supports application to the entire subframe, then a fast path is used starting from the second chunk.
  * f must not mutate groups. Mutation is not supported and may produce unexpected results. See Mutating with User Defined Function (UDF) methods for more details.

When using `engine='numba'`, there will be no “fall back” behavior internally.
The group data and group index will be passed as numpy arrays to the JITed
user defined function, and no alternative execution attempts will be tried.

Changed in version 1.3.0: The resulting dtype will reflect the return value of
the passed `func`, see the examples below.

Examples

    
    >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
    ...                           'foo', 'bar'],
    ...                    'B' : ['one', 'one', 'two', 'three',
    ...                           'two', 'two'],
    ...                    'C' : [1, 5, 5, 2, 5, 5],
    ...                    'D' : [2.0, 5., 8., 1., 2., 9.]})
    >>> grouped = df.groupby('A')
    >>> grouped.transform(lambda x: (x - x.mean()) / x.std())
              C         D
    0 -1.154701 -0.577350
    1  0.577350  0.000000
    2  0.577350  1.154701
    3 -1.154701 -1.000000
    4  0.577350 -0.577350
    5  0.577350  1.000000
    
Broadcast result of the transformation

    
    >>> grouped.transform(lambda x: x.max() - x.min())
       C    D
    0  4  6.0
    1  3  8.0
    2  4  6.0
    3  3  8.0
    4  4  6.0
    5  3  8.0
    
Changed in version 1.3.0: The resulting dtype will reflect the return value of
the passed `func`, for example:

    
    >>> grouped[['C', 'D']].transform(lambda x: x.astype(int).max())
       C  D
    0  5  8
    1  5  9
    2  5  8
    3  5  9
    4  5  8
    5  5  9
    
© 2008–2022, AQR Capital Management, LLC, Lambda Foundry, Inc. and PyData
Development Team  
Licensed under the 3-clause BSD License.  
https://pandas.pydata.org/pandas-
docs/version/1.4.0/reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html

