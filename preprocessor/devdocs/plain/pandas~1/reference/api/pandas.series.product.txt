# pandas.Series.product

Series.product(axis=None, skipna=True, level=None, numeric_only=None,
min_count=0, **kwargs)[source]

    
Return the product of the values over the requested axis.

Parameters

    
axis:{index (0)}

    
Axis for the function to be applied on.

skipna:bool, default True

    
Exclude NA/null values when computing the result.

level:int or level name, default None

    
If the axis is a MultiIndex (hierarchical), count along a particular level,
collapsing into a scalar.

numeric_only:bool, default None

    
Include only float, int, boolean columns. If None, will attempt to use
everything, then use only numeric data. Not implemented for Series.

min_count:int, default 0

    
The required number of valid values to perform the operation. If fewer than
`min_count` non-NA values are present the result will be NA.

**kwargs

    
Additional keyword arguments to be passed to the function.

Returns

    
scalar or Series (if level specified)

See also

`Series.sum`

    
Return the sum.

`Series.min`

    
Return the minimum.

`Series.max`

    
Return the maximum.

`Series.idxmin`

    
Return the index of the minimum.

`Series.idxmax`

    
Return the index of the maximum.

`DataFrame.sum`

    
Return the sum over the requested axis.

`DataFrame.min`

    
Return the minimum over the requested axis.

`DataFrame.max`

    
Return the maximum over the requested axis.

`DataFrame.idxmin`

    
Return the index of the minimum over the requested axis.

`DataFrame.idxmax`

    
Return the index of the maximum over the requested axis.

Examples

By default, the product of an empty or all-NA Series is `1`

    
    >>> pd.Series([], dtype="float64").prod()
    1.0
    
This can be controlled with the `min_count` parameter

    
    >>> pd.Series([], dtype="float64").prod(min_count=1)
    nan
    
Thanks to the `skipna` parameter, `min_count` handles all-NA and empty series
identically.

    
    >>> pd.Series([np.nan]).prod()
    1.0
    
    
    >>> pd.Series([np.nan]).prod(min_count=1)
    nan
    
© 2008–2022, AQR Capital Management, LLC, Lambda Foundry, Inc. and PyData
Development Team  
Licensed under the 3-clause BSD License.  
https://pandas.pydata.org/pandas-
docs/version/1.4.0/reference/api/pandas.Series.product.html

