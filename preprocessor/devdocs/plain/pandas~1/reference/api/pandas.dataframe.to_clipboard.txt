# pandas.DataFrame.to_clipboard

DataFrame.to_clipboard(excel=True, sep=None, **kwargs)[source]

    
Copy object to the system clipboard.

Write a text representation of object to the system clipboard. This can be
pasted into Excel, for example.

Parameters

    
excel:bool, default True

    
Produce output in a csv format for easy pasting into excel.

  * True, use the provided separator for csv pasting.
  * False, write a string representation of the object to the clipboard.

sep:str, default '\t'

    
Field delimiter.

**kwargs

    
These parameters will be passed to DataFrame.to_csv.

See also

`DataFrame.to_csv`

    
Write a DataFrame to a comma-separated values (csv) file.

`read_clipboard`

    
Read text from clipboard and pass to read_csv.

Notes

Requirements for your platform.

>   * Linux : xclip, or xsel (with PyQt4 modules)
>   * Windows : none
>   * macOS : none
>

Examples

Copy the contents of a DataFrame to the clipboard.

    
    >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])
    
    
    >>> df.to_clipboard(sep=',')  
    ... # Wrote the following to the system clipboard:
    ... # ,A,B,C
    ... # 0,1,2,3
    ... # 1,4,5,6
    
We can omit the index by passing the keyword index and setting it to false.

    
    >>> df.to_clipboard(sep=',', index=False)  
    ... # Wrote the following to the system clipboard:
    ... # A,B,C
    ... # 1,2,3
    ... # 4,5,6
    
© 2008–2022, AQR Capital Management, LLC, Lambda Foundry, Inc. and PyData
Development Team  
Licensed under the 3-clause BSD License.  
https://pandas.pydata.org/pandas-
docs/version/1.4.0/reference/api/pandas.DataFrame.to_clipboard.html

