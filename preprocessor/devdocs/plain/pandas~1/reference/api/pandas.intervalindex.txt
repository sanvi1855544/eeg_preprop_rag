# pandas.IntervalIndex

classpandas.IntervalIndex(data, closed=None, dtype=None, copy=False,
name=None, verify_integrity=True)[source]

    
Immutable index of intervals that are closed on the same side.

New in version 0.20.0.

Parameters

    
data:array-like (1-dimensional)

    
Array-like containing Interval objects from which to build the IntervalIndex.

closed:{‘left’, ‘right’, ‘both’, ‘neither’}, default ‘right’

    
Whether the intervals are closed on the left-side, right-side, both or
neither.

dtype:dtype or None, default None

    
If None, dtype will be inferred.

copy:bool, default False

    
Copy the input data.

name:object, optional

    
Name to be stored in the index.

verify_integrity:bool, default True

    
Verify that the IntervalIndex is valid.

See also

`Index`

    
The base pandas Index type.

`Interval`

    
A bounded slice-like interval; the elements of an IntervalIndex.

`interval_range`

    
Function to create a fixed frequency IntervalIndex.

`cut`

    
Bin values into discrete Intervals.

`qcut`

    
Bin values into equal-sized Intervals based on rank or sample quantiles.

Notes

See the user guide for more.

Examples

A new `IntervalIndex` is typically constructed using `interval_range()`:

    
    >>> pd.interval_range(start=0, end=5)
    IntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],
                  dtype='interval[int64, right]')
    
It may also be constructed using one of the constructor methods:
`IntervalIndex.from_arrays()`, `IntervalIndex.from_breaks()`, and
`IntervalIndex.from_tuples()`.

See further examples in the doc strings of `interval_range` and the mentioned
constructor methods.

Attributes

`closed` | Whether the intervals are closed on the left-side, right-side, both or neither.  
---|---  
`is_empty` | Indicates if an interval is empty, meaning it contains no points.  
`is_non_overlapping_monotonic` | Return True if the IntervalArray is non-overlapping (no Intervals share points) and is either monotonic increasing or monotonic decreasing, else False.  
`is_overlapping` | Return True if the IntervalIndex has overlapping intervals, else False.  
`values` | Return an array representing the data in the Index.  
left |   
---|---  
right |   
mid |   
length |   
Methods

`from_arrays`(left, right[, closed, name, ...]) | Construct from two arrays defining the left and right bounds.  
---|---  
`from_tuples`(data[, closed, name, copy, dtype]) | Construct an IntervalIndex from an array-like of tuples.  
`from_breaks`(breaks[, closed, name, copy, dtype]) | Construct an IntervalIndex from an array of splits.  
`contains`(*args, **kwargs) | Check elementwise if the Intervals contain the value.  
`overlaps`(*args, **kwargs) | Check elementwise if an Interval overlaps the values in the IntervalArray.  
`set_closed`(*args, **kwargs) | Return an IntervalArray identical to the current one, but closed on the specified side.  
`to_tuples`(*args, **kwargs) | Return an ndarray of tuples of the form (left, right).  
© 2008–2022, AQR Capital Management, LLC, Lambda Foundry, Inc. and PyData
Development Team  
Licensed under the 3-clause BSD License.  
https://pandas.pydata.org/pandas-
docs/version/1.4.0/reference/api/pandas.IntervalIndex.html

