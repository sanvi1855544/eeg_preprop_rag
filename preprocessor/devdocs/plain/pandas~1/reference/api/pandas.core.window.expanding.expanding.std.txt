# pandas.core.window.expanding.Expanding.std

Expanding.std(ddof=1, *args, engine=None, engine_kwargs=None,
**kwargs)[source]

    
Calculate the expanding standard deviation.

Parameters

    
ddof:int, default 1

    
Delta Degrees of Freedom. The divisor used in calculations is `N - ddof`,
where `N` represents the number of elements.

*args
    
For NumPy compatibility and will not have an effect on the result.

engine:str, default None

    
  * `'cython'` : Runs the operation through C-extensions from cython.
  * `'numba'` : Runs the operation through JIT compiled code from numba.
  * `None` : Defaults to `'cython'` or globally setting `compute.use_numba`
New in version 1.4.0.

engine_kwargs:dict, default None

    
  * For `'cython'` engine, there are no accepted `engine_kwargs`
  * For `'numba'` engine, the engine can accept `nopython`, `nogil` and `parallel` dictionary keys. The values must either be `True` or `False`. The default `engine_kwargs` for the `'numba'` engine is `{'nopython': True, 'nogil': False, 'parallel': False}`
New in version 1.4.0.

**kwargs

    
For NumPy compatibility and will not have an effect on the result.

Returns

    
Series or DataFrame

    
Return type is the same as the original object with `np.float64` dtype.

See also

`numpy.std`

    
Equivalent method for NumPy array.

`pandas.Series.expanding`

    
Calling expanding with Series data.

`pandas.DataFrame.expanding`

    
Calling expanding with DataFrames.

`pandas.Series.std`

    
Aggregating std for Series.

`pandas.DataFrame.std`

    
Aggregating std for DataFrame.

Notes

The default `ddof` of 1 used in `Series.std()` is different than the default
`ddof` of 0 in `numpy.std()`.

A minimum of one period is required for the rolling calculation.

Examples

    
    >>> s = pd.Series([5, 5, 6, 7, 5, 5, 5])
    
    
    >>> s.expanding(3).std()
    0         NaN
    1         NaN
    2    0.577350
    3    0.957427
    4    0.894427
    5    0.836660
    6    0.786796
    dtype: float64
    
© 2008–2022, AQR Capital Management, LLC, Lambda Foundry, Inc. and PyData
Development Team  
Licensed under the 3-clause BSD License.  
https://pandas.pydata.org/pandas-
docs/version/1.4.0/reference/api/pandas.core.window.expanding.Expanding.std.html

