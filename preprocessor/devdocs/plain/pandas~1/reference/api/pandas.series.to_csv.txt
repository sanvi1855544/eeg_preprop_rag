# pandas.Series.to_csv

Series.to_csv(path_or_buf=None, sep=',', na_rep='', float_format=None,
columns=None, header=True, index=True, index_label=None, mode='w',
encoding=None, compression='infer', quoting=None, quotechar='"',
line_terminator=None, chunksize=None, date_format=None, doublequote=True,
escapechar=None, decimal='.', errors='strict', storage_options=None)[source]

    
Write object to a comma-separated values (csv) file.

Parameters

    
path_or_buf:str, path object, file-like object, or None, default None

    
String, path object (implementing os.PathLike[str]), or file-like object
implementing a write() function. If None, the result is returned as a string.
If a non-binary file object is passed, it should be opened with newline=’’,
disabling universal newlines. If a binary file object is passed, mode might
need to contain a ‘b’.

Changed in version 1.2.0: Support for binary file objects was introduced.

sep:str, default ‘,’

    
String of length 1. Field delimiter for the output file.

na_rep:str, default ‘’

    
Missing data representation.

float_format:str, default None

    
Format string for floating point numbers.

columns:sequence, optional

    
Columns to write.

header:bool or list of str, default True

    
Write out the column names. If a list of strings is given it is assumed to be
aliases for the column names.

index:bool, default True

    
Write row names (index).

index_label:str or sequence, or False, default None

    
Column label for index column(s) if desired. If None is given, and header and
index are True, then the index names are used. A sequence should be given if
the object uses MultiIndex. If False do not print fields for index names. Use
index_label=False for easier importing in R.

mode:str

    
Python write mode, default ‘w’.

encoding:str, optional

    
A string representing the encoding to use in the output file, defaults to
‘utf-8’. encoding is not supported if path_or_buf is a non-binary file object.

compression:str or dict, default ‘infer’

    
For on-the-fly compression of the output data. If ‘infer’ and ‘%s’ path-like,
then detect compression from the following extensions: ‘.gz’, ‘.bz2’, ‘.zip’,
‘.xz’, or ‘.zst’ (otherwise no compression). Set to `None` for no compression.
Can also be a dict with key `'method'` set to one of {`'zip'`, `'gzip'`,
`'bz2'`, `'zstd'`} and other key-value pairs are forwarded to
`zipfile.ZipFile`, `gzip.GzipFile`, `bz2.BZ2File`, or
`zstandard.ZstdDecompressor`, respectively. As an example, the following could
be passed for faster compression and to create a reproducible gzip archive:
`compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}`.

Changed in version 1.0.0: May now be a dict with key ‘method’ as compression
mode and other entries as additional compression options if compression mode
is ‘zip’.

Changed in version 1.1.0: Passing compression options as keys in dict is
supported for compression modes ‘gzip’, ‘bz2’, ‘zstd’, and ‘zip’.

Changed in version 1.2.0: Compression is supported for binary file objects.

Changed in version 1.2.0: Previous versions forwarded dict entries for ‘gzip’
to gzip.open instead of gzip.GzipFile which prevented setting mtime.

quoting:optional constant from csv module

    
Defaults to csv.QUOTE_MINIMAL. If you have set a float_format then floats are
converted to strings and thus csv.QUOTE_NONNUMERIC will treat them as non-
numeric.

quotechar:str, default ‘"’

    
String of length 1. Character used to quote fields.

line_terminator:str, optional

    
The newline character or character sequence to use in the output file.
Defaults to os.linesep, which depends on the OS in which this method is called
(’\n’ for linux, ‘\r\n’ for Windows, i.e.).

chunksize:int or None

    
Rows to write at a time.

date_format:str, default None

    
Format string for datetime objects.

doublequote:bool, default True

    
Control quoting of quotechar inside a field.

escapechar:str, default None

    
String of length 1. Character used to escape sep and quotechar when
appropriate.

decimal:str, default ‘.’

    
Character recognized as decimal separator. E.g. use ‘,’ for European data.

errors:str, default ‘strict’

    
Specifies how encoding and decoding errors are to be handled. See the errors
argument for `open()` for a full list of options.

New in version 1.1.0.

storage_options:dict, optional

    
Extra options that make sense for a particular storage connection, e.g. host,
port, username, password, etc. For HTTP(S) URLs the key-value pairs are
forwarded to `urllib` as header options. For other URLs (e.g. starting with
“s3://”, and “gcs://”) the key-value pairs are forwarded to `fsspec`. Please
see `fsspec` and `urllib` for more details.

New in version 1.2.0.

Returns

    
None or str

    
If path_or_buf is None, returns the resulting csv format as a string.
Otherwise returns None.

See also

`read_csv`

    
Load a CSV file into a DataFrame.

`to_excel`

    
Write DataFrame to an Excel file.

Examples

    
    >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],
    ...                    'mask': ['red', 'purple'],
    ...                    'weapon': ['sai', 'bo staff']})
    >>> df.to_csv(index=False)
    'name,mask,weapon\nRaphael,red,sai\nDonatello,purple,bo staff\n'
    
Create ‘out.zip’ containing ‘out.csv’

    
    >>> compression_opts = dict(method='zip',
    ...                         archive_name='out.csv')  
    >>> df.to_csv('out.zip', index=False,
    ...           compression=compression_opts)  
    
To write a csv file to a new folder or nested folder you will first need to
create it using either Pathlib or os:

    
    >>> from pathlib import Path  
    >>> filepath = Path('folder/subfolder/out.csv')  
    >>> filepath.parent.mkdir(parents=True, exist_ok=True)  
    >>> df.to_csv(filepath)  
    
    
    >>> import os  
    >>> os.makedirs('folder/subfolder', exist_ok=True)  
    >>> df.to_csv('folder/subfolder/out.csv')  
    
© 2008–2022, AQR Capital Management, LLC, Lambda Foundry, Inc. and PyData
Development Team  
Licensed under the 3-clause BSD License.  
https://pandas.pydata.org/pandas-
docs/version/1.4.0/reference/api/pandas.Series.to_csv.html

