# pandas.io.formats.style.Styler.format

Styler.format(formatter=None, subset=None, na_rep=None, precision=None,
decimal='.', thousands=None, escape=None, hyperlinks=None)[source]

    
Format the text display value of cells.

Parameters

    
formatter:str, callable, dict or None

    
Object to define how values are displayed. See notes.

subset:label, array-like, IndexSlice, optional

    
A valid 2d input to DataFrame.loc[<subset>], or, in the case of a 1d input or
single key, to DataFrame.loc[:, <subset>] where the columns are prioritised,
to limit `data` to before applying the function.

na_rep:str, optional

    
Representation for missing values. If `na_rep` is None, no special formatting
is applied.

New in version 1.0.0.

precision:int, optional

    
Floating point precision to use for display purposes, if not determined by the
specified `formatter`.

New in version 1.3.0.

decimal:str, default “.”

    
Character used as decimal separator for floats, complex and integers.

New in version 1.3.0.

thousands:str, optional, default None

    
Character used as thousands separator for floats, complex and integers.

New in version 1.3.0.

escape:str, optional

    
Use ‘html’ to replace the characters `&`, `<`, `>`, `'`, and `"` in cell
display string with HTML-safe sequences. Use ‘latex’ to replace the characters
`&`, `%`, `$`, `#`, `_`, `{`, `}`, `~`, `^`, and `\` in the cell display
string with LaTeX-safe sequences. Escaping is done before `formatter`.

New in version 1.3.0.

hyperlinks:{“html”, “latex”}, optional

    
Convert string patterns containing https://, http://, ftp:// or www. to HTML
<a> tags as clickable URL hyperlinks if “html”, or LaTeX href commands if
“latex”.

New in version 1.4.0.

Returns

    
self:Styler

Notes

This method assigns a formatting function, `formatter`, to each cell in the
DataFrame. If `formatter` is `None`, then the default formatter is used. If a
callable then that function should take a data value as input and return a
displayable representation, such as a string. If `formatter` is given as a
string this is assumed to be a valid Python format specification and is
wrapped to a callable as `string.format(x)`. If a `dict` is given, keys should
correspond to column names, and values should be string or callable, as above.

The default formatter currently expresses floats and complex numbers with the
pandas display precision unless using the `precision` argument here. The
default formatter does not adjust the representation of missing values unless
the `na_rep` argument is used.

The `subset` argument defines which region to apply the formatting function
to. If the `formatter` argument is given in dict form but does not include all
columns within the subset then these columns will have the default formatter
applied. Any columns in the formatter dict excluded from the subset will be
ignored.

When using a `formatter` string the dtypes must be compatible, otherwise a
ValueError will be raised.

When instantiating a Styler, default formatting can be applied be setting the
`pandas.options`:

>   * `styler.format.formatter`: default None.
>   * `styler.format.na_rep`: default None.
>   * `styler.format.precision`: default 6.
>   * `styler.format.decimal`: default “.”.
>   * `styler.format.thousands`: default None.
>   * `styler.format.escape`: default None.
>

Examples

Using `na_rep` and `precision` with the default `formatter`

    
    >>> df = pd.DataFrame([[np.nan, 1.0, 'A'], [2.0, np.nan, 3.0]])
    >>> df.style.format(na_rep='MISS', precision=3)  
            0       1       2
    0    MISS   1.000       A
    1   2.000    MISS   3.000
    
Using a `formatter` specification on consistent column dtypes

    
    >>> df.style.format('{:.2f}', na_rep='MISS', subset=[0,1])  
            0      1          2
    0    MISS   1.00          A
    1    2.00   MISS   3.000000
    
Using the default `formatter` for unspecified columns

    
    >>> df.style.format({0: '{:.2f}', 1: '£ {:.1f}'}, na_rep='MISS', precision=1)
    ...  
             0      1     2
    0    MISS   £ 1.0     A
    1    2.00    MISS   3.0
    
Multiple `na_rep` or `precision` specifications under the default `formatter`.

    
    >>> df.style.format(na_rep='MISS', precision=1, subset=[0])
    ...     .format(na_rep='PASS', precision=2, subset=[1, 2])  
            0      1      2
    0    MISS   1.00      A
    1     2.0   PASS   3.00
    
Using a callable `formatter` function.

    
    >>> func = lambda s: 'STRING' if isinstance(s, str) else 'FLOAT'
    >>> df.style.format({0: '{:.1f}', 2: func}, precision=4, na_rep='MISS')
    ...  
            0        1        2
    0    MISS   1.0000   STRING
    1     2.0     MISS    FLOAT
    
Using a `formatter` with HTML `escape` and `na_rep`.

    
    >>> df = pd.DataFrame([['<div></div>', '"A&B"', None]])
    >>> s = df.style.format(
    ...     '<a href="a.com/{0}">{0}</a>', escape="html", na_rep="NA"
    ...     )
    >>> s.to_html()  
    ...
    <td .. ><a href="a.com/&lt;div&gt;&lt;/div&gt;">&lt;div&gt;&lt;/div&gt;</a></td>
    <td .. ><a href="a.com/&#34;A&amp;B&#34;">&#34;A&amp;B&#34;</a></td>
    <td .. >NA</td>
    ...
    
Using a `formatter` with LaTeX `escape`.

    
    >>> df = pd.DataFrame([["123"], ["~ ^"], ["$%#"]])
    >>> df.style.format("\\textbf{{{}}}", escape="latex").to_latex()
    ...  
    \begin{tabular}{ll}
    {} & {0} \\
    0 & \textbf{123} \\
    1 & \textbf{\textasciitilde \space \textasciicircum } \\
    2 & \textbf{\$\%\#} \\
    \end{tabular}
    
© 2008–2022, AQR Capital Management, LLC, Lambda Foundry, Inc. and PyData
Development Team  
Licensed under the 3-clause BSD License.  
https://pandas.pydata.org/pandas-
docs/version/1.4.0/reference/api/pandas.io.formats.style.Styler.format.html

