[{"name": "A crash course on NumPy for images", "path": "user_guide/numpy_images", "type": "Guide", "text": "\nImages in `scikit-image` are represented by NumPy ndarrays. Hence, many common\noperations can be achieved using standard NumPy methods for manipulating\narrays:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color", "path": "api/skimage.color", "type": "color", "text": "\n`skimage.color.combine_stains`(stains, conv_matrix)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.combine_stains()", "path": "api/skimage.color#skimage.color.combine_stains", "type": "color", "text": "\nStain to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.convert_colorspace()", "path": "api/skimage.color#skimage.color.convert_colorspace", "type": "color", "text": "\nConvert an image array to a new color space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.deltaE_cie76()", "path": "api/skimage.color#skimage.color.deltaE_cie76", "type": "color", "text": "\nEuclidean distance between two points in Lab color space\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.deltaE_ciede2000()", "path": "api/skimage.color#skimage.color.deltaE_ciede2000", "type": "color", "text": "\nColor difference as given by the CIEDE 2000 standard.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.deltaE_ciede94()", "path": "api/skimage.color#skimage.color.deltaE_ciede94", "type": "color", "text": "\nColor difference according to CIEDE 94 standard\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.deltaE_cmc()", "path": "api/skimage.color#skimage.color.deltaE_cmc", "type": "color", "text": "\nColor difference from the CMC l:c standard.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.gray2rgb()", "path": "api/skimage.color#skimage.color.gray2rgb", "type": "color", "text": "\nCreate an RGB representation of a gray-level image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.gray2rgba()", "path": "api/skimage.color#skimage.color.gray2rgba", "type": "color", "text": "\nCreate a RGBA representation of a gray-level image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.grey2rgb()", "path": "api/skimage.color#skimage.color.grey2rgb", "type": "color", "text": "\nCreate an RGB representation of a gray-level image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.hed2rgb()", "path": "api/skimage.color#skimage.color.hed2rgb", "type": "color", "text": "\nHaematoxylin-Eosin-DAB (HED) to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.hsv2rgb()", "path": "api/skimage.color#skimage.color.hsv2rgb", "type": "color", "text": "\nHSV to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.lab2lch()", "path": "api/skimage.color#skimage.color.lab2lch", "type": "color", "text": "\nCIE-LAB to CIE-LCH color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.lab2rgb()", "path": "api/skimage.color#skimage.color.lab2rgb", "type": "color", "text": "\nLab to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.lab2xyz()", "path": "api/skimage.color#skimage.color.lab2xyz", "type": "color", "text": "\nCIE-LAB to XYZcolor space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.label2rgb()", "path": "api/skimage.color#skimage.color.label2rgb", "type": "color", "text": "\nReturn an RGB image where color-coded labels are painted over the image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.lch2lab()", "path": "api/skimage.color#skimage.color.lch2lab", "type": "color", "text": "\nCIE-LCH to CIE-LAB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2gray()", "path": "api/skimage.color#skimage.color.rgb2gray", "type": "color", "text": "\nCompute luminance of an RGB image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2grey()", "path": "api/skimage.color#skimage.color.rgb2grey", "type": "color", "text": "\nCompute luminance of an RGB image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2hed()", "path": "api/skimage.color#skimage.color.rgb2hed", "type": "color", "text": "\nRGB to Haematoxylin-Eosin-DAB (HED) color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2hsv()", "path": "api/skimage.color#skimage.color.rgb2hsv", "type": "color", "text": "\nRGB to HSV color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2lab()", "path": "api/skimage.color#skimage.color.rgb2lab", "type": "color", "text": "\nConversion from the sRGB color space (IEC 61966-2-1:1999) to the CIE Lab\ncolorspace under the given illuminant and observer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2rgbcie()", "path": "api/skimage.color#skimage.color.rgb2rgbcie", "type": "color", "text": "\nRGB to RGB CIE color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2xyz()", "path": "api/skimage.color#skimage.color.rgb2xyz", "type": "color", "text": "\nRGB to XYZ color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2ycbcr()", "path": "api/skimage.color#skimage.color.rgb2ycbcr", "type": "color", "text": "\nRGB to YCbCr color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2ydbdr()", "path": "api/skimage.color#skimage.color.rgb2ydbdr", "type": "color", "text": "\nRGB to YDbDr color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2yiq()", "path": "api/skimage.color#skimage.color.rgb2yiq", "type": "color", "text": "\nRGB to YIQ color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2ypbpr()", "path": "api/skimage.color#skimage.color.rgb2ypbpr", "type": "color", "text": "\nRGB to YPbPr color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgb2yuv()", "path": "api/skimage.color#skimage.color.rgb2yuv", "type": "color", "text": "\nRGB to YUV color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgba2rgb()", "path": "api/skimage.color#skimage.color.rgba2rgb", "type": "color", "text": "\nRGBA to RGB conversion using alpha blending [1].\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.rgbcie2rgb()", "path": "api/skimage.color#skimage.color.rgbcie2rgb", "type": "color", "text": "\nRGB CIE to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.separate_stains()", "path": "api/skimage.color#skimage.color.separate_stains", "type": "color", "text": "\nRGB to stain color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.xyz2lab()", "path": "api/skimage.color#skimage.color.xyz2lab", "type": "color", "text": "\nXYZ to CIE-LAB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.xyz2rgb()", "path": "api/skimage.color#skimage.color.xyz2rgb", "type": "color", "text": "\nXYZ to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.ycbcr2rgb()", "path": "api/skimage.color#skimage.color.ycbcr2rgb", "type": "color", "text": "\nYCbCr to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.ydbdr2rgb()", "path": "api/skimage.color#skimage.color.ydbdr2rgb", "type": "color", "text": "\nYDbDr to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.yiq2rgb()", "path": "api/skimage.color#skimage.color.yiq2rgb", "type": "color", "text": "\nYIQ to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.ypbpr2rgb()", "path": "api/skimage.color#skimage.color.ypbpr2rgb", "type": "color", "text": "\nYPbPr to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "color.yuv2rgb()", "path": "api/skimage.color#skimage.color.yuv2rgb", "type": "color", "text": "\nYUV to RGB color space conversion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data", "path": "api/skimage.data", "type": "data", "text": "\nStandard test images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Data visualization", "path": "user_guide/visualization", "type": "Guide", "text": "\nData visualization takes an important place in image processing. Data can be a\nsimple unique 2D image or a more complex with multidimensional aspects: 3D in\nspace, timeslapse, multiple channels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.astronaut()", "path": "api/skimage.data#skimage.data.astronaut", "type": "data", "text": "\nColor image of the astronaut Eileen Collins.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.binary_blobs()", "path": "api/skimage.data#skimage.data.binary_blobs", "type": "data", "text": "\nGenerate synthetic binary image with several rounded blob-like objects.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.brain()", "path": "api/skimage.data#skimage.data.brain", "type": "data", "text": "\nSubset of data from the University of North Carolina Volume Rendering Test\nData Set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.brick()", "path": "api/skimage.data#skimage.data.brick", "type": "data", "text": "\nBrick wall.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.camera()", "path": "api/skimage.data#skimage.data.camera", "type": "data", "text": "\nGray-level \u201ccamera\u201d image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.cat()", "path": "api/skimage.data#skimage.data.cat", "type": "data", "text": "\nChelsea the cat.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.cell()", "path": "api/skimage.data#skimage.data.cell", "type": "data", "text": "\nCell floating in saline.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.cells3d()", "path": "api/skimage.data#skimage.data.cells3d", "type": "data", "text": "\n3D fluorescence microscopy image of cells.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.checkerboard()", "path": "api/skimage.data#skimage.data.checkerboard", "type": "data", "text": "\nCheckerboard image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.chelsea()", "path": "api/skimage.data#skimage.data.chelsea", "type": "data", "text": "\nChelsea the cat.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.clock()", "path": "api/skimage.data#skimage.data.clock", "type": "data", "text": "\nMotion blurred clock.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.coffee()", "path": "api/skimage.data#skimage.data.coffee", "type": "data", "text": "\nCoffee cup.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.coins()", "path": "api/skimage.data#skimage.data.coins", "type": "data", "text": "\nGreek coins from Pompeii.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.colorwheel()", "path": "api/skimage.data#skimage.data.colorwheel", "type": "data", "text": "\nColor Wheel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.download_all()", "path": "api/skimage.data#skimage.data.download_all", "type": "data", "text": "\nDownload all datasets for use with scikit-image offline.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.eagle()", "path": "api/skimage.data#skimage.data.eagle", "type": "data", "text": "\nA golden eagle.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.grass()", "path": "api/skimage.data#skimage.data.grass", "type": "data", "text": "\nGrass.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.gravel()", "path": "api/skimage.data#skimage.data.gravel", "type": "data", "text": "\nGravel\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.horse()", "path": "api/skimage.data#skimage.data.horse", "type": "data", "text": "\nBlack and white silhouette of a horse.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.hubble_deep_field()", "path": "api/skimage.data#skimage.data.hubble_deep_field", "type": "data", "text": "\nHubble eXtreme Deep Field.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.human_mitosis()", "path": "api/skimage.data#skimage.data.human_mitosis", "type": "data", "text": "\nImage of human cells undergoing mitosis.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.immunohistochemistry()", "path": "api/skimage.data#skimage.data.immunohistochemistry", "type": "data", "text": "\nImmunohistochemical (IHC) staining with hematoxylin counterstaining.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.kidney()", "path": "api/skimage.data#skimage.data.kidney", "type": "data", "text": "\nMouse kidney tissue.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.lbp_frontal_face_cascade_filename()", "path": "api/skimage.data#skimage.data.lbp_frontal_face_cascade_filename", "type": "data", "text": "\nReturn the path to the XML file containing the weak classifier cascade.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.lfw_subset()", "path": "api/skimage.data#skimage.data.lfw_subset", "type": "data", "text": "\nSubset of data from the LFW dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.lily()", "path": "api/skimage.data#skimage.data.lily", "type": "data", "text": "\nLily of the valley plant stem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.logo()", "path": "api/skimage.data#skimage.data.logo", "type": "data", "text": "\nScikit-image logo, a RGBA image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.microaneurysms()", "path": "api/skimage.data#skimage.data.microaneurysms", "type": "data", "text": "\nGray-level \u201cmicroaneurysms\u201d image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.moon()", "path": "api/skimage.data#skimage.data.moon", "type": "data", "text": "\nSurface of the moon.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.page()", "path": "api/skimage.data#skimage.data.page", "type": "data", "text": "\nScanned page.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.retina()", "path": "api/skimage.data#skimage.data.retina", "type": "data", "text": "\nHuman retina.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.rocket()", "path": "api/skimage.data#skimage.data.rocket", "type": "data", "text": "\nLaunch photo of DSCOVR on Falcon 9 by SpaceX.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.shepp_logan_phantom()", "path": "api/skimage.data#skimage.data.shepp_logan_phantom", "type": "data", "text": "\nShepp Logan Phantom.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.skin()", "path": "api/skimage.data#skimage.data.skin", "type": "data", "text": "\nMicroscopy image of dermis and epidermis (skin layers).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.stereo_motorcycle()", "path": "api/skimage.data#skimage.data.stereo_motorcycle", "type": "data", "text": "\nRectified stereo image pair with ground-truth disparities.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "data.text()", "path": "api/skimage.data#skimage.data.text", "type": "data", "text": "\nGray-level \u201ctext\u201d image used for corner detection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw", "path": "api/skimage.draw", "type": "draw", "text": "\n`skimage.draw.bezier_curve`(r0, c0, r1, c1, \u2026)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.bezier_curve()", "path": "api/skimage.draw#skimage.draw.bezier_curve", "type": "draw", "text": "\nGenerate Bezier curve coordinates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.circle()", "path": "api/skimage.draw#skimage.draw.circle", "type": "draw", "text": "\nGenerate coordinates of pixels within circle.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.circle_perimeter()", "path": "api/skimage.draw#skimage.draw.circle_perimeter", "type": "draw", "text": "\nGenerate circle perimeter coordinates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.circle_perimeter_aa()", "path": "api/skimage.draw#skimage.draw.circle_perimeter_aa", "type": "draw", "text": "\nGenerate anti-aliased circle perimeter coordinates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.disk()", "path": "api/skimage.draw#skimage.draw.disk", "type": "draw", "text": "\nGenerate coordinates of pixels within circle.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.ellipse()", "path": "api/skimage.draw#skimage.draw.ellipse", "type": "draw", "text": "\nGenerate coordinates of pixels within ellipse.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.ellipse_perimeter()", "path": "api/skimage.draw#skimage.draw.ellipse_perimeter", "type": "draw", "text": "\nGenerate ellipse perimeter coordinates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.ellipsoid()", "path": "api/skimage.draw#skimage.draw.ellipsoid", "type": "draw", "text": "\nGenerates ellipsoid with semimajor axes aligned with grid dimensions on grid\nwith specified `spacing`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.ellipsoid_stats()", "path": "api/skimage.draw#skimage.draw.ellipsoid_stats", "type": "draw", "text": "\nCalculates analytical surface area and volume for ellipsoid with semimajor\naxes aligned with grid dimensions of specified `spacing`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.line()", "path": "api/skimage.draw#skimage.draw.line", "type": "draw", "text": "\nGenerate line pixel coordinates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.line_aa()", "path": "api/skimage.draw#skimage.draw.line_aa", "type": "draw", "text": "\nGenerate anti-aliased line pixel coordinates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.line_nd()", "path": "api/skimage.draw#skimage.draw.line_nd", "type": "draw", "text": "\nDraw a single-pixel thick line in n dimensions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.polygon()", "path": "api/skimage.draw#skimage.draw.polygon", "type": "draw", "text": "\nGenerate coordinates of pixels within polygon.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.polygon2mask()", "path": "api/skimage.draw#skimage.draw.polygon2mask", "type": "draw", "text": "\nCompute a mask from polygon.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.polygon_perimeter()", "path": "api/skimage.draw#skimage.draw.polygon_perimeter", "type": "draw", "text": "\nGenerate polygon perimeter coordinates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.random_shapes()", "path": "api/skimage.draw#skimage.draw.random_shapes", "type": "draw", "text": "\nGenerate an image with random shapes, labeled with bounding boxes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.rectangle()", "path": "api/skimage.draw#skimage.draw.rectangle", "type": "draw", "text": "\nGenerate coordinates of pixels within a rectangle.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.rectangle_perimeter()", "path": "api/skimage.draw#skimage.draw.rectangle_perimeter", "type": "draw", "text": "\nGenerate coordinates of pixels that are exactly around a rectangle.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "draw.set_color()", "path": "api/skimage.draw#skimage.draw.set_color", "type": "draw", "text": "\nSet pixel color in the image at the given coordinates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dtype_limits()", "path": "api/skimage#skimage.dtype_limits", "type": "skimage", "text": "\nReturn intensity limits, i.e. (min, max) tuple, of the image\u2019s dtype.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensure_python_version()", "path": "api/skimage#skimage.ensure_python_version", "type": "skimage", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure", "path": "api/skimage.exposure", "type": "exposure", "text": "\n`skimage.exposure.adjust_gamma`(image[, \u2026])\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure.adjust_gamma()", "path": "api/skimage.exposure#skimage.exposure.adjust_gamma", "type": "exposure", "text": "\nPerforms Gamma Correction on the input image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure.adjust_log()", "path": "api/skimage.exposure#skimage.exposure.adjust_log", "type": "exposure", "text": "\nPerforms Logarithmic correction on the input image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure.adjust_sigmoid()", "path": "api/skimage.exposure#skimage.exposure.adjust_sigmoid", "type": "exposure", "text": "\nPerforms Sigmoid Correction on the input image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure.cumulative_distribution()", "path": "api/skimage.exposure#skimage.exposure.cumulative_distribution", "type": "exposure", "text": "\nReturn cumulative distribution function (cdf) for the given image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure.equalize_adapthist()", "path": "api/skimage.exposure#skimage.exposure.equalize_adapthist", "type": "exposure", "text": "\nContrast Limited Adaptive Histogram Equalization (CLAHE).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure.equalize_hist()", "path": "api/skimage.exposure#skimage.exposure.equalize_hist", "type": "exposure", "text": "\nReturn image after histogram equalization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure.histogram()", "path": "api/skimage.exposure#skimage.exposure.histogram", "type": "exposure", "text": "\nReturn histogram of image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure.is_low_contrast()", "path": "api/skimage.exposure#skimage.exposure.is_low_contrast", "type": "exposure", "text": "\nDetermine if an image is low contrast.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure.match_histograms()", "path": "api/skimage.exposure#skimage.exposure.match_histograms", "type": "exposure", "text": "\nAdjust an image so that its cumulative histogram matches that of another.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exposure.rescale_intensity()", "path": "api/skimage.exposure#skimage.exposure.rescale_intensity", "type": "exposure", "text": "\nReturn image after stretching or shrinking its intensity levels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature", "path": "api/skimage.feature", "type": "feature", "text": "\n`skimage.feature.blob_dog`(image[, min_sigma, \u2026])\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.blob_dog()", "path": "api/skimage.feature#skimage.feature.blob_dog", "type": "feature", "text": "\nFinds blobs in the given grayscale image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.blob_doh()", "path": "api/skimage.feature#skimage.feature.blob_doh", "type": "feature", "text": "\nFinds blobs in the given grayscale image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.blob_log()", "path": "api/skimage.feature#skimage.feature.blob_log", "type": "feature", "text": "\nFinds blobs in the given grayscale image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.BRIEF", "path": "api/skimage.feature#skimage.feature.BRIEF", "type": "feature", "text": "\nBases: `skimage.feature.util.DescriptorExtractor`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.BRIEF.extract()", "path": "api/skimage.feature#skimage.feature.BRIEF.extract", "type": "feature", "text": "\nExtract BRIEF binary descriptors for given keypoints in image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.BRIEF.__init__()", "path": "api/skimage.feature#skimage.feature.BRIEF.__init__", "type": "feature", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.canny()", "path": "api/skimage.feature#skimage.feature.canny", "type": "feature", "text": "\nEdge filter an image using the Canny algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.Cascade", "path": "api/skimage.feature#skimage.feature.Cascade", "type": "feature", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.Cascade.detect_multi_scale()", "path": "api/skimage.feature#skimage.feature.Cascade.detect_multi_scale", "type": "feature", "text": "\nSearch for the object on multiple scales of input image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.Cascade.eps", "path": "api/skimage.feature#skimage.feature.Cascade.eps", "type": "feature", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.Cascade.features_number", "path": "api/skimage.feature#skimage.feature.Cascade.features_number", "type": "feature", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.Cascade.stages_number", "path": "api/skimage.feature#skimage.feature.Cascade.stages_number", "type": "feature", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.Cascade.stumps_number", "path": "api/skimage.feature#skimage.feature.Cascade.stumps_number", "type": "feature", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.Cascade.window_height", "path": "api/skimage.feature#skimage.feature.Cascade.window_height", "type": "feature", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.Cascade.window_width", "path": "api/skimage.feature#skimage.feature.Cascade.window_width", "type": "feature", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.Cascade.__init__()", "path": "api/skimage.feature#skimage.feature.Cascade.__init__", "type": "feature", "text": "\nInitialize cascade classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.CENSURE", "path": "api/skimage.feature#skimage.feature.CENSURE", "type": "feature", "text": "\nBases: `skimage.feature.util.FeatureDetector`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.CENSURE.detect()", "path": "api/skimage.feature#skimage.feature.CENSURE.detect", "type": "feature", "text": "\nDetect CENSURE keypoints along with the corresponding scale.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.CENSURE.__init__()", "path": "api/skimage.feature#skimage.feature.CENSURE.__init__", "type": "feature", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.corner_fast()", "path": "api/skimage.feature#skimage.feature.corner_fast", "type": "feature", "text": "\nExtract FAST corners for a given image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.corner_foerstner()", "path": "api/skimage.feature#skimage.feature.corner_foerstner", "type": "feature", "text": "\nCompute Foerstner corner measure response image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.corner_harris()", "path": "api/skimage.feature#skimage.feature.corner_harris", "type": "feature", "text": "\nCompute Harris corner measure response image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.corner_kitchen_rosenfeld()", "path": "api/skimage.feature#skimage.feature.corner_kitchen_rosenfeld", "type": "feature", "text": "\nCompute Kitchen and Rosenfeld corner measure response image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.corner_moravec()", "path": "api/skimage.feature#skimage.feature.corner_moravec", "type": "feature", "text": "\nCompute Moravec corner measure response image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.corner_orientations()", "path": "api/skimage.feature#skimage.feature.corner_orientations", "type": "feature", "text": "\nCompute the orientation of corners.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.corner_peaks()", "path": "api/skimage.feature#skimage.feature.corner_peaks", "type": "feature", "text": "\nFind peaks in corner measure response image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.corner_shi_tomasi()", "path": "api/skimage.feature#skimage.feature.corner_shi_tomasi", "type": "feature", "text": "\nCompute Shi-Tomasi (Kanade-Tomasi) corner measure response image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.corner_subpix()", "path": "api/skimage.feature#skimage.feature.corner_subpix", "type": "feature", "text": "\nDetermine subpixel position of corners.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.daisy()", "path": "api/skimage.feature#skimage.feature.daisy", "type": "feature", "text": "\nExtract DAISY feature descriptors densely for the given image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.draw_haar_like_feature()", "path": "api/skimage.feature#skimage.feature.draw_haar_like_feature", "type": "feature", "text": "\nVisualization of Haar-like features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.draw_multiblock_lbp()", "path": "api/skimage.feature#skimage.feature.draw_multiblock_lbp", "type": "feature", "text": "\nMulti-block local binary pattern visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.greycomatrix()", "path": "api/skimage.feature#skimage.feature.greycomatrix", "type": "feature", "text": "\nCalculate the grey-level co-occurrence matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.greycoprops()", "path": "api/skimage.feature#skimage.feature.greycoprops", "type": "feature", "text": "\nCalculate texture properties of a GLCM.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.haar_like_feature()", "path": "api/skimage.feature#skimage.feature.haar_like_feature", "type": "feature", "text": "\nCompute the Haar-like features for a region of interest (ROI) of an integral\nimage.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.haar_like_feature_coord()", "path": "api/skimage.feature#skimage.feature.haar_like_feature_coord", "type": "feature", "text": "\nCompute the coordinates of Haar-like features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.hessian_matrix()", "path": "api/skimage.feature#skimage.feature.hessian_matrix", "type": "feature", "text": "\nCompute Hessian matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.hessian_matrix_det()", "path": "api/skimage.feature#skimage.feature.hessian_matrix_det", "type": "feature", "text": "\nCompute the approximate Hessian Determinant over an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.hessian_matrix_eigvals()", "path": "api/skimage.feature#skimage.feature.hessian_matrix_eigvals", "type": "feature", "text": "\nCompute eigenvalues of Hessian matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.hog()", "path": "api/skimage.feature#skimage.feature.hog", "type": "feature", "text": "\nExtract Histogram of Oriented Gradients (HOG) for a given image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.local_binary_pattern()", "path": "api/skimage.feature#skimage.feature.local_binary_pattern", "type": "feature", "text": "\nGray scale and rotation invariant LBP (Local Binary Patterns).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.masked_register_translation()", "path": "api/skimage.feature#skimage.feature.masked_register_translation", "type": "feature", "text": "\nDeprecated function. Use `skimage.registration.phase_cross_correlation`\ninstead.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.match_descriptors()", "path": "api/skimage.feature#skimage.feature.match_descriptors", "type": "feature", "text": "\nBrute-force matching of descriptors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.match_template()", "path": "api/skimage.feature#skimage.feature.match_template", "type": "feature", "text": "\nMatch a template to a 2-D or 3-D image using normalized correlation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.multiblock_lbp()", "path": "api/skimage.feature#skimage.feature.multiblock_lbp", "type": "feature", "text": "\nMulti-block local binary pattern (MB-LBP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.multiscale_basic_features()", "path": "api/skimage.feature#skimage.feature.multiscale_basic_features", "type": "feature", "text": "\nLocal features for a single- or multi-channel nd image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.ORB", "path": "api/skimage.feature#skimage.feature.ORB", "type": "feature", "text": "\nBases: `skimage.feature.util.FeatureDetector`,\n`skimage.feature.util.DescriptorExtractor`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.ORB.detect()", "path": "api/skimage.feature#skimage.feature.ORB.detect", "type": "feature", "text": "\nDetect oriented FAST keypoints along with the corresponding scale.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.ORB.detect_and_extract()", "path": "api/skimage.feature#skimage.feature.ORB.detect_and_extract", "type": "feature", "text": "\nDetect oriented FAST keypoints and extract rBRIEF descriptors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.ORB.extract()", "path": "api/skimage.feature#skimage.feature.ORB.extract", "type": "feature", "text": "\nExtract rBRIEF binary descriptors for given keypoints in image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.ORB.__init__()", "path": "api/skimage.feature#skimage.feature.ORB.__init__", "type": "feature", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.peak_local_max()", "path": "api/skimage.feature#skimage.feature.peak_local_max", "type": "feature", "text": "\nFind peaks in an image as coordinate list or boolean mask.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.plot_matches()", "path": "api/skimage.feature#skimage.feature.plot_matches", "type": "feature", "text": "\nPlot matched features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.register_translation()", "path": "api/skimage.feature#skimage.feature.register_translation", "type": "feature", "text": "\nDeprecated function. Use `skimage.registration.phase_cross_correlation`\ninstead.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.shape_index()", "path": "api/skimage.feature#skimage.feature.shape_index", "type": "feature", "text": "\nCompute the shape index.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.structure_tensor()", "path": "api/skimage.feature#skimage.feature.structure_tensor", "type": "feature", "text": "\nCompute structure tensor using sum of squared differences.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.structure_tensor_eigenvalues()", "path": "api/skimage.feature#skimage.feature.structure_tensor_eigenvalues", "type": "feature", "text": "\nCompute eigenvalues of structure tensor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature.structure_tensor_eigvals()", "path": "api/skimage.feature#skimage.feature.structure_tensor_eigvals", "type": "feature", "text": "\nCompute eigenvalues of structure tensor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters", "path": "api/skimage.filters", "type": "filters", "text": "\n`skimage.filters.apply_hysteresis_threshold`(\u2026)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.apply_hysteresis_threshold()", "path": "api/skimage.filters#skimage.filters.apply_hysteresis_threshold", "type": "filters", "text": "\nApply hysteresis thresholding to `image`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.correlate_sparse()", "path": "api/skimage.filters#skimage.filters.correlate_sparse", "type": "filters", "text": "\nCompute valid cross-correlation of `padded_array` and `kernel`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.difference_of_gaussians()", "path": "api/skimage.filters#skimage.filters.difference_of_gaussians", "type": "filters", "text": "\nFind features between `low_sigma` and `high_sigma` in size.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.farid()", "path": "api/skimage.filters#skimage.filters.farid", "type": "filters", "text": "\nFind the edge magnitude using the Farid transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.farid_h()", "path": "api/skimage.filters#skimage.filters.farid_h", "type": "filters", "text": "\nFind the horizontal edges of an image using the Farid transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.farid_v()", "path": "api/skimage.filters#skimage.filters.farid_v", "type": "filters", "text": "\nFind the vertical edges of an image using the Farid transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.frangi()", "path": "api/skimage.filters#skimage.filters.frangi", "type": "filters", "text": "\nFilter an image with the Frangi vesselness filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.gabor()", "path": "api/skimage.filters#skimage.filters.gabor", "type": "filters", "text": "\nReturn real and imaginary responses to Gabor filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.gabor_kernel()", "path": "api/skimage.filters#skimage.filters.gabor_kernel", "type": "filters", "text": "\nReturn complex 2D Gabor filter kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.gaussian()", "path": "api/skimage.filters#skimage.filters.gaussian", "type": "filters", "text": "\nMulti-dimensional Gaussian filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.hessian()", "path": "api/skimage.filters#skimage.filters.hessian", "type": "filters", "text": "\nFilter an image with the Hybrid Hessian filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.inverse()", "path": "api/skimage.filters#skimage.filters.inverse", "type": "filters", "text": "\nApply the filter in reverse to the given data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.laplace()", "path": "api/skimage.filters#skimage.filters.laplace", "type": "filters", "text": "\nFind the edges of an image using the Laplace operator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.LPIFilter2D", "path": "api/skimage.filters#skimage.filters.LPIFilter2D", "type": "filters", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.LPIFilter2D.__init__()", "path": "api/skimage.filters#skimage.filters.LPIFilter2D.__init__", "type": "filters", "text": "\nFunction that yields the impulse response. `r` and `c` are 1-dimensional\nvectors that represent row and column positions, in other words coordinates\nare (r[0],c[0]),(r[0],c[1]) etc. `**filter_params` are passed through.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.median()", "path": "api/skimage.filters#skimage.filters.median", "type": "filters", "text": "\nReturn local median of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.meijering()", "path": "api/skimage.filters#skimage.filters.meijering", "type": "filters", "text": "\nFilter an image with the Meijering neuriteness filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.prewitt()", "path": "api/skimage.filters#skimage.filters.prewitt", "type": "filters", "text": "\nFind the edge magnitude using the Prewitt transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.prewitt_h()", "path": "api/skimage.filters#skimage.filters.prewitt_h", "type": "filters", "text": "\nFind the horizontal edges of an image using the Prewitt transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.prewitt_v()", "path": "api/skimage.filters#skimage.filters.prewitt_v", "type": "filters", "text": "\nFind the vertical edges of an image using the Prewitt transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank", "path": "api/skimage.filters.rank", "type": "filters", "text": "\n`skimage.filters.rank.autolevel`(image, selem)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.autolevel()", "path": "api/skimage.filters.rank#skimage.filters.rank.autolevel", "type": "filters", "text": "\nAuto-level image using local histogram.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.autolevel_percentile()", "path": "api/skimage.filters.rank#skimage.filters.rank.autolevel_percentile", "type": "filters", "text": "\nReturn greyscale local autolevel of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.bottomhat()", "path": "api/skimage.filters.rank#skimage.filters.rank.bottomhat", "type": "filters", "text": "\nLocal bottom-hat of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.enhance_contrast()", "path": "api/skimage.filters.rank#skimage.filters.rank.enhance_contrast", "type": "filters", "text": "\nEnhance contrast of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.enhance_contrast_percentile()", "path": "api/skimage.filters.rank#skimage.filters.rank.enhance_contrast_percentile", "type": "filters", "text": "\nEnhance contrast of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.entropy()", "path": "api/skimage.filters.rank#skimage.filters.rank.entropy", "type": "filters", "text": "\nLocal entropy.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.equalize()", "path": "api/skimage.filters.rank#skimage.filters.rank.equalize", "type": "filters", "text": "\nEqualize image using local histogram.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.geometric_mean()", "path": "api/skimage.filters.rank#skimage.filters.rank.geometric_mean", "type": "filters", "text": "\nReturn local geometric mean of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.gradient()", "path": "api/skimage.filters.rank#skimage.filters.rank.gradient", "type": "filters", "text": "\nReturn local gradient of an image (i.e. local maximum - local minimum).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.gradient_percentile()", "path": "api/skimage.filters.rank#skimage.filters.rank.gradient_percentile", "type": "filters", "text": "\nReturn local gradient of an image (i.e. local maximum - local minimum).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.majority()", "path": "api/skimage.filters.rank#skimage.filters.rank.majority", "type": "filters", "text": "\nMajority filter assign to each pixel the most occuring value within its\nneighborhood.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.maximum()", "path": "api/skimage.filters.rank#skimage.filters.rank.maximum", "type": "filters", "text": "\nReturn local maximum of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.mean()", "path": "api/skimage.filters.rank#skimage.filters.rank.mean", "type": "filters", "text": "\nReturn local mean of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.mean_bilateral()", "path": "api/skimage.filters.rank#skimage.filters.rank.mean_bilateral", "type": "filters", "text": "\nApply a flat kernel bilateral filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.mean_percentile()", "path": "api/skimage.filters.rank#skimage.filters.rank.mean_percentile", "type": "filters", "text": "\nReturn local mean of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.median()", "path": "api/skimage.filters.rank#skimage.filters.rank.median", "type": "filters", "text": "\nReturn local median of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.minimum()", "path": "api/skimage.filters.rank#skimage.filters.rank.minimum", "type": "filters", "text": "\nReturn local minimum of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.modal()", "path": "api/skimage.filters.rank#skimage.filters.rank.modal", "type": "filters", "text": "\nReturn local mode of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.noise_filter()", "path": "api/skimage.filters.rank#skimage.filters.rank.noise_filter", "type": "filters", "text": "\nNoise feature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.otsu()", "path": "api/skimage.filters.rank#skimage.filters.rank.otsu", "type": "filters", "text": "\nLocal Otsu\u2019s threshold value for each pixel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.percentile()", "path": "api/skimage.filters.rank#skimage.filters.rank.percentile", "type": "filters", "text": "\nReturn local percentile of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.pop()", "path": "api/skimage.filters.rank#skimage.filters.rank.pop", "type": "filters", "text": "\nReturn the local number (population) of pixels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.pop_bilateral()", "path": "api/skimage.filters.rank#skimage.filters.rank.pop_bilateral", "type": "filters", "text": "\nReturn the local number (population) of pixels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.pop_percentile()", "path": "api/skimage.filters.rank#skimage.filters.rank.pop_percentile", "type": "filters", "text": "\nReturn the local number (population) of pixels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.subtract_mean()", "path": "api/skimage.filters.rank#skimage.filters.rank.subtract_mean", "type": "filters", "text": "\nReturn image subtracted from its local mean.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.subtract_mean_percentile()", "path": "api/skimage.filters.rank#skimage.filters.rank.subtract_mean_percentile", "type": "filters", "text": "\nReturn image subtracted from its local mean.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.sum()", "path": "api/skimage.filters.rank#skimage.filters.rank.sum", "type": "filters", "text": "\nReturn the local sum of pixels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.sum_bilateral()", "path": "api/skimage.filters.rank#skimage.filters.rank.sum_bilateral", "type": "filters", "text": "\nApply a flat kernel bilateral filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.sum_percentile()", "path": "api/skimage.filters.rank#skimage.filters.rank.sum_percentile", "type": "filters", "text": "\nReturn the local sum of pixels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.threshold()", "path": "api/skimage.filters.rank#skimage.filters.rank.threshold", "type": "filters", "text": "\nLocal threshold of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.threshold_percentile()", "path": "api/skimage.filters.rank#skimage.filters.rank.threshold_percentile", "type": "filters", "text": "\nLocal threshold of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.tophat()", "path": "api/skimage.filters.rank#skimage.filters.rank.tophat", "type": "filters", "text": "\nLocal top-hat of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank.windowed_histogram()", "path": "api/skimage.filters.rank#skimage.filters.rank.windowed_histogram", "type": "filters", "text": "\nNormalized sliding window histogram\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.rank_order()", "path": "api/skimage.filters#skimage.filters.rank_order", "type": "filters", "text": "\nReturn an image of the same shape where each pixel is the index of the pixel\nvalue in the ascending order of the unique values of `image`, aka the rank-\norder value.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.roberts()", "path": "api/skimage.filters#skimage.filters.roberts", "type": "filters", "text": "\nFind the edge magnitude using Roberts\u2019 cross operator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.roberts_neg_diag()", "path": "api/skimage.filters#skimage.filters.roberts_neg_diag", "type": "filters", "text": "\nFind the cross edges of an image using the Roberts\u2019 Cross operator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.roberts_pos_diag()", "path": "api/skimage.filters#skimage.filters.roberts_pos_diag", "type": "filters", "text": "\nFind the cross edges of an image using Roberts\u2019 cross operator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.sato()", "path": "api/skimage.filters#skimage.filters.sato", "type": "filters", "text": "\nFilter an image with the Sato tubeness filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.scharr()", "path": "api/skimage.filters#skimage.filters.scharr", "type": "filters", "text": "\nFind the edge magnitude using the Scharr transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.scharr_h()", "path": "api/skimage.filters#skimage.filters.scharr_h", "type": "filters", "text": "\nFind the horizontal edges of an image using the Scharr transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.scharr_v()", "path": "api/skimage.filters#skimage.filters.scharr_v", "type": "filters", "text": "\nFind the vertical edges of an image using the Scharr transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.sobel()", "path": "api/skimage.filters#skimage.filters.sobel", "type": "filters", "text": "\nFind edges in an image using the Sobel filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.sobel_h()", "path": "api/skimage.filters#skimage.filters.sobel_h", "type": "filters", "text": "\nFind the horizontal edges of an image using the Sobel transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.sobel_v()", "path": "api/skimage.filters#skimage.filters.sobel_v", "type": "filters", "text": "\nFind the vertical edges of an image using the Sobel transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_isodata()", "path": "api/skimage.filters#skimage.filters.threshold_isodata", "type": "filters", "text": "\nReturn threshold value(s) based on ISODATA method.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_li()", "path": "api/skimage.filters#skimage.filters.threshold_li", "type": "filters", "text": "\nCompute threshold value by Li\u2019s iterative Minimum Cross Entropy method.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_local()", "path": "api/skimage.filters#skimage.filters.threshold_local", "type": "filters", "text": "\nCompute a threshold mask image based on local pixel neighborhood.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_mean()", "path": "api/skimage.filters#skimage.filters.threshold_mean", "type": "filters", "text": "\nReturn threshold value based on the mean of grayscale values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_minimum()", "path": "api/skimage.filters#skimage.filters.threshold_minimum", "type": "filters", "text": "\nReturn threshold value based on minimum method.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_multiotsu()", "path": "api/skimage.filters#skimage.filters.threshold_multiotsu", "type": "filters", "text": "\nGenerate `classes`-1 threshold values to divide gray levels in `image`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_niblack()", "path": "api/skimage.filters#skimage.filters.threshold_niblack", "type": "filters", "text": "\nApplies Niblack local threshold to an array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_otsu()", "path": "api/skimage.filters#skimage.filters.threshold_otsu", "type": "filters", "text": "\nReturn threshold value based on Otsu\u2019s method.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_sauvola()", "path": "api/skimage.filters#skimage.filters.threshold_sauvola", "type": "filters", "text": "\nApplies Sauvola local threshold to an array. Sauvola is a modification of\nNiblack technique.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_triangle()", "path": "api/skimage.filters#skimage.filters.threshold_triangle", "type": "filters", "text": "\nReturn threshold value based on the triangle algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.threshold_yen()", "path": "api/skimage.filters#skimage.filters.threshold_yen", "type": "filters", "text": "\nReturn threshold value based on Yen\u2019s method. Either image or hist must be\nprovided. In case hist is given, the actual histogram of the image is ignored.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.try_all_threshold()", "path": "api/skimage.filters#skimage.filters.try_all_threshold", "type": "filters", "text": "\nReturns a figure comparing the outputs of different thresholding methods.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.unsharp_mask()", "path": "api/skimage.filters#skimage.filters.unsharp_mask", "type": "filters", "text": "\nUnsharp masking filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.wiener()", "path": "api/skimage.filters#skimage.filters.wiener", "type": "filters", "text": "\nMinimum Mean Square Error (Wiener) inverse filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "filters.window()", "path": "api/skimage.filters#skimage.filters.window", "type": "filters", "text": "\nReturn an n-dimensional window of a given size and dimensionality.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future", "path": "api/skimage.future", "type": "future", "text": "\nFunctionality with an experimental API. Although you can count on the\nfunctions in this package being around in the future, the API may change with\nany version update and will not follow the skimage two-version deprecation\npath. Therefore, use the functions herein with care, and do not use them in\nproduction code that will depend on updated skimage versions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.fit_segmenter()", "path": "api/skimage.future#skimage.future.fit_segmenter", "type": "future", "text": "\nSegmentation using labeled parts of the image and a classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph", "path": "api/skimage.future.graph", "type": "future", "text": "\n`skimage.future.graph.cut_normalized`(labels, rag)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.cut_normalized()", "path": "api/skimage.future.graph#skimage.future.graph.cut_normalized", "type": "future", "text": "\nPerform Normalized Graph cut on the Region Adjacency Graph.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.cut_threshold()", "path": "api/skimage.future.graph#skimage.future.graph.cut_threshold", "type": "future", "text": "\nCombine regions separated by weight less than threshold.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.merge_hierarchical()", "path": "api/skimage.future.graph#skimage.future.graph.merge_hierarchical", "type": "future", "text": "\nPerform hierarchical merging of a RAG.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.ncut()", "path": "api/skimage.future.graph#skimage.future.graph.ncut", "type": "future", "text": "\nPerform Normalized Graph cut on the Region Adjacency Graph.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.RAG", "path": "api/skimage.future.graph#skimage.future.graph.RAG", "type": "future", "text": "\nBases: `networkx.classes.graph.Graph`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.RAG.add_edge()", "path": "api/skimage.future.graph#skimage.future.graph.RAG.add_edge", "type": "future", "text": "\nAdd an edge between `u` and `v` while updating max node id.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.RAG.add_node()", "path": "api/skimage.future.graph#skimage.future.graph.RAG.add_node", "type": "future", "text": "\nAdd node `n` while updating the maximum node id.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.RAG.copy()", "path": "api/skimage.future.graph#skimage.future.graph.RAG.copy", "type": "future", "text": "\nCopy the graph with its max node id.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.RAG.fresh_copy()", "path": "api/skimage.future.graph#skimage.future.graph.RAG.fresh_copy", "type": "future", "text": "\nReturn a fresh copy graph with the same data structure.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.RAG.merge_nodes()", "path": "api/skimage.future.graph#skimage.future.graph.RAG.merge_nodes", "type": "future", "text": "\nMerge node `src` and `dst`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.RAG.next_id()", "path": "api/skimage.future.graph#skimage.future.graph.RAG.next_id", "type": "future", "text": "\nReturns the `id` for the new node to be inserted.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.RAG.__init__()", "path": "api/skimage.future.graph#skimage.future.graph.RAG.__init__", "type": "future", "text": "\nInitialize a graph with edges, name, or graph attributes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.rag_boundary()", "path": "api/skimage.future.graph#skimage.future.graph.rag_boundary", "type": "future", "text": "\nComouter RAG based on region boundaries\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.rag_mean_color()", "path": "api/skimage.future.graph#skimage.future.graph.rag_mean_color", "type": "future", "text": "\nCompute the Region Adjacency Graph using mean colors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.graph.show_rag()", "path": "api/skimage.future.graph#skimage.future.graph.show_rag", "type": "future", "text": "\nShow a Region Adjacency Graph on an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.manual_lasso_segmentation()", "path": "api/skimage.future#skimage.future.manual_lasso_segmentation", "type": "future", "text": "\nReturn a label image based on freeform selections made with the mouse.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.manual_polygon_segmentation()", "path": "api/skimage.future#skimage.future.manual_polygon_segmentation", "type": "future", "text": "\nReturn a label image based on polygon selections made with the mouse.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.predict_segmenter()", "path": "api/skimage.future#skimage.future.predict_segmenter", "type": "future", "text": "\nSegmentation of images using a pretrained classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.TrainableSegmenter", "path": "api/skimage.future#skimage.future.TrainableSegmenter", "type": "future", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.TrainableSegmenter.compute_features()", "path": "api/skimage.future#skimage.future.TrainableSegmenter.compute_features", "type": "future", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.TrainableSegmenter.fit()", "path": "api/skimage.future#skimage.future.TrainableSegmenter.fit", "type": "future", "text": "\nTrain classifier using partially labeled (annotated) image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.TrainableSegmenter.predict()", "path": "api/skimage.future#skimage.future.TrainableSegmenter.predict", "type": "future", "text": "\nSegment new image using trained internal classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "future.TrainableSegmenter.__init__()", "path": "api/skimage.future#skimage.future.TrainableSegmenter.__init__", "type": "future", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Geometrical transformations of images", "path": "user_guide/geometrical_transform", "type": "Guide", "text": "\nImages being NumPy arrays (as described in the A crash course on NumPy for\nimages section), cropping an image can be done with simple slicing operations.\nBelow we crop a 100x100 square corresponding to the top-left corner of the\nastronaut image. Note that this operation is done for all color channels (the\ncolor dimension is the last, third dimension):\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Getting help on using skimage", "path": "user_guide/getting_help", "type": "Guide", "text": "\nBesides the user guide, there exist other opportunities to get help on using\n`skimage`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Getting started", "path": "user_guide/getting_started", "type": "Guide", "text": "\n`scikit-image` is an image processing Python package that works with `numpy`\narrays. The package is imported as `skimage`:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph", "path": "api/skimage.graph", "type": "graph", "text": "\n`skimage.graph.route_through_array`(array, \u2026)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP", "path": "api/skimage.graph#skimage.graph.MCP", "type": "graph", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP.find_costs()", "path": "api/skimage.graph#skimage.graph.MCP.find_costs", "type": "graph", "text": "\nFind the minimum-cost path from the given starting points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP.goal_reached()", "path": "api/skimage.graph#skimage.graph.MCP.goal_reached", "type": "graph", "text": "\nint goal_reached(int index, float cumcost) This method is called each\niteration after popping an index from the heap, before examining the\nneighbours.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP.traceback()", "path": "api/skimage.graph#skimage.graph.MCP.traceback", "type": "graph", "text": "\nTrace a minimum cost path through the pre-calculated traceback array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP.__init__()", "path": "api/skimage.graph#skimage.graph.MCP.__init__", "type": "graph", "text": "\nSee class documentation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP_Connect", "path": "api/skimage.graph#skimage.graph.MCP_Connect", "type": "graph", "text": "\nBases: `skimage.graph._mcp.MCP`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP_Connect.create_connection()", "path": "api/skimage.graph#skimage.graph.MCP_Connect.create_connection", "type": "graph", "text": "\ncreate_connection id1, id2, pos1, pos2, cost1, cost2)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP_Connect.__init__()", "path": "api/skimage.graph#skimage.graph.MCP_Connect.__init__", "type": "graph", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP_Flexible", "path": "api/skimage.graph#skimage.graph.MCP_Flexible", "type": "graph", "text": "\nBases: `skimage.graph._mcp.MCP`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP_Flexible.examine_neighbor()", "path": "api/skimage.graph#skimage.graph.MCP_Flexible.examine_neighbor", "type": "graph", "text": "\nThis method is called once for every pair of neighboring nodes, as soon as\nboth nodes are frozen.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP_Flexible.travel_cost()", "path": "api/skimage.graph#skimage.graph.MCP_Flexible.travel_cost", "type": "graph", "text": "\nThis method calculates the travel cost for going from the current node to the\nnext. The default implementation returns new_cost. Overload this method to\nadapt the behaviour of the algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP_Flexible.update_node()", "path": "api/skimage.graph#skimage.graph.MCP_Flexible.update_node", "type": "graph", "text": "\nThis method is called when a node is updated, right after new_index is pushed\nonto the heap and the traceback map is updated.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP_Flexible.__init__()", "path": "api/skimage.graph#skimage.graph.MCP_Flexible.__init__", "type": "graph", "text": "\nSee class documentation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP_Geometric", "path": "api/skimage.graph#skimage.graph.MCP_Geometric", "type": "graph", "text": "\nBases: `skimage.graph._mcp.MCP`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.MCP_Geometric.__init__()", "path": "api/skimage.graph#skimage.graph.MCP_Geometric.__init__", "type": "graph", "text": "\nSee class documentation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.route_through_array()", "path": "api/skimage.graph#skimage.graph.route_through_array", "type": "graph", "text": "\nSimple example of how to use the MCP and MCP_Geometric classes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "graph.shortest_path()", "path": "api/skimage.graph#skimage.graph.shortest_path", "type": "graph", "text": "\nFind the shortest path through an n-d array from one side to another.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Handling Video Files", "path": "user_guide/video", "type": "Guide", "text": "\nSometimes it is necessary to read a sequence of images from a standard video\nfile, such as .avi and .mov files.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "How to parallelize loops", "path": "user_guide/tutorial_parallelization", "type": "Guide", "text": "\nIn image processing, we frequently apply the same algorithm on a large batch\nof images. In this paragraph, we propose to use joblib to parallelize loops.\nHere is an example of such repetitive tasks:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "I/O Plugin Infrastructure", "path": "user_guide/plugins", "type": "Guide", "text": "\nA plugin consists of two files, the source and the descriptor `.ini`. Let\u2019s\nsay we\u2019d like to provide a plugin for `imshow` using `matplotlib`. We\u2019ll call\nour plugin `mpl`:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Image adjustment: transforming image content", "path": "user_guide/transforming_image_data", "type": "Guide", "text": "\nMost functions for manipulating color channels are found in the submodule\n`skimage.color`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Image data types and what they mean", "path": "user_guide/data_types", "type": "Guide", "text": "\nIn `skimage`, images are simply numpy arrays, which support a variety of data\ntypes 1, i.e. \u201cdtypes\u201d. To avoid distorting image intensities (see Rescaling\nintensity values), we assume that images use the following dtype ranges:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Image Segmentation", "path": "user_guide/tutorial_segmentation", "type": "Guide", "text": "\nImage segmentation is the task of labeling the pixels of objects of interest\nin an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Image Viewer", "path": "user_guide/viewer", "type": "Guide", "text": "\nWarning\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "img_as_bool()", "path": "api/skimage#skimage.img_as_bool", "type": "skimage", "text": "\nConvert an image to boolean format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "img_as_float()", "path": "api/skimage#skimage.img_as_float", "type": "skimage", "text": "\nConvert an image to floating point format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "img_as_float32()", "path": "api/skimage#skimage.img_as_float32", "type": "skimage", "text": "\nConvert an image to single-precision (32-bit) floating point format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "img_as_float64()", "path": "api/skimage#skimage.img_as_float64", "type": "skimage", "text": "\nConvert an image to double-precision (64-bit) floating point format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "img_as_int()", "path": "api/skimage#skimage.img_as_int", "type": "skimage", "text": "\nConvert an image to 16-bit signed integer format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "img_as_ubyte()", "path": "api/skimage#skimage.img_as_ubyte", "type": "skimage", "text": "\nConvert an image to 8-bit unsigned integer format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "img_as_uint()", "path": "api/skimage#skimage.img_as_uint", "type": "skimage", "text": "\nConvert an image to 16-bit unsigned integer format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io", "path": "api/skimage.io", "type": "io", "text": "\nUtilities to read and write images in various formats.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.call_plugin()", "path": "api/skimage.io#skimage.io.call_plugin", "type": "io", "text": "\nFind the appropriate plugin of \u2018kind\u2019 and execute it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.concatenate_images()", "path": "api/skimage.io#skimage.io.concatenate_images", "type": "io", "text": "\nConcatenate all images in the image collection into an array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.find_available_plugins()", "path": "api/skimage.io#skimage.io.find_available_plugins", "type": "io", "text": "\nList available plugins.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.ImageCollection", "path": "api/skimage.io#skimage.io.ImageCollection", "type": "io", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.ImageCollection.concatenate()", "path": "api/skimage.io#skimage.io.ImageCollection.concatenate", "type": "io", "text": "\nConcatenate all images in the collection into an array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.ImageCollection.conserve_memory()", "path": "api/skimage.io#skimage.io.ImageCollection.conserve_memory", "type": "io", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.ImageCollection.files()", "path": "api/skimage.io#skimage.io.ImageCollection.files", "type": "io", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.ImageCollection.reload()", "path": "api/skimage.io#skimage.io.ImageCollection.reload", "type": "io", "text": "\nClear the image cache.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.ImageCollection.__init__()", "path": "api/skimage.io#skimage.io.ImageCollection.__init__", "type": "io", "text": "\nLoad and manage a collection of images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.imread()", "path": "api/skimage.io#skimage.io.imread", "type": "io", "text": "\nLoad an image from file.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.imread_collection()", "path": "api/skimage.io#skimage.io.imread_collection", "type": "io", "text": "\nLoad a collection of images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.imread_collection_wrapper()", "path": "api/skimage.io#skimage.io.imread_collection_wrapper", "type": "io", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.imsave()", "path": "api/skimage.io#skimage.io.imsave", "type": "io", "text": "\nSave an image to file.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.imshow()", "path": "api/skimage.io#skimage.io.imshow", "type": "io", "text": "\nDisplay an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.imshow_collection()", "path": "api/skimage.io#skimage.io.imshow_collection", "type": "io", "text": "\nDisplay a collection of images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.load_sift()", "path": "api/skimage.io#skimage.io.load_sift", "type": "io", "text": "\nRead SIFT or SURF features from externally generated file.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.load_surf()", "path": "api/skimage.io#skimage.io.load_surf", "type": "io", "text": "\nRead SIFT or SURF features from externally generated file.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.MultiImage", "path": "api/skimage.io#skimage.io.MultiImage", "type": "io", "text": "\nBases: `skimage.io.collection.ImageCollection`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.MultiImage.filename()", "path": "api/skimage.io#skimage.io.MultiImage.filename", "type": "io", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.MultiImage.__init__()", "path": "api/skimage.io#skimage.io.MultiImage.__init__", "type": "io", "text": "\nLoad a multi-img.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.plugin_info()", "path": "api/skimage.io#skimage.io.plugin_info", "type": "io", "text": "\nReturn plugin meta-data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.plugin_order()", "path": "api/skimage.io#skimage.io.plugin_order", "type": "io", "text": "\nReturn the currently preferred plugin order.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.pop()", "path": "api/skimage.io#skimage.io.pop", "type": "io", "text": "\nPop an image from the shared image stack.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.push()", "path": "api/skimage.io#skimage.io.push", "type": "io", "text": "\nPush an image onto the shared image stack.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.reset_plugins()", "path": "api/skimage.io#skimage.io.reset_plugins", "type": "io", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.show()", "path": "api/skimage.io#skimage.io.show", "type": "io", "text": "\nDisplay pending images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "io.use_plugin()", "path": "api/skimage.io#skimage.io.use_plugin", "type": "io", "text": "\nSet the default plugin for a specified operation. The plugin will be loaded if\nit hasn\u2019t been already.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "lookfor()", "path": "api/skimage#skimage.lookfor", "type": "skimage", "text": "\nDo a keyword search on scikit-image docstrings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure", "path": "api/skimage.measure", "type": "measure", "text": "\n`skimage.measure.approximate_polygon`(coords, \u2026)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.approximate_polygon()", "path": "api/skimage.measure#skimage.measure.approximate_polygon", "type": "measure", "text": "\nApproximate a polygonal chain with the specified tolerance.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.block_reduce()", "path": "api/skimage.measure#skimage.measure.block_reduce", "type": "measure", "text": "\nDownsample image by applying function `func` to local blocks.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.CircleModel", "path": "api/skimage.measure#skimage.measure.CircleModel", "type": "measure", "text": "\nBases: `skimage.measure.fit.BaseModel`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.CircleModel.estimate()", "path": "api/skimage.measure#skimage.measure.CircleModel.estimate", "type": "measure", "text": "\nEstimate circle model from data using total least squares.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.CircleModel.predict_xy()", "path": "api/skimage.measure#skimage.measure.CircleModel.predict_xy", "type": "measure", "text": "\nPredict x- and y-coordinates using the estimated model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.CircleModel.residuals()", "path": "api/skimage.measure#skimage.measure.CircleModel.residuals", "type": "measure", "text": "\nDetermine residuals of data to model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.CircleModel.__init__()", "path": "api/skimage.measure#skimage.measure.CircleModel.__init__", "type": "measure", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.EllipseModel", "path": "api/skimage.measure#skimage.measure.EllipseModel", "type": "measure", "text": "\nBases: `skimage.measure.fit.BaseModel`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.EllipseModel.estimate()", "path": "api/skimage.measure#skimage.measure.EllipseModel.estimate", "type": "measure", "text": "\nEstimate circle model from data using total least squares.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.EllipseModel.predict_xy()", "path": "api/skimage.measure#skimage.measure.EllipseModel.predict_xy", "type": "measure", "text": "\nPredict x- and y-coordinates using the estimated model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.EllipseModel.residuals()", "path": "api/skimage.measure#skimage.measure.EllipseModel.residuals", "type": "measure", "text": "\nDetermine residuals of data to model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.EllipseModel.__init__()", "path": "api/skimage.measure#skimage.measure.EllipseModel.__init__", "type": "measure", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.euler_number()", "path": "api/skimage.measure#skimage.measure.euler_number", "type": "measure", "text": "\nCalculate the Euler characteristic in binary image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.find_contours()", "path": "api/skimage.measure#skimage.measure.find_contours", "type": "measure", "text": "\nFind iso-valued contours in a 2D array for a given level value.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.grid_points_in_poly()", "path": "api/skimage.measure#skimage.measure.grid_points_in_poly", "type": "measure", "text": "\nTest whether points on a specified grid are inside a polygon.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.inertia_tensor()", "path": "api/skimage.measure#skimage.measure.inertia_tensor", "type": "measure", "text": "\nCompute the inertia tensor of the input image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.inertia_tensor_eigvals()", "path": "api/skimage.measure#skimage.measure.inertia_tensor_eigvals", "type": "measure", "text": "\nCompute the eigenvalues of the inertia tensor of the image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.label()", "path": "api/skimage.measure#skimage.measure.label", "type": "measure", "text": "\nLabel connected regions of an integer array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.LineModelND", "path": "api/skimage.measure#skimage.measure.LineModelND", "type": "measure", "text": "\nBases: `skimage.measure.fit.BaseModel`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.LineModelND.estimate()", "path": "api/skimage.measure#skimage.measure.LineModelND.estimate", "type": "measure", "text": "\nEstimate line model from data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.LineModelND.predict()", "path": "api/skimage.measure#skimage.measure.LineModelND.predict", "type": "measure", "text": "\nPredict intersection of the estimated line model with a hyperplane orthogonal\nto a given axis.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.LineModelND.predict_x()", "path": "api/skimage.measure#skimage.measure.LineModelND.predict_x", "type": "measure", "text": "\nPredict x-coordinates for 2D lines using the estimated model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.LineModelND.predict_y()", "path": "api/skimage.measure#skimage.measure.LineModelND.predict_y", "type": "measure", "text": "\nPredict y-coordinates for 2D lines using the estimated model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.LineModelND.residuals()", "path": "api/skimage.measure#skimage.measure.LineModelND.residuals", "type": "measure", "text": "\nDetermine residuals of data to model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.LineModelND.__init__()", "path": "api/skimage.measure#skimage.measure.LineModelND.__init__", "type": "measure", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.marching_cubes()", "path": "api/skimage.measure#skimage.measure.marching_cubes", "type": "measure", "text": "\nMarching cubes algorithm to find surfaces in 3d volumetric data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.marching_cubes_classic()", "path": "api/skimage.measure#skimage.measure.marching_cubes_classic", "type": "measure", "text": "\nClassic marching cubes algorithm to find surfaces in 3d volumetric data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.marching_cubes_lewiner()", "path": "api/skimage.measure#skimage.measure.marching_cubes_lewiner", "type": "measure", "text": "\nLewiner marching cubes algorithm to find surfaces in 3d volumetric data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.mesh_surface_area()", "path": "api/skimage.measure#skimage.measure.mesh_surface_area", "type": "measure", "text": "\nCompute surface area, given vertices & triangular faces\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.moments()", "path": "api/skimage.measure#skimage.measure.moments", "type": "measure", "text": "\nCalculate all raw image moments up to a certain order.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.moments_central()", "path": "api/skimage.measure#skimage.measure.moments_central", "type": "measure", "text": "\nCalculate all central image moments up to a certain order.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.moments_coords()", "path": "api/skimage.measure#skimage.measure.moments_coords", "type": "measure", "text": "\nCalculate all raw image moments up to a certain order.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.moments_coords_central()", "path": "api/skimage.measure#skimage.measure.moments_coords_central", "type": "measure", "text": "\nCalculate all central image moments up to a certain order.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.moments_hu()", "path": "api/skimage.measure#skimage.measure.moments_hu", "type": "measure", "text": "\nCalculate Hu\u2019s set of image moments (2D-only).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.moments_normalized()", "path": "api/skimage.measure#skimage.measure.moments_normalized", "type": "measure", "text": "\nCalculate all normalized central image moments up to a certain order.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.perimeter()", "path": "api/skimage.measure#skimage.measure.perimeter", "type": "measure", "text": "\nCalculate total perimeter of all objects in binary image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.perimeter_crofton()", "path": "api/skimage.measure#skimage.measure.perimeter_crofton", "type": "measure", "text": "\nCalculate total Crofton perimeter of all objects in binary image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.points_in_poly()", "path": "api/skimage.measure#skimage.measure.points_in_poly", "type": "measure", "text": "\nTest whether points lie inside a polygon.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.profile_line()", "path": "api/skimage.measure#skimage.measure.profile_line", "type": "measure", "text": "\nReturn the intensity profile of an image measured along a scan line.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.ransac()", "path": "api/skimage.measure#skimage.measure.ransac", "type": "measure", "text": "\nFit a model to data with the RANSAC (random sample consensus) algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.regionprops()", "path": "api/skimage.measure#skimage.measure.regionprops", "type": "measure", "text": "\nMeasure properties of labeled image regions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.regionprops_table()", "path": "api/skimage.measure#skimage.measure.regionprops_table", "type": "measure", "text": "\nCompute image properties and return them as a pandas-compatible table.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.shannon_entropy()", "path": "api/skimage.measure#skimage.measure.shannon_entropy", "type": "measure", "text": "\nCalculate the Shannon entropy of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "measure.subdivide_polygon()", "path": "api/skimage.measure#skimage.measure.subdivide_polygon", "type": "measure", "text": "\nSubdivision of polygonal curves using B-Splines.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics", "path": "api/skimage.metrics", "type": "metrics", "text": "\n`skimage.metrics.adapted_rand_error`([\u2026])\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.adapted_rand_error()", "path": "api/skimage.metrics#skimage.metrics.adapted_rand_error", "type": "metrics", "text": "\nCompute Adapted Rand error as defined by the SNEMI3D contest. [1]\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.contingency_table()", "path": "api/skimage.metrics#skimage.metrics.contingency_table", "type": "metrics", "text": "\nReturn the contingency table for all regions in matched segmentations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.hausdorff_distance()", "path": "api/skimage.metrics#skimage.metrics.hausdorff_distance", "type": "metrics", "text": "\nCalculate the Hausdorff distance between nonzero elements of given images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.mean_squared_error()", "path": "api/skimage.metrics#skimage.metrics.mean_squared_error", "type": "metrics", "text": "\nCompute the mean-squared error between two images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.normalized_root_mse()", "path": "api/skimage.metrics#skimage.metrics.normalized_root_mse", "type": "metrics", "text": "\nCompute the normalized root mean-squared error (NRMSE) between two images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.peak_signal_noise_ratio()", "path": "api/skimage.metrics#skimage.metrics.peak_signal_noise_ratio", "type": "metrics", "text": "\nCompute the peak signal to noise ratio (PSNR) for an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.structural_similarity()", "path": "api/skimage.metrics#skimage.metrics.structural_similarity", "type": "metrics", "text": "\nCompute the mean structural similarity index between two images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.variation_of_information()", "path": "api/skimage.metrics#skimage.metrics.variation_of_information", "type": "metrics", "text": "\nReturn symmetric conditional entropies associated with the VI. [1]\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology", "path": "api/skimage.morphology", "type": "morphology", "text": "\n`skimage.morphology.area_closing`(image[, \u2026])\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.area_closing()", "path": "api/skimage.morphology#skimage.morphology.area_closing", "type": "morphology", "text": "\nPerform an area closing of the image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.area_opening()", "path": "api/skimage.morphology#skimage.morphology.area_opening", "type": "morphology", "text": "\nPerform an area opening of the image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.ball()", "path": "api/skimage.morphology#skimage.morphology.ball", "type": "morphology", "text": "\nGenerates a ball-shaped structuring element.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.binary_closing()", "path": "api/skimage.morphology#skimage.morphology.binary_closing", "type": "morphology", "text": "\nReturn fast binary morphological closing of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.binary_dilation()", "path": "api/skimage.morphology#skimage.morphology.binary_dilation", "type": "morphology", "text": "\nReturn fast binary morphological dilation of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.binary_erosion()", "path": "api/skimage.morphology#skimage.morphology.binary_erosion", "type": "morphology", "text": "\nReturn fast binary morphological erosion of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.binary_opening()", "path": "api/skimage.morphology#skimage.morphology.binary_opening", "type": "morphology", "text": "\nReturn fast binary morphological opening of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.black_tophat()", "path": "api/skimage.morphology#skimage.morphology.black_tophat", "type": "morphology", "text": "\nReturn black top hat of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.closing()", "path": "api/skimage.morphology#skimage.morphology.closing", "type": "morphology", "text": "\nReturn greyscale morphological closing of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.convex_hull_image()", "path": "api/skimage.morphology#skimage.morphology.convex_hull_image", "type": "morphology", "text": "\nCompute the convex hull image of a binary image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.convex_hull_object()", "path": "api/skimage.morphology#skimage.morphology.convex_hull_object", "type": "morphology", "text": "\nCompute the convex hull image of individual objects in a binary image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.cube()", "path": "api/skimage.morphology#skimage.morphology.cube", "type": "morphology", "text": "\nGenerates a cube-shaped structuring element.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.diameter_closing()", "path": "api/skimage.morphology#skimage.morphology.diameter_closing", "type": "morphology", "text": "\nPerform a diameter closing of the image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.diameter_opening()", "path": "api/skimage.morphology#skimage.morphology.diameter_opening", "type": "morphology", "text": "\nPerform a diameter opening of the image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.diamond()", "path": "api/skimage.morphology#skimage.morphology.diamond", "type": "morphology", "text": "\nGenerates a flat, diamond-shaped structuring element.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.dilation()", "path": "api/skimage.morphology#skimage.morphology.dilation", "type": "morphology", "text": "\nReturn greyscale morphological dilation of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.disk()", "path": "api/skimage.morphology#skimage.morphology.disk", "type": "morphology", "text": "\nGenerates a flat, disk-shaped structuring element.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.erosion()", "path": "api/skimage.morphology#skimage.morphology.erosion", "type": "morphology", "text": "\nReturn greyscale morphological erosion of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.flood()", "path": "api/skimage.morphology#skimage.morphology.flood", "type": "morphology", "text": "\nMask corresponding to a flood fill.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.flood_fill()", "path": "api/skimage.morphology#skimage.morphology.flood_fill", "type": "morphology", "text": "\nPerform flood filling on an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.h_maxima()", "path": "api/skimage.morphology#skimage.morphology.h_maxima", "type": "morphology", "text": "\nDetermine all maxima of the image with height >= h.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.h_minima()", "path": "api/skimage.morphology#skimage.morphology.h_minima", "type": "morphology", "text": "\nDetermine all minima of the image with depth >= h.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.label()", "path": "api/skimage.morphology#skimage.morphology.label", "type": "morphology", "text": "\nLabel connected regions of an integer array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.local_maxima()", "path": "api/skimage.morphology#skimage.morphology.local_maxima", "type": "morphology", "text": "\nFind local maxima of n-dimensional array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.local_minima()", "path": "api/skimage.morphology#skimage.morphology.local_minima", "type": "morphology", "text": "\nFind local minima of n-dimensional array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.max_tree()", "path": "api/skimage.morphology#skimage.morphology.max_tree", "type": "morphology", "text": "\nBuild the max tree from an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.max_tree_local_maxima()", "path": "api/skimage.morphology#skimage.morphology.max_tree_local_maxima", "type": "morphology", "text": "\nDetermine all local maxima of the image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.medial_axis()", "path": "api/skimage.morphology#skimage.morphology.medial_axis", "type": "morphology", "text": "\nCompute the medial axis transform of a binary image\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.octagon()", "path": "api/skimage.morphology#skimage.morphology.octagon", "type": "morphology", "text": "\nGenerates an octagon shaped structuring element.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.octahedron()", "path": "api/skimage.morphology#skimage.morphology.octahedron", "type": "morphology", "text": "\nGenerates a octahedron-shaped structuring element.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.opening()", "path": "api/skimage.morphology#skimage.morphology.opening", "type": "morphology", "text": "\nReturn greyscale morphological opening of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.reconstruction()", "path": "api/skimage.morphology#skimage.morphology.reconstruction", "type": "morphology", "text": "\nPerform a morphological reconstruction of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.rectangle()", "path": "api/skimage.morphology#skimage.morphology.rectangle", "type": "morphology", "text": "\nGenerates a flat, rectangular-shaped structuring element.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.remove_small_holes()", "path": "api/skimage.morphology#skimage.morphology.remove_small_holes", "type": "morphology", "text": "\nRemove contiguous holes smaller than the specified size.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.remove_small_objects()", "path": "api/skimage.morphology#skimage.morphology.remove_small_objects", "type": "morphology", "text": "\nRemove objects smaller than the specified size.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.skeletonize()", "path": "api/skimage.morphology#skimage.morphology.skeletonize", "type": "morphology", "text": "\nCompute the skeleton of a binary image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.skeletonize_3d()", "path": "api/skimage.morphology#skimage.morphology.skeletonize_3d", "type": "morphology", "text": "\nCompute the skeleton of a binary image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.square()", "path": "api/skimage.morphology#skimage.morphology.square", "type": "morphology", "text": "\nGenerates a flat, square-shaped structuring element.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.star()", "path": "api/skimage.morphology#skimage.morphology.star", "type": "morphology", "text": "\nGenerates a star shaped structuring element.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.thin()", "path": "api/skimage.morphology#skimage.morphology.thin", "type": "morphology", "text": "\nPerform morphological thinning of a binary image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.watershed()", "path": "api/skimage.morphology#skimage.morphology.watershed", "type": "morphology", "text": "\nDeprecated function. Use `skimage.segmentation.watershed` instead.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "morphology.white_tophat()", "path": "api/skimage.morphology#skimage.morphology.white_tophat", "type": "morphology", "text": "\nReturn white top hat of an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "registration", "path": "api/skimage.registration", "type": "registration", "text": "\n`skimage.registration.optical_flow_ilk`(\u2026[, \u2026])\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "registration.optical_flow_ilk()", "path": "api/skimage.registration#skimage.registration.optical_flow_ilk", "type": "registration", "text": "\nCoarse to fine optical flow estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "registration.optical_flow_tvl1()", "path": "api/skimage.registration#skimage.registration.optical_flow_tvl1", "type": "registration", "text": "\nCoarse to fine optical flow estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "registration.phase_cross_correlation()", "path": "api/skimage.registration#skimage.registration.phase_cross_correlation", "type": "registration", "text": "\nEfficient subpixel image translation registration by cross-correlation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration", "path": "api/skimage.restoration", "type": "restoration", "text": "\nImage restoration module.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.ball_kernel()", "path": "api/skimage.restoration#skimage.restoration.ball_kernel", "type": "restoration", "text": "\nCreate a ball kernel for restoration.rolling_ball.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.calibrate_denoiser()", "path": "api/skimage.restoration#skimage.restoration.calibrate_denoiser", "type": "restoration", "text": "\nCalibrate a denoising function and return optimal J-invariant version.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.cycle_spin()", "path": "api/skimage.restoration#skimage.restoration.cycle_spin", "type": "restoration", "text": "\nCycle spinning (repeatedly apply func to shifted versions of x).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.denoise_bilateral()", "path": "api/skimage.restoration#skimage.restoration.denoise_bilateral", "type": "restoration", "text": "\nDenoise image using bilateral filter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.denoise_nl_means()", "path": "api/skimage.restoration#skimage.restoration.denoise_nl_means", "type": "restoration", "text": "\nPerform non-local means denoising on 2-D or 3-D grayscale images, and 2-D RGB\nimages.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.denoise_tv_bregman()", "path": "api/skimage.restoration#skimage.restoration.denoise_tv_bregman", "type": "restoration", "text": "\nPerform total-variation denoising using split-Bregman optimization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.denoise_tv_chambolle()", "path": "api/skimage.restoration#skimage.restoration.denoise_tv_chambolle", "type": "restoration", "text": "\nPerform total-variation denoising on n-dimensional images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.denoise_wavelet()", "path": "api/skimage.restoration#skimage.restoration.denoise_wavelet", "type": "restoration", "text": "\nPerform wavelet denoising on an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.ellipsoid_kernel()", "path": "api/skimage.restoration#skimage.restoration.ellipsoid_kernel", "type": "restoration", "text": "\nCreate an ellipoid kernel for restoration.rolling_ball.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.estimate_sigma()", "path": "api/skimage.restoration#skimage.restoration.estimate_sigma", "type": "restoration", "text": "\nRobust wavelet-based estimator of the (Gaussian) noise standard deviation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.inpaint_biharmonic()", "path": "api/skimage.restoration#skimage.restoration.inpaint_biharmonic", "type": "restoration", "text": "\nInpaint masked points in image with biharmonic equations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.richardson_lucy()", "path": "api/skimage.restoration#skimage.restoration.richardson_lucy", "type": "restoration", "text": "\nRichardson-Lucy deconvolution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.rolling_ball()", "path": "api/skimage.restoration#skimage.restoration.rolling_ball", "type": "restoration", "text": "\nEstimate background intensity by rolling/translating a kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.unsupervised_wiener()", "path": "api/skimage.restoration#skimage.restoration.unsupervised_wiener", "type": "restoration", "text": "\nUnsupervised Wiener-Hunt deconvolution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.unwrap_phase()", "path": "api/skimage.restoration#skimage.restoration.unwrap_phase", "type": "restoration", "text": "\nRecover the original from a wrapped phase image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "restoration.wiener()", "path": "api/skimage.restoration#skimage.restoration.wiener", "type": "restoration", "text": "\nWiener-Hunt deconvolution\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation", "path": "api/skimage.segmentation", "type": "segmentation", "text": "\n`skimage.segmentation.active_contour`(image, snake)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.active_contour()", "path": "api/skimage.segmentation#skimage.segmentation.active_contour", "type": "segmentation", "text": "\nActive contour model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.chan_vese()", "path": "api/skimage.segmentation#skimage.segmentation.chan_vese", "type": "segmentation", "text": "\nChan-Vese segmentation algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.checkerboard_level_set()", "path": "api/skimage.segmentation#skimage.segmentation.checkerboard_level_set", "type": "segmentation", "text": "\nCreate a checkerboard level set with binary values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.circle_level_set()", "path": "api/skimage.segmentation#skimage.segmentation.circle_level_set", "type": "segmentation", "text": "\nCreate a circle level set with binary values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.clear_border()", "path": "api/skimage.segmentation#skimage.segmentation.clear_border", "type": "segmentation", "text": "\nClear objects connected to the label image border.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.disk_level_set()", "path": "api/skimage.segmentation#skimage.segmentation.disk_level_set", "type": "segmentation", "text": "\nCreate a disk level set with binary values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.expand_labels()", "path": "api/skimage.segmentation#skimage.segmentation.expand_labels", "type": "segmentation", "text": "\nExpand labels in label image by `distance` pixels without overlapping.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.felzenszwalb()", "path": "api/skimage.segmentation#skimage.segmentation.felzenszwalb", "type": "segmentation", "text": "\nComputes Felsenszwalb\u2019s efficient graph based image segmentation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.find_boundaries()", "path": "api/skimage.segmentation#skimage.segmentation.find_boundaries", "type": "segmentation", "text": "\nReturn bool array where boundaries between labeled regions are True.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.flood()", "path": "api/skimage.segmentation#skimage.segmentation.flood", "type": "segmentation", "text": "\nMask corresponding to a flood fill.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.flood_fill()", "path": "api/skimage.segmentation#skimage.segmentation.flood_fill", "type": "segmentation", "text": "\nPerform flood filling on an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.inverse_gaussian_gradient()", "path": "api/skimage.segmentation#skimage.segmentation.inverse_gaussian_gradient", "type": "segmentation", "text": "\nInverse of gradient magnitude.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.join_segmentations()", "path": "api/skimage.segmentation#skimage.segmentation.join_segmentations", "type": "segmentation", "text": "\nReturn the join of the two input segmentations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.mark_boundaries()", "path": "api/skimage.segmentation#skimage.segmentation.mark_boundaries", "type": "segmentation", "text": "\nReturn image with boundaries between labeled regions highlighted.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.morphological_chan_vese()", "path": "api/skimage.segmentation#skimage.segmentation.morphological_chan_vese", "type": "segmentation", "text": "\nMorphological Active Contours without Edges (MorphACWE)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.morphological_geodesic_active_contour()", "path": "api/skimage.segmentation#skimage.segmentation.morphological_geodesic_active_contour", "type": "segmentation", "text": "\nMorphological Geodesic Active Contours (MorphGAC).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.quickshift()", "path": "api/skimage.segmentation#skimage.segmentation.quickshift", "type": "segmentation", "text": "\nSegments image using quickshift clustering in Color-(x,y) space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.random_walker()", "path": "api/skimage.segmentation#skimage.segmentation.random_walker", "type": "segmentation", "text": "\nRandom walker algorithm for segmentation from markers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.relabel_sequential()", "path": "api/skimage.segmentation#skimage.segmentation.relabel_sequential", "type": "segmentation", "text": "\nRelabel arbitrary labels to {`offset`, \u2026 `offset` \\+ number_of_labels}.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.slic()", "path": "api/skimage.segmentation#skimage.segmentation.slic", "type": "segmentation", "text": "\nSegments image using k-means clustering in Color-(x,y,z) space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "segmentation.watershed()", "path": "api/skimage.segmentation#skimage.segmentation.watershed", "type": "segmentation", "text": "\nFind watershed basins in `image` flooded from given `markers`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "skimage", "path": "api/skimage", "type": "skimage", "text": "\nImage Processing for Python\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform", "path": "api/skimage.transform", "type": "transform", "text": "\n`skimage.transform.downscale_local_mean`(\u2026)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.AffineTransform", "path": "api/skimage.transform#skimage.transform.AffineTransform", "type": "transform", "text": "\nBases: `skimage.transform._geometric.ProjectiveTransform`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.AffineTransform.rotation()", "path": "api/skimage.transform#skimage.transform.AffineTransform.rotation", "type": "transform", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.AffineTransform.scale()", "path": "api/skimage.transform#skimage.transform.AffineTransform.scale", "type": "transform", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.AffineTransform.shear()", "path": "api/skimage.transform#skimage.transform.AffineTransform.shear", "type": "transform", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.AffineTransform.translation()", "path": "api/skimage.transform#skimage.transform.AffineTransform.translation", "type": "transform", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.AffineTransform.__init__()", "path": "api/skimage.transform#skimage.transform.AffineTransform.__init__", "type": "transform", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.downscale_local_mean()", "path": "api/skimage.transform#skimage.transform.downscale_local_mean", "type": "transform", "text": "\nDown-sample N-dimensional image by local averaging.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.EssentialMatrixTransform", "path": "api/skimage.transform#skimage.transform.EssentialMatrixTransform", "type": "transform", "text": "\nBases: `skimage.transform._geometric.FundamentalMatrixTransform`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.EssentialMatrixTransform.estimate()", "path": "api/skimage.transform#skimage.transform.EssentialMatrixTransform.estimate", "type": "transform", "text": "\nEstimate essential matrix using 8-point algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.EssentialMatrixTransform.__init__()", "path": "api/skimage.transform#skimage.transform.EssentialMatrixTransform.__init__", "type": "transform", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.estimate_transform()", "path": "api/skimage.transform#skimage.transform.estimate_transform", "type": "transform", "text": "\nEstimate 2D geometric transformation parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.EuclideanTransform", "path": "api/skimage.transform#skimage.transform.EuclideanTransform", "type": "transform", "text": "\nBases: `skimage.transform._geometric.ProjectiveTransform`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.EuclideanTransform.estimate()", "path": "api/skimage.transform#skimage.transform.EuclideanTransform.estimate", "type": "transform", "text": "\nEstimate the transformation from a set of corresponding points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.EuclideanTransform.rotation()", "path": "api/skimage.transform#skimage.transform.EuclideanTransform.rotation", "type": "transform", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.EuclideanTransform.translation()", "path": "api/skimage.transform#skimage.transform.EuclideanTransform.translation", "type": "transform", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.EuclideanTransform.__init__()", "path": "api/skimage.transform#skimage.transform.EuclideanTransform.__init__", "type": "transform", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.frt2()", "path": "api/skimage.transform#skimage.transform.frt2", "type": "transform", "text": "\nCompute the 2-dimensional finite radon transform (FRT) for an n x n integer\narray.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.FundamentalMatrixTransform", "path": "api/skimage.transform#skimage.transform.FundamentalMatrixTransform", "type": "transform", "text": "\nBases: `skimage.transform._geometric.GeometricTransform`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.FundamentalMatrixTransform.estimate()", "path": "api/skimage.transform#skimage.transform.FundamentalMatrixTransform.estimate", "type": "transform", "text": "\nEstimate fundamental matrix using 8-point algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.FundamentalMatrixTransform.inverse()", "path": "api/skimage.transform#skimage.transform.FundamentalMatrixTransform.inverse", "type": "transform", "text": "\nApply inverse transformation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.FundamentalMatrixTransform.residuals()", "path": "api/skimage.transform#skimage.transform.FundamentalMatrixTransform.residuals", "type": "transform", "text": "\nCompute the Sampson distance.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.FundamentalMatrixTransform.__init__()", "path": "api/skimage.transform#skimage.transform.FundamentalMatrixTransform.__init__", "type": "transform", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.hough_circle()", "path": "api/skimage.transform#skimage.transform.hough_circle", "type": "transform", "text": "\nPerform a circular Hough transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.hough_circle_peaks()", "path": "api/skimage.transform#skimage.transform.hough_circle_peaks", "type": "transform", "text": "\nReturn peaks in a circle Hough transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.hough_ellipse()", "path": "api/skimage.transform#skimage.transform.hough_ellipse", "type": "transform", "text": "\nPerform an elliptical Hough transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.hough_line()", "path": "api/skimage.transform#skimage.transform.hough_line", "type": "transform", "text": "\nPerform a straight line Hough transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.hough_line_peaks()", "path": "api/skimage.transform#skimage.transform.hough_line_peaks", "type": "transform", "text": "\nReturn peaks in a straight line Hough transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.ifrt2()", "path": "api/skimage.transform#skimage.transform.ifrt2", "type": "transform", "text": "\nCompute the 2-dimensional inverse finite radon transform (iFRT) for an (n+1) x\nn integer array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.integral_image()", "path": "api/skimage.transform#skimage.transform.integral_image", "type": "transform", "text": "\nIntegral image / summed area table.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.integrate()", "path": "api/skimage.transform#skimage.transform.integrate", "type": "transform", "text": "\nUse an integral image to integrate over a given window.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.iradon()", "path": "api/skimage.transform#skimage.transform.iradon", "type": "transform", "text": "\nInverse radon transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.iradon_sart()", "path": "api/skimage.transform#skimage.transform.iradon_sart", "type": "transform", "text": "\nInverse radon transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.matrix_transform()", "path": "api/skimage.transform#skimage.transform.matrix_transform", "type": "transform", "text": "\nApply 2D matrix transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.order_angles_golden_ratio()", "path": "api/skimage.transform#skimage.transform.order_angles_golden_ratio", "type": "transform", "text": "\nOrder angles to reduce the amount of correlated information in subsequent\nprojections.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.PiecewiseAffineTransform", "path": "api/skimage.transform#skimage.transform.PiecewiseAffineTransform", "type": "transform", "text": "\nBases: `skimage.transform._geometric.GeometricTransform`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.PiecewiseAffineTransform.estimate()", "path": "api/skimage.transform#skimage.transform.PiecewiseAffineTransform.estimate", "type": "transform", "text": "\nEstimate the transformation from a set of corresponding points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.PiecewiseAffineTransform.inverse()", "path": "api/skimage.transform#skimage.transform.PiecewiseAffineTransform.inverse", "type": "transform", "text": "\nApply inverse transformation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.PiecewiseAffineTransform.__init__()", "path": "api/skimage.transform#skimage.transform.PiecewiseAffineTransform.__init__", "type": "transform", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.PolynomialTransform", "path": "api/skimage.transform#skimage.transform.PolynomialTransform", "type": "transform", "text": "\nBases: `skimage.transform._geometric.GeometricTransform`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.PolynomialTransform.estimate()", "path": "api/skimage.transform#skimage.transform.PolynomialTransform.estimate", "type": "transform", "text": "\nEstimate the transformation from a set of corresponding points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.PolynomialTransform.inverse()", "path": "api/skimage.transform#skimage.transform.PolynomialTransform.inverse", "type": "transform", "text": "\nApply inverse transformation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.PolynomialTransform.__init__()", "path": "api/skimage.transform#skimage.transform.PolynomialTransform.__init__", "type": "transform", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.probabilistic_hough_line()", "path": "api/skimage.transform#skimage.transform.probabilistic_hough_line", "type": "transform", "text": "\nReturn lines from a progressive probabilistic line Hough transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.ProjectiveTransform", "path": "api/skimage.transform#skimage.transform.ProjectiveTransform", "type": "transform", "text": "\nBases: `skimage.transform._geometric.GeometricTransform`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.ProjectiveTransform.estimate()", "path": "api/skimage.transform#skimage.transform.ProjectiveTransform.estimate", "type": "transform", "text": "\nEstimate the transformation from a set of corresponding points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.ProjectiveTransform.inverse()", "path": "api/skimage.transform#skimage.transform.ProjectiveTransform.inverse", "type": "transform", "text": "\nApply inverse transformation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.ProjectiveTransform.__init__()", "path": "api/skimage.transform#skimage.transform.ProjectiveTransform.__init__", "type": "transform", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.pyramid_expand()", "path": "api/skimage.transform#skimage.transform.pyramid_expand", "type": "transform", "text": "\nUpsample and then smooth image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.pyramid_gaussian()", "path": "api/skimage.transform#skimage.transform.pyramid_gaussian", "type": "transform", "text": "\nYield images of the Gaussian pyramid formed by the input image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.pyramid_laplacian()", "path": "api/skimage.transform#skimage.transform.pyramid_laplacian", "type": "transform", "text": "\nYield images of the laplacian pyramid formed by the input image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.pyramid_reduce()", "path": "api/skimage.transform#skimage.transform.pyramid_reduce", "type": "transform", "text": "\nSmooth and then downsample image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.radon()", "path": "api/skimage.transform#skimage.transform.radon", "type": "transform", "text": "\nCalculates the radon transform of an image given specified projection angles.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.rescale()", "path": "api/skimage.transform#skimage.transform.rescale", "type": "transform", "text": "\nScale image by a certain factor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.resize()", "path": "api/skimage.transform#skimage.transform.resize", "type": "transform", "text": "\nResize image to match a certain size.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.rotate()", "path": "api/skimage.transform#skimage.transform.rotate", "type": "transform", "text": "\nRotate image by a certain angle around its center.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.SimilarityTransform", "path": "api/skimage.transform#skimage.transform.SimilarityTransform", "type": "transform", "text": "\nBases: `skimage.transform._geometric.EuclideanTransform`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.SimilarityTransform.estimate()", "path": "api/skimage.transform#skimage.transform.SimilarityTransform.estimate", "type": "transform", "text": "\nEstimate the transformation from a set of corresponding points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.SimilarityTransform.scale()", "path": "api/skimage.transform#skimage.transform.SimilarityTransform.scale", "type": "transform", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.SimilarityTransform.__init__()", "path": "api/skimage.transform#skimage.transform.SimilarityTransform.__init__", "type": "transform", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.swirl()", "path": "api/skimage.transform#skimage.transform.swirl", "type": "transform", "text": "\nPerform a swirl transformation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.warp()", "path": "api/skimage.transform#skimage.transform.warp", "type": "transform", "text": "\nWarp an image according to a given coordinate transformation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.warp_coords()", "path": "api/skimage.transform#skimage.transform.warp_coords", "type": "transform", "text": "\nBuild the source coordinates for the output of a 2-D image warp.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "transform.warp_polar()", "path": "api/skimage.transform#skimage.transform.warp_polar", "type": "transform", "text": "\nRemap image to polar or log-polar coordinates space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Tutorials", "path": "user_guide/tutorials", "type": "Guide", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "User Guide", "path": "user_guide", "type": "Guide", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util", "path": "api/skimage.util", "type": "util", "text": "\n`skimage.util.apply_parallel`(function, array)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.apply_parallel()", "path": "api/skimage.util#skimage.util.apply_parallel", "type": "util", "text": "\nMap a function in parallel across an array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.compare_images()", "path": "api/skimage.util#skimage.util.compare_images", "type": "util", "text": "\nReturn an image showing the differences between two images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.crop()", "path": "api/skimage.util#skimage.util.crop", "type": "util", "text": "\nCrop array `ar` by `crop_width` along each dimension.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.dtype_limits()", "path": "api/skimage.util#skimage.util.dtype_limits", "type": "util", "text": "\nReturn intensity limits, i.e. (min, max) tuple, of the image\u2019s dtype.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.img_as_bool()", "path": "api/skimage.util#skimage.util.img_as_bool", "type": "util", "text": "\nConvert an image to boolean format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.img_as_float()", "path": "api/skimage.util#skimage.util.img_as_float", "type": "util", "text": "\nConvert an image to floating point format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.img_as_float32()", "path": "api/skimage.util#skimage.util.img_as_float32", "type": "util", "text": "\nConvert an image to single-precision (32-bit) floating point format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.img_as_float64()", "path": "api/skimage.util#skimage.util.img_as_float64", "type": "util", "text": "\nConvert an image to double-precision (64-bit) floating point format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.img_as_int()", "path": "api/skimage.util#skimage.util.img_as_int", "type": "util", "text": "\nConvert an image to 16-bit signed integer format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.img_as_ubyte()", "path": "api/skimage.util#skimage.util.img_as_ubyte", "type": "util", "text": "\nConvert an image to 8-bit unsigned integer format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.img_as_uint()", "path": "api/skimage.util#skimage.util.img_as_uint", "type": "util", "text": "\nConvert an image to 16-bit unsigned integer format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.invert()", "path": "api/skimage.util#skimage.util.invert", "type": "util", "text": "\nInvert an image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.map_array()", "path": "api/skimage.util#skimage.util.map_array", "type": "util", "text": "\nMap values from input array from input_vals to output_vals.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.montage()", "path": "api/skimage.util#skimage.util.montage", "type": "util", "text": "\nCreate a montage of several single- or multichannel images.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.pad()", "path": "api/skimage.util#skimage.util.pad", "type": "util", "text": "\nPad an array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.random_noise()", "path": "api/skimage.util#skimage.util.random_noise", "type": "util", "text": "\nFunction to add random noise of various types to a floating-point image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.regular_grid()", "path": "api/skimage.util#skimage.util.regular_grid", "type": "util", "text": "\nFind `n_points` regularly spaced along `ar_shape`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.regular_seeds()", "path": "api/skimage.util#skimage.util.regular_seeds", "type": "util", "text": "\nReturn an image with ~`n_points` regularly-spaced nonzero pixels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.unique_rows()", "path": "api/skimage.util#skimage.util.unique_rows", "type": "util", "text": "\nRemove repeated rows from a 2D array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.view_as_blocks()", "path": "api/skimage.util#skimage.util.view_as_blocks", "type": "util", "text": "\nBlock view of the input n-dimensional array (using re-striding).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "util.view_as_windows()", "path": "api/skimage.util#skimage.util.view_as_windows", "type": "util", "text": "\nRolling window view of the input n-dimensional array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer", "path": "api/skimage.viewer", "type": "viewer", "text": "\n`skimage.viewer.CollectionViewer`(image_collection)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools", "path": "api/skimage.viewer.canvastools", "type": "viewer", "text": "\n`skimage.viewer.canvastools.LineTool`(manager)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.LineTool", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.LineTool", "type": "viewer", "text": "\nBases: `skimage.viewer.canvastools.base.CanvasToolBase`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.LineTool.end_points()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.LineTool.end_points", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.LineTool.geometry()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.LineTool.geometry", "type": "viewer", "text": "\nGeometry information that gets passed to callback functions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.LineTool.hit_test()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.LineTool.hit_test", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.LineTool.on_mouse_press()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.LineTool.on_mouse_press", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.LineTool.on_mouse_release()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.LineTool.on_mouse_release", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.LineTool.on_move()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.LineTool.on_move", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.LineTool.update()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.LineTool.update", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.LineTool.__init__()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.LineTool.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool", "type": "viewer", "text": "\nBases: `skimage.viewer.canvastools.base.CanvasToolBase`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.geometry()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.geometry", "type": "viewer", "text": "\nGeometry information that gets passed to callback functions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.label()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.label", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.on_key_press()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.on_key_press", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.on_mouse_press()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.on_mouse_press", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.on_mouse_release()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.on_mouse_release", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.on_move()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.on_move", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.overlay()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.overlay", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.radius()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.radius", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.shape()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.shape", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.update_cursor()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.update_cursor", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.update_overlay()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.update_overlay", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.PaintTool.__init__()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.PaintTool.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.RectangleTool", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.RectangleTool", "type": "viewer", "text": "\nBases: `skimage.viewer.canvastools.base.CanvasToolBase`,\n`matplotlib.widgets.RectangleSelector`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.RectangleTool.corners()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.RectangleTool.corners", "type": "viewer", "text": "\nCorners of rectangle from lower left, moving clockwise.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.RectangleTool.edge_centers()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.RectangleTool.edge_centers", "type": "viewer", "text": "\nMidpoint of rectangle edges from left, moving clockwise.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.RectangleTool.extents()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.RectangleTool.extents", "type": "viewer", "text": "\nReturn (xmin, xmax, ymin, ymax).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.RectangleTool.geometry()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.RectangleTool.geometry", "type": "viewer", "text": "\nGeometry information that gets passed to callback functions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.RectangleTool.on_mouse_press()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.RectangleTool.on_mouse_press", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.RectangleTool.on_mouse_release()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.RectangleTool.on_mouse_release", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.RectangleTool.on_move()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.RectangleTool.on_move", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.RectangleTool.__init__()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.RectangleTool.__init__", "type": "viewer", "text": "\nThe parent axes for the widget.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.ThickLineTool", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.ThickLineTool", "type": "viewer", "text": "\nBases: `skimage.viewer.canvastools.linetool.LineTool`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.ThickLineTool.on_key_press()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.ThickLineTool.on_key_press", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.ThickLineTool.on_scroll()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.ThickLineTool.on_scroll", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.canvastools.ThickLineTool.__init__()", "path": "api/skimage.viewer.canvastools#skimage.viewer.canvastools.ThickLineTool.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.CollectionViewer", "path": "api/skimage.viewer#skimage.viewer.CollectionViewer", "type": "viewer", "text": "\nBases: `skimage.viewer.viewers.core.ImageViewer`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.CollectionViewer.keyPressEvent()", "path": "api/skimage.viewer#skimage.viewer.CollectionViewer.keyPressEvent", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.CollectionViewer.update_index()", "path": "api/skimage.viewer#skimage.viewer.CollectionViewer.update_index", "type": "viewer", "text": "\nSelect image on display using index into image collection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.CollectionViewer.__init__()", "path": "api/skimage.viewer#skimage.viewer.CollectionViewer.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer", "path": "api/skimage.viewer#skimage.viewer.ImageViewer", "type": "viewer", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.add_tool()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.add_tool", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.closeEvent()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.closeEvent", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.connect_event()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.connect_event", "type": "viewer", "text": "\nConnect callback function to matplotlib event and return id.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.disconnect_event()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.disconnect_event", "type": "viewer", "text": "\nDisconnect callback by its id (returned by `connect_event`).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.dock_areas", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.dock_areas", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.image()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.image", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.open_file()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.open_file", "type": "viewer", "text": "\nOpen image file and display in viewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.original_image_changed", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.original_image_changed", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.redraw()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.redraw", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.remove_tool()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.remove_tool", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.reset_image()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.reset_image", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.save_to_file()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.save_to_file", "type": "viewer", "text": "\nSave current image to file.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.show()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.show", "type": "viewer", "text": "\nShow ImageViewer and attached plugins.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.update_image()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.update_image", "type": "viewer", "text": "\nUpdate displayed image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.ImageViewer.__init__()", "path": "api/skimage.viewer#skimage.viewer.ImageViewer.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins", "path": "api/skimage.viewer.plugins", "type": "viewer", "text": "\n`skimage.viewer.plugins.CannyPlugin`(*args, \u2026)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.CannyPlugin", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.CannyPlugin", "type": "viewer", "text": "\nBases: `skimage.viewer.plugins.overlayplugin.OverlayPlugin`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.CannyPlugin.attach()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.CannyPlugin.attach", "type": "viewer", "text": "\nAttach the plugin to an ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.CannyPlugin.name", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.CannyPlugin.name", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.CannyPlugin.__init__()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.CannyPlugin.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.ColorHistogram", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.ColorHistogram", "type": "viewer", "text": "\nBases: `skimage.viewer.plugins.plotplugin.PlotPlugin`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.ColorHistogram.ab_selected()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.ColorHistogram.ab_selected", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.ColorHistogram.attach()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.ColorHistogram.attach", "type": "viewer", "text": "\nAttach the plugin to an ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.ColorHistogram.help()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.ColorHistogram.help", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.ColorHistogram.name", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.ColorHistogram.name", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.ColorHistogram.output()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.ColorHistogram.output", "type": "viewer", "text": "\nReturn the image mask and the histogram data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.ColorHistogram.__init__()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.ColorHistogram.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Crop", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Crop", "type": "viewer", "text": "\nBases: `skimage.viewer.plugins.base.Plugin`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Crop.attach()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Crop.attach", "type": "viewer", "text": "\nAttach the plugin to an ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Crop.crop()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Crop.crop", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Crop.help()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Crop.help", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Crop.name", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Crop.name", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Crop.reset()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Crop.reset", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Crop.__init__()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Crop.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LabelPainter", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LabelPainter", "type": "viewer", "text": "\nBases: `skimage.viewer.plugins.base.Plugin`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LabelPainter.attach()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LabelPainter.attach", "type": "viewer", "text": "\nAttach the plugin to an ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LabelPainter.help()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LabelPainter.help", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LabelPainter.label()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LabelPainter.label", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LabelPainter.name", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LabelPainter.name", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LabelPainter.on_enter()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LabelPainter.on_enter", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LabelPainter.radius()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LabelPainter.radius", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LabelPainter.__init__()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LabelPainter.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LineProfile", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LineProfile", "type": "viewer", "text": "\nBases: `skimage.viewer.plugins.plotplugin.PlotPlugin`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LineProfile.attach()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LineProfile.attach", "type": "viewer", "text": "\nAttach the plugin to an ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LineProfile.get_profiles()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LineProfile.get_profiles", "type": "viewer", "text": "\nReturn intensity profile of the selected line.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LineProfile.help()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LineProfile.help", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LineProfile.line_changed()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LineProfile.line_changed", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LineProfile.name", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LineProfile.name", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LineProfile.output()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LineProfile.output", "type": "viewer", "text": "\nReturn the drawn line and the resulting scan.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LineProfile.reset_axes()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LineProfile.reset_axes", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.LineProfile.__init__()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.LineProfile.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Measure", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Measure", "type": "viewer", "text": "\nBases: `skimage.viewer.plugins.base.Plugin`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Measure.attach()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Measure.attach", "type": "viewer", "text": "\nAttach the plugin to an ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Measure.help()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Measure.help", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Measure.line_changed()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Measure.line_changed", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Measure.name", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Measure.name", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Measure.__init__()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Measure.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.OverlayPlugin", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.OverlayPlugin", "type": "viewer", "text": "\nBases: `skimage.viewer.plugins.base.Plugin`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.OverlayPlugin.attach()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.OverlayPlugin.attach", "type": "viewer", "text": "\nAttach the plugin to an ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.OverlayPlugin.closeEvent()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.OverlayPlugin.closeEvent", "type": "viewer", "text": "\nOn close disconnect all artists and events from ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.OverlayPlugin.color()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.OverlayPlugin.color", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.OverlayPlugin.colors", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.OverlayPlugin.colors", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.OverlayPlugin.display_filtered_image()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.OverlayPlugin.display_filtered_image", "type": "viewer", "text": "\nDisplay filtered image as an overlay on top of image in viewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.OverlayPlugin.filtered_image()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.OverlayPlugin.filtered_image", "type": "viewer", "text": "\nReturn filtered image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.OverlayPlugin.output()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.OverlayPlugin.output", "type": "viewer", "text": "\nReturn the overlaid image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.OverlayPlugin.overlay()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.OverlayPlugin.overlay", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.OverlayPlugin.__init__()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.OverlayPlugin.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.PlotPlugin", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.PlotPlugin", "type": "viewer", "text": "\nBases: `skimage.viewer.plugins.base.Plugin`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.PlotPlugin.add_plot()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.PlotPlugin.add_plot", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.PlotPlugin.add_tool()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.PlotPlugin.add_tool", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.PlotPlugin.attach()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.PlotPlugin.attach", "type": "viewer", "text": "\nAttach the plugin to an ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.PlotPlugin.redraw()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.PlotPlugin.redraw", "type": "viewer", "text": "\nRedraw plot.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.PlotPlugin.remove_tool()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.PlotPlugin.remove_tool", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.PlotPlugin.__init__()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.PlotPlugin.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin", "type": "viewer", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.add_widget()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.add_widget", "type": "viewer", "text": "\nAdd widget to plugin.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.attach()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.attach", "type": "viewer", "text": "\nAttach the plugin to an ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.clean_up()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.clean_up", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.closeEvent()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.closeEvent", "type": "viewer", "text": "\nOn close disconnect all artists and events from ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.display_filtered_image()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.display_filtered_image", "type": "viewer", "text": "\nDisplay the filtered image on image viewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.filtered_image()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.filtered_image", "type": "viewer", "text": "\nReturn filtered image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.filter_image()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.filter_image", "type": "viewer", "text": "\nCall `image_filter` with widget args and kwargs\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.image_changed", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.image_changed", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.image_viewer", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.image_viewer", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.name", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.name", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.output()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.output", "type": "viewer", "text": "\nReturn the plugin\u2019s representation and data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.remove_image_artists()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.remove_image_artists", "type": "viewer", "text": "\nRemove artists that are connected to the image viewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.show()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.show", "type": "viewer", "text": "\nShow plugin.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.update_plugin()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.update_plugin", "type": "viewer", "text": "\nUpdate keyword parameters of the plugin itself.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.plugins.Plugin.__init__()", "path": "api/skimage.viewer.plugins#skimage.viewer.plugins.Plugin.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils", "path": "api/skimage.viewer.utils", "type": "viewer", "text": "\n`skimage.viewer.utils.figimage`(image[, \u2026])\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.ClearColormap", "path": "api/skimage.viewer.utils#skimage.viewer.utils.ClearColormap", "type": "viewer", "text": "\nBases: `skimage.viewer.utils.core.LinearColormap`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.ClearColormap.__init__()", "path": "api/skimage.viewer.utils#skimage.viewer.utils.ClearColormap.__init__", "type": "viewer", "text": "\nCreate color map from linear mapping segments\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.figimage()", "path": "api/skimage.viewer.utils#skimage.viewer.utils.figimage", "type": "viewer", "text": "\nReturn figure and axes with figure tightly surrounding image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.FigureCanvas", "path": "api/skimage.viewer.utils#skimage.viewer.utils.FigureCanvas", "type": "viewer", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.FigureCanvas.resizeEvent()", "path": "api/skimage.viewer.utils#skimage.viewer.utils.FigureCanvas.resizeEvent", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.FigureCanvas.__init__()", "path": "api/skimage.viewer.utils#skimage.viewer.utils.FigureCanvas.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.init_qtapp()", "path": "api/skimage.viewer.utils#skimage.viewer.utils.init_qtapp", "type": "viewer", "text": "\nInitialize QAppliction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.LinearColormap", "path": "api/skimage.viewer.utils#skimage.viewer.utils.LinearColormap", "type": "viewer", "text": "\nBases: `matplotlib.colors.LinearSegmentedColormap`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.LinearColormap.__init__()", "path": "api/skimage.viewer.utils#skimage.viewer.utils.LinearColormap.__init__", "type": "viewer", "text": "\nCreate color map from linear mapping segments\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.new_plot()", "path": "api/skimage.viewer.utils#skimage.viewer.utils.new_plot", "type": "viewer", "text": "\nReturn new figure and axes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.RequiredAttr", "path": "api/skimage.viewer.utils#skimage.viewer.utils.RequiredAttr", "type": "viewer", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.RequiredAttr.instances", "path": "api/skimage.viewer.utils#skimage.viewer.utils.RequiredAttr.instances", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.RequiredAttr.__init__()", "path": "api/skimage.viewer.utils#skimage.viewer.utils.RequiredAttr.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.start_qtapp()", "path": "api/skimage.viewer.utils#skimage.viewer.utils.start_qtapp", "type": "viewer", "text": "\nStart Qt mainloop\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.utils.update_axes_image()", "path": "api/skimage.viewer.utils#skimage.viewer.utils.update_axes_image", "type": "viewer", "text": "\nUpdate the image displayed by an image plot.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers", "path": "api/skimage.viewer.viewers", "type": "viewer", "text": "\n`skimage.viewer.viewers.CollectionViewer`(\u2026)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.CollectionViewer", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.CollectionViewer", "type": "viewer", "text": "\nBases: `skimage.viewer.viewers.core.ImageViewer`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.CollectionViewer.keyPressEvent()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.CollectionViewer.keyPressEvent", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.CollectionViewer.update_index()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.CollectionViewer.update_index", "type": "viewer", "text": "\nSelect image on display using index into image collection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.CollectionViewer.__init__()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.CollectionViewer.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer", "type": "viewer", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.add_tool()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.add_tool", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.closeEvent()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.closeEvent", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.connect_event()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.connect_event", "type": "viewer", "text": "\nConnect callback function to matplotlib event and return id.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.disconnect_event()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.disconnect_event", "type": "viewer", "text": "\nDisconnect callback by its id (returned by `connect_event`).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.dock_areas", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.dock_areas", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.image()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.image", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.open_file()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.open_file", "type": "viewer", "text": "\nOpen image file and display in viewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.original_image_changed", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.original_image_changed", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.redraw()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.redraw", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.remove_tool()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.remove_tool", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.reset_image()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.reset_image", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.save_to_file()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.save_to_file", "type": "viewer", "text": "\nSave current image to file.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.show()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.show", "type": "viewer", "text": "\nShow ImageViewer and attached plugins.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.update_image()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.update_image", "type": "viewer", "text": "\nUpdate displayed image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.viewers.ImageViewer.__init__()", "path": "api/skimage.viewer.viewers#skimage.viewer.viewers.ImageViewer.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets", "path": "api/skimage.viewer.widgets", "type": "viewer", "text": "\nWidgets for interacting with ImageViewer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.BaseWidget", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.BaseWidget", "type": "viewer", "text": "\nBases: `object`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.BaseWidget.plugin", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.BaseWidget.plugin", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.BaseWidget.val()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.BaseWidget.val", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.BaseWidget.__init__()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.BaseWidget.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.Button", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.Button", "type": "viewer", "text": "\nBases: `skimage.viewer.widgets.core.BaseWidget`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.Button.__init__()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.Button.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.CheckBox", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.CheckBox", "type": "viewer", "text": "\nBases: `skimage.viewer.widgets.core.BaseWidget`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.CheckBox.val()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.CheckBox.val", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.CheckBox.__init__()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.CheckBox.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.ComboBox", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.ComboBox", "type": "viewer", "text": "\nBases: `skimage.viewer.widgets.core.BaseWidget`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.ComboBox.index()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.ComboBox.index", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.ComboBox.val()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.ComboBox.val", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.ComboBox.__init__()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.ComboBox.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.OKCancelButtons", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.OKCancelButtons", "type": "viewer", "text": "\nBases: `skimage.viewer.widgets.core.BaseWidget`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.OKCancelButtons.close_plugin()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.OKCancelButtons.close_plugin", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.OKCancelButtons.update_original_image()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.OKCancelButtons.update_original_image", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.OKCancelButtons.__init__()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.OKCancelButtons.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.SaveButtons", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.SaveButtons", "type": "viewer", "text": "\nBases: `skimage.viewer.widgets.core.BaseWidget`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.SaveButtons.save_to_file()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.SaveButtons.save_to_file", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.SaveButtons.save_to_stack()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.SaveButtons.save_to_stack", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.SaveButtons.__init__()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.SaveButtons.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.Slider", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.Slider", "type": "viewer", "text": "\nBases: `skimage.viewer.widgets.core.BaseWidget`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.Slider.val()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.Slider.val", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.Slider.__init__()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.Slider.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.Text", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.Text", "type": "viewer", "text": "\nBases: `skimage.viewer.widgets.core.BaseWidget`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.Text.text()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.Text.text", "type": "viewer", "text": "\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "viewer.widgets.Text.__init__()", "path": "api/skimage.viewer.widgets#skimage.viewer.widgets.Text.__init__", "type": "viewer", "text": "\nInitialize self. See help(type(self)) for accurate signature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}]