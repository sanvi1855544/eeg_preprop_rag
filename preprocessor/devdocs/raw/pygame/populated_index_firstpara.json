[{"name": "_sdl2.touch", "path": "ref/touch", "type": "pygame._sdl2.touch", "text": "\nNew in pygame 2: This module requires SDL2.\n\n"}, {"name": "_sdl2.touch.get_device", "path": "ref/touch#pygame._sdl2.touch.get_device", "type": "pygame._sdl2.touch", "text": "\nReturn an integer id associated with the given `index`.\n\n"}, {"name": "_sdl2.touch.get_finger", "path": "ref/touch#pygame._sdl2.touch.get_finger", "type": "pygame._sdl2.touch", "text": "\nReturn a dict for the finger `index` active on `touchid`. The dict contains\nthese keys:\n\n"}, {"name": "_sdl2.touch.get_num_devices", "path": "ref/touch#pygame._sdl2.touch.get_num_devices", "type": "pygame._sdl2.touch", "text": "\nReturn the number of available touch devices.\n\n"}, {"name": "_sdl2.touch.get_num_fingers", "path": "ref/touch#pygame._sdl2.touch.get_num_fingers", "type": "pygame._sdl2.touch", "text": "\nReturn the number of fingers active for the touch device whose id is touchid.\n\n"}, {"name": "BufferProxy", "path": "ref/bufferproxy", "type": "pygame.BufferProxy", "text": "\n`BufferProxy` is a pygame support type, designed as the return value of the\n`Surface.get_buffer()` and `Surface.get_view()` methods. For all Python\nversions a `BufferProxy` object exports a C struct and Python level array\ninterface on behalf of its parent object's buffer. For CPython 2.6 and later a\nnew buffer interface is also exported. In pygame, `BufferProxy` is key to\nimplementing the `pygame.surfarray` module.\n\n"}, {"name": "BufferProxy.length", "path": "ref/bufferproxy#pygame.BufferProxy.length", "type": "pygame.BufferProxy", "text": "\nThe number of valid bytes of data exported. For discontinuous data, that is\ndata which is not a single block of memory, the bytes within the gaps are\nexcluded from the count. This property is equivalent to the `Py_buffer` C\nstruct `len` field.\n\n"}, {"name": "BufferProxy.parent", "path": "ref/bufferproxy#pygame.BufferProxy.parent", "type": "pygame.BufferProxy", "text": "\nThe `Surface` which returned the `BufferProxy` object or the object passed to\na `BufferProxy` call.\n\n"}, {"name": "BufferProxy.raw", "path": "ref/bufferproxy#pygame.BufferProxy.raw", "type": "pygame.BufferProxy", "text": "\nThe buffer data as a `str`/`bytes` object. Any gaps in the exported data are\nremoved.\n\n"}, {"name": "BufferProxy.write", "path": "ref/bufferproxy#pygame.BufferProxy.write", "type": "pygame.BufferProxy", "text": "\nOverwrite bytes in the parent object's data. The data must be C or F\ncontiguous, otherwise a ValueError is raised. Argument buffer is a\n`str`/`bytes` object. An optional offset gives a start position, in bytes,\nwithin the buffer where overwriting begins. If the offset is negative or\ngreater that or equal to the buffer proxy's `length` value, an\n`IndexException` is raised. If `len(buffer) > proxy.length + offset`, a\n`ValueError` is raised.\n\n"}, {"name": "camera", "path": "ref/camera", "type": "pygame.camera", "text": "\nPygame currently supports only Linux and v4l2 cameras.\n\n"}, {"name": "camera.Camera", "path": "ref/camera#pygame.camera.Camera", "type": "pygame.camera", "text": "\nLoads a v4l2 camera. The device is typically something like \"/dev/video0\".\nDefault width and height are 640 by 480. Format is the desired colorspace of\nthe output. This is useful for computer vision purposes. The default is `RGB`.\nThe following are supported:\n\n"}, {"name": "camera.Camera.get_controls", "path": "ref/camera#pygame.camera.Camera.get_controls", "type": "pygame.camera", "text": "\nIf the camera supports it, get_controls will return the current settings for\nhorizontal and vertical image flip as bools and brightness as an int. If\nunsupported, it will return the default values of (0, 0, 0). Note that the\nreturn values here may be different than those returned by set_controls,\nthough these are more likely to be correct.\n\n"}, {"name": "camera.Camera.get_image", "path": "ref/camera#pygame.camera.Camera.get_image", "type": "pygame.camera", "text": "\nPulls an image off of the buffer as an `RGB` Surface. It can optionally reuse\nan existing Surface to save time. The bit-depth of the surface is either 24\nbits or the same as the optionally supplied Surface.\n\n"}, {"name": "camera.Camera.get_raw", "path": "ref/camera#pygame.camera.Camera.get_raw", "type": "pygame.camera", "text": "\nGets an image from a camera as a string in the native pixelformat of the\ncamera. Useful for integration with other libraries.\n\n"}, {"name": "camera.Camera.get_size", "path": "ref/camera#pygame.camera.Camera.get_size", "type": "pygame.camera", "text": "\nReturns the current dimensions of the images being captured by the camera.\nThis will return the actual size, which may be different than the one\nspecified during initialization if the camera did not support that size.\n\n"}, {"name": "camera.Camera.query_image", "path": "ref/camera#pygame.camera.Camera.query_image", "type": "pygame.camera", "text": "\nIf an image is ready to get, it returns true. Otherwise it returns false. Note\nthat some webcams will always return False and will only queue a frame when\ncalled with a blocking function like `get_image()`. This is useful to separate\nthe framerate of the game from that of the camera without having to use\nthreading.\n\n"}, {"name": "camera.Camera.set_controls", "path": "ref/camera#pygame.camera.Camera.set_controls", "type": "pygame.camera", "text": "\nAllows you to change camera settings if the camera supports it. The return\nvalues will be the input values if the camera claims it succeeded or the\nvalues previously in use if not. Each argument is optional, and the desired\none can be chosen by supplying the keyword, like hflip. Note that the actual\nsettings being used by the camera may not be the same as those returned by\nset_controls.\n\n"}, {"name": "camera.Camera.start", "path": "ref/camera#pygame.camera.Camera.start", "type": "pygame.camera", "text": "\nOpens the camera device, attempts to initialize it, and begins recording\nimages to a buffer. The camera must be started before any of the below\nfunctions can be used.\n\n"}, {"name": "camera.Camera.stop", "path": "ref/camera#pygame.camera.Camera.stop", "type": "pygame.camera", "text": "\nStops recording, uninitializes the camera, and closes it. Once a camera is\nstopped, the below functions cannot be used until it is started again.\n\n"}, {"name": "camera.colorspace", "path": "ref/camera#pygame.camera.colorspace", "type": "pygame.camera", "text": "\nAllows for conversion from \"RGB\" to a destination colorspace of \"HSV\" or\n\"YUV\". The source and destination surfaces must be the same size and pixel\ndepth. This is useful for computer vision on devices with limited processing\npower. Capture as small of an image as possible, `transform.scale()` it even\nsmaller, and then convert the colorspace to `YUV` or `HSV` before doing any\nprocessing on it.\n\n"}, {"name": "camera.list_cameras", "path": "ref/camera#pygame.camera.list_cameras", "type": "pygame.camera", "text": "\nChecks the computer for available cameras and returns a list of strings of\ncamera names, ready to be fed into `pygame.camera.Camera`.\n\n"}, {"name": "cdrom", "path": "ref/cdrom", "type": "pygame.cdrom", "text": "\nThe cdrom module manages the `CD` and `DVD` drives on a computer. It can also\ncontrol the playback of audio CDs. This module needs to be initialized before\nit can do anything. Each `CD` object you create represents a cdrom drive and\nmust also be initialized individually before it can do most things.\n\n"}, {"name": "cdrom.CD", "path": "ref/cdrom#pygame.cdrom.CD", "type": "pygame.cdrom", "text": "\nYou can create a `CD` object for each cdrom on the system. Use\n`pygame.cdrom.get_count()` to determine how many drives actually exist. The id\nargument is an integer of the drive, starting at zero.\n\n"}, {"name": "cdrom.CD.eject", "path": "ref/cdrom#pygame.cdrom.CD.eject", "type": "pygame.cdrom", "text": "\nThis will open the cdrom drive and eject the cdrom. If the drive is playing or\npaused it will be stopped.\n\n"}, {"name": "cdrom.CD.get_all", "path": "ref/cdrom#pygame.cdrom.CD.get_all", "type": "pygame.cdrom", "text": "\nReturn a list with information for every track on the cdrom. The information\nconsists of a tuple with four values. The audio value is True if the track\ncontains audio data. The start, end, and length values are floating point\nnumbers in seconds. Start and end represent absolute times on the entire disc.\n\n"}, {"name": "cdrom.CD.get_busy", "path": "ref/cdrom#pygame.cdrom.CD.get_busy", "type": "pygame.cdrom", "text": "\nReturns True if the drive busy playing back audio.\n\n"}, {"name": "cdrom.CD.get_current", "path": "ref/cdrom#pygame.cdrom.CD.get_current", "type": "pygame.cdrom", "text": "\nReturns both the current track and time of that track. This method works when\nthe drive is either playing or paused.\n\n"}, {"name": "cdrom.CD.get_empty", "path": "ref/cdrom#pygame.cdrom.CD.get_empty", "type": "pygame.cdrom", "text": "\nReturn False if there is a cdrom currently in the drive. If the drive is empty\nthis will return True.\n\n"}, {"name": "cdrom.CD.get_id", "path": "ref/cdrom#pygame.cdrom.CD.get_id", "type": "pygame.cdrom", "text": "\nReturns the integer id that was used to create the `CD` instance. This method\ncan work on an uninitialized `CD`.\n\n"}, {"name": "cdrom.CD.get_init", "path": "ref/cdrom#pygame.cdrom.CD.get_init", "type": "pygame.cdrom", "text": "\nTest if this `CDROM` device is initialized. This is different than the\n`pygame.cdrom.init()` since each drive must also be initialized individually.\n\n"}, {"name": "cdrom.CD.get_name", "path": "ref/cdrom#pygame.cdrom.CD.get_name", "type": "pygame.cdrom", "text": "\nReturn the string name of the drive. This is the system name used to represent\nthe drive. It is often the drive letter or device name. This method can work\non an uninitialized `CD`.\n\n"}, {"name": "cdrom.CD.get_numtracks", "path": "ref/cdrom#pygame.cdrom.CD.get_numtracks", "type": "pygame.cdrom", "text": "\nReturn the number of tracks on the cdrom in the drive. This will return zero\nof the drive is empty or has no tracks.\n\n"}, {"name": "cdrom.CD.get_paused", "path": "ref/cdrom#pygame.cdrom.CD.get_paused", "type": "pygame.cdrom", "text": "\nReturns True if the drive is currently paused.\n\n"}, {"name": "cdrom.CD.get_track_audio", "path": "ref/cdrom#pygame.cdrom.CD.get_track_audio", "type": "pygame.cdrom", "text": "\nDetermine if a track on a cdrom contains audio data. You can also call\n`CD.num_tracks()` and `CD.get_all()` to determine more information about the\ncdrom.\n\n"}, {"name": "cdrom.CD.get_track_length", "path": "ref/cdrom#pygame.cdrom.CD.get_track_length", "type": "pygame.cdrom", "text": "\nReturn a floating point value in seconds of the length of the cdrom track.\n\n"}, {"name": "cdrom.CD.get_track_start", "path": "ref/cdrom#pygame.cdrom.CD.get_track_start", "type": "pygame.cdrom", "text": "\nReturn the absolute time in seconds where at start of the cdrom track.\n\n"}, {"name": "cdrom.CD.init", "path": "ref/cdrom#pygame.cdrom.CD.init", "type": "pygame.cdrom", "text": "\nInitialize the cdrom drive for use. The drive must be initialized for most\n`CD` methods to work. Even if the rest of pygame has been initialized.\n\n"}, {"name": "cdrom.CD.pause", "path": "ref/cdrom#pygame.cdrom.CD.pause", "type": "pygame.cdrom", "text": "\nTemporarily stop audio playback on the `CD`. The playback can be resumed at\nthe same point with the `CD.resume()` method. If the `CD` is not playing this\nmethod does nothing.\n\n"}, {"name": "cdrom.CD.play", "path": "ref/cdrom#pygame.cdrom.CD.play", "type": "pygame.cdrom", "text": "\nPlayback audio from an audio cdrom in the drive. Besides the track number\nargument, you can also pass a starting and ending time for playback. The start\nand end time are in seconds, and can limit the section of an audio track\nplayed.\n\n"}, {"name": "cdrom.CD.quit", "path": "ref/cdrom#pygame.cdrom.CD.quit", "type": "pygame.cdrom", "text": "\nUninitialize a drive for use. Call this when your program will not be\naccessing the drive for awhile.\n\n"}, {"name": "cdrom.CD.resume", "path": "ref/cdrom#pygame.cdrom.CD.resume", "type": "pygame.cdrom", "text": "\nUnpause a paused `CD`. If the `CD` is not paused or already playing, this\nmethod does nothing.\n\n"}, {"name": "cdrom.CD.stop", "path": "ref/cdrom#pygame.cdrom.CD.stop", "type": "pygame.cdrom", "text": "\nStops playback of audio from the cdrom. This will also lose the current\nplayback position. This method does nothing if the drive isn't already playing\naudio.\n\n"}, {"name": "cdrom.get_count", "path": "ref/cdrom#pygame.cdrom.get_count", "type": "pygame.cdrom", "text": "\nReturn the number of cd drives on the system. When you create `CD` objects you\nneed to pass an integer id that must be lower than this count. The count will\nbe 0 if there are no drives on the system.\n\n"}, {"name": "cdrom.get_init", "path": "ref/cdrom#pygame.cdrom.get_init", "type": "pygame.cdrom", "text": "\nTest if the cdrom module is initialized or not. This is different than the\n`CD.init()` since each drive must also be initialized individually.\n\n"}, {"name": "cdrom.init", "path": "ref/cdrom#pygame.cdrom.init", "type": "pygame.cdrom", "text": "\nInitialize the cdrom module. This will scan the system for all `CD` devices.\nThe module must be initialized before any other functions will work. This\nautomatically happens when you call `pygame.init()`.\n\n"}, {"name": "cdrom.quit", "path": "ref/cdrom#pygame.cdrom.quit", "type": "pygame.cdrom", "text": "\nUninitialize the cdrom module. After you call this any existing `CD` objects\nwill no longer work.\n\n"}, {"name": "Color", "path": "ref/color", "type": "pygame.Color", "text": "\nThe `Color` class represents `RGBA` color values using a value range of 0 to\n255 inclusive. It allows basic arithmetic operations \u2014 binary operations `+`,\n`-`, `*`, `//`, `%`, and unary operation `~` \u2014 to create new colors, supports\nconversions to other color spaces such as `HSV` or `HSL` and lets you adjust\nsingle color channels. Alpha defaults to 255 (fully opaque) when not given.\nThe arithmetic operations and `correct_gamma()` method preserve subclasses.\nFor the binary operators, the class of the returned color is that of the left\nhand color object of the operator.\n\n"}, {"name": "Color.a", "path": "ref/color#pygame.Color.a", "type": "pygame.Color", "text": "\nThe alpha value of the Color.\n\n"}, {"name": "Color.b", "path": "ref/color#pygame.Color.b", "type": "pygame.Color", "text": "\nThe blue value of the Color.\n\n"}, {"name": "Color.cmy", "path": "ref/color#pygame.Color.cmy", "type": "pygame.Color", "text": "\nThe `CMY` representation of the Color. The `CMY` components are in the ranges\n`C` = [0, 1], `M` = [0, 1], `Y` = [0, 1]. Note that this will not return the\nabsolutely exact `CMY` values for the set `RGB` values in all cases. Due to\nthe `RGB` mapping from 0-255 and the `CMY` mapping from 0-1 rounding errors\nmay cause the `CMY` values to differ slightly from what you might expect.\n\n"}, {"name": "Color.correct_gamma", "path": "ref/color#pygame.Color.correct_gamma", "type": "pygame.Color", "text": "\nApplies a certain gamma value to the Color and returns a new Color with the\nadjusted `RGBA` values.\n\n"}, {"name": "Color.g", "path": "ref/color#pygame.Color.g", "type": "pygame.Color", "text": "\nThe green value of the Color.\n\n"}, {"name": "Color.hsla", "path": "ref/color#pygame.Color.hsla", "type": "pygame.Color", "text": "\nThe `HSLA` representation of the Color. The `HSLA` components are in the\nranges `H` = [0, 360], `S` = [0, 100], `V` = [0, 100], A = [0, 100]. Note that\nthis will not return the absolutely exact `HSL` values for the set `RGB`\nvalues in all cases. Due to the `RGB` mapping from 0-255 and the `HSL` mapping\nfrom 0-100 and 0-360 rounding errors may cause the `HSL` values to differ\nslightly from what you might expect.\n\n"}, {"name": "Color.hsva", "path": "ref/color#pygame.Color.hsva", "type": "pygame.Color", "text": "\nThe `HSVA` representation of the Color. The `HSVA` components are in the\nranges `H` = [0, 360], `S` = [0, 100], `V` = [0, 100], A = [0, 100]. Note that\nthis will not return the absolutely exact `HSV` values for the set `RGB`\nvalues in all cases. Due to the `RGB` mapping from 0-255 and the `HSV` mapping\nfrom 0-100 and 0-360 rounding errors may cause the `HSV` values to differ\nslightly from what you might expect.\n\n"}, {"name": "Color.i1i2i3", "path": "ref/color#pygame.Color.i1i2i3", "type": "pygame.Color", "text": "\nThe `I1I2I3` representation of the Color. The `I1I2I3` components are in the\nranges `I1` = [0, 1], `I2` = [-0.5, 0.5], `I3` = [-0.5, 0.5]. Note that this\nwill not return the absolutely exact `I1I2I3` values for the set `RGB` values\nin all cases. Due to the `RGB` mapping from 0-255 and the `I1I2I3` mapping\nfrom 0-1 rounding errors may cause the `I1I2I3` values to differ slightly from\nwhat you might expect.\n\n"}, {"name": "Color.lerp", "path": "ref/color#pygame.Color.lerp", "type": "pygame.Color", "text": "\nReturns a Color which is a linear interpolation between self and the given\nColor in RGBA space. The second parameter determines how far between self and\nother the result is going to be. It must be a value between 0 and 1 where 0\nmeans self and 1 means other will be returned.\n\n"}, {"name": "Color.normalize", "path": "ref/color#pygame.Color.normalize", "type": "pygame.Color", "text": "\nReturns the normalized `RGBA` values of the Color as floating point values.\n\n"}, {"name": "Color.premul_alpha", "path": "ref/color#pygame.Color.premul_alpha", "type": "pygame.Color", "text": "\nReturns a new Color where each of the red, green and blue colour channels have\nbeen multiplied by the alpha channel of the original color. The alpha channel\nremains unchanged.\n\n"}, {"name": "Color.r", "path": "ref/color#pygame.Color.r", "type": "pygame.Color", "text": "\nThe red value of the Color.\n\n"}, {"name": "Color.set_length", "path": "ref/color#pygame.Color.set_length", "type": "pygame.Color", "text": "\nThe default Color length is 4. Colors can have lengths 1,2,3 or 4. This is\nuseful if you want to unpack to r,g,b and not r,g,b,a. If you want to get the\nlength of a Color do `len(acolor)`.\n\n"}, {"name": "Color.update", "path": "ref/color#pygame.Color.update", "type": "pygame.Color", "text": "\nSets the elements of the color. See parameters for `pygame.Color()` for the\nparameters of this function. If the alpha value was not set it will not\nchange.\n\n"}, {"name": "cursors", "path": "ref/cursors", "type": "pygame.cursors", "text": "\nPygame offers control over the system hardware cursor. Pygame only supports\nblack and white cursors for the system. You control the cursor with functions\ninside `pygame.mouse`.\n\n"}, {"name": "cursors.compile", "path": "ref/cursors#pygame.cursors.compile", "type": "pygame.cursors", "text": "\nA sequence of strings can be used to create binary cursor data for the system\ncursor. This returns the binary data in the form of two tuples. Those can be\npassed as the third and fourth arguments respectively of the\n`pygame.mouse.set_cursor()` function.\n\n"}, {"name": "cursors.load_xbm", "path": "ref/cursors#pygame.cursors.load_xbm", "type": "pygame.cursors", "text": "\nThis loads cursors for a simple subset of `XBM` files. `XBM` files are\ntraditionally used to store cursors on UNIX systems, they are an ASCII format\nused to represent simple images.\n\n"}, {"name": "display", "path": "ref/display", "type": "pygame.display", "text": "\nThis module offers control over the pygame display. Pygame has a single\ndisplay Surface that is either contained in a window or runs full screen. Once\nyou create the display you treat it as a regular Surface. Changes are not\nimmediately visible onscreen; you must choose one of the two flipping\nfunctions to update the actual display.\n\n"}, {"name": "display.flip", "path": "ref/display#pygame.display.flip", "type": "pygame.display", "text": "\nThis will update the contents of the entire display. If your display mode is\nusing the flags `pygame.HWSURFACE` and `pygame.DOUBLEBUF`, this will wait for\na vertical retrace and swap the surfaces. If you are using a different type of\ndisplay mode, it will simply update the entire contents of the surface.\n\n"}, {"name": "display.get_active", "path": "ref/display#pygame.display.get_active", "type": "pygame.display", "text": "\nReturns True when the display Surface is considered actively renderable on the\nscreen and may be visible to the user. This is the default state immediately\nafter `pygame.display.set_mode()`. This method may return True even if the\napplication is fully hidden behind another application window.\n\n"}, {"name": "display.get_allow_screensaver", "path": "ref/display#pygame.display.get_allow_screensaver", "type": "pygame.display", "text": "\nReturn whether screensaver is allowed to run whilst the app is running.\nDefault is `False`. By default pygame does not allow the screensaver during\ngame play.\n\n"}, {"name": "display.get_caption", "path": "ref/display#pygame.display.get_caption", "type": "pygame.display", "text": "\nReturns the title and icontitle for the display Surface. These will often be\nthe same value.\n\n"}, {"name": "display.get_driver", "path": "ref/display#pygame.display.get_driver", "type": "pygame.display", "text": "\nPygame chooses one of many available display backends when it is initialized.\nThis returns the internal name used for the display backend. This can be used\nto provide limited information about what display capabilities might be\naccelerated. See the `SDL_VIDEODRIVER` flags in `pygame.display.set_mode()` to\nsee some of the common options.\n\n"}, {"name": "display.get_init", "path": "ref/display#pygame.display.get_init", "type": "pygame.display", "text": "\nReturns True if the `pygame.display` module is currently initialized.\n\n"}, {"name": "display.get_num_displays", "path": "ref/display#pygame.display.get_num_displays", "type": "pygame.display", "text": "\nReturns the number of available displays. This is always 1 if\n`pygame.get_sdl_version()` returns a major version number below 2.\n\n"}, {"name": "display.get_surface", "path": "ref/display#pygame.display.get_surface", "type": "pygame.display", "text": "\nReturn a reference to the currently set display Surface. If no display mode\nhas been set this will return None.\n\n"}, {"name": "display.get_window_size", "path": "ref/display#pygame.display.get_window_size", "type": "pygame.display", "text": "\nReturns the size of the window initialized with `pygame.display.set_mode()`.\nThis may differ from the size of the display surface if `SCALED` is used.\n\n"}, {"name": "display.get_wm_info", "path": "ref/display#pygame.display.get_wm_info", "type": "pygame.display", "text": "\nCreates a dictionary filled with string keys. The strings and values are\narbitrarily created by the system. Some systems may have no information and an\nempty dictionary will be returned. Most platforms will return a \"window\" key\nwith the value set to the system id for the current display.\n\n"}, {"name": "display.gl_get_attribute", "path": "ref/display#pygame.display.gl_get_attribute", "type": "pygame.display", "text": "\nAfter calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, it is\na good idea to check the value of any requested OpenGL attributes. See\n`pygame.display.gl_set_attribute()` for a list of valid flags.\n\n"}, {"name": "display.gl_set_attribute", "path": "ref/display#pygame.display.gl_set_attribute", "type": "pygame.display", "text": "\nWhen calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, Pygame\nautomatically handles setting the OpenGL attributes like color and double-\nbuffering. OpenGL offers several other attributes you may want control over.\nPass one of these attributes as the flag, and its appropriate value. This must\nbe called before `pygame.display.set_mode()`.\n\n"}, {"name": "display.iconify", "path": "ref/display#pygame.display.iconify", "type": "pygame.display", "text": "\nRequest the window for the display surface be iconified or hidden. Not all\nsystems and displays support an iconified display. The function will return\nTrue if successful.\n\n"}, {"name": "display.Info", "path": "ref/display#pygame.display.Info", "type": "pygame.display", "text": "\nCreates a simple object containing several attributes to describe the current\ngraphics environment. If this is called before `pygame.display.set_mode()`\nsome platforms can provide information about the default display mode. This\ncan also be called after setting the display mode to verify specific display\noptions were satisfied. The VidInfo object has several attributes:\n\n"}, {"name": "display.init", "path": "ref/display#pygame.display.init", "type": "pygame.display", "text": "\nInitializes the pygame display module. The display module cannot do anything\nuntil it is initialized. This is usually handled for you automatically when\nyou call the higher level `pygame.init()`.\n\n"}, {"name": "display.list_modes", "path": "ref/display#pygame.display.list_modes", "type": "pygame.display", "text": "\nThis function returns a list of possible sizes for a specified color depth.\nThe return value will be an empty list if no display modes are available with\nthe given arguments. A return value of `-1` means that any requested size\nshould work (this is likely the case for windowed modes). Mode sizes are\nsorted from biggest to smallest.\n\n"}, {"name": "display.mode_ok", "path": "ref/display#pygame.display.mode_ok", "type": "pygame.display", "text": "\nThis function uses the same arguments as `pygame.display.set_mode()`. It is\nused to determine if a requested display mode is available. It will return `0`\nif the display mode cannot be set. Otherwise it will return a pixel depth that\nbest matches the display asked for.\n\n"}, {"name": "display.quit", "path": "ref/display#pygame.display.quit", "type": "pygame.display", "text": "\nThis will shut down the entire display module. This means any active displays\nwill be closed. This will also be handled automatically when the program\nexits.\n\n"}, {"name": "display.set_allow_screensaver", "path": "ref/display#pygame.display.set_allow_screensaver", "type": "pygame.display", "text": "\nChange whether screensavers should be allowed whilst the app is running. The\ndefault is False. By default pygame does not allow the screensaver during game\nplay.\n\n"}, {"name": "display.set_caption", "path": "ref/display#pygame.display.set_caption", "type": "pygame.display", "text": "\nIf the display has a window title, this function will change the name on the\nwindow. Some systems support an alternate shorter title to be used for\nminimized displays.\n\n"}, {"name": "display.set_gamma", "path": "ref/display#pygame.display.set_gamma", "type": "pygame.display", "text": "\nSet the red, green, and blue gamma values on the display hardware. If the\ngreen and blue arguments are not passed, they will both be the same as red.\nNot all systems and hardware support gamma ramps, if the function succeeds it\nwill return `True`.\n\n"}, {"name": "display.set_gamma_ramp", "path": "ref/display#pygame.display.set_gamma_ramp", "type": "pygame.display", "text": "\nSet the red, green, and blue gamma ramps with an explicit lookup table. Each\nargument should be sequence of 256 integers. The integers should range between\n`0` and `0xffff`. Not all systems and hardware support gamma ramps, if the\nfunction succeeds it will return `True`.\n\n"}, {"name": "display.set_icon", "path": "ref/display#pygame.display.set_icon", "type": "pygame.display", "text": "\nSets the runtime icon the system will use to represent the display window. All\nwindows default to a simple pygame logo for the window icon.\n\n"}, {"name": "display.set_mode", "path": "ref/display#pygame.display.set_mode", "type": "pygame.display", "text": "\nThis function will create a display Surface. The arguments passed in are\nrequests for a display type. The actual created display will be the best\npossible match supported by the system.\n\n"}, {"name": "display.set_palette", "path": "ref/display#pygame.display.set_palette", "type": "pygame.display", "text": "\nThis will change the video display color palette for 8-bit displays. This does\nnot change the palette for the actual display Surface, only the palette that\nis used to display the Surface. If no palette argument is passed, the system\ndefault palette will be restored. The palette is a sequence of `RGB` triplets.\n\n"}, {"name": "display.toggle_fullscreen", "path": "ref/display#pygame.display.toggle_fullscreen", "type": "pygame.display", "text": "\nSwitches the display window between windowed and fullscreen modes. Display\ndriver support is not great when using pygame 1, but with pygame 2 it is the\nmost reliable method to switch to and from fullscreen.\n\n"}, {"name": "display.update", "path": "ref/display#pygame.display.update", "type": "pygame.display", "text": "\nThis function is like an optimized version of `pygame.display.flip()` for\nsoftware displays. It allows only a portion of the screen to updated, instead\nof the entire area. If no argument is passed it updates the entire Surface\narea like `pygame.display.flip()`.\n\n"}, {"name": "draw", "path": "ref/draw", "type": "pygame.draw", "text": "\nDraw several simple shapes to a surface. These functions will work for\nrendering to any format of surface. Rendering to hardware surfaces will be\nslower than regular software surfaces.\n\n"}, {"name": "draw.aaline", "path": "ref/draw#pygame.draw.aaline", "type": "pygame.draw", "text": "\nDraws a straight antialiased line on the given surface.\n\n"}, {"name": "draw.aalines", "path": "ref/draw#pygame.draw.aalines", "type": "pygame.draw", "text": "\nDraws a sequence of contiguous straight antialiased lines on the given\nsurface.\n\n"}, {"name": "draw.arc", "path": "ref/draw#pygame.draw.arc", "type": "pygame.draw", "text": "\nDraws an elliptical arc on the given surface.\n\n"}, {"name": "draw.circle", "path": "ref/draw#pygame.draw.circle", "type": "pygame.draw", "text": "\nDraws a circle on the given surface.\n\n"}, {"name": "draw.ellipse", "path": "ref/draw#pygame.draw.ellipse", "type": "pygame.draw", "text": "\nDraws an ellipse on the given surface.\n\n"}, {"name": "draw.line", "path": "ref/draw#pygame.draw.line", "type": "pygame.draw", "text": "\nDraws a straight line on the given surface. There are no endcaps. For thick\nlines the ends are squared off.\n\n"}, {"name": "draw.lines", "path": "ref/draw#pygame.draw.lines", "type": "pygame.draw", "text": "\nDraws a sequence of contiguous straight lines on the given surface. There are\nno endcaps or miter joints. For thick lines the ends are squared off. Drawing\nthick lines with sharp corners can have undesired looking results.\n\n"}, {"name": "draw.polygon", "path": "ref/draw#pygame.draw.polygon", "type": "pygame.draw", "text": "\nDraws a polygon on the given surface.\n\n"}, {"name": "draw.rect", "path": "ref/draw#pygame.draw.rect", "type": "pygame.draw", "text": "\nDraws a rectangle on the given surface.\n\n"}, {"name": "encode_file_path", "path": "ref/pygame#pygame.encode_file_path", "type": "pygame", "text": "\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return\n`None`; if not given, raise `SyntaxError`.\n\n"}, {"name": "encode_string", "path": "ref/pygame#pygame.encode_string", "type": "pygame", "text": "\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return\n`None`; if not given, raise `SyntaxError`.\n\n"}, {"name": "error", "path": "ref/pygame#pygame.error", "type": "pygame", "text": "\nThis exception is raised whenever a pygame or SDL operation fails. You can\ncatch any anticipated problems and deal with the error. The exception is\nalways raised with a descriptive message about the problem.\n\n"}, {"name": "event", "path": "ref/event", "type": "pygame.event", "text": "\nPygame handles all its event messaging through an event queue. The routines in\nthis module help you manage that event queue. The input queue is heavily\ndependent on the `pygame.display` module. If the display has not been\ninitialized and a video mode not set, the event queue may not work properly.\nThe event subsystem should be called from the main thread. If you want to post\nevents into the queue from other threads, please use the `pygame.fastevent`\nmodule.\n\n"}, {"name": "event.clear", "path": "ref/event#pygame.event.clear", "type": "pygame.event", "text": "\nRemoves all events from the queue. If `eventtype` is given, removes the given\nevent or sequence of events. This has the same effect as `pygame.event.get()`\nexcept `None` is returned. It can be slightly more efficient when clearing a\nfull event queue.\n\n"}, {"name": "event.custom_type", "path": "ref/event#pygame.event.custom_type", "type": "pygame.event", "text": "\nReserves a `pygame.USEREVENT` for a custom use.\n\n"}, {"name": "event.Event", "path": "ref/event#pygame.event.Event", "type": "pygame.event", "text": "\nCreates a new event with the given type and attributes. The attributes can\ncome from a dictionary argument with string keys or from keyword arguments.\n\n"}, {"name": "event.event_name", "path": "ref/event#pygame.event.event_name", "type": "pygame.event", "text": "\nReturns a string representing the name (in CapWords style) of the given event\ntype.\n\n"}, {"name": "event.EventType", "path": "ref/event#pygame.event.EventType", "type": "pygame.event", "text": "\nA pygame object that represents an event. User event instances are created\nwith an `pygame.event.Event()` function call. The `EventType` type is not\ndirectly callable. `EventType` instances support attribute assignment and\ndeletion.\n\n"}, {"name": "event.EventType.__dict__", "path": "ref/event#pygame.event.EventType.__dict__", "type": "pygame.event", "text": "\nRead-only. The event type specific attributes of an event. The `dict`\nattribute is a synonym for backward compatibility.\n\n"}, {"name": "event.EventType.type", "path": "ref/event#pygame.event.EventType.type", "type": "pygame.event", "text": "\nRead-only. The event type identifier. For user created event objects, this is\nthe `type` argument passed to `pygame.event.Event()`.\n\n"}, {"name": "event.get", "path": "ref/event#pygame.event.get", "type": "pygame.event", "text": "\nThis will get all the messages and remove them from the queue. If a type or\nsequence of types is given only those messages will be removed from the queue.\n\n"}, {"name": "event.get_blocked", "path": "ref/event#pygame.event.get_blocked", "type": "pygame.event", "text": "\nReturns `True` if the given event type is blocked from the queue. If a\nsequence of event types is passed, this will return `True` if any of those\nevent types are blocked.\n\n"}, {"name": "event.get_grab", "path": "ref/event#pygame.event.get_grab", "type": "pygame.event", "text": "\nReturns `True` when the input events are grabbed for this application.\n\n"}, {"name": "event.peek", "path": "ref/event#pygame.event.peek", "type": "pygame.event", "text": "\nReturns `True` if there are any events of the given type waiting on the queue.\nIf a sequence of event types is passed, this will return `True` if any of\nthose events are on the queue.\n\n"}, {"name": "event.poll", "path": "ref/event#pygame.event.poll", "type": "pygame.event", "text": "\nReturns a single event from the queue. If the event queue is empty an event of\ntype `pygame.NOEVENT` will be returned immediately. The returned event is\nremoved from the queue.\n\n"}, {"name": "event.post", "path": "ref/event#pygame.event.post", "type": "pygame.event", "text": "\nPlaces the given event at the end of the event queue.\n\n"}, {"name": "event.pump", "path": "ref/event#pygame.event.pump", "type": "pygame.event", "text": "\nFor each frame of your game, you will need to make some sort of call to the\nevent queue. This ensures your program can internally interact with the rest\nof the operating system. If you are not using other event functions in your\ngame, you should call `pygame.event.pump()` to allow pygame to handle internal\nactions.\n\n"}, {"name": "event.set_allowed", "path": "ref/event#pygame.event.set_allowed", "type": "pygame.event", "text": "\nThe given event types are allowed to appear on the event queue. By default,\nall event types can be placed on the queue. It is safe to enable an event type\nmultiple times.\n\n"}, {"name": "event.set_blocked", "path": "ref/event#pygame.event.set_blocked", "type": "pygame.event", "text": "\nThe given event types are not allowed to appear on the event queue. By default\nall events can be placed on the queue. It is safe to disable an event type\nmultiple times.\n\n"}, {"name": "event.set_grab", "path": "ref/event#pygame.event.set_grab", "type": "pygame.event", "text": "\nWhen your program runs in a windowed environment, it will share the mouse and\nkeyboard devices with other applications that have focus. If your program sets\nthe event grab to `True`, it will lock all input into your program.\n\n"}, {"name": "event.wait", "path": "ref/event#pygame.event.wait", "type": "pygame.event", "text": "\nReturns a single event from the queue. If the queue is empty this function\nwill wait until one is created. From pygame 2.0.0, if a `timeout` argument is\ngiven, the function will return an event of type `pygame.NOEVENT` if no events\nenter the queue in `timeout` milliseconds. The event is removed from the queue\nonce it has been returned. While the program is waiting it will sleep in an\nidle state. This is important for programs that want to share the system with\nother applications.\n\n"}, {"name": "examples", "path": "ref/examples", "type": "pygame.examples", "text": "\nThese examples should help get you started with pygame. Here is a brief\nrundown of what you get. The source code for these examples is in the public\ndomain. Feel free to use for your own projects.\n\n"}, {"name": "examples.aliens.main", "path": "ref/examples#pygame.examples.aliens.main", "type": "pygame.examples", "text": "\nThis started off as a port of the `SDL` demonstration, Aliens. Now it has\nevolved into something sort of resembling fun. This demonstrates a lot of\ndifferent uses of sprites and optimized blitting. Also transparency,\ncolorkeys, fonts, sound, music, joystick, and more. (PS, my high score is 117!\ngoodluck)\n\n"}, {"name": "examples.arraydemo.main", "path": "ref/examples#pygame.examples.arraydemo.main", "type": "pygame.examples", "text": "\nAnother example filled with various surfarray effects. It requires the\nsurfarray and image modules to be installed. This little demo can also make a\ngood starting point for any of your own tests with surfarray\n\n"}, {"name": "examples.blend_fill.main", "path": "ref/examples#pygame.examples.blend_fill.main", "type": "pygame.examples", "text": "\nA interactive demo that lets one choose which BLEND_xxx option to apply to a\nsurface.\n\n"}, {"name": "examples.blit_blends.main", "path": "ref/examples#pygame.examples.blit_blends.main", "type": "pygame.examples", "text": "\nFake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat\nlike blend_fill.\n\n"}, {"name": "examples.camera.main", "path": "ref/examples#pygame.examples.camera.main", "type": "pygame.examples", "text": "\nA simple live video player, it uses the first available camera it finds on the\nsystem.\n\n"}, {"name": "examples.chimp.main", "path": "ref/examples#pygame.examples.chimp.main", "type": "pygame.examples", "text": "\nThis simple example is derived from the line-by-line tutorial that comes with\npygame. It is based on a 'popular' web banner. Note there are comments here,\nbut for the full explanation, follow along in the tutorial.\n\n"}, {"name": "examples.cursors.main", "path": "ref/examples#pygame.examples.cursors.main", "type": "pygame.examples", "text": "\nDisplay an arrow or circle with crossbar cursor.\n\n"}, {"name": "examples.eventlist.main", "path": "ref/examples#pygame.examples.eventlist.main", "type": "pygame.examples", "text": "\nEventlist is a sloppy style of pygame, but is a handy tool for learning about\npygame events and input. At the top of the screen are the state of several\ndevice values, and a scrolling list of events are displayed on the bottom.\n\n"}, {"name": "examples.fastevents.main", "path": "ref/examples#pygame.examples.fastevents.main", "type": "pygame.examples", "text": "\nThis is a stress test for the fastevents module.\n\n"}, {"name": "examples.fonty.main", "path": "ref/examples#pygame.examples.fonty.main", "type": "pygame.examples", "text": "\nSuper quick, super simple application demonstrating the different ways to\nrender fonts with the font module\n\n"}, {"name": "examples.freetype_misc.main", "path": "ref/examples#pygame.examples.freetype_misc.main", "type": "pygame.examples", "text": "\nA showcase of rendering features the `pygame.freetype.Font` class provides in\naddition to those available with `pygame.font.Font`. It is a demonstration of\ndirect to surface rendering, with vertical text and rotated text, opaque text\nand semi transparent text, horizontally stretched text and vertically\nstretched text.\n\n"}, {"name": "examples.glcube.main", "path": "ref/examples#pygame.examples.glcube.main", "type": "pygame.examples", "text": "\nUsing PyOpenGL and pygame, this creates a spinning 3D multicolored cube.\n\n"}, {"name": "examples.headless_no_windows_needed.main", "path": "ref/examples#pygame.examples.headless_no_windows_needed.main", "type": "pygame.examples", "text": "\narguments:\n\n"}, {"name": "examples.liquid.main", "path": "ref/examples#pygame.examples.liquid.main", "type": "pygame.examples", "text": "\nThis example was created in a quick comparison with the BlitzBasic gaming\nlanguage. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).\n\n"}, {"name": "examples.mask.main", "path": "ref/examples#pygame.examples.mask.main", "type": "pygame.examples", "text": "\nPositional arguments:\n\n"}, {"name": "examples.midi.main", "path": "ref/examples#pygame.examples.midi.main", "type": "pygame.examples", "text": "\nArguments:\n\n"}, {"name": "examples.moveit.main", "path": "ref/examples#pygame.examples.moveit.main", "type": "pygame.examples", "text": "\nThis is the full and final example from the Pygame Tutorial, \"How Do I Make It\nMove\". It creates 10 objects and animates them on the screen.\n\n"}, {"name": "examples.oldalien.main", "path": "ref/examples#pygame.examples.oldalien.main", "type": "pygame.examples", "text": "\nThis more closely resembles a port of the `SDL` Aliens demo. The code is a lot\nsimpler, so it makes a better starting point for people looking at code for\nthe first times. These blitting routines are not as optimized as they\nshould/could be, but the code is easier to follow, and it plays quick enough.\n\n"}, {"name": "examples.overlay.main", "path": "ref/examples#pygame.examples.overlay.main", "type": "pygame.examples", "text": "\nPlay the .pgm video file given by a path fname.\n\n"}, {"name": "examples.pixelarray.main", "path": "ref/examples#pygame.examples.pixelarray.main", "type": "pygame.examples", "text": "\nDisplay various pixelarray generated effects.\n\n"}, {"name": "examples.playmus.main", "path": "ref/examples#pygame.examples.playmus.main", "type": "pygame.examples", "text": "\nA simple music player with window and keyboard playback control. Playback can\nbe paused and rewound to the beginning.\n\n"}, {"name": "examples.scaletest.main", "path": "ref/examples#pygame.examples.scaletest.main", "type": "pygame.examples", "text": "\narguments:\n\n"}, {"name": "examples.scrap_clipboard.main", "path": "ref/examples#pygame.examples.scrap_clipboard.main", "type": "pygame.examples", "text": "\nA simple demonstration example for the clipboard support.\n\n"}, {"name": "examples.scroll.main", "path": "ref/examples#pygame.examples.scroll.main", "type": "pygame.examples", "text": "\nThis example shows a scrollable image that has a zoom factor of eight. It uses\nthe `Surface.scroll()` function to shift the image on the display surface. A\nclip rectangle protects a margin area. If called as a function, the example\naccepts an optional image file path. If run as a program it takes an optional\nfile path command line argument. If no file is provided a default image file\nis used.\n\n"}, {"name": "examples.sound.main", "path": "ref/examples#pygame.examples.sound.main", "type": "pygame.examples", "text": "\nExtremely basic testing of the mixer module. Load a sound and play it. All\nfrom the command shell, no graphics.\n\n"}, {"name": "examples.sound_array_demos.main", "path": "ref/examples#pygame.examples.sound_array_demos.main", "type": "pygame.examples", "text": "\nUses sndarray and NumPy to create offset faded copies of the original sound.\nCurrently it just uses hardcoded values for the number of echoes and the\ndelay. Easy for you to recreate as needed.\n\n"}, {"name": "examples.stars.main", "path": "ref/examples#pygame.examples.stars.main", "type": "pygame.examples", "text": "\nA simple starfield example. You can change the center of perspective by\nleftclicking the mouse on the screen.\n\n"}, {"name": "examples.testsprite.main", "path": "ref/examples#pygame.examples.testsprite.main", "type": "pygame.examples", "text": "\nOptional keyword arguments:\n\n"}, {"name": "examples.vgrade.main", "path": "ref/examples#pygame.examples.vgrade.main", "type": "pygame.examples", "text": "\nDemonstrates creating a vertical gradient with pixelcopy and NumPy python. The\napp will create a new gradient every half second and report the time needed to\ncreate and display the image. If you're not prepared to start working with the\nNumPy arrays, don't worry about the source for this one :]\n\n"}, {"name": "fastevent", "path": "ref/fastevent", "type": "pygame.fastevent", "text": "\npygame.fastevent is a wrapper for Bob Pendleton's fastevent library. It\nprovides fast events for use in multithreaded environments. When using\npygame.fastevent, you can not use any of the pump, wait, poll, post, get,\npeek, etc. functions from pygame.event, but you should use the Event objects.\n\n"}, {"name": "fastevent.get", "path": "ref/fastevent#pygame.fastevent.get", "type": "pygame.fastevent", "text": "\nThis will get all the messages and remove them from the queue.\n\n"}, {"name": "fastevent.get_init", "path": "ref/fastevent#pygame.fastevent.get_init", "type": "pygame.fastevent", "text": "\nReturns True if the pygame.fastevent module is currently initialized.\n\n"}, {"name": "fastevent.init", "path": "ref/fastevent#pygame.fastevent.init", "type": "pygame.fastevent", "text": "\nInitialize the pygame.fastevent module.\n\n"}, {"name": "fastevent.poll", "path": "ref/fastevent#pygame.fastevent.poll", "type": "pygame.fastevent", "text": "\nReturns next event on queue. If there is no event waiting on the queue, this\nwill return an event with type NOEVENT.\n\n"}, {"name": "fastevent.post", "path": "ref/fastevent#pygame.fastevent.post", "type": "pygame.fastevent", "text": "\nThis will post your own event objects onto the event queue. You can post any\nevent type you want, but some care must be taken. For example, if you post a\nMOUSEBUTTONDOWN event to the queue, it is likely any code receiving the event\nwill expect the standard MOUSEBUTTONDOWN attributes to be available, like\n'pos' and 'button'.\n\n"}, {"name": "fastevent.pump", "path": "ref/fastevent#pygame.fastevent.pump", "type": "pygame.fastevent", "text": "\nFor each frame of your game, you will need to make some sort of call to the\nevent queue. This ensures your program can internally interact with the rest\nof the operating system.\n\n"}, {"name": "fastevent.wait", "path": "ref/fastevent#pygame.fastevent.wait", "type": "pygame.fastevent", "text": "\nReturns the current event on the queue. If there are no messages waiting on\nthe queue, this will not return until one is available. Sometimes it is\nimportant to use this wait to get events from the queue, it will allow your\napplication to idle when the user isn't doing anything with it.\n\n"}, {"name": "font", "path": "ref/font", "type": "pygame.font", "text": "\nThe font module allows for rendering TrueType fonts into a new Surface object.\nIt accepts any UCS-2 character ('u0001' to 'uFFFF'). This module is optional\nand requires SDL_ttf as a dependency. You should test that `pygame.font` is\navailable and initialized before attempting to use the module.\n\n"}, {"name": "font.Font", "path": "ref/font#pygame.font.Font", "type": "pygame.font", "text": "\nLoad a new font from a given filename or a python file object. The size is the\nheight of the font in pixels. If the filename is None the pygame default font\nwill be loaded. If a font cannot be loaded from the arguments given an\nexception will be raised. Once the font is created the size cannot be changed.\n\n"}, {"name": "font.Font.bold", "path": "ref/font#pygame.font.Font.bold", "type": "pygame.font", "text": "\nWhether the font should be rendered in bold.\n\n"}, {"name": "font.Font.get_ascent", "path": "ref/font#pygame.font.Font.get_ascent", "type": "pygame.font", "text": "\nReturn the height in pixels for the font ascent. The ascent is the number of\npixels from the font baseline to the top of the font.\n\n"}, {"name": "font.Font.get_bold", "path": "ref/font#pygame.font.Font.get_bold", "type": "pygame.font", "text": "\nReturn True when the font bold rendering mode is enabled.\n\n"}, {"name": "font.Font.get_descent", "path": "ref/font#pygame.font.Font.get_descent", "type": "pygame.font", "text": "\nReturn the height in pixels for the font descent. The descent is the number of\npixels from the font baseline to the bottom of the font.\n\n"}, {"name": "font.Font.get_height", "path": "ref/font#pygame.font.Font.get_height", "type": "pygame.font", "text": "\nReturn the height in pixels of the actual rendered text. This is the average\nsize for each glyph in the font.\n\n"}, {"name": "font.Font.get_italic", "path": "ref/font#pygame.font.Font.get_italic", "type": "pygame.font", "text": "\nReturn True when the font italic rendering mode is enabled.\n\n"}, {"name": "font.Font.get_linesize", "path": "ref/font#pygame.font.Font.get_linesize", "type": "pygame.font", "text": "\nReturn the height in pixels for a line of text with the font. When rendering\nmultiple lines of text this is the recommended amount of space between lines.\n\n"}, {"name": "font.Font.get_underline", "path": "ref/font#pygame.font.Font.get_underline", "type": "pygame.font", "text": "\nReturn True when the font underline is enabled.\n\n"}, {"name": "font.Font.italic", "path": "ref/font#pygame.font.Font.italic", "type": "pygame.font", "text": "\nWhether the font should be rendered in italic.\n\n"}, {"name": "font.Font.metrics", "path": "ref/font#pygame.font.Font.metrics", "type": "pygame.font", "text": "\nThe list contains tuples for each character, which contain the minimum `X`\noffset, the maximum `X` offset, the minimum `Y` offset, the maximum `Y` offset\nand the advance offset (bearing plus width) of the character. [(minx, maxx,\nminy, maxy, advance), (minx, maxx, miny, maxy, advance), ...]. None is entered\nin the list for each unrecognized character.\n\n"}, {"name": "font.Font.render", "path": "ref/font#pygame.font.Font.render", "type": "pygame.font", "text": "\nThis creates a new Surface with the specified text rendered on it. pygame\nprovides no way to directly draw text on an existing Surface: instead you must\nuse `Font.render()` to create an image (Surface) of the text, then blit this\nimage onto another Surface.\n\n"}, {"name": "font.Font.set_bold", "path": "ref/font#pygame.font.Font.set_bold", "type": "pygame.font", "text": "\nEnables the bold rendering of text. This is a fake stretching of the font that\ndoesn't look good on many font types. If possible load the font from a real\nbold font file. While bold, the font will have a different width than when\nnormal. This can be mixed with the italic and underline modes.\n\n"}, {"name": "font.Font.set_italic", "path": "ref/font#pygame.font.Font.set_italic", "type": "pygame.font", "text": "\nEnables fake rendering of italic text. This is a fake skewing of the font that\ndoesn't look good on many font types. If possible load the font from a real\nitalic font file. While italic the font will have a different width than when\nnormal. This can be mixed with the bold and underline modes.\n\n"}, {"name": "font.Font.set_underline", "path": "ref/font#pygame.font.Font.set_underline", "type": "pygame.font", "text": "\nWhen enabled, all rendered fonts will include an underline. The underline is\nalways one pixel thick, regardless of font size. This can be mixed with the\nbold and italic modes.\n\n"}, {"name": "font.Font.size", "path": "ref/font#pygame.font.Font.size", "type": "pygame.font", "text": "\nReturns the dimensions needed to render the text. This can be used to help\ndetermine the positioning needed for text before it is rendered. It can also\nbe used for wordwrapping and other layout effects.\n\n"}, {"name": "font.Font.underline", "path": "ref/font#pygame.font.Font.underline", "type": "pygame.font", "text": "\nWhether the font should be rendered in underline.\n\n"}, {"name": "font.get_default_font", "path": "ref/font#pygame.font.get_default_font", "type": "pygame.font", "text": "\nReturn the filename of the system font. This is not the full path to the file.\nThis file can usually be found in the same directory as the font module, but\nit can also be bundled in separate archives.\n\n"}, {"name": "font.get_fonts", "path": "ref/font#pygame.font.get_fonts", "type": "pygame.font", "text": "\nReturns a list of all the fonts available on the system. The names of the\nfonts will be set to lowercase with all spaces and punctuation removed. This\nworks on most systems, but some will return an empty list if they cannot find\nfonts.\n\n"}, {"name": "font.get_init", "path": "ref/font#pygame.font.get_init", "type": "pygame.font", "text": "\nTest if the font module is initialized or not.\n\n"}, {"name": "font.init", "path": "ref/font#pygame.font.init", "type": "pygame.font", "text": "\nThis method is called automatically by `pygame.init()`. It initializes the\nfont module. The module must be initialized before any other functions will\nwork.\n\n"}, {"name": "font.match_font", "path": "ref/font#pygame.font.match_font", "type": "pygame.font", "text": "\nReturns the full path to a font file on the system. If bold or italic are set\nto true, this will attempt to find the correct family of font.\n\n"}, {"name": "font.quit", "path": "ref/font#pygame.font.quit", "type": "pygame.font", "text": "\nManually uninitialize SDL_ttf's font system. This is called automatically by\n`pygame.quit()`.\n\n"}, {"name": "font.SysFont", "path": "ref/font#pygame.font.SysFont", "type": "pygame.font", "text": "\nReturn a new Font object that is loaded from the system fonts. The font will\nmatch the requested bold and italic flags. Pygame uses a small set of common\nfont aliases. If the specific font you ask for is not available, a reasonable\nalternative may be used. If a suitable system font is not found this will fall\nback on loading the default pygame font.\n\n"}, {"name": "freetype", "path": "ref/freetype", "type": "pygame.freetype", "text": "\nThe `pygame.freetype` module is a replacement for `pygame.font`. It has all of\nthe functionality of the original, plus many new features. Yet is has\nabsolutely no dependencies on the SDL_ttf library. It is implemented directly\non the FreeType 2 library. The `pygame.freetype` module is not itself backward\ncompatible with `pygame.font`. Instead, use the `pygame.ftfont` module as a\ndrop-in replacement for `pygame.font`.\n\n"}, {"name": "freetype.Font", "path": "ref/freetype#pygame.freetype.Font", "type": "pygame.freetype", "text": "\nArgument file can be either a string representing the font's filename, a file-\nlike object containing the font, or None; if None, a default, Pygame, font is\nused.\n\n"}, {"name": "freetype.Font.antialiased", "path": "ref/freetype#pygame.freetype.Font.antialiased", "type": "pygame.freetype", "text": "\nGets or sets the font's anti-aliasing mode. This defaults to `True` on all\nfonts, which are rendered with full 8 bit blending.\n\n"}, {"name": "freetype.Font.ascender", "path": "ref/freetype#pygame.freetype.Font.ascender", "type": "pygame.freetype", "text": "\nRead only. Return the number of units from the font's baseline to the top of\nthe bounding box.\n\n"}, {"name": "freetype.Font.bgcolor", "path": "ref/freetype#pygame.freetype.Font.bgcolor", "type": "pygame.freetype", "text": "\nGets or sets the default background rendering color. Initially it is unset and\ntext will render with a transparent background by default. Applies to\n`render()` and `render_to()`.\n\n"}, {"name": "freetype.Font.descender", "path": "ref/freetype#pygame.freetype.Font.descender", "type": "pygame.freetype", "text": "\nRead only. Return the height in font units for the font descent. The descent\nis the number of units from the font's baseline to the bottom of the bounding\nbox.\n\n"}, {"name": "freetype.Font.fgcolor", "path": "ref/freetype#pygame.freetype.Font.fgcolor", "type": "pygame.freetype", "text": "\nGets or sets the default glyph rendering color. It is initially opaque black \u2015\n(0, 0, 0, 255). Applies to `render()` and `render_to()`.\n\n"}, {"name": "freetype.Font.fixed_sizes", "path": "ref/freetype#pygame.freetype.Font.fixed_sizes", "type": "pygame.freetype", "text": "\nRead only. Returns the number of point sizes for which the font contains\nbitmap character images. If zero then the font is not a bitmap font. A\nscalable font may contain pre-rendered point sizes as strikes.\n\n"}, {"name": "freetype.Font.fixed_width", "path": "ref/freetype#pygame.freetype.Font.fixed_width", "type": "pygame.freetype", "text": "\nRead only. Returns `True` if the font contains fixed-width characters (for\nexample Courier, Bitstream Vera Sans Mono, Andale Mono).\n\n"}, {"name": "freetype.Font.get_metrics", "path": "ref/freetype#pygame.freetype.Font.get_metrics", "type": "pygame.freetype", "text": "\nReturns the glyph metrics for each character in text.\n\n"}, {"name": "freetype.Font.get_rect", "path": "ref/freetype#pygame.freetype.Font.get_rect", "type": "pygame.freetype", "text": "\nGets the final dimensions and origin, in pixels, of text using the optional\nsize in points, style, and rotation. For other relevant render properties, and\nfor any optional argument not given, the default values set for the `Font`\ninstance are used.\n\n"}, {"name": "freetype.Font.get_sized_ascender", "path": "ref/freetype#pygame.freetype.Font.get_sized_ascender", "type": "pygame.freetype", "text": "\nReturn the number of units from the font's baseline to the top of the bounding\nbox. It is not adjusted for strong or rotation.\n\n"}, {"name": "freetype.Font.get_sized_descender", "path": "ref/freetype#pygame.freetype.Font.get_sized_descender", "type": "pygame.freetype", "text": "\nReturn the number of pixels from the font's baseline to the top of the\nbounding box. It is not adjusted for strong or rotation.\n\n"}, {"name": "freetype.Font.get_sized_glyph_height", "path": "ref/freetype#pygame.freetype.Font.get_sized_glyph_height", "type": "pygame.freetype", "text": "\nReturn the glyph bounding box height of the font in pixels. This is the\naverage value of all glyphs in the font. It is not adjusted for strong or\nrotation.\n\n"}, {"name": "freetype.Font.get_sized_height", "path": "ref/freetype#pygame.freetype.Font.get_sized_height", "type": "pygame.freetype", "text": "\nReturns the height of the font. This is the average value of all glyphs in the\nfont. It is not adjusted for strong or rotation.\n\n"}, {"name": "freetype.Font.get_sizes", "path": "ref/freetype#pygame.freetype.Font.get_sizes", "type": "pygame.freetype", "text": "\nReturns a list of tuple records, one for each point size supported. Each tuple\ncontaining the point size, the height in pixels, width in pixels, horizontal\nppem (nominal width) in fractional pixels, and vertical ppem (nominal height)\nin fractional pixels.\n\n"}, {"name": "freetype.Font.height", "path": "ref/freetype#pygame.freetype.Font.height", "type": "pygame.freetype", "text": "\nRead only. Gets the height of the font. This is the average value of all\nglyphs in the font.\n\n"}, {"name": "freetype.Font.kerning", "path": "ref/freetype#pygame.freetype.Font.kerning", "type": "pygame.freetype", "text": "\nGets or sets the font's kerning mode. This defaults to `False` on all fonts,\nwhich will be rendered without kerning.\n\n"}, {"name": "freetype.Font.name", "path": "ref/freetype#pygame.freetype.Font.name", "type": "pygame.freetype", "text": "\nRead only. Returns the real (long) name of the font, as recorded in the font\nfile.\n\n"}, {"name": "freetype.Font.oblique", "path": "ref/freetype#pygame.freetype.Font.oblique", "type": "pygame.freetype", "text": "\nGets or sets whether the font will be rendered as oblique. This default style\nvalue will be used for all text rendering and size calculations unless\noverridden specifically in a render or `get_rect()` call, via the style\nparameter.\n\n"}, {"name": "freetype.Font.origin", "path": "ref/freetype#pygame.freetype.Font.origin", "type": "pygame.freetype", "text": "\nIf set `True`, `render_to()` and `render_raw_to()` will take the dest position\nto be that of the text origin, as opposed to the top-left corner of the\nbounding box. See `get_rect()` for details.\n\n"}, {"name": "freetype.Font.pad", "path": "ref/freetype#pygame.freetype.Font.pad", "type": "pygame.freetype", "text": "\nIf set `True`, then the text boundary rectangle will be inflated to match that\nof `font.Font`. Otherwise, the boundary rectangle is just large enough for the\ntext.\n\n"}, {"name": "freetype.Font.path", "path": "ref/freetype#pygame.freetype.Font.path", "type": "pygame.freetype", "text": "\nRead only. Returns the path of the loaded font file\n\n"}, {"name": "freetype.Font.render", "path": "ref/freetype#pygame.freetype.Font.render", "type": "pygame.freetype", "text": "\nReturns a new `Surface`, with the text rendered to it in the color given by\n'fgcolor'. If no foreground color is given, the default foreground color,\n`fgcolor` is used. If `bgcolor` is given, the surface will be filled with this\ncolor. When no background color is given, the surface background is\ntransparent, zero alpha. Normally the returned surface has a 32 bit pixel\nsize. However, if `bgcolor` is `None` and anti-aliasing is disabled a\nmonochrome 8 bit colorkey surface, with colorkey set for the background color,\nis returned.\n\n"}, {"name": "freetype.Font.render_raw", "path": "ref/freetype#pygame.freetype.Font.render_raw", "type": "pygame.freetype", "text": "\nLike `render()` but with the pixels returned as a byte string of 8-bit gray-\nscale values. The foreground color is 255, the background 0, useful as an\nalpha mask for a foreground pattern.\n\n"}, {"name": "freetype.Font.render_raw_to", "path": "ref/freetype#pygame.freetype.Font.render_raw_to", "type": "pygame.freetype", "text": "\nRender to an array object exposing an array struct interface. The array must\nbe two dimensional with integer items. The default dest value, `None`, is\nequivalent to position (0, 0). See `render_to()`. As with the other render\nmethods, text can be `None` to render a text string passed previously to\nanother method.\n\n"}, {"name": "freetype.Font.render_to", "path": "ref/freetype#pygame.freetype.Font.render_to", "type": "pygame.freetype", "text": "\nRenders the string text to the `pygame.Surface` surf, at position dest, a (x,\ny) surface coordinate pair. If either x or y is not an integer it is converted\nto one if possible. Any sequence where the first two items are x and y\npositional elements is accepted, including a `Rect` instance. As with\n`render()`, optional fgcolor, style, rotation, and size argument are\navailable.\n\n"}, {"name": "freetype.Font.resolution", "path": "ref/freetype#pygame.freetype.Font.resolution", "type": "pygame.freetype", "text": "\nRead only. Gets pixel size used in scaling font glyphs for this `Font`\ninstance.\n\n"}, {"name": "freetype.Font.rotation", "path": "ref/freetype#pygame.freetype.Font.rotation", "type": "pygame.freetype", "text": "\nGets or sets the baseline angle of the rendered text. The angle is represented\nas integer degrees. The default angle is 0, with horizontal text rendered\nalong the X-axis, and vertical text along the Y-axis. A positive value rotates\nthese axes counterclockwise that many degrees. A negative angle corresponds to\na clockwise rotation. The rotation value is normalized to a value within the\nrange 0 to 359 inclusive (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315,\n720 -> 720 - (2 * 360) -> 0).\n\n"}, {"name": "freetype.Font.scalable", "path": "ref/freetype#pygame.freetype.Font.scalable", "type": "pygame.freetype", "text": "\nRead only. Returns `True` if the font contains outline glyphs. If so, the\npoint size is not limited to available bitmap sizes.\n\n"}, {"name": "freetype.Font.size", "path": "ref/freetype#pygame.freetype.Font.size", "type": "pygame.freetype", "text": "\nGet or set the default size for text metrics and rendering. It can be a single\npoint size, given as a Python `int` or `float`, or a font ppem (width, height)\n`tuple`. Size values are non-negative. A zero size or width represents an\nundefined size. In this case the size must be given as a method argument, or\nan exception is raised. A zero width but non-zero height is a ValueError.\n\n"}, {"name": "freetype.Font.strength", "path": "ref/freetype#pygame.freetype.Font.strength", "type": "pygame.freetype", "text": "\nThe amount by which a font glyph's size is enlarged for the strong or wide\ntransformations, as a fraction of the untransformed size. For the wide style\nonly the horizontal dimension is increased. For strong text both the\nhorizontal and vertical dimensions are enlarged. A wide style of strength\n0.08333 ( 1/12 ) is equivalent to the `pygame.font.Font` bold style. The\ndefault is 0.02778 ( 1/36 ).\n\n"}, {"name": "freetype.Font.strong", "path": "ref/freetype#pygame.freetype.Font.strong", "type": "pygame.freetype", "text": "\nGets or sets whether the font will be bold when drawing text. This default\nstyle value will be used for all text rendering and size calculations unless\noverridden specifically in a render or `get_rect()` call, via the 'style'\nparameter.\n\n"}, {"name": "freetype.Font.style", "path": "ref/freetype#pygame.freetype.Font.style", "type": "pygame.freetype", "text": "\nGets or sets the default style of the Font. This default style will be used\nfor all text rendering and size calculations unless overridden specifically a\nrender or `get_rect()` call. The style value may be a bit-wise OR of one or\nmore of the following constants:\n\n"}, {"name": "freetype.Font.ucs4", "path": "ref/freetype#pygame.freetype.Font.ucs4", "type": "pygame.freetype", "text": "\nGets or sets the decoding of Unicode text. By default, the freetype module\nperforms UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit\nescape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their\ncorresponding UTF-32 code points on Python interpreters built with a UCS-2\nUnicode type (on Windows, for instance). It also means character values within\nthe UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a\nsurrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError.\nSetting ucs4 `True` turns surrogate pair decoding off, allowing access the\nfull UCS-4 character range to a Python interpreter built with four-byte\nUnicode character support.\n\n"}, {"name": "freetype.Font.underline", "path": "ref/freetype#pygame.freetype.Font.underline", "type": "pygame.freetype", "text": "\nGets or sets whether the font will be underlined when drawing text. This\ndefault style value will be used for all text rendering and size calculations\nunless overridden specifically in a render or `get_rect()` call, via the\n'style' parameter.\n\n"}, {"name": "freetype.Font.underline_adjustment", "path": "ref/freetype#pygame.freetype.Font.underline_adjustment", "type": "pygame.freetype", "text": "\nGets or sets a factor which, when positive, is multiplied with the font's\nunderline offset to adjust the underline position. A negative value turns an\nunderline into a strike-through or overline. It is multiplied with the\nascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5\nclosely matches Tango underlining. A value of 1.0 mimics `pygame.font.Font`\nunderlining.\n\n"}, {"name": "freetype.Font.use_bitmap_strikes", "path": "ref/freetype#pygame.freetype.Font.use_bitmap_strikes", "type": "pygame.freetype", "text": "\nSome scalable fonts include embedded bitmaps for particular point sizes. This\nproperty controls whether or not those bitmap strikes are used. Set it `False`\nto disable the loading of any bitmap strike. Set it `True`, the default, to\npermit bitmap strikes for a non-rotated render with no style other than `wide`\nor `underline`. This property is ignored for bitmap fonts.\n\n"}, {"name": "freetype.Font.vertical", "path": "ref/freetype#pygame.freetype.Font.vertical", "type": "pygame.freetype", "text": "\nGets or sets whether the characters are laid out vertically rather than\nhorizontally. May be useful when rendering Kanji or some other vertical\nscript.\n\n"}, {"name": "freetype.Font.wide", "path": "ref/freetype#pygame.freetype.Font.wide", "type": "pygame.freetype", "text": "\nGets or sets whether the font will be stretched horizontally when drawing\ntext. It produces a result similar to `pygame.font.Font`'s bold. This style\nnot available for rotated text.\n\n"}, {"name": "freetype.get_cache_size", "path": "ref/freetype#pygame.freetype.get_cache_size", "type": "pygame.freetype", "text": "\nSee `pygame.freetype.init()`.\n\n"}, {"name": "freetype.get_default_font", "path": "ref/freetype#pygame.freetype.get_default_font", "type": "pygame.freetype", "text": "\nReturn the filename of the default pygame font. This is not the full path to\nthe file. The file is usually in the same directory as the font module, but\ncan also be bundled in a separate archive.\n\n"}, {"name": "freetype.get_default_resolution", "path": "ref/freetype#pygame.freetype.get_default_resolution", "type": "pygame.freetype", "text": "\nReturns the default pixel size, in dots per inch, for the module. The default\nis 72 DPI.\n\n"}, {"name": "freetype.get_error", "path": "ref/freetype#pygame.freetype.get_error", "type": "pygame.freetype", "text": "\nReturn a description of the last error which occurred in the FreeType2\nlibrary, or `None` if no errors have occurred.\n\n"}, {"name": "freetype.get_init", "path": "ref/freetype#pygame.freetype.get_init", "type": "pygame.freetype", "text": "\nReturns `True` if the `pygame.freetype` module is currently initialized.\n\n"}, {"name": "freetype.get_version", "path": "ref/freetype#pygame.freetype.get_version", "type": "pygame.freetype", "text": "\nReturns the version of the FreeType library in use by this module.\n\n"}, {"name": "freetype.init", "path": "ref/freetype#pygame.freetype.init", "type": "pygame.freetype", "text": "\nThis function initializes the underlying FreeType library and must be called\nbefore trying to use any of the functionality of the `freetype` module.\n\n"}, {"name": "freetype.quit", "path": "ref/freetype#pygame.freetype.quit", "type": "pygame.freetype", "text": "\nThis function closes the `freetype` module. After calling this function, you\nshould not invoke any class, method or function related to the `freetype`\nmodule as they are likely to fail or might give unpredictable results. It is\nsafe to call this function even if the module hasn't been initialized yet.\n\n"}, {"name": "freetype.set_default_resolution", "path": "ref/freetype#pygame.freetype.set_default_resolution", "type": "pygame.freetype", "text": "\nSet the default pixel size, in dots per inch, for the module. If the optional\nargument is omitted or zero the resolution is reset to 72 DPI.\n\n"}, {"name": "freetype.SysFont", "path": "ref/freetype#pygame.freetype.SysFont", "type": "pygame.freetype", "text": "\nReturn a new Font object that is loaded from the system fonts. The font will\nmatch the requested bold and italic flags. Pygame uses a small set of common\nfont aliases. If the specific font you ask for is not available, a reasonable\nalternative may be used. If a suitable system font is not found this will fall\nback on loading the default pygame font.\n\n"}, {"name": "freetype.was_init", "path": "ref/freetype#pygame.freetype.was_init", "type": "pygame.freetype", "text": "\nDEPRECATED: Returns `True` if the `pygame.freetype` module is currently\ninitialized. Use `get_init()` instead.\n\n"}, {"name": "get_error", "path": "ref/pygame#pygame.get_error", "type": "pygame", "text": "\nSDL maintains an internal error message. This message will usually be given to\nyou when `pygame.error()` is raised, so this function will rarely be needed.\n\n"}, {"name": "get_init", "path": "ref/pygame#pygame.get_init", "type": "pygame", "text": "\nReturns `True` if pygame is currently initialized.\n\n"}, {"name": "get_sdl_byteorder", "path": "ref/pygame#pygame.get_sdl_byteorder", "type": "pygame", "text": "\nReturns the byte order of the SDL library. It returns `1234` for little endian\nbyte order and `4321` for big endian byte order.\n\n"}, {"name": "get_sdl_version", "path": "ref/pygame#pygame.get_sdl_version", "type": "pygame", "text": "\nReturns the three version numbers of the SDL library. This version is built at\ncompile time. It can be used to detect which features may or may not be\navailable through pygame.\n\n"}, {"name": "gfxdraw", "path": "ref/gfxdraw", "type": "pygame.gfxdraw", "text": "\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code may break with the next pygame release.\n\n"}, {"name": "gfxdraw.aacircle", "path": "ref/gfxdraw#pygame.gfxdraw.aacircle", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled antialiased circle on the given surface.\n\n"}, {"name": "gfxdraw.aaellipse", "path": "ref/gfxdraw#pygame.gfxdraw.aaellipse", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled antialiased ellipse on the given surface.\n\n"}, {"name": "gfxdraw.aapolygon", "path": "ref/gfxdraw#pygame.gfxdraw.aapolygon", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled antialiased polygon on the given surface.\n\n"}, {"name": "gfxdraw.aatrigon", "path": "ref/gfxdraw#pygame.gfxdraw.aatrigon", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled antialiased trigon (triangle) on the given surface.\n\n"}, {"name": "gfxdraw.arc", "path": "ref/gfxdraw#pygame.gfxdraw.arc", "type": "pygame.gfxdraw", "text": "\nDraws an arc on the given surface. For an arc with its endpoints connected to\nits center use `pie()`.\n\n"}, {"name": "gfxdraw.bezier", "path": "ref/gfxdraw#pygame.gfxdraw.bezier", "type": "pygame.gfxdraw", "text": "\nDraws a B\u00e9zier curve on the given surface.\n\n"}, {"name": "gfxdraw.box", "path": "ref/gfxdraw#pygame.gfxdraw.box", "type": "pygame.gfxdraw", "text": "\nDraws a filled rectangle on the given surface. For an unfilled rectangle use\n`rectangle()`.\n\n"}, {"name": "gfxdraw.circle", "path": "ref/gfxdraw#pygame.gfxdraw.circle", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled circle on the given surface. For a filled circle use\n`filled_circle()`.\n\n"}, {"name": "gfxdraw.ellipse", "path": "ref/gfxdraw#pygame.gfxdraw.ellipse", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled ellipse on the given surface. For a filled ellipse use\n`filled_ellipse()`.\n\n"}, {"name": "gfxdraw.filled_circle", "path": "ref/gfxdraw#pygame.gfxdraw.filled_circle", "type": "pygame.gfxdraw", "text": "\nDraws a filled circle on the given surface. For an unfilled circle use\n`circle()`.\n\n"}, {"name": "gfxdraw.filled_ellipse", "path": "ref/gfxdraw#pygame.gfxdraw.filled_ellipse", "type": "pygame.gfxdraw", "text": "\nDraws a filled ellipse on the given surface. For an unfilled ellipse use\n`ellipse()`.\n\n"}, {"name": "gfxdraw.filled_polygon", "path": "ref/gfxdraw#pygame.gfxdraw.filled_polygon", "type": "pygame.gfxdraw", "text": "\nDraws a filled polygon on the given surface. For an unfilled polygon use\n`polygon()`.\n\n"}, {"name": "gfxdraw.filled_trigon", "path": "ref/gfxdraw#pygame.gfxdraw.filled_trigon", "type": "pygame.gfxdraw", "text": "\nDraws a filled trigon (triangle) on the given surface. For an unfilled trigon\nuse `trigon()`.\n\n"}, {"name": "gfxdraw.hline", "path": "ref/gfxdraw#pygame.gfxdraw.hline", "type": "pygame.gfxdraw", "text": "\nDraws a straight horizontal line (`(x1, y)` to `(x2, y)`) on the given\nsurface. There are no endcaps.\n\n"}, {"name": "gfxdraw.line", "path": "ref/gfxdraw#pygame.gfxdraw.line", "type": "pygame.gfxdraw", "text": "\nDraws a straight line (`(x1, y1)` to `(x2, y2)`) on the given surface. There\nare no endcaps.\n\n"}, {"name": "gfxdraw.pie", "path": "ref/gfxdraw#pygame.gfxdraw.pie", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled pie on the given surface. A pie is an `arc()` with its\nendpoints connected to its center.\n\n"}, {"name": "gfxdraw.pixel", "path": "ref/gfxdraw#pygame.gfxdraw.pixel", "type": "pygame.gfxdraw", "text": "\nDraws a single pixel, at position (x ,y), on the given surface.\n\n"}, {"name": "gfxdraw.polygon", "path": "ref/gfxdraw#pygame.gfxdraw.polygon", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled polygon on the given surface. For a filled polygon use\n`filled_polygon()`.\n\n"}, {"name": "gfxdraw.rectangle", "path": "ref/gfxdraw#pygame.gfxdraw.rectangle", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled rectangle on the given surface. For a filled rectangle use\n`box()`.\n\n"}, {"name": "gfxdraw.textured_polygon", "path": "ref/gfxdraw#pygame.gfxdraw.textured_polygon", "type": "pygame.gfxdraw", "text": "\nDraws a textured polygon on the given surface. For better performance, the\nsurface and the texture should have the same format.\n\n"}, {"name": "gfxdraw.trigon", "path": "ref/gfxdraw#pygame.gfxdraw.trigon", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled trigon (triangle) on the given surface. For a filled trigon\nuse `filled_trigon()`.\n\n"}, {"name": "gfxdraw.vline", "path": "ref/gfxdraw#pygame.gfxdraw.vline", "type": "pygame.gfxdraw", "text": "\nDraws a straight vertical line (`(x, y1)` to `(x, y2)`) on the given surface.\nThere are no endcaps.\n\n"}, {"name": "image", "path": "ref/image", "type": "pygame.image", "text": "\nThe image module contains functions for loading and saving pictures, as well\nas transferring Surfaces to formats usable by other packages.\n\n"}, {"name": "image.frombuffer", "path": "ref/image#pygame.image.frombuffer", "type": "pygame.image", "text": "\nCreate a new Surface that shares pixel data directly from a bytes buffer. This\nmethod takes similar arguments to `pygame.image.fromstring()`, but is unable\nto vertically flip the source data.\n\n"}, {"name": "image.fromstring", "path": "ref/image#pygame.image.fromstring", "type": "pygame.image", "text": "\nThis function takes arguments similar to `pygame.image.tostring()`. The size\nargument is a pair of numbers representing the width and height. Once the new\nSurface is created you can destroy the string buffer.\n\n"}, {"name": "image.get_extended", "path": "ref/image#pygame.image.get_extended", "type": "pygame.image", "text": "\nIf pygame is built with extended image formats this function will return True.\nIt is still not possible to determine which formats will be available, but\ngenerally you will be able to load them all.\n\n"}, {"name": "image.get_sdl_image_version", "path": "ref/image#pygame.image.get_sdl_image_version", "type": "pygame.image", "text": "\nIf pygame is built with extended image formats, then this function will return\nthe SDL_Image library's version number as a tuple of 3 integers `(major,\nminor, patch)`. If not, then it will return `None`.\n\n"}, {"name": "image.load", "path": "ref/image#pygame.image.load", "type": "pygame.image", "text": "\nLoad an image from a file source. You can pass either a filename or a Python\nfile-like object.\n\n"}, {"name": "image.load_basic", "path": "ref/image#pygame.image.load_basic", "type": "pygame.image", "text": "\nLoad an image from a file source. You can pass either a filename or a Python\nfile-like object.\n\n"}, {"name": "image.load_extended", "path": "ref/image#pygame.image.load_extended", "type": "pygame.image", "text": "\nThis function is similar to `pygame.image.load()`, except that this function\ncan only be used if pygame was built with extended image format support.\n\n"}, {"name": "image.save", "path": "ref/image#pygame.image.save", "type": "pygame.image", "text": "\nThis will save your Surface as either a `BMP`, `TGA`, `PNG`, or `JPEG` image.\nIf the filename extension is unrecognized it will default to `TGA`. Both\n`TGA`, and `BMP` file formats create uncompressed files. You can pass a\nfilename or a Python file-like object. For file-like object, the image is\nsaved to `TGA` format unless a namehint with a recognizable extension is\npassed in.\n\n"}, {"name": "image.save_extended", "path": "ref/image#pygame.image.save_extended", "type": "pygame.image", "text": "\nThis will save your Surface as either a `PNG` or `JPEG` image.\n\n"}, {"name": "image.tostring", "path": "ref/image#pygame.image.tostring", "type": "pygame.image", "text": "\nCreates a string that can be transferred with the 'fromstring' method in other\nPython imaging packages. Some Python image packages prefer their images in\nbottom-to-top format (PyOpenGL for example). If you pass True for the flipped\nargument, the string buffer will be vertically flipped.\n\n"}, {"name": "init", "path": "ref/pygame#pygame.init", "type": "pygame", "text": "\nInitialize all imported pygame modules. No exceptions will be raised if a\nmodule fails, but the total number if successful and failed inits will be\nreturned as a tuple. You can always initialize individual modules manually,\nbut `pygame.init()` is a convenient way to get everything started. The\n`init()` functions for individual modules will raise exceptions when they\nfail.\n\n"}, {"name": "joystick", "path": "ref/joystick", "type": "pygame.joystick", "text": "\nThe joystick module manages the joystick devices on a computer. Joystick\ndevices include trackballs and video-game-style gamepads, and the module\nallows the use of multiple buttons and \"hats\". Computers may manage multiple\njoysticks at a time.\n\n"}, {"name": "joystick.get_count", "path": "ref/joystick#pygame.joystick.get_count", "type": "pygame.joystick", "text": "\nReturn the number of joystick devices on the system. The count will be `0` if\nthere are no joysticks on the system.\n\n"}, {"name": "joystick.get_init", "path": "ref/joystick#pygame.joystick.get_init", "type": "pygame.joystick", "text": "\nTest if the `pygame.joystick.init()` function has been called.\n\n"}, {"name": "joystick.init", "path": "ref/joystick#pygame.joystick.init", "type": "pygame.joystick", "text": "\nThis function is called automatically by `pygame.init()`.\n\n"}, {"name": "joystick.Joystick", "path": "ref/joystick#pygame.joystick.Joystick", "type": "pygame.joystick", "text": "\nCreate a new joystick to access a physical device. The id argument must be a\nvalue from `0` to `pygame.joystick.get_count() - 1`.\n\n"}, {"name": "joystick.Joystick.get_axis", "path": "ref/joystick#pygame.joystick.Joystick.get_axis", "type": "pygame.joystick", "text": "\nReturns the current position of a joystick axis. The value will range from\n`-1` to `1` with a value of `0` being centered. You may want to take into\naccount some tolerance to handle jitter, and joystick drift may keep the\njoystick from centering at `0` or using the full range of position values.\n\n"}, {"name": "joystick.Joystick.get_ball", "path": "ref/joystick#pygame.joystick.Joystick.get_ball", "type": "pygame.joystick", "text": "\nReturns the relative movement of a joystick button. The value is a `x, y` pair\nholding the relative movement since the last call to get_ball.\n\n"}, {"name": "joystick.Joystick.get_button", "path": "ref/joystick#pygame.joystick.Joystick.get_button", "type": "pygame.joystick", "text": "\nReturns the current state of a joystick button.\n\n"}, {"name": "joystick.Joystick.get_guid", "path": "ref/joystick#pygame.joystick.Joystick.get_guid", "type": "pygame.joystick", "text": "\nGet the GUID string. This identifies the exact hardware of the joystick\ndevice.\n\n"}, {"name": "joystick.Joystick.get_hat", "path": "ref/joystick#pygame.joystick.Joystick.get_hat", "type": "pygame.joystick", "text": "\nReturns the current position of a position hat. The position is given as two\nvalues representing the `x` and `y` position for the hat. `(0, 0)` means\ncentered. A value of `-1` means left/down and a value of `1` means right/up:\nso `(-1, 0)` means left; `(1, 0)` means right; `(0, 1)` means up; `(1, 1)`\nmeans upper-right; etc.\n\n"}, {"name": "joystick.Joystick.get_id", "path": "ref/joystick#pygame.joystick.Joystick.get_id", "type": "pygame.joystick", "text": "\nReturns the original device index for this device. This is the same value that\nwas passed to the `Joystick()` constructor. This method can safely be called\nwhile the Joystick is not initialized.\n\n"}, {"name": "joystick.Joystick.get_init", "path": "ref/joystick#pygame.joystick.Joystick.get_init", "type": "pygame.joystick", "text": "\nReturn True if the Joystick object is currently initialised.\n\n"}, {"name": "joystick.Joystick.get_instance_id", "path": "ref/joystick#pygame.joystick.Joystick.get_instance_id", "type": "pygame.joystick", "text": "\nGet the joystick instance ID. This matches the `instance_id` field that is\ngiven in joystick events.\n\n"}, {"name": "joystick.Joystick.get_name", "path": "ref/joystick#pygame.joystick.Joystick.get_name", "type": "pygame.joystick", "text": "\nReturns the system name for this joystick device. It is unknown what name the\nsystem will give to the Joystick, but it should be a unique name that\nidentifies the device. This method can safely be called while the Joystick is\nnot initialized.\n\n"}, {"name": "joystick.Joystick.get_numaxes", "path": "ref/joystick#pygame.joystick.Joystick.get_numaxes", "type": "pygame.joystick", "text": "\nReturns the number of input axes are on a Joystick. There will usually be two\nfor the position. Controls like rudders and throttles are treated as\nadditional axes.\n\n"}, {"name": "joystick.Joystick.get_numballs", "path": "ref/joystick#pygame.joystick.Joystick.get_numballs", "type": "pygame.joystick", "text": "\nReturns the number of trackball devices on a Joystick. These devices work\nsimilar to a mouse but they have no absolute position; they only have relative\namounts of movement.\n\n"}, {"name": "joystick.Joystick.get_numbuttons", "path": "ref/joystick#pygame.joystick.Joystick.get_numbuttons", "type": "pygame.joystick", "text": "\nReturns the number of pushable buttons on the joystick. These buttons have a\nboolean (on or off) state.\n\n"}, {"name": "joystick.Joystick.get_numhats", "path": "ref/joystick#pygame.joystick.Joystick.get_numhats", "type": "pygame.joystick", "text": "\nReturns the number of joystick hats on a Joystick. Hat devices are like\nminiature digital joysticks on a joystick. Each hat has two axes of input.\n\n"}, {"name": "joystick.Joystick.get_power_level", "path": "ref/joystick#pygame.joystick.Joystick.get_power_level", "type": "pygame.joystick", "text": "\nGet a string giving the power status of the device.\n\n"}, {"name": "joystick.Joystick.init", "path": "ref/joystick#pygame.joystick.Joystick.init", "type": "pygame.joystick", "text": "\nInitialize the joystick, if it has been closed. It is safe to call this even\nif the joystick is already initialized.\n\n"}, {"name": "joystick.Joystick.quit", "path": "ref/joystick#pygame.joystick.Joystick.quit", "type": "pygame.joystick", "text": "\nClose a Joystick object. After this the pygame event queue will no longer\nreceive events from the device.\n\n"}, {"name": "joystick.quit", "path": "ref/joystick#pygame.joystick.quit", "type": "pygame.joystick", "text": "\nUninitialize the joystick module. After you call this any existing joystick\nobjects will no longer work.\n\n"}, {"name": "key", "path": "ref/key", "type": "pygame.key", "text": "\nThis module contains functions for dealing with the keyboard.\n\n"}, {"name": "key.get_focused", "path": "ref/key#pygame.key.get_focused", "type": "pygame.key", "text": "\nReturns `True` when the display window has keyboard focus from the system. If\nthe display needs to ensure it does not lose keyboard focus, it can use\n`pygame.event.set_grab()` to grab all input.\n\n"}, {"name": "key.get_mods", "path": "ref/key#pygame.key.get_mods", "type": "pygame.key", "text": "\nReturns a single integer representing a bitmask of all the modifier keys being\nheld. Using bitwise operators you can test if specific modifier keys are\npressed.\n\n"}, {"name": "key.get_pressed", "path": "ref/key#pygame.key.get_pressed", "type": "pygame.key", "text": "\nReturns a sequence of boolean values representing the state of every key on\nthe keyboard. Use the key constant values to index the array. A `True` value\nmeans the that button is pressed.\n\n"}, {"name": "key.get_repeat", "path": "ref/key#pygame.key.get_repeat", "type": "pygame.key", "text": "\nGet the `delay` and `interval` keyboard repeat values. Refer to\n`pygame.key.set_repeat()` for a description of these values.\n\n"}, {"name": "key.key_code", "path": "ref/key#pygame.key.key_code", "type": "pygame.key", "text": "\nGet the key identifier code from the descriptive name of the key. This returns\nan integer matching one of the K_* keycodes. For example:\n\n"}, {"name": "key.name", "path": "ref/key#pygame.key.name", "type": "pygame.key", "text": "\nGet the descriptive name of the button from a keyboard button id constant.\n\n"}, {"name": "key.set_mods", "path": "ref/key#pygame.key.set_mods", "type": "pygame.key", "text": "\nCreate a bitmask of the modifier key constants you want to impose on your\nprogram.\n\n"}, {"name": "key.set_repeat", "path": "ref/key#pygame.key.set_repeat", "type": "pygame.key", "text": "\nWhen the keyboard repeat is enabled, keys that are held down will generate\nmultiple `pygame.KEYDOWN` events. The `delay` parameter is the number of\nmilliseconds before the first repeated `pygame.KEYDOWN` event will be sent.\nAfter that, another `pygame.KEYDOWN` event will be sent every `interval`\nmilliseconds. If a `delay` value is provided and an `interval` value is not\nprovided or is 0, then the `interval` will be set to the same value as\n`delay`.\n\n"}, {"name": "key.set_text_input_rect", "path": "ref/key#pygame.key.set_text_input_rect", "type": "pygame.key", "text": "\nThis sets the rectangle used for typing with an IME. It controls where the\ncandidate list will open, if supported.\n\n"}, {"name": "key.start_text_input", "path": "ref/key#pygame.key.start_text_input", "type": "pygame.key", "text": "\nStart receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events.\n\n"}, {"name": "key.stop_text_input", "path": "ref/key#pygame.key.stop_text_input", "type": "pygame.key", "text": "\nStop receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events.\n\n"}, {"name": "locals", "path": "ref/locals", "type": "pygame.locals", "text": "\nThis module contains various constants used by pygame. Its contents are\nautomatically placed in the pygame module namespace. However, an application\ncan use `pygame.locals` to include only the pygame constants with a `from\npygame.locals import *`.\n\n"}, {"name": "mask", "path": "ref/mask", "type": "pygame.mask", "text": "\nUseful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel\nto store which parts collide.\n\n"}, {"name": "mask.from_surface", "path": "ref/mask#pygame.mask.from_surface", "type": "pygame.mask", "text": "\nCreates a `Mask` object from the given surface by setting all the opaque\npixels and not setting the transparent pixels.\n\n"}, {"name": "mask.from_threshold", "path": "ref/mask#pygame.mask.from_threshold", "type": "pygame.mask", "text": "\nThis is a more featureful method of getting a `Mask` from a surface.\n\n"}, {"name": "mask.Mask", "path": "ref/mask#pygame.mask.Mask", "type": "pygame.mask", "text": "\nA `Mask` object is used to represent a 2D bitmask. Each bit in the mask\nrepresents a pixel. 1 is used to indicate a set bit and 0 is used to indicate\nan unset bit. Set bits in a mask can be used to detect collisions with other\nmasks and their set bits.\n\n"}, {"name": "mask.Mask.angle", "path": "ref/mask#pygame.mask.Mask.angle", "type": "pygame.mask", "text": "\nFinds the approximate orientation (from -90 to 90 degrees) of the set bits in\nthe mask. This works best if performed on a mask with only one connected\ncomponent.\n\n"}, {"name": "mask.Mask.centroid", "path": "ref/mask#pygame.mask.Mask.centroid", "type": "pygame.mask", "text": "\nFinds the centroid (the center mass of the set bits) for this mask.\n\n"}, {"name": "mask.Mask.clear", "path": "ref/mask#pygame.mask.Mask.clear", "type": "pygame.mask", "text": "\nSets all bits in the mask to 0.\n\n"}, {"name": "mask.Mask.connected_component", "path": "ref/mask#pygame.mask.Mask.connected_component", "type": "pygame.mask", "text": "\nA connected component is a group (1 or more) of connected set bits\n(orthogonally and diagonally). The SAUF algorithm, which checks 8 point\nconnectivity, is used to find a connected component in the mask.\n\n"}, {"name": "mask.Mask.connected_components", "path": "ref/mask#pygame.mask.Mask.connected_components", "type": "pygame.mask", "text": "\nProvides a list containing a `Mask` object for each connected component.\n\n"}, {"name": "mask.Mask.convolve", "path": "ref/mask#pygame.mask.Mask.convolve", "type": "pygame.mask", "text": "\nConvolve this mask with the given `othermask`.\n\n"}, {"name": "mask.Mask.copy", "path": "ref/mask#pygame.mask.Mask.copy", "type": "pygame.mask", "text": "\nNote\n\n"}, {"name": "mask.Mask.count", "path": "ref/mask#pygame.mask.Mask.count", "type": "pygame.mask", "text": "\n\n"}, {"name": "mask.Mask.draw", "path": "ref/mask#pygame.mask.Mask.draw", "type": "pygame.mask", "text": "\nPerforms a bitwise OR, drawing `othermask` onto this mask.\n\n"}, {"name": "mask.Mask.erase", "path": "ref/mask#pygame.mask.Mask.erase", "type": "pygame.mask", "text": "\nErases (clears) all bits set in `othermask` from this mask.\n\n"}, {"name": "mask.Mask.fill", "path": "ref/mask#pygame.mask.Mask.fill", "type": "pygame.mask", "text": "\nSets all bits in the mask to 1.\n\n"}, {"name": "mask.Mask.get_at", "path": "ref/mask#pygame.mask.Mask.get_at", "type": "pygame.mask", "text": "\n\n"}, {"name": "mask.Mask.get_bounding_rects", "path": "ref/mask#pygame.mask.Mask.get_bounding_rects", "type": "pygame.mask", "text": "\nProvides a list containing a bounding rect for each connected component.\n\n"}, {"name": "mask.Mask.get_rect", "path": "ref/mask#pygame.mask.Mask.get_rect", "type": "pygame.mask", "text": "\nReturns a new `pygame.Rect()` object based on the size of this mask. The\nrect's default position will be `(0, 0)` and its default width and height will\nbe the same as this mask's. The rect's attributes can be altered via\n`pygame.Rect()` attribute keyword arguments/values passed into this method. As\nan example, `a_mask.get_rect(center=(10, 5))` would create a `pygame.Rect()`\nbased on the mask's size centered at the given position.\n\n"}, {"name": "mask.Mask.get_size", "path": "ref/mask#pygame.mask.Mask.get_size", "type": "pygame.mask", "text": "\n\n"}, {"name": "mask.Mask.invert", "path": "ref/mask#pygame.mask.Mask.invert", "type": "pygame.mask", "text": "\nFlips all of the bits in the mask. All the set bits are cleared to 0 and all\nthe unset bits are set to 1.\n\n"}, {"name": "mask.Mask.outline", "path": "ref/mask#pygame.mask.Mask.outline", "type": "pygame.mask", "text": "\nReturns a list of points of the outline of the first connected component\nencountered in the mask. To find a connected component, the mask is searched\nper row (left to right) starting in the top left corner.\n\n"}, {"name": "mask.Mask.overlap", "path": "ref/mask#pygame.mask.Mask.overlap", "type": "pygame.mask", "text": "\nReturns the first point of intersection encountered between this mask and\n`othermask`. A point of intersection is 2 overlapping set bits.\n\n"}, {"name": "mask.Mask.overlap_area", "path": "ref/mask#pygame.mask.Mask.overlap_area", "type": "pygame.mask", "text": "\nReturns the number of overlapping set bits between between this mask and\n`othermask`.\n\n"}, {"name": "mask.Mask.overlap_mask", "path": "ref/mask#pygame.mask.Mask.overlap_mask", "type": "pygame.mask", "text": "\nReturns a `Mask`, the same size as this mask, containing the overlapping set\nbits between this mask and `othermask`.\n\n"}, {"name": "mask.Mask.scale", "path": "ref/mask#pygame.mask.Mask.scale", "type": "pygame.mask", "text": "\nCreates a new `Mask` of the requested size with its bits scaled from this\nmask.\n\n"}, {"name": "mask.Mask.set_at", "path": "ref/mask#pygame.mask.Mask.set_at", "type": "pygame.mask", "text": "\n`None`\n\n"}, {"name": "mask.Mask.to_surface", "path": "ref/mask#pygame.mask.Mask.to_surface", "type": "pygame.mask", "text": "\nDraws this mask on the given surface. Set bits (bits set to 1) and unset bits\n(bits set to 0) can be drawn onto a surface.\n\n"}, {"name": "math", "path": "ref/math", "type": "pygame.math", "text": "\nThe pygame math module currently provides Vector classes in two and three\ndimensions, `Vector2` and `Vector3` respectively.\n\n"}, {"name": "math.disable_swizzling", "path": "ref/math#pygame.math.disable_swizzling", "type": "pygame.math", "text": "\nDEPRECATED: Not needed anymore. Will be removed in a later version.\n\n"}, {"name": "math.enable_swizzling", "path": "ref/math#pygame.math.enable_swizzling", "type": "pygame.math", "text": "\nDEPRECATED: Not needed anymore. Will be removed in a later version.\n\n"}, {"name": "math.Vector2", "path": "ref/math#pygame.math.Vector2", "type": "pygame.math", "text": "\nSome general information about the `Vector2` class.\n\n"}, {"name": "math.Vector2.angle_to", "path": "ref/math#pygame.math.Vector2.angle_to", "type": "pygame.math", "text": "\nReturns the angle between self and the given vector.\n\n"}, {"name": "math.Vector2.as_polar", "path": "ref/math#pygame.math.Vector2.as_polar", "type": "pygame.math", "text": "\nReturns a tuple `(r, phi)` where r is the radial distance, and phi is the\nazimuthal angle.\n\n"}, {"name": "math.Vector2.cross", "path": "ref/math#pygame.math.Vector2.cross", "type": "pygame.math", "text": "\ncalculates the third component of the cross-product.\n\n"}, {"name": "math.Vector2.distance_squared_to", "path": "ref/math#pygame.math.Vector2.distance_squared_to", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector2.distance_to", "path": "ref/math#pygame.math.Vector2.distance_to", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector2.dot", "path": "ref/math#pygame.math.Vector2.dot", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector2.elementwise", "path": "ref/math#pygame.math.Vector2.elementwise", "type": "pygame.math", "text": "\nApplies the following operation to each element of the vector.\n\n"}, {"name": "math.Vector2.from_polar", "path": "ref/math#pygame.math.Vector2.from_polar", "type": "pygame.math", "text": "\nSets x and y from a tuple (r, phi) where r is the radial distance, and phi is\nthe azimuthal angle.\n\n"}, {"name": "math.Vector2.is_normalized", "path": "ref/math#pygame.math.Vector2.is_normalized", "type": "pygame.math", "text": "\nReturns True if the vector has `length` equal to `1`. Otherwise it returns\n`False`.\n\n"}, {"name": "math.Vector2.length", "path": "ref/math#pygame.math.Vector2.length", "type": "pygame.math", "text": "\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length() == math.sqrt(vec.x**2 + vec.y**2)`\n\n"}, {"name": "math.Vector2.length_squared", "path": "ref/math#pygame.math.Vector2.length_squared", "type": "pygame.math", "text": "\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length_squared() == vec.x**2 + vec.y**2`. This is\nfaster than `vec.length()` because it avoids the square root.\n\n"}, {"name": "math.Vector2.lerp", "path": "ref/math#pygame.math.Vector2.lerp", "type": "pygame.math", "text": "\nReturns a Vector which is a linear interpolation between self and the given\nVector. The second parameter determines how far between self and other the\nresult is going to be. It must be a value between `0` and `1` where `0` means\nself and `1` means other will be returned.\n\n"}, {"name": "math.Vector2.magnitude", "path": "ref/math#pygame.math.Vector2.magnitude", "type": "pygame.math", "text": "\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)`\n\n"}, {"name": "math.Vector2.magnitude_squared", "path": "ref/math#pygame.math.Vector2.magnitude_squared", "type": "pygame.math", "text": "\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude_squared() == vec.x**2 + vec.y**2`. This is faster than\n`vec.magnitude()` because it avoids the square root.\n\n"}, {"name": "math.Vector2.normalize", "path": "ref/math#pygame.math.Vector2.normalize", "type": "pygame.math", "text": "\nReturns a new vector that has `length` equal to `1` and the same direction as\nself.\n\n"}, {"name": "math.Vector2.normalize_ip", "path": "ref/math#pygame.math.Vector2.normalize_ip", "type": "pygame.math", "text": "\nNormalizes the vector so that it has `length` equal to `1`. The direction of\nthe vector is not changed.\n\n"}, {"name": "math.Vector2.reflect", "path": "ref/math#pygame.math.Vector2.reflect", "type": "pygame.math", "text": "\nReturns a new vector that points in the direction as if self would bounce of a\nsurface characterized by the given surface normal. The length of the new\nvector is the same as self's.\n\n"}, {"name": "math.Vector2.reflect_ip", "path": "ref/math#pygame.math.Vector2.reflect_ip", "type": "pygame.math", "text": "\nChanges the direction of self as if it would have been reflected of a surface\nwith the given surface normal.\n\n"}, {"name": "math.Vector2.rotate", "path": "ref/math#pygame.math.Vector2.rotate", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in degrees.\n\n"}, {"name": "math.Vector2.rotate_ip", "path": "ref/math#pygame.math.Vector2.rotate_ip", "type": "pygame.math", "text": "\nRotates the vector counterclockwise by the given angle in degrees. The length\nof the vector is not changed.\n\n"}, {"name": "math.Vector2.rotate_ip_rad", "path": "ref/math#pygame.math.Vector2.rotate_ip_rad", "type": "pygame.math", "text": "\nRotates the vector counterclockwise by the given angle in radians. The length\nof the vector is not changed.\n\n"}, {"name": "math.Vector2.rotate_rad", "path": "ref/math#pygame.math.Vector2.rotate_rad", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in radians.\n\n"}, {"name": "math.Vector2.scale_to_length", "path": "ref/math#pygame.math.Vector2.scale_to_length", "type": "pygame.math", "text": "\nScales the vector so that it has the given length. The direction of the vector\nis not changed. You can also scale to length `0`. If the vector is the zero\nvector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\n"}, {"name": "math.Vector2.slerp", "path": "ref/math#pygame.math.Vector2.slerp", "type": "pygame.math", "text": "\nCalculates the spherical interpolation from self to the given Vector. The\nsecond argument - often called t - must be in the range `[-1, 1]`. It\nparametrizes where - in between the two vectors - the result should be. If a\nnegative value is given the interpolation will not take the complement of the\nshortest path.\n\n"}, {"name": "math.Vector2.update", "path": "ref/math#pygame.math.Vector2.update", "type": "pygame.math", "text": "\nSets coordinates x and y in place.\n\n"}, {"name": "math.Vector3", "path": "ref/math#pygame.math.Vector3", "type": "pygame.math", "text": "\nSome general information about the Vector3 class.\n\n"}, {"name": "math.Vector3.angle_to", "path": "ref/math#pygame.math.Vector3.angle_to", "type": "pygame.math", "text": "\nReturns the angle between self and the given vector.\n\n"}, {"name": "math.Vector3.as_spherical", "path": "ref/math#pygame.math.Vector3.as_spherical", "type": "pygame.math", "text": "\nReturns a tuple `(r, theta, phi)` where r is the radial distance, theta is the\ninclination angle and phi is the azimuthal angle.\n\n"}, {"name": "math.Vector3.cross", "path": "ref/math#pygame.math.Vector3.cross", "type": "pygame.math", "text": "\ncalculates the cross-product.\n\n"}, {"name": "math.Vector3.distance_squared_to", "path": "ref/math#pygame.math.Vector3.distance_squared_to", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector3.distance_to", "path": "ref/math#pygame.math.Vector3.distance_to", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector3.dot", "path": "ref/math#pygame.math.Vector3.dot", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector3.elementwise", "path": "ref/math#pygame.math.Vector3.elementwise", "type": "pygame.math", "text": "\nApplies the following operation to each element of the vector.\n\n"}, {"name": "math.Vector3.from_spherical", "path": "ref/math#pygame.math.Vector3.from_spherical", "type": "pygame.math", "text": "\nSets x, y and z from a tuple `(r, theta, phi)` where r is the radial distance,\ntheta is the inclination angle and phi is the azimuthal angle.\n\n"}, {"name": "math.Vector3.is_normalized", "path": "ref/math#pygame.math.Vector3.is_normalized", "type": "pygame.math", "text": "\nReturns True if the vector has `length` equal to `1`. Otherwise it returns\n`False`.\n\n"}, {"name": "math.Vector3.length", "path": "ref/math#pygame.math.Vector3.length", "type": "pygame.math", "text": "\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length() == math.sqrt(vec.x**2 + vec.y**2 +\nvec.z**2)`\n\n"}, {"name": "math.Vector3.length_squared", "path": "ref/math#pygame.math.Vector3.length_squared", "type": "pygame.math", "text": "\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2`.\nThis is faster than `vec.length()` because it avoids the square root.\n\n"}, {"name": "math.Vector3.lerp", "path": "ref/math#pygame.math.Vector3.lerp", "type": "pygame.math", "text": "\nReturns a Vector which is a linear interpolation between self and the given\nVector. The second parameter determines how far between self an other the\nresult is going to be. It must be a value between `0` and `1`, where `0` means\nself and `1` means other will be returned.\n\n"}, {"name": "math.Vector3.magnitude", "path": "ref/math#pygame.math.Vector3.magnitude", "type": "pygame.math", "text": "\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)`\n\n"}, {"name": "math.Vector3.magnitude_squared", "path": "ref/math#pygame.math.Vector3.magnitude_squared", "type": "pygame.math", "text": "\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2`. This is faster\nthan `vec.magnitude()` because it avoids the square root.\n\n"}, {"name": "math.Vector3.normalize", "path": "ref/math#pygame.math.Vector3.normalize", "type": "pygame.math", "text": "\nReturns a new vector that has `length` equal to `1` and the same direction as\nself.\n\n"}, {"name": "math.Vector3.normalize_ip", "path": "ref/math#pygame.math.Vector3.normalize_ip", "type": "pygame.math", "text": "\nNormalizes the vector so that it has `length` equal to `1`. The direction of\nthe vector is not changed.\n\n"}, {"name": "math.Vector3.reflect", "path": "ref/math#pygame.math.Vector3.reflect", "type": "pygame.math", "text": "\nReturns a new vector that points in the direction as if self would bounce of a\nsurface characterized by the given surface normal. The length of the new\nvector is the same as self's.\n\n"}, {"name": "math.Vector3.reflect_ip", "path": "ref/math#pygame.math.Vector3.reflect_ip", "type": "pygame.math", "text": "\nChanges the direction of self as if it would have been reflected of a surface\nwith the given surface normal.\n\n"}, {"name": "math.Vector3.rotate", "path": "ref/math#pygame.math.Vector3.rotate", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in degrees around the given axis.\n\n"}, {"name": "math.Vector3.rotate_ip", "path": "ref/math#pygame.math.Vector3.rotate_ip", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the given axis by the given angle\nin degrees. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_ip_rad", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the given axis by the given angle\nin radians. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_rad", "path": "ref/math#pygame.math.Vector3.rotate_rad", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in radians around the given axis.\n\n"}, {"name": "math.Vector3.rotate_x", "path": "ref/math#pygame.math.Vector3.rotate_x", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the x-axis by the given angle in degrees.\n\n"}, {"name": "math.Vector3.rotate_x_ip", "path": "ref/math#pygame.math.Vector3.rotate_x_ip", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the x-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_x_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_x_ip_rad", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the x-axis by the given angle in\nradians. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_x_rad", "path": "ref/math#pygame.math.Vector3.rotate_x_rad", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the x-axis by the given angle in radians.\n\n"}, {"name": "math.Vector3.rotate_y", "path": "ref/math#pygame.math.Vector3.rotate_y", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the y-axis by the given angle in degrees.\n\n"}, {"name": "math.Vector3.rotate_y_ip", "path": "ref/math#pygame.math.Vector3.rotate_y_ip", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the y-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_y_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_y_ip_rad", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the y-axis by the given angle in\nradians. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_y_rad", "path": "ref/math#pygame.math.Vector3.rotate_y_rad", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the y-axis by the given angle in radians.\n\n"}, {"name": "math.Vector3.rotate_z", "path": "ref/math#pygame.math.Vector3.rotate_z", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the z-axis by the given angle in degrees.\n\n"}, {"name": "math.Vector3.rotate_z_ip", "path": "ref/math#pygame.math.Vector3.rotate_z_ip", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the z-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_z_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_z_ip_rad", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the z-axis by the given angle in\nradians. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_z_rad", "path": "ref/math#pygame.math.Vector3.rotate_z_rad", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the z-axis by the given angle in radians.\n\n"}, {"name": "math.Vector3.scale_to_length", "path": "ref/math#pygame.math.Vector3.scale_to_length", "type": "pygame.math", "text": "\nScales the vector so that it has the given length. The direction of the vector\nis not changed. You can also scale to length `0`. If the vector is the zero\nvector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\n"}, {"name": "math.Vector3.slerp", "path": "ref/math#pygame.math.Vector3.slerp", "type": "pygame.math", "text": "\nCalculates the spherical interpolation from self to the given Vector. The\nsecond argument - often called t - must be in the range `[-1, 1]`. It\nparametrizes where - in between the two vectors - the result should be. If a\nnegative value is given the interpolation will not take the complement of the\nshortest path.\n\n"}, {"name": "math.Vector3.update", "path": "ref/math#pygame.math.Vector3.update", "type": "pygame.math", "text": "\nSets coordinates x, y, and z in place.\n\n"}, {"name": "midi", "path": "ref/midi", "type": "pygame.midi", "text": "\nNew in pygame 1.9.0.\n\n"}, {"name": "midi.frequency_to_midi", "path": "ref/midi#pygame.midi.frequency_to_midi", "type": "pygame.midi", "text": "\nexample:\n\n"}, {"name": "midi.get_count", "path": "ref/midi#pygame.midi.get_count", "type": "pygame.midi", "text": "\nDevice ids range from 0 to `get_count() - 1`\n\n"}, {"name": "midi.get_default_input_id", "path": "ref/midi#pygame.midi.get_default_input_id", "type": "pygame.midi", "text": "\nThe following describes the usage details for this function and the\n`get_default_output_id()` function.\n\n"}, {"name": "midi.get_default_output_id", "path": "ref/midi#pygame.midi.get_default_output_id", "type": "pygame.midi", "text": "\nSee `get_default_input_id()` for usage details.\n\n"}, {"name": "midi.get_device_info", "path": "ref/midi#pygame.midi.get_device_info", "type": "pygame.midi", "text": "\nGets the device info for a given id.\n\n"}, {"name": "midi.get_init", "path": "ref/midi#pygame.midi.get_init", "type": "pygame.midi", "text": "\nGets the initialization state of the `pygame.midi` module.\n\n"}, {"name": "midi.init", "path": "ref/midi#pygame.midi.init", "type": "pygame.midi", "text": "\nInitializes the `pygame.midi` module. Must be called before using the\n`pygame.midi` module.\n\n"}, {"name": "midi.Input", "path": "ref/midi#pygame.midi.Input", "type": "pygame.midi", "text": "\nPortMidi attempts to close open streams when the application exits.\n\n"}, {"name": "midi.Input.close", "path": "ref/midi#pygame.midi.Input.close", "type": "pygame.midi", "text": "\nPortMidi attempts to close open streams when the application exits.\n\n"}, {"name": "midi.Input.poll", "path": "ref/midi#pygame.midi.Input.poll", "type": "pygame.midi", "text": "\nUsed to indicate if any data exists.\n\n"}, {"name": "midi.Input.read", "path": "ref/midi#pygame.midi.Input.read", "type": "pygame.midi", "text": "\nReads from the input buffer and gives back midi events.\n\n"}, {"name": "midi.midi_to_ansi_note", "path": "ref/midi#pygame.midi.midi_to_ansi_note", "type": "pygame.midi", "text": "\nexample:\n\n"}, {"name": "midi.midi_to_frequency", "path": "ref/midi#pygame.midi.midi_to_frequency", "type": "pygame.midi", "text": "\nexample:\n\n"}, {"name": "midi.MidiException", "path": "ref/midi#pygame.midi.MidiException", "type": "pygame.midi", "text": "\n\n"}, {"name": "midi.midis2events", "path": "ref/midi#pygame.midi.midis2events", "type": "pygame.midi", "text": "\nTakes a sequence of midi events and returns list of pygame events.\n\n"}, {"name": "midi.Output", "path": "ref/midi#pygame.midi.Output", "type": "pygame.midi", "text": "\nThe `buffer_size` specifies the number of output events to be buffered waiting\nfor output. In some cases (see below) PortMidi does not buffer output at all\nand merely passes data to a lower-level API, in which case buffersize is\nignored.\n\n"}, {"name": "midi.Output.abort", "path": "ref/midi#pygame.midi.Output.abort", "type": "pygame.midi", "text": "\nThe caller should immediately close the output port; this call may result in\ntransmission of a partial midi message. There is no abort for Midi input\nbecause the user can simply ignore messages in the buffer and close an input\ndevice at any time.\n\n"}, {"name": "midi.Output.close", "path": "ref/midi#pygame.midi.Output.close", "type": "pygame.midi", "text": "\nPortMidi attempts to close open streams when the application exits.\n\n"}, {"name": "midi.Output.note_off", "path": "ref/midi#pygame.midi.Output.note_off", "type": "pygame.midi", "text": "\nTurn a note off in the output stream. The note must already be on for this to\nwork correctly.\n\n"}, {"name": "midi.Output.note_on", "path": "ref/midi#pygame.midi.Output.note_on", "type": "pygame.midi", "text": "\nTurn a note on in the output stream. The note must already be off for this to\nwork correctly.\n\n"}, {"name": "midi.Output.pitch_bend", "path": "ref/midi#pygame.midi.Output.pitch_bend", "type": "pygame.midi", "text": "\nAdjust the pitch of a channel. The value is a signed integer from -8192 to\n+8191. For example, 0 means \"no change\", +4096 is typically a semitone higher,\nand -8192 is 1 whole tone lower (though the musical range corresponding to the\npitch bend range can also be changed in some synthesizers).\n\n"}, {"name": "midi.Output.set_instrument", "path": "ref/midi#pygame.midi.Output.set_instrument", "type": "pygame.midi", "text": "\nSelect an instrument.\n\n"}, {"name": "midi.Output.write", "path": "ref/midi#pygame.midi.Output.write", "type": "pygame.midi", "text": "\nWrites series of MIDI information in the form of a list.\n\n"}, {"name": "midi.Output.write_short", "path": "ref/midi#pygame.midi.Output.write_short", "type": "pygame.midi", "text": "\nOutput MIDI information of 3 bytes or less. The `data` fields are optional and\nassumed to be 0 if omitted.\n\n"}, {"name": "midi.Output.write_sys_ex", "path": "ref/midi#pygame.midi.Output.write_sys_ex", "type": "pygame.midi", "text": "\nWrites a timestamped system-exclusive midi message.\n\n"}, {"name": "midi.quit", "path": "ref/midi#pygame.midi.quit", "type": "pygame.midi", "text": "\nUninitializes the `pygame.midi` module. If `pygame.midi.init()` was called to\ninitialize the `pygame.midi` module, then this function will be called\nautomatically when your program exits.\n\n"}, {"name": "midi.time", "path": "ref/midi#pygame.midi.time", "type": "pygame.midi", "text": "\nThe time is reset to 0 when the `pygame.midi` module is initialized.\n\n"}, {"name": "mixer", "path": "ref/mixer", "type": "pygame.mixer", "text": "\nThis module contains classes for loading Sound objects and controlling\nplayback. The mixer module is optional and depends on SDL_mixer. Your program\nshould test that `pygame.mixer` is available and initialized before using it.\n\n"}, {"name": "mixer.Channel", "path": "ref/mixer#pygame.mixer.Channel", "type": "pygame.mixer", "text": "\nReturn a Channel object for one of the current channels. The id must be a\nvalue from 0 to the value of `pygame.mixer.get_num_channels()`.\n\n"}, {"name": "mixer.Channel.fadeout", "path": "ref/mixer#pygame.mixer.Channel.fadeout", "type": "pygame.mixer", "text": "\nStop playback of a channel after fading out the sound over the given time\nargument in milliseconds.\n\n"}, {"name": "mixer.Channel.get_busy", "path": "ref/mixer#pygame.mixer.Channel.get_busy", "type": "pygame.mixer", "text": "\nReturns `True` if the channel is actively mixing sound. If the channel is idle\nthis returns `False`.\n\n"}, {"name": "mixer.Channel.get_endevent", "path": "ref/mixer#pygame.mixer.Channel.get_endevent", "type": "pygame.mixer", "text": "\nReturns the event type to be sent every time the Channel finishes playback of\na Sound. If there is no endevent the function returns `pygame.NOEVENT`.\n\n"}, {"name": "mixer.Channel.get_queue", "path": "ref/mixer#pygame.mixer.Channel.get_queue", "type": "pygame.mixer", "text": "\nIf a Sound is already queued on this channel it will be returned. Once the\nqueued sound begins playback it will no longer be on the queue.\n\n"}, {"name": "mixer.Channel.get_sound", "path": "ref/mixer#pygame.mixer.Channel.get_sound", "type": "pygame.mixer", "text": "\nReturn the actual Sound object currently playing on this channel. If the\nchannel is idle `None` is returned.\n\n"}, {"name": "mixer.Channel.get_volume", "path": "ref/mixer#pygame.mixer.Channel.get_volume", "type": "pygame.mixer", "text": "\nReturn the volume of the channel for the current playing sound. This does not\ntake into account stereo separation used by `Channel.set_volume()`. The Sound\nobject also has its own volume which is mixed with the channel.\n\n"}, {"name": "mixer.Channel.pause", "path": "ref/mixer#pygame.mixer.Channel.pause", "type": "pygame.mixer", "text": "\nTemporarily stop the playback of sound on a channel. It can be resumed at a\nlater time with `Channel.unpause()`\n\n"}, {"name": "mixer.Channel.play", "path": "ref/mixer#pygame.mixer.Channel.play", "type": "pygame.mixer", "text": "\nThis will begin playback of a Sound on a specific Channel. If the Channel is\ncurrently playing any other Sound it will be stopped.\n\n"}, {"name": "mixer.Channel.queue", "path": "ref/mixer#pygame.mixer.Channel.queue", "type": "pygame.mixer", "text": "\nWhen a Sound is queued on a Channel, it will begin playing immediately after\nthe current Sound is finished. Each channel can only have a single Sound\nqueued at a time. The queued Sound will only play if the current playback\nfinished automatically. It is cleared on any other call to `Channel.stop()` or\n`Channel.play()`.\n\n"}, {"name": "mixer.Channel.set_endevent", "path": "ref/mixer#pygame.mixer.Channel.set_endevent", "type": "pygame.mixer", "text": "\nWhen an endevent is set for a channel, it will send an event to the pygame\nqueue every time a sound finishes playing on that channel (not just the first\ntime). Use `pygame.event.get()` to retrieve the endevent once it's sent.\n\n"}, {"name": "mixer.Channel.set_volume", "path": "ref/mixer#pygame.mixer.Channel.set_volume", "type": "pygame.mixer", "text": "\nSet the volume (loudness) of a playing sound. When a channel starts to play\nits volume value is reset. This only affects the current sound. The value\nargument is between 0.0 and 1.0.\n\n"}, {"name": "mixer.Channel.stop", "path": "ref/mixer#pygame.mixer.Channel.stop", "type": "pygame.mixer", "text": "\nStop sound playback on a channel. After playback is stopped the channel\nbecomes available for new Sounds to play on it.\n\n"}, {"name": "mixer.Channel.unpause", "path": "ref/mixer#pygame.mixer.Channel.unpause", "type": "pygame.mixer", "text": "\nResume the playback on a paused channel.\n\n"}, {"name": "mixer.fadeout", "path": "ref/mixer#pygame.mixer.fadeout", "type": "pygame.mixer", "text": "\nThis will fade out the volume on all active channels over the time argument in\nmilliseconds. After the sound is muted the playback will stop.\n\n"}, {"name": "mixer.find_channel", "path": "ref/mixer#pygame.mixer.find_channel", "type": "pygame.mixer", "text": "\nThis will find and return an inactive Channel object. If there are no inactive\nChannels this function will return `None`. If there are no inactive channels\nand the force argument is `True`, this will find the Channel with the longest\nrunning Sound and return it.\n\n"}, {"name": "mixer.get_busy", "path": "ref/mixer#pygame.mixer.get_busy", "type": "pygame.mixer", "text": "\nReturns `True` if the mixer is busy mixing any channels. If the mixer is idle\nthen this return `False`.\n\n"}, {"name": "mixer.get_init", "path": "ref/mixer#pygame.mixer.get_init", "type": "pygame.mixer", "text": "\nIf the mixer is initialized, this returns the playback arguments it is using.\nIf the mixer has not been initialized this returns `None`.\n\n"}, {"name": "mixer.get_num_channels", "path": "ref/mixer#pygame.mixer.get_num_channels", "type": "pygame.mixer", "text": "\nReturns the number of currently active playback channels.\n\n"}, {"name": "mixer.get_sdl_mixer_version", "path": "ref/mixer#pygame.mixer.get_sdl_mixer_version", "type": "pygame.mixer", "text": "\nNote\n\n"}, {"name": "mixer.init", "path": "ref/mixer#pygame.mixer.init", "type": "pygame.mixer", "text": "\nInitialize the mixer module for Sound loading and playback. The default\narguments can be overridden to provide specific audio mixing. Keyword\narguments are accepted. For backward compatibility where an argument is set\nzero the default value is used (possible changed by a pre_init call).\n\n"}, {"name": "mixer.music", "path": "ref/music", "type": "pygame.mixer.music", "text": "\nThe music module is closely tied to `pygame.mixer`. Use the music module to\ncontrol the playback of music in the sound mixer.\n\n"}, {"name": "mixer.music.fadeout", "path": "ref/music#pygame.mixer.music.fadeout", "type": "pygame.mixer.music", "text": "\nFade out and stop the currently playing music.\n\n"}, {"name": "mixer.music.get_busy", "path": "ref/music#pygame.mixer.music.get_busy", "type": "pygame.mixer.music", "text": "\nReturns True when the music stream is actively playing. When the music is idle\nthis returns False. In pygame 2.0.1 and above this function returns False when\nthe music is paused. In pygame 1 it returns True when the music is paused.\n\n"}, {"name": "mixer.music.get_endevent", "path": "ref/music#pygame.mixer.music.get_endevent", "type": "pygame.mixer.music", "text": "\nReturns the event type to be sent every time the music finishes playback. If\nthere is no endevent the function returns `pygame.NOEVENT`.\n\n"}, {"name": "mixer.music.get_pos", "path": "ref/music#pygame.mixer.music.get_pos", "type": "pygame.mixer.music", "text": "\nThis gets the number of milliseconds that the music has been playing for. The\nreturned time only represents how long the music has been playing; it does not\ntake into account any starting position offsets.\n\n"}, {"name": "mixer.music.get_volume", "path": "ref/music#pygame.mixer.music.get_volume", "type": "pygame.mixer.music", "text": "\nReturns the current volume for the mixer. The value will be between `0.0` and\n`1.0`.\n\n"}, {"name": "mixer.music.load", "path": "ref/music#pygame.mixer.music.load", "type": "pygame.mixer.music", "text": "\nThis will load a music filename/file object and prepare it for playback. If a\nmusic stream is already playing it will be stopped. This does not start the\nmusic playing.\n\n"}, {"name": "mixer.music.pause", "path": "ref/music#pygame.mixer.music.pause", "type": "pygame.mixer.music", "text": "\nTemporarily stop playback of the music stream. It can be resumed with the\n`pygame.mixer.music.unpause()` function.\n\n"}, {"name": "mixer.music.play", "path": "ref/music#pygame.mixer.music.play", "type": "pygame.mixer.music", "text": "\nThis will play the loaded music stream. If the music is already playing it\nwill be restarted.\n\n"}, {"name": "mixer.music.queue", "path": "ref/music#pygame.mixer.music.queue", "type": "pygame.mixer.music", "text": "\nThis will load a sound file and queue it. A queued sound file will begin as\nsoon as the current sound naturally ends. Only one sound can be queued at a\ntime. Queuing a new sound while another sound is queued will result in the new\nsound becoming the queued sound. Also, if the current sound is ever stopped or\nchanged, the queued sound will be lost.\n\n"}, {"name": "mixer.music.rewind", "path": "ref/music#pygame.mixer.music.rewind", "type": "pygame.mixer.music", "text": "\nResets playback of the current music to the beginning.\n\n"}, {"name": "mixer.music.set_endevent", "path": "ref/music#pygame.mixer.music.set_endevent", "type": "pygame.mixer.music", "text": "\nThis causes pygame to signal (by means of the event queue) when the music is\ndone playing. The argument determines the type of event that will be queued.\n\n"}, {"name": "mixer.music.set_pos", "path": "ref/music#pygame.mixer.music.set_pos", "type": "pygame.mixer.music", "text": "\nThis sets the position in the music file where playback will start. The\nmeaning of \"pos\", a float (or a number that can be converted to a float),\ndepends on the music format.\n\n"}, {"name": "mixer.music.set_volume", "path": "ref/music#pygame.mixer.music.set_volume", "type": "pygame.mixer.music", "text": "\nSet the volume of the music playback.\n\n"}, {"name": "mixer.music.stop", "path": "ref/music#pygame.mixer.music.stop", "type": "pygame.mixer.music", "text": "\nStops the music playback if it is currently playing. It Won't Unload the\nmusic.\n\n"}, {"name": "mixer.music.unload", "path": "ref/music#pygame.mixer.music.unload", "type": "pygame.mixer.music", "text": "\nThis closes resources like files for any music that may be loaded.\n\n"}, {"name": "mixer.music.unpause", "path": "ref/music#pygame.mixer.music.unpause", "type": "pygame.mixer.music", "text": "\nThis will resume the playback of a music stream after it has been paused.\n\n"}, {"name": "mixer.pause", "path": "ref/mixer#pygame.mixer.pause", "type": "pygame.mixer", "text": "\nThis will temporarily stop all playback on the active mixer channels. The\nplayback can later be resumed with `pygame.mixer.unpause()`\n\n"}, {"name": "mixer.pre_init", "path": "ref/mixer#pygame.mixer.pre_init", "type": "pygame.mixer", "text": "\nCall pre_init to change the defaults used when the real `pygame.mixer.init()`\nis called. Keyword arguments are accepted. The best way to set custom mixer\nplayback values is to call `pygame.mixer.pre_init()` before calling the top\nlevel `pygame.init()`. For backward compatibility argument values of zero are\nreplaced with the startup defaults.\n\n"}, {"name": "mixer.quit", "path": "ref/mixer#pygame.mixer.quit", "type": "pygame.mixer", "text": "\nThis will uninitialize `pygame.mixer`. All playback will stop and any loaded\nSound objects may not be compatible with the mixer if it is reinitialized\nlater.\n\n"}, {"name": "mixer.set_num_channels", "path": "ref/mixer#pygame.mixer.set_num_channels", "type": "pygame.mixer", "text": "\nSets the number of available channels for the mixer. The default value is 8.\nThe value can be increased or decreased. If the value is decreased, sounds\nplaying on the truncated channels are stopped.\n\n"}, {"name": "mixer.set_reserved", "path": "ref/mixer#pygame.mixer.set_reserved", "type": "pygame.mixer", "text": "\nThe mixer can reserve any number of channels that will not be automatically\nselected for playback by Sounds. If sounds are currently playing on the\nreserved channels they will not be stopped.\n\n"}, {"name": "mixer.Sound", "path": "ref/mixer#pygame.mixer.Sound", "type": "pygame.mixer", "text": "\nLoad a new sound buffer from a filename, a python file object or a readable\nbuffer object. Limited resampling will be performed to help the sample match\nthe initialize arguments for the mixer. A Unicode string can only be a file\npathname. A Python 2.x string or a Python 3.x bytes object can be either a\npathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid\nambiguity; otherwise Sound may guess wrong. If the array keyword is used, the\nobject is expected to export a version 3, `C` level array interface or, for\nPython 2.6 or later, a new buffer interface (The object is checked for a\nbuffer interface first.)\n\n"}, {"name": "mixer.Sound.fadeout", "path": "ref/mixer#pygame.mixer.Sound.fadeout", "type": "pygame.mixer", "text": "\nThis will stop playback of the sound after fading it out over the time\nargument in milliseconds. The Sound will fade and stop on all actively playing\nchannels.\n\n"}, {"name": "mixer.Sound.get_length", "path": "ref/mixer#pygame.mixer.Sound.get_length", "type": "pygame.mixer", "text": "\nReturn the length of this Sound in seconds.\n\n"}, {"name": "mixer.Sound.get_num_channels", "path": "ref/mixer#pygame.mixer.Sound.get_num_channels", "type": "pygame.mixer", "text": "\nReturn the number of active channels this sound is playing on.\n\n"}, {"name": "mixer.Sound.get_raw", "path": "ref/mixer#pygame.mixer.Sound.get_raw", "type": "pygame.mixer", "text": "\nReturn a copy of the Sound object buffer as a bytes (for Python 3.x) or str\n(for Python 2.x) object.\n\n"}, {"name": "mixer.Sound.get_volume", "path": "ref/mixer#pygame.mixer.Sound.get_volume", "type": "pygame.mixer", "text": "\nReturn a value from 0.0 to 1.0 representing the volume for this Sound.\n\n"}, {"name": "mixer.Sound.play", "path": "ref/mixer#pygame.mixer.Sound.play", "type": "pygame.mixer", "text": "\nBegin playback of the Sound (i.e., on the computer's speakers) on an available\nChannel. This will forcibly select a Channel, so playback may cut off a\ncurrently playing sound if necessary.\n\n"}, {"name": "mixer.Sound.set_volume", "path": "ref/mixer#pygame.mixer.Sound.set_volume", "type": "pygame.mixer", "text": "\nThis will set the playback volume (loudness) for this Sound. This will\nimmediately affect the Sound if it is playing. It will also affect any future\nplayback of this Sound.\n\n"}, {"name": "mixer.Sound.stop", "path": "ref/mixer#pygame.mixer.Sound.stop", "type": "pygame.mixer", "text": "\nThis will stop the playback of this Sound on any active Channels.\n\n"}, {"name": "mixer.stop", "path": "ref/mixer#pygame.mixer.stop", "type": "pygame.mixer", "text": "\nThis will stop all playback of all active mixer channels.\n\n"}, {"name": "mixer.unpause", "path": "ref/mixer#pygame.mixer.unpause", "type": "pygame.mixer", "text": "\nThis will resume all active sound channels after they have been paused.\n\n"}, {"name": "module-_sdl2.touch", "path": "ref/touch", "type": "pygame._sdl2.touch", "text": "\nNew in pygame 2: This module requires SDL2.\n\n"}, {"name": "module-camera", "path": "ref/camera", "type": "pygame.camera", "text": "\nPygame currently supports only Linux and v4l2 cameras.\n\n"}, {"name": "module-cdrom", "path": "ref/cdrom", "type": "pygame.cdrom", "text": "\nThe cdrom module manages the `CD` and `DVD` drives on a computer. It can also\ncontrol the playback of audio CDs. This module needs to be initialized before\nit can do anything. Each `CD` object you create represents a cdrom drive and\nmust also be initialized individually before it can do most things.\n\n"}, {"name": "module-cursors", "path": "ref/cursors", "type": "pygame.cursors", "text": "\nPygame offers control over the system hardware cursor. Pygame only supports\nblack and white cursors for the system. You control the cursor with functions\ninside `pygame.mouse`.\n\n"}, {"name": "module-display", "path": "ref/display", "type": "pygame.display", "text": "\nThis module offers control over the pygame display. Pygame has a single\ndisplay Surface that is either contained in a window or runs full screen. Once\nyou create the display you treat it as a regular Surface. Changes are not\nimmediately visible onscreen; you must choose one of the two flipping\nfunctions to update the actual display.\n\n"}, {"name": "module-draw", "path": "ref/draw", "type": "pygame.draw", "text": "\nDraw several simple shapes to a surface. These functions will work for\nrendering to any format of surface. Rendering to hardware surfaces will be\nslower than regular software surfaces.\n\n"}, {"name": "module-event", "path": "ref/event", "type": "pygame.event", "text": "\nPygame handles all its event messaging through an event queue. The routines in\nthis module help you manage that event queue. The input queue is heavily\ndependent on the `pygame.display` module. If the display has not been\ninitialized and a video mode not set, the event queue may not work properly.\nThe event subsystem should be called from the main thread. If you want to post\nevents into the queue from other threads, please use the `pygame.fastevent`\nmodule.\n\n"}, {"name": "module-examples", "path": "ref/examples", "type": "pygame.examples", "text": "\nThese examples should help get you started with pygame. Here is a brief\nrundown of what you get. The source code for these examples is in the public\ndomain. Feel free to use for your own projects.\n\n"}, {"name": "module-fastevent", "path": "ref/fastevent", "type": "pygame.fastevent", "text": "\npygame.fastevent is a wrapper for Bob Pendleton's fastevent library. It\nprovides fast events for use in multithreaded environments. When using\npygame.fastevent, you can not use any of the pump, wait, poll, post, get,\npeek, etc. functions from pygame.event, but you should use the Event objects.\n\n"}, {"name": "module-font", "path": "ref/font", "type": "pygame.font", "text": "\nThe font module allows for rendering TrueType fonts into a new Surface object.\nIt accepts any UCS-2 character ('u0001' to 'uFFFF'). This module is optional\nand requires SDL_ttf as a dependency. You should test that `pygame.font` is\navailable and initialized before attempting to use the module.\n\n"}, {"name": "module-freetype", "path": "ref/freetype", "type": "pygame.freetype", "text": "\nThe `pygame.freetype` module is a replacement for `pygame.font`. It has all of\nthe functionality of the original, plus many new features. Yet is has\nabsolutely no dependencies on the SDL_ttf library. It is implemented directly\non the FreeType 2 library. The `pygame.freetype` module is not itself backward\ncompatible with `pygame.font`. Instead, use the `pygame.ftfont` module as a\ndrop-in replacement for `pygame.font`.\n\n"}, {"name": "module-gfxdraw", "path": "ref/gfxdraw", "type": "pygame.gfxdraw", "text": "\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code may break with the next pygame release.\n\n"}, {"name": "module-image", "path": "ref/image", "type": "pygame.image", "text": "\nThe image module contains functions for loading and saving pictures, as well\nas transferring Surfaces to formats usable by other packages.\n\n"}, {"name": "module-joystick", "path": "ref/joystick", "type": "pygame.joystick", "text": "\nThe joystick module manages the joystick devices on a computer. Joystick\ndevices include trackballs and video-game-style gamepads, and the module\nallows the use of multiple buttons and \"hats\". Computers may manage multiple\njoysticks at a time.\n\n"}, {"name": "module-key", "path": "ref/key", "type": "pygame.key", "text": "\nThis module contains functions for dealing with the keyboard.\n\n"}, {"name": "module-locals", "path": "ref/locals", "type": "pygame.locals", "text": "\nThis module contains various constants used by pygame. Its contents are\nautomatically placed in the pygame module namespace. However, an application\ncan use `pygame.locals` to include only the pygame constants with a `from\npygame.locals import *`.\n\n"}, {"name": "module-mask", "path": "ref/mask", "type": "pygame.mask", "text": "\nUseful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel\nto store which parts collide.\n\n"}, {"name": "module-math", "path": "ref/math", "type": "pygame.math", "text": "\nThe pygame math module currently provides Vector classes in two and three\ndimensions, `Vector2` and `Vector3` respectively.\n\n"}, {"name": "module-midi", "path": "ref/midi", "type": "pygame.midi", "text": "\nNew in pygame 1.9.0.\n\n"}, {"name": "module-mixer", "path": "ref/mixer", "type": "pygame.mixer", "text": "\nThis module contains classes for loading Sound objects and controlling\nplayback. The mixer module is optional and depends on SDL_mixer. Your program\nshould test that `pygame.mixer` is available and initialized before using it.\n\n"}, {"name": "module-mixer.music", "path": "ref/music", "type": "pygame.mixer.music", "text": "\nThe music module is closely tied to `pygame.mixer`. Use the music module to\ncontrol the playback of music in the sound mixer.\n\n"}, {"name": "module-mouse", "path": "ref/mouse", "type": "pygame.mouse", "text": "\nThe mouse functions can be used to get the current state of the mouse device.\nThese functions can also alter the system cursor for the mouse.\n\n"}, {"name": "module-pixelcopy", "path": "ref/pixelcopy", "type": "pygame.pixelcopy", "text": "\nThe `pygame.pixelcopy` module contains functions for copying between surfaces\nand objects exporting an array structure interface. It is a backend for\n`pygame.surfarray`, adding NumPy support. But pixelcopy is more general, and\nintended for direct use.\n\n"}, {"name": "module-pygame", "path": "ref/pygame", "type": "pygame", "text": "\nThe pygame package represents the top-level package for others to use. Pygame\nitself is broken into many submodules, but this does not affect programs that\nuse pygame.\n\n"}, {"name": "module-scrap", "path": "ref/scrap", "type": "pygame.scrap", "text": "\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code may break with the next pygame release.\n\n"}, {"name": "module-sndarray", "path": "ref/sndarray", "type": "pygame.sndarray", "text": "\nFunctions to convert between NumPy arrays and Sound objects. This module will\nonly be available when pygame can use the external NumPy package.\n\n"}, {"name": "module-sprite", "path": "ref/sprite", "type": "pygame.sprite", "text": "\nThis module contains several simple classes to be used within games. There is\nthe main Sprite class and several Group classes that contain Sprites. The use\nof these classes is entirely optional when using pygame. The classes are\nfairly lightweight and only provide a starting place for the code that is\ncommon to most games.\n\n"}, {"name": "module-surfarray", "path": "ref/surfarray", "type": "pygame.surfarray", "text": "\nFunctions to convert pixel data between pygame Surfaces and arrays. This\nmodule will only be functional when pygame can use the external NumPy package.\n\n"}, {"name": "module-tests", "path": "ref/tests", "type": "pygame.tests", "text": "\nA quick way to run the test suite package from the command line is to import\nthe go submodule with the Python -m option:\n\n"}, {"name": "module-time", "path": "ref/time", "type": "pygame.time", "text": "\nTimes in pygame are represented in milliseconds (1/1000 seconds). Most\nplatforms have a limited time resolution of around 10 milliseconds. This\nresolution, in milliseconds, is given in the `TIMER_RESOLUTION` constant.\n\n"}, {"name": "module-transform", "path": "ref/transform", "type": "pygame.transform", "text": "\nA Surface transform is an operation that moves or resizes the pixels. All\nthese functions take a Surface to operate on and return a new Surface with the\nresults.\n\n"}, {"name": "module-version", "path": "ref/pygame", "type": "pygame", "text": "\nThe pygame package represents the top-level package for others to use. Pygame\nitself is broken into many submodules, but this does not affect programs that\nuse pygame.\n\n"}, {"name": "mouse", "path": "ref/mouse", "type": "pygame.mouse", "text": "\nThe mouse functions can be used to get the current state of the mouse device.\nThese functions can also alter the system cursor for the mouse.\n\n"}, {"name": "mouse.get_cursor", "path": "ref/mouse#pygame.mouse.get_cursor", "type": "pygame.mouse", "text": "\nGet the information about the mouse system cursor. The return value is the\nsame data as the arguments passed into `pygame.mouse.set_cursor()`.\n\n"}, {"name": "mouse.get_focused", "path": "ref/mouse#pygame.mouse.get_focused", "type": "pygame.mouse", "text": "\nReturns true when pygame is receiving mouse input events (or, in windowing\nterminology, is \"active\" or has the \"focus\").\n\n"}, {"name": "mouse.get_pos", "path": "ref/mouse#pygame.mouse.get_pos", "type": "pygame.mouse", "text": "\nReturns the `x` and `y` position of the mouse cursor. The position is relative\nto the top-left corner of the display. The cursor position can be located\noutside of the display window, but is always constrained to the screen.\n\n"}, {"name": "mouse.get_pressed", "path": "ref/mouse#pygame.mouse.get_pressed", "type": "pygame.mouse", "text": "\nReturns a sequence of booleans representing the state of all the mouse\nbuttons. A true value means the mouse is currently being pressed at the time\nof the call.\n\n"}, {"name": "mouse.get_rel", "path": "ref/mouse#pygame.mouse.get_rel", "type": "pygame.mouse", "text": "\nReturns the amount of movement in `x` and `y` since the previous call to this\nfunction. The relative movement of the mouse cursor is constrained to the\nedges of the screen, but see the virtual input mouse mode for a way around\nthis. Virtual input mode is described at the top of the page.\n\n"}, {"name": "mouse.get_visible", "path": "ref/mouse#pygame.mouse.get_visible", "type": "pygame.mouse", "text": "\nGet the current visibility state of the mouse cursor. `True` if the mouse is\nvisible, `False` otherwise.\n\n"}, {"name": "mouse.set_cursor", "path": "ref/mouse#pygame.mouse.set_cursor", "type": "pygame.mouse", "text": "\nWhen the mouse cursor is visible, it will be displayed as a black and white\nbitmap using the given bitmask arrays. The `size` is a sequence containing the\ncursor width and height. `hotspot` is a sequence containing the cursor hotspot\nposition.\n\n"}, {"name": "mouse.set_pos", "path": "ref/mouse#pygame.mouse.set_pos", "type": "pygame.mouse", "text": "\nSet the current mouse position to arguments given. If the mouse cursor is\nvisible it will jump to the new coordinates. Moving the mouse will generate a\nnew `pygame.MOUSEMOTION` event.\n\n"}, {"name": "mouse.set_system_cursor", "path": "ref/mouse#pygame.mouse.set_system_cursor", "type": "pygame.mouse", "text": "\nWhen the mouse cursor is visible, it will displayed as a operating system\nspecific variant of the options below.\n\n"}, {"name": "mouse.set_visible", "path": "ref/mouse#pygame.mouse.set_visible", "type": "pygame.mouse", "text": "\nIf the bool argument is true, the mouse cursor will be visible. This will\nreturn the previous visible state of the cursor.\n\n"}, {"name": "Overlay", "path": "ref/overlay", "type": "pygame.Overlay", "text": "\nThe Overlay objects provide support for accessing hardware video overlays.\nVideo overlays do not use standard `RGB` pixel formats, and can use multiple\nresolutions of data to create a single image.\n\n"}, {"name": "Overlay.display", "path": "ref/overlay#pygame.Overlay.display", "type": "pygame.Overlay", "text": "\nDisplay the YUV data in SDL's overlay planes. The y, u, and v arguments are\nstrings of binary data. The data must be in the correct format used to create\nthe Overlay.\n\n"}, {"name": "Overlay.get_hardware", "path": "ref/overlay#pygame.Overlay.get_hardware", "type": "pygame.Overlay", "text": "\nReturns a True value when the Overlay is hardware accelerated. If the platform\ndoes not support acceleration, software rendering is used.\n\n"}, {"name": "Overlay.set_location", "path": "ref/overlay#pygame.Overlay.set_location", "type": "pygame.Overlay", "text": "\nSet the location for the overlay. The overlay will always be shown relative to\nthe main display Surface. This does not actually redraw the overlay, it will\nbe updated on the next call to `Overlay.display()`.\n\n"}, {"name": "PixelArray", "path": "ref/pixelarray", "type": "pygame.PixelArray", "text": "\nThe PixelArray wraps a Surface and provides direct access to the surface's\npixels. A pixel array can be one or two dimensional. A two dimensional array,\nlike its surface, is indexed [column, row]. Pixel arrays support slicing, both\nfor returning a subarray or for assignment. A pixel array sliced on a single\ncolumn or row returns a one dimensional pixel array. Arithmetic and other\noperations are not supported. A pixel array can be safely assigned to itself.\nFinally, pixel arrays export an array struct interface, allowing them to\ninteract with `pygame.pixelcopy` methods and NumPy arrays.\n\n"}, {"name": "PixelArray.close", "path": "ref/pixelarray#pygame.PixelArray.close", "type": "pygame.PixelArray", "text": "\nThis method is for explicitly closing the PixelArray, and releasing a lock on\nthe Suface.\n\n"}, {"name": "PixelArray.compare", "path": "ref/pixelarray#pygame.PixelArray.compare", "type": "pygame.PixelArray", "text": "\nCompares the contents of the PixelArray with those from the passed in\nPixelArray. It returns a new PixelArray with a black/white color mask that\nindicates the differences (black) of both arrays. Both PixelArray objects must\nhave identical bit depths and dimensions.\n\n"}, {"name": "PixelArray.extract", "path": "ref/pixelarray#pygame.PixelArray.extract", "type": "pygame.PixelArray", "text": "\nExtracts the passed color by changing all matching pixels to white, while non-\nmatching pixels are changed to black. This returns a new PixelArray with the\nblack/white color mask.\n\n"}, {"name": "PixelArray.itemsize", "path": "ref/pixelarray#pygame.PixelArray.itemsize", "type": "pygame.PixelArray", "text": "\nThis is the same as `Surface.get_bytesize()` for the pixel array's surface.\n\n"}, {"name": "PixelArray.make_surface", "path": "ref/pixelarray#pygame.PixelArray.make_surface", "type": "pygame.PixelArray", "text": "\nCreates a new Surface from the current PixelArray. Depending on the current\nPixelArray the size, pixel order etc. will be different from the original\nSurface.\n\n"}, {"name": "PixelArray.ndim", "path": "ref/pixelarray#pygame.PixelArray.ndim", "type": "pygame.PixelArray", "text": "\nA pixel array can be 1 or 2 dimensional.\n\n"}, {"name": "PixelArray.replace", "path": "ref/pixelarray#pygame.PixelArray.replace", "type": "pygame.PixelArray", "text": "\nReplaces the pixels with the passed color in the PixelArray by changing them\nthem to the passed replacement color.\n\n"}, {"name": "PixelArray.shape", "path": "ref/pixelarray#pygame.PixelArray.shape", "type": "pygame.PixelArray", "text": "\nA tuple or length `ndim` giving the length of each dimension. Analogous to\n`Surface.get_size()`.\n\n"}, {"name": "PixelArray.strides", "path": "ref/pixelarray#pygame.PixelArray.strides", "type": "pygame.PixelArray", "text": "\nA tuple or length `ndim` byte counts. When a stride is multiplied by the\ncorresponding index it gives the offset of that index from the start of the\narray. A stride is negative for an array that has is inverted (has a negative\nstep).\n\n"}, {"name": "PixelArray.surface", "path": "ref/pixelarray#pygame.PixelArray.surface", "type": "pygame.PixelArray", "text": "\nThe Surface the PixelArray was created for.\n\n"}, {"name": "PixelArray.transpose", "path": "ref/pixelarray#pygame.PixelArray.transpose", "type": "pygame.PixelArray", "text": "\nThis method returns a new view of the pixel array with the rows and columns\nswapped. So for a (w, h) sized array a (h, w) slice is returned. If an array\nis one dimensional, then a length 1 x dimension is added, resulting in a 2D\npixel array.\n\n"}, {"name": "pixelcopy", "path": "ref/pixelcopy", "type": "pygame.pixelcopy", "text": "\nThe `pygame.pixelcopy` module contains functions for copying between surfaces\nand objects exporting an array structure interface. It is a backend for\n`pygame.surfarray`, adding NumPy support. But pixelcopy is more general, and\nintended for direct use.\n\n"}, {"name": "pixelcopy.array_to_surface", "path": "ref/pixelcopy#pygame.pixelcopy.array_to_surface", "type": "pygame.pixelcopy", "text": "\nSee `pygame.surfarray.blit_array()`.\n\n"}, {"name": "pixelcopy.make_surface", "path": "ref/pixelcopy#pygame.pixelcopy.make_surface", "type": "pygame.pixelcopy", "text": "\nCreate a new Surface that best resembles the data and format of the array. The\narray can be 2D or 3D with any sized integer values.\n\n"}, {"name": "pixelcopy.map_array", "path": "ref/pixelcopy#pygame.pixelcopy.map_array", "type": "pygame.pixelcopy", "text": "\nMap an array of color element values - (w, h, ..., 3) - to an array of pixels\n- (w, h) according to the format of <surface>.\n\n"}, {"name": "pixelcopy.surface_to_array", "path": "ref/pixelcopy#pygame.pixelcopy.surface_to_array", "type": "pygame.pixelcopy", "text": "\nThe surface_to_array function copies pixels from a Surface object to a 2D or\n3D array. Depending on argument `kind` and the target array dimension, a copy\nmay be raw pixel value, RGB, a color component slice, or colorkey alpha\ntransparency value. Recognized `kind` values are the single character codes\n'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case insensitive, so 'p' is\nequivalent to 'P'. The first two dimensions of the target must be the surface\nsize (w, h).\n\n"}, {"name": "pygame", "path": "ref/pygame", "type": "pygame", "text": "\nThe pygame package represents the top-level package for others to use. Pygame\nitself is broken into many submodules, but this does not affect programs that\nuse pygame.\n\n"}, {"name": "quit", "path": "ref/pygame#pygame.quit", "type": "pygame", "text": "\nUninitialize all pygame modules that have previously been initialized. When\nthe Python interpreter shuts down, this method is called regardless, so your\nprogram should not need it, except when it wants to terminate its pygame\nresources and continue. It is safe to call this function more than once as\nrepeated calls have no effect.\n\n"}, {"name": "Rect", "path": "ref/rect", "type": "pygame.Rect", "text": "\nPygame uses Rect objects to store and manipulate rectangular areas. A Rect can\nbe created from a combination of left, top, width, and height values. Rects\ncan also be created from python objects that are already a Rect or have an\nattribute named \"rect\".\n\n"}, {"name": "Rect.clamp", "path": "ref/rect#pygame.Rect.clamp", "type": "pygame.Rect", "text": "\nReturns a new rectangle that is moved to be completely inside the argument\nRect. If the rectangle is too large to fit inside, it is centered inside the\nargument Rect, but its size is not changed.\n\n"}, {"name": "Rect.clamp_ip", "path": "ref/rect#pygame.Rect.clamp_ip", "type": "pygame.Rect", "text": "\nSame as the `Rect.clamp()` method, but operates in place.\n\n"}, {"name": "Rect.clip", "path": "ref/rect#pygame.Rect.clip", "type": "pygame.Rect", "text": "\nReturns a new rectangle that is cropped to be completely inside the argument\nRect. If the two rectangles do not overlap to begin with, a Rect with 0 size\nis returned.\n\n"}, {"name": "Rect.clipline", "path": "ref/rect#pygame.Rect.clipline", "type": "pygame.Rect", "text": "\nReturns the coordinates of a line that is cropped to be completely inside the\nrectangle. If the line does not overlap the rectangle, then an empty tuple is\nreturned.\n\n"}, {"name": "Rect.collidedict", "path": "ref/rect#pygame.Rect.collidedict", "type": "pygame.Rect", "text": "\nReturns the first key and value pair that intersects with the calling Rect\nobject. If no collisions are found, `None` is returned. If `use_values` is 0\n(default) then the dict's keys will be used in the collision detection,\notherwise the dict's values will be used.\n\n"}, {"name": "Rect.collidedictall", "path": "ref/rect#pygame.Rect.collidedictall", "type": "pygame.Rect", "text": "\nReturns a list of all the key and value pairs that intersect with the calling\nRect object. If no collisions are found an empty list is returned. If\n`use_values` is 0 (default) then the dict's keys will be used in the collision\ndetection, otherwise the dict's values will be used.\n\n"}, {"name": "Rect.collidelist", "path": "ref/rect#pygame.Rect.collidelist", "type": "pygame.Rect", "text": "\nTest whether the rectangle collides with any in a sequence of rectangles. The\nindex of the first collision found is returned. If no collisions are found an\nindex of -1 is returned.\n\n"}, {"name": "Rect.collidelistall", "path": "ref/rect#pygame.Rect.collidelistall", "type": "pygame.Rect", "text": "\nReturns a list of all the indices that contain rectangles that collide with\nthe Rect. If no intersecting rectangles are found, an empty list is returned.\n\n"}, {"name": "Rect.collidepoint", "path": "ref/rect#pygame.Rect.collidepoint", "type": "pygame.Rect", "text": "\nReturns true if the given point is inside the rectangle. A point along the\nright or bottom edge is not considered to be inside the rectangle.\n\n"}, {"name": "Rect.colliderect", "path": "ref/rect#pygame.Rect.colliderect", "type": "pygame.Rect", "text": "\nReturns true if any portion of either rectangle overlap (except the top+bottom\nor left+right edges).\n\n"}, {"name": "Rect.contains", "path": "ref/rect#pygame.Rect.contains", "type": "pygame.Rect", "text": "\nReturns true when the argument is completely inside the Rect.\n\n"}, {"name": "Rect.copy", "path": "ref/rect#pygame.Rect.copy", "type": "pygame.Rect", "text": "\nReturns a new rectangle having the same position and size as the original.\n\n"}, {"name": "Rect.fit", "path": "ref/rect#pygame.Rect.fit", "type": "pygame.Rect", "text": "\nReturns a new rectangle that is moved and resized to fit another. The aspect\nratio of the original Rect is preserved, so the new rectangle may be smaller\nthan the target in either width or height.\n\n"}, {"name": "Rect.inflate", "path": "ref/rect#pygame.Rect.inflate", "type": "pygame.Rect", "text": "\nReturns a new rectangle with the size changed by the given offset. The\nrectangle remains centered around its current center. Negative values will\nshrink the rectangle. Note, uses integers, if the offset given is too small(<\n2 > -2), center will be off.\n\n"}, {"name": "Rect.inflate_ip", "path": "ref/rect#pygame.Rect.inflate_ip", "type": "pygame.Rect", "text": "\nSame as the `Rect.inflate()` method, but operates in place.\n\n"}, {"name": "Rect.move", "path": "ref/rect#pygame.Rect.move", "type": "pygame.Rect", "text": "\nReturns a new rectangle that is moved by the given offset. The x and y\narguments can be any integer value, positive or negative.\n\n"}, {"name": "Rect.move_ip", "path": "ref/rect#pygame.Rect.move_ip", "type": "pygame.Rect", "text": "\nSame as the `Rect.move()` method, but operates in place.\n\n"}, {"name": "Rect.normalize", "path": "ref/rect#pygame.Rect.normalize", "type": "pygame.Rect", "text": "\nThis will flip the width or height of a rectangle if it has a negative size.\nThe rectangle will remain in the same place, with only the sides swapped.\n\n"}, {"name": "Rect.union", "path": "ref/rect#pygame.Rect.union", "type": "pygame.Rect", "text": "\nReturns a new rectangle that completely covers the area of the two provided\nrectangles. There may be area inside the new Rect that is not covered by the\noriginals.\n\n"}, {"name": "Rect.union_ip", "path": "ref/rect#pygame.Rect.union_ip", "type": "pygame.Rect", "text": "\nSame as the `Rect.union()` method, but operates in place.\n\n"}, {"name": "Rect.unionall", "path": "ref/rect#pygame.Rect.unionall", "type": "pygame.Rect", "text": "\nReturns the union of one rectangle with a sequence of many rectangles.\n\n"}, {"name": "Rect.unionall_ip", "path": "ref/rect#pygame.Rect.unionall_ip", "type": "pygame.Rect", "text": "\nThe same as the `Rect.unionall()` method, but operates in place.\n\n"}, {"name": "Rect.update", "path": "ref/rect#pygame.Rect.update", "type": "pygame.Rect", "text": "\nSets the position and size of the rectangle, in place. See parameters for\n`pygame.Rect()` for the parameters of this function.\n\n"}, {"name": "register_quit", "path": "ref/pygame#pygame.register_quit", "type": "pygame", "text": "\nWhen `pygame.quit()` is called, all registered quit functions are called.\nPygame modules do this automatically when they are initializing, so this\nfunction will rarely be needed.\n\n"}, {"name": "scrap", "path": "ref/scrap", "type": "pygame.scrap", "text": "\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code may break with the next pygame release.\n\n"}, {"name": "scrap.contains", "path": "ref/scrap#pygame.scrap.contains", "type": "pygame.scrap", "text": "\nChecks whether data for the given type is currently available in the\nclipboard.\n\n"}, {"name": "scrap.get", "path": "ref/scrap#pygame.scrap.get", "type": "pygame.scrap", "text": "\nRetrieves the data for the specified type from the clipboard. In python 3 the\ndata is returned as a byte string and might need further processing (such as\ndecoding to Unicode).\n\n"}, {"name": "scrap.get_init", "path": "ref/scrap#pygame.scrap.get_init", "type": "pygame.scrap", "text": "\nGets the scrap module's initialization state.\n\n"}, {"name": "scrap.get_types", "path": "ref/scrap#pygame.scrap.get_types", "type": "pygame.scrap", "text": "\nGets a list of data type string identifiers for the data currently available\non the clipboard. Each identifier can be used in the `pygame.scrap.get()`\nmethod to get the clipboard content of the specific type.\n\n"}, {"name": "scrap.init", "path": "ref/scrap#pygame.scrap.init", "type": "pygame.scrap", "text": "\nInitialize the scrap module.\n\n"}, {"name": "scrap.lost", "path": "ref/scrap#pygame.scrap.lost", "type": "pygame.scrap", "text": "\nIndicates if the clipboard ownership has been lost by the pygame application.\n\n"}, {"name": "scrap.put", "path": "ref/scrap#pygame.scrap.put", "type": "pygame.scrap", "text": "\nPlaces data for a given clipboard type into the clipboard. The data must be a\nstring buffer. The type is a string identifying the type of data to be placed\ninto the clipboard. This can be one of the predefined `pygame.SCRAP_PBM`,\n`pygame.SCRAP_PPM`, `pygame.SCRAP_BMP` or `pygame.SCRAP_TEXT` values or a user\ndefined string identifier.\n\n"}, {"name": "scrap.set_mode", "path": "ref/scrap#pygame.scrap.set_mode", "type": "pygame.scrap", "text": "\nSets the access mode for the clipboard. This is only of interest for X11\nenvironments where clipboard modes `pygame.SCRAP_SELECTION` (for mouse\nselections) and `pygame.SCRAP_CLIPBOARD` (for the clipboard) are available.\nSetting the mode to `pygame.SCRAP_SELECTION` in other environments will not\nchange the mode from `pygame.SCRAP_CLIPBOARD`.\n\n"}, {"name": "set_error", "path": "ref/pygame#pygame.set_error", "type": "pygame", "text": "\nSDL maintains an internal error message. This message will usually be given to\nyou when `pygame.error()` is raised, so this function will rarely be needed.\n\n"}, {"name": "sndarray", "path": "ref/sndarray", "type": "pygame.sndarray", "text": "\nFunctions to convert between NumPy arrays and Sound objects. This module will\nonly be available when pygame can use the external NumPy package.\n\n"}, {"name": "sndarray.array", "path": "ref/sndarray#pygame.sndarray.array", "type": "pygame.sndarray", "text": "\nCreates a new array for the sound data and copies the samples. The array will\nalways be in the format returned from `pygame.mixer.get_init()`.\n\n"}, {"name": "sndarray.get_arraytype", "path": "ref/sndarray#pygame.sndarray.get_arraytype", "type": "pygame.sndarray", "text": "\nDEPRECATED: Returns the currently active array type. This will be a value of\nthe `get_arraytypes()` tuple and indicates which type of array module is used\nfor the array creation.\n\n"}, {"name": "sndarray.get_arraytypes", "path": "ref/sndarray#pygame.sndarray.get_arraytypes", "type": "pygame.sndarray", "text": "\nDEPRECATED: Checks, which array systems are available and returns them as a\ntuple of strings. The values of the tuple can be used directly in the\n`pygame.sndarray.use_arraytype()` () method. If no supported array system\ncould be found, None will be returned.\n\n"}, {"name": "sndarray.make_sound", "path": "ref/sndarray#pygame.sndarray.make_sound", "type": "pygame.sndarray", "text": "\nCreate a new playable Sound object from an array. The mixer module must be\ninitialized and the array format must be similar to the mixer audio format.\n\n"}, {"name": "sndarray.samples", "path": "ref/sndarray#pygame.sndarray.samples", "type": "pygame.sndarray", "text": "\nCreates a new array that directly references the samples in a Sound object.\nModifying the array will change the Sound. The array will always be in the\nformat returned from `pygame.mixer.get_init()`.\n\n"}, {"name": "sndarray.use_arraytype", "path": "ref/sndarray#pygame.sndarray.use_arraytype", "type": "pygame.sndarray", "text": "\nDEPRECATED: Uses the requested array type for the module functions. The only\nsupported arraytype is `'numpy'`. Other values will raise ValueError.\n\n"}, {"name": "sprite", "path": "ref/sprite", "type": "pygame.sprite", "text": "\nThis module contains several simple classes to be used within games. There is\nthe main Sprite class and several Group classes that contain Sprites. The use\nof these classes is entirely optional when using pygame. The classes are\nfairly lightweight and only provide a starting place for the code that is\ncommon to most games.\n\n"}, {"name": "sprite.collide_circle", "path": "ref/sprite#pygame.sprite.collide_circle", "type": "pygame.sprite", "text": "\nTests for collision between two sprites, by testing to see if two circles\ncentered on the sprites overlap. If the sprites have a \"radius\" attribute,\nthat is used to create the circle, otherwise a circle is created that is big\nenough to completely enclose the sprites rect as given by the \"rect\"\nattribute. Intended to be passed as a collided callback function to the\n*collide functions. Sprites must have a \"rect\" and an optional \"radius\"\nattribute.\n\n"}, {"name": "sprite.collide_circle_ratio", "path": "ref/sprite#pygame.sprite.collide_circle_ratio", "type": "pygame.sprite", "text": "\nA callable class that checks for collisions between two sprites, using a\nscaled version of the sprites radius.\n\n"}, {"name": "sprite.collide_mask", "path": "ref/sprite#pygame.sprite.collide_mask", "type": "pygame.sprite", "text": "\nTests for collision between two sprites, by testing if their bitmasks overlap\n(uses `pygame.mask.Mask.overlap()`). If the sprites have a `mask` attribute,\nit is used as the mask, otherwise a mask is created from the sprite's `image`\n(uses `pygame.mask.from_surface()`). Sprites must have a `rect` attribute; the\n`mask` attribute is optional.\n\n"}, {"name": "sprite.collide_rect", "path": "ref/sprite#pygame.sprite.collide_rect", "type": "pygame.sprite", "text": "\nTests for collision between two sprites. Uses the pygame rect colliderect\nfunction to calculate the collision. Intended to be passed as a collided\ncallback function to the *collide functions. Sprites must have a \"rect\"\nattributes.\n\n"}, {"name": "sprite.collide_rect_ratio", "path": "ref/sprite#pygame.sprite.collide_rect_ratio", "type": "pygame.sprite", "text": "\nA callable class that checks for collisions between two sprites, using a\nscaled version of the sprites rects.\n\n"}, {"name": "sprite.DirtySprite", "path": "ref/sprite#pygame.sprite.DirtySprite", "type": "pygame.sprite", "text": "\nExtra DirtySprite attributes with their default values:\n\n"}, {"name": "sprite.Group", "path": "ref/sprite#pygame.sprite.Group", "type": "pygame.sprite", "text": "\nA simple container for Sprite objects. This class can be inherited to create\ncontainers with more specific behaviors. The constructor takes any number of\nSprite arguments to add to the Group. The group supports the following\nstandard Python operations:\n\n"}, {"name": "sprite.Group.add", "path": "ref/sprite#pygame.sprite.Group.add", "type": "pygame.sprite", "text": "\nAdd any number of Sprites to this Group. This will only add Sprites that are\nnot already members of the Group.\n\n"}, {"name": "sprite.Group.clear", "path": "ref/sprite#pygame.sprite.Group.clear", "type": "pygame.sprite", "text": "\nErases the Sprites used in the last `Group.draw()` call. The destination\nSurface is cleared by filling the drawn Sprite positions with the background.\n\n"}, {"name": "sprite.Group.copy", "path": "ref/sprite#pygame.sprite.Group.copy", "type": "pygame.sprite", "text": "\nCreates a new Group with all the same Sprites as the original. If you have\nsubclassed Group, the new object will have the same (sub-)class as the\noriginal. This only works if the derived class's constructor takes the same\narguments as the Group class's.\n\n"}, {"name": "sprite.Group.draw", "path": "ref/sprite#pygame.sprite.Group.draw", "type": "pygame.sprite", "text": "\nDraws the contained Sprites to the Surface argument. This uses the\n`Sprite.image` attribute for the source surface, and `Sprite.rect` for the\nposition.\n\n"}, {"name": "sprite.Group.empty", "path": "ref/sprite#pygame.sprite.Group.empty", "type": "pygame.sprite", "text": "\nRemoves all Sprites from this Group.\n\n"}, {"name": "sprite.Group.has", "path": "ref/sprite#pygame.sprite.Group.has", "type": "pygame.sprite", "text": "\nReturn True if the Group contains all of the given sprites. This is similar to\nusing the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests\nif a single Sprite belongs to a Group.\n\n"}, {"name": "sprite.Group.remove", "path": "ref/sprite#pygame.sprite.Group.remove", "type": "pygame.sprite", "text": "\nRemove any number of Sprites from the Group. This will only remove Sprites\nthat are already members of the Group.\n\n"}, {"name": "sprite.Group.sprites", "path": "ref/sprite#pygame.sprite.Group.sprites", "type": "pygame.sprite", "text": "\nReturn a list of all the Sprites this group contains. You can also get an\niterator from the group, but you cannot iterate over a Group while modifying\nit.\n\n"}, {"name": "sprite.Group.update", "path": "ref/sprite#pygame.sprite.Group.update", "type": "pygame.sprite", "text": "\nCalls the `update()` method on all Sprites in the Group. The base Sprite class\nhas an update method that takes any number of arguments and does nothing. The\narguments passed to `Group.update()` will be passed to each Sprite.\n\n"}, {"name": "sprite.groupcollide", "path": "ref/sprite#pygame.sprite.groupcollide", "type": "pygame.sprite", "text": "\nThis will find collisions between all the Sprites in two groups. Collision is\ndetermined by comparing the `Sprite.rect` attribute of each Sprite or by using\nthe collided function if it is not None.\n\n"}, {"name": "sprite.GroupSingle", "path": "ref/sprite#pygame.sprite.GroupSingle", "type": "pygame.sprite", "text": "\nThe GroupSingle container only holds a single Sprite. When a new Sprite is\nadded, the old one is removed.\n\n"}, {"name": "sprite.LayeredDirty", "path": "ref/sprite#pygame.sprite.LayeredDirty", "type": "pygame.sprite", "text": "\nThis group requires `pygame.sprite.DirtySprite` or any sprite that has the\nfollowing attributes:\n\n"}, {"name": "sprite.LayeredDirty.change_layer", "path": "ref/sprite#pygame.sprite.LayeredDirty.change_layer", "type": "pygame.sprite", "text": "\nsprite must have been added to the renderer. It is not checked.\n\n"}, {"name": "sprite.LayeredDirty.clear", "path": "ref/sprite#pygame.sprite.LayeredDirty.clear", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredDirty.draw", "path": "ref/sprite#pygame.sprite.LayeredDirty.draw", "type": "pygame.sprite", "text": "\nYou can pass the background too. If a background is already set, then the bgd\nargument has no effect.\n\n"}, {"name": "sprite.LayeredDirty.get_clip", "path": "ref/sprite#pygame.sprite.LayeredDirty.get_clip", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredDirty.repaint_rect", "path": "ref/sprite#pygame.sprite.LayeredDirty.repaint_rect", "type": "pygame.sprite", "text": "\nscreen_rect is in screen coordinates.\n\n"}, {"name": "sprite.LayeredDirty.set_clip", "path": "ref/sprite#pygame.sprite.LayeredDirty.set_clip", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredDirty.set_timing_treshold", "path": "ref/sprite#pygame.sprite.LayeredDirty.set_timing_treshold", "type": "pygame.sprite", "text": "\nDefault is 1000./80 where 80 is the fps I want to switch to full screen mode.\nThis method's name is a typo and should be fixed.\n\n"}, {"name": "sprite.LayeredUpdates", "path": "ref/sprite#pygame.sprite.LayeredUpdates", "type": "pygame.sprite", "text": "\nThis group is fully compatible with `pygame.sprite.Sprite`.\n\n"}, {"name": "sprite.LayeredUpdates.add", "path": "ref/sprite#pygame.sprite.LayeredUpdates.add", "type": "pygame.sprite", "text": "\nIf the `sprite(s)` have an attribute layer then that is used for the layer. If\n**kwargs contains 'layer' then the `sprite(s)` will be added to that argument\n(overriding the sprite layer attribute). If neither is passed then the\n`sprite(s)` will be added to the default layer.\n\n"}, {"name": "sprite.LayeredUpdates.change_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.change_layer", "type": "pygame.sprite", "text": "\nsprite must have been added to the renderer. It is not checked.\n\n"}, {"name": "sprite.LayeredUpdates.draw", "path": "ref/sprite#pygame.sprite.LayeredUpdates.draw", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.get_bottom_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_bottom_layer", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.get_layer_of_sprite", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_layer_of_sprite", "type": "pygame.sprite", "text": "\nIf the sprite is not found then it will return the default layer.\n\n"}, {"name": "sprite.LayeredUpdates.get_sprite", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_sprite", "type": "pygame.sprite", "text": "\nRaises IndexOutOfBounds if the idx is not within range.\n\n"}, {"name": "sprite.LayeredUpdates.get_sprites_at", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_sprites_at", "type": "pygame.sprite", "text": "\nBottom sprites first, top last.\n\n"}, {"name": "sprite.LayeredUpdates.get_sprites_from_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_sprites_from_layer", "type": "pygame.sprite", "text": "\nReturns all sprites from a layer, ordered by how they where added. It uses\nlinear search and the sprites are not removed from layer.\n\n"}, {"name": "sprite.LayeredUpdates.get_top_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_top_layer", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.get_top_sprite", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_top_sprite", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.layers", "path": "ref/sprite#pygame.sprite.LayeredUpdates.layers", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.move_to_back", "path": "ref/sprite#pygame.sprite.LayeredUpdates.move_to_back", "type": "pygame.sprite", "text": "\nMoves the sprite to the bottom layer, moving it behind all other layers and\nadding one additional layer.\n\n"}, {"name": "sprite.LayeredUpdates.move_to_front", "path": "ref/sprite#pygame.sprite.LayeredUpdates.move_to_front", "type": "pygame.sprite", "text": "\nBrings the sprite to front, changing sprite layer to topmost layer (added at\nthe end of that layer).\n\n"}, {"name": "sprite.LayeredUpdates.remove_sprites_of_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.remove_sprites_of_layer", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.sprites", "path": "ref/sprite#pygame.sprite.LayeredUpdates.sprites", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.switch_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.switch_layer", "type": "pygame.sprite", "text": "\nThe layers number must exist, it is not checked.\n\n"}, {"name": "sprite.OrderedUpdates", "path": "ref/sprite#pygame.sprite.OrderedUpdates", "type": "pygame.sprite", "text": "\nThis class derives from `pygame.sprite.RenderUpdates()`. It maintains the\norder in which the Sprites were added to the Group for rendering. This makes\nadding and removing Sprites from the Group a little slower than regular\nGroups.\n\n"}, {"name": "sprite.RenderClear", "path": "ref/sprite#pygame.sprite.RenderClear", "type": "pygame.sprite", "text": "\nThis class is an alias to `pygame.sprite.Group()`. It has no additional\nfunctionality.\n\n"}, {"name": "sprite.RenderPlain", "path": "ref/sprite#pygame.sprite.RenderPlain", "type": "pygame.sprite", "text": "\nThis class is an alias to `pygame.sprite.Group()`. It has no additional\nfunctionality.\n\n"}, {"name": "sprite.RenderUpdates", "path": "ref/sprite#pygame.sprite.RenderUpdates", "type": "pygame.sprite", "text": "\nThis class is derived from `pygame.sprite.Group()`. It has an extended\n`draw()` method that tracks the changed areas of the screen.\n\n"}, {"name": "sprite.RenderUpdates.draw", "path": "ref/sprite#pygame.sprite.RenderUpdates.draw", "type": "pygame.sprite", "text": "\nDraws all the Sprites to the surface, the same as `Group.draw()`. This method\nalso returns a list of Rectangular areas on the screen that have been changed.\nThe returned changes include areas of the screen that have been affected by\nprevious `Group.clear()` calls.\n\n"}, {"name": "sprite.Sprite", "path": "ref/sprite#pygame.sprite.Sprite", "type": "pygame.sprite", "text": "\nThe base class for visible game objects. Derived classes will want to override\nthe `Sprite.update()` and assign a `Sprite.image` and `Sprite.rect`\nattributes. The initializer can accept any number of Group instances to be\nadded to.\n\n"}, {"name": "sprite.Sprite.add", "path": "ref/sprite#pygame.sprite.Sprite.add", "type": "pygame.sprite", "text": "\nAny number of Group instances can be passed as arguments. The Sprite will be\nadded to the Groups it is not already a member of.\n\n"}, {"name": "sprite.Sprite.alive", "path": "ref/sprite#pygame.sprite.Sprite.alive", "type": "pygame.sprite", "text": "\nReturns True when the Sprite belongs to one or more Groups.\n\n"}, {"name": "sprite.Sprite.groups", "path": "ref/sprite#pygame.sprite.Sprite.groups", "type": "pygame.sprite", "text": "\nReturn a list of all the Groups that contain this Sprite.\n\n"}, {"name": "sprite.Sprite.kill", "path": "ref/sprite#pygame.sprite.Sprite.kill", "type": "pygame.sprite", "text": "\nThe Sprite is removed from all the Groups that contain it. This won't change\nanything about the state of the Sprite. It is possible to continue to use the\nSprite after this method has been called, including adding it to Groups.\n\n"}, {"name": "sprite.Sprite.remove", "path": "ref/sprite#pygame.sprite.Sprite.remove", "type": "pygame.sprite", "text": "\nAny number of Group instances can be passed as arguments. The Sprite will be\nremoved from the Groups it is currently a member of.\n\n"}, {"name": "sprite.Sprite.update", "path": "ref/sprite#pygame.sprite.Sprite.update", "type": "pygame.sprite", "text": "\nThe default implementation of this method does nothing; it's just a convenient\n\"hook\" that you can override. This method is called by `Group.update()` with\nwhatever arguments you give it.\n\n"}, {"name": "sprite.spritecollide", "path": "ref/sprite#pygame.sprite.spritecollide", "type": "pygame.sprite", "text": "\nReturn a list containing all Sprites in a Group that intersect with another\nSprite. Intersection is determined by comparing the `Sprite.rect` attribute of\neach Sprite.\n\n"}, {"name": "sprite.spritecollideany", "path": "ref/sprite#pygame.sprite.spritecollideany", "type": "pygame.sprite", "text": "\nIf the sprite collides with any single sprite in the group, a single sprite\nfrom the group is returned. On no collision None is returned.\n\n"}, {"name": "Surface", "path": "ref/surface", "type": "pygame.Surface", "text": "\nA pygame Surface is used to represent any image. The Surface has a fixed\nresolution and pixel format. Surfaces with 8-bit pixels use a color palette to\nmap to 24-bit color.\n\n"}, {"name": "Surface._pixels_address", "path": "ref/surface#pygame.Surface._pixels_address", "type": "pygame.Surface", "text": "\nThe starting address of the surface's raw pixel bytes.\n\n"}, {"name": "Surface.blit", "path": "ref/surface#pygame.Surface.blit", "type": "pygame.Surface", "text": "\nDraws a source Surface onto this Surface. The draw can be positioned with the\ndest argument. The dest argument can either be a pair of coordinates\nrepresenting the position of the upper left corner of the blit or a Rect,\nwhere the upper left corner of the rectangle will be used as the position for\nthe blit. The size of the destination rectangle does not effect the blit.\n\n"}, {"name": "Surface.blits", "path": "ref/surface#pygame.Surface.blits", "type": "pygame.Surface", "text": "\nDraws many surfaces onto this Surface. It takes a sequence as input, with each\nof the elements corresponding to the ones of `blit()`. It needs at minimum a\nsequence of (source, dest).\n\n"}, {"name": "Surface.convert", "path": "ref/surface#pygame.Surface.convert", "type": "pygame.Surface", "text": "\nCreates a new copy of the Surface with the pixel format changed. The new pixel\nformat can be determined from another existing Surface. Otherwise depth,\nflags, and masks arguments can be used, similar to the `pygame.Surface()`\ncall.\n\n"}, {"name": "Surface.convert_alpha", "path": "ref/surface#pygame.Surface.convert_alpha", "type": "pygame.Surface", "text": "\nCreates a new copy of the surface with the desired pixel format. The new\nsurface will be in a format suited for quick blitting to the given format with\nper pixel alpha. If no surface is given, the new surface will be optimized for\nblitting to the current display.\n\n"}, {"name": "Surface.copy", "path": "ref/surface#pygame.Surface.copy", "type": "pygame.Surface", "text": "\nMakes a duplicate copy of a Surface. The new surface will have the same pixel\nformats, color palettes, transparency settings, and class as the original. If\na Surface subclass also needs to copy any instance specific attributes then it\nshould override `copy()`.\n\n"}, {"name": "Surface.fill", "path": "ref/surface#pygame.Surface.fill", "type": "pygame.Surface", "text": "\nFill the Surface with a solid color. If no rect argument is given the entire\nSurface will be filled. The rect argument will limit the fill to a specific\narea. The fill will also be contained by the Surface clip area.\n\n"}, {"name": "Surface.get_abs_offset", "path": "ref/surface#pygame.Surface.get_abs_offset", "type": "pygame.Surface", "text": "\nGet the offset position of a child subsurface inside of its top level parent\nSurface. If the Surface is not a subsurface this will return (0, 0).\n\n"}, {"name": "Surface.get_abs_parent", "path": "ref/surface#pygame.Surface.get_abs_parent", "type": "pygame.Surface", "text": "\nReturns the parent Surface of a subsurface. If this is not a subsurface then\nthis surface will be returned.\n\n"}, {"name": "Surface.get_alpha", "path": "ref/surface#pygame.Surface.get_alpha", "type": "pygame.Surface", "text": "\nReturn the current alpha value for the Surface.\n\n"}, {"name": "Surface.get_at", "path": "ref/surface#pygame.Surface.get_at", "type": "pygame.Surface", "text": "\nReturn a copy of the `RGBA` Color value at the given pixel. If the Surface has\nno per pixel alpha, then the alpha value will always be 255 (opaque). If the\npixel position is outside the area of the Surface an `IndexError` exception\nwill be raised.\n\n"}, {"name": "Surface.get_at_mapped", "path": "ref/surface#pygame.Surface.get_at_mapped", "type": "pygame.Surface", "text": "\nReturn the integer value of the given pixel. If the pixel position is outside\nthe area of the Surface an `IndexError` exception will be raised.\n\n"}, {"name": "Surface.get_bitsize", "path": "ref/surface#pygame.Surface.get_bitsize", "type": "pygame.Surface", "text": "\nReturns the number of bits used to represent each pixel. This value may not\nexactly fill the number of bytes used per pixel. For example a 15 bit Surface\nstill requires a full 2 bytes.\n\n"}, {"name": "Surface.get_bounding_rect", "path": "ref/surface#pygame.Surface.get_bounding_rect", "type": "pygame.Surface", "text": "\nReturns the smallest rectangular region that contains all the pixels in the\nsurface that have an alpha value greater than or equal to the minimum alpha\nvalue.\n\n"}, {"name": "Surface.get_buffer", "path": "ref/surface#pygame.Surface.get_buffer", "type": "pygame.Surface", "text": "\nReturn a buffer object for the pixels of the Surface. The buffer can be used\nfor direct pixel access and manipulation. Surface pixel data is represented as\nan unstructured block of memory, with a start address and length in bytes. The\ndata need not be contiguous. Any gaps are included in the length, but\notherwise ignored.\n\n"}, {"name": "Surface.get_bytesize", "path": "ref/surface#pygame.Surface.get_bytesize", "type": "pygame.Surface", "text": "\nReturn the number of bytes used per pixel.\n\n"}, {"name": "Surface.get_clip", "path": "ref/surface#pygame.Surface.get_clip", "type": "pygame.Surface", "text": "\nReturn a rectangle of the current clipping area. The Surface will always\nreturn a valid rectangle that will never be outside the bounds of the image.\nIf the Surface has had `None` set for the clipping area, the Surface will\nreturn a rectangle with the full area of the Surface.\n\n"}, {"name": "Surface.get_colorkey", "path": "ref/surface#pygame.Surface.get_colorkey", "type": "pygame.Surface", "text": "\nReturn the current colorkey value for the Surface. If the colorkey is not set\nthen `None` is returned.\n\n"}, {"name": "Surface.get_flags", "path": "ref/surface#pygame.Surface.get_flags", "type": "pygame.Surface", "text": "\nReturns a set of current Surface features. Each feature is a bit in the flags\nbitmask. Typical flags are `HWSURFACE`, `RLEACCEL`, `SRCALPHA`, and\n`SRCCOLORKEY`.\n\n"}, {"name": "Surface.get_height", "path": "ref/surface#pygame.Surface.get_height", "type": "pygame.Surface", "text": "\nReturn the height of the Surface in pixels.\n\n"}, {"name": "Surface.get_locked", "path": "ref/surface#pygame.Surface.get_locked", "type": "pygame.Surface", "text": "\nReturns `True` when the Surface is locked. It doesn't matter how many times\nthe Surface is locked.\n\n"}, {"name": "Surface.get_locks", "path": "ref/surface#pygame.Surface.get_locks", "type": "pygame.Surface", "text": "\nReturns the currently existing locks for the Surface.\n\n"}, {"name": "Surface.get_losses", "path": "ref/surface#pygame.Surface.get_losses", "type": "pygame.Surface", "text": "\nReturn the least significant number of bits stripped from each color in a\nmapped integer.\n\n"}, {"name": "Surface.get_masks", "path": "ref/surface#pygame.Surface.get_masks", "type": "pygame.Surface", "text": "\nReturns the bitmasks used to isolate each color in a mapped integer.\n\n"}, {"name": "Surface.get_offset", "path": "ref/surface#pygame.Surface.get_offset", "type": "pygame.Surface", "text": "\nGet the offset position of a child subsurface inside of a parent. If the\nSurface is not a subsurface this will return (0, 0).\n\n"}, {"name": "Surface.get_palette", "path": "ref/surface#pygame.Surface.get_palette", "type": "pygame.Surface", "text": "\nReturn a list of up to 256 color elements that represent the indexed colors\nused in an 8-bit Surface. The returned list is a copy of the palette, and\nchanges will have no effect on the Surface.\n\n"}, {"name": "Surface.get_palette_at", "path": "ref/surface#pygame.Surface.get_palette_at", "type": "pygame.Surface", "text": "\nReturns the red, green, and blue color values for a single index in a Surface\npalette. The index should be a value from 0 to 255.\n\n"}, {"name": "Surface.get_parent", "path": "ref/surface#pygame.Surface.get_parent", "type": "pygame.Surface", "text": "\nReturns the parent Surface of a subsurface. If this is not a subsurface then\n`None` will be returned.\n\n"}, {"name": "Surface.get_pitch", "path": "ref/surface#pygame.Surface.get_pitch", "type": "pygame.Surface", "text": "\nReturn the number of bytes separating each row in the Surface. Surfaces in\nvideo memory are not always linearly packed. Subsurfaces will also have a\nlarger pitch than their real width.\n\n"}, {"name": "Surface.get_rect", "path": "ref/surface#pygame.Surface.get_rect", "type": "pygame.Surface", "text": "\nReturns a new rectangle covering the entire surface. This rectangle will\nalways start at (0, 0) with a width and height the same size as the image.\n\n"}, {"name": "Surface.get_shifts", "path": "ref/surface#pygame.Surface.get_shifts", "type": "pygame.Surface", "text": "\nReturns the pixel shifts need to convert between each color and a mapped\ninteger.\n\n"}, {"name": "Surface.get_size", "path": "ref/surface#pygame.Surface.get_size", "type": "pygame.Surface", "text": "\nReturn the width and height of the Surface in pixels.\n\n"}, {"name": "Surface.get_view", "path": "ref/surface#pygame.Surface.get_view", "type": "pygame.Surface", "text": "\nReturn an object which exports a surface's internal pixel buffer as a C level\narray struct, Python level array interface or a C level buffer interface. The\npixel buffer is writeable. The new buffer protocol is supported for Python 2.6\nand up in CPython. The old buffer protocol is also supported for Python 2.x.\nThe old buffer data is in one segment for kind '0', multi-segment for other\nbuffer view kinds.\n\n"}, {"name": "Surface.get_width", "path": "ref/surface#pygame.Surface.get_width", "type": "pygame.Surface", "text": "\nReturn the width of the Surface in pixels.\n\n"}, {"name": "Surface.lock", "path": "ref/surface#pygame.Surface.lock", "type": "pygame.Surface", "text": "\nLock the pixel data of a Surface for access. On accelerated Surfaces, the\npixel data may be stored in volatile video memory or nonlinear compressed\nforms. When a Surface is locked the pixel memory becomes available to access\nby regular software. Code that reads or writes pixel values will need the\nSurface to be locked.\n\n"}, {"name": "Surface.map_rgb", "path": "ref/surface#pygame.Surface.map_rgb", "type": "pygame.Surface", "text": "\nConvert an `RGBA` color into the mapped integer value for this Surface. The\nreturned integer will contain no more bits than the bit depth of the Surface.\nMapped color values are not often used inside pygame, but can be passed to\nmost functions that require a Surface and a color.\n\n"}, {"name": "Surface.mustlock", "path": "ref/surface#pygame.Surface.mustlock", "type": "pygame.Surface", "text": "\nReturns `True` if the Surface is required to be locked to access pixel data.\nUsually pure software Surfaces do not require locking. This method is rarely\nneeded, since it is safe and quickest to just lock all Surfaces as needed.\n\n"}, {"name": "Surface.scroll", "path": "ref/surface#pygame.Surface.scroll", "type": "pygame.Surface", "text": "\nMove the image by dx pixels right and dy pixels down. dx and dy may be\nnegative for left and up scrolls respectively. Areas of the surface that are\nnot overwritten retain their original pixel values. Scrolling is contained by\nthe Surface clip area. It is safe to have dx and dy values that exceed the\nsurface size.\n\n"}, {"name": "Surface.set_alpha", "path": "ref/surface#pygame.Surface.set_alpha", "type": "pygame.Surface", "text": "\nSet the current alpha value for the Surface. When blitting this Surface onto a\ndestination, the pixels will be drawn slightly transparent. The alpha value is\nan integer from 0 to 255, 0 is fully transparent and 255 is fully opaque. If\n`None` is passed for the alpha value, then alpha blending will be disabled,\nincluding per-pixel alpha.\n\n"}, {"name": "Surface.set_at", "path": "ref/surface#pygame.Surface.set_at", "type": "pygame.Surface", "text": "\nSet the `RGBA` or mapped integer color value for a single pixel. If the\nSurface does not have per pixel alphas, the alpha value is ignored. Setting\npixels outside the Surface area or outside the Surface clipping will have no\neffect.\n\n"}, {"name": "Surface.set_clip", "path": "ref/surface#pygame.Surface.set_clip", "type": "pygame.Surface", "text": "\nEach Surface has an active clipping area. This is a rectangle that represents\nthe only pixels on the Surface that can be modified. If `None` is passed for\nthe rectangle the full Surface will be available for changes.\n\n"}, {"name": "Surface.set_colorkey", "path": "ref/surface#pygame.Surface.set_colorkey", "type": "pygame.Surface", "text": "\nSet the current color key for the Surface. When blitting this Surface onto a\ndestination, any pixels that have the same color as the colorkey will be\ntransparent. The color can be an `RGB` color or a mapped color integer. If\n`None` is passed, the colorkey will be unset.\n\n"}, {"name": "Surface.set_masks", "path": "ref/surface#pygame.Surface.set_masks", "type": "pygame.Surface", "text": "\nThis is not needed for normal pygame usage.\n\n"}, {"name": "Surface.set_palette", "path": "ref/surface#pygame.Surface.set_palette", "type": "pygame.Surface", "text": "\nSet the full palette for an 8-bit Surface. This will replace the colors in the\nexisting palette. A partial palette can be passed and only the first colors in\nthe original palette will be changed.\n\n"}, {"name": "Surface.set_palette_at", "path": "ref/surface#pygame.Surface.set_palette_at", "type": "pygame.Surface", "text": "\nSet the palette value for a single entry in a Surface palette. The index\nshould be a value from 0 to 255.\n\n"}, {"name": "Surface.set_shifts", "path": "ref/surface#pygame.Surface.set_shifts", "type": "pygame.Surface", "text": "\nThis is not needed for normal pygame usage.\n\n"}, {"name": "Surface.subsurface", "path": "ref/surface#pygame.Surface.subsurface", "type": "pygame.Surface", "text": "\nReturns a new Surface that shares its pixels with its new parent. The new\nSurface is considered a child of the original. Modifications to either Surface\npixels will effect each other. Surface information like clipping area and\ncolor keys are unique to each Surface.\n\n"}, {"name": "Surface.unlock", "path": "ref/surface#pygame.Surface.unlock", "type": "pygame.Surface", "text": "\nUnlock the Surface pixel data after it has been locked. The unlocked Surface\ncan once again be drawn and managed by pygame. See the `lock()` documentation\nfor more details.\n\n"}, {"name": "Surface.unmap_rgb", "path": "ref/surface#pygame.Surface.unmap_rgb", "type": "pygame.Surface", "text": "\nConvert an mapped integer color into the `RGB` color components for this\nSurface. Mapped color values are not often used inside pygame, but can be\npassed to most functions that require a Surface and a color.\n\n"}, {"name": "surfarray", "path": "ref/surfarray", "type": "pygame.surfarray", "text": "\nFunctions to convert pixel data between pygame Surfaces and arrays. This\nmodule will only be functional when pygame can use the external NumPy package.\n\n"}, {"name": "surfarray.array2d", "path": "ref/surfarray#pygame.surfarray.array2d", "type": "pygame.surfarray", "text": "\nCopy the `mapped` (raw) pixels from a Surface into a 2D array. The bit depth\nof the surface will control the size of the integer values, and will work for\nany type of pixel format.\n\n"}, {"name": "surfarray.array3d", "path": "ref/surfarray#pygame.surfarray.array3d", "type": "pygame.surfarray", "text": "\nCopy the pixels from a Surface into a 3D array. The bit depth of the surface\nwill control the size of the integer values, and will work for any type of\npixel format.\n\n"}, {"name": "surfarray.array_alpha", "path": "ref/surfarray#pygame.surfarray.array_alpha", "type": "pygame.surfarray", "text": "\nCopy the pixel alpha values (degree of transparency) from a Surface into a 2D\narray. This will work for any type of Surface format. Surfaces without a pixel\nalpha will return an array with all opaque values.\n\n"}, {"name": "surfarray.array_colorkey", "path": "ref/surfarray#pygame.surfarray.array_colorkey", "type": "pygame.surfarray", "text": "\nCreate a new array with the colorkey transparency value from each pixel. If\nthe pixel matches the colorkey it will be fully transparent; otherwise it will\nbe fully opaque.\n\n"}, {"name": "surfarray.blit_array", "path": "ref/surfarray#pygame.surfarray.blit_array", "type": "pygame.surfarray", "text": "\nDirectly copy values from an array into a Surface. This is faster than\nconverting the array into a Surface and blitting. The array must be the same\ndimensions as the Surface and will completely replace all pixel values. Only\ninteger, ASCII character and record arrays are accepted.\n\n"}, {"name": "surfarray.get_arraytype", "path": "ref/surfarray#pygame.surfarray.get_arraytype", "type": "pygame.surfarray", "text": "\nDEPRECATED: Returns the currently active array type. This will be a value of\nthe `get_arraytypes()` tuple and indicates which type of array module is used\nfor the array creation.\n\n"}, {"name": "surfarray.get_arraytypes", "path": "ref/surfarray#pygame.surfarray.get_arraytypes", "type": "pygame.surfarray", "text": "\nDEPRECATED: Checks, which array systems are available and returns them as a\ntuple of strings. The values of the tuple can be used directly in the\n`pygame.surfarray.use_arraytype()` () method. If no supported array system\ncould be found, None will be returned.\n\n"}, {"name": "surfarray.make_surface", "path": "ref/surfarray#pygame.surfarray.make_surface", "type": "pygame.surfarray", "text": "\nCreate a new Surface that best resembles the data and format on the array. The\narray can be 2D or 3D with any sized integer values. Function make_surface\nuses the array struct interface to acquire array properties, so is not limited\nto just NumPy arrays. See `pygame.pixelcopy`.\n\n"}, {"name": "surfarray.map_array", "path": "ref/surfarray#pygame.surfarray.map_array", "type": "pygame.surfarray", "text": "\nConvert a 3D array into a 2D array. This will use the given Surface format to\ncontrol the conversion. Palette surface formats are supported for NumPy\narrays.\n\n"}, {"name": "surfarray.pixels2d", "path": "ref/surfarray#pygame.surfarray.pixels2d", "type": "pygame.surfarray", "text": "\nCreate a new 2D array that directly references the pixel values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\n"}, {"name": "surfarray.pixels3d", "path": "ref/surfarray#pygame.surfarray.pixels3d", "type": "pygame.surfarray", "text": "\nCreate a new 3D array that directly references the pixel values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\n"}, {"name": "surfarray.pixels_alpha", "path": "ref/surfarray#pygame.surfarray.pixels_alpha", "type": "pygame.surfarray", "text": "\nCreate a new 2D array that directly references the alpha values (degree of\ntransparency) in a Surface. Any changes to the array will affect the pixels in\nthe Surface. This is a fast operation since no data is copied.\n\n"}, {"name": "surfarray.pixels_blue", "path": "ref/surfarray#pygame.surfarray.pixels_blue", "type": "pygame.surfarray", "text": "\nCreate a new 2D array that directly references the blue values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\n"}, {"name": "surfarray.pixels_green", "path": "ref/surfarray#pygame.surfarray.pixels_green", "type": "pygame.surfarray", "text": "\nCreate a new 2D array that directly references the green values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\n"}, {"name": "surfarray.pixels_red", "path": "ref/surfarray#pygame.surfarray.pixels_red", "type": "pygame.surfarray", "text": "\nCreate a new 2D array that directly references the red values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\n"}, {"name": "surfarray.use_arraytype", "path": "ref/surfarray#pygame.surfarray.use_arraytype", "type": "pygame.surfarray", "text": "\nDEPRECATED: Uses the requested array type for the module functions. The only\nsupported arraytype is `'numpy'`. Other values will raise ValueError.\n\n"}, {"name": "tests", "path": "ref/tests", "type": "pygame.tests", "text": "\nA quick way to run the test suite package from the command line is to import\nthe go submodule with the Python -m option:\n\n"}, {"name": "tests.run", "path": "ref/tests#pygame.tests.run", "type": "pygame.tests", "text": "\nPositional arguments (optional):\n\n"}, {"name": "time", "path": "ref/time", "type": "pygame.time", "text": "\nTimes in pygame are represented in milliseconds (1/1000 seconds). Most\nplatforms have a limited time resolution of around 10 milliseconds. This\nresolution, in milliseconds, is given in the `TIMER_RESOLUTION` constant.\n\n"}, {"name": "time.Clock", "path": "ref/time#pygame.time.Clock", "type": "pygame.time", "text": "\nCreates a new Clock object that can be used to track an amount of time. The\nclock also provides several functions to help control a game's framerate.\n\n"}, {"name": "time.Clock.get_fps", "path": "ref/time#pygame.time.Clock.get_fps", "type": "pygame.time", "text": "\nCompute your game's framerate (in frames per second). It is computed by\naveraging the last ten calls to `Clock.tick()`.\n\n"}, {"name": "time.Clock.get_rawtime", "path": "ref/time#pygame.time.Clock.get_rawtime", "type": "pygame.time", "text": "\nSimilar to `Clock.get_time()`, but does not include any time used while\n`Clock.tick()` was delaying to limit the framerate.\n\n"}, {"name": "time.Clock.get_time", "path": "ref/time#pygame.time.Clock.get_time", "type": "pygame.time", "text": "\nThe number of milliseconds that passed between the previous two calls to\n`Clock.tick()`.\n\n"}, {"name": "time.Clock.tick", "path": "ref/time#pygame.time.Clock.tick", "type": "pygame.time", "text": "\nThis method should be called once per frame. It will compute how many\nmilliseconds have passed since the previous call.\n\n"}, {"name": "time.Clock.tick_busy_loop", "path": "ref/time#pygame.time.Clock.tick_busy_loop", "type": "pygame.time", "text": "\nThis method should be called once per frame. It will compute how many\nmilliseconds have passed since the previous call.\n\n"}, {"name": "time.delay", "path": "ref/time#pygame.time.delay", "type": "pygame.time", "text": "\nWill pause for a given number of milliseconds. This function will use the\nprocessor (rather than sleeping) in order to make the delay more accurate than\n`pygame.time.wait()`.\n\n"}, {"name": "time.get_ticks", "path": "ref/time#pygame.time.get_ticks", "type": "pygame.time", "text": "\nReturn the number of milliseconds since `pygame.init()` was called. Before\npygame is initialized this will always be 0.\n\n"}, {"name": "time.set_timer", "path": "ref/time#pygame.time.set_timer", "type": "pygame.time", "text": "\nSet an event type to appear on the event queue every given number of\nmilliseconds. The first event will not appear until the amount of time has\npassed.\n\n"}, {"name": "time.wait", "path": "ref/time#pygame.time.wait", "type": "pygame.time", "text": "\nWill pause for a given number of milliseconds. This function sleeps the\nprocess to share the processor with other programs. A program that waits for\neven a few milliseconds will consume very little processor time. It is\nslightly less accurate than the `pygame.time.delay()` function.\n\n"}, {"name": "transform", "path": "ref/transform", "type": "pygame.transform", "text": "\nA Surface transform is an operation that moves or resizes the pixels. All\nthese functions take a Surface to operate on and return a new Surface with the\nresults.\n\n"}, {"name": "transform.average_color", "path": "ref/transform#pygame.transform.average_color", "type": "pygame.transform", "text": "\nFinds the average color of a Surface or a region of a surface specified by a\nRect, and returns it as a Color.\n\n"}, {"name": "transform.average_surfaces", "path": "ref/transform#pygame.transform.average_surfaces", "type": "pygame.transform", "text": "\nTakes a sequence of surfaces and returns a surface with average colors from\neach of the surfaces.\n\n"}, {"name": "transform.chop", "path": "ref/transform#pygame.transform.chop", "type": "pygame.transform", "text": "\nExtracts a portion of an image. All vertical and horizontal pixels surrounding\nthe given rectangle area are removed. The corner areas (diagonal to the rect)\nare then brought together. (The original image is not altered by this\noperation.)\n\n"}, {"name": "transform.flip", "path": "ref/transform#pygame.transform.flip", "type": "pygame.transform", "text": "\nThis can flip a Surface either vertically, horizontally, or both. Flipping a\nSurface is non-destructive and returns a new Surface with the same dimensions.\n\n"}, {"name": "transform.get_smoothscale_backend", "path": "ref/transform#pygame.transform.get_smoothscale_backend", "type": "pygame.transform", "text": "\nShows whether or not smoothscale is using `MMX` or `SSE` acceleration. If no\nacceleration is available then \"GENERIC\" is returned. For a x86 processor the\nlevel of acceleration to use is determined at runtime.\n\n"}, {"name": "transform.laplacian", "path": "ref/transform#pygame.transform.laplacian", "type": "pygame.transform", "text": "\nFinds the edges in a surface using the laplacian algorithm.\n\n"}, {"name": "transform.rotate", "path": "ref/transform#pygame.transform.rotate", "type": "pygame.transform", "text": "\nUnfiltered counterclockwise rotation. The angle argument represents degrees\nand can be any floating point value. Negative angle amounts will rotate\nclockwise.\n\n"}, {"name": "transform.rotozoom", "path": "ref/transform#pygame.transform.rotozoom", "type": "pygame.transform", "text": "\nThis is a combined scale and rotation transform. The resulting Surface will be\na filtered 32-bit Surface. The scale argument is a floating point value that\nwill be multiplied by the current resolution. The angle argument is a floating\npoint value that represents the counterclockwise degrees to rotate. A negative\nrotation angle will rotate clockwise.\n\n"}, {"name": "transform.scale", "path": "ref/transform#pygame.transform.scale", "type": "pygame.transform", "text": "\nResizes the Surface to a new resolution. This is a fast scale operation that\ndoes not sample the results.\n\n"}, {"name": "transform.scale2x", "path": "ref/transform#pygame.transform.scale2x", "type": "pygame.transform", "text": "\nThis will return a new image that is double the size of the original. It uses\nthe AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap\ngraphics.\n\n"}, {"name": "transform.set_smoothscale_backend", "path": "ref/transform#pygame.transform.set_smoothscale_backend", "type": "pygame.transform", "text": "\nSets smoothscale acceleration. Takes a string argument. A value of 'GENERIC'\nturns off acceleration. 'MMX' uses `MMX` instructions only. 'SSE' allows `SSE`\nextensions as well. A value error is raised if type is not recognized or not\nsupported by the current processor.\n\n"}, {"name": "transform.smoothscale", "path": "ref/transform#pygame.transform.smoothscale", "type": "pygame.transform", "text": "\nUses one of two different algorithms for scaling each dimension of the input\nsurface as required. For shrinkage, the output pixels are area averages of the\ncolors they cover. For expansion, a bilinear filter is used. For the x86-64\nand i686 architectures, optimized `MMX` routines are included and will run\nmuch faster than other machine types. The size is a 2 number sequence for\n(width, height). This function only works for 24-bit or 32-bit surfaces. An\nexception will be thrown if the input surface bit depth is less than 24.\n\n"}, {"name": "transform.threshold", "path": "ref/transform#pygame.transform.threshold", "type": "pygame.transform", "text": "\nThis versatile function can be used for find colors in a 'surf' close to a\n'search_color' or close to colors in a separate 'search_surf'.\n\n"}, {"name": "version.rev", "path": "ref/pygame#pygame.version.rev", "type": "pygame", "text": "\nThe Mercurial node identifier of the repository checkout from which this\npackage was built. If the identifier ends with a plus sign '+' then the\npackage contains uncommitted changes. Please include this revision number in\nbug reports, especially for non-release pygame builds.\n\n"}, {"name": "version.SDL", "path": "ref/pygame#pygame.version.SDL", "type": "pygame", "text": "\nThis is the SDL library version represented as an extended tuple. It also has\nattributes 'major', 'minor' & 'patch' that can be accessed like this:\n\n"}, {"name": "version.ver", "path": "ref/pygame#pygame.version.ver", "type": "pygame", "text": "\nThis is the version represented as a string. It can contain a micro release\nnumber as well, e.g. `'1.5.2'`\n\n"}, {"name": "version.vernum", "path": "ref/pygame#pygame.version.vernum", "type": "pygame", "text": "\nThis version information can easily be compared with other version numbers of\nthe same format. An example of checking pygame version numbers would look like\nthis:\n\n"}]