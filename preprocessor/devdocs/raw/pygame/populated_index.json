[{"name": "_sdl2.touch", "path": "ref/touch", "type": "pygame._sdl2.touch", "text": "\nNew in pygame 2: This module requires SDL2.\n\nReturn the number of available touch devices.\n\nReturn an integer id associated with the given `index`.\n\nReturn the number of fingers active for the touch device whose id is touchid.\n\nReturn a dict for the finger `index` active on `touchid`. The dict contains\nthese keys:\n\n"}, {"name": "_sdl2.touch.get_device", "path": "ref/touch#pygame._sdl2.touch.get_device", "type": "pygame._sdl2.touch", "text": "\nReturn an integer id associated with the given `index`.\n\n"}, {"name": "_sdl2.touch.get_finger", "path": "ref/touch#pygame._sdl2.touch.get_finger", "type": "pygame._sdl2.touch", "text": "\nReturn a dict for the finger `index` active on `touchid`. The dict contains\nthese keys:\n\n"}, {"name": "_sdl2.touch.get_num_devices", "path": "ref/touch#pygame._sdl2.touch.get_num_devices", "type": "pygame._sdl2.touch", "text": "\nReturn the number of available touch devices.\n\n"}, {"name": "_sdl2.touch.get_num_fingers", "path": "ref/touch#pygame._sdl2.touch.get_num_fingers", "type": "pygame._sdl2.touch", "text": "\nReturn the number of fingers active for the touch device whose id is touchid.\n\n"}, {"name": "BufferProxy", "path": "ref/bufferproxy", "type": "pygame.BufferProxy", "text": "\n`BufferProxy` is a pygame support type, designed as the return value of the\n`Surface.get_buffer()` and `Surface.get_view()` methods. For all Python\nversions a `BufferProxy` object exports a C struct and Python level array\ninterface on behalf of its parent object's buffer. For CPython 2.6 and later a\nnew buffer interface is also exported. In pygame, `BufferProxy` is key to\nimplementing the `pygame.surfarray` module.\n\n`BufferProxy` instances can be created directly from Python code, either for a\nparent that exports an interface, or from a Python `dict` describing an\nobject's buffer layout. The dict entries are based on the Python level array\ninterface mapping. The following keys are recognized:\n\nThe BufferProxy class supports subclassing, instance variables, and weak\nreferences.\n\nNew in pygame 1.8.0.\n\nExtended in pygame 1.9.2.\n\nThe `Surface` which returned the `BufferProxy` object or the object passed to\na `BufferProxy` call.\n\nThe number of valid bytes of data exported. For discontinuous data, that is\ndata which is not a single block of memory, the bytes within the gaps are\nexcluded from the count. This property is equivalent to the `Py_buffer` C\nstruct `len` field.\n\nThe buffer data as a `str`/`bytes` object. Any gaps in the exported data are\nremoved.\n\nOverwrite bytes in the parent object's data. The data must be C or F\ncontiguous, otherwise a ValueError is raised. Argument buffer is a\n`str`/`bytes` object. An optional offset gives a start position, in bytes,\nwithin the buffer where overwriting begins. If the offset is negative or\ngreater that or equal to the buffer proxy's `length` value, an\n`IndexException` is raised. If `len(buffer) > proxy.length + offset`, a\n`ValueError` is raised.\n\n"}, {"name": "BufferProxy.length", "path": "ref/bufferproxy#pygame.BufferProxy.length", "type": "pygame.BufferProxy", "text": "\nThe number of valid bytes of data exported. For discontinuous data, that is\ndata which is not a single block of memory, the bytes within the gaps are\nexcluded from the count. This property is equivalent to the `Py_buffer` C\nstruct `len` field.\n\n"}, {"name": "BufferProxy.parent", "path": "ref/bufferproxy#pygame.BufferProxy.parent", "type": "pygame.BufferProxy", "text": "\nThe `Surface` which returned the `BufferProxy` object or the object passed to\na `BufferProxy` call.\n\n"}, {"name": "BufferProxy.raw", "path": "ref/bufferproxy#pygame.BufferProxy.raw", "type": "pygame.BufferProxy", "text": "\nThe buffer data as a `str`/`bytes` object. Any gaps in the exported data are\nremoved.\n\n"}, {"name": "BufferProxy.write", "path": "ref/bufferproxy#pygame.BufferProxy.write", "type": "pygame.BufferProxy", "text": "\nOverwrite bytes in the parent object's data. The data must be C or F\ncontiguous, otherwise a ValueError is raised. Argument buffer is a\n`str`/`bytes` object. An optional offset gives a start position, in bytes,\nwithin the buffer where overwriting begins. If the offset is negative or\ngreater that or equal to the buffer proxy's `length` value, an\n`IndexException` is raised. If `len(buffer) > proxy.length + offset`, a\n`ValueError` is raised.\n\n"}, {"name": "camera", "path": "ref/camera", "type": "pygame.camera", "text": "\nPygame currently supports only Linux and v4l2 cameras.\n\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code will very likely break with the next pygame release.\n\nThe Bayer to `RGB` function is based on:\n\nNew in pygame 1.9.0.\n\nAllows for conversion from \"RGB\" to a destination colorspace of \"HSV\" or\n\"YUV\". The source and destination surfaces must be the same size and pixel\ndepth. This is useful for computer vision on devices with limited processing\npower. Capture as small of an image as possible, `transform.scale()` it even\nsmaller, and then convert the colorspace to `YUV` or `HSV` before doing any\nprocessing on it.\n\nChecks the computer for available cameras and returns a list of strings of\ncamera names, ready to be fed into `pygame.camera.Camera`.\n\nLoads a v4l2 camera. The device is typically something like \"/dev/video0\".\nDefault width and height are 640 by 480. Format is the desired colorspace of\nthe output. This is useful for computer vision purposes. The default is `RGB`.\nThe following are supported:\n\nOpens the camera device, attempts to initialize it, and begins recording\nimages to a buffer. The camera must be started before any of the below\nfunctions can be used.\n\nStops recording, uninitializes the camera, and closes it. Once a camera is\nstopped, the below functions cannot be used until it is started again.\n\nIf the camera supports it, get_controls will return the current settings for\nhorizontal and vertical image flip as bools and brightness as an int. If\nunsupported, it will return the default values of (0, 0, 0). Note that the\nreturn values here may be different than those returned by set_controls,\nthough these are more likely to be correct.\n\nAllows you to change camera settings if the camera supports it. The return\nvalues will be the input values if the camera claims it succeeded or the\nvalues previously in use if not. Each argument is optional, and the desired\none can be chosen by supplying the keyword, like hflip. Note that the actual\nsettings being used by the camera may not be the same as those returned by\nset_controls.\n\nReturns the current dimensions of the images being captured by the camera.\nThis will return the actual size, which may be different than the one\nspecified during initialization if the camera did not support that size.\n\nIf an image is ready to get, it returns true. Otherwise it returns false. Note\nthat some webcams will always return False and will only queue a frame when\ncalled with a blocking function like `get_image()`. This is useful to separate\nthe framerate of the game from that of the camera without having to use\nthreading.\n\nPulls an image off of the buffer as an `RGB` Surface. It can optionally reuse\nan existing Surface to save time. The bit-depth of the surface is either 24\nbits or the same as the optionally supplied Surface.\n\nGets an image from a camera as a string in the native pixelformat of the\ncamera. Useful for integration with other libraries.\n\n"}, {"name": "camera.Camera", "path": "ref/camera#pygame.camera.Camera", "type": "pygame.camera", "text": "\nLoads a v4l2 camera. The device is typically something like \"/dev/video0\".\nDefault width and height are 640 by 480. Format is the desired colorspace of\nthe output. This is useful for computer vision purposes. The default is `RGB`.\nThe following are supported:\n\nOpens the camera device, attempts to initialize it, and begins recording\nimages to a buffer. The camera must be started before any of the below\nfunctions can be used.\n\nStops recording, uninitializes the camera, and closes it. Once a camera is\nstopped, the below functions cannot be used until it is started again.\n\nIf the camera supports it, get_controls will return the current settings for\nhorizontal and vertical image flip as bools and brightness as an int. If\nunsupported, it will return the default values of (0, 0, 0). Note that the\nreturn values here may be different than those returned by set_controls,\nthough these are more likely to be correct.\n\nAllows you to change camera settings if the camera supports it. The return\nvalues will be the input values if the camera claims it succeeded or the\nvalues previously in use if not. Each argument is optional, and the desired\none can be chosen by supplying the keyword, like hflip. Note that the actual\nsettings being used by the camera may not be the same as those returned by\nset_controls.\n\nReturns the current dimensions of the images being captured by the camera.\nThis will return the actual size, which may be different than the one\nspecified during initialization if the camera did not support that size.\n\nIf an image is ready to get, it returns true. Otherwise it returns false. Note\nthat some webcams will always return False and will only queue a frame when\ncalled with a blocking function like `get_image()`. This is useful to separate\nthe framerate of the game from that of the camera without having to use\nthreading.\n\nPulls an image off of the buffer as an `RGB` Surface. It can optionally reuse\nan existing Surface to save time. The bit-depth of the surface is either 24\nbits or the same as the optionally supplied Surface.\n\nGets an image from a camera as a string in the native pixelformat of the\ncamera. Useful for integration with other libraries.\n\n"}, {"name": "camera.Camera.get_controls", "path": "ref/camera#pygame.camera.Camera.get_controls", "type": "pygame.camera", "text": "\nIf the camera supports it, get_controls will return the current settings for\nhorizontal and vertical image flip as bools and brightness as an int. If\nunsupported, it will return the default values of (0, 0, 0). Note that the\nreturn values here may be different than those returned by set_controls,\nthough these are more likely to be correct.\n\n"}, {"name": "camera.Camera.get_image", "path": "ref/camera#pygame.camera.Camera.get_image", "type": "pygame.camera", "text": "\nPulls an image off of the buffer as an `RGB` Surface. It can optionally reuse\nan existing Surface to save time. The bit-depth of the surface is either 24\nbits or the same as the optionally supplied Surface.\n\n"}, {"name": "camera.Camera.get_raw", "path": "ref/camera#pygame.camera.Camera.get_raw", "type": "pygame.camera", "text": "\nGets an image from a camera as a string in the native pixelformat of the\ncamera. Useful for integration with other libraries.\n\n"}, {"name": "camera.Camera.get_size", "path": "ref/camera#pygame.camera.Camera.get_size", "type": "pygame.camera", "text": "\nReturns the current dimensions of the images being captured by the camera.\nThis will return the actual size, which may be different than the one\nspecified during initialization if the camera did not support that size.\n\n"}, {"name": "camera.Camera.query_image", "path": "ref/camera#pygame.camera.Camera.query_image", "type": "pygame.camera", "text": "\nIf an image is ready to get, it returns true. Otherwise it returns false. Note\nthat some webcams will always return False and will only queue a frame when\ncalled with a blocking function like `get_image()`. This is useful to separate\nthe framerate of the game from that of the camera without having to use\nthreading.\n\n"}, {"name": "camera.Camera.set_controls", "path": "ref/camera#pygame.camera.Camera.set_controls", "type": "pygame.camera", "text": "\nAllows you to change camera settings if the camera supports it. The return\nvalues will be the input values if the camera claims it succeeded or the\nvalues previously in use if not. Each argument is optional, and the desired\none can be chosen by supplying the keyword, like hflip. Note that the actual\nsettings being used by the camera may not be the same as those returned by\nset_controls.\n\n"}, {"name": "camera.Camera.start", "path": "ref/camera#pygame.camera.Camera.start", "type": "pygame.camera", "text": "\nOpens the camera device, attempts to initialize it, and begins recording\nimages to a buffer. The camera must be started before any of the below\nfunctions can be used.\n\n"}, {"name": "camera.Camera.stop", "path": "ref/camera#pygame.camera.Camera.stop", "type": "pygame.camera", "text": "\nStops recording, uninitializes the camera, and closes it. Once a camera is\nstopped, the below functions cannot be used until it is started again.\n\n"}, {"name": "camera.colorspace", "path": "ref/camera#pygame.camera.colorspace", "type": "pygame.camera", "text": "\nAllows for conversion from \"RGB\" to a destination colorspace of \"HSV\" or\n\"YUV\". The source and destination surfaces must be the same size and pixel\ndepth. This is useful for computer vision on devices with limited processing\npower. Capture as small of an image as possible, `transform.scale()` it even\nsmaller, and then convert the colorspace to `YUV` or `HSV` before doing any\nprocessing on it.\n\n"}, {"name": "camera.list_cameras", "path": "ref/camera#pygame.camera.list_cameras", "type": "pygame.camera", "text": "\nChecks the computer for available cameras and returns a list of strings of\ncamera names, ready to be fed into `pygame.camera.Camera`.\n\n"}, {"name": "cdrom", "path": "ref/cdrom", "type": "pygame.cdrom", "text": "\nThe cdrom module manages the `CD` and `DVD` drives on a computer. It can also\ncontrol the playback of audio CDs. This module needs to be initialized before\nit can do anything. Each `CD` object you create represents a cdrom drive and\nmust also be initialized individually before it can do most things.\n\nInitialize the cdrom module. This will scan the system for all `CD` devices.\nThe module must be initialized before any other functions will work. This\nautomatically happens when you call `pygame.init()`.\n\nIt is safe to call this function more than once.\n\nUninitialize the cdrom module. After you call this any existing `CD` objects\nwill no longer work.\n\nIt is safe to call this function more than once.\n\nTest if the cdrom module is initialized or not. This is different than the\n`CD.init()` since each drive must also be initialized individually.\n\nReturn the number of cd drives on the system. When you create `CD` objects you\nneed to pass an integer id that must be lower than this count. The count will\nbe 0 if there are no drives on the system.\n\nYou can create a `CD` object for each cdrom on the system. Use\n`pygame.cdrom.get_count()` to determine how many drives actually exist. The id\nargument is an integer of the drive, starting at zero.\n\nThe `CD` object is not initialized, you can only call `CD.get_id()` and\n`CD.get_name()` on an uninitialized drive.\n\nIt is safe to create multiple `CD` objects for the same drive, they will all\ncooperate normally.\n\nInitialize the cdrom drive for use. The drive must be initialized for most\n`CD` methods to work. Even if the rest of pygame has been initialized.\n\nThere may be a brief pause while the drive is initialized. Avoid `CD.init()`\nif the program should not stop for a second or two.\n\nUninitialize a drive for use. Call this when your program will not be\naccessing the drive for awhile.\n\nTest if this `CDROM` device is initialized. This is different than the\n`pygame.cdrom.init()` since each drive must also be initialized individually.\n\nPlayback audio from an audio cdrom in the drive. Besides the track number\nargument, you can also pass a starting and ending time for playback. The start\nand end time are in seconds, and can limit the section of an audio track\nplayed.\n\nIf you pass a start time but no end, the audio will play to the end of the\ntrack. If you pass a start time and 'None' for the end time, the audio will\nplay to the end of the entire disc.\n\nSee the `CD.get_numtracks()` and `CD.get_track_audio()` to find tracks to\nplayback.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nStops playback of audio from the cdrom. This will also lose the current\nplayback position. This method does nothing if the drive isn't already playing\naudio.\n\nTemporarily stop audio playback on the `CD`. The playback can be resumed at\nthe same point with the `CD.resume()` method. If the `CD` is not playing this\nmethod does nothing.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nUnpause a paused `CD`. If the `CD` is not paused or already playing, this\nmethod does nothing.\n\nThis will open the cdrom drive and eject the cdrom. If the drive is playing or\npaused it will be stopped.\n\nReturns the integer id that was used to create the `CD` instance. This method\ncan work on an uninitialized `CD`.\n\nReturn the string name of the drive. This is the system name used to represent\nthe drive. It is often the drive letter or device name. This method can work\non an uninitialized `CD`.\n\nReturns True if the drive busy playing back audio.\n\nReturns True if the drive is currently paused.\n\nReturns both the current track and time of that track. This method works when\nthe drive is either playing or paused.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nReturn False if there is a cdrom currently in the drive. If the drive is empty\nthis will return True.\n\nReturn the number of tracks on the cdrom in the drive. This will return zero\nof the drive is empty or has no tracks.\n\nDetermine if a track on a cdrom contains audio data. You can also call\n`CD.num_tracks()` and `CD.get_all()` to determine more information about the\ncdrom.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nReturn a list with information for every track on the cdrom. The information\nconsists of a tuple with four values. The audio value is True if the track\ncontains audio data. The start, end, and length values are floating point\nnumbers in seconds. Start and end represent absolute times on the entire disc.\n\nReturn the absolute time in seconds where at start of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nReturn a floating point value in seconds of the length of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n"}, {"name": "cdrom.CD", "path": "ref/cdrom#pygame.cdrom.CD", "type": "pygame.cdrom", "text": "\nYou can create a `CD` object for each cdrom on the system. Use\n`pygame.cdrom.get_count()` to determine how many drives actually exist. The id\nargument is an integer of the drive, starting at zero.\n\nThe `CD` object is not initialized, you can only call `CD.get_id()` and\n`CD.get_name()` on an uninitialized drive.\n\nIt is safe to create multiple `CD` objects for the same drive, they will all\ncooperate normally.\n\nInitialize the cdrom drive for use. The drive must be initialized for most\n`CD` methods to work. Even if the rest of pygame has been initialized.\n\nThere may be a brief pause while the drive is initialized. Avoid `CD.init()`\nif the program should not stop for a second or two.\n\nUninitialize a drive for use. Call this when your program will not be\naccessing the drive for awhile.\n\nTest if this `CDROM` device is initialized. This is different than the\n`pygame.cdrom.init()` since each drive must also be initialized individually.\n\nPlayback audio from an audio cdrom in the drive. Besides the track number\nargument, you can also pass a starting and ending time for playback. The start\nand end time are in seconds, and can limit the section of an audio track\nplayed.\n\nIf you pass a start time but no end, the audio will play to the end of the\ntrack. If you pass a start time and 'None' for the end time, the audio will\nplay to the end of the entire disc.\n\nSee the `CD.get_numtracks()` and `CD.get_track_audio()` to find tracks to\nplayback.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nStops playback of audio from the cdrom. This will also lose the current\nplayback position. This method does nothing if the drive isn't already playing\naudio.\n\nTemporarily stop audio playback on the `CD`. The playback can be resumed at\nthe same point with the `CD.resume()` method. If the `CD` is not playing this\nmethod does nothing.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nUnpause a paused `CD`. If the `CD` is not paused or already playing, this\nmethod does nothing.\n\nThis will open the cdrom drive and eject the cdrom. If the drive is playing or\npaused it will be stopped.\n\nReturns the integer id that was used to create the `CD` instance. This method\ncan work on an uninitialized `CD`.\n\nReturn the string name of the drive. This is the system name used to represent\nthe drive. It is often the drive letter or device name. This method can work\non an uninitialized `CD`.\n\nReturns True if the drive busy playing back audio.\n\nReturns True if the drive is currently paused.\n\nReturns both the current track and time of that track. This method works when\nthe drive is either playing or paused.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nReturn False if there is a cdrom currently in the drive. If the drive is empty\nthis will return True.\n\nReturn the number of tracks on the cdrom in the drive. This will return zero\nof the drive is empty or has no tracks.\n\nDetermine if a track on a cdrom contains audio data. You can also call\n`CD.num_tracks()` and `CD.get_all()` to determine more information about the\ncdrom.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nReturn a list with information for every track on the cdrom. The information\nconsists of a tuple with four values. The audio value is True if the track\ncontains audio data. The start, end, and length values are floating point\nnumbers in seconds. Start and end represent absolute times on the entire disc.\n\nReturn the absolute time in seconds where at start of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nReturn a floating point value in seconds of the length of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n"}, {"name": "cdrom.CD.eject", "path": "ref/cdrom#pygame.cdrom.CD.eject", "type": "pygame.cdrom", "text": "\nThis will open the cdrom drive and eject the cdrom. If the drive is playing or\npaused it will be stopped.\n\n"}, {"name": "cdrom.CD.get_all", "path": "ref/cdrom#pygame.cdrom.CD.get_all", "type": "pygame.cdrom", "text": "\nReturn a list with information for every track on the cdrom. The information\nconsists of a tuple with four values. The audio value is True if the track\ncontains audio data. The start, end, and length values are floating point\nnumbers in seconds. Start and end represent absolute times on the entire disc.\n\n"}, {"name": "cdrom.CD.get_busy", "path": "ref/cdrom#pygame.cdrom.CD.get_busy", "type": "pygame.cdrom", "text": "\nReturns True if the drive busy playing back audio.\n\n"}, {"name": "cdrom.CD.get_current", "path": "ref/cdrom#pygame.cdrom.CD.get_current", "type": "pygame.cdrom", "text": "\nReturns both the current track and time of that track. This method works when\nthe drive is either playing or paused.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n"}, {"name": "cdrom.CD.get_empty", "path": "ref/cdrom#pygame.cdrom.CD.get_empty", "type": "pygame.cdrom", "text": "\nReturn False if there is a cdrom currently in the drive. If the drive is empty\nthis will return True.\n\n"}, {"name": "cdrom.CD.get_id", "path": "ref/cdrom#pygame.cdrom.CD.get_id", "type": "pygame.cdrom", "text": "\nReturns the integer id that was used to create the `CD` instance. This method\ncan work on an uninitialized `CD`.\n\n"}, {"name": "cdrom.CD.get_init", "path": "ref/cdrom#pygame.cdrom.CD.get_init", "type": "pygame.cdrom", "text": "\nTest if this `CDROM` device is initialized. This is different than the\n`pygame.cdrom.init()` since each drive must also be initialized individually.\n\n"}, {"name": "cdrom.CD.get_name", "path": "ref/cdrom#pygame.cdrom.CD.get_name", "type": "pygame.cdrom", "text": "\nReturn the string name of the drive. This is the system name used to represent\nthe drive. It is often the drive letter or device name. This method can work\non an uninitialized `CD`.\n\n"}, {"name": "cdrom.CD.get_numtracks", "path": "ref/cdrom#pygame.cdrom.CD.get_numtracks", "type": "pygame.cdrom", "text": "\nReturn the number of tracks on the cdrom in the drive. This will return zero\nof the drive is empty or has no tracks.\n\n"}, {"name": "cdrom.CD.get_paused", "path": "ref/cdrom#pygame.cdrom.CD.get_paused", "type": "pygame.cdrom", "text": "\nReturns True if the drive is currently paused.\n\n"}, {"name": "cdrom.CD.get_track_audio", "path": "ref/cdrom#pygame.cdrom.CD.get_track_audio", "type": "pygame.cdrom", "text": "\nDetermine if a track on a cdrom contains audio data. You can also call\n`CD.num_tracks()` and `CD.get_all()` to determine more information about the\ncdrom.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n"}, {"name": "cdrom.CD.get_track_length", "path": "ref/cdrom#pygame.cdrom.CD.get_track_length", "type": "pygame.cdrom", "text": "\nReturn a floating point value in seconds of the length of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n"}, {"name": "cdrom.CD.get_track_start", "path": "ref/cdrom#pygame.cdrom.CD.get_track_start", "type": "pygame.cdrom", "text": "\nReturn the absolute time in seconds where at start of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n"}, {"name": "cdrom.CD.init", "path": "ref/cdrom#pygame.cdrom.CD.init", "type": "pygame.cdrom", "text": "\nInitialize the cdrom drive for use. The drive must be initialized for most\n`CD` methods to work. Even if the rest of pygame has been initialized.\n\nThere may be a brief pause while the drive is initialized. Avoid `CD.init()`\nif the program should not stop for a second or two.\n\n"}, {"name": "cdrom.CD.pause", "path": "ref/cdrom#pygame.cdrom.CD.pause", "type": "pygame.cdrom", "text": "\nTemporarily stop audio playback on the `CD`. The playback can be resumed at\nthe same point with the `CD.resume()` method. If the `CD` is not playing this\nmethod does nothing.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n"}, {"name": "cdrom.CD.play", "path": "ref/cdrom#pygame.cdrom.CD.play", "type": "pygame.cdrom", "text": "\nPlayback audio from an audio cdrom in the drive. Besides the track number\nargument, you can also pass a starting and ending time for playback. The start\nand end time are in seconds, and can limit the section of an audio track\nplayed.\n\nIf you pass a start time but no end, the audio will play to the end of the\ntrack. If you pass a start time and 'None' for the end time, the audio will\nplay to the end of the entire disc.\n\nSee the `CD.get_numtracks()` and `CD.get_track_audio()` to find tracks to\nplayback.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n"}, {"name": "cdrom.CD.quit", "path": "ref/cdrom#pygame.cdrom.CD.quit", "type": "pygame.cdrom", "text": "\nUninitialize a drive for use. Call this when your program will not be\naccessing the drive for awhile.\n\n"}, {"name": "cdrom.CD.resume", "path": "ref/cdrom#pygame.cdrom.CD.resume", "type": "pygame.cdrom", "text": "\nUnpause a paused `CD`. If the `CD` is not paused or already playing, this\nmethod does nothing.\n\n"}, {"name": "cdrom.CD.stop", "path": "ref/cdrom#pygame.cdrom.CD.stop", "type": "pygame.cdrom", "text": "\nStops playback of audio from the cdrom. This will also lose the current\nplayback position. This method does nothing if the drive isn't already playing\naudio.\n\n"}, {"name": "cdrom.get_count", "path": "ref/cdrom#pygame.cdrom.get_count", "type": "pygame.cdrom", "text": "\nReturn the number of cd drives on the system. When you create `CD` objects you\nneed to pass an integer id that must be lower than this count. The count will\nbe 0 if there are no drives on the system.\n\n"}, {"name": "cdrom.get_init", "path": "ref/cdrom#pygame.cdrom.get_init", "type": "pygame.cdrom", "text": "\nTest if the cdrom module is initialized or not. This is different than the\n`CD.init()` since each drive must also be initialized individually.\n\n"}, {"name": "cdrom.init", "path": "ref/cdrom#pygame.cdrom.init", "type": "pygame.cdrom", "text": "\nInitialize the cdrom module. This will scan the system for all `CD` devices.\nThe module must be initialized before any other functions will work. This\nautomatically happens when you call `pygame.init()`.\n\nIt is safe to call this function more than once.\n\n"}, {"name": "cdrom.quit", "path": "ref/cdrom#pygame.cdrom.quit", "type": "pygame.cdrom", "text": "\nUninitialize the cdrom module. After you call this any existing `CD` objects\nwill no longer work.\n\nIt is safe to call this function more than once.\n\n"}, {"name": "Color", "path": "ref/color", "type": "pygame.Color", "text": "\nThe `Color` class represents `RGBA` color values using a value range of 0 to\n255 inclusive. It allows basic arithmetic operations \u2014 binary operations `+`,\n`-`, `*`, `//`, `%`, and unary operation `~` \u2014 to create new colors, supports\nconversions to other color spaces such as `HSV` or `HSL` and lets you adjust\nsingle color channels. Alpha defaults to 255 (fully opaque) when not given.\nThe arithmetic operations and `correct_gamma()` method preserve subclasses.\nFor the binary operators, the class of the returned color is that of the left\nhand color object of the operator.\n\nColor objects support equality comparison with other color objects and 3 or 4\nelement tuples of integers. There was a bug in pygame 1.8.1 where the default\nalpha was 0, not 255 like previously.\n\nColor objects export the C level array interface. The interface exports a\nread-only one dimensional unsigned byte array of the same assigned length as\nthe color. For CPython 2.6 and later, the new buffer interface is also\nexported, with the same characteristics as the array interface.\n\nThe floor division, `//`, and modulus, `%`, operators do not raise an\nexception for division by zero. Instead, if a color, or alpha, channel in the\nright hand color is 0, then the result is 0. For example:\n\ncolor value (see note below for the supported formats)\n\nNote\n\na newly created `Color` object\n\nColor\n\nChanged in pygame 2.0.0: Support for tuples, lists, and `Color` objects when\ncreating `Color` objects.\n\nChanged in pygame 1.9.2: Color objects export the C level array interface.\n\nChanged in pygame 1.9.0: Color objects support 4-element tuples of integers.\n\nChanged in pygame 1.8.1: New implementation of the class.\n\nThe red value of the Color.\n\nThe green value of the Color.\n\nThe blue value of the Color.\n\nThe alpha value of the Color.\n\nThe `CMY` representation of the Color. The `CMY` components are in the ranges\n`C` = [0, 1], `M` = [0, 1], `Y` = [0, 1]. Note that this will not return the\nabsolutely exact `CMY` values for the set `RGB` values in all cases. Due to\nthe `RGB` mapping from 0-255 and the `CMY` mapping from 0-1 rounding errors\nmay cause the `CMY` values to differ slightly from what you might expect.\n\nThe `HSVA` representation of the Color. The `HSVA` components are in the\nranges `H` = [0, 360], `S` = [0, 100], `V` = [0, 100], A = [0, 100]. Note that\nthis will not return the absolutely exact `HSV` values for the set `RGB`\nvalues in all cases. Due to the `RGB` mapping from 0-255 and the `HSV` mapping\nfrom 0-100 and 0-360 rounding errors may cause the `HSV` values to differ\nslightly from what you might expect.\n\nThe `HSLA` representation of the Color. The `HSLA` components are in the\nranges `H` = [0, 360], `S` = [0, 100], `V` = [0, 100], A = [0, 100]. Note that\nthis will not return the absolutely exact `HSL` values for the set `RGB`\nvalues in all cases. Due to the `RGB` mapping from 0-255 and the `HSL` mapping\nfrom 0-100 and 0-360 rounding errors may cause the `HSL` values to differ\nslightly from what you might expect.\n\nThe `I1I2I3` representation of the Color. The `I1I2I3` components are in the\nranges `I1` = [0, 1], `I2` = [-0.5, 0.5], `I3` = [-0.5, 0.5]. Note that this\nwill not return the absolutely exact `I1I2I3` values for the set `RGB` values\nin all cases. Due to the `RGB` mapping from 0-255 and the `I1I2I3` mapping\nfrom 0-1 rounding errors may cause the `I1I2I3` values to differ slightly from\nwhat you might expect.\n\nReturns the normalized `RGBA` values of the Color as floating point values.\n\nApplies a certain gamma value to the Color and returns a new Color with the\nadjusted `RGBA` values.\n\nThe default Color length is 4. Colors can have lengths 1,2,3 or 4. This is\nuseful if you want to unpack to r,g,b and not r,g,b,a. If you want to get the\nlength of a Color do `len(acolor)`.\n\nNew in pygame 1.9.0.\n\nReturns a Color which is a linear interpolation between self and the given\nColor in RGBA space. The second parameter determines how far between self and\nother the result is going to be. It must be a value between 0 and 1 where 0\nmeans self and 1 means other will be returned.\n\nNew in pygame 2.0.1.\n\nReturns a new Color where each of the red, green and blue colour channels have\nbeen multiplied by the alpha channel of the original color. The alpha channel\nremains unchanged.\n\nThis is useful when working with the `BLEND_PREMULTIPLIED` blending mode flag\nfor `pygame.Surface.blit()`, which assumes that all surfaces using it are\nusing pre-multiplied alpha colors.\n\nNew in pygame 2.0.0.\n\nSets the elements of the color. See parameters for `pygame.Color()` for the\nparameters of this function. If the alpha value was not set it will not\nchange.\n\nNew in pygame 2.0.1.\n\n"}, {"name": "Color.a", "path": "ref/color#pygame.Color.a", "type": "pygame.Color", "text": "\nThe alpha value of the Color.\n\n"}, {"name": "Color.b", "path": "ref/color#pygame.Color.b", "type": "pygame.Color", "text": "\nThe blue value of the Color.\n\n"}, {"name": "Color.cmy", "path": "ref/color#pygame.Color.cmy", "type": "pygame.Color", "text": "\nThe `CMY` representation of the Color. The `CMY` components are in the ranges\n`C` = [0, 1], `M` = [0, 1], `Y` = [0, 1]. Note that this will not return the\nabsolutely exact `CMY` values for the set `RGB` values in all cases. Due to\nthe `RGB` mapping from 0-255 and the `CMY` mapping from 0-1 rounding errors\nmay cause the `CMY` values to differ slightly from what you might expect.\n\n"}, {"name": "Color.correct_gamma", "path": "ref/color#pygame.Color.correct_gamma", "type": "pygame.Color", "text": "\nApplies a certain gamma value to the Color and returns a new Color with the\nadjusted `RGBA` values.\n\n"}, {"name": "Color.g", "path": "ref/color#pygame.Color.g", "type": "pygame.Color", "text": "\nThe green value of the Color.\n\n"}, {"name": "Color.hsla", "path": "ref/color#pygame.Color.hsla", "type": "pygame.Color", "text": "\nThe `HSLA` representation of the Color. The `HSLA` components are in the\nranges `H` = [0, 360], `S` = [0, 100], `V` = [0, 100], A = [0, 100]. Note that\nthis will not return the absolutely exact `HSL` values for the set `RGB`\nvalues in all cases. Due to the `RGB` mapping from 0-255 and the `HSL` mapping\nfrom 0-100 and 0-360 rounding errors may cause the `HSL` values to differ\nslightly from what you might expect.\n\n"}, {"name": "Color.hsva", "path": "ref/color#pygame.Color.hsva", "type": "pygame.Color", "text": "\nThe `HSVA` representation of the Color. The `HSVA` components are in the\nranges `H` = [0, 360], `S` = [0, 100], `V` = [0, 100], A = [0, 100]. Note that\nthis will not return the absolutely exact `HSV` values for the set `RGB`\nvalues in all cases. Due to the `RGB` mapping from 0-255 and the `HSV` mapping\nfrom 0-100 and 0-360 rounding errors may cause the `HSV` values to differ\nslightly from what you might expect.\n\n"}, {"name": "Color.i1i2i3", "path": "ref/color#pygame.Color.i1i2i3", "type": "pygame.Color", "text": "\nThe `I1I2I3` representation of the Color. The `I1I2I3` components are in the\nranges `I1` = [0, 1], `I2` = [-0.5, 0.5], `I3` = [-0.5, 0.5]. Note that this\nwill not return the absolutely exact `I1I2I3` values for the set `RGB` values\nin all cases. Due to the `RGB` mapping from 0-255 and the `I1I2I3` mapping\nfrom 0-1 rounding errors may cause the `I1I2I3` values to differ slightly from\nwhat you might expect.\n\n"}, {"name": "Color.lerp", "path": "ref/color#pygame.Color.lerp", "type": "pygame.Color", "text": "\nReturns a Color which is a linear interpolation between self and the given\nColor in RGBA space. The second parameter determines how far between self and\nother the result is going to be. It must be a value between 0 and 1 where 0\nmeans self and 1 means other will be returned.\n\nNew in pygame 2.0.1.\n\n"}, {"name": "Color.normalize", "path": "ref/color#pygame.Color.normalize", "type": "pygame.Color", "text": "\nReturns the normalized `RGBA` values of the Color as floating point values.\n\n"}, {"name": "Color.premul_alpha", "path": "ref/color#pygame.Color.premul_alpha", "type": "pygame.Color", "text": "\nReturns a new Color where each of the red, green and blue colour channels have\nbeen multiplied by the alpha channel of the original color. The alpha channel\nremains unchanged.\n\nThis is useful when working with the `BLEND_PREMULTIPLIED` blending mode flag\nfor `pygame.Surface.blit()`, which assumes that all surfaces using it are\nusing pre-multiplied alpha colors.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "Color.r", "path": "ref/color#pygame.Color.r", "type": "pygame.Color", "text": "\nThe red value of the Color.\n\n"}, {"name": "Color.set_length", "path": "ref/color#pygame.Color.set_length", "type": "pygame.Color", "text": "\nThe default Color length is 4. Colors can have lengths 1,2,3 or 4. This is\nuseful if you want to unpack to r,g,b and not r,g,b,a. If you want to get the\nlength of a Color do `len(acolor)`.\n\nNew in pygame 1.9.0.\n\n"}, {"name": "Color.update", "path": "ref/color#pygame.Color.update", "type": "pygame.Color", "text": "\nSets the elements of the color. See parameters for `pygame.Color()` for the\nparameters of this function. If the alpha value was not set it will not\nchange.\n\nNew in pygame 2.0.1.\n\n"}, {"name": "cursors", "path": "ref/cursors", "type": "pygame.cursors", "text": "\nPygame offers control over the system hardware cursor. Pygame only supports\nblack and white cursors for the system. You control the cursor with functions\ninside `pygame.mouse`.\n\nThis cursors module contains functions for loading and decoding various cursor\nformats. These allow you to easily store your cursors in external files or\ndirectly as encoded python strings.\n\nThe module includes several standard cursors. The `pygame.mouse.set_cursor()`\nfunction takes several arguments. All those arguments have been stored in a\nsingle tuple you can call like this:\n\nThe following variables can be passed to `pygame.mouse.set_cursor` function:\n\nThis module also contains a few cursors as formatted strings. You'll need to\npass these to `pygame.cursors.compile()` function before you can use them. The\nexample call would look like this:\n\nThe following strings can be converted into cursor bitmaps with\n`pygame.cursors.compile()` :\n\nA sequence of strings can be used to create binary cursor data for the system\ncursor. This returns the binary data in the form of two tuples. Those can be\npassed as the third and fourth arguments respectively of the\n`pygame.mouse.set_cursor()` function.\n\nIf you are creating your own cursor strings, you can use any value represent\nthe black and white pixels. Some system allow you to set a special toggle\ncolor for the system color, this is also called the xor color. If the system\ndoes not support xor cursors, that color will simply be black.\n\nThe height must be divisible by 8. The width of the strings must all be equal\nand be divisible by 8. If these two conditions are not met, `ValueError` is\nraised. An example set of cursor strings looks like this\n\nThis loads cursors for a simple subset of `XBM` files. `XBM` files are\ntraditionally used to store cursors on UNIX systems, they are an ASCII format\nused to represent simple images.\n\nSometimes the black and white color values will be split into two separate\n`XBM` files. You can pass a second maskfile argument to load the two images\ninto a single cursor.\n\nThe cursorfile and maskfile arguments can either be filenames or file-like\nobject with the readlines method.\n\nThe return value cursor_args can be passed directly to the\n`pygame.mouse.set_cursor()` function.\n\n"}, {"name": "cursors.compile", "path": "ref/cursors#pygame.cursors.compile", "type": "pygame.cursors", "text": "\nA sequence of strings can be used to create binary cursor data for the system\ncursor. This returns the binary data in the form of two tuples. Those can be\npassed as the third and fourth arguments respectively of the\n`pygame.mouse.set_cursor()` function.\n\nIf you are creating your own cursor strings, you can use any value represent\nthe black and white pixels. Some system allow you to set a special toggle\ncolor for the system color, this is also called the xor color. If the system\ndoes not support xor cursors, that color will simply be black.\n\nThe height must be divisible by 8. The width of the strings must all be equal\nand be divisible by 8. If these two conditions are not met, `ValueError` is\nraised. An example set of cursor strings looks like this\n\n"}, {"name": "cursors.load_xbm", "path": "ref/cursors#pygame.cursors.load_xbm", "type": "pygame.cursors", "text": "\nThis loads cursors for a simple subset of `XBM` files. `XBM` files are\ntraditionally used to store cursors on UNIX systems, they are an ASCII format\nused to represent simple images.\n\nSometimes the black and white color values will be split into two separate\n`XBM` files. You can pass a second maskfile argument to load the two images\ninto a single cursor.\n\nThe cursorfile and maskfile arguments can either be filenames or file-like\nobject with the readlines method.\n\nThe return value cursor_args can be passed directly to the\n`pygame.mouse.set_cursor()` function.\n\n"}, {"name": "display", "path": "ref/display", "type": "pygame.display", "text": "\nThis module offers control over the pygame display. Pygame has a single\ndisplay Surface that is either contained in a window or runs full screen. Once\nyou create the display you treat it as a regular Surface. Changes are not\nimmediately visible onscreen; you must choose one of the two flipping\nfunctions to update the actual display.\n\nThe origin of the display, where x = 0 and y = 0, is the top left of the\nscreen. Both axes increase positively towards the bottom right of the screen.\n\nThe pygame display can actually be initialized in one of several modes. By\ndefault, the display is a basic software driven framebuffer. You can request\nspecial modules like hardware acceleration and OpenGL support. These are\ncontrolled by flags passed to `pygame.display.set_mode()`.\n\nPygame can only have a single display active at any time. Creating a new one\nwith `pygame.display.set_mode()` will close the previous display. If precise\ncontrol is needed over the pixel format or display resolutions, use the\nfunctions `pygame.display.mode_ok()`, `pygame.display.list_modes()`, and\n`pygame.display.Info()` to query information about the display.\n\nOnce the display Surface is created, the functions from this module affect the\nsingle existing display. The Surface becomes invalid if the module is\nuninitialized. If a new display mode is set, the existing Surface will\nautomatically switch to operate on the new display.\n\nWhen the display mode is set, several events are placed on the pygame event\nqueue. `pygame.QUIT` is sent when the user has requested the program to shut\ndown. The window will receive `pygame.ACTIVEEVENT` events as the display gains\nand loses input focus. If the display is set with the `pygame.RESIZABLE` flag,\n`pygame.VIDEORESIZE` events will be sent when the user adjusts the window\ndimensions. Hardware displays that draw direct to the screen will get\n`pygame.VIDEOEXPOSE` events when portions of the window must be redrawn.\n\nIn pygame 2, there is a new type of event called `pygame.WINDOWEVENT` that is\nmeant to replace all window related events like `pygame.VIDEORESIZE`,\n`pygame.VIDEOEXPOSE` and `pygame.ACTIVEEVENT`.\n\nNote that the WINDOWEVENT API is considered experimental, and may change in\nfuture releases.\n\nThe new events of type `pygame.WINDOWEVENT` have an `event` attribute that can\ntake the following values.\n\nIf SDL version used is less than 2.0.5, the last two values\n`WINDOWEVENT_TAKE_FOCUS` and `WINDOWEVENT_HIT_TEST` will not work. See the SDL\nimplementation (in C programming) of the same over here.\n\nSome display environments have an option for automatically stretching all\nwindows. When this option is enabled, this automatic stretching distorts the\nappearance of the pygame window. In the pygame examples directory, there is\nexample code (prevent_display_stretching.py) which shows how to disable this\nautomatic stretching of the pygame display on Microsoft Windows (Vista or\nnewer required).\n\nInitializes the pygame display module. The display module cannot do anything\nuntil it is initialized. This is usually handled for you automatically when\nyou call the higher level `pygame.init()`.\n\nPygame will select from one of several internal display backends when it is\ninitialized. The display mode will be chosen depending on the platform and\npermissions of current user. Before the display module is initialized the\nenvironment variable `SDL_VIDEODRIVER` can be set to control which backend is\nused. The systems with multiple choices are listed here.\n\nOn some platforms it is possible to embed the pygame display into an already\nexisting window. To do this, the environment variable `SDL_WINDOWID` must be\nset to a string containing the window id or handle. The environment variable\nis checked when the pygame display is initialized. Be aware that there can be\nmany strange side effects when running in an embedded display.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\nThis will shut down the entire display module. This means any active displays\nwill be closed. This will also be handled automatically when the program\nexits.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\nReturns True if the `pygame.display` module is currently initialized.\n\nThis function will create a display Surface. The arguments passed in are\nrequests for a display type. The actual created display will be the best\npossible match supported by the system.\n\nThe size argument is a pair of numbers representing the width and height. The\nflags argument is a collection of additional options. The depth argument\nrepresents the number of bits to use for color.\n\nThe Surface that gets returned can be drawn to like a regular Surface but\nchanges will eventually be seen on the monitor.\n\nIf no size is passed or is set to `(0, 0)` and pygame uses `SDL` version\n1.2.10 or above, the created Surface will have the same size as the current\nscreen resolution. If only the width or height are set to `0`, the Surface\nwill have the same width or height as the screen resolution. Using a `SDL`\nversion prior to 1.2.10 will raise an exception.\n\nIt is usually best to not pass the depth argument. It will default to the best\nand fastest color depth for the system. If your game requires a specific color\nformat you can control the depth with this argument. Pygame will emulate an\nunavailable color depth which can be slow.\n\nWhen requesting fullscreen display modes, sometimes an exact match for the\nrequested size cannot be made. In these situations pygame will select the\nclosest compatible match. The returned surface will still always match the\nrequested size.\n\nOn high resolution displays(4k, 1080p) and tiny graphics games (640x480) show\nup very small so that they are unplayable. SCALED scales up the window for\nyou. The game thinks it's a 640x480 window, but really it can be bigger. Mouse\nevents are scaled for you, so your game doesn't need to do it. Note that\nSCALED is considered an experimental API and may change in future releases.\n\nThe flags argument controls which type of display you want. There are several\nto choose from, and you can even combine multiple types using the bitwise or\noperator, (the pipe \"|\" character). If you pass `0` or no flags argument it\nwill default to a software driven window. Here are the display flags you will\nwant to choose from:\n\nPygame 2 has the following additional flags available.\n\nNew in pygame 2.0.0: `SCALED`, `SHOWN` and `HIDDEN`\n\nBy setting the `vsync` parameter to `1`, it is possible to get a display with\nvertical sync, but you are not guaranteed to get one. The request only works\nat all for calls to `set_mode()` with the `pygame.OPENGL` or `pygame.SCALED`\nflags set, and is still not guaranteed even with one of those set. What you\nget depends on the hardware and driver configuration of the system pygame is\nrunning on. Here is an example usage of a call to `set_mode()` that may give\nyou a display with vsync:\n\nVsync behaviour is considered experimental, and may change in future releases.\n\nNew in pygame 2.0.0: `vsync`\n\nBasic example:\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\nReturn a reference to the currently set display Surface. If no display mode\nhas been set this will return None.\n\nThis will update the contents of the entire display. If your display mode is\nusing the flags `pygame.HWSURFACE` and `pygame.DOUBLEBUF`, this will wait for\na vertical retrace and swap the surfaces. If you are using a different type of\ndisplay mode, it will simply update the entire contents of the surface.\n\nWhen using an `pygame.OPENGL` display mode this will perform a gl buffer swap.\n\nThis function is like an optimized version of `pygame.display.flip()` for\nsoftware displays. It allows only a portion of the screen to updated, instead\nof the entire area. If no argument is passed it updates the entire Surface\narea like `pygame.display.flip()`.\n\nYou can pass the function a single rectangle, or a sequence of rectangles. It\nis more efficient to pass many rectangles at once than to call update multiple\ntimes with single or a partial list of rectangles. If passing a sequence of\nrectangles it is safe to include None values in the list, which will be\nskipped.\n\nThis call cannot be used on `pygame.OPENGL` displays and will generate an\nexception.\n\nPygame chooses one of many available display backends when it is initialized.\nThis returns the internal name used for the display backend. This can be used\nto provide limited information about what display capabilities might be\naccelerated. See the `SDL_VIDEODRIVER` flags in `pygame.display.set_mode()` to\nsee some of the common options.\n\nCreates a simple object containing several attributes to describe the current\ngraphics environment. If this is called before `pygame.display.set_mode()`\nsome platforms can provide information about the default display mode. This\ncan also be called after setting the display mode to verify specific display\noptions were satisfied. The VidInfo object has several attributes:\n\nCreates a dictionary filled with string keys. The strings and values are\narbitrarily created by the system. Some systems may have no information and an\nempty dictionary will be returned. Most platforms will return a \"window\" key\nwith the value set to the system id for the current display.\n\nNew in pygame 1.7.1.\n\nThis function returns a list of possible sizes for a specified color depth.\nThe return value will be an empty list if no display modes are available with\nthe given arguments. A return value of `-1` means that any requested size\nshould work (this is likely the case for windowed modes). Mode sizes are\nsorted from biggest to smallest.\n\nIf depth is `0`, the current/best color depth for the display is used. The\nflags defaults to `pygame.FULLSCREEN`, but you may need to add additional\nflags for specific fullscreen modes.\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\nThis function uses the same arguments as `pygame.display.set_mode()`. It is\nused to determine if a requested display mode is available. It will return `0`\nif the display mode cannot be set. Otherwise it will return a pixel depth that\nbest matches the display asked for.\n\nUsually the depth argument is not passed, but some platforms can support\nmultiple display depths. If passed it will hint to which depth is a better\nmatch.\n\nThe most useful flags to pass will be `pygame.HWSURFACE`, `pygame.DOUBLEBUF`,\nand maybe `pygame.FULLSCREEN`. The function will return 0 if these display\nflags cannot be set.\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\nAfter calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, it is\na good idea to check the value of any requested OpenGL attributes. See\n`pygame.display.gl_set_attribute()` for a list of valid flags.\n\nWhen calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, Pygame\nautomatically handles setting the OpenGL attributes like color and double-\nbuffering. OpenGL offers several other attributes you may want control over.\nPass one of these attributes as the flag, and its appropriate value. This must\nbe called before `pygame.display.set_mode()`.\n\nMany settings are the requested minimum. Creating a window with an OpenGL\ncontext will fail if OpenGL cannot provide the requested attribute, but it may\nfor example give you a stencil buffer even if you request none, or it may give\nyou a larger one than requested.\n\nThe `OPENGL` flags are:\n\n`GL_MULTISAMPLEBUFFERS`\n\nWhether to enable multisampling anti-aliasing. Defaults to 0 (disabled).\n\nSet `GL_MULTISAMPLESAMPLES` to a value above 0 to control the amount of anti-\naliasing. A typical value is 2 or 3.\n\n`GL_STENCIL_SIZE`\n\n`GL_DEPTH_SIZE`\n\n`GL_STEREO`\n\n`GL_BUFFER_SIZE`\n\nNew in pygame 2.0.0: Additional attributes:\n\n`GL_CONTEXT_PROFILE_MASK`\n\nSets the OpenGL profile to one of these values:\n\n`GL_ACCELERATED_VISUAL`\n\nReturns True when the display Surface is considered actively renderable on the\nscreen and may be visible to the user. This is the default state immediately\nafter `pygame.display.set_mode()`. This method may return True even if the\napplication is fully hidden behind another application window.\n\nThis will return False if the display Surface has been iconified or minimized\n(either via `pygame.display.iconify()` or via an OS specific method such as\nthe minimize-icon available on most desktops).\n\nThe method can also return False for other reasons without the application\nbeing explicitly iconified or minimized by the user. A notable example being\nif the user has multiple virtual desktops and the display Surface is not on\nthe active virtual desktop.\n\nNote\n\nThis function returning True is unrelated to whether the application has input\nfocus. Please see `pygame.key.get_focused()` and `pygame.mouse.get_focused()`\nfor APIs related to input focus.\n\nRequest the window for the display surface be iconified or hidden. Not all\nsystems and displays support an iconified display. The function will return\nTrue if successful.\n\nWhen the display is iconified `pygame.display.get_active()` will return\n`False`. The event queue should receive an `ACTIVEEVENT` event when the window\nhas been iconified. Additionally, the event queue also recieves a\n`WINDOWEVENT_MINIMIZED` event when the window has been iconified on pygame 2.\n\nSwitches the display window between windowed and fullscreen modes. Display\ndriver support is not great when using pygame 1, but with pygame 2 it is the\nmost reliable method to switch to and from fullscreen.\n\nSupported display drivers in pygame 1:\n\nSupported display drivers in pygame 2:\n\nSet the red, green, and blue gamma values on the display hardware. If the\ngreen and blue arguments are not passed, they will both be the same as red.\nNot all systems and hardware support gamma ramps, if the function succeeds it\nwill return `True`.\n\nA gamma value of `1.0` creates a linear color table. Lower values will darken\nthe display and higher values will brighten.\n\nSet the red, green, and blue gamma ramps with an explicit lookup table. Each\nargument should be sequence of 256 integers. The integers should range between\n`0` and `0xffff`. Not all systems and hardware support gamma ramps, if the\nfunction succeeds it will return `True`.\n\nSets the runtime icon the system will use to represent the display window. All\nwindows default to a simple pygame logo for the window icon.\n\nYou can pass any surface, but most systems want a smaller image around 32x32.\nThe image can have colorkey transparency which will be passed to the system.\n\nSome systems do not allow the window icon to change after it has been shown.\nThis function can be called before `pygame.display.set_mode()` to create the\nicon before the display mode is set.\n\nIf the display has a window title, this function will change the name on the\nwindow. Some systems support an alternate shorter title to be used for\nminimized displays.\n\nReturns the title and icontitle for the display Surface. These will often be\nthe same value.\n\nThis will change the video display color palette for 8-bit displays. This does\nnot change the palette for the actual display Surface, only the palette that\nis used to display the Surface. If no palette argument is passed, the system\ndefault palette will be restored. The palette is a sequence of `RGB` triplets.\n\nReturns the number of available displays. This is always 1 if\n`pygame.get_sdl_version()` returns a major version number below 2.\n\nNew in pygame 1.9.5.\n\nReturns the size of the window initialized with `pygame.display.set_mode()`.\nThis may differ from the size of the display surface if `SCALED` is used.\n\nNew in pygame 2.0.0.\n\nReturn whether screensaver is allowed to run whilst the app is running.\nDefault is `False`. By default pygame does not allow the screensaver during\ngame play.\n\nNote\n\nSome platforms do not have a screensaver or support disabling the screensaver.\nPlease see `pygame.display.set_allow_screensaver()` for caveats with\nscreensaver support.\n\nNew in pygame 2.0.0.\n\nChange whether screensavers should be allowed whilst the app is running. The\ndefault is False. By default pygame does not allow the screensaver during game\nplay.\n\nIf the screensaver has been disallowed due to this function, it will\nautomatically be allowed to run when `pygame.quit()` is called.\n\nIt is possible to influence the default value via the environment variable\n`SDL_HINT_VIDEO_ALLOW_SCREENSAVER`, which can be set to either `0` (disable)\nor `1` (enable).\n\nNote\n\nDisabling screensaver is subject to platform support. When platform support is\nabsent, this function will silently appear to work even though the screensaver\nstate is unchanged. The lack of feedback is due to SDL not providing any\nsupported method for determining whether it supports changing the screensaver\nstate. `SDL_HINT_VIDEO_ALLOW_SCREENSAVER` is available in SDL 2.0.2 or later.\nSDL1.2 does not implement this.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "display.flip", "path": "ref/display#pygame.display.flip", "type": "pygame.display", "text": "\nThis will update the contents of the entire display. If your display mode is\nusing the flags `pygame.HWSURFACE` and `pygame.DOUBLEBUF`, this will wait for\na vertical retrace and swap the surfaces. If you are using a different type of\ndisplay mode, it will simply update the entire contents of the surface.\n\nWhen using an `pygame.OPENGL` display mode this will perform a gl buffer swap.\n\n"}, {"name": "display.get_active", "path": "ref/display#pygame.display.get_active", "type": "pygame.display", "text": "\nReturns True when the display Surface is considered actively renderable on the\nscreen and may be visible to the user. This is the default state immediately\nafter `pygame.display.set_mode()`. This method may return True even if the\napplication is fully hidden behind another application window.\n\nThis will return False if the display Surface has been iconified or minimized\n(either via `pygame.display.iconify()` or via an OS specific method such as\nthe minimize-icon available on most desktops).\n\nThe method can also return False for other reasons without the application\nbeing explicitly iconified or minimized by the user. A notable example being\nif the user has multiple virtual desktops and the display Surface is not on\nthe active virtual desktop.\n\nNote\n\nThis function returning True is unrelated to whether the application has input\nfocus. Please see `pygame.key.get_focused()` and `pygame.mouse.get_focused()`\nfor APIs related to input focus.\n\n"}, {"name": "display.get_allow_screensaver", "path": "ref/display#pygame.display.get_allow_screensaver", "type": "pygame.display", "text": "\nReturn whether screensaver is allowed to run whilst the app is running.\nDefault is `False`. By default pygame does not allow the screensaver during\ngame play.\n\nNote\n\nSome platforms do not have a screensaver or support disabling the screensaver.\nPlease see `pygame.display.set_allow_screensaver()` for caveats with\nscreensaver support.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "display.get_caption", "path": "ref/display#pygame.display.get_caption", "type": "pygame.display", "text": "\nReturns the title and icontitle for the display Surface. These will often be\nthe same value.\n\n"}, {"name": "display.get_driver", "path": "ref/display#pygame.display.get_driver", "type": "pygame.display", "text": "\nPygame chooses one of many available display backends when it is initialized.\nThis returns the internal name used for the display backend. This can be used\nto provide limited information about what display capabilities might be\naccelerated. See the `SDL_VIDEODRIVER` flags in `pygame.display.set_mode()` to\nsee some of the common options.\n\n"}, {"name": "display.get_init", "path": "ref/display#pygame.display.get_init", "type": "pygame.display", "text": "\nReturns True if the `pygame.display` module is currently initialized.\n\n"}, {"name": "display.get_num_displays", "path": "ref/display#pygame.display.get_num_displays", "type": "pygame.display", "text": "\nReturns the number of available displays. This is always 1 if\n`pygame.get_sdl_version()` returns a major version number below 2.\n\nNew in pygame 1.9.5.\n\n"}, {"name": "display.get_surface", "path": "ref/display#pygame.display.get_surface", "type": "pygame.display", "text": "\nReturn a reference to the currently set display Surface. If no display mode\nhas been set this will return None.\n\n"}, {"name": "display.get_window_size", "path": "ref/display#pygame.display.get_window_size", "type": "pygame.display", "text": "\nReturns the size of the window initialized with `pygame.display.set_mode()`.\nThis may differ from the size of the display surface if `SCALED` is used.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "display.get_wm_info", "path": "ref/display#pygame.display.get_wm_info", "type": "pygame.display", "text": "\nCreates a dictionary filled with string keys. The strings and values are\narbitrarily created by the system. Some systems may have no information and an\nempty dictionary will be returned. Most platforms will return a \"window\" key\nwith the value set to the system id for the current display.\n\nNew in pygame 1.7.1.\n\n"}, {"name": "display.gl_get_attribute", "path": "ref/display#pygame.display.gl_get_attribute", "type": "pygame.display", "text": "\nAfter calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, it is\na good idea to check the value of any requested OpenGL attributes. See\n`pygame.display.gl_set_attribute()` for a list of valid flags.\n\n"}, {"name": "display.gl_set_attribute", "path": "ref/display#pygame.display.gl_set_attribute", "type": "pygame.display", "text": "\nWhen calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, Pygame\nautomatically handles setting the OpenGL attributes like color and double-\nbuffering. OpenGL offers several other attributes you may want control over.\nPass one of these attributes as the flag, and its appropriate value. This must\nbe called before `pygame.display.set_mode()`.\n\nMany settings are the requested minimum. Creating a window with an OpenGL\ncontext will fail if OpenGL cannot provide the requested attribute, but it may\nfor example give you a stencil buffer even if you request none, or it may give\nyou a larger one than requested.\n\nThe `OPENGL` flags are:\n\n`GL_MULTISAMPLEBUFFERS`\n\nWhether to enable multisampling anti-aliasing. Defaults to 0 (disabled).\n\nSet `GL_MULTISAMPLESAMPLES` to a value above 0 to control the amount of anti-\naliasing. A typical value is 2 or 3.\n\n`GL_STENCIL_SIZE`\n\n`GL_DEPTH_SIZE`\n\n`GL_STEREO`\n\n`GL_BUFFER_SIZE`\n\nNew in pygame 2.0.0: Additional attributes:\n\n`GL_CONTEXT_PROFILE_MASK`\n\nSets the OpenGL profile to one of these values:\n\n`GL_ACCELERATED_VISUAL`\n\n"}, {"name": "display.iconify", "path": "ref/display#pygame.display.iconify", "type": "pygame.display", "text": "\nRequest the window for the display surface be iconified or hidden. Not all\nsystems and displays support an iconified display. The function will return\nTrue if successful.\n\nWhen the display is iconified `pygame.display.get_active()` will return\n`False`. The event queue should receive an `ACTIVEEVENT` event when the window\nhas been iconified. Additionally, the event queue also recieves a\n`WINDOWEVENT_MINIMIZED` event when the window has been iconified on pygame 2.\n\n"}, {"name": "display.Info", "path": "ref/display#pygame.display.Info", "type": "pygame.display", "text": "\nCreates a simple object containing several attributes to describe the current\ngraphics environment. If this is called before `pygame.display.set_mode()`\nsome platforms can provide information about the default display mode. This\ncan also be called after setting the display mode to verify specific display\noptions were satisfied. The VidInfo object has several attributes:\n\n"}, {"name": "display.init", "path": "ref/display#pygame.display.init", "type": "pygame.display", "text": "\nInitializes the pygame display module. The display module cannot do anything\nuntil it is initialized. This is usually handled for you automatically when\nyou call the higher level `pygame.init()`.\n\nPygame will select from one of several internal display backends when it is\ninitialized. The display mode will be chosen depending on the platform and\npermissions of current user. Before the display module is initialized the\nenvironment variable `SDL_VIDEODRIVER` can be set to control which backend is\nused. The systems with multiple choices are listed here.\n\nOn some platforms it is possible to embed the pygame display into an already\nexisting window. To do this, the environment variable `SDL_WINDOWID` must be\nset to a string containing the window id or handle. The environment variable\nis checked when the pygame display is initialized. Be aware that there can be\nmany strange side effects when running in an embedded display.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\n"}, {"name": "display.list_modes", "path": "ref/display#pygame.display.list_modes", "type": "pygame.display", "text": "\nThis function returns a list of possible sizes for a specified color depth.\nThe return value will be an empty list if no display modes are available with\nthe given arguments. A return value of `-1` means that any requested size\nshould work (this is likely the case for windowed modes). Mode sizes are\nsorted from biggest to smallest.\n\nIf depth is `0`, the current/best color depth for the display is used. The\nflags defaults to `pygame.FULLSCREEN`, but you may need to add additional\nflags for specific fullscreen modes.\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\n"}, {"name": "display.mode_ok", "path": "ref/display#pygame.display.mode_ok", "type": "pygame.display", "text": "\nThis function uses the same arguments as `pygame.display.set_mode()`. It is\nused to determine if a requested display mode is available. It will return `0`\nif the display mode cannot be set. Otherwise it will return a pixel depth that\nbest matches the display asked for.\n\nUsually the depth argument is not passed, but some platforms can support\nmultiple display depths. If passed it will hint to which depth is a better\nmatch.\n\nThe most useful flags to pass will be `pygame.HWSURFACE`, `pygame.DOUBLEBUF`,\nand maybe `pygame.FULLSCREEN`. The function will return 0 if these display\nflags cannot be set.\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\n"}, {"name": "display.quit", "path": "ref/display#pygame.display.quit", "type": "pygame.display", "text": "\nThis will shut down the entire display module. This means any active displays\nwill be closed. This will also be handled automatically when the program\nexits.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\n"}, {"name": "display.set_allow_screensaver", "path": "ref/display#pygame.display.set_allow_screensaver", "type": "pygame.display", "text": "\nChange whether screensavers should be allowed whilst the app is running. The\ndefault is False. By default pygame does not allow the screensaver during game\nplay.\n\nIf the screensaver has been disallowed due to this function, it will\nautomatically be allowed to run when `pygame.quit()` is called.\n\nIt is possible to influence the default value via the environment variable\n`SDL_HINT_VIDEO_ALLOW_SCREENSAVER`, which can be set to either `0` (disable)\nor `1` (enable).\n\nNote\n\nDisabling screensaver is subject to platform support. When platform support is\nabsent, this function will silently appear to work even though the screensaver\nstate is unchanged. The lack of feedback is due to SDL not providing any\nsupported method for determining whether it supports changing the screensaver\nstate. `SDL_HINT_VIDEO_ALLOW_SCREENSAVER` is available in SDL 2.0.2 or later.\nSDL1.2 does not implement this.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "display.set_caption", "path": "ref/display#pygame.display.set_caption", "type": "pygame.display", "text": "\nIf the display has a window title, this function will change the name on the\nwindow. Some systems support an alternate shorter title to be used for\nminimized displays.\n\n"}, {"name": "display.set_gamma", "path": "ref/display#pygame.display.set_gamma", "type": "pygame.display", "text": "\nSet the red, green, and blue gamma values on the display hardware. If the\ngreen and blue arguments are not passed, they will both be the same as red.\nNot all systems and hardware support gamma ramps, if the function succeeds it\nwill return `True`.\n\nA gamma value of `1.0` creates a linear color table. Lower values will darken\nthe display and higher values will brighten.\n\n"}, {"name": "display.set_gamma_ramp", "path": "ref/display#pygame.display.set_gamma_ramp", "type": "pygame.display", "text": "\nSet the red, green, and blue gamma ramps with an explicit lookup table. Each\nargument should be sequence of 256 integers. The integers should range between\n`0` and `0xffff`. Not all systems and hardware support gamma ramps, if the\nfunction succeeds it will return `True`.\n\n"}, {"name": "display.set_icon", "path": "ref/display#pygame.display.set_icon", "type": "pygame.display", "text": "\nSets the runtime icon the system will use to represent the display window. All\nwindows default to a simple pygame logo for the window icon.\n\nYou can pass any surface, but most systems want a smaller image around 32x32.\nThe image can have colorkey transparency which will be passed to the system.\n\nSome systems do not allow the window icon to change after it has been shown.\nThis function can be called before `pygame.display.set_mode()` to create the\nicon before the display mode is set.\n\n"}, {"name": "display.set_mode", "path": "ref/display#pygame.display.set_mode", "type": "pygame.display", "text": "\nThis function will create a display Surface. The arguments passed in are\nrequests for a display type. The actual created display will be the best\npossible match supported by the system.\n\nThe size argument is a pair of numbers representing the width and height. The\nflags argument is a collection of additional options. The depth argument\nrepresents the number of bits to use for color.\n\nThe Surface that gets returned can be drawn to like a regular Surface but\nchanges will eventually be seen on the monitor.\n\nIf no size is passed or is set to `(0, 0)` and pygame uses `SDL` version\n1.2.10 or above, the created Surface will have the same size as the current\nscreen resolution. If only the width or height are set to `0`, the Surface\nwill have the same width or height as the screen resolution. Using a `SDL`\nversion prior to 1.2.10 will raise an exception.\n\nIt is usually best to not pass the depth argument. It will default to the best\nand fastest color depth for the system. If your game requires a specific color\nformat you can control the depth with this argument. Pygame will emulate an\nunavailable color depth which can be slow.\n\nWhen requesting fullscreen display modes, sometimes an exact match for the\nrequested size cannot be made. In these situations pygame will select the\nclosest compatible match. The returned surface will still always match the\nrequested size.\n\nOn high resolution displays(4k, 1080p) and tiny graphics games (640x480) show\nup very small so that they are unplayable. SCALED scales up the window for\nyou. The game thinks it's a 640x480 window, but really it can be bigger. Mouse\nevents are scaled for you, so your game doesn't need to do it. Note that\nSCALED is considered an experimental API and may change in future releases.\n\nThe flags argument controls which type of display you want. There are several\nto choose from, and you can even combine multiple types using the bitwise or\noperator, (the pipe \"|\" character). If you pass `0` or no flags argument it\nwill default to a software driven window. Here are the display flags you will\nwant to choose from:\n\nPygame 2 has the following additional flags available.\n\nNew in pygame 2.0.0: `SCALED`, `SHOWN` and `HIDDEN`\n\nBy setting the `vsync` parameter to `1`, it is possible to get a display with\nvertical sync, but you are not guaranteed to get one. The request only works\nat all for calls to `set_mode()` with the `pygame.OPENGL` or `pygame.SCALED`\nflags set, and is still not guaranteed even with one of those set. What you\nget depends on the hardware and driver configuration of the system pygame is\nrunning on. Here is an example usage of a call to `set_mode()` that may give\nyou a display with vsync:\n\nVsync behaviour is considered experimental, and may change in future releases.\n\nNew in pygame 2.0.0: `vsync`\n\nBasic example:\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\n"}, {"name": "display.set_palette", "path": "ref/display#pygame.display.set_palette", "type": "pygame.display", "text": "\nThis will change the video display color palette for 8-bit displays. This does\nnot change the palette for the actual display Surface, only the palette that\nis used to display the Surface. If no palette argument is passed, the system\ndefault palette will be restored. The palette is a sequence of `RGB` triplets.\n\n"}, {"name": "display.toggle_fullscreen", "path": "ref/display#pygame.display.toggle_fullscreen", "type": "pygame.display", "text": "\nSwitches the display window between windowed and fullscreen modes. Display\ndriver support is not great when using pygame 1, but with pygame 2 it is the\nmost reliable method to switch to and from fullscreen.\n\nSupported display drivers in pygame 1:\n\nSupported display drivers in pygame 2:\n\n"}, {"name": "display.update", "path": "ref/display#pygame.display.update", "type": "pygame.display", "text": "\nThis function is like an optimized version of `pygame.display.flip()` for\nsoftware displays. It allows only a portion of the screen to updated, instead\nof the entire area. If no argument is passed it updates the entire Surface\narea like `pygame.display.flip()`.\n\nYou can pass the function a single rectangle, or a sequence of rectangles. It\nis more efficient to pass many rectangles at once than to call update multiple\ntimes with single or a partial list of rectangles. If passing a sequence of\nrectangles it is safe to include None values in the list, which will be\nskipped.\n\nThis call cannot be used on `pygame.OPENGL` displays and will generate an\nexception.\n\n"}, {"name": "draw", "path": "ref/draw", "type": "pygame.draw", "text": "\nDraw several simple shapes to a surface. These functions will work for\nrendering to any format of surface. Rendering to hardware surfaces will be\nslower than regular software surfaces.\n\nMost of the functions take a width argument to represent the size of stroke\n(thickness) around the edge of the shape. If a width of 0 is passed the shape\nwill be filled (solid).\n\nAll the drawing functions respect the clip area for the surface and will be\nconstrained to that area. The functions return a rectangle representing the\nbounding area of changed pixels. This bounding rectangle is the 'minimum'\nbounding box that encloses the affected area.\n\nAll the drawing functions accept a color argument that can be one of the\nfollowing formats:\n\nA color's alpha value will be written directly into the surface (if the\nsurface contains pixel alphas), but the draw function will not draw\ntransparently.\n\nThese functions temporarily lock the surface they are operating on. Many\nsequential drawing calls can be sped up by locking and unlocking the surface\nobject around the draw calls (see `pygame.Surface.lock()` and\n`pygame.Surface.unlock()`).\n\nNote\n\nSee the `pygame.gfxdraw` module for alternative draw methods.\n\nDraws a rectangle on the given surface.\n\n(optional) used for line thickness or to indicate that the rectangle is to be\nfilled (not to be confused with the width value of the `rect` parameter)\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will grow outside the original\nboundary of the rect. For more details on how the thickness for edge lines\ngrow, refer to the `width` notes of the `pygame.draw.line()` function.\n\n(optional) used for setting the value of bottom right border. If you don't set\nthis value, it will use the border_radius value.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the given `rect` parameter and its width and\nheight will be 0\n\nRect\n\nNote\n\nThe `pygame.Surface.fill()` method works just as well for drawing filled\nrectangles and can be hardware accelerated on some platforms with both\nsoftware and hardware display modes.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nChanged in pygame 2.0.0.dev8: Added support for border radius.\n\nDraws a polygon on the given surface.\n\n(optional) used for line thickness or to indicate that the polygon is to be\nfilled\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will grow outside the original\nboundary of the polygon. For more details on how the thickness for edge lines\ngrow, refer to the `width` notes of the `pygame.draw.line()` function.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the first point in the `points` parameter\n(float values will be truncated) and its width and height will be 0\n\nRect\n\nNote\n\nFor an aapolygon, use `aalines()` with `closed=True`.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws a circle on the given surface.\n\n(optional) used for line thickness or to indicate that the circle is to be\nfilled\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will only grow inward.\n\n(optional) if this is set to True then the bottom right corner of the circle\nwill be drawn\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the `center` parameter value (float values will be truncated)\nand its width and height will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments. Nothing is drawn\nwhen the radius is 0 (a pixel at the `center` coordinates used to be drawn\nwhen the radius equaled 0). Floats, and Vector2 are accepted for the `center`\nparam. The drawing algorithm was improved to look more like a circle.\n\nChanged in pygame 2.0.0.dev8: Added support for drawing circle quadrants.\n\nDraws an ellipse on the given surface.\n\n(optional) used for line thickness or to indicate that the ellipse is to be\nfilled (not to be confused with the width value of the `rect` parameter)\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will only grow inward from the\noriginal boundary of the `rect` parameter.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the given `rect` parameter and its width and\nheight will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws an elliptical arc on the given surface.\n\nThe two angle arguments are given in radians and indicate the start and stop\npositions of the arc. The arc is drawn in a counterclockwise direction from\nthe `start_angle` to the `stop_angle`.\n\nstop angle of the arc in radians\n\n(optional) used for line thickness (not to be confused with the width value of\nthe `rect` parameter)\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will only grow inward from the\noriginal boundary of the `rect` parameter.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the given `rect` parameter and its width and\nheight will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws a straight line on the given surface. There are no endcaps. For thick\nlines the ends are squared off.\n\n(optional) used for line thickness\n\nNote\n\nWhen using `width` values `> 1`, lines will grow as follows.\n\nFor odd `width` values, the thickness of each line grows with the original\nline being in the center.\n\nFor even `width` values, the thickness of each line grows with the original\nline being offset from the center (as there is no exact center line drawn). As\na result, lines with a slope < 1 (horizontal-ish) will have 1 more pixel of\nthickness below the original line (in the y direction). Lines with a slope >=\n1 (vertical-ish) will have 1 more pixel of thickness to the right of the\noriginal line (in the x direction).\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the `start_pos` parameter value (float values will be\ntruncated) and its width and height will be 0\n\nRect\n\nTypeError \\-- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws a sequence of contiguous straight lines on the given surface. There are\nno endcaps or miter joints. For thick lines the ends are squared off. Drawing\nthick lines with sharp corners can have undesired looking results.\n\n(optional) used for line thickness\n\nNote\n\nWhen using `width` values `> 1` refer to the `width` notes of `line()` for\ndetails on how thick lines grow.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the first point in the `points` parameter\n(float values will be truncated) and its width and height will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws a straight antialiased line on the given surface.\n\nThe line has a thickness of one pixel and the endpoints have a height and\nwidth of one pixel each.\n\nIf both endpoints are equal, only a single pixel is drawn (after rounding\nfloats to nearest integer).\n\nOtherwise if the line is not steep (i.e. if the length along the x-axis is\ngreater than the height along the y-axis):\n\nFor each endpoint:\n\nIf `x`, the endpoint's x-coordinate, is a whole number find which pixels would\nbe covered by it and draw them.\n\nOtherwise:\n\nCalculate the position of the nearest point with a whole number for it's\nx-coordinate, when extending the line past the endpoint.\n\nFind which pixels would be covered and how much by that point.\n\nIf the endpoint is the left one, multiply the coverage by (1 - the decimal\npart of `x`).\n\nOtherwise multiply the coverage by the decimal part of `x`.\n\nThen draw those pixels.\n\nThen for each point between the endpoints, along the line, whose x-coordinate\nis a whole number:\n\nFind which pixels would be covered and how much by that point and draw them.\n\nOtherwise do the same for steep lines as for non-steep lines except along the\ny-axis instead of the x-axis (using `y` instead of `x`, top instead of left\nand bottom instead of right).\n\nNote\n\nRegarding float values for coordinates, a point with coordinate consisting of\ntwo whole numbers is considered being right in the center of said pixel (and\nhaving a height and width of 1 pixel would therefore completely cover it),\nwhile a point with coordinate where one (or both) of the numbers have non-zero\ndecimal parts would be partially covering two (or four if both numbers have\ndecimal parts) adjacent pixels, e.g. the point `(1.4, 2)` covers 60% of the\npixel `(1, 2)` and 40% of the pixel `(2,2)`.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the `start_pos` parameter value (float values will be\ntruncated) and its width and height will be 0\n\nRect\n\nTypeError \\-- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws a sequence of contiguous straight antialiased lines on the given\nsurface.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the first point in the `points` parameter\n(float values will be truncated) and its width and height will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nExample code for draw module.\n\n"}, {"name": "draw.aaline", "path": "ref/draw#pygame.draw.aaline", "type": "pygame.draw", "text": "\nDraws a straight antialiased line on the given surface.\n\nThe line has a thickness of one pixel and the endpoints have a height and\nwidth of one pixel each.\n\nIf both endpoints are equal, only a single pixel is drawn (after rounding\nfloats to nearest integer).\n\nOtherwise if the line is not steep (i.e. if the length along the x-axis is\ngreater than the height along the y-axis):\n\nFor each endpoint:\n\nIf `x`, the endpoint's x-coordinate, is a whole number find which pixels would\nbe covered by it and draw them.\n\nOtherwise:\n\nCalculate the position of the nearest point with a whole number for it's\nx-coordinate, when extending the line past the endpoint.\n\nFind which pixels would be covered and how much by that point.\n\nIf the endpoint is the left one, multiply the coverage by (1 - the decimal\npart of `x`).\n\nOtherwise multiply the coverage by the decimal part of `x`.\n\nThen draw those pixels.\n\nThen for each point between the endpoints, along the line, whose x-coordinate\nis a whole number:\n\nFind which pixels would be covered and how much by that point and draw them.\n\nOtherwise do the same for steep lines as for non-steep lines except along the\ny-axis instead of the x-axis (using `y` instead of `x`, top instead of left\nand bottom instead of right).\n\nNote\n\nRegarding float values for coordinates, a point with coordinate consisting of\ntwo whole numbers is considered being right in the center of said pixel (and\nhaving a height and width of 1 pixel would therefore completely cover it),\nwhile a point with coordinate where one (or both) of the numbers have non-zero\ndecimal parts would be partially covering two (or four if both numbers have\ndecimal parts) adjacent pixels, e.g. the point `(1.4, 2)` covers 60% of the\npixel `(1, 2)` and 40% of the pixel `(2,2)`.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the `start_pos` parameter value (float values will be\ntruncated) and its width and height will be 0\n\nRect\n\nTypeError \\-- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\n"}, {"name": "draw.aalines", "path": "ref/draw#pygame.draw.aalines", "type": "pygame.draw", "text": "\nDraws a sequence of contiguous straight antialiased lines on the given\nsurface.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the first point in the `points` parameter\n(float values will be truncated) and its width and height will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\n"}, {"name": "draw.arc", "path": "ref/draw#pygame.draw.arc", "type": "pygame.draw", "text": "\nDraws an elliptical arc on the given surface.\n\nThe two angle arguments are given in radians and indicate the start and stop\npositions of the arc. The arc is drawn in a counterclockwise direction from\nthe `start_angle` to the `stop_angle`.\n\nstop angle of the arc in radians\n\n(optional) used for line thickness (not to be confused with the width value of\nthe `rect` parameter)\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will only grow inward from the\noriginal boundary of the `rect` parameter.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the given `rect` parameter and its width and\nheight will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\n"}, {"name": "draw.circle", "path": "ref/draw#pygame.draw.circle", "type": "pygame.draw", "text": "\nDraws a circle on the given surface.\n\n(optional) used for line thickness or to indicate that the circle is to be\nfilled\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will only grow inward.\n\n(optional) if this is set to True then the bottom right corner of the circle\nwill be drawn\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the `center` parameter value (float values will be truncated)\nand its width and height will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments. Nothing is drawn\nwhen the radius is 0 (a pixel at the `center` coordinates used to be drawn\nwhen the radius equaled 0). Floats, and Vector2 are accepted for the `center`\nparam. The drawing algorithm was improved to look more like a circle.\n\nChanged in pygame 2.0.0.dev8: Added support for drawing circle quadrants.\n\n"}, {"name": "draw.ellipse", "path": "ref/draw#pygame.draw.ellipse", "type": "pygame.draw", "text": "\nDraws an ellipse on the given surface.\n\n(optional) used for line thickness or to indicate that the ellipse is to be\nfilled (not to be confused with the width value of the `rect` parameter)\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will only grow inward from the\noriginal boundary of the `rect` parameter.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the given `rect` parameter and its width and\nheight will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\n"}, {"name": "draw.line", "path": "ref/draw#pygame.draw.line", "type": "pygame.draw", "text": "\nDraws a straight line on the given surface. There are no endcaps. For thick\nlines the ends are squared off.\n\n(optional) used for line thickness\n\nNote\n\nWhen using `width` values `> 1`, lines will grow as follows.\n\nFor odd `width` values, the thickness of each line grows with the original\nline being in the center.\n\nFor even `width` values, the thickness of each line grows with the original\nline being offset from the center (as there is no exact center line drawn). As\na result, lines with a slope < 1 (horizontal-ish) will have 1 more pixel of\nthickness below the original line (in the y direction). Lines with a slope >=\n1 (vertical-ish) will have 1 more pixel of thickness to the right of the\noriginal line (in the x direction).\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the `start_pos` parameter value (float values will be\ntruncated) and its width and height will be 0\n\nRect\n\nTypeError \\-- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\n"}, {"name": "draw.lines", "path": "ref/draw#pygame.draw.lines", "type": "pygame.draw", "text": "\nDraws a sequence of contiguous straight lines on the given surface. There are\nno endcaps or miter joints. For thick lines the ends are squared off. Drawing\nthick lines with sharp corners can have undesired looking results.\n\n(optional) used for line thickness\n\nNote\n\nWhen using `width` values `> 1` refer to the `width` notes of `line()` for\ndetails on how thick lines grow.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the first point in the `points` parameter\n(float values will be truncated) and its width and height will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\n"}, {"name": "draw.polygon", "path": "ref/draw#pygame.draw.polygon", "type": "pygame.draw", "text": "\nDraws a polygon on the given surface.\n\n(optional) used for line thickness or to indicate that the polygon is to be\nfilled\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will grow outside the original\nboundary of the polygon. For more details on how the thickness for edge lines\ngrow, refer to the `width` notes of the `pygame.draw.line()` function.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the first point in the `points` parameter\n(float values will be truncated) and its width and height will be 0\n\nRect\n\nNote\n\nFor an aapolygon, use `aalines()` with `closed=True`.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\n"}, {"name": "draw.rect", "path": "ref/draw#pygame.draw.rect", "type": "pygame.draw", "text": "\nDraws a rectangle on the given surface.\n\n(optional) used for line thickness or to indicate that the rectangle is to be\nfilled (not to be confused with the width value of the `rect` parameter)\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will grow outside the original\nboundary of the rect. For more details on how the thickness for edge lines\ngrow, refer to the `width` notes of the `pygame.draw.line()` function.\n\n(optional) used for setting the value of bottom right border. If you don't set\nthis value, it will use the border_radius value.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the given `rect` parameter and its width and\nheight will be 0\n\nRect\n\nNote\n\nThe `pygame.Surface.fill()` method works just as well for drawing filled\nrectangles and can be hardware accelerated on some platforms with both\nsoftware and hardware display modes.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nChanged in pygame 2.0.0.dev8: Added support for border radius.\n\n"}, {"name": "encode_file_path", "path": "ref/pygame#pygame.encode_file_path", "type": "pygame", "text": "\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return\n`None`; if not given, raise `SyntaxError`.\n\netype (exception type): If given, the exception type to raise for an encoding\nerror. The default is `UnicodeEncodeError`, as returned by\n`PyUnicode_AsEncodedString()`.\n\nThis function is used to encode file paths in pygame. Encoding is to the codec\nas returned by `sys.getfilesystemencoding()`. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\n"}, {"name": "encode_string", "path": "ref/pygame#pygame.encode_string", "type": "pygame", "text": "\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return\n`None`; if not given, raise `SyntaxError`.\n\nencoding (string): If present, encoding to use. The default is\n`'unicode_escape'`.\n\nerrors (string): If given, how to handle unencodable characters. The default\nis `'backslashreplace'`.\n\netype (exception type): If given, the exception type to raise for an encoding\nerror. The default is `UnicodeEncodeError`, as returned by\n`PyUnicode_AsEncodedString()`. For the default encoding and errors values\nthere should be no encoding errors.\n\nThis function is used in encoding file paths. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\n"}, {"name": "error", "path": "ref/pygame#pygame.error", "type": "pygame", "text": "\nThis exception is raised whenever a pygame or SDL operation fails. You can\ncatch any anticipated problems and deal with the error. The exception is\nalways raised with a descriptive message about the problem.\n\nDerived from the `RuntimeError` exception, which can also be used to catch\nthese raised errors.\n\n"}, {"name": "event", "path": "ref/event", "type": "pygame.event", "text": "\nPygame handles all its event messaging through an event queue. The routines in\nthis module help you manage that event queue. The input queue is heavily\ndependent on the `pygame.display` module. If the display has not been\ninitialized and a video mode not set, the event queue may not work properly.\nThe event subsystem should be called from the main thread. If you want to post\nevents into the queue from other threads, please use the `pygame.fastevent`\nmodule.\n\nThe event queue has an upper limit on the number of events it can hold (128\nfor standard SDL 1.2). When the queue becomes full new events are quietly\ndropped. To prevent lost events, especially input events which signal a quit\ncommand, your program must handle events every frame (with\n`pygame.event.get()`, `pygame.event.pump()`, `pygame.event.wait()`,\n`pygame.event.peek()` or `pygame.event.clear()`) and process them. Not\nhandling events may cause your system to decide your program has locked up. To\nspeed up queue processing use `pygame.event.set_blocked()` to limit which\nevents get queued.\n\nTo get the state of various input devices, you can forego the event queue and\naccess the input devices directly with their appropriate modules:\n`pygame.mouse`, `pygame.key`, and `pygame.joystick`. If you use this method,\nremember that pygame requires some form of communication with the system\nwindow manager and other parts of the platform. To keep pygame in sync with\nthe system, you will need to call `pygame.event.pump()` to keep everything\ncurrent. Usually, this should be called once per game loop. Note: Joysticks\nwill not send any events until the device has been initialized.\n\nThe event queue contains `pygame.event.EventType` event objects. There are a\nvariety of ways to access the queued events, from simply checking for the\nexistence of events, to grabbing them directly off the stack. The event queue\nalso offers some simple filtering which can slightly help performance by\nblocking certain event types from the queue. Use `pygame.event.set_allowed()`\nand `pygame.event.set_blocked()` to change this filtering. By default, all\nevent types can be placed on the queue.\n\nAll `pygame.event.EventType` instances contain an event type identifier and\nattributes specific to that event type. The event type identifier is\naccessible as the `pygame.event.EventType.type` property. Any of the event\nspecific attributes can be accessed through the\n`pygame.event.EventType.__dict__` attribute or directly as an attribute of the\nevent object (as member lookups are passed through to the object's dictionary\nvalues). The event object has no method functions. Users can create their own\nnew events with the `pygame.event.Event()` function.\n\nThe event type identifier is in between the values of `NOEVENT` and\n`NUMEVENTS`. User defined events should have a value in the inclusive range of\n`USEREVENT` to `NUMEVENTS - 1`. It is recommended all user events follow this\nsystem.\n\nEvents support equality and inequality comparisons. Two events are equal if\nthey are the same type and have identical attribute values.\n\nWhile debugging and experimenting, you can print an event object for a quick\ndisplay of its type and members. The function `pygame.event.event_name()` can\nbe used to get a string representing the name of the event type.\n\nEvents that come from the system will have a guaranteed set of member\nattributes based on the type. The following is a list event types with their\nspecific attributes.\n\nChanged in pygame 2.0.0: The `joy` attribute was deprecated, `instance_id` was\nadded.\n\nYou can also find a list of constants for keyboard keys here.\n\nOn MacOSX when a file is opened using a pygame application, a `USEREVENT` with\nits `code` attribute set to `pygame.USEREVENT_DROPFILE` is generated. There is\nan additional attribute called `filename` where the name of the file being\naccessed is stored.\n\nNew in pygame 1.9.2.\n\nWhen compiled with SDL2, pygame has these additional events and their\nattributes.\n\nNew in pygame 1.9.5.\n\npygame can recognize text or files dropped in its window. If a file is\ndropped, `file` will be its path. The `DROPTEXT` event is only supported on\nX11.\n\nNew in pygame 2.0.0.\n\nEvents reserved for `pygame.midi` use.\n\nNew in pygame 2.0.0.\n\nSDL2 supports controller hotplugging:\n\nAlso in this version, `instance_id` attributes were added to joystick events,\nand the `joy` attribute was deprecated.\n\nNew in pygame 2.0.0.\n\nFor each frame of your game, you will need to make some sort of call to the\nevent queue. This ensures your program can internally interact with the rest\nof the operating system. If you are not using other event functions in your\ngame, you should call `pygame.event.pump()` to allow pygame to handle internal\nactions.\n\nThis function is not necessary if your program is consistently processing\nevents on the queue through the other `pygame.event` functions.\n\nThere are important things that must be dealt with internally in the event\nqueue. The main window may need to be repainted or respond to the system. If\nyou fail to make a call to the event queue for too long, the system may decide\nyour program has locked up.\n\nCaution\n\nThis function should only be called in the thread that initialized\n`pygame.display`.\n\nThis will get all the messages and remove them from the queue. If a type or\nsequence of types is given only those messages will be removed from the queue.\n\nIf you are only taking specific events from the queue, be aware that the queue\ncould eventually fill up with the events you are not interested.\n\nIf `pump` is `True` (the default), then `pygame.event.pump()` will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\nReturns a single event from the queue. If the event queue is empty an event of\ntype `pygame.NOEVENT` will be returned immediately. The returned event is\nremoved from the queue.\n\nCaution\n\nThis function should only be called in the thread that initialized\n`pygame.display`.\n\nReturns a single event from the queue. If the queue is empty this function\nwill wait until one is created. From pygame 2.0.0, if a `timeout` argument is\ngiven, the function will return an event of type `pygame.NOEVENT` if no events\nenter the queue in `timeout` milliseconds. The event is removed from the queue\nonce it has been returned. While the program is waiting it will sleep in an\nidle state. This is important for programs that want to share the system with\nother applications.\n\nChanged in pygame 2.0.0.dev13: Added `timeout` argument\n\nCaution\n\nThis function should only be called in the thread that initialized\n`pygame.display`.\n\nReturns `True` if there are any events of the given type waiting on the queue.\nIf a sequence of event types is passed, this will return `True` if any of\nthose events are on the queue.\n\nIf `pump` is `True` (the default), then `pygame.event.pump()` will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\nRemoves all events from the queue. If `eventtype` is given, removes the given\nevent or sequence of events. This has the same effect as `pygame.event.get()`\nexcept `None` is returned. It can be slightly more efficient when clearing a\nfull event queue.\n\nIf `pump` is `True` (the default), then `pygame.event.pump()` will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\nReturns a string representing the name (in CapWords style) of the given event\ntype.\n\n\"UserEvent\" is returned for all values in the user event id range. \"Unknown\"\nis returned when the event type does not exist.\n\nThe given event types are not allowed to appear on the event queue. By default\nall events can be placed on the queue. It is safe to disable an event type\nmultiple times.\n\nIf `None` is passed as the argument, ALL of the event types are blocked from\nbeing placed on the queue.\n\nThe given event types are allowed to appear on the event queue. By default,\nall event types can be placed on the queue. It is safe to enable an event type\nmultiple times.\n\nIf `None` is passed as the argument, ALL of the event types are allowed to be\nplaced on the queue.\n\nReturns `True` if the given event type is blocked from the queue. If a\nsequence of event types is passed, this will return `True` if any of those\nevent types are blocked.\n\nWhen your program runs in a windowed environment, it will share the mouse and\nkeyboard devices with other applications that have focus. If your program sets\nthe event grab to `True`, it will lock all input into your program.\n\nIt is best to not always grab the input, since it prevents the user from doing\nother things on their system.\n\nReturns `True` when the input events are grabbed for this application.\n\nPlaces the given event at the end of the event queue.\n\nThis is usually used for placing `pygame.USEREVENT` events on the queue.\nAlthough any type of event can be placed, if using the system event types your\nprogram should be sure to create the standard attributes with appropriate\nvalues.\n\nIf the event queue is full a `pygame.error` is raised.\n\nCaution: In pygame 2.0, calling this function with event types defined by\npygame (such as `pygame.KEYDOWN`) may put events into the SDL2 event queue. In\nthis case, an error may be raised if standard attributes of that event are\nmissing or have incompatible values, and unexpected properties may be silently\nomitted. In order to avoid this behaviour, custom event properties should be\nused with custom event types. This behaviour is not guaranteed.\n\nReserves a `pygame.USEREVENT` for a custom use.\n\nIf too many events are made a `pygame.error` is raised.\n\nNew in pygame 2.0.0.dev3.\n\nCreates a new event with the given type and attributes. The attributes can\ncome from a dictionary argument with string keys or from keyword arguments.\n\nA pygame object that represents an event. User event instances are created\nwith an `pygame.event.Event()` function call. The `EventType` type is not\ndirectly callable. `EventType` instances support attribute assignment and\ndeletion.\n\nRead-only. The event type identifier. For user created event objects, this is\nthe `type` argument passed to `pygame.event.Event()`.\n\nFor example, some predefined event identifiers are `QUIT` and `MOUSEMOTION`.\n\nRead-only. The event type specific attributes of an event. The `dict`\nattribute is a synonym for backward compatibility.\n\nFor example, the attributes of a `KEYDOWN` event would be `unicode`, `key`,\nand `mod`\n\nNew in pygame 1.9.2: Mutable attributes.\n\n"}, {"name": "event.clear", "path": "ref/event#pygame.event.clear", "type": "pygame.event", "text": "\nRemoves all events from the queue. If `eventtype` is given, removes the given\nevent or sequence of events. This has the same effect as `pygame.event.get()`\nexcept `None` is returned. It can be slightly more efficient when clearing a\nfull event queue.\n\nIf `pump` is `True` (the default), then `pygame.event.pump()` will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\n"}, {"name": "event.custom_type", "path": "ref/event#pygame.event.custom_type", "type": "pygame.event", "text": "\nReserves a `pygame.USEREVENT` for a custom use.\n\nIf too many events are made a `pygame.error` is raised.\n\nNew in pygame 2.0.0.dev3.\n\n"}, {"name": "event.Event", "path": "ref/event#pygame.event.Event", "type": "pygame.event", "text": "\nCreates a new event with the given type and attributes. The attributes can\ncome from a dictionary argument with string keys or from keyword arguments.\n\n"}, {"name": "event.event_name", "path": "ref/event#pygame.event.event_name", "type": "pygame.event", "text": "\nReturns a string representing the name (in CapWords style) of the given event\ntype.\n\n\"UserEvent\" is returned for all values in the user event id range. \"Unknown\"\nis returned when the event type does not exist.\n\n"}, {"name": "event.EventType", "path": "ref/event#pygame.event.EventType", "type": "pygame.event", "text": "\nA pygame object that represents an event. User event instances are created\nwith an `pygame.event.Event()` function call. The `EventType` type is not\ndirectly callable. `EventType` instances support attribute assignment and\ndeletion.\n\nRead-only. The event type identifier. For user created event objects, this is\nthe `type` argument passed to `pygame.event.Event()`.\n\nFor example, some predefined event identifiers are `QUIT` and `MOUSEMOTION`.\n\nRead-only. The event type specific attributes of an event. The `dict`\nattribute is a synonym for backward compatibility.\n\nFor example, the attributes of a `KEYDOWN` event would be `unicode`, `key`,\nand `mod`\n\nNew in pygame 1.9.2: Mutable attributes.\n\n"}, {"name": "event.EventType.__dict__", "path": "ref/event#pygame.event.EventType.__dict__", "type": "pygame.event", "text": "\nRead-only. The event type specific attributes of an event. The `dict`\nattribute is a synonym for backward compatibility.\n\nFor example, the attributes of a `KEYDOWN` event would be `unicode`, `key`,\nand `mod`\n\n"}, {"name": "event.EventType.type", "path": "ref/event#pygame.event.EventType.type", "type": "pygame.event", "text": "\nRead-only. The event type identifier. For user created event objects, this is\nthe `type` argument passed to `pygame.event.Event()`.\n\nFor example, some predefined event identifiers are `QUIT` and `MOUSEMOTION`.\n\n"}, {"name": "event.get", "path": "ref/event#pygame.event.get", "type": "pygame.event", "text": "\nThis will get all the messages and remove them from the queue. If a type or\nsequence of types is given only those messages will be removed from the queue.\n\nIf you are only taking specific events from the queue, be aware that the queue\ncould eventually fill up with the events you are not interested.\n\nIf `pump` is `True` (the default), then `pygame.event.pump()` will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\n"}, {"name": "event.get_blocked", "path": "ref/event#pygame.event.get_blocked", "type": "pygame.event", "text": "\nReturns `True` if the given event type is blocked from the queue. If a\nsequence of event types is passed, this will return `True` if any of those\nevent types are blocked.\n\n"}, {"name": "event.get_grab", "path": "ref/event#pygame.event.get_grab", "type": "pygame.event", "text": "\nReturns `True` when the input events are grabbed for this application.\n\n"}, {"name": "event.peek", "path": "ref/event#pygame.event.peek", "type": "pygame.event", "text": "\nReturns `True` if there are any events of the given type waiting on the queue.\nIf a sequence of event types is passed, this will return `True` if any of\nthose events are on the queue.\n\nIf `pump` is `True` (the default), then `pygame.event.pump()` will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\n"}, {"name": "event.poll", "path": "ref/event#pygame.event.poll", "type": "pygame.event", "text": "\nReturns a single event from the queue. If the event queue is empty an event of\ntype `pygame.NOEVENT` will be returned immediately. The returned event is\nremoved from the queue.\n\nCaution\n\nThis function should only be called in the thread that initialized\n`pygame.display`.\n\n"}, {"name": "event.post", "path": "ref/event#pygame.event.post", "type": "pygame.event", "text": "\nPlaces the given event at the end of the event queue.\n\nThis is usually used for placing `pygame.USEREVENT` events on the queue.\nAlthough any type of event can be placed, if using the system event types your\nprogram should be sure to create the standard attributes with appropriate\nvalues.\n\nIf the event queue is full a `pygame.error` is raised.\n\nCaution: In pygame 2.0, calling this function with event types defined by\npygame (such as `pygame.KEYDOWN`) may put events into the SDL2 event queue. In\nthis case, an error may be raised if standard attributes of that event are\nmissing or have incompatible values, and unexpected properties may be silently\nomitted. In order to avoid this behaviour, custom event properties should be\nused with custom event types. This behaviour is not guaranteed.\n\n"}, {"name": "event.pump", "path": "ref/event#pygame.event.pump", "type": "pygame.event", "text": "\nFor each frame of your game, you will need to make some sort of call to the\nevent queue. This ensures your program can internally interact with the rest\nof the operating system. If you are not using other event functions in your\ngame, you should call `pygame.event.pump()` to allow pygame to handle internal\nactions.\n\nThis function is not necessary if your program is consistently processing\nevents on the queue through the other `pygame.event` functions.\n\nThere are important things that must be dealt with internally in the event\nqueue. The main window may need to be repainted or respond to the system. If\nyou fail to make a call to the event queue for too long, the system may decide\nyour program has locked up.\n\nCaution\n\nThis function should only be called in the thread that initialized\n`pygame.display`.\n\n"}, {"name": "event.set_allowed", "path": "ref/event#pygame.event.set_allowed", "type": "pygame.event", "text": "\nThe given event types are allowed to appear on the event queue. By default,\nall event types can be placed on the queue. It is safe to enable an event type\nmultiple times.\n\nIf `None` is passed as the argument, ALL of the event types are allowed to be\nplaced on the queue.\n\n"}, {"name": "event.set_blocked", "path": "ref/event#pygame.event.set_blocked", "type": "pygame.event", "text": "\nThe given event types are not allowed to appear on the event queue. By default\nall events can be placed on the queue. It is safe to disable an event type\nmultiple times.\n\nIf `None` is passed as the argument, ALL of the event types are blocked from\nbeing placed on the queue.\n\n"}, {"name": "event.set_grab", "path": "ref/event#pygame.event.set_grab", "type": "pygame.event", "text": "\nWhen your program runs in a windowed environment, it will share the mouse and\nkeyboard devices with other applications that have focus. If your program sets\nthe event grab to `True`, it will lock all input into your program.\n\nIt is best to not always grab the input, since it prevents the user from doing\nother things on their system.\n\n"}, {"name": "event.wait", "path": "ref/event#pygame.event.wait", "type": "pygame.event", "text": "\nReturns a single event from the queue. If the queue is empty this function\nwill wait until one is created. From pygame 2.0.0, if a `timeout` argument is\ngiven, the function will return an event of type `pygame.NOEVENT` if no events\nenter the queue in `timeout` milliseconds. The event is removed from the queue\nonce it has been returned. While the program is waiting it will sleep in an\nidle state. This is important for programs that want to share the system with\nother applications.\n\nChanged in pygame 2.0.0.dev13: Added `timeout` argument\n\nCaution\n\nThis function should only be called in the thread that initialized\n`pygame.display`.\n\n"}, {"name": "examples", "path": "ref/examples", "type": "pygame.examples", "text": "\nThese examples should help get you started with pygame. Here is a brief\nrundown of what you get. The source code for these examples is in the public\ndomain. Feel free to use for your own projects.\n\nThere are several ways to run the examples. First they can be run as stand-\nalone programs. Second they can be imported and their `main()` methods called\n(see below). Finally, the easiest way is to use the python -m option:\n\neg:\n\nResources such as images and sounds for the examples are found in the\npygame/examples/data subdirectory.\n\nYou can find where the example files are installed by using the following\ncommands inside the python interpreter.\n\nOn each OS and version of Python the location will be slightly different. For\nexample on Windows it might be in 'C:/Python26/Lib/site-\npackages/pygame/examples/' On Mac OS X it might be in\n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-\npackages/pygame/examples/'\n\nYou can also run the examples in the python interpreter by calling each\nmodules main() function.\n\nWe're always on the lookout for more examples and/or example requests. Code\nlike this is probably the best way to start getting involved with python\ngaming.\n\nexamples as a package is new to pygame 1.9.0. But most of the examples came\nwith pygame much earlier.\n\nThis started off as a port of the `SDL` demonstration, Aliens. Now it has\nevolved into something sort of resembling fun. This demonstrates a lot of\ndifferent uses of sprites and optimized blitting. Also transparency,\ncolorkeys, fonts, sound, music, joystick, and more. (PS, my high score is 117!\ngoodluck)\n\nThis more closely resembles a port of the `SDL` Aliens demo. The code is a lot\nsimpler, so it makes a better starting point for people looking at code for\nthe first times. These blitting routines are not as optimized as they\nshould/could be, but the code is easier to follow, and it plays quick enough.\n\nA simple starfield example. You can change the center of perspective by\nleftclicking the mouse on the screen.\n\nThis simple example is derived from the line-by-line tutorial that comes with\npygame. It is based on a 'popular' web banner. Note there are comments here,\nbut for the full explanation, follow along in the tutorial.\n\nThis is the full and final example from the Pygame Tutorial, \"How Do I Make It\nMove\". It creates 10 objects and animates them on the screen.\n\nNote it's a bit scant on error checking, but it's easy to read. :]\nFortunately, this is python, and we needn't wrestle with a pile of error\ncodes.\n\nSuper quick, super simple application demonstrating the different ways to\nrender fonts with the font module\n\nA showcase of rendering features the `pygame.freetype.Font` class provides in\naddition to those available with `pygame.font.Font`. It is a demonstration of\ndirect to surface rendering, with vertical text and rotated text, opaque text\nand semi transparent text, horizontally stretched text and vertically\nstretched text.\n\nDemonstrates creating a vertical gradient with pixelcopy and NumPy python. The\napp will create a new gradient every half second and report the time needed to\ncreate and display the image. If you're not prepared to start working with the\nNumPy arrays, don't worry about the source for this one :]\n\nEventlist is a sloppy style of pygame, but is a handy tool for learning about\npygame events and input. At the top of the screen are the state of several\ndevice values, and a scrolling list of events are displayed on the bottom.\n\nThis is not quality 'ui' code at all, but you can see how to implement very\nnon-interactive status displays, or even a crude text output control.\n\nAnother example filled with various surfarray effects. It requires the\nsurfarray and image modules to be installed. This little demo can also make a\ngood starting point for any of your own tests with surfarray\n\nThe `arraytype` parameter is deprecated; passing any value besides 'numpy'\nwill raise ValueError.\n\nExtremely basic testing of the mixer module. Load a sound and play it. All\nfrom the command shell, no graphics.\n\nIf provided, use the audio file 'file_path', otherwise use a default file.\n\n`sound.py` optional command line argument: an audio file\n\nUses sndarray and NumPy to create offset faded copies of the original sound.\nCurrently it just uses hardcoded values for the number of echoes and the\ndelay. Easy for you to recreate as needed.\n\nThe `arraytype` parameter is deprecated; passing any value besides 'numpy'\nwill raise ValueError.\n\nThis example was created in a quick comparison with the BlitzBasic gaming\nlanguage. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).\n\nUsing PyOpenGL and pygame, this creates a spinning 3D multicolored cube.\n\nA simple demonstration example for the clipboard support.\n\nPositional arguments:\n\nThis `pygame.masks` demo will display multiple moving sprites bouncing off\neach other. More than one sprite image can be provided.\n\nIf run as a program then `mask.py` takes one or more image files as command\nline arguments.\n\nOptional keyword arguments:\n\nLike the `testsprite.c` that comes with SDL, this pygame version shows lots of\nsprites moving around.\n\nIf run as a stand-alone program then no command line arguments are taken.\n\narguments:\n\nHow to use pygame with no windowing system, like on headless servers.\n\nThumbnail generation with scaling is an example of what you can do with\npygame.\n\n`NOTE`: the pygame scale function uses MMX/SSE if available, and can be run in\nmultiple threads.\n\nIf `headless_no_windows_needed.py` is run as a program it takes the following\ncommand line arguments:\n\nThis is a stress test for the fastevents module.\n\nSo far it looks like normal `pygame.event` is faster by up to two times. So\nmaybe fastevent isn't fast at all.\n\nTested on Windows XP SP2 Athlon, and FreeBSD.\n\nHowever... on my Debian Duron 850 machine fastevents is faster.\n\nPlay the .pgm video file given by a path fname.\n\nIf run as a program `overlay.py` takes the file name as a command line\nargument.\n\nA interactive demo that lets one choose which BLEND_xxx option to apply to a\nsurface.\n\nFake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat\nlike blend_fill.\n\nDisplay an arrow or circle with crossbar cursor.\n\nDisplay various pixelarray generated effects.\n\narguments:\n\nA smoothscale example that resized an image on the screen. Vertical and\nhorizontal arrow keys are used to change the width and height of the displayed\nimage. If the convert_alpha option is True then the source image is forced to\nhave source alpha, whether or not the original images does. If run_speed_test\nis True then a background timing test is performed instead of the interactive\nscaler.\n\nIf `scaletest.py` is run as a program then the command line options are:\n\nArguments:\n\nThe output example shows how to translate mouse clicks or computer keyboard\nevents into midi notes. It implements a rudimentary button widget and state\nmachine.\n\nThe input example shows how to translate midi input to pygame events.\n\nWith the use of a virtual midi patch cord the output and input examples can be\nrun as separate processes and connected so the keyboard output is displayed on\na console.\n\nnew to pygame 1.9.0\n\nThis example shows a scrollable image that has a zoom factor of eight. It uses\nthe `Surface.scroll()` function to shift the image on the display surface. A\nclip rectangle protects a margin area. If called as a function, the example\naccepts an optional image file path. If run as a program it takes an optional\nfile path command line argument. If no file is provided a default image file\nis used.\n\nWhen running click on a black triangle to move one pixel in the direction the\ntriangle points. Or use the arrow keys. Close the window or press `ESC` to\nquit.\n\nA simple live video player, it uses the first available camera it finds on the\nsystem.\n\nA simple music player with window and keyboard playback control. Playback can\nbe paused and rewound to the beginning.\n\n"}, {"name": "examples.aliens.main", "path": "ref/examples#pygame.examples.aliens.main", "type": "pygame.examples", "text": "\nThis started off as a port of the `SDL` demonstration, Aliens. Now it has\nevolved into something sort of resembling fun. This demonstrates a lot of\ndifferent uses of sprites and optimized blitting. Also transparency,\ncolorkeys, fonts, sound, music, joystick, and more. (PS, my high score is 117!\ngoodluck)\n\n"}, {"name": "examples.arraydemo.main", "path": "ref/examples#pygame.examples.arraydemo.main", "type": "pygame.examples", "text": "\nAnother example filled with various surfarray effects. It requires the\nsurfarray and image modules to be installed. This little demo can also make a\ngood starting point for any of your own tests with surfarray\n\nThe `arraytype` parameter is deprecated; passing any value besides 'numpy'\nwill raise ValueError.\n\n"}, {"name": "examples.blend_fill.main", "path": "ref/examples#pygame.examples.blend_fill.main", "type": "pygame.examples", "text": "\nA interactive demo that lets one choose which BLEND_xxx option to apply to a\nsurface.\n\n"}, {"name": "examples.blit_blends.main", "path": "ref/examples#pygame.examples.blit_blends.main", "type": "pygame.examples", "text": "\nFake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat\nlike blend_fill.\n\n"}, {"name": "examples.camera.main", "path": "ref/examples#pygame.examples.camera.main", "type": "pygame.examples", "text": "\nA simple live video player, it uses the first available camera it finds on the\nsystem.\n\n"}, {"name": "examples.chimp.main", "path": "ref/examples#pygame.examples.chimp.main", "type": "pygame.examples", "text": "\nThis simple example is derived from the line-by-line tutorial that comes with\npygame. It is based on a 'popular' web banner. Note there are comments here,\nbut for the full explanation, follow along in the tutorial.\n\n"}, {"name": "examples.cursors.main", "path": "ref/examples#pygame.examples.cursors.main", "type": "pygame.examples", "text": "\nDisplay an arrow or circle with crossbar cursor.\n\n"}, {"name": "examples.eventlist.main", "path": "ref/examples#pygame.examples.eventlist.main", "type": "pygame.examples", "text": "\nEventlist is a sloppy style of pygame, but is a handy tool for learning about\npygame events and input. At the top of the screen are the state of several\ndevice values, and a scrolling list of events are displayed on the bottom.\n\nThis is not quality 'ui' code at all, but you can see how to implement very\nnon-interactive status displays, or even a crude text output control.\n\n"}, {"name": "examples.fastevents.main", "path": "ref/examples#pygame.examples.fastevents.main", "type": "pygame.examples", "text": "\nThis is a stress test for the fastevents module.\n\nSo far it looks like normal `pygame.event` is faster by up to two times. So\nmaybe fastevent isn't fast at all.\n\nTested on Windows XP SP2 Athlon, and FreeBSD.\n\nHowever... on my Debian Duron 850 machine fastevents is faster.\n\n"}, {"name": "examples.fonty.main", "path": "ref/examples#pygame.examples.fonty.main", "type": "pygame.examples", "text": "\nSuper quick, super simple application demonstrating the different ways to\nrender fonts with the font module\n\n"}, {"name": "examples.freetype_misc.main", "path": "ref/examples#pygame.examples.freetype_misc.main", "type": "pygame.examples", "text": "\nA showcase of rendering features the `pygame.freetype.Font` class provides in\naddition to those available with `pygame.font.Font`. It is a demonstration of\ndirect to surface rendering, with vertical text and rotated text, opaque text\nand semi transparent text, horizontally stretched text and vertically\nstretched text.\n\n"}, {"name": "examples.glcube.main", "path": "ref/examples#pygame.examples.glcube.main", "type": "pygame.examples", "text": "\nUsing PyOpenGL and pygame, this creates a spinning 3D multicolored cube.\n\n"}, {"name": "examples.headless_no_windows_needed.main", "path": "ref/examples#pygame.examples.headless_no_windows_needed.main", "type": "pygame.examples", "text": "\narguments:\n\nHow to use pygame with no windowing system, like on headless servers.\n\nThumbnail generation with scaling is an example of what you can do with\npygame.\n\n`NOTE`: the pygame scale function uses MMX/SSE if available, and can be run in\nmultiple threads.\n\nIf `headless_no_windows_needed.py` is run as a program it takes the following\ncommand line arguments:\n\n"}, {"name": "examples.liquid.main", "path": "ref/examples#pygame.examples.liquid.main", "type": "pygame.examples", "text": "\nThis example was created in a quick comparison with the BlitzBasic gaming\nlanguage. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).\n\n"}, {"name": "examples.mask.main", "path": "ref/examples#pygame.examples.mask.main", "type": "pygame.examples", "text": "\nPositional arguments:\n\nThis `pygame.masks` demo will display multiple moving sprites bouncing off\neach other. More than one sprite image can be provided.\n\nIf run as a program then `mask.py` takes one or more image files as command\nline arguments.\n\n"}, {"name": "examples.midi.main", "path": "ref/examples#pygame.examples.midi.main", "type": "pygame.examples", "text": "\nArguments:\n\nThe output example shows how to translate mouse clicks or computer keyboard\nevents into midi notes. It implements a rudimentary button widget and state\nmachine.\n\nThe input example shows how to translate midi input to pygame events.\n\nWith the use of a virtual midi patch cord the output and input examples can be\nrun as separate processes and connected so the keyboard output is displayed on\na console.\n\nnew to pygame 1.9.0\n\n"}, {"name": "examples.moveit.main", "path": "ref/examples#pygame.examples.moveit.main", "type": "pygame.examples", "text": "\nThis is the full and final example from the Pygame Tutorial, \"How Do I Make It\nMove\". It creates 10 objects and animates them on the screen.\n\nNote it's a bit scant on error checking, but it's easy to read. :]\nFortunately, this is python, and we needn't wrestle with a pile of error\ncodes.\n\n"}, {"name": "examples.oldalien.main", "path": "ref/examples#pygame.examples.oldalien.main", "type": "pygame.examples", "text": "\nThis more closely resembles a port of the `SDL` Aliens demo. The code is a lot\nsimpler, so it makes a better starting point for people looking at code for\nthe first times. These blitting routines are not as optimized as they\nshould/could be, but the code is easier to follow, and it plays quick enough.\n\n"}, {"name": "examples.overlay.main", "path": "ref/examples#pygame.examples.overlay.main", "type": "pygame.examples", "text": "\nPlay the .pgm video file given by a path fname.\n\nIf run as a program `overlay.py` takes the file name as a command line\nargument.\n\n"}, {"name": "examples.pixelarray.main", "path": "ref/examples#pygame.examples.pixelarray.main", "type": "pygame.examples", "text": "\nDisplay various pixelarray generated effects.\n\n"}, {"name": "examples.playmus.main", "path": "ref/examples#pygame.examples.playmus.main", "type": "pygame.examples", "text": "\nA simple music player with window and keyboard playback control. Playback can\nbe paused and rewound to the beginning.\n\n"}, {"name": "examples.scaletest.main", "path": "ref/examples#pygame.examples.scaletest.main", "type": "pygame.examples", "text": "\narguments:\n\nA smoothscale example that resized an image on the screen. Vertical and\nhorizontal arrow keys are used to change the width and height of the displayed\nimage. If the convert_alpha option is True then the source image is forced to\nhave source alpha, whether or not the original images does. If run_speed_test\nis True then a background timing test is performed instead of the interactive\nscaler.\n\nIf `scaletest.py` is run as a program then the command line options are:\n\n"}, {"name": "examples.scrap_clipboard.main", "path": "ref/examples#pygame.examples.scrap_clipboard.main", "type": "pygame.examples", "text": "\nA simple demonstration example for the clipboard support.\n\n"}, {"name": "examples.scroll.main", "path": "ref/examples#pygame.examples.scroll.main", "type": "pygame.examples", "text": "\nThis example shows a scrollable image that has a zoom factor of eight. It uses\nthe `Surface.scroll()` function to shift the image on the display surface. A\nclip rectangle protects a margin area. If called as a function, the example\naccepts an optional image file path. If run as a program it takes an optional\nfile path command line argument. If no file is provided a default image file\nis used.\n\nWhen running click on a black triangle to move one pixel in the direction the\ntriangle points. Or use the arrow keys. Close the window or press `ESC` to\nquit.\n\n"}, {"name": "examples.sound.main", "path": "ref/examples#pygame.examples.sound.main", "type": "pygame.examples", "text": "\nExtremely basic testing of the mixer module. Load a sound and play it. All\nfrom the command shell, no graphics.\n\nIf provided, use the audio file 'file_path', otherwise use a default file.\n\n`sound.py` optional command line argument: an audio file\n\n"}, {"name": "examples.sound_array_demos.main", "path": "ref/examples#pygame.examples.sound_array_demos.main", "type": "pygame.examples", "text": "\nUses sndarray and NumPy to create offset faded copies of the original sound.\nCurrently it just uses hardcoded values for the number of echoes and the\ndelay. Easy for you to recreate as needed.\n\nThe `arraytype` parameter is deprecated; passing any value besides 'numpy'\nwill raise ValueError.\n\n"}, {"name": "examples.stars.main", "path": "ref/examples#pygame.examples.stars.main", "type": "pygame.examples", "text": "\nA simple starfield example. You can change the center of perspective by\nleftclicking the mouse on the screen.\n\n"}, {"name": "examples.testsprite.main", "path": "ref/examples#pygame.examples.testsprite.main", "type": "pygame.examples", "text": "\nOptional keyword arguments:\n\nLike the `testsprite.c` that comes with SDL, this pygame version shows lots of\nsprites moving around.\n\nIf run as a stand-alone program then no command line arguments are taken.\n\n"}, {"name": "examples.vgrade.main", "path": "ref/examples#pygame.examples.vgrade.main", "type": "pygame.examples", "text": "\nDemonstrates creating a vertical gradient with pixelcopy and NumPy python. The\napp will create a new gradient every half second and report the time needed to\ncreate and display the image. If you're not prepared to start working with the\nNumPy arrays, don't worry about the source for this one :]\n\n"}, {"name": "fastevent", "path": "ref/fastevent", "type": "pygame.fastevent", "text": "\npygame.fastevent is a wrapper for Bob Pendleton's fastevent library. It\nprovides fast events for use in multithreaded environments. When using\npygame.fastevent, you can not use any of the pump, wait, poll, post, get,\npeek, etc. functions from pygame.event, but you should use the Event objects.\n\nInitialize the pygame.fastevent module.\n\nReturns True if the pygame.fastevent module is currently initialized.\n\nFor each frame of your game, you will need to make some sort of call to the\nevent queue. This ensures your program can internally interact with the rest\nof the operating system.\n\nThis function is not necessary if your program is consistently processing\nevents on the queue through the other `pygame.fastevent` functions.\n\nThere are important things that must be dealt with internally in the event\nqueue. The main window may need to be repainted or respond to the system. If\nyou fail to make a call to the event queue for too long, the system may decide\nyour program has locked up.\n\nReturns the current event on the queue. If there are no messages waiting on\nthe queue, this will not return until one is available. Sometimes it is\nimportant to use this wait to get events from the queue, it will allow your\napplication to idle when the user isn't doing anything with it.\n\nReturns next event on queue. If there is no event waiting on the queue, this\nwill return an event with type NOEVENT.\n\nThis will get all the messages and remove them from the queue.\n\nThis will post your own event objects onto the event queue. You can post any\nevent type you want, but some care must be taken. For example, if you post a\nMOUSEBUTTONDOWN event to the queue, it is likely any code receiving the event\nwill expect the standard MOUSEBUTTONDOWN attributes to be available, like\n'pos' and 'button'.\n\nBecause pygame.fastevent.post() may have to wait for the queue to empty, you\ncan get into a dead lock if you try to append an event on to a full queue from\nthe thread that processes events. For that reason I do not recommend using\nthis function in the main thread of an SDL program.\n\n"}, {"name": "fastevent.get", "path": "ref/fastevent#pygame.fastevent.get", "type": "pygame.fastevent", "text": "\nThis will get all the messages and remove them from the queue.\n\n"}, {"name": "fastevent.get_init", "path": "ref/fastevent#pygame.fastevent.get_init", "type": "pygame.fastevent", "text": "\nReturns True if the pygame.fastevent module is currently initialized.\n\n"}, {"name": "fastevent.init", "path": "ref/fastevent#pygame.fastevent.init", "type": "pygame.fastevent", "text": "\nInitialize the pygame.fastevent module.\n\n"}, {"name": "fastevent.poll", "path": "ref/fastevent#pygame.fastevent.poll", "type": "pygame.fastevent", "text": "\nReturns next event on queue. If there is no event waiting on the queue, this\nwill return an event with type NOEVENT.\n\n"}, {"name": "fastevent.post", "path": "ref/fastevent#pygame.fastevent.post", "type": "pygame.fastevent", "text": "\nThis will post your own event objects onto the event queue. You can post any\nevent type you want, but some care must be taken. For example, if you post a\nMOUSEBUTTONDOWN event to the queue, it is likely any code receiving the event\nwill expect the standard MOUSEBUTTONDOWN attributes to be available, like\n'pos' and 'button'.\n\nBecause pygame.fastevent.post() may have to wait for the queue to empty, you\ncan get into a dead lock if you try to append an event on to a full queue from\nthe thread that processes events. For that reason I do not recommend using\nthis function in the main thread of an SDL program.\n\n"}, {"name": "fastevent.pump", "path": "ref/fastevent#pygame.fastevent.pump", "type": "pygame.fastevent", "text": "\nFor each frame of your game, you will need to make some sort of call to the\nevent queue. This ensures your program can internally interact with the rest\nof the operating system.\n\nThis function is not necessary if your program is consistently processing\nevents on the queue through the other `pygame.fastevent` functions.\n\nThere are important things that must be dealt with internally in the event\nqueue. The main window may need to be repainted or respond to the system. If\nyou fail to make a call to the event queue for too long, the system may decide\nyour program has locked up.\n\n"}, {"name": "fastevent.wait", "path": "ref/fastevent#pygame.fastevent.wait", "type": "pygame.fastevent", "text": "\nReturns the current event on the queue. If there are no messages waiting on\nthe queue, this will not return until one is available. Sometimes it is\nimportant to use this wait to get events from the queue, it will allow your\napplication to idle when the user isn't doing anything with it.\n\n"}, {"name": "font", "path": "ref/font", "type": "pygame.font", "text": "\nThe font module allows for rendering TrueType fonts into a new Surface object.\nIt accepts any UCS-2 character ('u0001' to 'uFFFF'). This module is optional\nand requires SDL_ttf as a dependency. You should test that `pygame.font` is\navailable and initialized before attempting to use the module.\n\nMost of the work done with fonts are done by using the actual Font objects.\nThe module by itself only has routines to initialize the module and create\nFont objects with `pygame.font.Font()`.\n\nYou can load fonts from the system by using the `pygame.font.SysFont()`\nfunction. There are a few other functions to help lookup the system fonts.\n\nPygame comes with a builtin default font. This can always be accessed by\npassing None as the font name.\n\nTo use the `pygame.freetype` based `pygame.ftfont` as `pygame.font` define the\nenvironment variable PYGAME_FREETYPE before the first import of `pygame`.\nModule `pygame.ftfont` is a `pygame.font` compatible module that passes all\nbut one of the font module unit tests: it does not have the UCS-2 limitation\nof the SDL_ttf based font module, so fails to raise an exception for a code\npoint greater than 'uFFFF'. If `pygame.freetype` is unavailable then the\nSDL_ttf font module will be loaded instead.\n\nThis method is called automatically by `pygame.init()`. It initializes the\nfont module. The module must be initialized before any other functions will\nwork.\n\nIt is safe to call this function more than once.\n\nManually uninitialize SDL_ttf's font system. This is called automatically by\n`pygame.quit()`.\n\nIt is safe to call this function even if font is currently not initialized.\n\nTest if the font module is initialized or not.\n\nReturn the filename of the system font. This is not the full path to the file.\nThis file can usually be found in the same directory as the font module, but\nit can also be bundled in separate archives.\n\nReturns a list of all the fonts available on the system. The names of the\nfonts will be set to lowercase with all spaces and punctuation removed. This\nworks on most systems, but some will return an empty list if they cannot find\nfonts.\n\nReturns the full path to a font file on the system. If bold or italic are set\nto true, this will attempt to find the correct family of font.\n\nThe font name can also be an iterable of font names, a string of comma-\nseparated font names, or a bytes of comma-separated font names, in which case\nthe set of names will be searched in order. If none of the given names are\nfound, None is returned.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nExample:\n\nReturn a new Font object that is loaded from the system fonts. The font will\nmatch the requested bold and italic flags. Pygame uses a small set of common\nfont aliases. If the specific font you ask for is not available, a reasonable\nalternative may be used. If a suitable system font is not found this will fall\nback on loading the default pygame font.\n\nThe font name can also be an iterable of font names, a string of comma-\nseparated font names, or a bytes of comma-separated font names, in which case\nthe set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nLoad a new font from a given filename or a python file object. The size is the\nheight of the font in pixels. If the filename is None the pygame default font\nwill be loaded. If a font cannot be loaded from the arguments given an\nexception will be raised. Once the font is created the size cannot be changed.\n\nFont objects are mainly used to render text into new Surface objects. The\nrender can emulate bold or italic features, but it is better to load from a\nfont with actual italic or bold glyphs. The rendered text can be regular\nstrings or unicode.\n\nWhether the font should be rendered in bold.\n\nWhen set to True, this enables the bold rendering of text. This is a fake\nstretching of the font that doesn't look good on many font types. If possible\nload the font from a real bold font file. While bold, the font will have a\ndifferent width than when normal. This can be mixed with the italic and\nunderline modes.\n\nNew in pygame 2.0.0.\n\nWhether the font should be rendered in italic.\n\nWhen set to True, this enables fake rendering of italic text. This is a fake\nskewing of the font that doesn't look good on many font types. If possible\nload the font from a real italic font file. While italic the font will have a\ndifferent width than when normal. This can be mixed with the bold and\nunderline modes.\n\nNew in pygame 2.0.0.\n\nWhether the font should be rendered in underline.\n\nWhen set to True, all rendered fonts will include an underline. The underline\nis always one pixel thick, regardless of font size. This can be mixed with the\nbold and italic modes.\n\nNew in pygame 2.0.0.\n\nThis creates a new Surface with the specified text rendered on it. pygame\nprovides no way to directly draw text on an existing Surface: instead you must\nuse `Font.render()` to create an image (Surface) of the text, then blit this\nimage onto another Surface.\n\nThe text can only be a single line: newline characters are not rendered. Null\ncharacters ('x00') raise a TypeError. Both Unicode and char (byte) strings are\naccepted. For Unicode strings only UCS-2 characters ('u0001' to 'uFFFF') are\nrecognized. Anything greater raises a UnicodeError. For char strings a\n`LATIN1` encoding is assumed. The antialias argument is a boolean: if true the\ncharacters will have smooth edges. The color argument is the color of the text\n[e.g.: (0,0,255) for blue]. The optional background argument is a color to use\nfor the text background. If no background is passed the area outside the text\nwill be transparent.\n\nThe Surface returned will be of the dimensions required to hold the text. (the\nsame as those returned by Font.size()). If an empty string is passed for the\ntext, a blank surface will be returned that is zero pixel wide and the height\nof the font.\n\nDepending on the type of background and antialiasing used, this returns\ndifferent types of Surfaces. For performance reasons, it is good to know what\ntype of image will be used. If antialiasing is not used, the return image will\nalways be an 8-bit image with a two-color palette. If the background is\ntransparent a colorkey will be set. Antialiased images are rendered to 24-bit\n`RGB` images. If the background is transparent a pixel alpha will be included.\n\nOptimization: if you know that the final destination for the text (on the\nscreen) will always have a solid background, and the text is antialiased, you\ncan improve performance by specifying the background color. This will cause\nthe resulting image to maintain transparency information by colorkey rather\nthan (much less efficient) alpha values.\n\nIf you render '\\n' an unknown char will be rendered. Usually a rectangle.\nInstead you need to handle new lines yourself.\n\nFont rendering is not thread safe: only a single thread can render text at any\ntime.\n\nReturns the dimensions needed to render the text. This can be used to help\ndetermine the positioning needed for text before it is rendered. It can also\nbe used for wordwrapping and other layout effects.\n\nBe aware that most fonts use kerning which adjusts the widths for specific\nletter pairs. For example, the width for \"ae\" will not always match the width\nfor \"a\" + \"e\".\n\nWhen enabled, all rendered fonts will include an underline. The underline is\nalways one pixel thick, regardless of font size. This can be mixed with the\nbold and italic modes.\n\nNote\n\nThis is the same as the `underline` attribute.\n\nReturn True when the font underline is enabled.\n\nNote\n\nThis is the same as the `underline` attribute.\n\nEnables the bold rendering of text. This is a fake stretching of the font that\ndoesn't look good on many font types. If possible load the font from a real\nbold font file. While bold, the font will have a different width than when\nnormal. This can be mixed with the italic and underline modes.\n\nNote\n\nThis is the same as the `bold` attribute.\n\nReturn True when the font bold rendering mode is enabled.\n\nNote\n\nThis is the same as the `bold` attribute.\n\nEnables fake rendering of italic text. This is a fake skewing of the font that\ndoesn't look good on many font types. If possible load the font from a real\nitalic font file. While italic the font will have a different width than when\nnormal. This can be mixed with the bold and underline modes.\n\nNote\n\nThis is the same as the `italic` attribute.\n\nThe list contains tuples for each character, which contain the minimum `X`\noffset, the maximum `X` offset, the minimum `Y` offset, the maximum `Y` offset\nand the advance offset (bearing plus width) of the character. [(minx, maxx,\nminy, maxy, advance), (minx, maxx, miny, maxy, advance), ...]. None is entered\nin the list for each unrecognized character.\n\nReturn True when the font italic rendering mode is enabled.\n\nNote\n\nThis is the same as the `italic` attribute.\n\nReturn the height in pixels for a line of text with the font. When rendering\nmultiple lines of text this is the recommended amount of space between lines.\n\nReturn the height in pixels of the actual rendered text. This is the average\nsize for each glyph in the font.\n\nReturn the height in pixels for the font ascent. The ascent is the number of\npixels from the font baseline to the top of the font.\n\nReturn the height in pixels for the font descent. The descent is the number of\npixels from the font baseline to the bottom of the font.\n\n"}, {"name": "font.Font", "path": "ref/font#pygame.font.Font", "type": "pygame.font", "text": "\nLoad a new font from a given filename or a python file object. The size is the\nheight of the font in pixels. If the filename is None the pygame default font\nwill be loaded. If a font cannot be loaded from the arguments given an\nexception will be raised. Once the font is created the size cannot be changed.\n\nFont objects are mainly used to render text into new Surface objects. The\nrender can emulate bold or italic features, but it is better to load from a\nfont with actual italic or bold glyphs. The rendered text can be regular\nstrings or unicode.\n\nWhether the font should be rendered in bold.\n\nWhen set to True, this enables the bold rendering of text. This is a fake\nstretching of the font that doesn't look good on many font types. If possible\nload the font from a real bold font file. While bold, the font will have a\ndifferent width than when normal. This can be mixed with the italic and\nunderline modes.\n\nNew in pygame 2.0.0.\n\nWhether the font should be rendered in italic.\n\nWhen set to True, this enables fake rendering of italic text. This is a fake\nskewing of the font that doesn't look good on many font types. If possible\nload the font from a real italic font file. While italic the font will have a\ndifferent width than when normal. This can be mixed with the bold and\nunderline modes.\n\nNew in pygame 2.0.0.\n\nWhether the font should be rendered in underline.\n\nWhen set to True, all rendered fonts will include an underline. The underline\nis always one pixel thick, regardless of font size. This can be mixed with the\nbold and italic modes.\n\nNew in pygame 2.0.0.\n\nThis creates a new Surface with the specified text rendered on it. pygame\nprovides no way to directly draw text on an existing Surface: instead you must\nuse `Font.render()` to create an image (Surface) of the text, then blit this\nimage onto another Surface.\n\nThe text can only be a single line: newline characters are not rendered. Null\ncharacters ('x00') raise a TypeError. Both Unicode and char (byte) strings are\naccepted. For Unicode strings only UCS-2 characters ('u0001' to 'uFFFF') are\nrecognized. Anything greater raises a UnicodeError. For char strings a\n`LATIN1` encoding is assumed. The antialias argument is a boolean: if true the\ncharacters will have smooth edges. The color argument is the color of the text\n[e.g.: (0,0,255) for blue]. The optional background argument is a color to use\nfor the text background. If no background is passed the area outside the text\nwill be transparent.\n\nThe Surface returned will be of the dimensions required to hold the text. (the\nsame as those returned by Font.size()). If an empty string is passed for the\ntext, a blank surface will be returned that is zero pixel wide and the height\nof the font.\n\nDepending on the type of background and antialiasing used, this returns\ndifferent types of Surfaces. For performance reasons, it is good to know what\ntype of image will be used. If antialiasing is not used, the return image will\nalways be an 8-bit image with a two-color palette. If the background is\ntransparent a colorkey will be set. Antialiased images are rendered to 24-bit\n`RGB` images. If the background is transparent a pixel alpha will be included.\n\nOptimization: if you know that the final destination for the text (on the\nscreen) will always have a solid background, and the text is antialiased, you\ncan improve performance by specifying the background color. This will cause\nthe resulting image to maintain transparency information by colorkey rather\nthan (much less efficient) alpha values.\n\nIf you render '\\n' an unknown char will be rendered. Usually a rectangle.\nInstead you need to handle new lines yourself.\n\nFont rendering is not thread safe: only a single thread can render text at any\ntime.\n\nReturns the dimensions needed to render the text. This can be used to help\ndetermine the positioning needed for text before it is rendered. It can also\nbe used for wordwrapping and other layout effects.\n\nBe aware that most fonts use kerning which adjusts the widths for specific\nletter pairs. For example, the width for \"ae\" will not always match the width\nfor \"a\" + \"e\".\n\nWhen enabled, all rendered fonts will include an underline. The underline is\nalways one pixel thick, regardless of font size. This can be mixed with the\nbold and italic modes.\n\nNote\n\nThis is the same as the `underline` attribute.\n\nReturn True when the font underline is enabled.\n\nNote\n\nThis is the same as the `underline` attribute.\n\nEnables the bold rendering of text. This is a fake stretching of the font that\ndoesn't look good on many font types. If possible load the font from a real\nbold font file. While bold, the font will have a different width than when\nnormal. This can be mixed with the italic and underline modes.\n\nNote\n\nThis is the same as the `bold` attribute.\n\nReturn True when the font bold rendering mode is enabled.\n\nNote\n\nThis is the same as the `bold` attribute.\n\nEnables fake rendering of italic text. This is a fake skewing of the font that\ndoesn't look good on many font types. If possible load the font from a real\nitalic font file. While italic the font will have a different width than when\nnormal. This can be mixed with the bold and underline modes.\n\nNote\n\nThis is the same as the `italic` attribute.\n\nThe list contains tuples for each character, which contain the minimum `X`\noffset, the maximum `X` offset, the minimum `Y` offset, the maximum `Y` offset\nand the advance offset (bearing plus width) of the character. [(minx, maxx,\nminy, maxy, advance), (minx, maxx, miny, maxy, advance), ...]. None is entered\nin the list for each unrecognized character.\n\nReturn True when the font italic rendering mode is enabled.\n\nNote\n\nThis is the same as the `italic` attribute.\n\nReturn the height in pixels for a line of text with the font. When rendering\nmultiple lines of text this is the recommended amount of space between lines.\n\nReturn the height in pixels of the actual rendered text. This is the average\nsize for each glyph in the font.\n\nReturn the height in pixels for the font ascent. The ascent is the number of\npixels from the font baseline to the top of the font.\n\nReturn the height in pixels for the font descent. The descent is the number of\npixels from the font baseline to the bottom of the font.\n\n"}, {"name": "font.Font.bold", "path": "ref/font#pygame.font.Font.bold", "type": "pygame.font", "text": "\nWhether the font should be rendered in bold.\n\nWhen set to True, this enables the bold rendering of text. This is a fake\nstretching of the font that doesn't look good on many font types. If possible\nload the font from a real bold font file. While bold, the font will have a\ndifferent width than when normal. This can be mixed with the italic and\nunderline modes.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "font.Font.get_ascent", "path": "ref/font#pygame.font.Font.get_ascent", "type": "pygame.font", "text": "\nReturn the height in pixels for the font ascent. The ascent is the number of\npixels from the font baseline to the top of the font.\n\n"}, {"name": "font.Font.get_bold", "path": "ref/font#pygame.font.Font.get_bold", "type": "pygame.font", "text": "\nReturn True when the font bold rendering mode is enabled.\n\nNote\n\nThis is the same as the `bold` attribute.\n\n"}, {"name": "font.Font.get_descent", "path": "ref/font#pygame.font.Font.get_descent", "type": "pygame.font", "text": "\nReturn the height in pixels for the font descent. The descent is the number of\npixels from the font baseline to the bottom of the font.\n\n"}, {"name": "font.Font.get_height", "path": "ref/font#pygame.font.Font.get_height", "type": "pygame.font", "text": "\nReturn the height in pixels of the actual rendered text. This is the average\nsize for each glyph in the font.\n\n"}, {"name": "font.Font.get_italic", "path": "ref/font#pygame.font.Font.get_italic", "type": "pygame.font", "text": "\nReturn True when the font italic rendering mode is enabled.\n\nNote\n\nThis is the same as the `italic` attribute.\n\n"}, {"name": "font.Font.get_linesize", "path": "ref/font#pygame.font.Font.get_linesize", "type": "pygame.font", "text": "\nReturn the height in pixels for a line of text with the font. When rendering\nmultiple lines of text this is the recommended amount of space between lines.\n\n"}, {"name": "font.Font.get_underline", "path": "ref/font#pygame.font.Font.get_underline", "type": "pygame.font", "text": "\nReturn True when the font underline is enabled.\n\nNote\n\nThis is the same as the `underline` attribute.\n\n"}, {"name": "font.Font.italic", "path": "ref/font#pygame.font.Font.italic", "type": "pygame.font", "text": "\nWhether the font should be rendered in italic.\n\nWhen set to True, this enables fake rendering of italic text. This is a fake\nskewing of the font that doesn't look good on many font types. If possible\nload the font from a real italic font file. While italic the font will have a\ndifferent width than when normal. This can be mixed with the bold and\nunderline modes.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "font.Font.metrics", "path": "ref/font#pygame.font.Font.metrics", "type": "pygame.font", "text": "\nThe list contains tuples for each character, which contain the minimum `X`\noffset, the maximum `X` offset, the minimum `Y` offset, the maximum `Y` offset\nand the advance offset (bearing plus width) of the character. [(minx, maxx,\nminy, maxy, advance), (minx, maxx, miny, maxy, advance), ...]. None is entered\nin the list for each unrecognized character.\n\n"}, {"name": "font.Font.render", "path": "ref/font#pygame.font.Font.render", "type": "pygame.font", "text": "\nThis creates a new Surface with the specified text rendered on it. pygame\nprovides no way to directly draw text on an existing Surface: instead you must\nuse `Font.render()` to create an image (Surface) of the text, then blit this\nimage onto another Surface.\n\nThe text can only be a single line: newline characters are not rendered. Null\ncharacters ('x00') raise a TypeError. Both Unicode and char (byte) strings are\naccepted. For Unicode strings only UCS-2 characters ('u0001' to 'uFFFF') are\nrecognized. Anything greater raises a UnicodeError. For char strings a\n`LATIN1` encoding is assumed. The antialias argument is a boolean: if true the\ncharacters will have smooth edges. The color argument is the color of the text\n[e.g.: (0,0,255) for blue]. The optional background argument is a color to use\nfor the text background. If no background is passed the area outside the text\nwill be transparent.\n\nThe Surface returned will be of the dimensions required to hold the text. (the\nsame as those returned by Font.size()). If an empty string is passed for the\ntext, a blank surface will be returned that is zero pixel wide and the height\nof the font.\n\nDepending on the type of background and antialiasing used, this returns\ndifferent types of Surfaces. For performance reasons, it is good to know what\ntype of image will be used. If antialiasing is not used, the return image will\nalways be an 8-bit image with a two-color palette. If the background is\ntransparent a colorkey will be set. Antialiased images are rendered to 24-bit\n`RGB` images. If the background is transparent a pixel alpha will be included.\n\nOptimization: if you know that the final destination for the text (on the\nscreen) will always have a solid background, and the text is antialiased, you\ncan improve performance by specifying the background color. This will cause\nthe resulting image to maintain transparency information by colorkey rather\nthan (much less efficient) alpha values.\n\nIf you render '\\n' an unknown char will be rendered. Usually a rectangle.\nInstead you need to handle new lines yourself.\n\nFont rendering is not thread safe: only a single thread can render text at any\ntime.\n\n"}, {"name": "font.Font.set_bold", "path": "ref/font#pygame.font.Font.set_bold", "type": "pygame.font", "text": "\nEnables the bold rendering of text. This is a fake stretching of the font that\ndoesn't look good on many font types. If possible load the font from a real\nbold font file. While bold, the font will have a different width than when\nnormal. This can be mixed with the italic and underline modes.\n\nNote\n\nThis is the same as the `bold` attribute.\n\n"}, {"name": "font.Font.set_italic", "path": "ref/font#pygame.font.Font.set_italic", "type": "pygame.font", "text": "\nEnables fake rendering of italic text. This is a fake skewing of the font that\ndoesn't look good on many font types. If possible load the font from a real\nitalic font file. While italic the font will have a different width than when\nnormal. This can be mixed with the bold and underline modes.\n\nNote\n\nThis is the same as the `italic` attribute.\n\n"}, {"name": "font.Font.set_underline", "path": "ref/font#pygame.font.Font.set_underline", "type": "pygame.font", "text": "\nWhen enabled, all rendered fonts will include an underline. The underline is\nalways one pixel thick, regardless of font size. This can be mixed with the\nbold and italic modes.\n\nNote\n\nThis is the same as the `underline` attribute.\n\n"}, {"name": "font.Font.size", "path": "ref/font#pygame.font.Font.size", "type": "pygame.font", "text": "\nReturns the dimensions needed to render the text. This can be used to help\ndetermine the positioning needed for text before it is rendered. It can also\nbe used for wordwrapping and other layout effects.\n\nBe aware that most fonts use kerning which adjusts the widths for specific\nletter pairs. For example, the width for \"ae\" will not always match the width\nfor \"a\" + \"e\".\n\n"}, {"name": "font.Font.underline", "path": "ref/font#pygame.font.Font.underline", "type": "pygame.font", "text": "\nWhether the font should be rendered in underline.\n\nWhen set to True, all rendered fonts will include an underline. The underline\nis always one pixel thick, regardless of font size. This can be mixed with the\nbold and italic modes.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "font.get_default_font", "path": "ref/font#pygame.font.get_default_font", "type": "pygame.font", "text": "\nReturn the filename of the system font. This is not the full path to the file.\nThis file can usually be found in the same directory as the font module, but\nit can also be bundled in separate archives.\n\n"}, {"name": "font.get_fonts", "path": "ref/font#pygame.font.get_fonts", "type": "pygame.font", "text": "\nReturns a list of all the fonts available on the system. The names of the\nfonts will be set to lowercase with all spaces and punctuation removed. This\nworks on most systems, but some will return an empty list if they cannot find\nfonts.\n\n"}, {"name": "font.get_init", "path": "ref/font#pygame.font.get_init", "type": "pygame.font", "text": "\nTest if the font module is initialized or not.\n\n"}, {"name": "font.init", "path": "ref/font#pygame.font.init", "type": "pygame.font", "text": "\nThis method is called automatically by `pygame.init()`. It initializes the\nfont module. The module must be initialized before any other functions will\nwork.\n\nIt is safe to call this function more than once.\n\n"}, {"name": "font.match_font", "path": "ref/font#pygame.font.match_font", "type": "pygame.font", "text": "\nReturns the full path to a font file on the system. If bold or italic are set\nto true, this will attempt to find the correct family of font.\n\nThe font name can also be an iterable of font names, a string of comma-\nseparated font names, or a bytes of comma-separated font names, in which case\nthe set of names will be searched in order. If none of the given names are\nfound, None is returned.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nExample:\n\n"}, {"name": "font.quit", "path": "ref/font#pygame.font.quit", "type": "pygame.font", "text": "\nManually uninitialize SDL_ttf's font system. This is called automatically by\n`pygame.quit()`.\n\nIt is safe to call this function even if font is currently not initialized.\n\n"}, {"name": "font.SysFont", "path": "ref/font#pygame.font.SysFont", "type": "pygame.font", "text": "\nReturn a new Font object that is loaded from the system fonts. The font will\nmatch the requested bold and italic flags. Pygame uses a small set of common\nfont aliases. If the specific font you ask for is not available, a reasonable\nalternative may be used. If a suitable system font is not found this will fall\nback on loading the default pygame font.\n\nThe font name can also be an iterable of font names, a string of comma-\nseparated font names, or a bytes of comma-separated font names, in which case\nthe set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\n"}, {"name": "freetype", "path": "ref/freetype", "type": "pygame.freetype", "text": "\nThe `pygame.freetype` module is a replacement for `pygame.font`. It has all of\nthe functionality of the original, plus many new features. Yet is has\nabsolutely no dependencies on the SDL_ttf library. It is implemented directly\non the FreeType 2 library. The `pygame.freetype` module is not itself backward\ncompatible with `pygame.font`. Instead, use the `pygame.ftfont` module as a\ndrop-in replacement for `pygame.font`.\n\nAll font file formats supported by FreeType can be rendered by\n`pygame.freetype`, namely `TTF`, Type1, `CFF`, OpenType, `SFNT`, `PCF`, `FNT`,\n`BDF`, `PFR` and Type42 fonts. All glyphs having UTF-32 code points are\naccessible (see `Font.ucs4`).\n\nMost work on fonts is done using `Font` instances. The module itself only has\nroutines for initialization and creation of `Font` objects. You can load fonts\nfrom the system using the `SysFont()` function.\n\nExtra support of bitmap fonts is available. Available bitmap sizes can be\nlisted (see `Font.get_sizes()`). For bitmap only fonts `Font` can set the size\nfor you (see the `Font.size` property).\n\nFor now undefined character codes are replaced with the `.notdef` (not\ndefined) character. How undefined codes are handled may become configurable in\na future release.\n\nPygame comes with a built-in default font. This can always be accessed by\npassing None as the font name to the `Font` constructor.\n\nExtra rendering features available to `pygame.freetype.Font` are direct to\nsurface rendering (see `Font.render_to()`), character kerning (see\n`Font.kerning`), vertical layout (see `Font.vertical`), rotation of rendered\ntext (see `Font.rotation`), and the strong style (see `Font.strong`). Some\nproperties are configurable, such as strong style strength (see\n`Font.strength`) and underline positioning (see `Font.underline_adjustment`).\nText can be positioned by the upper right corner of the text box or by the\ntext baseline (see `Font.origin`). Finally, a font's vertical and horizontal\nsize can be adjusted separately (see `Font.size`). The\n`pygame.examples.freetype_misc` example shows these features in use.\n\nThe pygame package does not import `freetype` automatically when loaded. This\nmodule must be imported explicitly to be used.\n\nNew in pygame 1.9.2: `freetype`\n\nReturn a description of the last error which occurred in the FreeType2\nlibrary, or `None` if no errors have occurred.\n\nReturns the version of the FreeType library in use by this module.\n\nNote that the `freetype` module depends on the FreeType 2 library. It will not\ncompile with the original FreeType 1.0. Hence, the first element of the tuple\nwill always be \"2\".\n\nThis function initializes the underlying FreeType library and must be called\nbefore trying to use any of the functionality of the `freetype` module.\n\nHowever, `pygame.init()` will automatically call this function if the\n`freetype` module is already imported. It is safe to call this function more\nthan once.\n\nOptionally, you may specify a default cache_size for the Glyph cache: the\nmaximum number of glyphs that will be cached at any given time by the module.\nExceedingly small values will be automatically tuned for performance. Also a\ndefault pixel resolution, in dots per inch, can be given to adjust font\nscaling.\n\nThis function closes the `freetype` module. After calling this function, you\nshould not invoke any class, method or function related to the `freetype`\nmodule as they are likely to fail or might give unpredictable results. It is\nsafe to call this function even if the module hasn't been initialized yet.\n\nReturns `True` if the `pygame.freetype` module is currently initialized.\n\nNew in pygame 1.9.5.\n\nDEPRECATED: Returns `True` if the `pygame.freetype` module is currently\ninitialized. Use `get_init()` instead.\n\nSee `pygame.freetype.init()`.\n\nReturns the default pixel size, in dots per inch, for the module. The default\nis 72 DPI.\n\nSet the default pixel size, in dots per inch, for the module. If the optional\nargument is omitted or zero the resolution is reset to 72 DPI.\n\nReturn a new Font object that is loaded from the system fonts. The font will\nmatch the requested bold and italic flags. Pygame uses a small set of common\nfont aliases. If the specific font you ask for is not available, a reasonable\nalternative may be used. If a suitable system font is not found this will fall\nback on loading the default pygame font.\n\nThe font name can also be an iterable of font names, a string of comma-\nseparated font names, or a bytes of comma-separated font names, in which case\nthe set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nReturn the filename of the default pygame font. This is not the full path to\nthe file. The file is usually in the same directory as the font module, but\ncan also be bundled in a separate archive.\n\nArgument file can be either a string representing the font's filename, a file-\nlike object containing the font, or None; if None, a default, Pygame, font is\nused.\n\nOptionally, a size argument may be specified to set the default size in\npoints, which determines the size of the rendered characters. The size can\nalso be passed explicitly to each method call. Because of the way the caching\nsystem works, specifying a default size on the constructor doesn't imply a\nperformance gain over manually passing the size on each function call. If the\nfont is bitmap and no size is given, the default size is set to the first\navailable size for the font.\n\nIf the font file has more than one font, the font to load can be chosen with\nthe index argument. An exception is raised for an out-of-range font index\nvalue.\n\nThe optional resolution argument sets the pixel size, in dots per inch, for\nuse in scaling glyphs for this Font instance. If 0 then the default module\nvalue, set by `init()`, is used. The Font object's resolution can only be\nchanged by re-initializing the Font instance.\n\nThe optional ucs4 argument, an integer, sets the default text translation\nmode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True), to\ntreat Unicode text as UCS-4, with no surrogate pairs. See `Font.ucs4`.\n\nRead only. Returns the real (long) name of the font, as recorded in the font\nfile.\n\nRead only. Returns the path of the loaded font file\n\nGet or set the default size for text metrics and rendering. It can be a single\npoint size, given as a Python `int` or `float`, or a font ppem (width, height)\n`tuple`. Size values are non-negative. A zero size or width represents an\nundefined size. In this case the size must be given as a method argument, or\nan exception is raised. A zero width but non-zero height is a ValueError.\n\nFor a scalable font, a single number value is equivalent to a tuple with width\nequal height. A font can be stretched vertically with height set greater than\nwidth, or horizontally with width set greater than height. For embedded\nbitmaps, as listed by `get_sizes()`, use the nominal width and height to\nselect an available size.\n\nFont size differs for a non-scalable, bitmap, font. During a method call it\nmust match one of the available sizes returned by method `get_sizes()`. If\nnot, an exception is raised. If the size is a single number, the size is first\nmatched against the point size value. If no match, then the available size\nwith the same nominal width and height is chosen.\n\nGets the final dimensions and origin, in pixels, of text using the optional\nsize in points, style, and rotation. For other relevant render properties, and\nfor any optional argument not given, the default values set for the `Font`\ninstance are used.\n\nReturns a `Rect` instance containing the width and height of the text's\nbounding box and the position of the text's origin. The origin is useful in\naligning separately rendered pieces of text. It gives the baseline position\nand bearing at the start of the text. See the `render_to()` method for an\nexample.\n\nIf text is a char (byte) string, its encoding is assumed to be `LATIN1`.\n\nOptionally, text can be `None`, which will return the bounding rectangle for\nthe text passed to a previous `get_rect()`, `render()`, `render_to()`,\n`render_raw()`, or `render_raw_to()` call. See `render_to()` for more details.\n\nReturns the glyph metrics for each character in text.\n\nThe glyph metrics are returned as a list of tuples. Each tuple gives metrics\nof a single character glyph. The glyph metrics are:\n\nThe bounding box min_x, max_x, min_y, and max_y values are returned as grid-\nfitted pixel coordinates of type int. The advance values are float values.\n\nThe calculations are done using the font's default size in points. Optionally\nyou may specify another point size with the size argument.\n\nThe metrics are adjusted for the current rotation, strong, and oblique\nsettings.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nRead only. Gets the height of the font. This is the average value of all\nglyphs in the font.\n\nRead only. Return the number of units from the font's baseline to the top of\nthe bounding box.\n\nRead only. Return the height in font units for the font descent. The descent\nis the number of units from the font's baseline to the bottom of the bounding\nbox.\n\nReturn the number of units from the font's baseline to the top of the bounding\nbox. It is not adjusted for strong or rotation.\n\nReturn the number of pixels from the font's baseline to the top of the\nbounding box. It is not adjusted for strong or rotation.\n\nReturns the height of the font. This is the average value of all glyphs in the\nfont. It is not adjusted for strong or rotation.\n\nReturn the glyph bounding box height of the font in pixels. This is the\naverage value of all glyphs in the font. It is not adjusted for strong or\nrotation.\n\nReturns a list of tuple records, one for each point size supported. Each tuple\ncontaining the point size, the height in pixels, width in pixels, horizontal\nppem (nominal width) in fractional pixels, and vertical ppem (nominal height)\nin fractional pixels.\n\nReturns a new `Surface`, with the text rendered to it in the color given by\n'fgcolor'. If no foreground color is given, the default foreground color,\n`fgcolor` is used. If `bgcolor` is given, the surface will be filled with this\ncolor. When no background color is given, the surface background is\ntransparent, zero alpha. Normally the returned surface has a 32 bit pixel\nsize. However, if `bgcolor` is `None` and anti-aliasing is disabled a\nmonochrome 8 bit colorkey surface, with colorkey set for the background color,\nis returned.\n\nThe return value is a tuple: the new surface and the bounding rectangle giving\nthe size and origin of the rendered text.\n\nIf an empty string is passed for text then the returned Rect is zero width and\nthe height of the font.\n\nOptional fgcolor, style, rotation, and size arguments override the default\nvalues set for the `Font` instance.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nOptionally, text can be `None`, which will render the text passed to a\nprevious `get_rect()`, `render()`, `render_to()`, `render_raw()`, or\n`render_raw_to()` call. See `render_to()` for details.\n\nRenders the string text to the `pygame.Surface` surf, at position dest, a (x,\ny) surface coordinate pair. If either x or y is not an integer it is converted\nto one if possible. Any sequence where the first two items are x and y\npositional elements is accepted, including a `Rect` instance. As with\n`render()`, optional fgcolor, style, rotation, and size argument are\navailable.\n\nIf a background color bgcolor is given, the text bounding box is first filled\nwith that color. The text is blitted next. Both the background fill and text\nrendering involve full alpha blits. That is, the alpha values of the\nforeground, background, and destination target surface all affect the blit.\n\nThe return value is a rectangle giving the size and position of the rendered\ntext within the surface.\n\nIf an empty string is passed for text then the returned `Rect` is zero width\nand the height of the font. The rect will test False.\n\nOptionally, text can be set `None`, which will re-render text passed to a\nprevious `render_to()`, `get_rect()`, `render()`, `render_raw()`, or\n`render_raw_to()` call. Primarily, this feature is an aid to using\n`render_to()` in combination with `get_rect()`. An example:\n\nWhen `render_to()` is called with the same font properties \u2015 `size`, `style`,\n`strength`, `wide`, `antialiased`, `vertical`, `rotation`, `kerning`, and\n`use_bitmap_strikes` \u2015 as `get_rect()`, `render_to()` will use the layout\ncalculated by `get_rect()`. Otherwise, `render_to()` will recalculate the\nlayout if called with a text string or one of the above properties has changed\nafter the `get_rect()` call.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nLike `render()` but with the pixels returned as a byte string of 8-bit gray-\nscale values. The foreground color is 255, the background 0, useful as an\nalpha mask for a foreground pattern.\n\nRender to an array object exposing an array struct interface. The array must\nbe two dimensional with integer items. The default dest value, `None`, is\nequivalent to position (0, 0). See `render_to()`. As with the other render\nmethods, text can be `None` to render a text string passed previously to\nanother method.\n\nThe return value is a `pygame.Rect()` giving the size and position of the\nrendered text.\n\nGets or sets the default style of the Font. This default style will be used\nfor all text rendering and size calculations unless overridden specifically a\nrender or `get_rect()` call. The style value may be a bit-wise OR of one or\nmore of the following constants:\n\nThese constants may be found on the FreeType constants module. Optionally, the\ndefault style can be modified or obtained accessing the individual style\nattributes (underline, oblique, strong).\n\nThe `STYLE_OBLIQUE` and `STYLE_STRONG` styles are for scalable fonts only. An\nattempt to set either for a bitmap font raises an AttributeError. An attempt\nto set either for an inactive font, as returned by `Font.__new__()`, raises a\nRuntimeError.\n\nAssigning `STYLE_DEFAULT` to the `style` property leaves the property\nunchanged, as this property defines the default. The `style` property will\nnever return `STYLE_DEFAULT`.\n\nGets or sets whether the font will be underlined when drawing text. This\ndefault style value will be used for all text rendering and size calculations\nunless overridden specifically in a render or `get_rect()` call, via the\n'style' parameter.\n\nGets or sets whether the font will be bold when drawing text. This default\nstyle value will be used for all text rendering and size calculations unless\noverridden specifically in a render or `get_rect()` call, via the 'style'\nparameter.\n\nGets or sets whether the font will be rendered as oblique. This default style\nvalue will be used for all text rendering and size calculations unless\noverridden specifically in a render or `get_rect()` call, via the style\nparameter.\n\nThe oblique style is only supported for scalable (outline) fonts. An attempt\nto set this style on a bitmap font will raise an AttributeError. If the font\nobject is inactive, as returned by `Font.__new__()`, setting this property\nraises a RuntimeError.\n\nGets or sets whether the font will be stretched horizontally when drawing\ntext. It produces a result similar to `pygame.font.Font`'s bold. This style\nnot available for rotated text.\n\nThe amount by which a font glyph's size is enlarged for the strong or wide\ntransformations, as a fraction of the untransformed size. For the wide style\nonly the horizontal dimension is increased. For strong text both the\nhorizontal and vertical dimensions are enlarged. A wide style of strength\n0.08333 ( 1/12 ) is equivalent to the `pygame.font.Font` bold style. The\ndefault is 0.02778 ( 1/36 ).\n\nThe strength style is only supported for scalable (outline) fonts. An attempt\nto set this property on a bitmap font will raise an AttributeError. If the\nfont object is inactive, as returned by `Font.__new__()`, assignment to this\nproperty raises a RuntimeError.\n\nGets or sets a factor which, when positive, is multiplied with the font's\nunderline offset to adjust the underline position. A negative value turns an\nunderline into a strike-through or overline. It is multiplied with the\nascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5\nclosely matches Tango underlining. A value of 1.0 mimics `pygame.font.Font`\nunderlining.\n\nRead only. Returns `True` if the font contains fixed-width characters (for\nexample Courier, Bitstream Vera Sans Mono, Andale Mono).\n\nRead only. Returns the number of point sizes for which the font contains\nbitmap character images. If zero then the font is not a bitmap font. A\nscalable font may contain pre-rendered point sizes as strikes.\n\nRead only. Returns `True` if the font contains outline glyphs. If so, the\npoint size is not limited to available bitmap sizes.\n\nSome scalable fonts include embedded bitmaps for particular point sizes. This\nproperty controls whether or not those bitmap strikes are used. Set it `False`\nto disable the loading of any bitmap strike. Set it `True`, the default, to\npermit bitmap strikes for a non-rotated render with no style other than `wide`\nor `underline`. This property is ignored for bitmap fonts.\n\nSee also `fixed_sizes` and `get_sizes()`.\n\nGets or sets the font's anti-aliasing mode. This defaults to `True` on all\nfonts, which are rendered with full 8 bit blending.\n\nSet to `False` to do monochrome rendering. This should provide a small speed\ngain and reduce cache memory size.\n\nGets or sets the font's kerning mode. This defaults to `False` on all fonts,\nwhich will be rendered without kerning.\n\nSet to `True` to add kerning between character pairs, if supported by the\nfont, when positioning glyphs.\n\nGets or sets whether the characters are laid out vertically rather than\nhorizontally. May be useful when rendering Kanji or some other vertical\nscript.\n\nSet to `True` to switch to a vertical text layout. The default is `False`,\nplace horizontally.\n\nNote that the `Font` class does not automatically determine script\norientation. Vertical layout must be selected explicitly.\n\nAlso note that several font formats (especially bitmap based ones) don't\ncontain the necessary metrics to draw glyphs vertically, so drawing in those\ncases will give unspecified results.\n\nGets or sets the baseline angle of the rendered text. The angle is represented\nas integer degrees. The default angle is 0, with horizontal text rendered\nalong the X-axis, and vertical text along the Y-axis. A positive value rotates\nthese axes counterclockwise that many degrees. A negative angle corresponds to\na clockwise rotation. The rotation value is normalized to a value within the\nrange 0 to 359 inclusive (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315,\n720 -> 720 - (2 * 360) -> 0).\n\nOnly scalable (outline) fonts can be rotated. An attempt to change the\nrotation of a bitmap font raises an AttributeError. An attempt to change the\nrotation of an inactive font instance, as returned by `Font.__new__()`, raises\na RuntimeError.\n\nGets or sets the default glyph rendering color. It is initially opaque black \u2015\n(0, 0, 0, 255). Applies to `render()` and `render_to()`.\n\nGets or sets the default background rendering color. Initially it is unset and\ntext will render with a transparent background by default. Applies to\n`render()` and `render_to()`.\n\nNew in pygame 2.0.0.\n\nIf set `True`, `render_to()` and `render_raw_to()` will take the dest position\nto be that of the text origin, as opposed to the top-left corner of the\nbounding box. See `get_rect()` for details.\n\nIf set `True`, then the text boundary rectangle will be inflated to match that\nof `font.Font`. Otherwise, the boundary rectangle is just large enough for the\ntext.\n\nGets or sets the decoding of Unicode text. By default, the freetype module\nperforms UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit\nescape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their\ncorresponding UTF-32 code points on Python interpreters built with a UCS-2\nUnicode type (on Windows, for instance). It also means character values within\nthe UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a\nsurrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError.\nSetting ucs4 `True` turns surrogate pair decoding off, allowing access the\nfull UCS-4 character range to a Python interpreter built with four-byte\nUnicode character support.\n\nRead only. Gets pixel size used in scaling font glyphs for this `Font`\ninstance.\n\n"}, {"name": "freetype.Font", "path": "ref/freetype#pygame.freetype.Font", "type": "pygame.freetype", "text": "\nArgument file can be either a string representing the font's filename, a file-\nlike object containing the font, or None; if None, a default, Pygame, font is\nused.\n\nOptionally, a size argument may be specified to set the default size in\npoints, which determines the size of the rendered characters. The size can\nalso be passed explicitly to each method call. Because of the way the caching\nsystem works, specifying a default size on the constructor doesn't imply a\nperformance gain over manually passing the size on each function call. If the\nfont is bitmap and no size is given, the default size is set to the first\navailable size for the font.\n\nIf the font file has more than one font, the font to load can be chosen with\nthe index argument. An exception is raised for an out-of-range font index\nvalue.\n\nThe optional resolution argument sets the pixel size, in dots per inch, for\nuse in scaling glyphs for this Font instance. If 0 then the default module\nvalue, set by `init()`, is used. The Font object's resolution can only be\nchanged by re-initializing the Font instance.\n\nThe optional ucs4 argument, an integer, sets the default text translation\nmode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True), to\ntreat Unicode text as UCS-4, with no surrogate pairs. See `Font.ucs4`.\n\nRead only. Returns the real (long) name of the font, as recorded in the font\nfile.\n\nRead only. Returns the path of the loaded font file\n\nGet or set the default size for text metrics and rendering. It can be a single\npoint size, given as a Python `int` or `float`, or a font ppem (width, height)\n`tuple`. Size values are non-negative. A zero size or width represents an\nundefined size. In this case the size must be given as a method argument, or\nan exception is raised. A zero width but non-zero height is a ValueError.\n\nFor a scalable font, a single number value is equivalent to a tuple with width\nequal height. A font can be stretched vertically with height set greater than\nwidth, or horizontally with width set greater than height. For embedded\nbitmaps, as listed by `get_sizes()`, use the nominal width and height to\nselect an available size.\n\nFont size differs for a non-scalable, bitmap, font. During a method call it\nmust match one of the available sizes returned by method `get_sizes()`. If\nnot, an exception is raised. If the size is a single number, the size is first\nmatched against the point size value. If no match, then the available size\nwith the same nominal width and height is chosen.\n\nGets the final dimensions and origin, in pixels, of text using the optional\nsize in points, style, and rotation. For other relevant render properties, and\nfor any optional argument not given, the default values set for the `Font`\ninstance are used.\n\nReturns a `Rect` instance containing the width and height of the text's\nbounding box and the position of the text's origin. The origin is useful in\naligning separately rendered pieces of text. It gives the baseline position\nand bearing at the start of the text. See the `render_to()` method for an\nexample.\n\nIf text is a char (byte) string, its encoding is assumed to be `LATIN1`.\n\nOptionally, text can be `None`, which will return the bounding rectangle for\nthe text passed to a previous `get_rect()`, `render()`, `render_to()`,\n`render_raw()`, or `render_raw_to()` call. See `render_to()` for more details.\n\nReturns the glyph metrics for each character in text.\n\nThe glyph metrics are returned as a list of tuples. Each tuple gives metrics\nof a single character glyph. The glyph metrics are:\n\nThe bounding box min_x, max_x, min_y, and max_y values are returned as grid-\nfitted pixel coordinates of type int. The advance values are float values.\n\nThe calculations are done using the font's default size in points. Optionally\nyou may specify another point size with the size argument.\n\nThe metrics are adjusted for the current rotation, strong, and oblique\nsettings.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nRead only. Gets the height of the font. This is the average value of all\nglyphs in the font.\n\nRead only. Return the number of units from the font's baseline to the top of\nthe bounding box.\n\nRead only. Return the height in font units for the font descent. The descent\nis the number of units from the font's baseline to the bottom of the bounding\nbox.\n\nReturn the number of units from the font's baseline to the top of the bounding\nbox. It is not adjusted for strong or rotation.\n\nReturn the number of pixels from the font's baseline to the top of the\nbounding box. It is not adjusted for strong or rotation.\n\nReturns the height of the font. This is the average value of all glyphs in the\nfont. It is not adjusted for strong or rotation.\n\nReturn the glyph bounding box height of the font in pixels. This is the\naverage value of all glyphs in the font. It is not adjusted for strong or\nrotation.\n\nReturns a list of tuple records, one for each point size supported. Each tuple\ncontaining the point size, the height in pixels, width in pixels, horizontal\nppem (nominal width) in fractional pixels, and vertical ppem (nominal height)\nin fractional pixels.\n\nReturns a new `Surface`, with the text rendered to it in the color given by\n'fgcolor'. If no foreground color is given, the default foreground color,\n`fgcolor` is used. If `bgcolor` is given, the surface will be filled with this\ncolor. When no background color is given, the surface background is\ntransparent, zero alpha. Normally the returned surface has a 32 bit pixel\nsize. However, if `bgcolor` is `None` and anti-aliasing is disabled a\nmonochrome 8 bit colorkey surface, with colorkey set for the background color,\nis returned.\n\nThe return value is a tuple: the new surface and the bounding rectangle giving\nthe size and origin of the rendered text.\n\nIf an empty string is passed for text then the returned Rect is zero width and\nthe height of the font.\n\nOptional fgcolor, style, rotation, and size arguments override the default\nvalues set for the `Font` instance.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nOptionally, text can be `None`, which will render the text passed to a\nprevious `get_rect()`, `render()`, `render_to()`, `render_raw()`, or\n`render_raw_to()` call. See `render_to()` for details.\n\nRenders the string text to the `pygame.Surface` surf, at position dest, a (x,\ny) surface coordinate pair. If either x or y is not an integer it is converted\nto one if possible. Any sequence where the first two items are x and y\npositional elements is accepted, including a `Rect` instance. As with\n`render()`, optional fgcolor, style, rotation, and size argument are\navailable.\n\nIf a background color bgcolor is given, the text bounding box is first filled\nwith that color. The text is blitted next. Both the background fill and text\nrendering involve full alpha blits. That is, the alpha values of the\nforeground, background, and destination target surface all affect the blit.\n\nThe return value is a rectangle giving the size and position of the rendered\ntext within the surface.\n\nIf an empty string is passed for text then the returned `Rect` is zero width\nand the height of the font. The rect will test False.\n\nOptionally, text can be set `None`, which will re-render text passed to a\nprevious `render_to()`, `get_rect()`, `render()`, `render_raw()`, or\n`render_raw_to()` call. Primarily, this feature is an aid to using\n`render_to()` in combination with `get_rect()`. An example:\n\nWhen `render_to()` is called with the same font properties \u2015 `size`, `style`,\n`strength`, `wide`, `antialiased`, `vertical`, `rotation`, `kerning`, and\n`use_bitmap_strikes` \u2015 as `get_rect()`, `render_to()` will use the layout\ncalculated by `get_rect()`. Otherwise, `render_to()` will recalculate the\nlayout if called with a text string or one of the above properties has changed\nafter the `get_rect()` call.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nLike `render()` but with the pixels returned as a byte string of 8-bit gray-\nscale values. The foreground color is 255, the background 0, useful as an\nalpha mask for a foreground pattern.\n\nRender to an array object exposing an array struct interface. The array must\nbe two dimensional with integer items. The default dest value, `None`, is\nequivalent to position (0, 0). See `render_to()`. As with the other render\nmethods, text can be `None` to render a text string passed previously to\nanother method.\n\nThe return value is a `pygame.Rect()` giving the size and position of the\nrendered text.\n\nGets or sets the default style of the Font. This default style will be used\nfor all text rendering and size calculations unless overridden specifically a\nrender or `get_rect()` call. The style value may be a bit-wise OR of one or\nmore of the following constants:\n\nThese constants may be found on the FreeType constants module. Optionally, the\ndefault style can be modified or obtained accessing the individual style\nattributes (underline, oblique, strong).\n\nThe `STYLE_OBLIQUE` and `STYLE_STRONG` styles are for scalable fonts only. An\nattempt to set either for a bitmap font raises an AttributeError. An attempt\nto set either for an inactive font, as returned by `Font.__new__()`, raises a\nRuntimeError.\n\nAssigning `STYLE_DEFAULT` to the `style` property leaves the property\nunchanged, as this property defines the default. The `style` property will\nnever return `STYLE_DEFAULT`.\n\nGets or sets whether the font will be underlined when drawing text. This\ndefault style value will be used for all text rendering and size calculations\nunless overridden specifically in a render or `get_rect()` call, via the\n'style' parameter.\n\nGets or sets whether the font will be bold when drawing text. This default\nstyle value will be used for all text rendering and size calculations unless\noverridden specifically in a render or `get_rect()` call, via the 'style'\nparameter.\n\nGets or sets whether the font will be rendered as oblique. This default style\nvalue will be used for all text rendering and size calculations unless\noverridden specifically in a render or `get_rect()` call, via the style\nparameter.\n\nThe oblique style is only supported for scalable (outline) fonts. An attempt\nto set this style on a bitmap font will raise an AttributeError. If the font\nobject is inactive, as returned by `Font.__new__()`, setting this property\nraises a RuntimeError.\n\nGets or sets whether the font will be stretched horizontally when drawing\ntext. It produces a result similar to `pygame.font.Font`'s bold. This style\nnot available for rotated text.\n\nThe amount by which a font glyph's size is enlarged for the strong or wide\ntransformations, as a fraction of the untransformed size. For the wide style\nonly the horizontal dimension is increased. For strong text both the\nhorizontal and vertical dimensions are enlarged. A wide style of strength\n0.08333 ( 1/12 ) is equivalent to the `pygame.font.Font` bold style. The\ndefault is 0.02778 ( 1/36 ).\n\nThe strength style is only supported for scalable (outline) fonts. An attempt\nto set this property on a bitmap font will raise an AttributeError. If the\nfont object is inactive, as returned by `Font.__new__()`, assignment to this\nproperty raises a RuntimeError.\n\nGets or sets a factor which, when positive, is multiplied with the font's\nunderline offset to adjust the underline position. A negative value turns an\nunderline into a strike-through or overline. It is multiplied with the\nascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5\nclosely matches Tango underlining. A value of 1.0 mimics `pygame.font.Font`\nunderlining.\n\nRead only. Returns `True` if the font contains fixed-width characters (for\nexample Courier, Bitstream Vera Sans Mono, Andale Mono).\n\nRead only. Returns the number of point sizes for which the font contains\nbitmap character images. If zero then the font is not a bitmap font. A\nscalable font may contain pre-rendered point sizes as strikes.\n\nRead only. Returns `True` if the font contains outline glyphs. If so, the\npoint size is not limited to available bitmap sizes.\n\nSome scalable fonts include embedded bitmaps for particular point sizes. This\nproperty controls whether or not those bitmap strikes are used. Set it `False`\nto disable the loading of any bitmap strike. Set it `True`, the default, to\npermit bitmap strikes for a non-rotated render with no style other than `wide`\nor `underline`. This property is ignored for bitmap fonts.\n\nSee also `fixed_sizes` and `get_sizes()`.\n\nGets or sets the font's anti-aliasing mode. This defaults to `True` on all\nfonts, which are rendered with full 8 bit blending.\n\nSet to `False` to do monochrome rendering. This should provide a small speed\ngain and reduce cache memory size.\n\nGets or sets the font's kerning mode. This defaults to `False` on all fonts,\nwhich will be rendered without kerning.\n\nSet to `True` to add kerning between character pairs, if supported by the\nfont, when positioning glyphs.\n\nGets or sets whether the characters are laid out vertically rather than\nhorizontally. May be useful when rendering Kanji or some other vertical\nscript.\n\nSet to `True` to switch to a vertical text layout. The default is `False`,\nplace horizontally.\n\nNote that the `Font` class does not automatically determine script\norientation. Vertical layout must be selected explicitly.\n\nAlso note that several font formats (especially bitmap based ones) don't\ncontain the necessary metrics to draw glyphs vertically, so drawing in those\ncases will give unspecified results.\n\nGets or sets the baseline angle of the rendered text. The angle is represented\nas integer degrees. The default angle is 0, with horizontal text rendered\nalong the X-axis, and vertical text along the Y-axis. A positive value rotates\nthese axes counterclockwise that many degrees. A negative angle corresponds to\na clockwise rotation. The rotation value is normalized to a value within the\nrange 0 to 359 inclusive (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315,\n720 -> 720 - (2 * 360) -> 0).\n\nOnly scalable (outline) fonts can be rotated. An attempt to change the\nrotation of a bitmap font raises an AttributeError. An attempt to change the\nrotation of an inactive font instance, as returned by `Font.__new__()`, raises\na RuntimeError.\n\nGets or sets the default glyph rendering color. It is initially opaque black \u2015\n(0, 0, 0, 255). Applies to `render()` and `render_to()`.\n\nGets or sets the default background rendering color. Initially it is unset and\ntext will render with a transparent background by default. Applies to\n`render()` and `render_to()`.\n\nNew in pygame 2.0.0.\n\nIf set `True`, `render_to()` and `render_raw_to()` will take the dest position\nto be that of the text origin, as opposed to the top-left corner of the\nbounding box. See `get_rect()` for details.\n\nIf set `True`, then the text boundary rectangle will be inflated to match that\nof `font.Font`. Otherwise, the boundary rectangle is just large enough for the\ntext.\n\nGets or sets the decoding of Unicode text. By default, the freetype module\nperforms UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit\nescape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their\ncorresponding UTF-32 code points on Python interpreters built with a UCS-2\nUnicode type (on Windows, for instance). It also means character values within\nthe UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a\nsurrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError.\nSetting ucs4 `True` turns surrogate pair decoding off, allowing access the\nfull UCS-4 character range to a Python interpreter built with four-byte\nUnicode character support.\n\nRead only. Gets pixel size used in scaling font glyphs for this `Font`\ninstance.\n\n"}, {"name": "freetype.Font.antialiased", "path": "ref/freetype#pygame.freetype.Font.antialiased", "type": "pygame.freetype", "text": "\nGets or sets the font's anti-aliasing mode. This defaults to `True` on all\nfonts, which are rendered with full 8 bit blending.\n\nSet to `False` to do monochrome rendering. This should provide a small speed\ngain and reduce cache memory size.\n\n"}, {"name": "freetype.Font.ascender", "path": "ref/freetype#pygame.freetype.Font.ascender", "type": "pygame.freetype", "text": "\nRead only. Return the number of units from the font's baseline to the top of\nthe bounding box.\n\n"}, {"name": "freetype.Font.bgcolor", "path": "ref/freetype#pygame.freetype.Font.bgcolor", "type": "pygame.freetype", "text": "\nGets or sets the default background rendering color. Initially it is unset and\ntext will render with a transparent background by default. Applies to\n`render()` and `render_to()`.\n\n"}, {"name": "freetype.Font.descender", "path": "ref/freetype#pygame.freetype.Font.descender", "type": "pygame.freetype", "text": "\nRead only. Return the height in font units for the font descent. The descent\nis the number of units from the font's baseline to the bottom of the bounding\nbox.\n\n"}, {"name": "freetype.Font.fgcolor", "path": "ref/freetype#pygame.freetype.Font.fgcolor", "type": "pygame.freetype", "text": "\nGets or sets the default glyph rendering color. It is initially opaque black \u2015\n(0, 0, 0, 255). Applies to `render()` and `render_to()`.\n\n"}, {"name": "freetype.Font.fixed_sizes", "path": "ref/freetype#pygame.freetype.Font.fixed_sizes", "type": "pygame.freetype", "text": "\nRead only. Returns the number of point sizes for which the font contains\nbitmap character images. If zero then the font is not a bitmap font. A\nscalable font may contain pre-rendered point sizes as strikes.\n\n"}, {"name": "freetype.Font.fixed_width", "path": "ref/freetype#pygame.freetype.Font.fixed_width", "type": "pygame.freetype", "text": "\nRead only. Returns `True` if the font contains fixed-width characters (for\nexample Courier, Bitstream Vera Sans Mono, Andale Mono).\n\n"}, {"name": "freetype.Font.get_metrics", "path": "ref/freetype#pygame.freetype.Font.get_metrics", "type": "pygame.freetype", "text": "\nReturns the glyph metrics for each character in text.\n\nThe glyph metrics are returned as a list of tuples. Each tuple gives metrics\nof a single character glyph. The glyph metrics are:\n\nThe bounding box min_x, max_x, min_y, and max_y values are returned as grid-\nfitted pixel coordinates of type int. The advance values are float values.\n\nThe calculations are done using the font's default size in points. Optionally\nyou may specify another point size with the size argument.\n\nThe metrics are adjusted for the current rotation, strong, and oblique\nsettings.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\n"}, {"name": "freetype.Font.get_rect", "path": "ref/freetype#pygame.freetype.Font.get_rect", "type": "pygame.freetype", "text": "\nGets the final dimensions and origin, in pixels, of text using the optional\nsize in points, style, and rotation. For other relevant render properties, and\nfor any optional argument not given, the default values set for the `Font`\ninstance are used.\n\nReturns a `Rect` instance containing the width and height of the text's\nbounding box and the position of the text's origin. The origin is useful in\naligning separately rendered pieces of text. It gives the baseline position\nand bearing at the start of the text. See the `render_to()` method for an\nexample.\n\nIf text is a char (byte) string, its encoding is assumed to be `LATIN1`.\n\nOptionally, text can be `None`, which will return the bounding rectangle for\nthe text passed to a previous `get_rect()`, `render()`, `render_to()`,\n`render_raw()`, or `render_raw_to()` call. See `render_to()` for more details.\n\n"}, {"name": "freetype.Font.get_sized_ascender", "path": "ref/freetype#pygame.freetype.Font.get_sized_ascender", "type": "pygame.freetype", "text": "\nReturn the number of units from the font's baseline to the top of the bounding\nbox. It is not adjusted for strong or rotation.\n\n"}, {"name": "freetype.Font.get_sized_descender", "path": "ref/freetype#pygame.freetype.Font.get_sized_descender", "type": "pygame.freetype", "text": "\nReturn the number of pixels from the font's baseline to the top of the\nbounding box. It is not adjusted for strong or rotation.\n\n"}, {"name": "freetype.Font.get_sized_glyph_height", "path": "ref/freetype#pygame.freetype.Font.get_sized_glyph_height", "type": "pygame.freetype", "text": "\nReturn the glyph bounding box height of the font in pixels. This is the\naverage value of all glyphs in the font. It is not adjusted for strong or\nrotation.\n\n"}, {"name": "freetype.Font.get_sized_height", "path": "ref/freetype#pygame.freetype.Font.get_sized_height", "type": "pygame.freetype", "text": "\nReturns the height of the font. This is the average value of all glyphs in the\nfont. It is not adjusted for strong or rotation.\n\n"}, {"name": "freetype.Font.get_sizes", "path": "ref/freetype#pygame.freetype.Font.get_sizes", "type": "pygame.freetype", "text": "\nReturns a list of tuple records, one for each point size supported. Each tuple\ncontaining the point size, the height in pixels, width in pixels, horizontal\nppem (nominal width) in fractional pixels, and vertical ppem (nominal height)\nin fractional pixels.\n\n"}, {"name": "freetype.Font.height", "path": "ref/freetype#pygame.freetype.Font.height", "type": "pygame.freetype", "text": "\nRead only. Gets the height of the font. This is the average value of all\nglyphs in the font.\n\n"}, {"name": "freetype.Font.kerning", "path": "ref/freetype#pygame.freetype.Font.kerning", "type": "pygame.freetype", "text": "\nGets or sets the font's kerning mode. This defaults to `False` on all fonts,\nwhich will be rendered without kerning.\n\nSet to `True` to add kerning between character pairs, if supported by the\nfont, when positioning glyphs.\n\n"}, {"name": "freetype.Font.name", "path": "ref/freetype#pygame.freetype.Font.name", "type": "pygame.freetype", "text": "\nRead only. Returns the real (long) name of the font, as recorded in the font\nfile.\n\n"}, {"name": "freetype.Font.oblique", "path": "ref/freetype#pygame.freetype.Font.oblique", "type": "pygame.freetype", "text": "\nGets or sets whether the font will be rendered as oblique. This default style\nvalue will be used for all text rendering and size calculations unless\noverridden specifically in a render or `get_rect()` call, via the style\nparameter.\n\nThe oblique style is only supported for scalable (outline) fonts. An attempt\nto set this style on a bitmap font will raise an AttributeError. If the font\nobject is inactive, as returned by `Font.__new__()`, setting this property\nraises a RuntimeError.\n\n"}, {"name": "freetype.Font.origin", "path": "ref/freetype#pygame.freetype.Font.origin", "type": "pygame.freetype", "text": "\nIf set `True`, `render_to()` and `render_raw_to()` will take the dest position\nto be that of the text origin, as opposed to the top-left corner of the\nbounding box. See `get_rect()` for details.\n\n"}, {"name": "freetype.Font.pad", "path": "ref/freetype#pygame.freetype.Font.pad", "type": "pygame.freetype", "text": "\nIf set `True`, then the text boundary rectangle will be inflated to match that\nof `font.Font`. Otherwise, the boundary rectangle is just large enough for the\ntext.\n\n"}, {"name": "freetype.Font.path", "path": "ref/freetype#pygame.freetype.Font.path", "type": "pygame.freetype", "text": "\nRead only. Returns the path of the loaded font file\n\n"}, {"name": "freetype.Font.render", "path": "ref/freetype#pygame.freetype.Font.render", "type": "pygame.freetype", "text": "\nReturns a new `Surface`, with the text rendered to it in the color given by\n'fgcolor'. If no foreground color is given, the default foreground color,\n`fgcolor` is used. If `bgcolor` is given, the surface will be filled with this\ncolor. When no background color is given, the surface background is\ntransparent, zero alpha. Normally the returned surface has a 32 bit pixel\nsize. However, if `bgcolor` is `None` and anti-aliasing is disabled a\nmonochrome 8 bit colorkey surface, with colorkey set for the background color,\nis returned.\n\nThe return value is a tuple: the new surface and the bounding rectangle giving\nthe size and origin of the rendered text.\n\nIf an empty string is passed for text then the returned Rect is zero width and\nthe height of the font.\n\nOptional fgcolor, style, rotation, and size arguments override the default\nvalues set for the `Font` instance.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nOptionally, text can be `None`, which will render the text passed to a\nprevious `get_rect()`, `render()`, `render_to()`, `render_raw()`, or\n`render_raw_to()` call. See `render_to()` for details.\n\n"}, {"name": "freetype.Font.render_raw", "path": "ref/freetype#pygame.freetype.Font.render_raw", "type": "pygame.freetype", "text": "\nLike `render()` but with the pixels returned as a byte string of 8-bit gray-\nscale values. The foreground color is 255, the background 0, useful as an\nalpha mask for a foreground pattern.\n\n"}, {"name": "freetype.Font.render_raw_to", "path": "ref/freetype#pygame.freetype.Font.render_raw_to", "type": "pygame.freetype", "text": "\nRender to an array object exposing an array struct interface. The array must\nbe two dimensional with integer items. The default dest value, `None`, is\nequivalent to position (0, 0). See `render_to()`. As with the other render\nmethods, text can be `None` to render a text string passed previously to\nanother method.\n\nThe return value is a `pygame.Rect()` giving the size and position of the\nrendered text.\n\n"}, {"name": "freetype.Font.render_to", "path": "ref/freetype#pygame.freetype.Font.render_to", "type": "pygame.freetype", "text": "\nRenders the string text to the `pygame.Surface` surf, at position dest, a (x,\ny) surface coordinate pair. If either x or y is not an integer it is converted\nto one if possible. Any sequence where the first two items are x and y\npositional elements is accepted, including a `Rect` instance. As with\n`render()`, optional fgcolor, style, rotation, and size argument are\navailable.\n\nIf a background color bgcolor is given, the text bounding box is first filled\nwith that color. The text is blitted next. Both the background fill and text\nrendering involve full alpha blits. That is, the alpha values of the\nforeground, background, and destination target surface all affect the blit.\n\nThe return value is a rectangle giving the size and position of the rendered\ntext within the surface.\n\nIf an empty string is passed for text then the returned `Rect` is zero width\nand the height of the font. The rect will test False.\n\nOptionally, text can be set `None`, which will re-render text passed to a\nprevious `render_to()`, `get_rect()`, `render()`, `render_raw()`, or\n`render_raw_to()` call. Primarily, this feature is an aid to using\n`render_to()` in combination with `get_rect()`. An example:\n\nWhen `render_to()` is called with the same font properties \u2015 `size`, `style`,\n`strength`, `wide`, `antialiased`, `vertical`, `rotation`, `kerning`, and\n`use_bitmap_strikes` \u2015 as `get_rect()`, `render_to()` will use the layout\ncalculated by `get_rect()`. Otherwise, `render_to()` will recalculate the\nlayout if called with a text string or one of the above properties has changed\nafter the `get_rect()` call.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\n"}, {"name": "freetype.Font.resolution", "path": "ref/freetype#pygame.freetype.Font.resolution", "type": "pygame.freetype", "text": "\nRead only. Gets pixel size used in scaling font glyphs for this `Font`\ninstance.\n\n"}, {"name": "freetype.Font.rotation", "path": "ref/freetype#pygame.freetype.Font.rotation", "type": "pygame.freetype", "text": "\nGets or sets the baseline angle of the rendered text. The angle is represented\nas integer degrees. The default angle is 0, with horizontal text rendered\nalong the X-axis, and vertical text along the Y-axis. A positive value rotates\nthese axes counterclockwise that many degrees. A negative angle corresponds to\na clockwise rotation. The rotation value is normalized to a value within the\nrange 0 to 359 inclusive (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315,\n720 -> 720 - (2 * 360) -> 0).\n\nOnly scalable (outline) fonts can be rotated. An attempt to change the\nrotation of a bitmap font raises an AttributeError. An attempt to change the\nrotation of an inactive font instance, as returned by `Font.__new__()`, raises\na RuntimeError.\n\n"}, {"name": "freetype.Font.scalable", "path": "ref/freetype#pygame.freetype.Font.scalable", "type": "pygame.freetype", "text": "\nRead only. Returns `True` if the font contains outline glyphs. If so, the\npoint size is not limited to available bitmap sizes.\n\n"}, {"name": "freetype.Font.size", "path": "ref/freetype#pygame.freetype.Font.size", "type": "pygame.freetype", "text": "\nGet or set the default size for text metrics and rendering. It can be a single\npoint size, given as a Python `int` or `float`, or a font ppem (width, height)\n`tuple`. Size values are non-negative. A zero size or width represents an\nundefined size. In this case the size must be given as a method argument, or\nan exception is raised. A zero width but non-zero height is a ValueError.\n\nFor a scalable font, a single number value is equivalent to a tuple with width\nequal height. A font can be stretched vertically with height set greater than\nwidth, or horizontally with width set greater than height. For embedded\nbitmaps, as listed by `get_sizes()`, use the nominal width and height to\nselect an available size.\n\nFont size differs for a non-scalable, bitmap, font. During a method call it\nmust match one of the available sizes returned by method `get_sizes()`. If\nnot, an exception is raised. If the size is a single number, the size is first\nmatched against the point size value. If no match, then the available size\nwith the same nominal width and height is chosen.\n\n"}, {"name": "freetype.Font.strength", "path": "ref/freetype#pygame.freetype.Font.strength", "type": "pygame.freetype", "text": "\nThe amount by which a font glyph's size is enlarged for the strong or wide\ntransformations, as a fraction of the untransformed size. For the wide style\nonly the horizontal dimension is increased. For strong text both the\nhorizontal and vertical dimensions are enlarged. A wide style of strength\n0.08333 ( 1/12 ) is equivalent to the `pygame.font.Font` bold style. The\ndefault is 0.02778 ( 1/36 ).\n\nThe strength style is only supported for scalable (outline) fonts. An attempt\nto set this property on a bitmap font will raise an AttributeError. If the\nfont object is inactive, as returned by `Font.__new__()`, assignment to this\nproperty raises a RuntimeError.\n\n"}, {"name": "freetype.Font.strong", "path": "ref/freetype#pygame.freetype.Font.strong", "type": "pygame.freetype", "text": "\nGets or sets whether the font will be bold when drawing text. This default\nstyle value will be used for all text rendering and size calculations unless\noverridden specifically in a render or `get_rect()` call, via the 'style'\nparameter.\n\n"}, {"name": "freetype.Font.style", "path": "ref/freetype#pygame.freetype.Font.style", "type": "pygame.freetype", "text": "\nGets or sets the default style of the Font. This default style will be used\nfor all text rendering and size calculations unless overridden specifically a\nrender or `get_rect()` call. The style value may be a bit-wise OR of one or\nmore of the following constants:\n\nThese constants may be found on the FreeType constants module. Optionally, the\ndefault style can be modified or obtained accessing the individual style\nattributes (underline, oblique, strong).\n\nThe `STYLE_OBLIQUE` and `STYLE_STRONG` styles are for scalable fonts only. An\nattempt to set either for a bitmap font raises an AttributeError. An attempt\nto set either for an inactive font, as returned by `Font.__new__()`, raises a\nRuntimeError.\n\nAssigning `STYLE_DEFAULT` to the `style` property leaves the property\nunchanged, as this property defines the default. The `style` property will\nnever return `STYLE_DEFAULT`.\n\n"}, {"name": "freetype.Font.ucs4", "path": "ref/freetype#pygame.freetype.Font.ucs4", "type": "pygame.freetype", "text": "\nGets or sets the decoding of Unicode text. By default, the freetype module\nperforms UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit\nescape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their\ncorresponding UTF-32 code points on Python interpreters built with a UCS-2\nUnicode type (on Windows, for instance). It also means character values within\nthe UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a\nsurrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError.\nSetting ucs4 `True` turns surrogate pair decoding off, allowing access the\nfull UCS-4 character range to a Python interpreter built with four-byte\nUnicode character support.\n\n"}, {"name": "freetype.Font.underline", "path": "ref/freetype#pygame.freetype.Font.underline", "type": "pygame.freetype", "text": "\nGets or sets whether the font will be underlined when drawing text. This\ndefault style value will be used for all text rendering and size calculations\nunless overridden specifically in a render or `get_rect()` call, via the\n'style' parameter.\n\n"}, {"name": "freetype.Font.underline_adjustment", "path": "ref/freetype#pygame.freetype.Font.underline_adjustment", "type": "pygame.freetype", "text": "\nGets or sets a factor which, when positive, is multiplied with the font's\nunderline offset to adjust the underline position. A negative value turns an\nunderline into a strike-through or overline. It is multiplied with the\nascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5\nclosely matches Tango underlining. A value of 1.0 mimics `pygame.font.Font`\nunderlining.\n\n"}, {"name": "freetype.Font.use_bitmap_strikes", "path": "ref/freetype#pygame.freetype.Font.use_bitmap_strikes", "type": "pygame.freetype", "text": "\nSome scalable fonts include embedded bitmaps for particular point sizes. This\nproperty controls whether or not those bitmap strikes are used. Set it `False`\nto disable the loading of any bitmap strike. Set it `True`, the default, to\npermit bitmap strikes for a non-rotated render with no style other than `wide`\nor `underline`. This property is ignored for bitmap fonts.\n\nSee also `fixed_sizes` and `get_sizes()`.\n\n"}, {"name": "freetype.Font.vertical", "path": "ref/freetype#pygame.freetype.Font.vertical", "type": "pygame.freetype", "text": "\nGets or sets whether the characters are laid out vertically rather than\nhorizontally. May be useful when rendering Kanji or some other vertical\nscript.\n\nSet to `True` to switch to a vertical text layout. The default is `False`,\nplace horizontally.\n\nNote that the `Font` class does not automatically determine script\norientation. Vertical layout must be selected explicitly.\n\nAlso note that several font formats (especially bitmap based ones) don't\ncontain the necessary metrics to draw glyphs vertically, so drawing in those\ncases will give unspecified results.\n\n"}, {"name": "freetype.Font.wide", "path": "ref/freetype#pygame.freetype.Font.wide", "type": "pygame.freetype", "text": "\nGets or sets whether the font will be stretched horizontally when drawing\ntext. It produces a result similar to `pygame.font.Font`'s bold. This style\nnot available for rotated text.\n\n"}, {"name": "freetype.get_cache_size", "path": "ref/freetype#pygame.freetype.get_cache_size", "type": "pygame.freetype", "text": "\nSee `pygame.freetype.init()`.\n\n"}, {"name": "freetype.get_default_font", "path": "ref/freetype#pygame.freetype.get_default_font", "type": "pygame.freetype", "text": "\nReturn the filename of the default pygame font. This is not the full path to\nthe file. The file is usually in the same directory as the font module, but\ncan also be bundled in a separate archive.\n\n"}, {"name": "freetype.get_default_resolution", "path": "ref/freetype#pygame.freetype.get_default_resolution", "type": "pygame.freetype", "text": "\nReturns the default pixel size, in dots per inch, for the module. The default\nis 72 DPI.\n\n"}, {"name": "freetype.get_error", "path": "ref/freetype#pygame.freetype.get_error", "type": "pygame.freetype", "text": "\nReturn a description of the last error which occurred in the FreeType2\nlibrary, or `None` if no errors have occurred.\n\n"}, {"name": "freetype.get_init", "path": "ref/freetype#pygame.freetype.get_init", "type": "pygame.freetype", "text": "\nReturns `True` if the `pygame.freetype` module is currently initialized.\n\nNew in pygame 1.9.5.\n\n"}, {"name": "freetype.get_version", "path": "ref/freetype#pygame.freetype.get_version", "type": "pygame.freetype", "text": "\nReturns the version of the FreeType library in use by this module.\n\nNote that the `freetype` module depends on the FreeType 2 library. It will not\ncompile with the original FreeType 1.0. Hence, the first element of the tuple\nwill always be \"2\".\n\n"}, {"name": "freetype.init", "path": "ref/freetype#pygame.freetype.init", "type": "pygame.freetype", "text": "\nThis function initializes the underlying FreeType library and must be called\nbefore trying to use any of the functionality of the `freetype` module.\n\nHowever, `pygame.init()` will automatically call this function if the\n`freetype` module is already imported. It is safe to call this function more\nthan once.\n\nOptionally, you may specify a default cache_size for the Glyph cache: the\nmaximum number of glyphs that will be cached at any given time by the module.\nExceedingly small values will be automatically tuned for performance. Also a\ndefault pixel resolution, in dots per inch, can be given to adjust font\nscaling.\n\n"}, {"name": "freetype.quit", "path": "ref/freetype#pygame.freetype.quit", "type": "pygame.freetype", "text": "\nThis function closes the `freetype` module. After calling this function, you\nshould not invoke any class, method or function related to the `freetype`\nmodule as they are likely to fail or might give unpredictable results. It is\nsafe to call this function even if the module hasn't been initialized yet.\n\n"}, {"name": "freetype.set_default_resolution", "path": "ref/freetype#pygame.freetype.set_default_resolution", "type": "pygame.freetype", "text": "\nSet the default pixel size, in dots per inch, for the module. If the optional\nargument is omitted or zero the resolution is reset to 72 DPI.\n\n"}, {"name": "freetype.SysFont", "path": "ref/freetype#pygame.freetype.SysFont", "type": "pygame.freetype", "text": "\nReturn a new Font object that is loaded from the system fonts. The font will\nmatch the requested bold and italic flags. Pygame uses a small set of common\nfont aliases. If the specific font you ask for is not available, a reasonable\nalternative may be used. If a suitable system font is not found this will fall\nback on loading the default pygame font.\n\nThe font name can also be an iterable of font names, a string of comma-\nseparated font names, or a bytes of comma-separated font names, in which case\nthe set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\n"}, {"name": "freetype.was_init", "path": "ref/freetype#pygame.freetype.was_init", "type": "pygame.freetype", "text": "\nDEPRECATED: Returns `True` if the `pygame.freetype` module is currently\ninitialized. Use `get_init()` instead.\n\n"}, {"name": "get_error", "path": "ref/pygame#pygame.get_error", "type": "pygame", "text": "\nSDL maintains an internal error message. This message will usually be given to\nyou when `pygame.error()` is raised, so this function will rarely be needed.\n\n"}, {"name": "get_init", "path": "ref/pygame#pygame.get_init", "type": "pygame", "text": "\nReturns `True` if pygame is currently initialized.\n\nNew in pygame 1.9.5.\n\n"}, {"name": "get_sdl_byteorder", "path": "ref/pygame#pygame.get_sdl_byteorder", "type": "pygame", "text": "\nReturns the byte order of the SDL library. It returns `1234` for little endian\nbyte order and `4321` for big endian byte order.\n\nNew in pygame 1.8.\n\n"}, {"name": "get_sdl_version", "path": "ref/pygame#pygame.get_sdl_version", "type": "pygame", "text": "\nReturns the three version numbers of the SDL library. This version is built at\ncompile time. It can be used to detect which features may or may not be\navailable through pygame.\n\nNew in pygame 1.7.0.\n\n"}, {"name": "gfxdraw", "path": "ref/gfxdraw", "type": "pygame.gfxdraw", "text": "\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code may break with the next pygame release.\n\nThe pygame package does not import gfxdraw automatically when loaded, so it\nmust imported explicitly to be used.\n\nFor all functions the arguments are strictly positional and integers are\naccepted for coordinates and radii. The `color` argument can be one of the\nfollowing formats:\n\nThe functions `rectangle()` and `box()` will accept any `(x, y, w, h)`\nsequence for their `rect` argument, though `pygame.Rect` instances are\npreferred.\n\nTo draw a filled antialiased shape, first use the antialiased (aa*) version of\nthe function, and then use the filled (filled_*) version. For example:\n\nNote\n\nFor threading, each of the functions releases the GIL during the C part of the\ncall.\n\nNote\n\nSee the `pygame.draw` module for alternative draw methods. The\n`pygame.gfxdraw` module differs from the `pygame.draw` module in the API it\nuses and the different draw functions available. `pygame.gfxdraw` wraps the\nprimitives from the library called SDL_gfx, rather than using modified\nversions.\n\nNew in pygame 1.9.0.\n\nDraws a single pixel, at position (x ,y), on the given surface.\n\n`None`\n\nNoneType\n\nDraws a straight horizontal line (`(x1, y)` to `(x2, y)`) on the given\nsurface. There are no endcaps.\n\n`None`\n\nNoneType\n\nDraws a straight vertical line (`(x, y1)` to `(x, y2)`) on the given surface.\nThere are no endcaps.\n\n`None`\n\nNoneType\n\nDraws a straight line (`(x1, y1)` to `(x2, y2)`) on the given surface. There\nare no endcaps.\n\n`None`\n\nNoneType\n\nDraws an unfilled rectangle on the given surface. For a filled rectangle use\n`box()`.\n\n`None`\n\nNoneType\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a `pygame.Rect` always lie\none pixel outside of its actual border. Therefore, these values will not be\nincluded as part of the drawing.\n\nDraws a filled rectangle on the given surface. For an unfilled rectangle use\n`rectangle()`.\n\n`None`\n\nNoneType\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a `pygame.Rect` always lie\none pixel outside of its actual border. Therefore, these values will not be\nincluded as part of the drawing.\n\nNote\n\nThe `pygame.Surface.fill()` method works just as well for drawing filled\nrectangles. In fact `pygame.Surface.fill()` can be hardware accelerated on\nsome platforms with both software and hardware display modes.\n\nDraws an unfilled circle on the given surface. For a filled circle use\n`filled_circle()`.\n\n`None`\n\nNoneType\n\nDraws an unfilled antialiased circle on the given surface.\n\n`None`\n\nNoneType\n\nDraws a filled circle on the given surface. For an unfilled circle use\n`circle()`.\n\n`None`\n\nNoneType\n\nDraws an unfilled ellipse on the given surface. For a filled ellipse use\n`filled_ellipse()`.\n\n`None`\n\nNoneType\n\nDraws an unfilled antialiased ellipse on the given surface.\n\n`None`\n\nNoneType\n\nDraws a filled ellipse on the given surface. For an unfilled ellipse use\n`ellipse()`.\n\n`None`\n\nNoneType\n\nDraws an arc on the given surface. For an arc with its endpoints connected to\nits center use `pie()`.\n\nThe two angle arguments are given in degrees and indicate the start and stop\npositions of the arc. The arc is drawn in a clockwise direction from the\n`start_angle` to the `stop_angle`. If `start_angle == stop_angle`, nothing\nwill be drawn\n\n`None`\n\nNoneType\n\nNote\n\nThis function uses degrees while the `pygame.draw.arc()` function uses\nradians.\n\nDraws an unfilled pie on the given surface. A pie is an `arc()` with its\nendpoints connected to its center.\n\nThe two angle arguments are given in degrees and indicate the start and stop\npositions of the pie. The pie is drawn in a clockwise direction from the\n`start_angle` to the `stop_angle`. If `start_angle == stop_angle`, a straight\nline will be drawn from the center position at the given angle, to a length of\nthe radius.\n\n`None`\n\nNoneType\n\nDraws an unfilled trigon (triangle) on the given surface. For a filled trigon\nuse `filled_trigon()`.\n\nA trigon can also be drawn using `polygon()` e.g. `polygon(surface, ((x1, y1),\n(x2, y2), (x3, y3)), color)`\n\n`None`\n\nNoneType\n\nDraws an unfilled antialiased trigon (triangle) on the given surface.\n\nAn aatrigon can also be drawn using `aapolygon()` e.g. `aapolygon(surface,\n((x1, y1), (x2, y2), (x3, y3)), color)`\n\n`None`\n\nNoneType\n\nDraws a filled trigon (triangle) on the given surface. For an unfilled trigon\nuse `trigon()`.\n\nA filled_trigon can also be drawn using `filled_polygon()` e.g.\n`filled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)`\n\n`None`\n\nNoneType\n\nDraws an unfilled polygon on the given surface. For a filled polygon use\n`filled_polygon()`.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\nDraws an unfilled antialiased polygon on the given surface.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\nDraws a filled polygon on the given surface. For an unfilled polygon use\n`polygon()`.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\nDraws a textured polygon on the given surface. For better performance, the\nsurface and the texture should have the same format.\n\nA per-pixel alpha texture blit to a per-pixel alpha surface will differ from a\n`pygame.Surface.blit()` blit. Also, a per-pixel alpha texture cannot be used\nwith an 8-bit per pixel destination.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\nDraws a B\u00e9zier curve on the given surface.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.aacircle", "path": "ref/gfxdraw#pygame.gfxdraw.aacircle", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled antialiased circle on the given surface.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.aaellipse", "path": "ref/gfxdraw#pygame.gfxdraw.aaellipse", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled antialiased ellipse on the given surface.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.aapolygon", "path": "ref/gfxdraw#pygame.gfxdraw.aapolygon", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled antialiased polygon on the given surface.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.aatrigon", "path": "ref/gfxdraw#pygame.gfxdraw.aatrigon", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled antialiased trigon (triangle) on the given surface.\n\nAn aatrigon can also be drawn using `aapolygon()` e.g. `aapolygon(surface,\n((x1, y1), (x2, y2), (x3, y3)), color)`\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.arc", "path": "ref/gfxdraw#pygame.gfxdraw.arc", "type": "pygame.gfxdraw", "text": "\nDraws an arc on the given surface. For an arc with its endpoints connected to\nits center use `pie()`.\n\nThe two angle arguments are given in degrees and indicate the start and stop\npositions of the arc. The arc is drawn in a clockwise direction from the\n`start_angle` to the `stop_angle`. If `start_angle == stop_angle`, nothing\nwill be drawn\n\n`None`\n\nNoneType\n\nNote\n\nThis function uses degrees while the `pygame.draw.arc()` function uses\nradians.\n\n"}, {"name": "gfxdraw.bezier", "path": "ref/gfxdraw#pygame.gfxdraw.bezier", "type": "pygame.gfxdraw", "text": "\nDraws a B\u00e9zier curve on the given surface.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.box", "path": "ref/gfxdraw#pygame.gfxdraw.box", "type": "pygame.gfxdraw", "text": "\nDraws a filled rectangle on the given surface. For an unfilled rectangle use\n`rectangle()`.\n\n`None`\n\nNoneType\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a `pygame.Rect` always lie\none pixel outside of its actual border. Therefore, these values will not be\nincluded as part of the drawing.\n\nNote\n\nThe `pygame.Surface.fill()` method works just as well for drawing filled\nrectangles. In fact `pygame.Surface.fill()` can be hardware accelerated on\nsome platforms with both software and hardware display modes.\n\n"}, {"name": "gfxdraw.circle", "path": "ref/gfxdraw#pygame.gfxdraw.circle", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled circle on the given surface. For a filled circle use\n`filled_circle()`.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.ellipse", "path": "ref/gfxdraw#pygame.gfxdraw.ellipse", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled ellipse on the given surface. For a filled ellipse use\n`filled_ellipse()`.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.filled_circle", "path": "ref/gfxdraw#pygame.gfxdraw.filled_circle", "type": "pygame.gfxdraw", "text": "\nDraws a filled circle on the given surface. For an unfilled circle use\n`circle()`.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.filled_ellipse", "path": "ref/gfxdraw#pygame.gfxdraw.filled_ellipse", "type": "pygame.gfxdraw", "text": "\nDraws a filled ellipse on the given surface. For an unfilled ellipse use\n`ellipse()`.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.filled_polygon", "path": "ref/gfxdraw#pygame.gfxdraw.filled_polygon", "type": "pygame.gfxdraw", "text": "\nDraws a filled polygon on the given surface. For an unfilled polygon use\n`polygon()`.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.filled_trigon", "path": "ref/gfxdraw#pygame.gfxdraw.filled_trigon", "type": "pygame.gfxdraw", "text": "\nDraws a filled trigon (triangle) on the given surface. For an unfilled trigon\nuse `trigon()`.\n\nA filled_trigon can also be drawn using `filled_polygon()` e.g.\n`filled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)`\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.hline", "path": "ref/gfxdraw#pygame.gfxdraw.hline", "type": "pygame.gfxdraw", "text": "\nDraws a straight horizontal line (`(x1, y)` to `(x2, y)`) on the given\nsurface. There are no endcaps.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.line", "path": "ref/gfxdraw#pygame.gfxdraw.line", "type": "pygame.gfxdraw", "text": "\nDraws a straight line (`(x1, y1)` to `(x2, y2)`) on the given surface. There\nare no endcaps.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.pie", "path": "ref/gfxdraw#pygame.gfxdraw.pie", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled pie on the given surface. A pie is an `arc()` with its\nendpoints connected to its center.\n\nThe two angle arguments are given in degrees and indicate the start and stop\npositions of the pie. The pie is drawn in a clockwise direction from the\n`start_angle` to the `stop_angle`. If `start_angle == stop_angle`, a straight\nline will be drawn from the center position at the given angle, to a length of\nthe radius.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.pixel", "path": "ref/gfxdraw#pygame.gfxdraw.pixel", "type": "pygame.gfxdraw", "text": "\nDraws a single pixel, at position (x ,y), on the given surface.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.polygon", "path": "ref/gfxdraw#pygame.gfxdraw.polygon", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled polygon on the given surface. For a filled polygon use\n`filled_polygon()`.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.rectangle", "path": "ref/gfxdraw#pygame.gfxdraw.rectangle", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled rectangle on the given surface. For a filled rectangle use\n`box()`.\n\n`None`\n\nNoneType\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a `pygame.Rect` always lie\none pixel outside of its actual border. Therefore, these values will not be\nincluded as part of the drawing.\n\n"}, {"name": "gfxdraw.textured_polygon", "path": "ref/gfxdraw#pygame.gfxdraw.textured_polygon", "type": "pygame.gfxdraw", "text": "\nDraws a textured polygon on the given surface. For better performance, the\nsurface and the texture should have the same format.\n\nA per-pixel alpha texture blit to a per-pixel alpha surface will differ from a\n`pygame.Surface.blit()` blit. Also, a per-pixel alpha texture cannot be used\nwith an 8-bit per pixel destination.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.trigon", "path": "ref/gfxdraw#pygame.gfxdraw.trigon", "type": "pygame.gfxdraw", "text": "\nDraws an unfilled trigon (triangle) on the given surface. For a filled trigon\nuse `filled_trigon()`.\n\nA trigon can also be drawn using `polygon()` e.g. `polygon(surface, ((x1, y1),\n(x2, y2), (x3, y3)), color)`\n\n`None`\n\nNoneType\n\n"}, {"name": "gfxdraw.vline", "path": "ref/gfxdraw#pygame.gfxdraw.vline", "type": "pygame.gfxdraw", "text": "\nDraws a straight vertical line (`(x, y1)` to `(x, y2)`) on the given surface.\nThere are no endcaps.\n\n`None`\n\nNoneType\n\n"}, {"name": "image", "path": "ref/image", "type": "pygame.image", "text": "\nThe image module contains functions for loading and saving pictures, as well\nas transferring Surfaces to formats usable by other packages.\n\nNote that there is no Image class; an image is loaded as a Surface object. The\nSurface class allows manipulation (drawing lines, setting pixels, capturing\nregions, etc.).\n\nThe image module is a required dependency of pygame, but it only optionally\nsupports any extended file formats. By default it can only load uncompressed\n`BMP` images. When built with full image support, the `pygame.image.load()`\nfunction can support the following formats.\n\nSaving images only supports a limited set of formats. You can save to the\nfollowing formats.\n\n`JPEG` and `JPG` refer to the same file format\n\nNew in pygame 1.8: Saving PNG and JPEG files.\n\nLoad an image from a file source. You can pass either a filename or a Python\nfile-like object.\n\nThis function only supports loading \"basic\" image format, ie `BMP` format.\nThis function is always available, no matter how pygame was built.\n\nLoad an image from a file source. You can pass either a filename or a Python\nfile-like object.\n\nPygame will automatically determine the image type (e.g., `GIF` or bitmap) and\ncreate a new Surface object from the data. In some cases it will need to know\nthe file extension (e.g., `GIF` images should end in \".gif\"). If you pass a\nraw file-like object, you may also want to pass the original filename as the\nnamehint argument.\n\nThe returned Surface will contain the same color format, colorkey and alpha\ntransparency as the file it came from. You will often want to call\n`Surface.convert()` with no arguments, to create a copy that will draw more\nquickly on the screen.\n\nFor alpha transparency, like in .png images, use the `convert_alpha()` method\nafter loading so that the image has per pixel transparency.\n\npygame may not always be built to support all image formats. At minimum it\nwill support uncompressed `BMP`. If `pygame.image.get_extended()` returns\n'True', you should be able to load most images (including PNG, JPG and GIF).\n\nYou should use `os.path.join()` for compatibility.\n\nThis function is similar to `pygame.image.load()`, except that this function\ncan only be used if pygame was built with extended image format support.\n\nFrom version 2.0.1, this function is always available, but raises an error if\nextended image formats are not supported. Previously, this function may or may\nnot be available, depending on the state of extended image format support.\n\nChanged in pygame 2.0.1.\n\nThis will save your Surface as either a `BMP`, `TGA`, `PNG`, or `JPEG` image.\nIf the filename extension is unrecognized it will default to `TGA`. Both\n`TGA`, and `BMP` file formats create uncompressed files. You can pass a\nfilename or a Python file-like object. For file-like object, the image is\nsaved to `TGA` format unless a namehint with a recognizable extension is\npassed in.\n\nNote\n\nTo be able to save the `JPEG` file format to a file-like object, SDL2_Image\nversion 2.0.2 or newer is needed.\n\nNote\n\nWhen saving to a file-like object, it seems that for most formats, the object\nneeds to be flushed after saving to it to make loading from it possible.\n\nChanged in pygame 1.8: Saving PNG and JPEG files.\n\nChanged in pygame 2.0.0.dev11: The `namehint` parameter was added to make it\npossible to save other formats than `TGA` to a file-like object.\n\nThis will save your Surface as either a `PNG` or `JPEG` image.\n\nIncase the image is being saved to a file-like object, this function uses the\nnamehint argument to determine the format of the file being saved. Saves to\n`JPEG` incase the namehint was not specified while saving to file-like object.\n\nFrom version 2.0.1, this function is always available, but raises an error if\nextended image formats are not supported. Previously, this function may or may\nnot be available, depending on the state of extended image format support.\n\nChanged in pygame 2.0.1.\n\nIf pygame is built with extended image formats, then this function will return\nthe SDL_Image library's version number as a tuple of 3 integers `(major,\nminor, patch)`. If not, then it will return `None`.\n\nNew in pygame 2.0.0.dev11.\n\nIf pygame is built with extended image formats this function will return True.\nIt is still not possible to determine which formats will be available, but\ngenerally you will be able to load them all.\n\nCreates a string that can be transferred with the 'fromstring' method in other\nPython imaging packages. Some Python image packages prefer their images in\nbottom-to-top format (PyOpenGL for example). If you pass True for the flipped\nargument, the string buffer will be vertically flipped.\n\nThe format argument is a string of one of the following values. Note that only\n8-bit Surfaces can use the \"P\" format. The other formats will work for any\nSurface. Also note that other Python image packages support more formats than\npygame.\n\nThis function takes arguments similar to `pygame.image.tostring()`. The size\nargument is a pair of numbers representing the width and height. Once the new\nSurface is created you can destroy the string buffer.\n\nThe size and format image must compute the exact same size as the passed\nstring buffer. Otherwise an exception will be raised.\n\nSee the `pygame.image.frombuffer()` method for a potentially faster way to\ntransfer images into pygame.\n\nCreate a new Surface that shares pixel data directly from a bytes buffer. This\nmethod takes similar arguments to `pygame.image.fromstring()`, but is unable\nto vertically flip the source data.\n\nThis will run much faster than `pygame.image.fromstring()`, since no pixel\ndata must be allocated and copied.\n\nIt accepts the following 'format' arguments:\n\n"}, {"name": "image.frombuffer", "path": "ref/image#pygame.image.frombuffer", "type": "pygame.image", "text": "\nCreate a new Surface that shares pixel data directly from a bytes buffer. This\nmethod takes similar arguments to `pygame.image.fromstring()`, but is unable\nto vertically flip the source data.\n\nThis will run much faster than `pygame.image.fromstring()`, since no pixel\ndata must be allocated and copied.\n\nIt accepts the following 'format' arguments:\n\n"}, {"name": "image.fromstring", "path": "ref/image#pygame.image.fromstring", "type": "pygame.image", "text": "\nThis function takes arguments similar to `pygame.image.tostring()`. The size\nargument is a pair of numbers representing the width and height. Once the new\nSurface is created you can destroy the string buffer.\n\nThe size and format image must compute the exact same size as the passed\nstring buffer. Otherwise an exception will be raised.\n\nSee the `pygame.image.frombuffer()` method for a potentially faster way to\ntransfer images into pygame.\n\n"}, {"name": "image.get_extended", "path": "ref/image#pygame.image.get_extended", "type": "pygame.image", "text": "\nIf pygame is built with extended image formats this function will return True.\nIt is still not possible to determine which formats will be available, but\ngenerally you will be able to load them all.\n\n"}, {"name": "image.get_sdl_image_version", "path": "ref/image#pygame.image.get_sdl_image_version", "type": "pygame.image", "text": "\nIf pygame is built with extended image formats, then this function will return\nthe SDL_Image library's version number as a tuple of 3 integers `(major,\nminor, patch)`. If not, then it will return `None`.\n\nNew in pygame 2.0.0.dev11.\n\n"}, {"name": "image.load", "path": "ref/image#pygame.image.load", "type": "pygame.image", "text": "\nLoad an image from a file source. You can pass either a filename or a Python\nfile-like object.\n\nPygame will automatically determine the image type (e.g., `GIF` or bitmap) and\ncreate a new Surface object from the data. In some cases it will need to know\nthe file extension (e.g., `GIF` images should end in \".gif\"). If you pass a\nraw file-like object, you may also want to pass the original filename as the\nnamehint argument.\n\nThe returned Surface will contain the same color format, colorkey and alpha\ntransparency as the file it came from. You will often want to call\n`Surface.convert()` with no arguments, to create a copy that will draw more\nquickly on the screen.\n\nFor alpha transparency, like in .png images, use the `convert_alpha()` method\nafter loading so that the image has per pixel transparency.\n\npygame may not always be built to support all image formats. At minimum it\nwill support uncompressed `BMP`. If `pygame.image.get_extended()` returns\n'True', you should be able to load most images (including PNG, JPG and GIF).\n\nYou should use `os.path.join()` for compatibility.\n\n"}, {"name": "image.load_basic", "path": "ref/image#pygame.image.load_basic", "type": "pygame.image", "text": "\nLoad an image from a file source. You can pass either a filename or a Python\nfile-like object.\n\nThis function only supports loading \"basic\" image format, ie `BMP` format.\nThis function is always available, no matter how pygame was built.\n\n"}, {"name": "image.load_extended", "path": "ref/image#pygame.image.load_extended", "type": "pygame.image", "text": "\nThis function is similar to `pygame.image.load()`, except that this function\ncan only be used if pygame was built with extended image format support.\n\nFrom version 2.0.1, this function is always available, but raises an error if\nextended image formats are not supported. Previously, this function may or may\nnot be available, depending on the state of extended image format support.\n\nChanged in pygame 2.0.1.\n\n"}, {"name": "image.save", "path": "ref/image#pygame.image.save", "type": "pygame.image", "text": "\nThis will save your Surface as either a `BMP`, `TGA`, `PNG`, or `JPEG` image.\nIf the filename extension is unrecognized it will default to `TGA`. Both\n`TGA`, and `BMP` file formats create uncompressed files. You can pass a\nfilename or a Python file-like object. For file-like object, the image is\nsaved to `TGA` format unless a namehint with a recognizable extension is\npassed in.\n\nNote\n\nTo be able to save the `JPEG` file format to a file-like object, SDL2_Image\nversion 2.0.2 or newer is needed.\n\nNote\n\nWhen saving to a file-like object, it seems that for most formats, the object\nneeds to be flushed after saving to it to make loading from it possible.\n\nChanged in pygame 1.8: Saving PNG and JPEG files.\n\nChanged in pygame 2.0.0.dev11: The `namehint` parameter was added to make it\npossible to save other formats than `TGA` to a file-like object.\n\n"}, {"name": "image.save_extended", "path": "ref/image#pygame.image.save_extended", "type": "pygame.image", "text": "\nThis will save your Surface as either a `PNG` or `JPEG` image.\n\nIncase the image is being saved to a file-like object, this function uses the\nnamehint argument to determine the format of the file being saved. Saves to\n`JPEG` incase the namehint was not specified while saving to file-like object.\n\nFrom version 2.0.1, this function is always available, but raises an error if\nextended image formats are not supported. Previously, this function may or may\nnot be available, depending on the state of extended image format support.\n\nChanged in pygame 2.0.1.\n\n"}, {"name": "image.tostring", "path": "ref/image#pygame.image.tostring", "type": "pygame.image", "text": "\nCreates a string that can be transferred with the 'fromstring' method in other\nPython imaging packages. Some Python image packages prefer their images in\nbottom-to-top format (PyOpenGL for example). If you pass True for the flipped\nargument, the string buffer will be vertically flipped.\n\nThe format argument is a string of one of the following values. Note that only\n8-bit Surfaces can use the \"P\" format. The other formats will work for any\nSurface. Also note that other Python image packages support more formats than\npygame.\n\n"}, {"name": "init", "path": "ref/pygame#pygame.init", "type": "pygame", "text": "\nInitialize all imported pygame modules. No exceptions will be raised if a\nmodule fails, but the total number if successful and failed inits will be\nreturned as a tuple. You can always initialize individual modules manually,\nbut `pygame.init()` is a convenient way to get everything started. The\n`init()` functions for individual modules will raise exceptions when they\nfail.\n\nYou may want to initialize the different modules separately to speed up your\nprogram or to not use modules your game does not require.\n\nIt is safe to call this `init()` more than once as repeated calls will have no\neffect. This is true even if you have `pygame.quit()` all the modules.\n\n"}, {"name": "joystick", "path": "ref/joystick", "type": "pygame.joystick", "text": "\nThe joystick module manages the joystick devices on a computer. Joystick\ndevices include trackballs and video-game-style gamepads, and the module\nallows the use of multiple buttons and \"hats\". Computers may manage multiple\njoysticks at a time.\n\nEach instance of the Joystick class represents one gaming device plugged into\nthe computer. If a gaming pad has multiple joysticks on it, than the joystick\nobject can actually represent multiple joysticks on that single game device.\n\nFor a quick way to initialise the joystick module and get a list of Joystick\ninstances use the following code:\n\nThe following event types will be generated by the joysticks\n\nAnd in pygame 2, which supports hotplugging:\n\nNote that in pygame 2, joysticks events use a unique \"instance ID\". The device\nindex passed in the constructor to a Joystick object is not unique after\ndevices have been added and removed. You must call\n`Joystick.get_instance_id()` to find the instance ID that was assigned to a\nJoystick on opening.\n\nThe event queue needs to be pumped frequently for some of the methods to work.\nSo call one of pygame.event.get, pygame.event.wait, or pygame.event.pump\nregularly.\n\nThis function is called automatically by `pygame.init()`.\n\nIt initializes the joystick module. The module must be initialized before any\nother functions will work.\n\nIt is safe to call this function more than once.\n\nUninitialize the joystick module. After you call this any existing joystick\nobjects will no longer work.\n\nIt is safe to call this function more than once.\n\nTest if the `pygame.joystick.init()` function has been called.\n\nReturn the number of joystick devices on the system. The count will be `0` if\nthere are no joysticks on the system.\n\nWhen you create Joystick objects using `Joystick(id)`, you pass an integer\nthat must be lower than this count.\n\nCreate a new joystick to access a physical device. The id argument must be a\nvalue from `0` to `pygame.joystick.get_count() - 1`.\n\nJoysticks are initialised on creation and are shut down when deallocated. Once\nthe device is initialized the pygame event queue will start receiving events\nabout its input.\n\nChanged in pygame 2.0.0: Joystick objects are now opened immediately on\ncreation.\n\nInitialize the joystick, if it has been closed. It is safe to call this even\nif the joystick is already initialized.\n\nDeprecated since pygame 2.0.0: In future it will not be possible to\nreinitialise a closed Joystick object. Will be removed in Pygame 2.1.\n\nClose a Joystick object. After this the pygame event queue will no longer\nreceive events from the device.\n\nIt is safe to call this more than once.\n\nReturn True if the Joystick object is currently initialised.\n\nReturns the original device index for this device. This is the same value that\nwas passed to the `Joystick()` constructor. This method can safely be called\nwhile the Joystick is not initialized.\n\nDeprecated since pygame 2.0.0: The original device index is not useful in\npygame 2. Use `get_instance_id()` instead. Will be removed in Pygame 2.1.\n\nGet the joystick instance ID. This matches the `instance_id` field that is\ngiven in joystick events.\n\nNew in pygame 2.0.0dev11.\n\nGet the GUID string. This identifies the exact hardware of the joystick\ndevice.\n\nNew in pygame 2.0.0dev11.\n\nGet a string giving the power status of the device.\n\nOne of: `empty`, `low`, `medium`, `full`, `wired`, `max`, or `unknown`.\n\nNew in pygame 2.0.0dev11.\n\nReturns the system name for this joystick device. It is unknown what name the\nsystem will give to the Joystick, but it should be a unique name that\nidentifies the device. This method can safely be called while the Joystick is\nnot initialized.\n\nReturns the number of input axes are on a Joystick. There will usually be two\nfor the position. Controls like rudders and throttles are treated as\nadditional axes.\n\nThe `pygame.JOYAXISMOTION` events will be in the range from `-1.0` to `1.0`. A\nvalue of `0.0` means the axis is centered. Gamepad devices will usually be\n`-1`, `0`, or `1` with no values in between. Older analog joystick axes will\nnot always use the full `-1` to `1` range, and the centered value will be some\narea around `0`.\n\nAnalog joysticks usually have a bit of noise in their axis, which will\ngenerate a lot of rapid small motion events.\n\nReturns the current position of a joystick axis. The value will range from\n`-1` to `1` with a value of `0` being centered. You may want to take into\naccount some tolerance to handle jitter, and joystick drift may keep the\njoystick from centering at `0` or using the full range of position values.\n\nThe axis number must be an integer from `0` to `get_numaxes() - 1`.\n\nWhen using gamepads both the control sticks and the analog triggers are\nusually reported as axes.\n\nReturns the number of trackball devices on a Joystick. These devices work\nsimilar to a mouse but they have no absolute position; they only have relative\namounts of movement.\n\nThe `pygame.JOYBALLMOTION` event will be sent when the trackball is rolled. It\nwill report the amount of movement on the trackball.\n\nReturns the relative movement of a joystick button. The value is a `x, y` pair\nholding the relative movement since the last call to get_ball.\n\nThe ball number must be an integer from `0` to `get_numballs() - 1`.\n\nReturns the number of pushable buttons on the joystick. These buttons have a\nboolean (on or off) state.\n\nButtons generate a `pygame.JOYBUTTONDOWN` and `pygame.JOYBUTTONUP` event when\nthey are pressed and released.\n\nReturns the current state of a joystick button.\n\nReturns the number of joystick hats on a Joystick. Hat devices are like\nminiature digital joysticks on a joystick. Each hat has two axes of input.\n\nThe `pygame.JOYHATMOTION` event is generated when the hat changes position.\nThe `position` attribute for the event contains a pair of values that are\neither `-1`, `0`, or `1`. A position of `(0, 0)` means the hat is centered.\n\nReturns the current position of a position hat. The position is given as two\nvalues representing the `x` and `y` position for the hat. `(0, 0)` means\ncentered. A value of `-1` means left/down and a value of `1` means right/up:\nso `(-1, 0)` means left; `(1, 0)` means right; `(0, 1)` means up; `(1, 1)`\nmeans upper-right; etc.\n\nThis value is digital, `i.e.`, each coordinate can be `-1`, `0` or `1` but\nnever in-between.\n\nThe hat number must be between `0` and `get_numhats() - 1`.\n\nExample code for joystick module.\n\nCommon Controller Axis Mappings\n\nController mappings are drawn from the underlying SDL library which pygame\nuses and they differ between pygame 1 and pygame 2. Below are a couple of\nmappings for two popular game pads.\n\nPygame 2\n\nAxis and hat mappings are listed from -1 to +1.\n\nX-Box 360 Controller (name: \"Xbox 360 Controller\")\n\nIn pygame 2 the X360 controller mapping has 6 Axes, 11 buttons and 1 hat.\n\nLeft Stick:\n\nRight Stick:\n\nLeft Trigger:\n\nRight Trigger:\n\nButtons:\n\nHat/D-pad:\n\nPlaystation 4 Controller (name: \"PS4 Controller\")\n\nIn pygame 2 the PS4 controller mapping has 6 Axes and 16 buttons.\n\nLeft Stick:\n\nRight Stick:\n\nLeft Trigger:\n\nRight Trigger:\n\nButtons:\n\nPygame 1\n\nAxis and hat mappings are listed from -1 to +1.\n\nX-Box 360 Controller (name: \"Controller (XBOX 360 For Windows)\")\n\nIn pygame 1 the X360 controller mapping has 5 Axes, 10 buttons and 1 hat.\n\nLeft Stick:\n\nRight Stick:\n\nLeft Trigger & Right Trigger:\n\nButtons:\n\nHat/D-pad:\n\nPlaystation 4 Controller (name: \"Wireless Controller\")\n\nIn pygame 1 the PS4 controller mapping has 6 Axes and 14 buttons and 1 hat.\n\nLeft Stick:\n\nRight Stick:\n\nLeft Trigger:\n\nRight Trigger:\n\nButtons:\n\nHat/D-pad:\n\n"}, {"name": "joystick.get_count", "path": "ref/joystick#pygame.joystick.get_count", "type": "pygame.joystick", "text": "\nReturn the number of joystick devices on the system. The count will be `0` if\nthere are no joysticks on the system.\n\nWhen you create Joystick objects using `Joystick(id)`, you pass an integer\nthat must be lower than this count.\n\n"}, {"name": "joystick.get_init", "path": "ref/joystick#pygame.joystick.get_init", "type": "pygame.joystick", "text": "\nTest if the `pygame.joystick.init()` function has been called.\n\n"}, {"name": "joystick.init", "path": "ref/joystick#pygame.joystick.init", "type": "pygame.joystick", "text": "\nThis function is called automatically by `pygame.init()`.\n\nIt initializes the joystick module. The module must be initialized before any\nother functions will work.\n\nIt is safe to call this function more than once.\n\n"}, {"name": "joystick.Joystick", "path": "ref/joystick#pygame.joystick.Joystick", "type": "pygame.joystick", "text": "\nCreate a new joystick to access a physical device. The id argument must be a\nvalue from `0` to `pygame.joystick.get_count() - 1`.\n\nJoysticks are initialised on creation and are shut down when deallocated. Once\nthe device is initialized the pygame event queue will start receiving events\nabout its input.\n\nChanged in pygame 2.0.0: Joystick objects are now opened immediately on\ncreation.\n\nInitialize the joystick, if it has been closed. It is safe to call this even\nif the joystick is already initialized.\n\nDeprecated since pygame 2.0.0: In future it will not be possible to\nreinitialise a closed Joystick object. Will be removed in Pygame 2.1.\n\nClose a Joystick object. After this the pygame event queue will no longer\nreceive events from the device.\n\nIt is safe to call this more than once.\n\nReturn True if the Joystick object is currently initialised.\n\nReturns the original device index for this device. This is the same value that\nwas passed to the `Joystick()` constructor. This method can safely be called\nwhile the Joystick is not initialized.\n\nDeprecated since pygame 2.0.0: The original device index is not useful in\npygame 2. Use `get_instance_id()` instead. Will be removed in Pygame 2.1.\n\nGet the joystick instance ID. This matches the `instance_id` field that is\ngiven in joystick events.\n\nNew in pygame 2.0.0dev11.\n\nGet the GUID string. This identifies the exact hardware of the joystick\ndevice.\n\nNew in pygame 2.0.0dev11.\n\nGet a string giving the power status of the device.\n\nOne of: `empty`, `low`, `medium`, `full`, `wired`, `max`, or `unknown`.\n\nNew in pygame 2.0.0dev11.\n\nReturns the system name for this joystick device. It is unknown what name the\nsystem will give to the Joystick, but it should be a unique name that\nidentifies the device. This method can safely be called while the Joystick is\nnot initialized.\n\nReturns the number of input axes are on a Joystick. There will usually be two\nfor the position. Controls like rudders and throttles are treated as\nadditional axes.\n\nThe `pygame.JOYAXISMOTION` events will be in the range from `-1.0` to `1.0`. A\nvalue of `0.0` means the axis is centered. Gamepad devices will usually be\n`-1`, `0`, or `1` with no values in between. Older analog joystick axes will\nnot always use the full `-1` to `1` range, and the centered value will be some\narea around `0`.\n\nAnalog joysticks usually have a bit of noise in their axis, which will\ngenerate a lot of rapid small motion events.\n\nReturns the current position of a joystick axis. The value will range from\n`-1` to `1` with a value of `0` being centered. You may want to take into\naccount some tolerance to handle jitter, and joystick drift may keep the\njoystick from centering at `0` or using the full range of position values.\n\nThe axis number must be an integer from `0` to `get_numaxes() - 1`.\n\nWhen using gamepads both the control sticks and the analog triggers are\nusually reported as axes.\n\nReturns the number of trackball devices on a Joystick. These devices work\nsimilar to a mouse but they have no absolute position; they only have relative\namounts of movement.\n\nThe `pygame.JOYBALLMOTION` event will be sent when the trackball is rolled. It\nwill report the amount of movement on the trackball.\n\nReturns the relative movement of a joystick button. The value is a `x, y` pair\nholding the relative movement since the last call to get_ball.\n\nThe ball number must be an integer from `0` to `get_numballs() - 1`.\n\nReturns the number of pushable buttons on the joystick. These buttons have a\nboolean (on or off) state.\n\nButtons generate a `pygame.JOYBUTTONDOWN` and `pygame.JOYBUTTONUP` event when\nthey are pressed and released.\n\nReturns the current state of a joystick button.\n\nReturns the number of joystick hats on a Joystick. Hat devices are like\nminiature digital joysticks on a joystick. Each hat has two axes of input.\n\nThe `pygame.JOYHATMOTION` event is generated when the hat changes position.\nThe `position` attribute for the event contains a pair of values that are\neither `-1`, `0`, or `1`. A position of `(0, 0)` means the hat is centered.\n\nReturns the current position of a position hat. The position is given as two\nvalues representing the `x` and `y` position for the hat. `(0, 0)` means\ncentered. A value of `-1` means left/down and a value of `1` means right/up:\nso `(-1, 0)` means left; `(1, 0)` means right; `(0, 1)` means up; `(1, 1)`\nmeans upper-right; etc.\n\nThis value is digital, `i.e.`, each coordinate can be `-1`, `0` or `1` but\nnever in-between.\n\nThe hat number must be between `0` and `get_numhats() - 1`.\n\n"}, {"name": "joystick.Joystick.get_axis", "path": "ref/joystick#pygame.joystick.Joystick.get_axis", "type": "pygame.joystick", "text": "\nReturns the current position of a joystick axis. The value will range from\n`-1` to `1` with a value of `0` being centered. You may want to take into\naccount some tolerance to handle jitter, and joystick drift may keep the\njoystick from centering at `0` or using the full range of position values.\n\nThe axis number must be an integer from `0` to `get_numaxes() - 1`.\n\nWhen using gamepads both the control sticks and the analog triggers are\nusually reported as axes.\n\n"}, {"name": "joystick.Joystick.get_ball", "path": "ref/joystick#pygame.joystick.Joystick.get_ball", "type": "pygame.joystick", "text": "\nReturns the relative movement of a joystick button. The value is a `x, y` pair\nholding the relative movement since the last call to get_ball.\n\nThe ball number must be an integer from `0` to `get_numballs() - 1`.\n\n"}, {"name": "joystick.Joystick.get_button", "path": "ref/joystick#pygame.joystick.Joystick.get_button", "type": "pygame.joystick", "text": "\nReturns the current state of a joystick button.\n\n"}, {"name": "joystick.Joystick.get_guid", "path": "ref/joystick#pygame.joystick.Joystick.get_guid", "type": "pygame.joystick", "text": "\nGet the GUID string. This identifies the exact hardware of the joystick\ndevice.\n\nNew in pygame 2.0.0dev11.\n\n"}, {"name": "joystick.Joystick.get_hat", "path": "ref/joystick#pygame.joystick.Joystick.get_hat", "type": "pygame.joystick", "text": "\nReturns the current position of a position hat. The position is given as two\nvalues representing the `x` and `y` position for the hat. `(0, 0)` means\ncentered. A value of `-1` means left/down and a value of `1` means right/up:\nso `(-1, 0)` means left; `(1, 0)` means right; `(0, 1)` means up; `(1, 1)`\nmeans upper-right; etc.\n\nThis value is digital, `i.e.`, each coordinate can be `-1`, `0` or `1` but\nnever in-between.\n\nThe hat number must be between `0` and `get_numhats() - 1`.\n\n"}, {"name": "joystick.Joystick.get_id", "path": "ref/joystick#pygame.joystick.Joystick.get_id", "type": "pygame.joystick", "text": "\nReturns the original device index for this device. This is the same value that\nwas passed to the `Joystick()` constructor. This method can safely be called\nwhile the Joystick is not initialized.\n\nDeprecated since pygame 2.0.0: The original device index is not useful in\npygame 2. Use `get_instance_id()` instead. Will be removed in Pygame 2.1.\n\n"}, {"name": "joystick.Joystick.get_init", "path": "ref/joystick#pygame.joystick.Joystick.get_init", "type": "pygame.joystick", "text": "\nReturn True if the Joystick object is currently initialised.\n\n"}, {"name": "joystick.Joystick.get_instance_id", "path": "ref/joystick#pygame.joystick.Joystick.get_instance_id", "type": "pygame.joystick", "text": "\nGet the joystick instance ID. This matches the `instance_id` field that is\ngiven in joystick events.\n\nNew in pygame 2.0.0dev11.\n\n"}, {"name": "joystick.Joystick.get_name", "path": "ref/joystick#pygame.joystick.Joystick.get_name", "type": "pygame.joystick", "text": "\nReturns the system name for this joystick device. It is unknown what name the\nsystem will give to the Joystick, but it should be a unique name that\nidentifies the device. This method can safely be called while the Joystick is\nnot initialized.\n\n"}, {"name": "joystick.Joystick.get_numaxes", "path": "ref/joystick#pygame.joystick.Joystick.get_numaxes", "type": "pygame.joystick", "text": "\nReturns the number of input axes are on a Joystick. There will usually be two\nfor the position. Controls like rudders and throttles are treated as\nadditional axes.\n\nThe `pygame.JOYAXISMOTION` events will be in the range from `-1.0` to `1.0`. A\nvalue of `0.0` means the axis is centered. Gamepad devices will usually be\n`-1`, `0`, or `1` with no values in between. Older analog joystick axes will\nnot always use the full `-1` to `1` range, and the centered value will be some\narea around `0`.\n\nAnalog joysticks usually have a bit of noise in their axis, which will\ngenerate a lot of rapid small motion events.\n\n"}, {"name": "joystick.Joystick.get_numballs", "path": "ref/joystick#pygame.joystick.Joystick.get_numballs", "type": "pygame.joystick", "text": "\nReturns the number of trackball devices on a Joystick. These devices work\nsimilar to a mouse but they have no absolute position; they only have relative\namounts of movement.\n\nThe `pygame.JOYBALLMOTION` event will be sent when the trackball is rolled. It\nwill report the amount of movement on the trackball.\n\n"}, {"name": "joystick.Joystick.get_numbuttons", "path": "ref/joystick#pygame.joystick.Joystick.get_numbuttons", "type": "pygame.joystick", "text": "\nReturns the number of pushable buttons on the joystick. These buttons have a\nboolean (on or off) state.\n\nButtons generate a `pygame.JOYBUTTONDOWN` and `pygame.JOYBUTTONUP` event when\nthey are pressed and released.\n\n"}, {"name": "joystick.Joystick.get_numhats", "path": "ref/joystick#pygame.joystick.Joystick.get_numhats", "type": "pygame.joystick", "text": "\nReturns the number of joystick hats on a Joystick. Hat devices are like\nminiature digital joysticks on a joystick. Each hat has two axes of input.\n\nThe `pygame.JOYHATMOTION` event is generated when the hat changes position.\nThe `position` attribute for the event contains a pair of values that are\neither `-1`, `0`, or `1`. A position of `(0, 0)` means the hat is centered.\n\n"}, {"name": "joystick.Joystick.get_power_level", "path": "ref/joystick#pygame.joystick.Joystick.get_power_level", "type": "pygame.joystick", "text": "\nGet a string giving the power status of the device.\n\nOne of: `empty`, `low`, `medium`, `full`, `wired`, `max`, or `unknown`.\n\nNew in pygame 2.0.0dev11.\n\n"}, {"name": "joystick.Joystick.init", "path": "ref/joystick#pygame.joystick.Joystick.init", "type": "pygame.joystick", "text": "\nInitialize the joystick, if it has been closed. It is safe to call this even\nif the joystick is already initialized.\n\nDeprecated since pygame 2.0.0: In future it will not be possible to\nreinitialise a closed Joystick object. Will be removed in Pygame 2.1.\n\n"}, {"name": "joystick.Joystick.quit", "path": "ref/joystick#pygame.joystick.Joystick.quit", "type": "pygame.joystick", "text": "\nClose a Joystick object. After this the pygame event queue will no longer\nreceive events from the device.\n\nIt is safe to call this more than once.\n\n"}, {"name": "joystick.quit", "path": "ref/joystick#pygame.joystick.quit", "type": "pygame.joystick", "text": "\nUninitialize the joystick module. After you call this any existing joystick\nobjects will no longer work.\n\nIt is safe to call this function more than once.\n\n"}, {"name": "key", "path": "ref/key", "type": "pygame.key", "text": "\nThis module contains functions for dealing with the keyboard.\n\nThe `pygame.event` queue gets `pygame.KEYDOWN` and `pygame.KEYUP` events when\nthe keyboard buttons are pressed and released. Both events have `key` and\n`mod` attributes.\n\nThe `pygame.KEYDOWN` event has the additional attributes `unicode` and\n`scancode`.\n\nNew in pygame 2.0.0: The `pygame.TEXTINPUT` event is preferred to the\n`unicode` attribute of `pygame.KEYDOWN`. The attribute `text` contains the\ninput.\n\nThe following is a list of all the constants (from `pygame.locals`) used to\nrepresent keyboard keys.\n\nPortability note: The integers for key constants differ between pygame 1 and\n2. Always use key constants (`K_a`) rather than integers directly (`97`) so\nthat your key handling code works well on both pygame 1 and pygame 2.\n\nThe keyboard also has a list of modifier states (from `pygame.locals`) that\ncan be assembled by bitwise-ORing them together.\n\nThe modifier information is contained in the `mod` attribute of the\n`pygame.KEYDOWN` and `pygame.KEYUP` events. The `mod` attribute is a bitmask\nof all the modifier keys that were in a pressed state when the event occurred.\nThe modifier information can be decoded using a bitwise AND (except for\n`KMOD_NONE`, which should be compared using equals `==`). For example:\n\nReturns `True` when the display window has keyboard focus from the system. If\nthe display needs to ensure it does not lose keyboard focus, it can use\n`pygame.event.set_grab()` to grab all input.\n\nReturns a sequence of boolean values representing the state of every key on\nthe keyboard. Use the key constant values to index the array. A `True` value\nmeans the that button is pressed.\n\nNote\n\nGetting the list of pushed buttons with this function is not the proper way to\nhandle text entry from the user. There is no way to know the order of keys\npressed, and rapidly pushed keys can be completely unnoticed between two calls\nto `pygame.key.get_pressed()`. There is also no way to translate these pushed\nkeys into a fully translated character value. See the `pygame.KEYDOWN` events\non the `pygame.event` queue for this functionality.\n\nReturns a single integer representing a bitmask of all the modifier keys being\nheld. Using bitwise operators you can test if specific modifier keys are\npressed.\n\nCreate a bitmask of the modifier key constants you want to impose on your\nprogram.\n\nWhen the keyboard repeat is enabled, keys that are held down will generate\nmultiple `pygame.KEYDOWN` events. The `delay` parameter is the number of\nmilliseconds before the first repeated `pygame.KEYDOWN` event will be sent.\nAfter that, another `pygame.KEYDOWN` event will be sent every `interval`\nmilliseconds. If a `delay` value is provided and an `interval` value is not\nprovided or is 0, then the `interval` will be set to the same value as\n`delay`.\n\nTo disable key repeat call this function with no arguments or with `delay` set\nto 0.\n\nWhen pygame is initialized the key repeat is disabled.\n\nChanged in pygame 2.0.0: A `ValueError` is now raised (instead of a\n`pygame.error`) if `delay` or `interval` is < 0.\n\nGet the `delay` and `interval` keyboard repeat values. Refer to\n`pygame.key.set_repeat()` for a description of these values.\n\nNew in pygame 1.8.\n\nGet the descriptive name of the button from a keyboard button id constant.\n\nGet the key identifier code from the descriptive name of the key. This returns\nan integer matching one of the K_* keycodes. For example:\n\nNew in pygame 2.0.0.\n\nStart receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events.\n\nA `pygame.TEXTEDITING` event is received when an IME composition is started or\nchanged. It contains the composition `text`, `length`, and editing `start`\nposition within the composition (attributes `text`, `length`, and `start`,\nrespectively). When the composition is committed (or non-IME input is\nreceived), a `pygame.TEXTINPUT` event is generated.\n\nText input events handling is on by default.\n\nNew in pygame 2.0.0.\n\nStop receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events.\n\nText input events handling is on by default\n\nNew in pygame 2.0.0.\n\nThis sets the rectangle used for typing with an IME. It controls where the\ncandidate list will open, if supported.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "key.get_focused", "path": "ref/key#pygame.key.get_focused", "type": "pygame.key", "text": "\nReturns `True` when the display window has keyboard focus from the system. If\nthe display needs to ensure it does not lose keyboard focus, it can use\n`pygame.event.set_grab()` to grab all input.\n\n"}, {"name": "key.get_mods", "path": "ref/key#pygame.key.get_mods", "type": "pygame.key", "text": "\nReturns a single integer representing a bitmask of all the modifier keys being\nheld. Using bitwise operators you can test if specific modifier keys are\npressed.\n\n"}, {"name": "key.get_pressed", "path": "ref/key#pygame.key.get_pressed", "type": "pygame.key", "text": "\nReturns a sequence of boolean values representing the state of every key on\nthe keyboard. Use the key constant values to index the array. A `True` value\nmeans the that button is pressed.\n\nNote\n\nGetting the list of pushed buttons with this function is not the proper way to\nhandle text entry from the user. There is no way to know the order of keys\npressed, and rapidly pushed keys can be completely unnoticed between two calls\nto `pygame.key.get_pressed()`. There is also no way to translate these pushed\nkeys into a fully translated character value. See the `pygame.KEYDOWN` events\non the `pygame.event` queue for this functionality.\n\n"}, {"name": "key.get_repeat", "path": "ref/key#pygame.key.get_repeat", "type": "pygame.key", "text": "\nGet the `delay` and `interval` keyboard repeat values. Refer to\n`pygame.key.set_repeat()` for a description of these values.\n\nNew in pygame 1.8.\n\n"}, {"name": "key.key_code", "path": "ref/key#pygame.key.key_code", "type": "pygame.key", "text": "\nGet the key identifier code from the descriptive name of the key. This returns\nan integer matching one of the K_* keycodes. For example:\n\nNew in pygame 2.0.0.\n\n"}, {"name": "key.name", "path": "ref/key#pygame.key.name", "type": "pygame.key", "text": "\nGet the descriptive name of the button from a keyboard button id constant.\n\n"}, {"name": "key.set_mods", "path": "ref/key#pygame.key.set_mods", "type": "pygame.key", "text": "\nCreate a bitmask of the modifier key constants you want to impose on your\nprogram.\n\n"}, {"name": "key.set_repeat", "path": "ref/key#pygame.key.set_repeat", "type": "pygame.key", "text": "\nWhen the keyboard repeat is enabled, keys that are held down will generate\nmultiple `pygame.KEYDOWN` events. The `delay` parameter is the number of\nmilliseconds before the first repeated `pygame.KEYDOWN` event will be sent.\nAfter that, another `pygame.KEYDOWN` event will be sent every `interval`\nmilliseconds. If a `delay` value is provided and an `interval` value is not\nprovided or is 0, then the `interval` will be set to the same value as\n`delay`.\n\nTo disable key repeat call this function with no arguments or with `delay` set\nto 0.\n\nWhen pygame is initialized the key repeat is disabled.\n\nChanged in pygame 2.0.0: A `ValueError` is now raised (instead of a\n`pygame.error`) if `delay` or `interval` is < 0.\n\n"}, {"name": "key.set_text_input_rect", "path": "ref/key#pygame.key.set_text_input_rect", "type": "pygame.key", "text": "\nThis sets the rectangle used for typing with an IME. It controls where the\ncandidate list will open, if supported.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "key.start_text_input", "path": "ref/key#pygame.key.start_text_input", "type": "pygame.key", "text": "\nStart receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events.\n\nA `pygame.TEXTEDITING` event is received when an IME composition is started or\nchanged. It contains the composition `text`, `length`, and editing `start`\nposition within the composition (attributes `text`, `length`, and `start`,\nrespectively). When the composition is committed (or non-IME input is\nreceived), a `pygame.TEXTINPUT` event is generated.\n\nText input events handling is on by default.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "key.stop_text_input", "path": "ref/key#pygame.key.stop_text_input", "type": "pygame.key", "text": "\nStop receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events.\n\nText input events handling is on by default\n\nNew in pygame 2.0.0.\n\n"}, {"name": "locals", "path": "ref/locals", "type": "pygame.locals", "text": "\nThis module contains various constants used by pygame. Its contents are\nautomatically placed in the pygame module namespace. However, an application\ncan use `pygame.locals` to include only the pygame constants with a `from\npygame.locals import *`.\n\nDetailed descriptions of the various constants can be found throughout the\npygame documentation. Here are the locations of some of them.\n\n"}, {"name": "mask", "path": "ref/mask", "type": "pygame.mask", "text": "\nUseful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel\nto store which parts collide.\n\nNew in pygame 1.8.\n\nCreates a `Mask` object from the given surface by setting all the opaque\npixels and not setting the transparent pixels.\n\nIf the surface uses a color-key, then it is used to decide which bits in the\nresulting mask are set. All the pixels that are not equal to the color-key are\nset and the pixels equal to the color-key are not set.\n\nIf a color-key is not used, then the alpha value of each pixel is used to\ndecide which bits in the resulting mask are set. All the pixels that have an\nalpha value greater than the `threshold` parameter are set and the pixels with\nan alpha value less than or equal to the `threshold` are not set.\n\na newly created `Mask` object from the given surface\n\nMask\n\nNote\n\nThis function is used to create the masks for `pygame.sprite.collide_mask()`.\n\nThis is a more featureful method of getting a `Mask` from a surface.\n\nIf the optional `othersurface` is not used, all the pixels within the\n`threshold` of the `color` parameter are set in the resulting mask.\n\nIf the optional `othersurface` is used, every pixel in the first surface that\nis within the `threshold` of the corresponding pixel in `othersurface` is set\nin the resulting mask.\n\na newly created `Mask` object from the given surface\n\nMask\n\nA `Mask` object is used to represent a 2D bitmask. Each bit in the mask\nrepresents a pixel. 1 is used to indicate a set bit and 0 is used to indicate\nan unset bit. Set bits in a mask can be used to detect collisions with other\nmasks and their set bits.\n\nA filled mask has all of its bits set to 1, conversely an\nunfilled/cleared/empty mask has all of its bits set to 0. Masks can be created\nunfilled (default) or filled by using the `fill` parameter. Masks can also be\ncleared or filled using the `pygame.mask.Mask.clear()` and\n`pygame.mask.Mask.fill()` methods respectively.\n\nA mask's coordinates start in the top left corner at `(0, 0)` just like\n`pygame.Surface`. Individual bits can be accessed using the\n`pygame.mask.Mask.get_at()` and `pygame.mask.Mask.set_at()` methods.\n\nThe methods `overlap()`, `overlap_area()`, `overlap_mask()`, `draw()`,\n`erase()`, and `convolve()` use an offset parameter to indicate the offset of\nanother mask's top left corner from the calling mask's top left corner. The\ncalling mask's top left corner is considered to be the origin `(0, 0)`.\nOffsets are a tuple or list of 2 integer values `(x_offset, y_offset)`.\nPositive and negative offset values are supported.\n\na newly created `Mask` object\n\nMask\n\nChanged in pygame 2.0.0: Shallow copy support added. The `Mask` class supports\nthe special method `__copy__()` and shallow copying via `copy.copy(mask)`.\n\nChanged in pygame 2.0.0: Subclassing support added. The `Mask` class can be\nused as a base class.\n\nChanged in pygame 1.9.5: Added support for keyword arguments.\n\nChanged in pygame 1.9.5: Added the optional keyword parameter `fill`.\n\nChanged in pygame 1.9.5: Added support for masks with a width and/or a height\nof 0.\n\nNote\n\nIf a mask subclass needs to copy any instance specific attributes then it\nshould override the `__copy__()` method. The overridden `__copy__()` method\nneeds to call `super().__copy__()` and then copy the required data as in the\nfollowing example code.\n\nNew in pygame 2.0.0.\n\nReturns a new `pygame.Rect()` object based on the size of this mask. The\nrect's default position will be `(0, 0)` and its default width and height will\nbe the same as this mask's. The rect's attributes can be altered via\n`pygame.Rect()` attribute keyword arguments/values passed into this method. As\nan example, `a_mask.get_rect(center=(10, 5))` would create a `pygame.Rect()`\nbased on the mask's size centered at the given position.\n\nNew in pygame 2.0.0.\n\n`None`\n\nNoneType\n\nIndexError \\-- if the position is outside of the mask's bounds\n\nReturns the first point of intersection encountered between this mask and\n`othermask`. A point of intersection is 2 overlapping set bits.\n\nThe current algorithm searches the overlapping area in `sizeof(unsigned long\nint) * CHAR_BIT` bit wide column blocks (the value of `sizeof(unsigned long\nint) * CHAR_BIT` is platform dependent, for clarity it will be referred to as\n`W`). Starting at the top left corner it checks bits 0 to `W - 1` of the first\nrow (`(0, 0)` to `(W - 1, 0)`) then continues to the next row (`(0, 1)` to `(W\n- 1, 1)`). Once this entire column block is checked, it continues to the next\none (`W` to `2 * W - 1`). This is repeated until it finds a point of\nintersection or the entire overlapping area is checked.\n\npoint of intersection or `None` if no intersection\n\ntuple(int, int) or NoneType\n\nReturns the number of overlapping set bits between between this mask and\n`othermask`.\n\nThis can be useful for collision detection. An approximate collision normal\ncan be found by calculating the gradient of the overlapping area through the\nfinite difference.\n\nthe number of overlapping set bits\n\nint\n\nReturns a `Mask`, the same size as this mask, containing the overlapping set\nbits between this mask and `othermask`.\n\na newly created `Mask` with the overlapping bits set\n\nMask\n\nSets all bits in the mask to 1.\n\nSets all bits in the mask to 0.\n\nFlips all of the bits in the mask. All the set bits are cleared to 0 and all\nthe unset bits are set to 1.\n\nCreates a new `Mask` of the requested size with its bits scaled from this\nmask.\n\nPerforms a bitwise OR, drawing `othermask` onto this mask.\n\n`None`\n\nNoneType\n\nErases (clears) all bits set in `othermask` from this mask.\n\n`None`\n\nNoneType\n\nFinds the centroid (the center mass of the set bits) for this mask.\n\nFinds the approximate orientation (from -90 to 90 degrees) of the set bits in\nthe mask. This works best if performed on a mask with only one connected\ncomponent.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nReturns a list of points of the outline of the first connected component\nencountered in the mask. To find a connected component, the mask is searched\nper row (left to right) starting in the top left corner.\n\nThe `every` optional parameter skips set bits in the outline. For example,\nsetting it to 10 would return a list of every 10th set bit in the outline.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nConvolve this mask with the given `othermask`.\n\na `Mask` with the `(i - offset[0], j - offset[1])` bit set, if shifting\n`othermask` (such that its bottom right corner is at `(i, j)`) causes it to\noverlap with this mask\n\nIf an `outputmask` is specified, the output is drawn onto it and it is\nreturned. Otherwise a mask of size `(MAX(0, width + othermask's width - 1),\nMAX(0, height + othermask's height - 1))` is created and returned.\n\nMask\n\nA connected component is a group (1 or more) of connected set bits\n(orthogonally and diagonally). The SAUF algorithm, which checks 8 point\nconnectivity, is used to find a connected component in the mask.\n\nBy default this method will return a `Mask` containing the largest connected\ncomponent in the mask. Optionally, a bit coordinate can be specified and the\nconnected component containing it will be returned. If the bit at the given\nlocation is not set, the returned `Mask` will be empty (no bits set).\n\nIf the `pos` parameter is provided then the mask returned will have the\nconnected component that contains this position. An empty mask will be\nreturned if the `pos` parameter selects an unset bit.\n\nProvides a list containing a `Mask` object for each connected component.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nProvides a list containing a bounding rect for each connected component.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nDraws this mask on the given surface. Set bits (bits set to 1) and unset bits\n(bits set to 0) can be drawn onto a surface.\n\nthe `surface` parameter (or a newly created surface if no `surface` parameter\nwas provided) with this mask drawn on it\n\nSurface\n\nValueError \\-- if the `setsurface` parameter or `unsetsurface` parameter does\nnot have the same format (bytesize/bitsize/alpha) as the `surface` parameter\n\nNote\n\nTo skip drawing the set bits, both `setsurface` and `setcolor` must be `None`.\nThe `setsurface` parameter defaults to `None`, but `setcolor` defaults to a\ncolor value and therefore must be set to `None`.\n\nNote\n\nTo skip drawing the unset bits, both `unsetsurface` and `unsetcolor` must be\n`None`. The `unsetsurface` parameter defaults to `None`, but `unsetcolor`\ndefaults to a color value and therefore must be set to `None`.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "mask.from_surface", "path": "ref/mask#pygame.mask.from_surface", "type": "pygame.mask", "text": "\nCreates a `Mask` object from the given surface by setting all the opaque\npixels and not setting the transparent pixels.\n\nIf the surface uses a color-key, then it is used to decide which bits in the\nresulting mask are set. All the pixels that are not equal to the color-key are\nset and the pixels equal to the color-key are not set.\n\nIf a color-key is not used, then the alpha value of each pixel is used to\ndecide which bits in the resulting mask are set. All the pixels that have an\nalpha value greater than the `threshold` parameter are set and the pixels with\nan alpha value less than or equal to the `threshold` are not set.\n\na newly created `Mask` object from the given surface\n\nMask\n\nNote\n\nThis function is used to create the masks for `pygame.sprite.collide_mask()`.\n\n"}, {"name": "mask.from_threshold", "path": "ref/mask#pygame.mask.from_threshold", "type": "pygame.mask", "text": "\nThis is a more featureful method of getting a `Mask` from a surface.\n\nIf the optional `othersurface` is not used, all the pixels within the\n`threshold` of the `color` parameter are set in the resulting mask.\n\nIf the optional `othersurface` is used, every pixel in the first surface that\nis within the `threshold` of the corresponding pixel in `othersurface` is set\nin the resulting mask.\n\na newly created `Mask` object from the given surface\n\nMask\n\n"}, {"name": "mask.Mask", "path": "ref/mask#pygame.mask.Mask", "type": "pygame.mask", "text": "\nA `Mask` object is used to represent a 2D bitmask. Each bit in the mask\nrepresents a pixel. 1 is used to indicate a set bit and 0 is used to indicate\nan unset bit. Set bits in a mask can be used to detect collisions with other\nmasks and their set bits.\n\nA filled mask has all of its bits set to 1, conversely an\nunfilled/cleared/empty mask has all of its bits set to 0. Masks can be created\nunfilled (default) or filled by using the `fill` parameter. Masks can also be\ncleared or filled using the `pygame.mask.Mask.clear()` and\n`pygame.mask.Mask.fill()` methods respectively.\n\nA mask's coordinates start in the top left corner at `(0, 0)` just like\n`pygame.Surface`. Individual bits can be accessed using the\n`pygame.mask.Mask.get_at()` and `pygame.mask.Mask.set_at()` methods.\n\nThe methods `overlap()`, `overlap_area()`, `overlap_mask()`, `draw()`,\n`erase()`, and `convolve()` use an offset parameter to indicate the offset of\nanother mask's top left corner from the calling mask's top left corner. The\ncalling mask's top left corner is considered to be the origin `(0, 0)`.\nOffsets are a tuple or list of 2 integer values `(x_offset, y_offset)`.\nPositive and negative offset values are supported.\n\na newly created `Mask` object\n\nMask\n\nChanged in pygame 2.0.0: Shallow copy support added. The `Mask` class supports\nthe special method `__copy__()` and shallow copying via `copy.copy(mask)`.\n\nChanged in pygame 2.0.0: Subclassing support added. The `Mask` class can be\nused as a base class.\n\nChanged in pygame 1.9.5: Added support for keyword arguments.\n\nChanged in pygame 1.9.5: Added the optional keyword parameter `fill`.\n\nChanged in pygame 1.9.5: Added support for masks with a width and/or a height\nof 0.\n\nNote\n\nIf a mask subclass needs to copy any instance specific attributes then it\nshould override the `__copy__()` method. The overridden `__copy__()` method\nneeds to call `super().__copy__()` and then copy the required data as in the\nfollowing example code.\n\nNew in pygame 2.0.0.\n\nReturns a new `pygame.Rect()` object based on the size of this mask. The\nrect's default position will be `(0, 0)` and its default width and height will\nbe the same as this mask's. The rect's attributes can be altered via\n`pygame.Rect()` attribute keyword arguments/values passed into this method. As\nan example, `a_mask.get_rect(center=(10, 5))` would create a `pygame.Rect()`\nbased on the mask's size centered at the given position.\n\nNew in pygame 2.0.0.\n\n`None`\n\nNoneType\n\nIndexError \\-- if the position is outside of the mask's bounds\n\nReturns the first point of intersection encountered between this mask and\n`othermask`. A point of intersection is 2 overlapping set bits.\n\nThe current algorithm searches the overlapping area in `sizeof(unsigned long\nint) * CHAR_BIT` bit wide column blocks (the value of `sizeof(unsigned long\nint) * CHAR_BIT` is platform dependent, for clarity it will be referred to as\n`W`). Starting at the top left corner it checks bits 0 to `W - 1` of the first\nrow (`(0, 0)` to `(W - 1, 0)`) then continues to the next row (`(0, 1)` to `(W\n- 1, 1)`). Once this entire column block is checked, it continues to the next\none (`W` to `2 * W - 1`). This is repeated until it finds a point of\nintersection or the entire overlapping area is checked.\n\npoint of intersection or `None` if no intersection\n\ntuple(int, int) or NoneType\n\nReturns the number of overlapping set bits between between this mask and\n`othermask`.\n\nThis can be useful for collision detection. An approximate collision normal\ncan be found by calculating the gradient of the overlapping area through the\nfinite difference.\n\nthe number of overlapping set bits\n\nint\n\nReturns a `Mask`, the same size as this mask, containing the overlapping set\nbits between this mask and `othermask`.\n\na newly created `Mask` with the overlapping bits set\n\nMask\n\nSets all bits in the mask to 1.\n\nSets all bits in the mask to 0.\n\nFlips all of the bits in the mask. All the set bits are cleared to 0 and all\nthe unset bits are set to 1.\n\nCreates a new `Mask` of the requested size with its bits scaled from this\nmask.\n\nPerforms a bitwise OR, drawing `othermask` onto this mask.\n\n`None`\n\nNoneType\n\nErases (clears) all bits set in `othermask` from this mask.\n\n`None`\n\nNoneType\n\nFinds the centroid (the center mass of the set bits) for this mask.\n\nFinds the approximate orientation (from -90 to 90 degrees) of the set bits in\nthe mask. This works best if performed on a mask with only one connected\ncomponent.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nReturns a list of points of the outline of the first connected component\nencountered in the mask. To find a connected component, the mask is searched\nper row (left to right) starting in the top left corner.\n\nThe `every` optional parameter skips set bits in the outline. For example,\nsetting it to 10 would return a list of every 10th set bit in the outline.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nConvolve this mask with the given `othermask`.\n\na `Mask` with the `(i - offset[0], j - offset[1])` bit set, if shifting\n`othermask` (such that its bottom right corner is at `(i, j)`) causes it to\noverlap with this mask\n\nIf an `outputmask` is specified, the output is drawn onto it and it is\nreturned. Otherwise a mask of size `(MAX(0, width + othermask's width - 1),\nMAX(0, height + othermask's height - 1))` is created and returned.\n\nMask\n\nA connected component is a group (1 or more) of connected set bits\n(orthogonally and diagonally). The SAUF algorithm, which checks 8 point\nconnectivity, is used to find a connected component in the mask.\n\nBy default this method will return a `Mask` containing the largest connected\ncomponent in the mask. Optionally, a bit coordinate can be specified and the\nconnected component containing it will be returned. If the bit at the given\nlocation is not set, the returned `Mask` will be empty (no bits set).\n\nIf the `pos` parameter is provided then the mask returned will have the\nconnected component that contains this position. An empty mask will be\nreturned if the `pos` parameter selects an unset bit.\n\nProvides a list containing a `Mask` object for each connected component.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nProvides a list containing a bounding rect for each connected component.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nDraws this mask on the given surface. Set bits (bits set to 1) and unset bits\n(bits set to 0) can be drawn onto a surface.\n\nthe `surface` parameter (or a newly created surface if no `surface` parameter\nwas provided) with this mask drawn on it\n\nSurface\n\nValueError \\-- if the `setsurface` parameter or `unsetsurface` parameter does\nnot have the same format (bytesize/bitsize/alpha) as the `surface` parameter\n\nNote\n\nTo skip drawing the set bits, both `setsurface` and `setcolor` must be `None`.\nThe `setsurface` parameter defaults to `None`, but `setcolor` defaults to a\ncolor value and therefore must be set to `None`.\n\nNote\n\nTo skip drawing the unset bits, both `unsetsurface` and `unsetcolor` must be\n`None`. The `unsetsurface` parameter defaults to `None`, but `unsetcolor`\ndefaults to a color value and therefore must be set to `None`.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "mask.Mask.angle", "path": "ref/mask#pygame.mask.Mask.angle", "type": "pygame.mask", "text": "\nFinds the approximate orientation (from -90 to 90 degrees) of the set bits in\nthe mask. This works best if performed on a mask with only one connected\ncomponent.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\n"}, {"name": "mask.Mask.centroid", "path": "ref/mask#pygame.mask.Mask.centroid", "type": "pygame.mask", "text": "\nFinds the centroid (the center mass of the set bits) for this mask.\n\n"}, {"name": "mask.Mask.clear", "path": "ref/mask#pygame.mask.Mask.clear", "type": "pygame.mask", "text": "\nSets all bits in the mask to 0.\n\n"}, {"name": "mask.Mask.connected_component", "path": "ref/mask#pygame.mask.Mask.connected_component", "type": "pygame.mask", "text": "\nA connected component is a group (1 or more) of connected set bits\n(orthogonally and diagonally). The SAUF algorithm, which checks 8 point\nconnectivity, is used to find a connected component in the mask.\n\nBy default this method will return a `Mask` containing the largest connected\ncomponent in the mask. Optionally, a bit coordinate can be specified and the\nconnected component containing it will be returned. If the bit at the given\nlocation is not set, the returned `Mask` will be empty (no bits set).\n\nIf the `pos` parameter is provided then the mask returned will have the\nconnected component that contains this position. An empty mask will be\nreturned if the `pos` parameter selects an unset bit.\n\n"}, {"name": "mask.Mask.connected_components", "path": "ref/mask#pygame.mask.Mask.connected_components", "type": "pygame.mask", "text": "\nProvides a list containing a `Mask` object for each connected component.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\n"}, {"name": "mask.Mask.convolve", "path": "ref/mask#pygame.mask.Mask.convolve", "type": "pygame.mask", "text": "\nConvolve this mask with the given `othermask`.\n\na `Mask` with the `(i - offset[0], j - offset[1])` bit set, if shifting\n`othermask` (such that its bottom right corner is at `(i, j)`) causes it to\noverlap with this mask\n\nIf an `outputmask` is specified, the output is drawn onto it and it is\nreturned. Otherwise a mask of size `(MAX(0, width + othermask's width - 1),\nMAX(0, height + othermask's height - 1))` is created and returned.\n\nMask\n\n"}, {"name": "mask.Mask.copy", "path": "ref/mask#pygame.mask.Mask.copy", "type": "pygame.mask", "text": "\nNote\n\nIf a mask subclass needs to copy any instance specific attributes then it\nshould override the `__copy__()` method. The overridden `__copy__()` method\nneeds to call `super().__copy__()` and then copy the required data as in the\nfollowing example code.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "mask.Mask.count", "path": "ref/mask#pygame.mask.Mask.count", "type": "pygame.mask", "text": "\n\n"}, {"name": "mask.Mask.draw", "path": "ref/mask#pygame.mask.Mask.draw", "type": "pygame.mask", "text": "\nPerforms a bitwise OR, drawing `othermask` onto this mask.\n\n`None`\n\nNoneType\n\n"}, {"name": "mask.Mask.erase", "path": "ref/mask#pygame.mask.Mask.erase", "type": "pygame.mask", "text": "\nErases (clears) all bits set in `othermask` from this mask.\n\n`None`\n\nNoneType\n\n"}, {"name": "mask.Mask.fill", "path": "ref/mask#pygame.mask.Mask.fill", "type": "pygame.mask", "text": "\nSets all bits in the mask to 1.\n\n"}, {"name": "mask.Mask.get_at", "path": "ref/mask#pygame.mask.Mask.get_at", "type": "pygame.mask", "text": "\n\n"}, {"name": "mask.Mask.get_bounding_rects", "path": "ref/mask#pygame.mask.Mask.get_bounding_rects", "type": "pygame.mask", "text": "\nProvides a list containing a bounding rect for each connected component.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\n"}, {"name": "mask.Mask.get_rect", "path": "ref/mask#pygame.mask.Mask.get_rect", "type": "pygame.mask", "text": "\nReturns a new `pygame.Rect()` object based on the size of this mask. The\nrect's default position will be `(0, 0)` and its default width and height will\nbe the same as this mask's. The rect's attributes can be altered via\n`pygame.Rect()` attribute keyword arguments/values passed into this method. As\nan example, `a_mask.get_rect(center=(10, 5))` would create a `pygame.Rect()`\nbased on the mask's size centered at the given position.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "mask.Mask.get_size", "path": "ref/mask#pygame.mask.Mask.get_size", "type": "pygame.mask", "text": "\n\n"}, {"name": "mask.Mask.invert", "path": "ref/mask#pygame.mask.Mask.invert", "type": "pygame.mask", "text": "\nFlips all of the bits in the mask. All the set bits are cleared to 0 and all\nthe unset bits are set to 1.\n\n"}, {"name": "mask.Mask.outline", "path": "ref/mask#pygame.mask.Mask.outline", "type": "pygame.mask", "text": "\nReturns a list of points of the outline of the first connected component\nencountered in the mask. To find a connected component, the mask is searched\nper row (left to right) starting in the top left corner.\n\nThe `every` optional parameter skips set bits in the outline. For example,\nsetting it to 10 would return a list of every 10th set bit in the outline.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\n"}, {"name": "mask.Mask.overlap", "path": "ref/mask#pygame.mask.Mask.overlap", "type": "pygame.mask", "text": "\nReturns the first point of intersection encountered between this mask and\n`othermask`. A point of intersection is 2 overlapping set bits.\n\nThe current algorithm searches the overlapping area in `sizeof(unsigned long\nint) * CHAR_BIT` bit wide column blocks (the value of `sizeof(unsigned long\nint) * CHAR_BIT` is platform dependent, for clarity it will be referred to as\n`W`). Starting at the top left corner it checks bits 0 to `W - 1` of the first\nrow (`(0, 0)` to `(W - 1, 0)`) then continues to the next row (`(0, 1)` to `(W\n- 1, 1)`). Once this entire column block is checked, it continues to the next\none (`W` to `2 * W - 1`). This is repeated until it finds a point of\nintersection or the entire overlapping area is checked.\n\npoint of intersection or `None` if no intersection\n\ntuple(int, int) or NoneType\n\n"}, {"name": "mask.Mask.overlap_area", "path": "ref/mask#pygame.mask.Mask.overlap_area", "type": "pygame.mask", "text": "\nReturns the number of overlapping set bits between between this mask and\n`othermask`.\n\nThis can be useful for collision detection. An approximate collision normal\ncan be found by calculating the gradient of the overlapping area through the\nfinite difference.\n\nthe number of overlapping set bits\n\nint\n\n"}, {"name": "mask.Mask.overlap_mask", "path": "ref/mask#pygame.mask.Mask.overlap_mask", "type": "pygame.mask", "text": "\nReturns a `Mask`, the same size as this mask, containing the overlapping set\nbits between this mask and `othermask`.\n\na newly created `Mask` with the overlapping bits set\n\nMask\n\n"}, {"name": "mask.Mask.scale", "path": "ref/mask#pygame.mask.Mask.scale", "type": "pygame.mask", "text": "\nCreates a new `Mask` of the requested size with its bits scaled from this\nmask.\n\n"}, {"name": "mask.Mask.set_at", "path": "ref/mask#pygame.mask.Mask.set_at", "type": "pygame.mask", "text": "\n`None`\n\nNoneType\n\nIndexError \\-- if the position is outside of the mask's bounds\n\n"}, {"name": "mask.Mask.to_surface", "path": "ref/mask#pygame.mask.Mask.to_surface", "type": "pygame.mask", "text": "\nDraws this mask on the given surface. Set bits (bits set to 1) and unset bits\n(bits set to 0) can be drawn onto a surface.\n\nthe `surface` parameter (or a newly created surface if no `surface` parameter\nwas provided) with this mask drawn on it\n\nSurface\n\nValueError \\-- if the `setsurface` parameter or `unsetsurface` parameter does\nnot have the same format (bytesize/bitsize/alpha) as the `surface` parameter\n\nNote\n\nTo skip drawing the set bits, both `setsurface` and `setcolor` must be `None`.\nThe `setsurface` parameter defaults to `None`, but `setcolor` defaults to a\ncolor value and therefore must be set to `None`.\n\nNote\n\nTo skip drawing the unset bits, both `unsetsurface` and `unsetcolor` must be\n`None`. The `unsetsurface` parameter defaults to `None`, but `unsetcolor`\ndefaults to a color value and therefore must be set to `None`.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "math", "path": "ref/math", "type": "pygame.math", "text": "\nThe pygame math module currently provides Vector classes in two and three\ndimensions, `Vector2` and `Vector3` respectively.\n\nThey support the following numerical operations: `vec+vec`, `vec-vec`,\n`vec*number`, `number*vec`, `vec/number`, `vec//number`, `vec+=vec`,\n`vec-=vec`, `vec*=number`, `vec/=number`, `vec//=number`.\n\nAll these operations will be performed elementwise. In addition `vec*vec` will\nperform a scalar-product (a.k.a. dot-product). If you want to multiply every\nelement from vector v with every element from vector w you can use the\nelementwise method: `v.elementwise() * w`\n\nThe coordinates of a vector can be retrieved or set using attributes or\nsubscripts\n\nMultiple coordinates can be set using slices or swizzling\n\nNew in pygame 1.9.2pre.\n\nChanged in pygame 1.9.4: Removed experimental notice.\n\nChanged in pygame 1.9.4: Allow scalar construction like GLSL Vector2(2) ==\nVector2(2.0, 2.0)\n\nChanged in pygame 1.9.4: `pygame.math` required import. More convenient\n`pygame.Vector2` and `pygame.Vector3`.\n\nSome general information about the `Vector2` class.\n\ncalculates the third component of the cross-product.\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)`\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude_squared() == vec.x**2 + vec.y**2`. This is faster than\n`vec.magnitude()` because it avoids the square root.\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length() == math.sqrt(vec.x**2 + vec.y**2)`\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length_squared() == vec.x**2 + vec.y**2`. This is\nfaster than `vec.length()` because it avoids the square root.\n\nReturns a new vector that has `length` equal to `1` and the same direction as\nself.\n\nNormalizes the vector so that it has `length` equal to `1`. The direction of\nthe vector is not changed.\n\nReturns True if the vector has `length` equal to `1`. Otherwise it returns\n`False`.\n\nScales the vector so that it has the given length. The direction of the vector\nis not changed. You can also scale to length `0`. If the vector is the zero\nvector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\nReturns a new vector that points in the direction as if self would bounce of a\nsurface characterized by the given surface normal. The length of the new\nvector is the same as self's.\n\nChanges the direction of self as if it would have been reflected of a surface\nwith the given surface normal.\n\nReturns a Vector which is a linear interpolation between self and the given\nVector. The second parameter determines how far between self and other the\nresult is going to be. It must be a value between `0` and `1` where `0` means\nself and `1` means other will be returned.\n\nCalculates the spherical interpolation from self to the given Vector. The\nsecond argument - often called t - must be in the range `[-1, 1]`. It\nparametrizes where - in between the two vectors - the result should be. If a\nnegative value is given the interpolation will not take the complement of the\nshortest path.\n\nApplies the following operation to each element of the vector.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise by the given angle in degrees. The length\nof the vector is not changed.\n\nRotates the vector counterclockwise by the given angle in radians. The length\nof the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns the angle between self and the given vector.\n\nReturns a tuple `(r, phi)` where r is the radial distance, and phi is the\nazimuthal angle.\n\nSets x and y from a tuple (r, phi) where r is the radial distance, and phi is\nthe azimuthal angle.\n\nSets coordinates x and y in place.\n\nNew in pygame 1.9.5.\n\nSome general information about the Vector3 class.\n\ncalculates the cross-product.\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)`\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2`. This is faster\nthan `vec.magnitude()` because it avoids the square root.\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length() == math.sqrt(vec.x**2 + vec.y**2 +\nvec.z**2)`\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2`.\nThis is faster than `vec.length()` because it avoids the square root.\n\nReturns a new vector that has `length` equal to `1` and the same direction as\nself.\n\nNormalizes the vector so that it has `length` equal to `1`. The direction of\nthe vector is not changed.\n\nReturns True if the vector has `length` equal to `1`. Otherwise it returns\n`False`.\n\nScales the vector so that it has the given length. The direction of the vector\nis not changed. You can also scale to length `0`. If the vector is the zero\nvector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\nReturns a new vector that points in the direction as if self would bounce of a\nsurface characterized by the given surface normal. The length of the new\nvector is the same as self's.\n\nChanges the direction of self as if it would have been reflected of a surface\nwith the given surface normal.\n\nReturns a Vector which is a linear interpolation between self and the given\nVector. The second parameter determines how far between self an other the\nresult is going to be. It must be a value between `0` and `1`, where `0` means\nself and `1` means other will be returned.\n\nCalculates the spherical interpolation from self to the given Vector. The\nsecond argument - often called t - must be in the range `[-1, 1]`. It\nparametrizes where - in between the two vectors - the result should be. If a\nnegative value is given the interpolation will not take the complement of the\nshortest path.\n\nApplies the following operation to each element of the vector.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in degrees around the given axis.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in radians around the given axis.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the given axis by the given angle\nin degrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the given axis by the given angle\nin radians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the x-axis by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the x-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the x-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the x-axis by the given angle in\nradians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the y-axis by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the y-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the y-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the y-axis by the given angle in\nradians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the z-axis by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the z-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the z-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the z-axis by the given angle in\nradians. The length of the vector is not changed.\n\nReturns the angle between self and the given vector.\n\nReturns a tuple `(r, theta, phi)` where r is the radial distance, theta is the\ninclination angle and phi is the azimuthal angle.\n\nSets x, y and z from a tuple `(r, theta, phi)` where r is the radial distance,\ntheta is the inclination angle and phi is the azimuthal angle.\n\nSets coordinates x, y, and z in place.\n\nNew in pygame 1.9.5.\n\nDEPRECATED: Not needed anymore. Will be removed in a later version.\n\nEnables swizzling for all vectors until `disable_swizzling()` is called. By\ndefault swizzling is disabled.\n\nLets you get or set multiple coordinates as one attribute, eg `vec.xyz = 1, 2,\n3`.\n\nDEPRECATED: Not needed anymore. Will be removed in a later version.\n\nDisables swizzling for all vectors until `enable_swizzling()` is called. By\ndefault swizzling is disabled.\n\n"}, {"name": "math.disable_swizzling", "path": "ref/math#pygame.math.disable_swizzling", "type": "pygame.math", "text": "\nDEPRECATED: Not needed anymore. Will be removed in a later version.\n\nDisables swizzling for all vectors until `enable_swizzling()` is called. By\ndefault swizzling is disabled.\n\n"}, {"name": "math.enable_swizzling", "path": "ref/math#pygame.math.enable_swizzling", "type": "pygame.math", "text": "\nDEPRECATED: Not needed anymore. Will be removed in a later version.\n\nEnables swizzling for all vectors until `disable_swizzling()` is called. By\ndefault swizzling is disabled.\n\nLets you get or set multiple coordinates as one attribute, eg `vec.xyz = 1, 2,\n3`.\n\n"}, {"name": "math.Vector2", "path": "ref/math#pygame.math.Vector2", "type": "pygame.math", "text": "\nSome general information about the `Vector2` class.\n\ncalculates the third component of the cross-product.\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)`\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude_squared() == vec.x**2 + vec.y**2`. This is faster than\n`vec.magnitude()` because it avoids the square root.\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length() == math.sqrt(vec.x**2 + vec.y**2)`\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length_squared() == vec.x**2 + vec.y**2`. This is\nfaster than `vec.length()` because it avoids the square root.\n\nReturns a new vector that has `length` equal to `1` and the same direction as\nself.\n\nNormalizes the vector so that it has `length` equal to `1`. The direction of\nthe vector is not changed.\n\nReturns True if the vector has `length` equal to `1`. Otherwise it returns\n`False`.\n\nScales the vector so that it has the given length. The direction of the vector\nis not changed. You can also scale to length `0`. If the vector is the zero\nvector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\nReturns a new vector that points in the direction as if self would bounce of a\nsurface characterized by the given surface normal. The length of the new\nvector is the same as self's.\n\nChanges the direction of self as if it would have been reflected of a surface\nwith the given surface normal.\n\nReturns a Vector which is a linear interpolation between self and the given\nVector. The second parameter determines how far between self and other the\nresult is going to be. It must be a value between `0` and `1` where `0` means\nself and `1` means other will be returned.\n\nCalculates the spherical interpolation from self to the given Vector. The\nsecond argument - often called t - must be in the range `[-1, 1]`. It\nparametrizes where - in between the two vectors - the result should be. If a\nnegative value is given the interpolation will not take the complement of the\nshortest path.\n\nApplies the following operation to each element of the vector.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise by the given angle in degrees. The length\nof the vector is not changed.\n\nRotates the vector counterclockwise by the given angle in radians. The length\nof the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns the angle between self and the given vector.\n\nReturns a tuple `(r, phi)` where r is the radial distance, and phi is the\nazimuthal angle.\n\nSets x and y from a tuple (r, phi) where r is the radial distance, and phi is\nthe azimuthal angle.\n\nSets coordinates x and y in place.\n\nNew in pygame 1.9.5.\n\n"}, {"name": "math.Vector2.angle_to", "path": "ref/math#pygame.math.Vector2.angle_to", "type": "pygame.math", "text": "\nReturns the angle between self and the given vector.\n\n"}, {"name": "math.Vector2.as_polar", "path": "ref/math#pygame.math.Vector2.as_polar", "type": "pygame.math", "text": "\nReturns a tuple `(r, phi)` where r is the radial distance, and phi is the\nazimuthal angle.\n\n"}, {"name": "math.Vector2.cross", "path": "ref/math#pygame.math.Vector2.cross", "type": "pygame.math", "text": "\ncalculates the third component of the cross-product.\n\n"}, {"name": "math.Vector2.distance_squared_to", "path": "ref/math#pygame.math.Vector2.distance_squared_to", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector2.distance_to", "path": "ref/math#pygame.math.Vector2.distance_to", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector2.dot", "path": "ref/math#pygame.math.Vector2.dot", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector2.elementwise", "path": "ref/math#pygame.math.Vector2.elementwise", "type": "pygame.math", "text": "\nApplies the following operation to each element of the vector.\n\n"}, {"name": "math.Vector2.from_polar", "path": "ref/math#pygame.math.Vector2.from_polar", "type": "pygame.math", "text": "\nSets x and y from a tuple (r, phi) where r is the radial distance, and phi is\nthe azimuthal angle.\n\n"}, {"name": "math.Vector2.is_normalized", "path": "ref/math#pygame.math.Vector2.is_normalized", "type": "pygame.math", "text": "\nReturns True if the vector has `length` equal to `1`. Otherwise it returns\n`False`.\n\n"}, {"name": "math.Vector2.length", "path": "ref/math#pygame.math.Vector2.length", "type": "pygame.math", "text": "\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length() == math.sqrt(vec.x**2 + vec.y**2)`\n\n"}, {"name": "math.Vector2.length_squared", "path": "ref/math#pygame.math.Vector2.length_squared", "type": "pygame.math", "text": "\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length_squared() == vec.x**2 + vec.y**2`. This is\nfaster than `vec.length()` because it avoids the square root.\n\n"}, {"name": "math.Vector2.lerp", "path": "ref/math#pygame.math.Vector2.lerp", "type": "pygame.math", "text": "\nReturns a Vector which is a linear interpolation between self and the given\nVector. The second parameter determines how far between self and other the\nresult is going to be. It must be a value between `0` and `1` where `0` means\nself and `1` means other will be returned.\n\n"}, {"name": "math.Vector2.magnitude", "path": "ref/math#pygame.math.Vector2.magnitude", "type": "pygame.math", "text": "\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)`\n\n"}, {"name": "math.Vector2.magnitude_squared", "path": "ref/math#pygame.math.Vector2.magnitude_squared", "type": "pygame.math", "text": "\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude_squared() == vec.x**2 + vec.y**2`. This is faster than\n`vec.magnitude()` because it avoids the square root.\n\n"}, {"name": "math.Vector2.normalize", "path": "ref/math#pygame.math.Vector2.normalize", "type": "pygame.math", "text": "\nReturns a new vector that has `length` equal to `1` and the same direction as\nself.\n\n"}, {"name": "math.Vector2.normalize_ip", "path": "ref/math#pygame.math.Vector2.normalize_ip", "type": "pygame.math", "text": "\nNormalizes the vector so that it has `length` equal to `1`. The direction of\nthe vector is not changed.\n\n"}, {"name": "math.Vector2.reflect", "path": "ref/math#pygame.math.Vector2.reflect", "type": "pygame.math", "text": "\nReturns a new vector that points in the direction as if self would bounce of a\nsurface characterized by the given surface normal. The length of the new\nvector is the same as self's.\n\n"}, {"name": "math.Vector2.reflect_ip", "path": "ref/math#pygame.math.Vector2.reflect_ip", "type": "pygame.math", "text": "\nChanges the direction of self as if it would have been reflected of a surface\nwith the given surface normal.\n\n"}, {"name": "math.Vector2.rotate", "path": "ref/math#pygame.math.Vector2.rotate", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in degrees.\n\n"}, {"name": "math.Vector2.rotate_ip", "path": "ref/math#pygame.math.Vector2.rotate_ip", "type": "pygame.math", "text": "\nRotates the vector counterclockwise by the given angle in degrees. The length\nof the vector is not changed.\n\n"}, {"name": "math.Vector2.rotate_ip_rad", "path": "ref/math#pygame.math.Vector2.rotate_ip_rad", "type": "pygame.math", "text": "\nRotates the vector counterclockwise by the given angle in radians. The length\nof the vector is not changed.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "math.Vector2.rotate_rad", "path": "ref/math#pygame.math.Vector2.rotate_rad", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in radians.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "math.Vector2.scale_to_length", "path": "ref/math#pygame.math.Vector2.scale_to_length", "type": "pygame.math", "text": "\nScales the vector so that it has the given length. The direction of the vector\nis not changed. You can also scale to length `0`. If the vector is the zero\nvector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\n"}, {"name": "math.Vector2.slerp", "path": "ref/math#pygame.math.Vector2.slerp", "type": "pygame.math", "text": "\nCalculates the spherical interpolation from self to the given Vector. The\nsecond argument - often called t - must be in the range `[-1, 1]`. It\nparametrizes where - in between the two vectors - the result should be. If a\nnegative value is given the interpolation will not take the complement of the\nshortest path.\n\n"}, {"name": "math.Vector2.update", "path": "ref/math#pygame.math.Vector2.update", "type": "pygame.math", "text": "\nSets coordinates x and y in place.\n\nNew in pygame 1.9.5.\n\n"}, {"name": "math.Vector3", "path": "ref/math#pygame.math.Vector3", "type": "pygame.math", "text": "\nSome general information about the Vector3 class.\n\ncalculates the cross-product.\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)`\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2`. This is faster\nthan `vec.magnitude()` because it avoids the square root.\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length() == math.sqrt(vec.x**2 + vec.y**2 +\nvec.z**2)`\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2`.\nThis is faster than `vec.length()` because it avoids the square root.\n\nReturns a new vector that has `length` equal to `1` and the same direction as\nself.\n\nNormalizes the vector so that it has `length` equal to `1`. The direction of\nthe vector is not changed.\n\nReturns True if the vector has `length` equal to `1`. Otherwise it returns\n`False`.\n\nScales the vector so that it has the given length. The direction of the vector\nis not changed. You can also scale to length `0`. If the vector is the zero\nvector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\nReturns a new vector that points in the direction as if self would bounce of a\nsurface characterized by the given surface normal. The length of the new\nvector is the same as self's.\n\nChanges the direction of self as if it would have been reflected of a surface\nwith the given surface normal.\n\nReturns a Vector which is a linear interpolation between self and the given\nVector. The second parameter determines how far between self an other the\nresult is going to be. It must be a value between `0` and `1`, where `0` means\nself and `1` means other will be returned.\n\nCalculates the spherical interpolation from self to the given Vector. The\nsecond argument - often called t - must be in the range `[-1, 1]`. It\nparametrizes where - in between the two vectors - the result should be. If a\nnegative value is given the interpolation will not take the complement of the\nshortest path.\n\nApplies the following operation to each element of the vector.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in degrees around the given axis.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in radians around the given axis.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the given axis by the given angle\nin degrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the given axis by the given angle\nin radians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the x-axis by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the x-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the x-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the x-axis by the given angle in\nradians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the y-axis by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the y-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the y-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the y-axis by the given angle in\nradians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the z-axis by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the z-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the z-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the z-axis by the given angle in\nradians. The length of the vector is not changed.\n\nReturns the angle between self and the given vector.\n\nReturns a tuple `(r, theta, phi)` where r is the radial distance, theta is the\ninclination angle and phi is the azimuthal angle.\n\nSets x, y and z from a tuple `(r, theta, phi)` where r is the radial distance,\ntheta is the inclination angle and phi is the azimuthal angle.\n\nSets coordinates x, y, and z in place.\n\nNew in pygame 1.9.5.\n\n"}, {"name": "math.Vector3.angle_to", "path": "ref/math#pygame.math.Vector3.angle_to", "type": "pygame.math", "text": "\nReturns the angle between self and the given vector.\n\n"}, {"name": "math.Vector3.as_spherical", "path": "ref/math#pygame.math.Vector3.as_spherical", "type": "pygame.math", "text": "\nReturns a tuple `(r, theta, phi)` where r is the radial distance, theta is the\ninclination angle and phi is the azimuthal angle.\n\n"}, {"name": "math.Vector3.cross", "path": "ref/math#pygame.math.Vector3.cross", "type": "pygame.math", "text": "\ncalculates the cross-product.\n\n"}, {"name": "math.Vector3.distance_squared_to", "path": "ref/math#pygame.math.Vector3.distance_squared_to", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector3.distance_to", "path": "ref/math#pygame.math.Vector3.distance_to", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector3.dot", "path": "ref/math#pygame.math.Vector3.dot", "type": "pygame.math", "text": "\n\n"}, {"name": "math.Vector3.elementwise", "path": "ref/math#pygame.math.Vector3.elementwise", "type": "pygame.math", "text": "\nApplies the following operation to each element of the vector.\n\n"}, {"name": "math.Vector3.from_spherical", "path": "ref/math#pygame.math.Vector3.from_spherical", "type": "pygame.math", "text": "\nSets x, y and z from a tuple `(r, theta, phi)` where r is the radial distance,\ntheta is the inclination angle and phi is the azimuthal angle.\n\n"}, {"name": "math.Vector3.is_normalized", "path": "ref/math#pygame.math.Vector3.is_normalized", "type": "pygame.math", "text": "\nReturns True if the vector has `length` equal to `1`. Otherwise it returns\n`False`.\n\n"}, {"name": "math.Vector3.length", "path": "ref/math#pygame.math.Vector3.length", "type": "pygame.math", "text": "\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length() == math.sqrt(vec.x**2 + vec.y**2 +\nvec.z**2)`\n\n"}, {"name": "math.Vector3.length_squared", "path": "ref/math#pygame.math.Vector3.length_squared", "type": "pygame.math", "text": "\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2`.\nThis is faster than `vec.length()` because it avoids the square root.\n\n"}, {"name": "math.Vector3.lerp", "path": "ref/math#pygame.math.Vector3.lerp", "type": "pygame.math", "text": "\nReturns a Vector which is a linear interpolation between self and the given\nVector. The second parameter determines how far between self an other the\nresult is going to be. It must be a value between `0` and `1`, where `0` means\nself and `1` means other will be returned.\n\n"}, {"name": "math.Vector3.magnitude", "path": "ref/math#pygame.math.Vector3.magnitude", "type": "pygame.math", "text": "\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)`\n\n"}, {"name": "math.Vector3.magnitude_squared", "path": "ref/math#pygame.math.Vector3.magnitude_squared", "type": "pygame.math", "text": "\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2`. This is faster\nthan `vec.magnitude()` because it avoids the square root.\n\n"}, {"name": "math.Vector3.normalize", "path": "ref/math#pygame.math.Vector3.normalize", "type": "pygame.math", "text": "\nReturns a new vector that has `length` equal to `1` and the same direction as\nself.\n\n"}, {"name": "math.Vector3.normalize_ip", "path": "ref/math#pygame.math.Vector3.normalize_ip", "type": "pygame.math", "text": "\nNormalizes the vector so that it has `length` equal to `1`. The direction of\nthe vector is not changed.\n\n"}, {"name": "math.Vector3.reflect", "path": "ref/math#pygame.math.Vector3.reflect", "type": "pygame.math", "text": "\nReturns a new vector that points in the direction as if self would bounce of a\nsurface characterized by the given surface normal. The length of the new\nvector is the same as self's.\n\n"}, {"name": "math.Vector3.reflect_ip", "path": "ref/math#pygame.math.Vector3.reflect_ip", "type": "pygame.math", "text": "\nChanges the direction of self as if it would have been reflected of a surface\nwith the given surface normal.\n\n"}, {"name": "math.Vector3.rotate", "path": "ref/math#pygame.math.Vector3.rotate", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in degrees around the given axis.\n\n"}, {"name": "math.Vector3.rotate_ip", "path": "ref/math#pygame.math.Vector3.rotate_ip", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the given axis by the given angle\nin degrees. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_ip_rad", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the given axis by the given angle\nin radians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "math.Vector3.rotate_rad", "path": "ref/math#pygame.math.Vector3.rotate_rad", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in radians around the given axis.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "math.Vector3.rotate_x", "path": "ref/math#pygame.math.Vector3.rotate_x", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the x-axis by the given angle in degrees.\n\n"}, {"name": "math.Vector3.rotate_x_ip", "path": "ref/math#pygame.math.Vector3.rotate_x_ip", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the x-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_x_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_x_ip_rad", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the x-axis by the given angle in\nradians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "math.Vector3.rotate_x_rad", "path": "ref/math#pygame.math.Vector3.rotate_x_rad", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the x-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "math.Vector3.rotate_y", "path": "ref/math#pygame.math.Vector3.rotate_y", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the y-axis by the given angle in degrees.\n\n"}, {"name": "math.Vector3.rotate_y_ip", "path": "ref/math#pygame.math.Vector3.rotate_y_ip", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the y-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_y_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_y_ip_rad", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the y-axis by the given angle in\nradians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "math.Vector3.rotate_y_rad", "path": "ref/math#pygame.math.Vector3.rotate_y_rad", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the y-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "math.Vector3.rotate_z", "path": "ref/math#pygame.math.Vector3.rotate_z", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the z-axis by the given angle in degrees.\n\n"}, {"name": "math.Vector3.rotate_z_ip", "path": "ref/math#pygame.math.Vector3.rotate_z_ip", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the z-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_z_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_z_ip_rad", "type": "pygame.math", "text": "\nRotates the vector counterclockwise around the z-axis by the given angle in\nradians. The length of the vector is not changed.\n\n"}, {"name": "math.Vector3.rotate_z_rad", "path": "ref/math#pygame.math.Vector3.rotate_z_rad", "type": "pygame.math", "text": "\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the z-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "math.Vector3.scale_to_length", "path": "ref/math#pygame.math.Vector3.scale_to_length", "type": "pygame.math", "text": "\nScales the vector so that it has the given length. The direction of the vector\nis not changed. You can also scale to length `0`. If the vector is the zero\nvector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\n"}, {"name": "math.Vector3.slerp", "path": "ref/math#pygame.math.Vector3.slerp", "type": "pygame.math", "text": "\nCalculates the spherical interpolation from self to the given Vector. The\nsecond argument - often called t - must be in the range `[-1, 1]`. It\nparametrizes where - in between the two vectors - the result should be. If a\nnegative value is given the interpolation will not take the complement of the\nshortest path.\n\n"}, {"name": "math.Vector3.update", "path": "ref/math#pygame.math.Vector3.update", "type": "pygame.math", "text": "\nSets coordinates x, y, and z in place.\n\nNew in pygame 1.9.5.\n\n"}, {"name": "midi", "path": "ref/midi", "type": "pygame.midi", "text": "\nNew in pygame 1.9.0.\n\nThe midi module can send output to midi devices and get input from midi\ndevices. It can also list midi devices on the system.\n\nThe midi module supports real and virtual midi devices.\n\nIt uses the portmidi library. Is portable to which ever platforms portmidi\nsupports (currently Windows, Mac OS X, and Linux).\n\nThis uses pyportmidi for now, but may use its own bindings at some point in\nthe future. The pyportmidi bindings are included with pygame.\n\nNew in pygame 2.0.0.\n\nThese are pygame events (`pygame.event`) reserved for midi use. The `MIDIIN`\nevent is used by `pygame.midi.midis2events()` when converting midi events to\npygame events.\n\nInitializes the `pygame.midi` module. Must be called before using the\n`pygame.midi` module.\n\nIt is safe to call this more than once.\n\nUninitializes the `pygame.midi` module. If `pygame.midi.init()` was called to\ninitialize the `pygame.midi` module, then this function will be called\nautomatically when your program exits.\n\nIt is safe to call this function more than once.\n\nGets the initialization state of the `pygame.midi` module.\n\nNew in pygame 1.9.5.\n\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\nUsed to indicate if any data exists.\n\nReads from the input buffer and gives back midi events.\n\nThe `buffer_size` specifies the number of output events to be buffered waiting\nfor output. In some cases (see below) PortMidi does not buffer output at all\nand merely passes data to a lower-level API, in which case buffersize is\nignored.\n\n`latency` is the delay in milliseconds applied to timestamps to determine when\nthe output should actually occur. If `latency` is <<0, 0 is assumed.\n\nIf `latency` is zero, timestamps are ignored and all output is delivered\nimmediately. If `latency` is greater than zero, output is delayed until the\nmessage timestamp plus the `latency`. In some cases, PortMidi can obtain\nbetter timing than your application by passing timestamps along to the device\ndriver or hardware. Latency may also help you to synchronize midi data to\naudio data by matching midi latency to the audio buffer latency.\n\nNote\n\nTime is measured relative to the time source indicated by time_proc.\nTimestamps are absolute, not relative delays or offsets.\n\nThe caller should immediately close the output port; this call may result in\ntransmission of a partial midi message. There is no abort for Midi input\nbecause the user can simply ignore messages in the buffer and close an input\ndevice at any time.\n\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\nTurn a note off in the output stream. The note must already be on for this to\nwork correctly.\n\nTurn a note on in the output stream. The note must already be off for this to\nwork correctly.\n\nSelect an instrument.\n\nAdjust the pitch of a channel. The value is a signed integer from -8192 to\n+8191. For example, 0 means \"no change\", +4096 is typically a semitone higher,\nand -8192 is 1 whole tone lower (though the musical range corresponding to the\npitch bend range can also be changed in some synthesizers).\n\nIf no value is given, the pitch bend is returned to \"no change\".\n\nNew in pygame 1.9.4.\n\nWrites series of MIDI information in the form of a list.\n\nExample:\n\nNote\n\nOutput MIDI information of 3 bytes or less. The `data` fields are optional and\nassumed to be 0 if omitted.\n\nExamples of status byte values:\n\nExample:\n\nWrites a timestamped system-exclusive midi message.\n\nExample:\n\nDevice ids range from 0 to `get_count() - 1`\n\nThe following describes the usage details for this function and the\n`get_default_output_id()` function.\n\nReturn the default device ID or `-1` if there are no devices. The result can\nbe passed to the `Input`/`Output` class.\n\nOn a PC the user can specify a default device by setting an environment\nvariable. To use device #1, for example:\n\nThe user should first determine the available device ID by using the supplied\napplication \"testin\" or \"testout\".\n\nIn general, the registry is a better place for this kind of info. With USB\ndevices that can come and go, using integers is not very reliable for device\nidentification. Under Windows, if `PM_RECOMMENDED_INPUT_DEVICE` (or\n`PM_RECOMMENDED_OUTPUT_DEVICE`) is NOT found in the environment, then the\ndefault device is obtained by looking for a string in the registry under:\n\nThe number of the first device with a substring that matches the string\nexactly is returned. For example, if the string in the registry is \"USB\" and\ndevice 1 is named \"In USB MidiSport 1x1\", then that will be the default input\nbecause it contains the string \"USB\".\n\nIn addition to the name, `get_device_info()` returns \"interf\", which is the\ninterface name. The \"interface\" is the underlying software system or API used\nby PortMidi to access devices. Supported interfaces:\n\nTo specify both the interface and the device name in the registry, separate\nthe two with a comma and a space. The string before the comma must be a\nsubstring of the \"interf\" string and the string after the space must be a\nsubstring of the \"name\" name string in order to match the device. e.g.:\n\nNote\n\nIn the current release, the default is simply the first device (the input or\noutput device with the lowest PmDeviceID).\n\nSee `get_default_input_id()` for usage details.\n\nGets the device info for a given id.\n\nTakes a sequence of midi events and returns list of pygame events.\n\nThe `midi_events` data is expected to be a sequence of `((status, data1,\ndata2, data3), timestamp)` midi events (all values required).\n\nThe time is reset to 0 when the `pygame.midi` module is initialized.\n\nexample:\n\nNew in pygame 1.9.5.\n\nexample:\n\nNew in pygame 1.9.5.\n\nexample:\n\nNew in pygame 1.9.5.\n\n"}, {"name": "midi.frequency_to_midi", "path": "ref/midi#pygame.midi.frequency_to_midi", "type": "pygame.midi", "text": "\nexample:\n\nNew in pygame 1.9.5.\n\n"}, {"name": "midi.get_count", "path": "ref/midi#pygame.midi.get_count", "type": "pygame.midi", "text": "\nDevice ids range from 0 to `get_count() - 1`\n\n"}, {"name": "midi.get_default_input_id", "path": "ref/midi#pygame.midi.get_default_input_id", "type": "pygame.midi", "text": "\nThe following describes the usage details for this function and the\n`get_default_output_id()` function.\n\nReturn the default device ID or `-1` if there are no devices. The result can\nbe passed to the `Input`/`Output` class.\n\nOn a PC the user can specify a default device by setting an environment\nvariable. To use device #1, for example:\n\nThe user should first determine the available device ID by using the supplied\napplication \"testin\" or \"testout\".\n\nIn general, the registry is a better place for this kind of info. With USB\ndevices that can come and go, using integers is not very reliable for device\nidentification. Under Windows, if `PM_RECOMMENDED_INPUT_DEVICE` (or\n`PM_RECOMMENDED_OUTPUT_DEVICE`) is NOT found in the environment, then the\ndefault device is obtained by looking for a string in the registry under:\n\nThe number of the first device with a substring that matches the string\nexactly is returned. For example, if the string in the registry is \"USB\" and\ndevice 1 is named \"In USB MidiSport 1x1\", then that will be the default input\nbecause it contains the string \"USB\".\n\nIn addition to the name, `get_device_info()` returns \"interf\", which is the\ninterface name. The \"interface\" is the underlying software system or API used\nby PortMidi to access devices. Supported interfaces:\n\nTo specify both the interface and the device name in the registry, separate\nthe two with a comma and a space. The string before the comma must be a\nsubstring of the \"interf\" string and the string after the space must be a\nsubstring of the \"name\" name string in order to match the device. e.g.:\n\nNote\n\nIn the current release, the default is simply the first device (the input or\noutput device with the lowest PmDeviceID).\n\n"}, {"name": "midi.get_default_output_id", "path": "ref/midi#pygame.midi.get_default_output_id", "type": "pygame.midi", "text": "\nSee `get_default_input_id()` for usage details.\n\n"}, {"name": "midi.get_device_info", "path": "ref/midi#pygame.midi.get_device_info", "type": "pygame.midi", "text": "\nGets the device info for a given id.\n\n"}, {"name": "midi.get_init", "path": "ref/midi#pygame.midi.get_init", "type": "pygame.midi", "text": "\nGets the initialization state of the `pygame.midi` module.\n\nNew in pygame 1.9.5.\n\n"}, {"name": "midi.init", "path": "ref/midi#pygame.midi.init", "type": "pygame.midi", "text": "\nInitializes the `pygame.midi` module. Must be called before using the\n`pygame.midi` module.\n\nIt is safe to call this more than once.\n\n"}, {"name": "midi.Input", "path": "ref/midi#pygame.midi.Input", "type": "pygame.midi", "text": "\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\nUsed to indicate if any data exists.\n\nReads from the input buffer and gives back midi events.\n\n"}, {"name": "midi.Input.close", "path": "ref/midi#pygame.midi.Input.close", "type": "pygame.midi", "text": "\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\n"}, {"name": "midi.Input.poll", "path": "ref/midi#pygame.midi.Input.poll", "type": "pygame.midi", "text": "\nUsed to indicate if any data exists.\n\n"}, {"name": "midi.Input.read", "path": "ref/midi#pygame.midi.Input.read", "type": "pygame.midi", "text": "\nReads from the input buffer and gives back midi events.\n\n"}, {"name": "midi.midi_to_ansi_note", "path": "ref/midi#pygame.midi.midi_to_ansi_note", "type": "pygame.midi", "text": "\nexample:\n\nNew in pygame 1.9.5.\n\n"}, {"name": "midi.midi_to_frequency", "path": "ref/midi#pygame.midi.midi_to_frequency", "type": "pygame.midi", "text": "\nexample:\n\nNew in pygame 1.9.5.\n\n"}, {"name": "midi.MidiException", "path": "ref/midi#pygame.midi.MidiException", "type": "pygame.midi", "text": "\n\n"}, {"name": "midi.midis2events", "path": "ref/midi#pygame.midi.midis2events", "type": "pygame.midi", "text": "\nTakes a sequence of midi events and returns list of pygame events.\n\nThe `midi_events` data is expected to be a sequence of `((status, data1,\ndata2, data3), timestamp)` midi events (all values required).\n\n"}, {"name": "midi.Output", "path": "ref/midi#pygame.midi.Output", "type": "pygame.midi", "text": "\nThe `buffer_size` specifies the number of output events to be buffered waiting\nfor output. In some cases (see below) PortMidi does not buffer output at all\nand merely passes data to a lower-level API, in which case buffersize is\nignored.\n\n`latency` is the delay in milliseconds applied to timestamps to determine when\nthe output should actually occur. If `latency` is <<0, 0 is assumed.\n\nIf `latency` is zero, timestamps are ignored and all output is delivered\nimmediately. If `latency` is greater than zero, output is delayed until the\nmessage timestamp plus the `latency`. In some cases, PortMidi can obtain\nbetter timing than your application by passing timestamps along to the device\ndriver or hardware. Latency may also help you to synchronize midi data to\naudio data by matching midi latency to the audio buffer latency.\n\nNote\n\nTime is measured relative to the time source indicated by time_proc.\nTimestamps are absolute, not relative delays or offsets.\n\nThe caller should immediately close the output port; this call may result in\ntransmission of a partial midi message. There is no abort for Midi input\nbecause the user can simply ignore messages in the buffer and close an input\ndevice at any time.\n\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\nTurn a note off in the output stream. The note must already be on for this to\nwork correctly.\n\nTurn a note on in the output stream. The note must already be off for this to\nwork correctly.\n\nSelect an instrument.\n\nAdjust the pitch of a channel. The value is a signed integer from -8192 to\n+8191. For example, 0 means \"no change\", +4096 is typically a semitone higher,\nand -8192 is 1 whole tone lower (though the musical range corresponding to the\npitch bend range can also be changed in some synthesizers).\n\nIf no value is given, the pitch bend is returned to \"no change\".\n\nNew in pygame 1.9.4.\n\nWrites series of MIDI information in the form of a list.\n\nExample:\n\nNote\n\nOutput MIDI information of 3 bytes or less. The `data` fields are optional and\nassumed to be 0 if omitted.\n\nExamples of status byte values:\n\nExample:\n\nWrites a timestamped system-exclusive midi message.\n\nExample:\n\n"}, {"name": "midi.Output.abort", "path": "ref/midi#pygame.midi.Output.abort", "type": "pygame.midi", "text": "\nThe caller should immediately close the output port; this call may result in\ntransmission of a partial midi message. There is no abort for Midi input\nbecause the user can simply ignore messages in the buffer and close an input\ndevice at any time.\n\n"}, {"name": "midi.Output.close", "path": "ref/midi#pygame.midi.Output.close", "type": "pygame.midi", "text": "\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\n"}, {"name": "midi.Output.note_off", "path": "ref/midi#pygame.midi.Output.note_off", "type": "pygame.midi", "text": "\nTurn a note off in the output stream. The note must already be on for this to\nwork correctly.\n\n"}, {"name": "midi.Output.note_on", "path": "ref/midi#pygame.midi.Output.note_on", "type": "pygame.midi", "text": "\nTurn a note on in the output stream. The note must already be off for this to\nwork correctly.\n\n"}, {"name": "midi.Output.pitch_bend", "path": "ref/midi#pygame.midi.Output.pitch_bend", "type": "pygame.midi", "text": "\nAdjust the pitch of a channel. The value is a signed integer from -8192 to\n+8191. For example, 0 means \"no change\", +4096 is typically a semitone higher,\nand -8192 is 1 whole tone lower (though the musical range corresponding to the\npitch bend range can also be changed in some synthesizers).\n\nIf no value is given, the pitch bend is returned to \"no change\".\n\nNew in pygame 1.9.4.\n\n"}, {"name": "midi.Output.set_instrument", "path": "ref/midi#pygame.midi.Output.set_instrument", "type": "pygame.midi", "text": "\nSelect an instrument.\n\n"}, {"name": "midi.Output.write", "path": "ref/midi#pygame.midi.Output.write", "type": "pygame.midi", "text": "\nWrites series of MIDI information in the form of a list.\n\nExample:\n\nNote\n\n"}, {"name": "midi.Output.write_short", "path": "ref/midi#pygame.midi.Output.write_short", "type": "pygame.midi", "text": "\nOutput MIDI information of 3 bytes or less. The `data` fields are optional and\nassumed to be 0 if omitted.\n\nExamples of status byte values:\n\nExample:\n\n"}, {"name": "midi.Output.write_sys_ex", "path": "ref/midi#pygame.midi.Output.write_sys_ex", "type": "pygame.midi", "text": "\nWrites a timestamped system-exclusive midi message.\n\nExample:\n\n"}, {"name": "midi.quit", "path": "ref/midi#pygame.midi.quit", "type": "pygame.midi", "text": "\nUninitializes the `pygame.midi` module. If `pygame.midi.init()` was called to\ninitialize the `pygame.midi` module, then this function will be called\nautomatically when your program exits.\n\nIt is safe to call this function more than once.\n\n"}, {"name": "midi.time", "path": "ref/midi#pygame.midi.time", "type": "pygame.midi", "text": "\nThe time is reset to 0 when the `pygame.midi` module is initialized.\n\n"}, {"name": "mixer", "path": "ref/mixer", "type": "pygame.mixer", "text": "\nThis module contains classes for loading Sound objects and controlling\nplayback. The mixer module is optional and depends on SDL_mixer. Your program\nshould test that `pygame.mixer` is available and initialized before using it.\n\nThe mixer module has a limited number of channels for playback of sounds.\nUsually programs tell pygame to start playing audio and it selects an\navailable channel automatically. The default is 8 simultaneous channels, but\ncomplex programs can get more precise control over the number of channels and\ntheir use.\n\nAll sound playback is mixed in background threads. When you begin to play a\nSound object, it will return immediately while the sound continues to play. A\nsingle Sound object can also be actively played back multiple times.\n\nThe mixer also has a special streaming channel. This is for music playback and\nis accessed through the `pygame.mixer.music` module.\n\nThe mixer module must be initialized like other pygame modules, but it has\nsome extra conditions. The `pygame.mixer.init()` function takes several\noptional arguments to control the playback rate and sample size. Pygame will\ndefault to reasonable values, but pygame cannot perform Sound resampling, so\nthe mixer should be initialized to match the values of your audio resources.\n\n`NOTE`: For less laggy sound use a smaller buffer size. The default is set to\nreduce the chance of scratchy sounds on some computers. You can change the\ndefault buffer by calling `pygame.mixer.pre_init()` before\n`pygame.mixer.init()` or `pygame.init()` is called. For example:\n`pygame.mixer.pre_init(44100,-16,2, 1024)`\n\nInitialize the mixer module for Sound loading and playback. The default\narguments can be overridden to provide specific audio mixing. Keyword\narguments are accepted. For backward compatibility where an argument is set\nzero the default value is used (possible changed by a pre_init call).\n\nThe size argument represents how many bits are used for each audio sample. If\nthe value is negative then signed sample values will be used. Positive values\nmean unsigned audio samples will be used. An invalid value raises an\nexception.\n\nThe channels argument is used to specify whether to use mono or stereo. 1 for\nmono and 2 for stereo.\n\nThe buffer argument controls the number of internal samples used in the sound\nmixer. The default value should work for most cases. It can be lowered to\nreduce latency, but sound dropout may occur. It can be raised to larger values\nto ensure playback never skips, but it will impose latency on sound playback.\nThe buffer size must be a power of two (if not it is rounded up to the next\nnearest power of 2).\n\nSome platforms require the `pygame.mixer` module to be initialized after the\ndisplay modules have initialized. The top level `pygame.init()` takes care of\nthis automatically, but cannot pass any arguments to the mixer init. To solve\nthis, mixer has a function `pygame.mixer.pre_init()` to set the proper\ndefaults before the toplevel init is used.\n\nWhen using allowedchanges=0 it will convert the samples at runtime to match\nwhat the hardware supports. For example a sound card may not support 16bit\nsound samples, so instead it will use 8bit samples internally. If\nAUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will change\nto the closest that SDL2 supports.\n\nApart from 0, allowedchanged accepts the following constants ORed together:\n\nIt is safe to call this more than once, but after the mixer is initialized you\ncannot change the playback arguments without first calling\n`pygame.mixer.quit()`.\n\nChanged in pygame 1.8: The default `buffersize` was changed from 1024 to 3072.\n\nChanged in pygame 1.9.1: The default `buffersize` was changed from 3072 to\n4096.\n\nChanged in pygame 2.0.0: The default `buffersize` was changed from 4096 to\n512. The default frequency changed to 44100 from 22050.\n\nChanged in pygame 2.0.0: `size` can be 32 (32bit floats).\n\nChanged in pygame 2.0.0: `channels` can also be 4 or 6.\n\nNew in pygame 2.0.0: `allowedchanges` argument added\n\nCall pre_init to change the defaults used when the real `pygame.mixer.init()`\nis called. Keyword arguments are accepted. The best way to set custom mixer\nplayback values is to call `pygame.mixer.pre_init()` before calling the top\nlevel `pygame.init()`. For backward compatibility argument values of zero are\nreplaced with the startup defaults.\n\nChanged in pygame 1.8: The default `buffersize` was changed from 1024 to 3072.\n\nChanged in pygame 1.9.1: The default `buffersize` was changed from 3072 to\n4096.\n\nChanged in pygame 2.0.0: The default `buffersize` was changed from 4096 to\n512. The default frequency changed to 44100 from 22050.\n\nThis will uninitialize `pygame.mixer`. All playback will stop and any loaded\nSound objects may not be compatible with the mixer if it is reinitialized\nlater.\n\nIf the mixer is initialized, this returns the playback arguments it is using.\nIf the mixer has not been initialized this returns `None`.\n\nThis will stop all playback of all active mixer channels.\n\nThis will temporarily stop all playback on the active mixer channels. The\nplayback can later be resumed with `pygame.mixer.unpause()`\n\nThis will resume all active sound channels after they have been paused.\n\nThis will fade out the volume on all active channels over the time argument in\nmilliseconds. After the sound is muted the playback will stop.\n\nSets the number of available channels for the mixer. The default value is 8.\nThe value can be increased or decreased. If the value is decreased, sounds\nplaying on the truncated channels are stopped.\n\nReturns the number of currently active playback channels.\n\nThe mixer can reserve any number of channels that will not be automatically\nselected for playback by Sounds. If sounds are currently playing on the\nreserved channels they will not be stopped.\n\nThis allows the application to reserve a specific number of channels for\nimportant sounds that must not be dropped or have a guaranteed channel to play\non.\n\nThis will find and return an inactive Channel object. If there are no inactive\nChannels this function will return `None`. If there are no inactive channels\nand the force argument is `True`, this will find the Channel with the longest\nrunning Sound and return it.\n\nIf the mixer has reserved channels from `pygame.mixer.set_reserved()` then\nthose channels will not be returned here.\n\nReturns `True` if the mixer is busy mixing any channels. If the mixer is idle\nthen this return `False`.\n\nNote\n\nThe linked and compile version numbers should be the same.\n\nNew in pygame 2.0.0.\n\nLoad a new sound buffer from a filename, a python file object or a readable\nbuffer object. Limited resampling will be performed to help the sample match\nthe initialize arguments for the mixer. A Unicode string can only be a file\npathname. A Python 2.x string or a Python 3.x bytes object can be either a\npathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid\nambiguity; otherwise Sound may guess wrong. If the array keyword is used, the\nobject is expected to export a version 3, `C` level array interface or, for\nPython 2.6 or later, a new buffer interface (The object is checked for a\nbuffer interface first.)\n\nThe Sound object represents actual sound sample data. Methods that change the\nstate of the Sound object will the all instances of the Sound playback. A\nSound object also exports an array interface, and, for Python 2.6 or later, a\nnew buffer interface.\n\nThe Sound can be loaded from an `OGG` audio file or from an uncompressed\n`WAV`.\n\nNote: The buffer will be copied internally, no data will be shared between it\nand the Sound object.\n\nFor now buffer and array support is consistent with `sndarray.make_sound` for\nNumeric arrays, in that sample sign and byte order are ignored. This will\nchange, either by correctly handling sign and byte order, or by raising an\nexception when different. Also, source samples are truncated to fit the audio\nsample size. This will not change.\n\nNew in pygame 1.8: `pygame.mixer.Sound(buffer)`\n\nNew in pygame 1.9.2: `pygame.mixer.Sound` keyword arguments and array\ninterface support\n\nBegin playback of the Sound (i.e., on the computer's speakers) on an available\nChannel. This will forcibly select a Channel, so playback may cut off a\ncurrently playing sound if necessary.\n\nThe loops argument controls how many times the sample will be repeated after\nbeing played the first time. A value of 5 means that the sound will be played\nonce, then repeated five times, and so is played a total of six times. The\ndefault value (zero) means the Sound is not repeated, and so is only played\nonce. If loops is set to -1 the Sound will loop indefinitely (though you can\nstill call `stop()` to stop it).\n\nThe maxtime argument can be used to stop playback after a given number of\nmilliseconds.\n\nThe fade_ms argument will make the sound start playing at 0 volume and fade up\nto full volume over the time given. The sample may end before the fade-in is\ncomplete.\n\nThis returns the Channel object for the channel that was selected.\n\nThis will stop the playback of this Sound on any active Channels.\n\nThis will stop playback of the sound after fading it out over the time\nargument in milliseconds. The Sound will fade and stop on all actively playing\nchannels.\n\nThis will set the playback volume (loudness) for this Sound. This will\nimmediately affect the Sound if it is playing. It will also affect any future\nplayback of this Sound.\n\nvolume in the range of 0.0 to 1.0 (inclusive)\n\nReturn a value from 0.0 to 1.0 representing the volume for this Sound.\n\nReturn the number of active channels this sound is playing on.\n\nReturn the length of this Sound in seconds.\n\nReturn a copy of the Sound object buffer as a bytes (for Python 3.x) or str\n(for Python 2.x) object.\n\nNew in pygame 1.9.2.\n\nReturn a Channel object for one of the current channels. The id must be a\nvalue from 0 to the value of `pygame.mixer.get_num_channels()`.\n\nThe Channel object can be used to get fine control over the playback of\nSounds. A channel can only playback a single Sound at time. Using channels is\nentirely optional since pygame can manage them by default.\n\nThis will begin playback of a Sound on a specific Channel. If the Channel is\ncurrently playing any other Sound it will be stopped.\n\nThe loops argument has the same meaning as in `Sound.play()`: it is the number\nof times to repeat the sound after the first time. If it is 3, the sound will\nbe played 4 times (the first time, then three more). If loops is -1 then the\nplayback will repeat indefinitely.\n\nAs in `Sound.play()`, the maxtime argument can be used to stop playback of the\nSound after a given number of milliseconds.\n\nAs in `Sound.play()`, the fade_ms argument can be used fade in the sound.\n\nStop sound playback on a channel. After playback is stopped the channel\nbecomes available for new Sounds to play on it.\n\nTemporarily stop the playback of sound on a channel. It can be resumed at a\nlater time with `Channel.unpause()`\n\nResume the playback on a paused channel.\n\nStop playback of a channel after fading out the sound over the given time\nargument in milliseconds.\n\nSet the volume (loudness) of a playing sound. When a channel starts to play\nits volume value is reset. This only affects the current sound. The value\nargument is between 0.0 and 1.0.\n\nIf one argument is passed, it will be the volume of both speakers. If two\narguments are passed and the mixer is in stereo mode, the first argument will\nbe the volume of the left speaker and the second will be the volume of the\nright speaker. (If the second argument is `None`, the first argument will be\nthe volume of both speakers.)\n\nIf the channel is playing a Sound on which `set_volume()` has also been\ncalled, both calls are taken into account. For example:\n\nReturn the volume of the channel for the current playing sound. This does not\ntake into account stereo separation used by `Channel.set_volume()`. The Sound\nobject also has its own volume which is mixed with the channel.\n\nReturns `True` if the channel is actively mixing sound. If the channel is idle\nthis returns `False`.\n\nReturn the actual Sound object currently playing on this channel. If the\nchannel is idle `None` is returned.\n\nWhen a Sound is queued on a Channel, it will begin playing immediately after\nthe current Sound is finished. Each channel can only have a single Sound\nqueued at a time. The queued Sound will only play if the current playback\nfinished automatically. It is cleared on any other call to `Channel.stop()` or\n`Channel.play()`.\n\nIf there is no sound actively playing on the Channel then the Sound will begin\nplaying immediately.\n\nIf a Sound is already queued on this channel it will be returned. Once the\nqueued sound begins playback it will no longer be on the queue.\n\nWhen an endevent is set for a channel, it will send an event to the pygame\nqueue every time a sound finishes playing on that channel (not just the first\ntime). Use `pygame.event.get()` to retrieve the endevent once it's sent.\n\nNote that if you called `Sound.play(n)` or `Channel.play(sound,n)`, the end\nevent is sent only once: after the sound has been played \"n+1\" times (see the\ndocumentation of Sound.play).\n\nIf `Channel.stop()` or `Channel.play()` is called while the sound was still\nplaying, the event will be posted immediately.\n\nThe type argument will be the event id sent to the queue. This can be any\nvalid event type, but a good choice would be a value between\n`pygame.locals.USEREVENT` and `pygame.locals.NUMEVENTS`. If no type argument\nis given then the Channel will stop sending endevents.\n\nReturns the event type to be sent every time the Channel finishes playback of\na Sound. If there is no endevent the function returns `pygame.NOEVENT`.\n\n"}, {"name": "mixer.Channel", "path": "ref/mixer#pygame.mixer.Channel", "type": "pygame.mixer", "text": "\nReturn a Channel object for one of the current channels. The id must be a\nvalue from 0 to the value of `pygame.mixer.get_num_channels()`.\n\nThe Channel object can be used to get fine control over the playback of\nSounds. A channel can only playback a single Sound at time. Using channels is\nentirely optional since pygame can manage them by default.\n\nThis will begin playback of a Sound on a specific Channel. If the Channel is\ncurrently playing any other Sound it will be stopped.\n\nThe loops argument has the same meaning as in `Sound.play()`: it is the number\nof times to repeat the sound after the first time. If it is 3, the sound will\nbe played 4 times (the first time, then three more). If loops is -1 then the\nplayback will repeat indefinitely.\n\nAs in `Sound.play()`, the maxtime argument can be used to stop playback of the\nSound after a given number of milliseconds.\n\nAs in `Sound.play()`, the fade_ms argument can be used fade in the sound.\n\nStop sound playback on a channel. After playback is stopped the channel\nbecomes available for new Sounds to play on it.\n\nTemporarily stop the playback of sound on a channel. It can be resumed at a\nlater time with `Channel.unpause()`\n\nResume the playback on a paused channel.\n\nStop playback of a channel after fading out the sound over the given time\nargument in milliseconds.\n\nSet the volume (loudness) of a playing sound. When a channel starts to play\nits volume value is reset. This only affects the current sound. The value\nargument is between 0.0 and 1.0.\n\nIf one argument is passed, it will be the volume of both speakers. If two\narguments are passed and the mixer is in stereo mode, the first argument will\nbe the volume of the left speaker and the second will be the volume of the\nright speaker. (If the second argument is `None`, the first argument will be\nthe volume of both speakers.)\n\nIf the channel is playing a Sound on which `set_volume()` has also been\ncalled, both calls are taken into account. For example:\n\nReturn the volume of the channel for the current playing sound. This does not\ntake into account stereo separation used by `Channel.set_volume()`. The Sound\nobject also has its own volume which is mixed with the channel.\n\nReturns `True` if the channel is actively mixing sound. If the channel is idle\nthis returns `False`.\n\nReturn the actual Sound object currently playing on this channel. If the\nchannel is idle `None` is returned.\n\nWhen a Sound is queued on a Channel, it will begin playing immediately after\nthe current Sound is finished. Each channel can only have a single Sound\nqueued at a time. The queued Sound will only play if the current playback\nfinished automatically. It is cleared on any other call to `Channel.stop()` or\n`Channel.play()`.\n\nIf there is no sound actively playing on the Channel then the Sound will begin\nplaying immediately.\n\nIf a Sound is already queued on this channel it will be returned. Once the\nqueued sound begins playback it will no longer be on the queue.\n\nWhen an endevent is set for a channel, it will send an event to the pygame\nqueue every time a sound finishes playing on that channel (not just the first\ntime). Use `pygame.event.get()` to retrieve the endevent once it's sent.\n\nNote that if you called `Sound.play(n)` or `Channel.play(sound,n)`, the end\nevent is sent only once: after the sound has been played \"n+1\" times (see the\ndocumentation of Sound.play).\n\nIf `Channel.stop()` or `Channel.play()` is called while the sound was still\nplaying, the event will be posted immediately.\n\nThe type argument will be the event id sent to the queue. This can be any\nvalid event type, but a good choice would be a value between\n`pygame.locals.USEREVENT` and `pygame.locals.NUMEVENTS`. If no type argument\nis given then the Channel will stop sending endevents.\n\nReturns the event type to be sent every time the Channel finishes playback of\na Sound. If there is no endevent the function returns `pygame.NOEVENT`.\n\n"}, {"name": "mixer.Channel.fadeout", "path": "ref/mixer#pygame.mixer.Channel.fadeout", "type": "pygame.mixer", "text": "\nStop playback of a channel after fading out the sound over the given time\nargument in milliseconds.\n\n"}, {"name": "mixer.Channel.get_busy", "path": "ref/mixer#pygame.mixer.Channel.get_busy", "type": "pygame.mixer", "text": "\nReturns `True` if the channel is actively mixing sound. If the channel is idle\nthis returns `False`.\n\n"}, {"name": "mixer.Channel.get_endevent", "path": "ref/mixer#pygame.mixer.Channel.get_endevent", "type": "pygame.mixer", "text": "\nReturns the event type to be sent every time the Channel finishes playback of\na Sound. If there is no endevent the function returns `pygame.NOEVENT`.\n\n"}, {"name": "mixer.Channel.get_queue", "path": "ref/mixer#pygame.mixer.Channel.get_queue", "type": "pygame.mixer", "text": "\nIf a Sound is already queued on this channel it will be returned. Once the\nqueued sound begins playback it will no longer be on the queue.\n\n"}, {"name": "mixer.Channel.get_sound", "path": "ref/mixer#pygame.mixer.Channel.get_sound", "type": "pygame.mixer", "text": "\nReturn the actual Sound object currently playing on this channel. If the\nchannel is idle `None` is returned.\n\n"}, {"name": "mixer.Channel.get_volume", "path": "ref/mixer#pygame.mixer.Channel.get_volume", "type": "pygame.mixer", "text": "\nReturn the volume of the channel for the current playing sound. This does not\ntake into account stereo separation used by `Channel.set_volume()`. The Sound\nobject also has its own volume which is mixed with the channel.\n\n"}, {"name": "mixer.Channel.pause", "path": "ref/mixer#pygame.mixer.Channel.pause", "type": "pygame.mixer", "text": "\nTemporarily stop the playback of sound on a channel. It can be resumed at a\nlater time with `Channel.unpause()`\n\n"}, {"name": "mixer.Channel.play", "path": "ref/mixer#pygame.mixer.Channel.play", "type": "pygame.mixer", "text": "\nThis will begin playback of a Sound on a specific Channel. If the Channel is\ncurrently playing any other Sound it will be stopped.\n\nThe loops argument has the same meaning as in `Sound.play()`: it is the number\nof times to repeat the sound after the first time. If it is 3, the sound will\nbe played 4 times (the first time, then three more). If loops is -1 then the\nplayback will repeat indefinitely.\n\nAs in `Sound.play()`, the maxtime argument can be used to stop playback of the\nSound after a given number of milliseconds.\n\nAs in `Sound.play()`, the fade_ms argument can be used fade in the sound.\n\n"}, {"name": "mixer.Channel.queue", "path": "ref/mixer#pygame.mixer.Channel.queue", "type": "pygame.mixer", "text": "\nWhen a Sound is queued on a Channel, it will begin playing immediately after\nthe current Sound is finished. Each channel can only have a single Sound\nqueued at a time. The queued Sound will only play if the current playback\nfinished automatically. It is cleared on any other call to `Channel.stop()` or\n`Channel.play()`.\n\nIf there is no sound actively playing on the Channel then the Sound will begin\nplaying immediately.\n\n"}, {"name": "mixer.Channel.set_endevent", "path": "ref/mixer#pygame.mixer.Channel.set_endevent", "type": "pygame.mixer", "text": "\nWhen an endevent is set for a channel, it will send an event to the pygame\nqueue every time a sound finishes playing on that channel (not just the first\ntime). Use `pygame.event.get()` to retrieve the endevent once it's sent.\n\nNote that if you called `Sound.play(n)` or `Channel.play(sound,n)`, the end\nevent is sent only once: after the sound has been played \"n+1\" times (see the\ndocumentation of Sound.play).\n\nIf `Channel.stop()` or `Channel.play()` is called while the sound was still\nplaying, the event will be posted immediately.\n\nThe type argument will be the event id sent to the queue. This can be any\nvalid event type, but a good choice would be a value between\n`pygame.locals.USEREVENT` and `pygame.locals.NUMEVENTS`. If no type argument\nis given then the Channel will stop sending endevents.\n\n"}, {"name": "mixer.Channel.set_volume", "path": "ref/mixer#pygame.mixer.Channel.set_volume", "type": "pygame.mixer", "text": "\nSet the volume (loudness) of a playing sound. When a channel starts to play\nits volume value is reset. This only affects the current sound. The value\nargument is between 0.0 and 1.0.\n\nIf one argument is passed, it will be the volume of both speakers. If two\narguments are passed and the mixer is in stereo mode, the first argument will\nbe the volume of the left speaker and the second will be the volume of the\nright speaker. (If the second argument is `None`, the first argument will be\nthe volume of both speakers.)\n\nIf the channel is playing a Sound on which `set_volume()` has also been\ncalled, both calls are taken into account. For example:\n\n"}, {"name": "mixer.Channel.stop", "path": "ref/mixer#pygame.mixer.Channel.stop", "type": "pygame.mixer", "text": "\nStop sound playback on a channel. After playback is stopped the channel\nbecomes available for new Sounds to play on it.\n\n"}, {"name": "mixer.Channel.unpause", "path": "ref/mixer#pygame.mixer.Channel.unpause", "type": "pygame.mixer", "text": "\nResume the playback on a paused channel.\n\n"}, {"name": "mixer.fadeout", "path": "ref/mixer#pygame.mixer.fadeout", "type": "pygame.mixer", "text": "\nThis will fade out the volume on all active channels over the time argument in\nmilliseconds. After the sound is muted the playback will stop.\n\n"}, {"name": "mixer.find_channel", "path": "ref/mixer#pygame.mixer.find_channel", "type": "pygame.mixer", "text": "\nThis will find and return an inactive Channel object. If there are no inactive\nChannels this function will return `None`. If there are no inactive channels\nand the force argument is `True`, this will find the Channel with the longest\nrunning Sound and return it.\n\nIf the mixer has reserved channels from `pygame.mixer.set_reserved()` then\nthose channels will not be returned here.\n\n"}, {"name": "mixer.get_busy", "path": "ref/mixer#pygame.mixer.get_busy", "type": "pygame.mixer", "text": "\nReturns `True` if the mixer is busy mixing any channels. If the mixer is idle\nthen this return `False`.\n\n"}, {"name": "mixer.get_init", "path": "ref/mixer#pygame.mixer.get_init", "type": "pygame.mixer", "text": "\nIf the mixer is initialized, this returns the playback arguments it is using.\nIf the mixer has not been initialized this returns `None`.\n\n"}, {"name": "mixer.get_num_channels", "path": "ref/mixer#pygame.mixer.get_num_channels", "type": "pygame.mixer", "text": "\nReturns the number of currently active playback channels.\n\n"}, {"name": "mixer.get_sdl_mixer_version", "path": "ref/mixer#pygame.mixer.get_sdl_mixer_version", "type": "pygame.mixer", "text": "\nNote\n\nThe linked and compile version numbers should be the same.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "mixer.init", "path": "ref/mixer#pygame.mixer.init", "type": "pygame.mixer", "text": "\nInitialize the mixer module for Sound loading and playback. The default\narguments can be overridden to provide specific audio mixing. Keyword\narguments are accepted. For backward compatibility where an argument is set\nzero the default value is used (possible changed by a pre_init call).\n\nThe size argument represents how many bits are used for each audio sample. If\nthe value is negative then signed sample values will be used. Positive values\nmean unsigned audio samples will be used. An invalid value raises an\nexception.\n\nThe channels argument is used to specify whether to use mono or stereo. 1 for\nmono and 2 for stereo.\n\nThe buffer argument controls the number of internal samples used in the sound\nmixer. The default value should work for most cases. It can be lowered to\nreduce latency, but sound dropout may occur. It can be raised to larger values\nto ensure playback never skips, but it will impose latency on sound playback.\nThe buffer size must be a power of two (if not it is rounded up to the next\nnearest power of 2).\n\nSome platforms require the `pygame.mixer` module to be initialized after the\ndisplay modules have initialized. The top level `pygame.init()` takes care of\nthis automatically, but cannot pass any arguments to the mixer init. To solve\nthis, mixer has a function `pygame.mixer.pre_init()` to set the proper\ndefaults before the toplevel init is used.\n\nWhen using allowedchanges=0 it will convert the samples at runtime to match\nwhat the hardware supports. For example a sound card may not support 16bit\nsound samples, so instead it will use 8bit samples internally. If\nAUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will change\nto the closest that SDL2 supports.\n\nApart from 0, allowedchanged accepts the following constants ORed together:\n\nIt is safe to call this more than once, but after the mixer is initialized you\ncannot change the playback arguments without first calling\n`pygame.mixer.quit()`.\n\nChanged in pygame 1.8: The default `buffersize` was changed from 1024 to 3072.\n\nChanged in pygame 1.9.1: The default `buffersize` was changed from 3072 to\n4096.\n\nChanged in pygame 2.0.0: The default `buffersize` was changed from 4096 to\n512. The default frequency changed to 44100 from 22050.\n\nChanged in pygame 2.0.0: `size` can be 32 (32bit floats).\n\nChanged in pygame 2.0.0: `channels` can also be 4 or 6.\n\nNew in pygame 2.0.0: `allowedchanges` argument added\n\n"}, {"name": "mixer.music", "path": "ref/music", "type": "pygame.mixer.music", "text": "\nThe music module is closely tied to `pygame.mixer`. Use the music module to\ncontrol the playback of music in the sound mixer.\n\nThe difference between the music playback and regular Sound playback is that\nthe music is streamed, and never actually loaded all at once. The mixer system\nonly supports a single music stream at once.\n\nBe aware that `MP3` support is limited. On some systems an unsupported format\ncan crash the program, `e.g`. Debian Linux. Consider using `OGG` instead.\n\nThis will load a music filename/file object and prepare it for playback. If a\nmusic stream is already playing it will be stopped. This does not start the\nmusic playing.\n\nThis closes resources like files for any music that may be loaded.\n\nNew in pygame 2.0.0.\n\nThis will play the loaded music stream. If the music is already playing it\nwill be restarted.\n\n`loops` is an optional integer argument, which is `0` by default, it tells how\nmany times to repeat the music. The music repeats indefinately if this\nargument is set to `-1`.\n\n`start` is an optional float argument, which is `0.0` by default, which\ndenotes the position in time, the music starts playing from. The starting\nposition depends on the format of the music played. `MP3` and `OGG` use the\nposition as time in seconds. For mp3s the start time position selected may not\nbe accurate as things like variable bit rate encoding and ID3 tags can throw\noff the timing calculations. For `MOD` music it is the pattern order number.\nPassing a start position will raise a NotImplementedError if the start\nposition cannot be set.\n\n`fade_ms` is an optional integer argument, which is `0` by default, makes the\nmusic start playing at `0` volume and fade up to full volume over the given\ntime. The sample may end before the fade-in is complete.\n\nChanged in pygame 2.0.0: Added optional `fade_ms` argument\n\nResets playback of the current music to the beginning.\n\nStops the music playback if it is currently playing. It Won't Unload the\nmusic.\n\nTemporarily stop playback of the music stream. It can be resumed with the\n`pygame.mixer.music.unpause()` function.\n\nThis will resume the playback of a music stream after it has been paused.\n\nFade out and stop the currently playing music.\n\nThe `time` argument denotes the integer milliseconds for which the fading\neffect is generated.\n\nNote, that this function blocks until the music has faded out. Calls to\n`fadeout()` and `set_volume()` will have no effect during this time. If an\nevent was set using `set_endevent()` it will be called after the music has\nfaded.\n\nSet the volume of the music playback.\n\nThe `volume` argument is a float between `0.0` and `1.0` that sets volume.\nWhen new music is loaded the volume is reset to full volume.\n\nReturns the current volume for the mixer. The value will be between `0.0` and\n`1.0`.\n\nReturns True when the music stream is actively playing. When the music is idle\nthis returns False. In pygame 2.0.1 and above this function returns False when\nthe music is paused. In pygame 1 it returns True when the music is paused.\n\nChanged in pygame 2.0.1: Returns False when music paused.\n\nThis sets the position in the music file where playback will start. The\nmeaning of \"pos\", a float (or a number that can be converted to a float),\ndepends on the music format.\n\nFor `MOD` files, pos is the integer pattern number in the module. For `OGG` it\nis the absolute position, in seconds, from the beginning of the sound. For\n`MP3` files, it is the relative position, in seconds, from the current\nposition. For absolute positioning in an `MP3` file, first call `rewind()`.\n\nOther file formats are unsupported. Newer versions of SDL_mixer have better\npositioning support than earlier ones. An SDLError is raised if a particular\nformat does not support positioning.\n\nFunction `set_pos()` calls underlining SDL_mixer function\n`Mix_SetMusicPosition`.\n\nNew in pygame 1.9.2.\n\nThis gets the number of milliseconds that the music has been playing for. The\nreturned time only represents how long the music has been playing; it does not\ntake into account any starting position offsets.\n\nThis will load a sound file and queue it. A queued sound file will begin as\nsoon as the current sound naturally ends. Only one sound can be queued at a\ntime. Queuing a new sound while another sound is queued will result in the new\nsound becoming the queued sound. Also, if the current sound is ever stopped or\nchanged, the queued sound will be lost.\n\nThe following example will play music by Bach six times, then play music by\nMozart once:\n\nThis causes pygame to signal (by means of the event queue) when the music is\ndone playing. The argument determines the type of event that will be queued.\n\nThe event will be queued every time the music finishes, not just the first\ntime. To stop the event from being queued, call this method with no argument.\n\nReturns the event type to be sent every time the music finishes playback. If\nthere is no endevent the function returns `pygame.NOEVENT`.\n\n"}, {"name": "mixer.music.fadeout", "path": "ref/music#pygame.mixer.music.fadeout", "type": "pygame.mixer.music", "text": "\nFade out and stop the currently playing music.\n\nThe `time` argument denotes the integer milliseconds for which the fading\neffect is generated.\n\nNote, that this function blocks until the music has faded out. Calls to\n`fadeout()` and `set_volume()` will have no effect during this time. If an\nevent was set using `set_endevent()` it will be called after the music has\nfaded.\n\n"}, {"name": "mixer.music.get_busy", "path": "ref/music#pygame.mixer.music.get_busy", "type": "pygame.mixer.music", "text": "\nReturns True when the music stream is actively playing. When the music is idle\nthis returns False. In pygame 2.0.1 and above this function returns False when\nthe music is paused. In pygame 1 it returns True when the music is paused.\n\nChanged in pygame 2.0.1: Returns False when music paused.\n\n"}, {"name": "mixer.music.get_endevent", "path": "ref/music#pygame.mixer.music.get_endevent", "type": "pygame.mixer.music", "text": "\nReturns the event type to be sent every time the music finishes playback. If\nthere is no endevent the function returns `pygame.NOEVENT`.\n\n"}, {"name": "mixer.music.get_pos", "path": "ref/music#pygame.mixer.music.get_pos", "type": "pygame.mixer.music", "text": "\nThis gets the number of milliseconds that the music has been playing for. The\nreturned time only represents how long the music has been playing; it does not\ntake into account any starting position offsets.\n\n"}, {"name": "mixer.music.get_volume", "path": "ref/music#pygame.mixer.music.get_volume", "type": "pygame.mixer.music", "text": "\nReturns the current volume for the mixer. The value will be between `0.0` and\n`1.0`.\n\n"}, {"name": "mixer.music.load", "path": "ref/music#pygame.mixer.music.load", "type": "pygame.mixer.music", "text": "\nThis will load a music filename/file object and prepare it for playback. If a\nmusic stream is already playing it will be stopped. This does not start the\nmusic playing.\n\n"}, {"name": "mixer.music.pause", "path": "ref/music#pygame.mixer.music.pause", "type": "pygame.mixer.music", "text": "\nTemporarily stop playback of the music stream. It can be resumed with the\n`pygame.mixer.music.unpause()` function.\n\n"}, {"name": "mixer.music.play", "path": "ref/music#pygame.mixer.music.play", "type": "pygame.mixer.music", "text": "\nThis will play the loaded music stream. If the music is already playing it\nwill be restarted.\n\n`loops` is an optional integer argument, which is `0` by default, it tells how\nmany times to repeat the music. The music repeats indefinately if this\nargument is set to `-1`.\n\n`start` is an optional float argument, which is `0.0` by default, which\ndenotes the position in time, the music starts playing from. The starting\nposition depends on the format of the music played. `MP3` and `OGG` use the\nposition as time in seconds. For mp3s the start time position selected may not\nbe accurate as things like variable bit rate encoding and ID3 tags can throw\noff the timing calculations. For `MOD` music it is the pattern order number.\nPassing a start position will raise a NotImplementedError if the start\nposition cannot be set.\n\n`fade_ms` is an optional integer argument, which is `0` by default, makes the\nmusic start playing at `0` volume and fade up to full volume over the given\ntime. The sample may end before the fade-in is complete.\n\nChanged in pygame 2.0.0: Added optional `fade_ms` argument\n\n"}, {"name": "mixer.music.queue", "path": "ref/music#pygame.mixer.music.queue", "type": "pygame.mixer.music", "text": "\nThis will load a sound file and queue it. A queued sound file will begin as\nsoon as the current sound naturally ends. Only one sound can be queued at a\ntime. Queuing a new sound while another sound is queued will result in the new\nsound becoming the queued sound. Also, if the current sound is ever stopped or\nchanged, the queued sound will be lost.\n\nThe following example will play music by Bach six times, then play music by\nMozart once:\n\n"}, {"name": "mixer.music.rewind", "path": "ref/music#pygame.mixer.music.rewind", "type": "pygame.mixer.music", "text": "\nResets playback of the current music to the beginning.\n\n"}, {"name": "mixer.music.set_endevent", "path": "ref/music#pygame.mixer.music.set_endevent", "type": "pygame.mixer.music", "text": "\nThis causes pygame to signal (by means of the event queue) when the music is\ndone playing. The argument determines the type of event that will be queued.\n\nThe event will be queued every time the music finishes, not just the first\ntime. To stop the event from being queued, call this method with no argument.\n\n"}, {"name": "mixer.music.set_pos", "path": "ref/music#pygame.mixer.music.set_pos", "type": "pygame.mixer.music", "text": "\nThis sets the position in the music file where playback will start. The\nmeaning of \"pos\", a float (or a number that can be converted to a float),\ndepends on the music format.\n\nFor `MOD` files, pos is the integer pattern number in the module. For `OGG` it\nis the absolute position, in seconds, from the beginning of the sound. For\n`MP3` files, it is the relative position, in seconds, from the current\nposition. For absolute positioning in an `MP3` file, first call `rewind()`.\n\nOther file formats are unsupported. Newer versions of SDL_mixer have better\npositioning support than earlier ones. An SDLError is raised if a particular\nformat does not support positioning.\n\nFunction `set_pos()` calls underlining SDL_mixer function\n`Mix_SetMusicPosition`.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "mixer.music.set_volume", "path": "ref/music#pygame.mixer.music.set_volume", "type": "pygame.mixer.music", "text": "\nSet the volume of the music playback.\n\nThe `volume` argument is a float between `0.0` and `1.0` that sets volume.\nWhen new music is loaded the volume is reset to full volume.\n\n"}, {"name": "mixer.music.stop", "path": "ref/music#pygame.mixer.music.stop", "type": "pygame.mixer.music", "text": "\nStops the music playback if it is currently playing. It Won't Unload the\nmusic.\n\n"}, {"name": "mixer.music.unload", "path": "ref/music#pygame.mixer.music.unload", "type": "pygame.mixer.music", "text": "\nThis closes resources like files for any music that may be loaded.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "mixer.music.unpause", "path": "ref/music#pygame.mixer.music.unpause", "type": "pygame.mixer.music", "text": "\nThis will resume the playback of a music stream after it has been paused.\n\n"}, {"name": "mixer.pause", "path": "ref/mixer#pygame.mixer.pause", "type": "pygame.mixer", "text": "\nThis will temporarily stop all playback on the active mixer channels. The\nplayback can later be resumed with `pygame.mixer.unpause()`\n\n"}, {"name": "mixer.pre_init", "path": "ref/mixer#pygame.mixer.pre_init", "type": "pygame.mixer", "text": "\nCall pre_init to change the defaults used when the real `pygame.mixer.init()`\nis called. Keyword arguments are accepted. The best way to set custom mixer\nplayback values is to call `pygame.mixer.pre_init()` before calling the top\nlevel `pygame.init()`. For backward compatibility argument values of zero are\nreplaced with the startup defaults.\n\nChanged in pygame 1.8: The default `buffersize` was changed from 1024 to 3072.\n\nChanged in pygame 1.9.1: The default `buffersize` was changed from 3072 to\n4096.\n\nChanged in pygame 2.0.0: The default `buffersize` was changed from 4096 to\n512. The default frequency changed to 44100 from 22050.\n\n"}, {"name": "mixer.quit", "path": "ref/mixer#pygame.mixer.quit", "type": "pygame.mixer", "text": "\nThis will uninitialize `pygame.mixer`. All playback will stop and any loaded\nSound objects may not be compatible with the mixer if it is reinitialized\nlater.\n\n"}, {"name": "mixer.set_num_channels", "path": "ref/mixer#pygame.mixer.set_num_channels", "type": "pygame.mixer", "text": "\nSets the number of available channels for the mixer. The default value is 8.\nThe value can be increased or decreased. If the value is decreased, sounds\nplaying on the truncated channels are stopped.\n\n"}, {"name": "mixer.set_reserved", "path": "ref/mixer#pygame.mixer.set_reserved", "type": "pygame.mixer", "text": "\nThe mixer can reserve any number of channels that will not be automatically\nselected for playback by Sounds. If sounds are currently playing on the\nreserved channels they will not be stopped.\n\nThis allows the application to reserve a specific number of channels for\nimportant sounds that must not be dropped or have a guaranteed channel to play\non.\n\n"}, {"name": "mixer.Sound", "path": "ref/mixer#pygame.mixer.Sound", "type": "pygame.mixer", "text": "\nLoad a new sound buffer from a filename, a python file object or a readable\nbuffer object. Limited resampling will be performed to help the sample match\nthe initialize arguments for the mixer. A Unicode string can only be a file\npathname. A Python 2.x string or a Python 3.x bytes object can be either a\npathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid\nambiguity; otherwise Sound may guess wrong. If the array keyword is used, the\nobject is expected to export a version 3, `C` level array interface or, for\nPython 2.6 or later, a new buffer interface (The object is checked for a\nbuffer interface first.)\n\nThe Sound object represents actual sound sample data. Methods that change the\nstate of the Sound object will the all instances of the Sound playback. A\nSound object also exports an array interface, and, for Python 2.6 or later, a\nnew buffer interface.\n\nThe Sound can be loaded from an `OGG` audio file or from an uncompressed\n`WAV`.\n\nNote: The buffer will be copied internally, no data will be shared between it\nand the Sound object.\n\nFor now buffer and array support is consistent with `sndarray.make_sound` for\nNumeric arrays, in that sample sign and byte order are ignored. This will\nchange, either by correctly handling sign and byte order, or by raising an\nexception when different. Also, source samples are truncated to fit the audio\nsample size. This will not change.\n\nNew in pygame 1.8: `pygame.mixer.Sound(buffer)`\n\nNew in pygame 1.9.2: `pygame.mixer.Sound` keyword arguments and array\ninterface support\n\nBegin playback of the Sound (i.e., on the computer's speakers) on an available\nChannel. This will forcibly select a Channel, so playback may cut off a\ncurrently playing sound if necessary.\n\nThe loops argument controls how many times the sample will be repeated after\nbeing played the first time. A value of 5 means that the sound will be played\nonce, then repeated five times, and so is played a total of six times. The\ndefault value (zero) means the Sound is not repeated, and so is only played\nonce. If loops is set to -1 the Sound will loop indefinitely (though you can\nstill call `stop()` to stop it).\n\nThe maxtime argument can be used to stop playback after a given number of\nmilliseconds.\n\nThe fade_ms argument will make the sound start playing at 0 volume and fade up\nto full volume over the time given. The sample may end before the fade-in is\ncomplete.\n\nThis returns the Channel object for the channel that was selected.\n\nThis will stop the playback of this Sound on any active Channels.\n\nThis will stop playback of the sound after fading it out over the time\nargument in milliseconds. The Sound will fade and stop on all actively playing\nchannels.\n\nThis will set the playback volume (loudness) for this Sound. This will\nimmediately affect the Sound if it is playing. It will also affect any future\nplayback of this Sound.\n\nvolume in the range of 0.0 to 1.0 (inclusive)\n\nReturn a value from 0.0 to 1.0 representing the volume for this Sound.\n\nReturn the number of active channels this sound is playing on.\n\nReturn the length of this Sound in seconds.\n\nReturn a copy of the Sound object buffer as a bytes (for Python 3.x) or str\n(for Python 2.x) object.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "mixer.Sound.fadeout", "path": "ref/mixer#pygame.mixer.Sound.fadeout", "type": "pygame.mixer", "text": "\nThis will stop playback of the sound after fading it out over the time\nargument in milliseconds. The Sound will fade and stop on all actively playing\nchannels.\n\n"}, {"name": "mixer.Sound.get_length", "path": "ref/mixer#pygame.mixer.Sound.get_length", "type": "pygame.mixer", "text": "\nReturn the length of this Sound in seconds.\n\n"}, {"name": "mixer.Sound.get_num_channels", "path": "ref/mixer#pygame.mixer.Sound.get_num_channels", "type": "pygame.mixer", "text": "\nReturn the number of active channels this sound is playing on.\n\n"}, {"name": "mixer.Sound.get_raw", "path": "ref/mixer#pygame.mixer.Sound.get_raw", "type": "pygame.mixer", "text": "\nReturn a copy of the Sound object buffer as a bytes (for Python 3.x) or str\n(for Python 2.x) object.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "mixer.Sound.get_volume", "path": "ref/mixer#pygame.mixer.Sound.get_volume", "type": "pygame.mixer", "text": "\nReturn a value from 0.0 to 1.0 representing the volume for this Sound.\n\n"}, {"name": "mixer.Sound.play", "path": "ref/mixer#pygame.mixer.Sound.play", "type": "pygame.mixer", "text": "\nBegin playback of the Sound (i.e., on the computer's speakers) on an available\nChannel. This will forcibly select a Channel, so playback may cut off a\ncurrently playing sound if necessary.\n\nThe loops argument controls how many times the sample will be repeated after\nbeing played the first time. A value of 5 means that the sound will be played\nonce, then repeated five times, and so is played a total of six times. The\ndefault value (zero) means the Sound is not repeated, and so is only played\nonce. If loops is set to -1 the Sound will loop indefinitely (though you can\nstill call `stop()` to stop it).\n\nThe maxtime argument can be used to stop playback after a given number of\nmilliseconds.\n\nThe fade_ms argument will make the sound start playing at 0 volume and fade up\nto full volume over the time given. The sample may end before the fade-in is\ncomplete.\n\nThis returns the Channel object for the channel that was selected.\n\n"}, {"name": "mixer.Sound.set_volume", "path": "ref/mixer#pygame.mixer.Sound.set_volume", "type": "pygame.mixer", "text": "\nThis will set the playback volume (loudness) for this Sound. This will\nimmediately affect the Sound if it is playing. It will also affect any future\nplayback of this Sound.\n\nvolume in the range of 0.0 to 1.0 (inclusive)\n\n"}, {"name": "mixer.Sound.stop", "path": "ref/mixer#pygame.mixer.Sound.stop", "type": "pygame.mixer", "text": "\nThis will stop the playback of this Sound on any active Channels.\n\n"}, {"name": "mixer.stop", "path": "ref/mixer#pygame.mixer.stop", "type": "pygame.mixer", "text": "\nThis will stop all playback of all active mixer channels.\n\n"}, {"name": "mixer.unpause", "path": "ref/mixer#pygame.mixer.unpause", "type": "pygame.mixer", "text": "\nThis will resume all active sound channels after they have been paused.\n\n"}, {"name": "module-_sdl2.touch", "path": "ref/touch", "type": "pygame._sdl2.touch", "text": "\nNew in pygame 2: This module requires SDL2.\n\nReturn the number of available touch devices.\n\nReturn an integer id associated with the given `index`.\n\nReturn the number of fingers active for the touch device whose id is touchid.\n\nReturn a dict for the finger `index` active on `touchid`. The dict contains\nthese keys:\n\n"}, {"name": "module-camera", "path": "ref/camera", "type": "pygame.camera", "text": "\nPygame currently supports only Linux and v4l2 cameras.\n\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code will very likely break with the next pygame release.\n\nThe Bayer to `RGB` function is based on:\n\nNew in pygame 1.9.0.\n\nAllows for conversion from \"RGB\" to a destination colorspace of \"HSV\" or\n\"YUV\". The source and destination surfaces must be the same size and pixel\ndepth. This is useful for computer vision on devices with limited processing\npower. Capture as small of an image as possible, `transform.scale()` it even\nsmaller, and then convert the colorspace to `YUV` or `HSV` before doing any\nprocessing on it.\n\nChecks the computer for available cameras and returns a list of strings of\ncamera names, ready to be fed into `pygame.camera.Camera`.\n\nLoads a v4l2 camera. The device is typically something like \"/dev/video0\".\nDefault width and height are 640 by 480. Format is the desired colorspace of\nthe output. This is useful for computer vision purposes. The default is `RGB`.\nThe following are supported:\n\nOpens the camera device, attempts to initialize it, and begins recording\nimages to a buffer. The camera must be started before any of the below\nfunctions can be used.\n\nStops recording, uninitializes the camera, and closes it. Once a camera is\nstopped, the below functions cannot be used until it is started again.\n\nIf the camera supports it, get_controls will return the current settings for\nhorizontal and vertical image flip as bools and brightness as an int. If\nunsupported, it will return the default values of (0, 0, 0). Note that the\nreturn values here may be different than those returned by set_controls,\nthough these are more likely to be correct.\n\nAllows you to change camera settings if the camera supports it. The return\nvalues will be the input values if the camera claims it succeeded or the\nvalues previously in use if not. Each argument is optional, and the desired\none can be chosen by supplying the keyword, like hflip. Note that the actual\nsettings being used by the camera may not be the same as those returned by\nset_controls.\n\nReturns the current dimensions of the images being captured by the camera.\nThis will return the actual size, which may be different than the one\nspecified during initialization if the camera did not support that size.\n\nIf an image is ready to get, it returns true. Otherwise it returns false. Note\nthat some webcams will always return False and will only queue a frame when\ncalled with a blocking function like `get_image()`. This is useful to separate\nthe framerate of the game from that of the camera without having to use\nthreading.\n\nPulls an image off of the buffer as an `RGB` Surface. It can optionally reuse\nan existing Surface to save time. The bit-depth of the surface is either 24\nbits or the same as the optionally supplied Surface.\n\nGets an image from a camera as a string in the native pixelformat of the\ncamera. Useful for integration with other libraries.\n\n"}, {"name": "module-cdrom", "path": "ref/cdrom", "type": "pygame.cdrom", "text": "\nThe cdrom module manages the `CD` and `DVD` drives on a computer. It can also\ncontrol the playback of audio CDs. This module needs to be initialized before\nit can do anything. Each `CD` object you create represents a cdrom drive and\nmust also be initialized individually before it can do most things.\n\nInitialize the cdrom module. This will scan the system for all `CD` devices.\nThe module must be initialized before any other functions will work. This\nautomatically happens when you call `pygame.init()`.\n\nIt is safe to call this function more than once.\n\nUninitialize the cdrom module. After you call this any existing `CD` objects\nwill no longer work.\n\nIt is safe to call this function more than once.\n\nTest if the cdrom module is initialized or not. This is different than the\n`CD.init()` since each drive must also be initialized individually.\n\nReturn the number of cd drives on the system. When you create `CD` objects you\nneed to pass an integer id that must be lower than this count. The count will\nbe 0 if there are no drives on the system.\n\nYou can create a `CD` object for each cdrom on the system. Use\n`pygame.cdrom.get_count()` to determine how many drives actually exist. The id\nargument is an integer of the drive, starting at zero.\n\nThe `CD` object is not initialized, you can only call `CD.get_id()` and\n`CD.get_name()` on an uninitialized drive.\n\nIt is safe to create multiple `CD` objects for the same drive, they will all\ncooperate normally.\n\nInitialize the cdrom drive for use. The drive must be initialized for most\n`CD` methods to work. Even if the rest of pygame has been initialized.\n\nThere may be a brief pause while the drive is initialized. Avoid `CD.init()`\nif the program should not stop for a second or two.\n\nUninitialize a drive for use. Call this when your program will not be\naccessing the drive for awhile.\n\nTest if this `CDROM` device is initialized. This is different than the\n`pygame.cdrom.init()` since each drive must also be initialized individually.\n\nPlayback audio from an audio cdrom in the drive. Besides the track number\nargument, you can also pass a starting and ending time for playback. The start\nand end time are in seconds, and can limit the section of an audio track\nplayed.\n\nIf you pass a start time but no end, the audio will play to the end of the\ntrack. If you pass a start time and 'None' for the end time, the audio will\nplay to the end of the entire disc.\n\nSee the `CD.get_numtracks()` and `CD.get_track_audio()` to find tracks to\nplayback.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nStops playback of audio from the cdrom. This will also lose the current\nplayback position. This method does nothing if the drive isn't already playing\naudio.\n\nTemporarily stop audio playback on the `CD`. The playback can be resumed at\nthe same point with the `CD.resume()` method. If the `CD` is not playing this\nmethod does nothing.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nUnpause a paused `CD`. If the `CD` is not paused or already playing, this\nmethod does nothing.\n\nThis will open the cdrom drive and eject the cdrom. If the drive is playing or\npaused it will be stopped.\n\nReturns the integer id that was used to create the `CD` instance. This method\ncan work on an uninitialized `CD`.\n\nReturn the string name of the drive. This is the system name used to represent\nthe drive. It is often the drive letter or device name. This method can work\non an uninitialized `CD`.\n\nReturns True if the drive busy playing back audio.\n\nReturns True if the drive is currently paused.\n\nReturns both the current track and time of that track. This method works when\nthe drive is either playing or paused.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nReturn False if there is a cdrom currently in the drive. If the drive is empty\nthis will return True.\n\nReturn the number of tracks on the cdrom in the drive. This will return zero\nof the drive is empty or has no tracks.\n\nDetermine if a track on a cdrom contains audio data. You can also call\n`CD.num_tracks()` and `CD.get_all()` to determine more information about the\ncdrom.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nReturn a list with information for every track on the cdrom. The information\nconsists of a tuple with four values. The audio value is True if the track\ncontains audio data. The start, end, and length values are floating point\nnumbers in seconds. Start and end represent absolute times on the entire disc.\n\nReturn the absolute time in seconds where at start of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nReturn a floating point value in seconds of the length of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n"}, {"name": "module-cursors", "path": "ref/cursors", "type": "pygame.cursors", "text": "\nPygame offers control over the system hardware cursor. Pygame only supports\nblack and white cursors for the system. You control the cursor with functions\ninside `pygame.mouse`.\n\nThis cursors module contains functions for loading and decoding various cursor\nformats. These allow you to easily store your cursors in external files or\ndirectly as encoded python strings.\n\nThe module includes several standard cursors. The `pygame.mouse.set_cursor()`\nfunction takes several arguments. All those arguments have been stored in a\nsingle tuple you can call like this:\n\nThe following variables can be passed to `pygame.mouse.set_cursor` function:\n\nThis module also contains a few cursors as formatted strings. You'll need to\npass these to `pygame.cursors.compile()` function before you can use them. The\nexample call would look like this:\n\nThe following strings can be converted into cursor bitmaps with\n`pygame.cursors.compile()` :\n\nA sequence of strings can be used to create binary cursor data for the system\ncursor. This returns the binary data in the form of two tuples. Those can be\npassed as the third and fourth arguments respectively of the\n`pygame.mouse.set_cursor()` function.\n\nIf you are creating your own cursor strings, you can use any value represent\nthe black and white pixels. Some system allow you to set a special toggle\ncolor for the system color, this is also called the xor color. If the system\ndoes not support xor cursors, that color will simply be black.\n\nThe height must be divisible by 8. The width of the strings must all be equal\nand be divisible by 8. If these two conditions are not met, `ValueError` is\nraised. An example set of cursor strings looks like this\n\nThis loads cursors for a simple subset of `XBM` files. `XBM` files are\ntraditionally used to store cursors on UNIX systems, they are an ASCII format\nused to represent simple images.\n\nSometimes the black and white color values will be split into two separate\n`XBM` files. You can pass a second maskfile argument to load the two images\ninto a single cursor.\n\nThe cursorfile and maskfile arguments can either be filenames or file-like\nobject with the readlines method.\n\nThe return value cursor_args can be passed directly to the\n`pygame.mouse.set_cursor()` function.\n\n"}, {"name": "module-display", "path": "ref/display", "type": "pygame.display", "text": "\nThis module offers control over the pygame display. Pygame has a single\ndisplay Surface that is either contained in a window or runs full screen. Once\nyou create the display you treat it as a regular Surface. Changes are not\nimmediately visible onscreen; you must choose one of the two flipping\nfunctions to update the actual display.\n\nThe origin of the display, where x = 0 and y = 0, is the top left of the\nscreen. Both axes increase positively towards the bottom right of the screen.\n\nThe pygame display can actually be initialized in one of several modes. By\ndefault, the display is a basic software driven framebuffer. You can request\nspecial modules like hardware acceleration and OpenGL support. These are\ncontrolled by flags passed to `pygame.display.set_mode()`.\n\nPygame can only have a single display active at any time. Creating a new one\nwith `pygame.display.set_mode()` will close the previous display. If precise\ncontrol is needed over the pixel format or display resolutions, use the\nfunctions `pygame.display.mode_ok()`, `pygame.display.list_modes()`, and\n`pygame.display.Info()` to query information about the display.\n\nOnce the display Surface is created, the functions from this module affect the\nsingle existing display. The Surface becomes invalid if the module is\nuninitialized. If a new display mode is set, the existing Surface will\nautomatically switch to operate on the new display.\n\nWhen the display mode is set, several events are placed on the pygame event\nqueue. `pygame.QUIT` is sent when the user has requested the program to shut\ndown. The window will receive `pygame.ACTIVEEVENT` events as the display gains\nand loses input focus. If the display is set with the `pygame.RESIZABLE` flag,\n`pygame.VIDEORESIZE` events will be sent when the user adjusts the window\ndimensions. Hardware displays that draw direct to the screen will get\n`pygame.VIDEOEXPOSE` events when portions of the window must be redrawn.\n\nIn pygame 2, there is a new type of event called `pygame.WINDOWEVENT` that is\nmeant to replace all window related events like `pygame.VIDEORESIZE`,\n`pygame.VIDEOEXPOSE` and `pygame.ACTIVEEVENT`.\n\nNote that the WINDOWEVENT API is considered experimental, and may change in\nfuture releases.\n\nThe new events of type `pygame.WINDOWEVENT` have an `event` attribute that can\ntake the following values.\n\nIf SDL version used is less than 2.0.5, the last two values\n`WINDOWEVENT_TAKE_FOCUS` and `WINDOWEVENT_HIT_TEST` will not work. See the SDL\nimplementation (in C programming) of the same over here.\n\nSome display environments have an option for automatically stretching all\nwindows. When this option is enabled, this automatic stretching distorts the\nappearance of the pygame window. In the pygame examples directory, there is\nexample code (prevent_display_stretching.py) which shows how to disable this\nautomatic stretching of the pygame display on Microsoft Windows (Vista or\nnewer required).\n\nInitializes the pygame display module. The display module cannot do anything\nuntil it is initialized. This is usually handled for you automatically when\nyou call the higher level `pygame.init()`.\n\nPygame will select from one of several internal display backends when it is\ninitialized. The display mode will be chosen depending on the platform and\npermissions of current user. Before the display module is initialized the\nenvironment variable `SDL_VIDEODRIVER` can be set to control which backend is\nused. The systems with multiple choices are listed here.\n\nOn some platforms it is possible to embed the pygame display into an already\nexisting window. To do this, the environment variable `SDL_WINDOWID` must be\nset to a string containing the window id or handle. The environment variable\nis checked when the pygame display is initialized. Be aware that there can be\nmany strange side effects when running in an embedded display.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\nThis will shut down the entire display module. This means any active displays\nwill be closed. This will also be handled automatically when the program\nexits.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\nReturns True if the `pygame.display` module is currently initialized.\n\nThis function will create a display Surface. The arguments passed in are\nrequests for a display type. The actual created display will be the best\npossible match supported by the system.\n\nThe size argument is a pair of numbers representing the width and height. The\nflags argument is a collection of additional options. The depth argument\nrepresents the number of bits to use for color.\n\nThe Surface that gets returned can be drawn to like a regular Surface but\nchanges will eventually be seen on the monitor.\n\nIf no size is passed or is set to `(0, 0)` and pygame uses `SDL` version\n1.2.10 or above, the created Surface will have the same size as the current\nscreen resolution. If only the width or height are set to `0`, the Surface\nwill have the same width or height as the screen resolution. Using a `SDL`\nversion prior to 1.2.10 will raise an exception.\n\nIt is usually best to not pass the depth argument. It will default to the best\nand fastest color depth for the system. If your game requires a specific color\nformat you can control the depth with this argument. Pygame will emulate an\nunavailable color depth which can be slow.\n\nWhen requesting fullscreen display modes, sometimes an exact match for the\nrequested size cannot be made. In these situations pygame will select the\nclosest compatible match. The returned surface will still always match the\nrequested size.\n\nOn high resolution displays(4k, 1080p) and tiny graphics games (640x480) show\nup very small so that they are unplayable. SCALED scales up the window for\nyou. The game thinks it's a 640x480 window, but really it can be bigger. Mouse\nevents are scaled for you, so your game doesn't need to do it. Note that\nSCALED is considered an experimental API and may change in future releases.\n\nThe flags argument controls which type of display you want. There are several\nto choose from, and you can even combine multiple types using the bitwise or\noperator, (the pipe \"|\" character). If you pass `0` or no flags argument it\nwill default to a software driven window. Here are the display flags you will\nwant to choose from:\n\nPygame 2 has the following additional flags available.\n\nNew in pygame 2.0.0: `SCALED`, `SHOWN` and `HIDDEN`\n\nBy setting the `vsync` parameter to `1`, it is possible to get a display with\nvertical sync, but you are not guaranteed to get one. The request only works\nat all for calls to `set_mode()` with the `pygame.OPENGL` or `pygame.SCALED`\nflags set, and is still not guaranteed even with one of those set. What you\nget depends on the hardware and driver configuration of the system pygame is\nrunning on. Here is an example usage of a call to `set_mode()` that may give\nyou a display with vsync:\n\nVsync behaviour is considered experimental, and may change in future releases.\n\nNew in pygame 2.0.0: `vsync`\n\nBasic example:\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\nReturn a reference to the currently set display Surface. If no display mode\nhas been set this will return None.\n\nThis will update the contents of the entire display. If your display mode is\nusing the flags `pygame.HWSURFACE` and `pygame.DOUBLEBUF`, this will wait for\na vertical retrace and swap the surfaces. If you are using a different type of\ndisplay mode, it will simply update the entire contents of the surface.\n\nWhen using an `pygame.OPENGL` display mode this will perform a gl buffer swap.\n\nThis function is like an optimized version of `pygame.display.flip()` for\nsoftware displays. It allows only a portion of the screen to updated, instead\nof the entire area. If no argument is passed it updates the entire Surface\narea like `pygame.display.flip()`.\n\nYou can pass the function a single rectangle, or a sequence of rectangles. It\nis more efficient to pass many rectangles at once than to call update multiple\ntimes with single or a partial list of rectangles. If passing a sequence of\nrectangles it is safe to include None values in the list, which will be\nskipped.\n\nThis call cannot be used on `pygame.OPENGL` displays and will generate an\nexception.\n\nPygame chooses one of many available display backends when it is initialized.\nThis returns the internal name used for the display backend. This can be used\nto provide limited information about what display capabilities might be\naccelerated. See the `SDL_VIDEODRIVER` flags in `pygame.display.set_mode()` to\nsee some of the common options.\n\nCreates a simple object containing several attributes to describe the current\ngraphics environment. If this is called before `pygame.display.set_mode()`\nsome platforms can provide information about the default display mode. This\ncan also be called after setting the display mode to verify specific display\noptions were satisfied. The VidInfo object has several attributes:\n\nCreates a dictionary filled with string keys. The strings and values are\narbitrarily created by the system. Some systems may have no information and an\nempty dictionary will be returned. Most platforms will return a \"window\" key\nwith the value set to the system id for the current display.\n\nNew in pygame 1.7.1.\n\nThis function returns a list of possible sizes for a specified color depth.\nThe return value will be an empty list if no display modes are available with\nthe given arguments. A return value of `-1` means that any requested size\nshould work (this is likely the case for windowed modes). Mode sizes are\nsorted from biggest to smallest.\n\nIf depth is `0`, the current/best color depth for the display is used. The\nflags defaults to `pygame.FULLSCREEN`, but you may need to add additional\nflags for specific fullscreen modes.\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\nThis function uses the same arguments as `pygame.display.set_mode()`. It is\nused to determine if a requested display mode is available. It will return `0`\nif the display mode cannot be set. Otherwise it will return a pixel depth that\nbest matches the display asked for.\n\nUsually the depth argument is not passed, but some platforms can support\nmultiple display depths. If passed it will hint to which depth is a better\nmatch.\n\nThe most useful flags to pass will be `pygame.HWSURFACE`, `pygame.DOUBLEBUF`,\nand maybe `pygame.FULLSCREEN`. The function will return 0 if these display\nflags cannot be set.\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\nAfter calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, it is\na good idea to check the value of any requested OpenGL attributes. See\n`pygame.display.gl_set_attribute()` for a list of valid flags.\n\nWhen calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, Pygame\nautomatically handles setting the OpenGL attributes like color and double-\nbuffering. OpenGL offers several other attributes you may want control over.\nPass one of these attributes as the flag, and its appropriate value. This must\nbe called before `pygame.display.set_mode()`.\n\nMany settings are the requested minimum. Creating a window with an OpenGL\ncontext will fail if OpenGL cannot provide the requested attribute, but it may\nfor example give you a stencil buffer even if you request none, or it may give\nyou a larger one than requested.\n\nThe `OPENGL` flags are:\n\n`GL_MULTISAMPLEBUFFERS`\n\nWhether to enable multisampling anti-aliasing. Defaults to 0 (disabled).\n\nSet `GL_MULTISAMPLESAMPLES` to a value above 0 to control the amount of anti-\naliasing. A typical value is 2 or 3.\n\n`GL_STENCIL_SIZE`\n\n`GL_DEPTH_SIZE`\n\n`GL_STEREO`\n\n`GL_BUFFER_SIZE`\n\nNew in pygame 2.0.0: Additional attributes:\n\n`GL_CONTEXT_PROFILE_MASK`\n\nSets the OpenGL profile to one of these values:\n\n`GL_ACCELERATED_VISUAL`\n\nReturns True when the display Surface is considered actively renderable on the\nscreen and may be visible to the user. This is the default state immediately\nafter `pygame.display.set_mode()`. This method may return True even if the\napplication is fully hidden behind another application window.\n\nThis will return False if the display Surface has been iconified or minimized\n(either via `pygame.display.iconify()` or via an OS specific method such as\nthe minimize-icon available on most desktops).\n\nThe method can also return False for other reasons without the application\nbeing explicitly iconified or minimized by the user. A notable example being\nif the user has multiple virtual desktops and the display Surface is not on\nthe active virtual desktop.\n\nNote\n\nThis function returning True is unrelated to whether the application has input\nfocus. Please see `pygame.key.get_focused()` and `pygame.mouse.get_focused()`\nfor APIs related to input focus.\n\nRequest the window for the display surface be iconified or hidden. Not all\nsystems and displays support an iconified display. The function will return\nTrue if successful.\n\nWhen the display is iconified `pygame.display.get_active()` will return\n`False`. The event queue should receive an `ACTIVEEVENT` event when the window\nhas been iconified. Additionally, the event queue also recieves a\n`WINDOWEVENT_MINIMIZED` event when the window has been iconified on pygame 2.\n\nSwitches the display window between windowed and fullscreen modes. Display\ndriver support is not great when using pygame 1, but with pygame 2 it is the\nmost reliable method to switch to and from fullscreen.\n\nSupported display drivers in pygame 1:\n\nSupported display drivers in pygame 2:\n\nSet the red, green, and blue gamma values on the display hardware. If the\ngreen and blue arguments are not passed, they will both be the same as red.\nNot all systems and hardware support gamma ramps, if the function succeeds it\nwill return `True`.\n\nA gamma value of `1.0` creates a linear color table. Lower values will darken\nthe display and higher values will brighten.\n\nSet the red, green, and blue gamma ramps with an explicit lookup table. Each\nargument should be sequence of 256 integers. The integers should range between\n`0` and `0xffff`. Not all systems and hardware support gamma ramps, if the\nfunction succeeds it will return `True`.\n\nSets the runtime icon the system will use to represent the display window. All\nwindows default to a simple pygame logo for the window icon.\n\nYou can pass any surface, but most systems want a smaller image around 32x32.\nThe image can have colorkey transparency which will be passed to the system.\n\nSome systems do not allow the window icon to change after it has been shown.\nThis function can be called before `pygame.display.set_mode()` to create the\nicon before the display mode is set.\n\nIf the display has a window title, this function will change the name on the\nwindow. Some systems support an alternate shorter title to be used for\nminimized displays.\n\nReturns the title and icontitle for the display Surface. These will often be\nthe same value.\n\nThis will change the video display color palette for 8-bit displays. This does\nnot change the palette for the actual display Surface, only the palette that\nis used to display the Surface. If no palette argument is passed, the system\ndefault palette will be restored. The palette is a sequence of `RGB` triplets.\n\nReturns the number of available displays. This is always 1 if\n`pygame.get_sdl_version()` returns a major version number below 2.\n\nNew in pygame 1.9.5.\n\nReturns the size of the window initialized with `pygame.display.set_mode()`.\nThis may differ from the size of the display surface if `SCALED` is used.\n\nNew in pygame 2.0.0.\n\nReturn whether screensaver is allowed to run whilst the app is running.\nDefault is `False`. By default pygame does not allow the screensaver during\ngame play.\n\nNote\n\nSome platforms do not have a screensaver or support disabling the screensaver.\nPlease see `pygame.display.set_allow_screensaver()` for caveats with\nscreensaver support.\n\nNew in pygame 2.0.0.\n\nChange whether screensavers should be allowed whilst the app is running. The\ndefault is False. By default pygame does not allow the screensaver during game\nplay.\n\nIf the screensaver has been disallowed due to this function, it will\nautomatically be allowed to run when `pygame.quit()` is called.\n\nIt is possible to influence the default value via the environment variable\n`SDL_HINT_VIDEO_ALLOW_SCREENSAVER`, which can be set to either `0` (disable)\nor `1` (enable).\n\nNote\n\nDisabling screensaver is subject to platform support. When platform support is\nabsent, this function will silently appear to work even though the screensaver\nstate is unchanged. The lack of feedback is due to SDL not providing any\nsupported method for determining whether it supports changing the screensaver\nstate. `SDL_HINT_VIDEO_ALLOW_SCREENSAVER` is available in SDL 2.0.2 or later.\nSDL1.2 does not implement this.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "module-draw", "path": "ref/draw", "type": "pygame.draw", "text": "\nDraw several simple shapes to a surface. These functions will work for\nrendering to any format of surface. Rendering to hardware surfaces will be\nslower than regular software surfaces.\n\nMost of the functions take a width argument to represent the size of stroke\n(thickness) around the edge of the shape. If a width of 0 is passed the shape\nwill be filled (solid).\n\nAll the drawing functions respect the clip area for the surface and will be\nconstrained to that area. The functions return a rectangle representing the\nbounding area of changed pixels. This bounding rectangle is the 'minimum'\nbounding box that encloses the affected area.\n\nAll the drawing functions accept a color argument that can be one of the\nfollowing formats:\n\nA color's alpha value will be written directly into the surface (if the\nsurface contains pixel alphas), but the draw function will not draw\ntransparently.\n\nThese functions temporarily lock the surface they are operating on. Many\nsequential drawing calls can be sped up by locking and unlocking the surface\nobject around the draw calls (see `pygame.Surface.lock()` and\n`pygame.Surface.unlock()`).\n\nNote\n\nSee the `pygame.gfxdraw` module for alternative draw methods.\n\nDraws a rectangle on the given surface.\n\n(optional) used for line thickness or to indicate that the rectangle is to be\nfilled (not to be confused with the width value of the `rect` parameter)\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will grow outside the original\nboundary of the rect. For more details on how the thickness for edge lines\ngrow, refer to the `width` notes of the `pygame.draw.line()` function.\n\n(optional) used for setting the value of bottom right border. If you don't set\nthis value, it will use the border_radius value.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the given `rect` parameter and its width and\nheight will be 0\n\nRect\n\nNote\n\nThe `pygame.Surface.fill()` method works just as well for drawing filled\nrectangles and can be hardware accelerated on some platforms with both\nsoftware and hardware display modes.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nChanged in pygame 2.0.0.dev8: Added support for border radius.\n\nDraws a polygon on the given surface.\n\n(optional) used for line thickness or to indicate that the polygon is to be\nfilled\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will grow outside the original\nboundary of the polygon. For more details on how the thickness for edge lines\ngrow, refer to the `width` notes of the `pygame.draw.line()` function.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the first point in the `points` parameter\n(float values will be truncated) and its width and height will be 0\n\nRect\n\nNote\n\nFor an aapolygon, use `aalines()` with `closed=True`.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws a circle on the given surface.\n\n(optional) used for line thickness or to indicate that the circle is to be\nfilled\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will only grow inward.\n\n(optional) if this is set to True then the bottom right corner of the circle\nwill be drawn\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the `center` parameter value (float values will be truncated)\nand its width and height will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments. Nothing is drawn\nwhen the radius is 0 (a pixel at the `center` coordinates used to be drawn\nwhen the radius equaled 0). Floats, and Vector2 are accepted for the `center`\nparam. The drawing algorithm was improved to look more like a circle.\n\nChanged in pygame 2.0.0.dev8: Added support for drawing circle quadrants.\n\nDraws an ellipse on the given surface.\n\n(optional) used for line thickness or to indicate that the ellipse is to be\nfilled (not to be confused with the width value of the `rect` parameter)\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will only grow inward from the\noriginal boundary of the `rect` parameter.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the given `rect` parameter and its width and\nheight will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws an elliptical arc on the given surface.\n\nThe two angle arguments are given in radians and indicate the start and stop\npositions of the arc. The arc is drawn in a counterclockwise direction from\nthe `start_angle` to the `stop_angle`.\n\nstop angle of the arc in radians\n\n(optional) used for line thickness (not to be confused with the width value of\nthe `rect` parameter)\n\nNote\n\nWhen using `width` values `> 1`, the edge lines will only grow inward from the\noriginal boundary of the `rect` parameter.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the given `rect` parameter and its width and\nheight will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws a straight line on the given surface. There are no endcaps. For thick\nlines the ends are squared off.\n\n(optional) used for line thickness\n\nNote\n\nWhen using `width` values `> 1`, lines will grow as follows.\n\nFor odd `width` values, the thickness of each line grows with the original\nline being in the center.\n\nFor even `width` values, the thickness of each line grows with the original\nline being offset from the center (as there is no exact center line drawn). As\na result, lines with a slope < 1 (horizontal-ish) will have 1 more pixel of\nthickness below the original line (in the y direction). Lines with a slope >=\n1 (vertical-ish) will have 1 more pixel of thickness to the right of the\noriginal line (in the x direction).\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the `start_pos` parameter value (float values will be\ntruncated) and its width and height will be 0\n\nRect\n\nTypeError \\-- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws a sequence of contiguous straight lines on the given surface. There are\nno endcaps or miter joints. For thick lines the ends are squared off. Drawing\nthick lines with sharp corners can have undesired looking results.\n\n(optional) used for line thickness\n\nNote\n\nWhen using `width` values `> 1` refer to the `width` notes of `line()` for\ndetails on how thick lines grow.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the first point in the `points` parameter\n(float values will be truncated) and its width and height will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws a straight antialiased line on the given surface.\n\nThe line has a thickness of one pixel and the endpoints have a height and\nwidth of one pixel each.\n\nIf both endpoints are equal, only a single pixel is drawn (after rounding\nfloats to nearest integer).\n\nOtherwise if the line is not steep (i.e. if the length along the x-axis is\ngreater than the height along the y-axis):\n\nFor each endpoint:\n\nIf `x`, the endpoint's x-coordinate, is a whole number find which pixels would\nbe covered by it and draw them.\n\nOtherwise:\n\nCalculate the position of the nearest point with a whole number for it's\nx-coordinate, when extending the line past the endpoint.\n\nFind which pixels would be covered and how much by that point.\n\nIf the endpoint is the left one, multiply the coverage by (1 - the decimal\npart of `x`).\n\nOtherwise multiply the coverage by the decimal part of `x`.\n\nThen draw those pixels.\n\nThen for each point between the endpoints, along the line, whose x-coordinate\nis a whole number:\n\nFind which pixels would be covered and how much by that point and draw them.\n\nOtherwise do the same for steep lines as for non-steep lines except along the\ny-axis instead of the x-axis (using `y` instead of `x`, top instead of left\nand bottom instead of right).\n\nNote\n\nRegarding float values for coordinates, a point with coordinate consisting of\ntwo whole numbers is considered being right in the center of said pixel (and\nhaving a height and width of 1 pixel would therefore completely cover it),\nwhile a point with coordinate where one (or both) of the numbers have non-zero\ndecimal parts would be partially covering two (or four if both numbers have\ndecimal parts) adjacent pixels, e.g. the point `(1.4, 2)` covers 60% of the\npixel `(1, 2)` and 40% of the pixel `(2,2)`.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the `start_pos` parameter value (float values will be\ntruncated) and its width and height will be 0\n\nRect\n\nTypeError \\-- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nDraws a sequence of contiguous straight antialiased lines on the given\nsurface.\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's\nposition will be the position of the first point in the `points` parameter\n(float values will be truncated) and its width and height will be 0\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nExample code for draw module.\n\n"}, {"name": "module-event", "path": "ref/event", "type": "pygame.event", "text": "\nPygame handles all its event messaging through an event queue. The routines in\nthis module help you manage that event queue. The input queue is heavily\ndependent on the `pygame.display` module. If the display has not been\ninitialized and a video mode not set, the event queue may not work properly.\nThe event subsystem should be called from the main thread. If you want to post\nevents into the queue from other threads, please use the `pygame.fastevent`\nmodule.\n\nThe event queue has an upper limit on the number of events it can hold (128\nfor standard SDL 1.2). When the queue becomes full new events are quietly\ndropped. To prevent lost events, especially input events which signal a quit\ncommand, your program must handle events every frame (with\n`pygame.event.get()`, `pygame.event.pump()`, `pygame.event.wait()`,\n`pygame.event.peek()` or `pygame.event.clear()`) and process them. Not\nhandling events may cause your system to decide your program has locked up. To\nspeed up queue processing use `pygame.event.set_blocked()` to limit which\nevents get queued.\n\nTo get the state of various input devices, you can forego the event queue and\naccess the input devices directly with their appropriate modules:\n`pygame.mouse`, `pygame.key`, and `pygame.joystick`. If you use this method,\nremember that pygame requires some form of communication with the system\nwindow manager and other parts of the platform. To keep pygame in sync with\nthe system, you will need to call `pygame.event.pump()` to keep everything\ncurrent. Usually, this should be called once per game loop. Note: Joysticks\nwill not send any events until the device has been initialized.\n\nThe event queue contains `pygame.event.EventType` event objects. There are a\nvariety of ways to access the queued events, from simply checking for the\nexistence of events, to grabbing them directly off the stack. The event queue\nalso offers some simple filtering which can slightly help performance by\nblocking certain event types from the queue. Use `pygame.event.set_allowed()`\nand `pygame.event.set_blocked()` to change this filtering. By default, all\nevent types can be placed on the queue.\n\nAll `pygame.event.EventType` instances contain an event type identifier and\nattributes specific to that event type. The event type identifier is\naccessible as the `pygame.event.EventType.type` property. Any of the event\nspecific attributes can be accessed through the\n`pygame.event.EventType.__dict__` attribute or directly as an attribute of the\nevent object (as member lookups are passed through to the object's dictionary\nvalues). The event object has no method functions. Users can create their own\nnew events with the `pygame.event.Event()` function.\n\nThe event type identifier is in between the values of `NOEVENT` and\n`NUMEVENTS`. User defined events should have a value in the inclusive range of\n`USEREVENT` to `NUMEVENTS - 1`. It is recommended all user events follow this\nsystem.\n\nEvents support equality and inequality comparisons. Two events are equal if\nthey are the same type and have identical attribute values.\n\nWhile debugging and experimenting, you can print an event object for a quick\ndisplay of its type and members. The function `pygame.event.event_name()` can\nbe used to get a string representing the name of the event type.\n\nEvents that come from the system will have a guaranteed set of member\nattributes based on the type. The following is a list event types with their\nspecific attributes.\n\nChanged in pygame 2.0.0: The `joy` attribute was deprecated, `instance_id` was\nadded.\n\nYou can also find a list of constants for keyboard keys here.\n\nOn MacOSX when a file is opened using a pygame application, a `USEREVENT` with\nits `code` attribute set to `pygame.USEREVENT_DROPFILE` is generated. There is\nan additional attribute called `filename` where the name of the file being\naccessed is stored.\n\nNew in pygame 1.9.2.\n\nWhen compiled with SDL2, pygame has these additional events and their\nattributes.\n\nNew in pygame 1.9.5.\n\npygame can recognize text or files dropped in its window. If a file is\ndropped, `file` will be its path. The `DROPTEXT` event is only supported on\nX11.\n\nNew in pygame 2.0.0.\n\nEvents reserved for `pygame.midi` use.\n\nNew in pygame 2.0.0.\n\nSDL2 supports controller hotplugging:\n\nAlso in this version, `instance_id` attributes were added to joystick events,\nand the `joy` attribute was deprecated.\n\nNew in pygame 2.0.0.\n\nFor each frame of your game, you will need to make some sort of call to the\nevent queue. This ensures your program can internally interact with the rest\nof the operating system. If you are not using other event functions in your\ngame, you should call `pygame.event.pump()` to allow pygame to handle internal\nactions.\n\nThis function is not necessary if your program is consistently processing\nevents on the queue through the other `pygame.event` functions.\n\nThere are important things that must be dealt with internally in the event\nqueue. The main window may need to be repainted or respond to the system. If\nyou fail to make a call to the event queue for too long, the system may decide\nyour program has locked up.\n\nCaution\n\nThis function should only be called in the thread that initialized\n`pygame.display`.\n\nThis will get all the messages and remove them from the queue. If a type or\nsequence of types is given only those messages will be removed from the queue.\n\nIf you are only taking specific events from the queue, be aware that the queue\ncould eventually fill up with the events you are not interested.\n\nIf `pump` is `True` (the default), then `pygame.event.pump()` will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\nReturns a single event from the queue. If the event queue is empty an event of\ntype `pygame.NOEVENT` will be returned immediately. The returned event is\nremoved from the queue.\n\nCaution\n\nThis function should only be called in the thread that initialized\n`pygame.display`.\n\nReturns a single event from the queue. If the queue is empty this function\nwill wait until one is created. From pygame 2.0.0, if a `timeout` argument is\ngiven, the function will return an event of type `pygame.NOEVENT` if no events\nenter the queue in `timeout` milliseconds. The event is removed from the queue\nonce it has been returned. While the program is waiting it will sleep in an\nidle state. This is important for programs that want to share the system with\nother applications.\n\nChanged in pygame 2.0.0.dev13: Added `timeout` argument\n\nCaution\n\nThis function should only be called in the thread that initialized\n`pygame.display`.\n\nReturns `True` if there are any events of the given type waiting on the queue.\nIf a sequence of event types is passed, this will return `True` if any of\nthose events are on the queue.\n\nIf `pump` is `True` (the default), then `pygame.event.pump()` will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\nRemoves all events from the queue. If `eventtype` is given, removes the given\nevent or sequence of events. This has the same effect as `pygame.event.get()`\nexcept `None` is returned. It can be slightly more efficient when clearing a\nfull event queue.\n\nIf `pump` is `True` (the default), then `pygame.event.pump()` will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\nReturns a string representing the name (in CapWords style) of the given event\ntype.\n\n\"UserEvent\" is returned for all values in the user event id range. \"Unknown\"\nis returned when the event type does not exist.\n\nThe given event types are not allowed to appear on the event queue. By default\nall events can be placed on the queue. It is safe to disable an event type\nmultiple times.\n\nIf `None` is passed as the argument, ALL of the event types are blocked from\nbeing placed on the queue.\n\nThe given event types are allowed to appear on the event queue. By default,\nall event types can be placed on the queue. It is safe to enable an event type\nmultiple times.\n\nIf `None` is passed as the argument, ALL of the event types are allowed to be\nplaced on the queue.\n\nReturns `True` if the given event type is blocked from the queue. If a\nsequence of event types is passed, this will return `True` if any of those\nevent types are blocked.\n\nWhen your program runs in a windowed environment, it will share the mouse and\nkeyboard devices with other applications that have focus. If your program sets\nthe event grab to `True`, it will lock all input into your program.\n\nIt is best to not always grab the input, since it prevents the user from doing\nother things on their system.\n\nReturns `True` when the input events are grabbed for this application.\n\nPlaces the given event at the end of the event queue.\n\nThis is usually used for placing `pygame.USEREVENT` events on the queue.\nAlthough any type of event can be placed, if using the system event types your\nprogram should be sure to create the standard attributes with appropriate\nvalues.\n\nIf the event queue is full a `pygame.error` is raised.\n\nCaution: In pygame 2.0, calling this function with event types defined by\npygame (such as `pygame.KEYDOWN`) may put events into the SDL2 event queue. In\nthis case, an error may be raised if standard attributes of that event are\nmissing or have incompatible values, and unexpected properties may be silently\nomitted. In order to avoid this behaviour, custom event properties should be\nused with custom event types. This behaviour is not guaranteed.\n\nReserves a `pygame.USEREVENT` for a custom use.\n\nIf too many events are made a `pygame.error` is raised.\n\nNew in pygame 2.0.0.dev3.\n\nCreates a new event with the given type and attributes. The attributes can\ncome from a dictionary argument with string keys or from keyword arguments.\n\nA pygame object that represents an event. User event instances are created\nwith an `pygame.event.Event()` function call. The `EventType` type is not\ndirectly callable. `EventType` instances support attribute assignment and\ndeletion.\n\nRead-only. The event type identifier. For user created event objects, this is\nthe `type` argument passed to `pygame.event.Event()`.\n\nFor example, some predefined event identifiers are `QUIT` and `MOUSEMOTION`.\n\nRead-only. The event type specific attributes of an event. The `dict`\nattribute is a synonym for backward compatibility.\n\nFor example, the attributes of a `KEYDOWN` event would be `unicode`, `key`,\nand `mod`\n\nNew in pygame 1.9.2: Mutable attributes.\n\n"}, {"name": "module-examples", "path": "ref/examples", "type": "pygame.examples", "text": "\nThese examples should help get you started with pygame. Here is a brief\nrundown of what you get. The source code for these examples is in the public\ndomain. Feel free to use for your own projects.\n\nThere are several ways to run the examples. First they can be run as stand-\nalone programs. Second they can be imported and their `main()` methods called\n(see below). Finally, the easiest way is to use the python -m option:\n\neg:\n\nResources such as images and sounds for the examples are found in the\npygame/examples/data subdirectory.\n\nYou can find where the example files are installed by using the following\ncommands inside the python interpreter.\n\nOn each OS and version of Python the location will be slightly different. For\nexample on Windows it might be in 'C:/Python26/Lib/site-\npackages/pygame/examples/' On Mac OS X it might be in\n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-\npackages/pygame/examples/'\n\nYou can also run the examples in the python interpreter by calling each\nmodules main() function.\n\nWe're always on the lookout for more examples and/or example requests. Code\nlike this is probably the best way to start getting involved with python\ngaming.\n\nexamples as a package is new to pygame 1.9.0. But most of the examples came\nwith pygame much earlier.\n\nThis started off as a port of the `SDL` demonstration, Aliens. Now it has\nevolved into something sort of resembling fun. This demonstrates a lot of\ndifferent uses of sprites and optimized blitting. Also transparency,\ncolorkeys, fonts, sound, music, joystick, and more. (PS, my high score is 117!\ngoodluck)\n\nThis more closely resembles a port of the `SDL` Aliens demo. The code is a lot\nsimpler, so it makes a better starting point for people looking at code for\nthe first times. These blitting routines are not as optimized as they\nshould/could be, but the code is easier to follow, and it plays quick enough.\n\nA simple starfield example. You can change the center of perspective by\nleftclicking the mouse on the screen.\n\nThis simple example is derived from the line-by-line tutorial that comes with\npygame. It is based on a 'popular' web banner. Note there are comments here,\nbut for the full explanation, follow along in the tutorial.\n\nThis is the full and final example from the Pygame Tutorial, \"How Do I Make It\nMove\". It creates 10 objects and animates them on the screen.\n\nNote it's a bit scant on error checking, but it's easy to read. :]\nFortunately, this is python, and we needn't wrestle with a pile of error\ncodes.\n\nSuper quick, super simple application demonstrating the different ways to\nrender fonts with the font module\n\nA showcase of rendering features the `pygame.freetype.Font` class provides in\naddition to those available with `pygame.font.Font`. It is a demonstration of\ndirect to surface rendering, with vertical text and rotated text, opaque text\nand semi transparent text, horizontally stretched text and vertically\nstretched text.\n\nDemonstrates creating a vertical gradient with pixelcopy and NumPy python. The\napp will create a new gradient every half second and report the time needed to\ncreate and display the image. If you're not prepared to start working with the\nNumPy arrays, don't worry about the source for this one :]\n\nEventlist is a sloppy style of pygame, but is a handy tool for learning about\npygame events and input. At the top of the screen are the state of several\ndevice values, and a scrolling list of events are displayed on the bottom.\n\nThis is not quality 'ui' code at all, but you can see how to implement very\nnon-interactive status displays, or even a crude text output control.\n\nAnother example filled with various surfarray effects. It requires the\nsurfarray and image modules to be installed. This little demo can also make a\ngood starting point for any of your own tests with surfarray\n\nThe `arraytype` parameter is deprecated; passing any value besides 'numpy'\nwill raise ValueError.\n\nExtremely basic testing of the mixer module. Load a sound and play it. All\nfrom the command shell, no graphics.\n\nIf provided, use the audio file 'file_path', otherwise use a default file.\n\n`sound.py` optional command line argument: an audio file\n\nUses sndarray and NumPy to create offset faded copies of the original sound.\nCurrently it just uses hardcoded values for the number of echoes and the\ndelay. Easy for you to recreate as needed.\n\nThe `arraytype` parameter is deprecated; passing any value besides 'numpy'\nwill raise ValueError.\n\nThis example was created in a quick comparison with the BlitzBasic gaming\nlanguage. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).\n\nUsing PyOpenGL and pygame, this creates a spinning 3D multicolored cube.\n\nA simple demonstration example for the clipboard support.\n\nPositional arguments:\n\nThis `pygame.masks` demo will display multiple moving sprites bouncing off\neach other. More than one sprite image can be provided.\n\nIf run as a program then `mask.py` takes one or more image files as command\nline arguments.\n\nOptional keyword arguments:\n\nLike the `testsprite.c` that comes with SDL, this pygame version shows lots of\nsprites moving around.\n\nIf run as a stand-alone program then no command line arguments are taken.\n\narguments:\n\nHow to use pygame with no windowing system, like on headless servers.\n\nThumbnail generation with scaling is an example of what you can do with\npygame.\n\n`NOTE`: the pygame scale function uses MMX/SSE if available, and can be run in\nmultiple threads.\n\nIf `headless_no_windows_needed.py` is run as a program it takes the following\ncommand line arguments:\n\nThis is a stress test for the fastevents module.\n\nSo far it looks like normal `pygame.event` is faster by up to two times. So\nmaybe fastevent isn't fast at all.\n\nTested on Windows XP SP2 Athlon, and FreeBSD.\n\nHowever... on my Debian Duron 850 machine fastevents is faster.\n\nPlay the .pgm video file given by a path fname.\n\nIf run as a program `overlay.py` takes the file name as a command line\nargument.\n\nA interactive demo that lets one choose which BLEND_xxx option to apply to a\nsurface.\n\nFake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat\nlike blend_fill.\n\nDisplay an arrow or circle with crossbar cursor.\n\nDisplay various pixelarray generated effects.\n\narguments:\n\nA smoothscale example that resized an image on the screen. Vertical and\nhorizontal arrow keys are used to change the width and height of the displayed\nimage. If the convert_alpha option is True then the source image is forced to\nhave source alpha, whether or not the original images does. If run_speed_test\nis True then a background timing test is performed instead of the interactive\nscaler.\n\nIf `scaletest.py` is run as a program then the command line options are:\n\nArguments:\n\nThe output example shows how to translate mouse clicks or computer keyboard\nevents into midi notes. It implements a rudimentary button widget and state\nmachine.\n\nThe input example shows how to translate midi input to pygame events.\n\nWith the use of a virtual midi patch cord the output and input examples can be\nrun as separate processes and connected so the keyboard output is displayed on\na console.\n\nnew to pygame 1.9.0\n\nThis example shows a scrollable image that has a zoom factor of eight. It uses\nthe `Surface.scroll()` function to shift the image on the display surface. A\nclip rectangle protects a margin area. If called as a function, the example\naccepts an optional image file path. If run as a program it takes an optional\nfile path command line argument. If no file is provided a default image file\nis used.\n\nWhen running click on a black triangle to move one pixel in the direction the\ntriangle points. Or use the arrow keys. Close the window or press `ESC` to\nquit.\n\nA simple live video player, it uses the first available camera it finds on the\nsystem.\n\nA simple music player with window and keyboard playback control. Playback can\nbe paused and rewound to the beginning.\n\n"}, {"name": "module-fastevent", "path": "ref/fastevent", "type": "pygame.fastevent", "text": "\npygame.fastevent is a wrapper for Bob Pendleton's fastevent library. It\nprovides fast events for use in multithreaded environments. When using\npygame.fastevent, you can not use any of the pump, wait, poll, post, get,\npeek, etc. functions from pygame.event, but you should use the Event objects.\n\nInitialize the pygame.fastevent module.\n\nReturns True if the pygame.fastevent module is currently initialized.\n\nFor each frame of your game, you will need to make some sort of call to the\nevent queue. This ensures your program can internally interact with the rest\nof the operating system.\n\nThis function is not necessary if your program is consistently processing\nevents on the queue through the other `pygame.fastevent` functions.\n\nThere are important things that must be dealt with internally in the event\nqueue. The main window may need to be repainted or respond to the system. If\nyou fail to make a call to the event queue for too long, the system may decide\nyour program has locked up.\n\nReturns the current event on the queue. If there are no messages waiting on\nthe queue, this will not return until one is available. Sometimes it is\nimportant to use this wait to get events from the queue, it will allow your\napplication to idle when the user isn't doing anything with it.\n\nReturns next event on queue. If there is no event waiting on the queue, this\nwill return an event with type NOEVENT.\n\nThis will get all the messages and remove them from the queue.\n\nThis will post your own event objects onto the event queue. You can post any\nevent type you want, but some care must be taken. For example, if you post a\nMOUSEBUTTONDOWN event to the queue, it is likely any code receiving the event\nwill expect the standard MOUSEBUTTONDOWN attributes to be available, like\n'pos' and 'button'.\n\nBecause pygame.fastevent.post() may have to wait for the queue to empty, you\ncan get into a dead lock if you try to append an event on to a full queue from\nthe thread that processes events. For that reason I do not recommend using\nthis function in the main thread of an SDL program.\n\n"}, {"name": "module-font", "path": "ref/font", "type": "pygame.font", "text": "\nThe font module allows for rendering TrueType fonts into a new Surface object.\nIt accepts any UCS-2 character ('u0001' to 'uFFFF'). This module is optional\nand requires SDL_ttf as a dependency. You should test that `pygame.font` is\navailable and initialized before attempting to use the module.\n\nMost of the work done with fonts are done by using the actual Font objects.\nThe module by itself only has routines to initialize the module and create\nFont objects with `pygame.font.Font()`.\n\nYou can load fonts from the system by using the `pygame.font.SysFont()`\nfunction. There are a few other functions to help lookup the system fonts.\n\nPygame comes with a builtin default font. This can always be accessed by\npassing None as the font name.\n\nTo use the `pygame.freetype` based `pygame.ftfont` as `pygame.font` define the\nenvironment variable PYGAME_FREETYPE before the first import of `pygame`.\nModule `pygame.ftfont` is a `pygame.font` compatible module that passes all\nbut one of the font module unit tests: it does not have the UCS-2 limitation\nof the SDL_ttf based font module, so fails to raise an exception for a code\npoint greater than 'uFFFF'. If `pygame.freetype` is unavailable then the\nSDL_ttf font module will be loaded instead.\n\nThis method is called automatically by `pygame.init()`. It initializes the\nfont module. The module must be initialized before any other functions will\nwork.\n\nIt is safe to call this function more than once.\n\nManually uninitialize SDL_ttf's font system. This is called automatically by\n`pygame.quit()`.\n\nIt is safe to call this function even if font is currently not initialized.\n\nTest if the font module is initialized or not.\n\nReturn the filename of the system font. This is not the full path to the file.\nThis file can usually be found in the same directory as the font module, but\nit can also be bundled in separate archives.\n\nReturns a list of all the fonts available on the system. The names of the\nfonts will be set to lowercase with all spaces and punctuation removed. This\nworks on most systems, but some will return an empty list if they cannot find\nfonts.\n\nReturns the full path to a font file on the system. If bold or italic are set\nto true, this will attempt to find the correct family of font.\n\nThe font name can also be an iterable of font names, a string of comma-\nseparated font names, or a bytes of comma-separated font names, in which case\nthe set of names will be searched in order. If none of the given names are\nfound, None is returned.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nExample:\n\nReturn a new Font object that is loaded from the system fonts. The font will\nmatch the requested bold and italic flags. Pygame uses a small set of common\nfont aliases. If the specific font you ask for is not available, a reasonable\nalternative may be used. If a suitable system font is not found this will fall\nback on loading the default pygame font.\n\nThe font name can also be an iterable of font names, a string of comma-\nseparated font names, or a bytes of comma-separated font names, in which case\nthe set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nLoad a new font from a given filename or a python file object. The size is the\nheight of the font in pixels. If the filename is None the pygame default font\nwill be loaded. If a font cannot be loaded from the arguments given an\nexception will be raised. Once the font is created the size cannot be changed.\n\nFont objects are mainly used to render text into new Surface objects. The\nrender can emulate bold or italic features, but it is better to load from a\nfont with actual italic or bold glyphs. The rendered text can be regular\nstrings or unicode.\n\nWhether the font should be rendered in bold.\n\nWhen set to True, this enables the bold rendering of text. This is a fake\nstretching of the font that doesn't look good on many font types. If possible\nload the font from a real bold font file. While bold, the font will have a\ndifferent width than when normal. This can be mixed with the italic and\nunderline modes.\n\nNew in pygame 2.0.0.\n\nWhether the font should be rendered in italic.\n\nWhen set to True, this enables fake rendering of italic text. This is a fake\nskewing of the font that doesn't look good on many font types. If possible\nload the font from a real italic font file. While italic the font will have a\ndifferent width than when normal. This can be mixed with the bold and\nunderline modes.\n\nNew in pygame 2.0.0.\n\nWhether the font should be rendered in underline.\n\nWhen set to True, all rendered fonts will include an underline. The underline\nis always one pixel thick, regardless of font size. This can be mixed with the\nbold and italic modes.\n\nNew in pygame 2.0.0.\n\nThis creates a new Surface with the specified text rendered on it. pygame\nprovides no way to directly draw text on an existing Surface: instead you must\nuse `Font.render()` to create an image (Surface) of the text, then blit this\nimage onto another Surface.\n\nThe text can only be a single line: newline characters are not rendered. Null\ncharacters ('x00') raise a TypeError. Both Unicode and char (byte) strings are\naccepted. For Unicode strings only UCS-2 characters ('u0001' to 'uFFFF') are\nrecognized. Anything greater raises a UnicodeError. For char strings a\n`LATIN1` encoding is assumed. The antialias argument is a boolean: if true the\ncharacters will have smooth edges. The color argument is the color of the text\n[e.g.: (0,0,255) for blue]. The optional background argument is a color to use\nfor the text background. If no background is passed the area outside the text\nwill be transparent.\n\nThe Surface returned will be of the dimensions required to hold the text. (the\nsame as those returned by Font.size()). If an empty string is passed for the\ntext, a blank surface will be returned that is zero pixel wide and the height\nof the font.\n\nDepending on the type of background and antialiasing used, this returns\ndifferent types of Surfaces. For performance reasons, it is good to know what\ntype of image will be used. If antialiasing is not used, the return image will\nalways be an 8-bit image with a two-color palette. If the background is\ntransparent a colorkey will be set. Antialiased images are rendered to 24-bit\n`RGB` images. If the background is transparent a pixel alpha will be included.\n\nOptimization: if you know that the final destination for the text (on the\nscreen) will always have a solid background, and the text is antialiased, you\ncan improve performance by specifying the background color. This will cause\nthe resulting image to maintain transparency information by colorkey rather\nthan (much less efficient) alpha values.\n\nIf you render '\\n' an unknown char will be rendered. Usually a rectangle.\nInstead you need to handle new lines yourself.\n\nFont rendering is not thread safe: only a single thread can render text at any\ntime.\n\nReturns the dimensions needed to render the text. This can be used to help\ndetermine the positioning needed for text before it is rendered. It can also\nbe used for wordwrapping and other layout effects.\n\nBe aware that most fonts use kerning which adjusts the widths for specific\nletter pairs. For example, the width for \"ae\" will not always match the width\nfor \"a\" + \"e\".\n\nWhen enabled, all rendered fonts will include an underline. The underline is\nalways one pixel thick, regardless of font size. This can be mixed with the\nbold and italic modes.\n\nNote\n\nThis is the same as the `underline` attribute.\n\nReturn True when the font underline is enabled.\n\nNote\n\nThis is the same as the `underline` attribute.\n\nEnables the bold rendering of text. This is a fake stretching of the font that\ndoesn't look good on many font types. If possible load the font from a real\nbold font file. While bold, the font will have a different width than when\nnormal. This can be mixed with the italic and underline modes.\n\nNote\n\nThis is the same as the `bold` attribute.\n\nReturn True when the font bold rendering mode is enabled.\n\nNote\n\nThis is the same as the `bold` attribute.\n\nEnables fake rendering of italic text. This is a fake skewing of the font that\ndoesn't look good on many font types. If possible load the font from a real\nitalic font file. While italic the font will have a different width than when\nnormal. This can be mixed with the bold and underline modes.\n\nNote\n\nThis is the same as the `italic` attribute.\n\nThe list contains tuples for each character, which contain the minimum `X`\noffset, the maximum `X` offset, the minimum `Y` offset, the maximum `Y` offset\nand the advance offset (bearing plus width) of the character. [(minx, maxx,\nminy, maxy, advance), (minx, maxx, miny, maxy, advance), ...]. None is entered\nin the list for each unrecognized character.\n\nReturn True when the font italic rendering mode is enabled.\n\nNote\n\nThis is the same as the `italic` attribute.\n\nReturn the height in pixels for a line of text with the font. When rendering\nmultiple lines of text this is the recommended amount of space between lines.\n\nReturn the height in pixels of the actual rendered text. This is the average\nsize for each glyph in the font.\n\nReturn the height in pixels for the font ascent. The ascent is the number of\npixels from the font baseline to the top of the font.\n\nReturn the height in pixels for the font descent. The descent is the number of\npixels from the font baseline to the bottom of the font.\n\n"}, {"name": "module-freetype", "path": "ref/freetype", "type": "pygame.freetype", "text": "\nThe `pygame.freetype` module is a replacement for `pygame.font`. It has all of\nthe functionality of the original, plus many new features. Yet is has\nabsolutely no dependencies on the SDL_ttf library. It is implemented directly\non the FreeType 2 library. The `pygame.freetype` module is not itself backward\ncompatible with `pygame.font`. Instead, use the `pygame.ftfont` module as a\ndrop-in replacement for `pygame.font`.\n\nAll font file formats supported by FreeType can be rendered by\n`pygame.freetype`, namely `TTF`, Type1, `CFF`, OpenType, `SFNT`, `PCF`, `FNT`,\n`BDF`, `PFR` and Type42 fonts. All glyphs having UTF-32 code points are\naccessible (see `Font.ucs4`).\n\nMost work on fonts is done using `Font` instances. The module itself only has\nroutines for initialization and creation of `Font` objects. You can load fonts\nfrom the system using the `SysFont()` function.\n\nExtra support of bitmap fonts is available. Available bitmap sizes can be\nlisted (see `Font.get_sizes()`). For bitmap only fonts `Font` can set the size\nfor you (see the `Font.size` property).\n\nFor now undefined character codes are replaced with the `.notdef` (not\ndefined) character. How undefined codes are handled may become configurable in\na future release.\n\nPygame comes with a built-in default font. This can always be accessed by\npassing None as the font name to the `Font` constructor.\n\nExtra rendering features available to `pygame.freetype.Font` are direct to\nsurface rendering (see `Font.render_to()`), character kerning (see\n`Font.kerning`), vertical layout (see `Font.vertical`), rotation of rendered\ntext (see `Font.rotation`), and the strong style (see `Font.strong`). Some\nproperties are configurable, such as strong style strength (see\n`Font.strength`) and underline positioning (see `Font.underline_adjustment`).\nText can be positioned by the upper right corner of the text box or by the\ntext baseline (see `Font.origin`). Finally, a font's vertical and horizontal\nsize can be adjusted separately (see `Font.size`). The\n`pygame.examples.freetype_misc` example shows these features in use.\n\nThe pygame package does not import `freetype` automatically when loaded. This\nmodule must be imported explicitly to be used.\n\nNew in pygame 1.9.2: `freetype`\n\nReturn a description of the last error which occurred in the FreeType2\nlibrary, or `None` if no errors have occurred.\n\nReturns the version of the FreeType library in use by this module.\n\nNote that the `freetype` module depends on the FreeType 2 library. It will not\ncompile with the original FreeType 1.0. Hence, the first element of the tuple\nwill always be \"2\".\n\nThis function initializes the underlying FreeType library and must be called\nbefore trying to use any of the functionality of the `freetype` module.\n\nHowever, `pygame.init()` will automatically call this function if the\n`freetype` module is already imported. It is safe to call this function more\nthan once.\n\nOptionally, you may specify a default cache_size for the Glyph cache: the\nmaximum number of glyphs that will be cached at any given time by the module.\nExceedingly small values will be automatically tuned for performance. Also a\ndefault pixel resolution, in dots per inch, can be given to adjust font\nscaling.\n\nThis function closes the `freetype` module. After calling this function, you\nshould not invoke any class, method or function related to the `freetype`\nmodule as they are likely to fail or might give unpredictable results. It is\nsafe to call this function even if the module hasn't been initialized yet.\n\nReturns `True` if the `pygame.freetype` module is currently initialized.\n\nNew in pygame 1.9.5.\n\nDEPRECATED: Returns `True` if the `pygame.freetype` module is currently\ninitialized. Use `get_init()` instead.\n\nSee `pygame.freetype.init()`.\n\nReturns the default pixel size, in dots per inch, for the module. The default\nis 72 DPI.\n\nSet the default pixel size, in dots per inch, for the module. If the optional\nargument is omitted or zero the resolution is reset to 72 DPI.\n\nReturn a new Font object that is loaded from the system fonts. The font will\nmatch the requested bold and italic flags. Pygame uses a small set of common\nfont aliases. If the specific font you ask for is not available, a reasonable\nalternative may be used. If a suitable system font is not found this will fall\nback on loading the default pygame font.\n\nThe font name can also be an iterable of font names, a string of comma-\nseparated font names, or a bytes of comma-separated font names, in which case\nthe set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nReturn the filename of the default pygame font. This is not the full path to\nthe file. The file is usually in the same directory as the font module, but\ncan also be bundled in a separate archive.\n\nArgument file can be either a string representing the font's filename, a file-\nlike object containing the font, or None; if None, a default, Pygame, font is\nused.\n\nOptionally, a size argument may be specified to set the default size in\npoints, which determines the size of the rendered characters. The size can\nalso be passed explicitly to each method call. Because of the way the caching\nsystem works, specifying a default size on the constructor doesn't imply a\nperformance gain over manually passing the size on each function call. If the\nfont is bitmap and no size is given, the default size is set to the first\navailable size for the font.\n\nIf the font file has more than one font, the font to load can be chosen with\nthe index argument. An exception is raised for an out-of-range font index\nvalue.\n\nThe optional resolution argument sets the pixel size, in dots per inch, for\nuse in scaling glyphs for this Font instance. If 0 then the default module\nvalue, set by `init()`, is used. The Font object's resolution can only be\nchanged by re-initializing the Font instance.\n\nThe optional ucs4 argument, an integer, sets the default text translation\nmode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True), to\ntreat Unicode text as UCS-4, with no surrogate pairs. See `Font.ucs4`.\n\nRead only. Returns the real (long) name of the font, as recorded in the font\nfile.\n\nRead only. Returns the path of the loaded font file\n\nGet or set the default size for text metrics and rendering. It can be a single\npoint size, given as a Python `int` or `float`, or a font ppem (width, height)\n`tuple`. Size values are non-negative. A zero size or width represents an\nundefined size. In this case the size must be given as a method argument, or\nan exception is raised. A zero width but non-zero height is a ValueError.\n\nFor a scalable font, a single number value is equivalent to a tuple with width\nequal height. A font can be stretched vertically with height set greater than\nwidth, or horizontally with width set greater than height. For embedded\nbitmaps, as listed by `get_sizes()`, use the nominal width and height to\nselect an available size.\n\nFont size differs for a non-scalable, bitmap, font. During a method call it\nmust match one of the available sizes returned by method `get_sizes()`. If\nnot, an exception is raised. If the size is a single number, the size is first\nmatched against the point size value. If no match, then the available size\nwith the same nominal width and height is chosen.\n\nGets the final dimensions and origin, in pixels, of text using the optional\nsize in points, style, and rotation. For other relevant render properties, and\nfor any optional argument not given, the default values set for the `Font`\ninstance are used.\n\nReturns a `Rect` instance containing the width and height of the text's\nbounding box and the position of the text's origin. The origin is useful in\naligning separately rendered pieces of text. It gives the baseline position\nand bearing at the start of the text. See the `render_to()` method for an\nexample.\n\nIf text is a char (byte) string, its encoding is assumed to be `LATIN1`.\n\nOptionally, text can be `None`, which will return the bounding rectangle for\nthe text passed to a previous `get_rect()`, `render()`, `render_to()`,\n`render_raw()`, or `render_raw_to()` call. See `render_to()` for more details.\n\nReturns the glyph metrics for each character in text.\n\nThe glyph metrics are returned as a list of tuples. Each tuple gives metrics\nof a single character glyph. The glyph metrics are:\n\nThe bounding box min_x, max_x, min_y, and max_y values are returned as grid-\nfitted pixel coordinates of type int. The advance values are float values.\n\nThe calculations are done using the font's default size in points. Optionally\nyou may specify another point size with the size argument.\n\nThe metrics are adjusted for the current rotation, strong, and oblique\nsettings.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nRead only. Gets the height of the font. This is the average value of all\nglyphs in the font.\n\nRead only. Return the number of units from the font's baseline to the top of\nthe bounding box.\n\nRead only. Return the height in font units for the font descent. The descent\nis the number of units from the font's baseline to the bottom of the bounding\nbox.\n\nReturn the number of units from the font's baseline to the top of the bounding\nbox. It is not adjusted for strong or rotation.\n\nReturn the number of pixels from the font's baseline to the top of the\nbounding box. It is not adjusted for strong or rotation.\n\nReturns the height of the font. This is the average value of all glyphs in the\nfont. It is not adjusted for strong or rotation.\n\nReturn the glyph bounding box height of the font in pixels. This is the\naverage value of all glyphs in the font. It is not adjusted for strong or\nrotation.\n\nReturns a list of tuple records, one for each point size supported. Each tuple\ncontaining the point size, the height in pixels, width in pixels, horizontal\nppem (nominal width) in fractional pixels, and vertical ppem (nominal height)\nin fractional pixels.\n\nReturns a new `Surface`, with the text rendered to it in the color given by\n'fgcolor'. If no foreground color is given, the default foreground color,\n`fgcolor` is used. If `bgcolor` is given, the surface will be filled with this\ncolor. When no background color is given, the surface background is\ntransparent, zero alpha. Normally the returned surface has a 32 bit pixel\nsize. However, if `bgcolor` is `None` and anti-aliasing is disabled a\nmonochrome 8 bit colorkey surface, with colorkey set for the background color,\nis returned.\n\nThe return value is a tuple: the new surface and the bounding rectangle giving\nthe size and origin of the rendered text.\n\nIf an empty string is passed for text then the returned Rect is zero width and\nthe height of the font.\n\nOptional fgcolor, style, rotation, and size arguments override the default\nvalues set for the `Font` instance.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nOptionally, text can be `None`, which will render the text passed to a\nprevious `get_rect()`, `render()`, `render_to()`, `render_raw()`, or\n`render_raw_to()` call. See `render_to()` for details.\n\nRenders the string text to the `pygame.Surface` surf, at position dest, a (x,\ny) surface coordinate pair. If either x or y is not an integer it is converted\nto one if possible. Any sequence where the first two items are x and y\npositional elements is accepted, including a `Rect` instance. As with\n`render()`, optional fgcolor, style, rotation, and size argument are\navailable.\n\nIf a background color bgcolor is given, the text bounding box is first filled\nwith that color. The text is blitted next. Both the background fill and text\nrendering involve full alpha blits. That is, the alpha values of the\nforeground, background, and destination target surface all affect the blit.\n\nThe return value is a rectangle giving the size and position of the rendered\ntext within the surface.\n\nIf an empty string is passed for text then the returned `Rect` is zero width\nand the height of the font. The rect will test False.\n\nOptionally, text can be set `None`, which will re-render text passed to a\nprevious `render_to()`, `get_rect()`, `render()`, `render_raw()`, or\n`render_raw_to()` call. Primarily, this feature is an aid to using\n`render_to()` in combination with `get_rect()`. An example:\n\nWhen `render_to()` is called with the same font properties \u2015 `size`, `style`,\n`strength`, `wide`, `antialiased`, `vertical`, `rotation`, `kerning`, and\n`use_bitmap_strikes` \u2015 as `get_rect()`, `render_to()` will use the layout\ncalculated by `get_rect()`. Otherwise, `render_to()` will recalculate the\nlayout if called with a text string or one of the above properties has changed\nafter the `get_rect()` call.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nLike `render()` but with the pixels returned as a byte string of 8-bit gray-\nscale values. The foreground color is 255, the background 0, useful as an\nalpha mask for a foreground pattern.\n\nRender to an array object exposing an array struct interface. The array must\nbe two dimensional with integer items. The default dest value, `None`, is\nequivalent to position (0, 0). See `render_to()`. As with the other render\nmethods, text can be `None` to render a text string passed previously to\nanother method.\n\nThe return value is a `pygame.Rect()` giving the size and position of the\nrendered text.\n\nGets or sets the default style of the Font. This default style will be used\nfor all text rendering and size calculations unless overridden specifically a\nrender or `get_rect()` call. The style value may be a bit-wise OR of one or\nmore of the following constants:\n\nThese constants may be found on the FreeType constants module. Optionally, the\ndefault style can be modified or obtained accessing the individual style\nattributes (underline, oblique, strong).\n\nThe `STYLE_OBLIQUE` and `STYLE_STRONG` styles are for scalable fonts only. An\nattempt to set either for a bitmap font raises an AttributeError. An attempt\nto set either for an inactive font, as returned by `Font.__new__()`, raises a\nRuntimeError.\n\nAssigning `STYLE_DEFAULT` to the `style` property leaves the property\nunchanged, as this property defines the default. The `style` property will\nnever return `STYLE_DEFAULT`.\n\nGets or sets whether the font will be underlined when drawing text. This\ndefault style value will be used for all text rendering and size calculations\nunless overridden specifically in a render or `get_rect()` call, via the\n'style' parameter.\n\nGets or sets whether the font will be bold when drawing text. This default\nstyle value will be used for all text rendering and size calculations unless\noverridden specifically in a render or `get_rect()` call, via the 'style'\nparameter.\n\nGets or sets whether the font will be rendered as oblique. This default style\nvalue will be used for all text rendering and size calculations unless\noverridden specifically in a render or `get_rect()` call, via the style\nparameter.\n\nThe oblique style is only supported for scalable (outline) fonts. An attempt\nto set this style on a bitmap font will raise an AttributeError. If the font\nobject is inactive, as returned by `Font.__new__()`, setting this property\nraises a RuntimeError.\n\nGets or sets whether the font will be stretched horizontally when drawing\ntext. It produces a result similar to `pygame.font.Font`'s bold. This style\nnot available for rotated text.\n\nThe amount by which a font glyph's size is enlarged for the strong or wide\ntransformations, as a fraction of the untransformed size. For the wide style\nonly the horizontal dimension is increased. For strong text both the\nhorizontal and vertical dimensions are enlarged. A wide style of strength\n0.08333 ( 1/12 ) is equivalent to the `pygame.font.Font` bold style. The\ndefault is 0.02778 ( 1/36 ).\n\nThe strength style is only supported for scalable (outline) fonts. An attempt\nto set this property on a bitmap font will raise an AttributeError. If the\nfont object is inactive, as returned by `Font.__new__()`, assignment to this\nproperty raises a RuntimeError.\n\nGets or sets a factor which, when positive, is multiplied with the font's\nunderline offset to adjust the underline position. A negative value turns an\nunderline into a strike-through or overline. It is multiplied with the\nascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5\nclosely matches Tango underlining. A value of 1.0 mimics `pygame.font.Font`\nunderlining.\n\nRead only. Returns `True` if the font contains fixed-width characters (for\nexample Courier, Bitstream Vera Sans Mono, Andale Mono).\n\nRead only. Returns the number of point sizes for which the font contains\nbitmap character images. If zero then the font is not a bitmap font. A\nscalable font may contain pre-rendered point sizes as strikes.\n\nRead only. Returns `True` if the font contains outline glyphs. If so, the\npoint size is not limited to available bitmap sizes.\n\nSome scalable fonts include embedded bitmaps for particular point sizes. This\nproperty controls whether or not those bitmap strikes are used. Set it `False`\nto disable the loading of any bitmap strike. Set it `True`, the default, to\npermit bitmap strikes for a non-rotated render with no style other than `wide`\nor `underline`. This property is ignored for bitmap fonts.\n\nSee also `fixed_sizes` and `get_sizes()`.\n\nGets or sets the font's anti-aliasing mode. This defaults to `True` on all\nfonts, which are rendered with full 8 bit blending.\n\nSet to `False` to do monochrome rendering. This should provide a small speed\ngain and reduce cache memory size.\n\nGets or sets the font's kerning mode. This defaults to `False` on all fonts,\nwhich will be rendered without kerning.\n\nSet to `True` to add kerning between character pairs, if supported by the\nfont, when positioning glyphs.\n\nGets or sets whether the characters are laid out vertically rather than\nhorizontally. May be useful when rendering Kanji or some other vertical\nscript.\n\nSet to `True` to switch to a vertical text layout. The default is `False`,\nplace horizontally.\n\nNote that the `Font` class does not automatically determine script\norientation. Vertical layout must be selected explicitly.\n\nAlso note that several font formats (especially bitmap based ones) don't\ncontain the necessary metrics to draw glyphs vertically, so drawing in those\ncases will give unspecified results.\n\nGets or sets the baseline angle of the rendered text. The angle is represented\nas integer degrees. The default angle is 0, with horizontal text rendered\nalong the X-axis, and vertical text along the Y-axis. A positive value rotates\nthese axes counterclockwise that many degrees. A negative angle corresponds to\na clockwise rotation. The rotation value is normalized to a value within the\nrange 0 to 359 inclusive (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315,\n720 -> 720 - (2 * 360) -> 0).\n\nOnly scalable (outline) fonts can be rotated. An attempt to change the\nrotation of a bitmap font raises an AttributeError. An attempt to change the\nrotation of an inactive font instance, as returned by `Font.__new__()`, raises\na RuntimeError.\n\nGets or sets the default glyph rendering color. It is initially opaque black \u2015\n(0, 0, 0, 255). Applies to `render()` and `render_to()`.\n\nGets or sets the default background rendering color. Initially it is unset and\ntext will render with a transparent background by default. Applies to\n`render()` and `render_to()`.\n\nNew in pygame 2.0.0.\n\nIf set `True`, `render_to()` and `render_raw_to()` will take the dest position\nto be that of the text origin, as opposed to the top-left corner of the\nbounding box. See `get_rect()` for details.\n\nIf set `True`, then the text boundary rectangle will be inflated to match that\nof `font.Font`. Otherwise, the boundary rectangle is just large enough for the\ntext.\n\nGets or sets the decoding of Unicode text. By default, the freetype module\nperforms UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit\nescape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their\ncorresponding UTF-32 code points on Python interpreters built with a UCS-2\nUnicode type (on Windows, for instance). It also means character values within\nthe UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a\nsurrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError.\nSetting ucs4 `True` turns surrogate pair decoding off, allowing access the\nfull UCS-4 character range to a Python interpreter built with four-byte\nUnicode character support.\n\nRead only. Gets pixel size used in scaling font glyphs for this `Font`\ninstance.\n\n"}, {"name": "module-gfxdraw", "path": "ref/gfxdraw", "type": "pygame.gfxdraw", "text": "\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code may break with the next pygame release.\n\nThe pygame package does not import gfxdraw automatically when loaded, so it\nmust imported explicitly to be used.\n\nFor all functions the arguments are strictly positional and integers are\naccepted for coordinates and radii. The `color` argument can be one of the\nfollowing formats:\n\nThe functions `rectangle()` and `box()` will accept any `(x, y, w, h)`\nsequence for their `rect` argument, though `pygame.Rect` instances are\npreferred.\n\nTo draw a filled antialiased shape, first use the antialiased (aa*) version of\nthe function, and then use the filled (filled_*) version. For example:\n\nNote\n\nFor threading, each of the functions releases the GIL during the C part of the\ncall.\n\nNote\n\nSee the `pygame.draw` module for alternative draw methods. The\n`pygame.gfxdraw` module differs from the `pygame.draw` module in the API it\nuses and the different draw functions available. `pygame.gfxdraw` wraps the\nprimitives from the library called SDL_gfx, rather than using modified\nversions.\n\nNew in pygame 1.9.0.\n\nDraws a single pixel, at position (x ,y), on the given surface.\n\n`None`\n\nNoneType\n\nDraws a straight horizontal line (`(x1, y)` to `(x2, y)`) on the given\nsurface. There are no endcaps.\n\n`None`\n\nNoneType\n\nDraws a straight vertical line (`(x, y1)` to `(x, y2)`) on the given surface.\nThere are no endcaps.\n\n`None`\n\nNoneType\n\nDraws a straight line (`(x1, y1)` to `(x2, y2)`) on the given surface. There\nare no endcaps.\n\n`None`\n\nNoneType\n\nDraws an unfilled rectangle on the given surface. For a filled rectangle use\n`box()`.\n\n`None`\n\nNoneType\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a `pygame.Rect` always lie\none pixel outside of its actual border. Therefore, these values will not be\nincluded as part of the drawing.\n\nDraws a filled rectangle on the given surface. For an unfilled rectangle use\n`rectangle()`.\n\n`None`\n\nNoneType\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a `pygame.Rect` always lie\none pixel outside of its actual border. Therefore, these values will not be\nincluded as part of the drawing.\n\nNote\n\nThe `pygame.Surface.fill()` method works just as well for drawing filled\nrectangles. In fact `pygame.Surface.fill()` can be hardware accelerated on\nsome platforms with both software and hardware display modes.\n\nDraws an unfilled circle on the given surface. For a filled circle use\n`filled_circle()`.\n\n`None`\n\nNoneType\n\nDraws an unfilled antialiased circle on the given surface.\n\n`None`\n\nNoneType\n\nDraws a filled circle on the given surface. For an unfilled circle use\n`circle()`.\n\n`None`\n\nNoneType\n\nDraws an unfilled ellipse on the given surface. For a filled ellipse use\n`filled_ellipse()`.\n\n`None`\n\nNoneType\n\nDraws an unfilled antialiased ellipse on the given surface.\n\n`None`\n\nNoneType\n\nDraws a filled ellipse on the given surface. For an unfilled ellipse use\n`ellipse()`.\n\n`None`\n\nNoneType\n\nDraws an arc on the given surface. For an arc with its endpoints connected to\nits center use `pie()`.\n\nThe two angle arguments are given in degrees and indicate the start and stop\npositions of the arc. The arc is drawn in a clockwise direction from the\n`start_angle` to the `stop_angle`. If `start_angle == stop_angle`, nothing\nwill be drawn\n\n`None`\n\nNoneType\n\nNote\n\nThis function uses degrees while the `pygame.draw.arc()` function uses\nradians.\n\nDraws an unfilled pie on the given surface. A pie is an `arc()` with its\nendpoints connected to its center.\n\nThe two angle arguments are given in degrees and indicate the start and stop\npositions of the pie. The pie is drawn in a clockwise direction from the\n`start_angle` to the `stop_angle`. If `start_angle == stop_angle`, a straight\nline will be drawn from the center position at the given angle, to a length of\nthe radius.\n\n`None`\n\nNoneType\n\nDraws an unfilled trigon (triangle) on the given surface. For a filled trigon\nuse `filled_trigon()`.\n\nA trigon can also be drawn using `polygon()` e.g. `polygon(surface, ((x1, y1),\n(x2, y2), (x3, y3)), color)`\n\n`None`\n\nNoneType\n\nDraws an unfilled antialiased trigon (triangle) on the given surface.\n\nAn aatrigon can also be drawn using `aapolygon()` e.g. `aapolygon(surface,\n((x1, y1), (x2, y2), (x3, y3)), color)`\n\n`None`\n\nNoneType\n\nDraws a filled trigon (triangle) on the given surface. For an unfilled trigon\nuse `trigon()`.\n\nA filled_trigon can also be drawn using `filled_polygon()` e.g.\n`filled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)`\n\n`None`\n\nNoneType\n\nDraws an unfilled polygon on the given surface. For a filled polygon use\n`filled_polygon()`.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\nDraws an unfilled antialiased polygon on the given surface.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\nDraws a filled polygon on the given surface. For an unfilled polygon use\n`polygon()`.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\nDraws a textured polygon on the given surface. For better performance, the\nsurface and the texture should have the same format.\n\nA per-pixel alpha texture blit to a per-pixel alpha surface will differ from a\n`pygame.Surface.blit()` blit. Also, a per-pixel alpha texture cannot be used\nwith an 8-bit per pixel destination.\n\nThe adjacent coordinates in the `points` argument, as well as the first and\nlast points, will be connected by line segments. e.g. For the points `[(x1,\ny1), (x2, y2), (x3, y3)]` a line segment will be drawn from `(x1, y1)` to\n`(x2, y2)`, from `(x2, y2)` to `(x3, y3)`, and from `(x3, y3)` to `(x1, y1)`.\n\n`None`\n\nNoneType\n\nDraws a B\u00e9zier curve on the given surface.\n\n`None`\n\nNoneType\n\n"}, {"name": "module-image", "path": "ref/image", "type": "pygame.image", "text": "\nThe image module contains functions for loading and saving pictures, as well\nas transferring Surfaces to formats usable by other packages.\n\nNote that there is no Image class; an image is loaded as a Surface object. The\nSurface class allows manipulation (drawing lines, setting pixels, capturing\nregions, etc.).\n\nThe image module is a required dependency of pygame, but it only optionally\nsupports any extended file formats. By default it can only load uncompressed\n`BMP` images. When built with full image support, the `pygame.image.load()`\nfunction can support the following formats.\n\nSaving images only supports a limited set of formats. You can save to the\nfollowing formats.\n\n`JPEG` and `JPG` refer to the same file format\n\nNew in pygame 1.8: Saving PNG and JPEG files.\n\nLoad an image from a file source. You can pass either a filename or a Python\nfile-like object.\n\nThis function only supports loading \"basic\" image format, ie `BMP` format.\nThis function is always available, no matter how pygame was built.\n\nLoad an image from a file source. You can pass either a filename or a Python\nfile-like object.\n\nPygame will automatically determine the image type (e.g., `GIF` or bitmap) and\ncreate a new Surface object from the data. In some cases it will need to know\nthe file extension (e.g., `GIF` images should end in \".gif\"). If you pass a\nraw file-like object, you may also want to pass the original filename as the\nnamehint argument.\n\nThe returned Surface will contain the same color format, colorkey and alpha\ntransparency as the file it came from. You will often want to call\n`Surface.convert()` with no arguments, to create a copy that will draw more\nquickly on the screen.\n\nFor alpha transparency, like in .png images, use the `convert_alpha()` method\nafter loading so that the image has per pixel transparency.\n\npygame may not always be built to support all image formats. At minimum it\nwill support uncompressed `BMP`. If `pygame.image.get_extended()` returns\n'True', you should be able to load most images (including PNG, JPG and GIF).\n\nYou should use `os.path.join()` for compatibility.\n\nThis function is similar to `pygame.image.load()`, except that this function\ncan only be used if pygame was built with extended image format support.\n\nFrom version 2.0.1, this function is always available, but raises an error if\nextended image formats are not supported. Previously, this function may or may\nnot be available, depending on the state of extended image format support.\n\nChanged in pygame 2.0.1.\n\nThis will save your Surface as either a `BMP`, `TGA`, `PNG`, or `JPEG` image.\nIf the filename extension is unrecognized it will default to `TGA`. Both\n`TGA`, and `BMP` file formats create uncompressed files. You can pass a\nfilename or a Python file-like object. For file-like object, the image is\nsaved to `TGA` format unless a namehint with a recognizable extension is\npassed in.\n\nNote\n\nTo be able to save the `JPEG` file format to a file-like object, SDL2_Image\nversion 2.0.2 or newer is needed.\n\nNote\n\nWhen saving to a file-like object, it seems that for most formats, the object\nneeds to be flushed after saving to it to make loading from it possible.\n\nChanged in pygame 1.8: Saving PNG and JPEG files.\n\nChanged in pygame 2.0.0.dev11: The `namehint` parameter was added to make it\npossible to save other formats than `TGA` to a file-like object.\n\nThis will save your Surface as either a `PNG` or `JPEG` image.\n\nIncase the image is being saved to a file-like object, this function uses the\nnamehint argument to determine the format of the file being saved. Saves to\n`JPEG` incase the namehint was not specified while saving to file-like object.\n\nFrom version 2.0.1, this function is always available, but raises an error if\nextended image formats are not supported. Previously, this function may or may\nnot be available, depending on the state of extended image format support.\n\nChanged in pygame 2.0.1.\n\nIf pygame is built with extended image formats, then this function will return\nthe SDL_Image library's version number as a tuple of 3 integers `(major,\nminor, patch)`. If not, then it will return `None`.\n\nNew in pygame 2.0.0.dev11.\n\nIf pygame is built with extended image formats this function will return True.\nIt is still not possible to determine which formats will be available, but\ngenerally you will be able to load them all.\n\nCreates a string that can be transferred with the 'fromstring' method in other\nPython imaging packages. Some Python image packages prefer their images in\nbottom-to-top format (PyOpenGL for example). If you pass True for the flipped\nargument, the string buffer will be vertically flipped.\n\nThe format argument is a string of one of the following values. Note that only\n8-bit Surfaces can use the \"P\" format. The other formats will work for any\nSurface. Also note that other Python image packages support more formats than\npygame.\n\nThis function takes arguments similar to `pygame.image.tostring()`. The size\nargument is a pair of numbers representing the width and height. Once the new\nSurface is created you can destroy the string buffer.\n\nThe size and format image must compute the exact same size as the passed\nstring buffer. Otherwise an exception will be raised.\n\nSee the `pygame.image.frombuffer()` method for a potentially faster way to\ntransfer images into pygame.\n\nCreate a new Surface that shares pixel data directly from a bytes buffer. This\nmethod takes similar arguments to `pygame.image.fromstring()`, but is unable\nto vertically flip the source data.\n\nThis will run much faster than `pygame.image.fromstring()`, since no pixel\ndata must be allocated and copied.\n\nIt accepts the following 'format' arguments:\n\n"}, {"name": "module-joystick", "path": "ref/joystick", "type": "pygame.joystick", "text": "\nThe joystick module manages the joystick devices on a computer. Joystick\ndevices include trackballs and video-game-style gamepads, and the module\nallows the use of multiple buttons and \"hats\". Computers may manage multiple\njoysticks at a time.\n\nEach instance of the Joystick class represents one gaming device plugged into\nthe computer. If a gaming pad has multiple joysticks on it, than the joystick\nobject can actually represent multiple joysticks on that single game device.\n\nFor a quick way to initialise the joystick module and get a list of Joystick\ninstances use the following code:\n\nThe following event types will be generated by the joysticks\n\nAnd in pygame 2, which supports hotplugging:\n\nNote that in pygame 2, joysticks events use a unique \"instance ID\". The device\nindex passed in the constructor to a Joystick object is not unique after\ndevices have been added and removed. You must call\n`Joystick.get_instance_id()` to find the instance ID that was assigned to a\nJoystick on opening.\n\nThe event queue needs to be pumped frequently for some of the methods to work.\nSo call one of pygame.event.get, pygame.event.wait, or pygame.event.pump\nregularly.\n\nThis function is called automatically by `pygame.init()`.\n\nIt initializes the joystick module. The module must be initialized before any\nother functions will work.\n\nIt is safe to call this function more than once.\n\nUninitialize the joystick module. After you call this any existing joystick\nobjects will no longer work.\n\nIt is safe to call this function more than once.\n\nTest if the `pygame.joystick.init()` function has been called.\n\nReturn the number of joystick devices on the system. The count will be `0` if\nthere are no joysticks on the system.\n\nWhen you create Joystick objects using `Joystick(id)`, you pass an integer\nthat must be lower than this count.\n\nCreate a new joystick to access a physical device. The id argument must be a\nvalue from `0` to `pygame.joystick.get_count() - 1`.\n\nJoysticks are initialised on creation and are shut down when deallocated. Once\nthe device is initialized the pygame event queue will start receiving events\nabout its input.\n\nChanged in pygame 2.0.0: Joystick objects are now opened immediately on\ncreation.\n\nInitialize the joystick, if it has been closed. It is safe to call this even\nif the joystick is already initialized.\n\nDeprecated since pygame 2.0.0: In future it will not be possible to\nreinitialise a closed Joystick object. Will be removed in Pygame 2.1.\n\nClose a Joystick object. After this the pygame event queue will no longer\nreceive events from the device.\n\nIt is safe to call this more than once.\n\nReturn True if the Joystick object is currently initialised.\n\nReturns the original device index for this device. This is the same value that\nwas passed to the `Joystick()` constructor. This method can safely be called\nwhile the Joystick is not initialized.\n\nDeprecated since pygame 2.0.0: The original device index is not useful in\npygame 2. Use `get_instance_id()` instead. Will be removed in Pygame 2.1.\n\nGet the joystick instance ID. This matches the `instance_id` field that is\ngiven in joystick events.\n\nNew in pygame 2.0.0dev11.\n\nGet the GUID string. This identifies the exact hardware of the joystick\ndevice.\n\nNew in pygame 2.0.0dev11.\n\nGet a string giving the power status of the device.\n\nOne of: `empty`, `low`, `medium`, `full`, `wired`, `max`, or `unknown`.\n\nNew in pygame 2.0.0dev11.\n\nReturns the system name for this joystick device. It is unknown what name the\nsystem will give to the Joystick, but it should be a unique name that\nidentifies the device. This method can safely be called while the Joystick is\nnot initialized.\n\nReturns the number of input axes are on a Joystick. There will usually be two\nfor the position. Controls like rudders and throttles are treated as\nadditional axes.\n\nThe `pygame.JOYAXISMOTION` events will be in the range from `-1.0` to `1.0`. A\nvalue of `0.0` means the axis is centered. Gamepad devices will usually be\n`-1`, `0`, or `1` with no values in between. Older analog joystick axes will\nnot always use the full `-1` to `1` range, and the centered value will be some\narea around `0`.\n\nAnalog joysticks usually have a bit of noise in their axis, which will\ngenerate a lot of rapid small motion events.\n\nReturns the current position of a joystick axis. The value will range from\n`-1` to `1` with a value of `0` being centered. You may want to take into\naccount some tolerance to handle jitter, and joystick drift may keep the\njoystick from centering at `0` or using the full range of position values.\n\nThe axis number must be an integer from `0` to `get_numaxes() - 1`.\n\nWhen using gamepads both the control sticks and the analog triggers are\nusually reported as axes.\n\nReturns the number of trackball devices on a Joystick. These devices work\nsimilar to a mouse but they have no absolute position; they only have relative\namounts of movement.\n\nThe `pygame.JOYBALLMOTION` event will be sent when the trackball is rolled. It\nwill report the amount of movement on the trackball.\n\nReturns the relative movement of a joystick button. The value is a `x, y` pair\nholding the relative movement since the last call to get_ball.\n\nThe ball number must be an integer from `0` to `get_numballs() - 1`.\n\nReturns the number of pushable buttons on the joystick. These buttons have a\nboolean (on or off) state.\n\nButtons generate a `pygame.JOYBUTTONDOWN` and `pygame.JOYBUTTONUP` event when\nthey are pressed and released.\n\nReturns the current state of a joystick button.\n\nReturns the number of joystick hats on a Joystick. Hat devices are like\nminiature digital joysticks on a joystick. Each hat has two axes of input.\n\nThe `pygame.JOYHATMOTION` event is generated when the hat changes position.\nThe `position` attribute for the event contains a pair of values that are\neither `-1`, `0`, or `1`. A position of `(0, 0)` means the hat is centered.\n\nReturns the current position of a position hat. The position is given as two\nvalues representing the `x` and `y` position for the hat. `(0, 0)` means\ncentered. A value of `-1` means left/down and a value of `1` means right/up:\nso `(-1, 0)` means left; `(1, 0)` means right; `(0, 1)` means up; `(1, 1)`\nmeans upper-right; etc.\n\nThis value is digital, `i.e.`, each coordinate can be `-1`, `0` or `1` but\nnever in-between.\n\nThe hat number must be between `0` and `get_numhats() - 1`.\n\nExample code for joystick module.\n\nCommon Controller Axis Mappings\n\nController mappings are drawn from the underlying SDL library which pygame\nuses and they differ between pygame 1 and pygame 2. Below are a couple of\nmappings for two popular game pads.\n\nPygame 2\n\nAxis and hat mappings are listed from -1 to +1.\n\nX-Box 360 Controller (name: \"Xbox 360 Controller\")\n\nIn pygame 2 the X360 controller mapping has 6 Axes, 11 buttons and 1 hat.\n\nLeft Stick:\n\nRight Stick:\n\nLeft Trigger:\n\nRight Trigger:\n\nButtons:\n\nHat/D-pad:\n\nPlaystation 4 Controller (name: \"PS4 Controller\")\n\nIn pygame 2 the PS4 controller mapping has 6 Axes and 16 buttons.\n\nLeft Stick:\n\nRight Stick:\n\nLeft Trigger:\n\nRight Trigger:\n\nButtons:\n\nPygame 1\n\nAxis and hat mappings are listed from -1 to +1.\n\nX-Box 360 Controller (name: \"Controller (XBOX 360 For Windows)\")\n\nIn pygame 1 the X360 controller mapping has 5 Axes, 10 buttons and 1 hat.\n\nLeft Stick:\n\nRight Stick:\n\nLeft Trigger & Right Trigger:\n\nButtons:\n\nHat/D-pad:\n\nPlaystation 4 Controller (name: \"Wireless Controller\")\n\nIn pygame 1 the PS4 controller mapping has 6 Axes and 14 buttons and 1 hat.\n\nLeft Stick:\n\nRight Stick:\n\nLeft Trigger:\n\nRight Trigger:\n\nButtons:\n\nHat/D-pad:\n\n"}, {"name": "module-key", "path": "ref/key", "type": "pygame.key", "text": "\nThis module contains functions for dealing with the keyboard.\n\nThe `pygame.event` queue gets `pygame.KEYDOWN` and `pygame.KEYUP` events when\nthe keyboard buttons are pressed and released. Both events have `key` and\n`mod` attributes.\n\nThe `pygame.KEYDOWN` event has the additional attributes `unicode` and\n`scancode`.\n\nNew in pygame 2.0.0: The `pygame.TEXTINPUT` event is preferred to the\n`unicode` attribute of `pygame.KEYDOWN`. The attribute `text` contains the\ninput.\n\nThe following is a list of all the constants (from `pygame.locals`) used to\nrepresent keyboard keys.\n\nPortability note: The integers for key constants differ between pygame 1 and\n2. Always use key constants (`K_a`) rather than integers directly (`97`) so\nthat your key handling code works well on both pygame 1 and pygame 2.\n\nThe keyboard also has a list of modifier states (from `pygame.locals`) that\ncan be assembled by bitwise-ORing them together.\n\nThe modifier information is contained in the `mod` attribute of the\n`pygame.KEYDOWN` and `pygame.KEYUP` events. The `mod` attribute is a bitmask\nof all the modifier keys that were in a pressed state when the event occurred.\nThe modifier information can be decoded using a bitwise AND (except for\n`KMOD_NONE`, which should be compared using equals `==`). For example:\n\nReturns `True` when the display window has keyboard focus from the system. If\nthe display needs to ensure it does not lose keyboard focus, it can use\n`pygame.event.set_grab()` to grab all input.\n\nReturns a sequence of boolean values representing the state of every key on\nthe keyboard. Use the key constant values to index the array. A `True` value\nmeans the that button is pressed.\n\nNote\n\nGetting the list of pushed buttons with this function is not the proper way to\nhandle text entry from the user. There is no way to know the order of keys\npressed, and rapidly pushed keys can be completely unnoticed between two calls\nto `pygame.key.get_pressed()`. There is also no way to translate these pushed\nkeys into a fully translated character value. See the `pygame.KEYDOWN` events\non the `pygame.event` queue for this functionality.\n\nReturns a single integer representing a bitmask of all the modifier keys being\nheld. Using bitwise operators you can test if specific modifier keys are\npressed.\n\nCreate a bitmask of the modifier key constants you want to impose on your\nprogram.\n\nWhen the keyboard repeat is enabled, keys that are held down will generate\nmultiple `pygame.KEYDOWN` events. The `delay` parameter is the number of\nmilliseconds before the first repeated `pygame.KEYDOWN` event will be sent.\nAfter that, another `pygame.KEYDOWN` event will be sent every `interval`\nmilliseconds. If a `delay` value is provided and an `interval` value is not\nprovided or is 0, then the `interval` will be set to the same value as\n`delay`.\n\nTo disable key repeat call this function with no arguments or with `delay` set\nto 0.\n\nWhen pygame is initialized the key repeat is disabled.\n\nChanged in pygame 2.0.0: A `ValueError` is now raised (instead of a\n`pygame.error`) if `delay` or `interval` is < 0.\n\nGet the `delay` and `interval` keyboard repeat values. Refer to\n`pygame.key.set_repeat()` for a description of these values.\n\nNew in pygame 1.8.\n\nGet the descriptive name of the button from a keyboard button id constant.\n\nGet the key identifier code from the descriptive name of the key. This returns\nan integer matching one of the K_* keycodes. For example:\n\nNew in pygame 2.0.0.\n\nStart receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events.\n\nA `pygame.TEXTEDITING` event is received when an IME composition is started or\nchanged. It contains the composition `text`, `length`, and editing `start`\nposition within the composition (attributes `text`, `length`, and `start`,\nrespectively). When the composition is committed (or non-IME input is\nreceived), a `pygame.TEXTINPUT` event is generated.\n\nText input events handling is on by default.\n\nNew in pygame 2.0.0.\n\nStop receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events.\n\nText input events handling is on by default\n\nNew in pygame 2.0.0.\n\nThis sets the rectangle used for typing with an IME. It controls where the\ncandidate list will open, if supported.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "module-locals", "path": "ref/locals", "type": "pygame.locals", "text": "\nThis module contains various constants used by pygame. Its contents are\nautomatically placed in the pygame module namespace. However, an application\ncan use `pygame.locals` to include only the pygame constants with a `from\npygame.locals import *`.\n\nDetailed descriptions of the various constants can be found throughout the\npygame documentation. Here are the locations of some of them.\n\n"}, {"name": "module-mask", "path": "ref/mask", "type": "pygame.mask", "text": "\nUseful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel\nto store which parts collide.\n\nNew in pygame 1.8.\n\nCreates a `Mask` object from the given surface by setting all the opaque\npixels and not setting the transparent pixels.\n\nIf the surface uses a color-key, then it is used to decide which bits in the\nresulting mask are set. All the pixels that are not equal to the color-key are\nset and the pixels equal to the color-key are not set.\n\nIf a color-key is not used, then the alpha value of each pixel is used to\ndecide which bits in the resulting mask are set. All the pixels that have an\nalpha value greater than the `threshold` parameter are set and the pixels with\nan alpha value less than or equal to the `threshold` are not set.\n\na newly created `Mask` object from the given surface\n\nMask\n\nNote\n\nThis function is used to create the masks for `pygame.sprite.collide_mask()`.\n\nThis is a more featureful method of getting a `Mask` from a surface.\n\nIf the optional `othersurface` is not used, all the pixels within the\n`threshold` of the `color` parameter are set in the resulting mask.\n\nIf the optional `othersurface` is used, every pixel in the first surface that\nis within the `threshold` of the corresponding pixel in `othersurface` is set\nin the resulting mask.\n\na newly created `Mask` object from the given surface\n\nMask\n\nA `Mask` object is used to represent a 2D bitmask. Each bit in the mask\nrepresents a pixel. 1 is used to indicate a set bit and 0 is used to indicate\nan unset bit. Set bits in a mask can be used to detect collisions with other\nmasks and their set bits.\n\nA filled mask has all of its bits set to 1, conversely an\nunfilled/cleared/empty mask has all of its bits set to 0. Masks can be created\nunfilled (default) or filled by using the `fill` parameter. Masks can also be\ncleared or filled using the `pygame.mask.Mask.clear()` and\n`pygame.mask.Mask.fill()` methods respectively.\n\nA mask's coordinates start in the top left corner at `(0, 0)` just like\n`pygame.Surface`. Individual bits can be accessed using the\n`pygame.mask.Mask.get_at()` and `pygame.mask.Mask.set_at()` methods.\n\nThe methods `overlap()`, `overlap_area()`, `overlap_mask()`, `draw()`,\n`erase()`, and `convolve()` use an offset parameter to indicate the offset of\nanother mask's top left corner from the calling mask's top left corner. The\ncalling mask's top left corner is considered to be the origin `(0, 0)`.\nOffsets are a tuple or list of 2 integer values `(x_offset, y_offset)`.\nPositive and negative offset values are supported.\n\na newly created `Mask` object\n\nMask\n\nChanged in pygame 2.0.0: Shallow copy support added. The `Mask` class supports\nthe special method `__copy__()` and shallow copying via `copy.copy(mask)`.\n\nChanged in pygame 2.0.0: Subclassing support added. The `Mask` class can be\nused as a base class.\n\nChanged in pygame 1.9.5: Added support for keyword arguments.\n\nChanged in pygame 1.9.5: Added the optional keyword parameter `fill`.\n\nChanged in pygame 1.9.5: Added support for masks with a width and/or a height\nof 0.\n\nNote\n\nIf a mask subclass needs to copy any instance specific attributes then it\nshould override the `__copy__()` method. The overridden `__copy__()` method\nneeds to call `super().__copy__()` and then copy the required data as in the\nfollowing example code.\n\nNew in pygame 2.0.0.\n\nReturns a new `pygame.Rect()` object based on the size of this mask. The\nrect's default position will be `(0, 0)` and its default width and height will\nbe the same as this mask's. The rect's attributes can be altered via\n`pygame.Rect()` attribute keyword arguments/values passed into this method. As\nan example, `a_mask.get_rect(center=(10, 5))` would create a `pygame.Rect()`\nbased on the mask's size centered at the given position.\n\nNew in pygame 2.0.0.\n\n`None`\n\nNoneType\n\nIndexError \\-- if the position is outside of the mask's bounds\n\nReturns the first point of intersection encountered between this mask and\n`othermask`. A point of intersection is 2 overlapping set bits.\n\nThe current algorithm searches the overlapping area in `sizeof(unsigned long\nint) * CHAR_BIT` bit wide column blocks (the value of `sizeof(unsigned long\nint) * CHAR_BIT` is platform dependent, for clarity it will be referred to as\n`W`). Starting at the top left corner it checks bits 0 to `W - 1` of the first\nrow (`(0, 0)` to `(W - 1, 0)`) then continues to the next row (`(0, 1)` to `(W\n- 1, 1)`). Once this entire column block is checked, it continues to the next\none (`W` to `2 * W - 1`). This is repeated until it finds a point of\nintersection or the entire overlapping area is checked.\n\npoint of intersection or `None` if no intersection\n\ntuple(int, int) or NoneType\n\nReturns the number of overlapping set bits between between this mask and\n`othermask`.\n\nThis can be useful for collision detection. An approximate collision normal\ncan be found by calculating the gradient of the overlapping area through the\nfinite difference.\n\nthe number of overlapping set bits\n\nint\n\nReturns a `Mask`, the same size as this mask, containing the overlapping set\nbits between this mask and `othermask`.\n\na newly created `Mask` with the overlapping bits set\n\nMask\n\nSets all bits in the mask to 1.\n\nSets all bits in the mask to 0.\n\nFlips all of the bits in the mask. All the set bits are cleared to 0 and all\nthe unset bits are set to 1.\n\nCreates a new `Mask` of the requested size with its bits scaled from this\nmask.\n\nPerforms a bitwise OR, drawing `othermask` onto this mask.\n\n`None`\n\nNoneType\n\nErases (clears) all bits set in `othermask` from this mask.\n\n`None`\n\nNoneType\n\nFinds the centroid (the center mass of the set bits) for this mask.\n\nFinds the approximate orientation (from -90 to 90 degrees) of the set bits in\nthe mask. This works best if performed on a mask with only one connected\ncomponent.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nReturns a list of points of the outline of the first connected component\nencountered in the mask. To find a connected component, the mask is searched\nper row (left to right) starting in the top left corner.\n\nThe `every` optional parameter skips set bits in the outline. For example,\nsetting it to 10 would return a list of every 10th set bit in the outline.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nConvolve this mask with the given `othermask`.\n\na `Mask` with the `(i - offset[0], j - offset[1])` bit set, if shifting\n`othermask` (such that its bottom right corner is at `(i, j)`) causes it to\noverlap with this mask\n\nIf an `outputmask` is specified, the output is drawn onto it and it is\nreturned. Otherwise a mask of size `(MAX(0, width + othermask's width - 1),\nMAX(0, height + othermask's height - 1))` is created and returned.\n\nMask\n\nA connected component is a group (1 or more) of connected set bits\n(orthogonally and diagonally). The SAUF algorithm, which checks 8 point\nconnectivity, is used to find a connected component in the mask.\n\nBy default this method will return a `Mask` containing the largest connected\ncomponent in the mask. Optionally, a bit coordinate can be specified and the\nconnected component containing it will be returned. If the bit at the given\nlocation is not set, the returned `Mask` will be empty (no bits set).\n\nIf the `pos` parameter is provided then the mask returned will have the\nconnected component that contains this position. An empty mask will be\nreturned if the `pos` parameter selects an unset bit.\n\nProvides a list containing a `Mask` object for each connected component.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nProvides a list containing a bounding rect for each connected component.\n\nNote\n\nSee `connected_component()` for details on how a connected component is\ncalculated.\n\nDraws this mask on the given surface. Set bits (bits set to 1) and unset bits\n(bits set to 0) can be drawn onto a surface.\n\nthe `surface` parameter (or a newly created surface if no `surface` parameter\nwas provided) with this mask drawn on it\n\nSurface\n\nValueError \\-- if the `setsurface` parameter or `unsetsurface` parameter does\nnot have the same format (bytesize/bitsize/alpha) as the `surface` parameter\n\nNote\n\nTo skip drawing the set bits, both `setsurface` and `setcolor` must be `None`.\nThe `setsurface` parameter defaults to `None`, but `setcolor` defaults to a\ncolor value and therefore must be set to `None`.\n\nNote\n\nTo skip drawing the unset bits, both `unsetsurface` and `unsetcolor` must be\n`None`. The `unsetsurface` parameter defaults to `None`, but `unsetcolor`\ndefaults to a color value and therefore must be set to `None`.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "module-math", "path": "ref/math", "type": "pygame.math", "text": "\nThe pygame math module currently provides Vector classes in two and three\ndimensions, `Vector2` and `Vector3` respectively.\n\nThey support the following numerical operations: `vec+vec`, `vec-vec`,\n`vec*number`, `number*vec`, `vec/number`, `vec//number`, `vec+=vec`,\n`vec-=vec`, `vec*=number`, `vec/=number`, `vec//=number`.\n\nAll these operations will be performed elementwise. In addition `vec*vec` will\nperform a scalar-product (a.k.a. dot-product). If you want to multiply every\nelement from vector v with every element from vector w you can use the\nelementwise method: `v.elementwise() * w`\n\nThe coordinates of a vector can be retrieved or set using attributes or\nsubscripts\n\nMultiple coordinates can be set using slices or swizzling\n\nNew in pygame 1.9.2pre.\n\nChanged in pygame 1.9.4: Removed experimental notice.\n\nChanged in pygame 1.9.4: Allow scalar construction like GLSL Vector2(2) ==\nVector2(2.0, 2.0)\n\nChanged in pygame 1.9.4: `pygame.math` required import. More convenient\n`pygame.Vector2` and `pygame.Vector3`.\n\nSome general information about the `Vector2` class.\n\ncalculates the third component of the cross-product.\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)`\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude_squared() == vec.x**2 + vec.y**2`. This is faster than\n`vec.magnitude()` because it avoids the square root.\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length() == math.sqrt(vec.x**2 + vec.y**2)`\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length_squared() == vec.x**2 + vec.y**2`. This is\nfaster than `vec.length()` because it avoids the square root.\n\nReturns a new vector that has `length` equal to `1` and the same direction as\nself.\n\nNormalizes the vector so that it has `length` equal to `1`. The direction of\nthe vector is not changed.\n\nReturns True if the vector has `length` equal to `1`. Otherwise it returns\n`False`.\n\nScales the vector so that it has the given length. The direction of the vector\nis not changed. You can also scale to length `0`. If the vector is the zero\nvector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\nReturns a new vector that points in the direction as if self would bounce of a\nsurface characterized by the given surface normal. The length of the new\nvector is the same as self's.\n\nChanges the direction of self as if it would have been reflected of a surface\nwith the given surface normal.\n\nReturns a Vector which is a linear interpolation between self and the given\nVector. The second parameter determines how far between self and other the\nresult is going to be. It must be a value between `0` and `1` where `0` means\nself and `1` means other will be returned.\n\nCalculates the spherical interpolation from self to the given Vector. The\nsecond argument - often called t - must be in the range `[-1, 1]`. It\nparametrizes where - in between the two vectors - the result should be. If a\nnegative value is given the interpolation will not take the complement of the\nshortest path.\n\nApplies the following operation to each element of the vector.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise by the given angle in degrees. The length\nof the vector is not changed.\n\nRotates the vector counterclockwise by the given angle in radians. The length\nof the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns the angle between self and the given vector.\n\nReturns a tuple `(r, phi)` where r is the radial distance, and phi is the\nazimuthal angle.\n\nSets x and y from a tuple (r, phi) where r is the radial distance, and phi is\nthe azimuthal angle.\n\nSets coordinates x and y in place.\n\nNew in pygame 1.9.5.\n\nSome general information about the Vector3 class.\n\ncalculates the cross-product.\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)`\n\ncalculates the magnitude of the vector which follows from the theorem:\n`vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2`. This is faster\nthan `vec.magnitude()` because it avoids the square root.\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length() == math.sqrt(vec.x**2 + vec.y**2 +\nvec.z**2)`\n\ncalculates the Euclidean length of the vector which follows from the\nPythagorean theorem: `vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2`.\nThis is faster than `vec.length()` because it avoids the square root.\n\nReturns a new vector that has `length` equal to `1` and the same direction as\nself.\n\nNormalizes the vector so that it has `length` equal to `1`. The direction of\nthe vector is not changed.\n\nReturns True if the vector has `length` equal to `1`. Otherwise it returns\n`False`.\n\nScales the vector so that it has the given length. The direction of the vector\nis not changed. You can also scale to length `0`. If the vector is the zero\nvector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\nReturns a new vector that points in the direction as if self would bounce of a\nsurface characterized by the given surface normal. The length of the new\nvector is the same as self's.\n\nChanges the direction of self as if it would have been reflected of a surface\nwith the given surface normal.\n\nReturns a Vector which is a linear interpolation between self and the given\nVector. The second parameter determines how far between self an other the\nresult is going to be. It must be a value between `0` and `1`, where `0` means\nself and `1` means other will be returned.\n\nCalculates the spherical interpolation from self to the given Vector. The\nsecond argument - often called t - must be in the range `[-1, 1]`. It\nparametrizes where - in between the two vectors - the result should be. If a\nnegative value is given the interpolation will not take the complement of the\nshortest path.\n\nApplies the following operation to each element of the vector.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in degrees around the given axis.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise by the given angle in radians around the given axis.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the given axis by the given angle\nin degrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the given axis by the given angle\nin radians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the x-axis by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the x-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the x-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the x-axis by the given angle in\nradians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the y-axis by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the y-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the y-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the y-axis by the given angle in\nradians. The length of the vector is not changed.\n\nNew in pygame 2.0.0.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the z-axis by the given angle in degrees.\n\nReturns a vector which has the same length as self but is rotated\ncounterclockwise around the z-axis by the given angle in radians.\n\nNew in pygame 2.0.0.\n\nRotates the vector counterclockwise around the z-axis by the given angle in\ndegrees. The length of the vector is not changed.\n\nRotates the vector counterclockwise around the z-axis by the given angle in\nradians. The length of the vector is not changed.\n\nReturns the angle between self and the given vector.\n\nReturns a tuple `(r, theta, phi)` where r is the radial distance, theta is the\ninclination angle and phi is the azimuthal angle.\n\nSets x, y and z from a tuple `(r, theta, phi)` where r is the radial distance,\ntheta is the inclination angle and phi is the azimuthal angle.\n\nSets coordinates x, y, and z in place.\n\nNew in pygame 1.9.5.\n\nDEPRECATED: Not needed anymore. Will be removed in a later version.\n\nEnables swizzling for all vectors until `disable_swizzling()` is called. By\ndefault swizzling is disabled.\n\nLets you get or set multiple coordinates as one attribute, eg `vec.xyz = 1, 2,\n3`.\n\nDEPRECATED: Not needed anymore. Will be removed in a later version.\n\nDisables swizzling for all vectors until `enable_swizzling()` is called. By\ndefault swizzling is disabled.\n\n"}, {"name": "module-midi", "path": "ref/midi", "type": "pygame.midi", "text": "\nNew in pygame 1.9.0.\n\nThe midi module can send output to midi devices and get input from midi\ndevices. It can also list midi devices on the system.\n\nThe midi module supports real and virtual midi devices.\n\nIt uses the portmidi library. Is portable to which ever platforms portmidi\nsupports (currently Windows, Mac OS X, and Linux).\n\nThis uses pyportmidi for now, but may use its own bindings at some point in\nthe future. The pyportmidi bindings are included with pygame.\n\nNew in pygame 2.0.0.\n\nThese are pygame events (`pygame.event`) reserved for midi use. The `MIDIIN`\nevent is used by `pygame.midi.midis2events()` when converting midi events to\npygame events.\n\nInitializes the `pygame.midi` module. Must be called before using the\n`pygame.midi` module.\n\nIt is safe to call this more than once.\n\nUninitializes the `pygame.midi` module. If `pygame.midi.init()` was called to\ninitialize the `pygame.midi` module, then this function will be called\nautomatically when your program exits.\n\nIt is safe to call this function more than once.\n\nGets the initialization state of the `pygame.midi` module.\n\nNew in pygame 1.9.5.\n\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\nUsed to indicate if any data exists.\n\nReads from the input buffer and gives back midi events.\n\nThe `buffer_size` specifies the number of output events to be buffered waiting\nfor output. In some cases (see below) PortMidi does not buffer output at all\nand merely passes data to a lower-level API, in which case buffersize is\nignored.\n\n`latency` is the delay in milliseconds applied to timestamps to determine when\nthe output should actually occur. If `latency` is <<0, 0 is assumed.\n\nIf `latency` is zero, timestamps are ignored and all output is delivered\nimmediately. If `latency` is greater than zero, output is delayed until the\nmessage timestamp plus the `latency`. In some cases, PortMidi can obtain\nbetter timing than your application by passing timestamps along to the device\ndriver or hardware. Latency may also help you to synchronize midi data to\naudio data by matching midi latency to the audio buffer latency.\n\nNote\n\nTime is measured relative to the time source indicated by time_proc.\nTimestamps are absolute, not relative delays or offsets.\n\nThe caller should immediately close the output port; this call may result in\ntransmission of a partial midi message. There is no abort for Midi input\nbecause the user can simply ignore messages in the buffer and close an input\ndevice at any time.\n\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\nTurn a note off in the output stream. The note must already be on for this to\nwork correctly.\n\nTurn a note on in the output stream. The note must already be off for this to\nwork correctly.\n\nSelect an instrument.\n\nAdjust the pitch of a channel. The value is a signed integer from -8192 to\n+8191. For example, 0 means \"no change\", +4096 is typically a semitone higher,\nand -8192 is 1 whole tone lower (though the musical range corresponding to the\npitch bend range can also be changed in some synthesizers).\n\nIf no value is given, the pitch bend is returned to \"no change\".\n\nNew in pygame 1.9.4.\n\nWrites series of MIDI information in the form of a list.\n\nExample:\n\nNote\n\nOutput MIDI information of 3 bytes or less. The `data` fields are optional and\nassumed to be 0 if omitted.\n\nExamples of status byte values:\n\nExample:\n\nWrites a timestamped system-exclusive midi message.\n\nExample:\n\nDevice ids range from 0 to `get_count() - 1`\n\nThe following describes the usage details for this function and the\n`get_default_output_id()` function.\n\nReturn the default device ID or `-1` if there are no devices. The result can\nbe passed to the `Input`/`Output` class.\n\nOn a PC the user can specify a default device by setting an environment\nvariable. To use device #1, for example:\n\nThe user should first determine the available device ID by using the supplied\napplication \"testin\" or \"testout\".\n\nIn general, the registry is a better place for this kind of info. With USB\ndevices that can come and go, using integers is not very reliable for device\nidentification. Under Windows, if `PM_RECOMMENDED_INPUT_DEVICE` (or\n`PM_RECOMMENDED_OUTPUT_DEVICE`) is NOT found in the environment, then the\ndefault device is obtained by looking for a string in the registry under:\n\nThe number of the first device with a substring that matches the string\nexactly is returned. For example, if the string in the registry is \"USB\" and\ndevice 1 is named \"In USB MidiSport 1x1\", then that will be the default input\nbecause it contains the string \"USB\".\n\nIn addition to the name, `get_device_info()` returns \"interf\", which is the\ninterface name. The \"interface\" is the underlying software system or API used\nby PortMidi to access devices. Supported interfaces:\n\nTo specify both the interface and the device name in the registry, separate\nthe two with a comma and a space. The string before the comma must be a\nsubstring of the \"interf\" string and the string after the space must be a\nsubstring of the \"name\" name string in order to match the device. e.g.:\n\nNote\n\nIn the current release, the default is simply the first device (the input or\noutput device with the lowest PmDeviceID).\n\nSee `get_default_input_id()` for usage details.\n\nGets the device info for a given id.\n\nTakes a sequence of midi events and returns list of pygame events.\n\nThe `midi_events` data is expected to be a sequence of `((status, data1,\ndata2, data3), timestamp)` midi events (all values required).\n\nThe time is reset to 0 when the `pygame.midi` module is initialized.\n\nexample:\n\nNew in pygame 1.9.5.\n\nexample:\n\nNew in pygame 1.9.5.\n\nexample:\n\nNew in pygame 1.9.5.\n\n"}, {"name": "module-mixer", "path": "ref/mixer", "type": "pygame.mixer", "text": "\nThis module contains classes for loading Sound objects and controlling\nplayback. The mixer module is optional and depends on SDL_mixer. Your program\nshould test that `pygame.mixer` is available and initialized before using it.\n\nThe mixer module has a limited number of channels for playback of sounds.\nUsually programs tell pygame to start playing audio and it selects an\navailable channel automatically. The default is 8 simultaneous channels, but\ncomplex programs can get more precise control over the number of channels and\ntheir use.\n\nAll sound playback is mixed in background threads. When you begin to play a\nSound object, it will return immediately while the sound continues to play. A\nsingle Sound object can also be actively played back multiple times.\n\nThe mixer also has a special streaming channel. This is for music playback and\nis accessed through the `pygame.mixer.music` module.\n\nThe mixer module must be initialized like other pygame modules, but it has\nsome extra conditions. The `pygame.mixer.init()` function takes several\noptional arguments to control the playback rate and sample size. Pygame will\ndefault to reasonable values, but pygame cannot perform Sound resampling, so\nthe mixer should be initialized to match the values of your audio resources.\n\n`NOTE`: For less laggy sound use a smaller buffer size. The default is set to\nreduce the chance of scratchy sounds on some computers. You can change the\ndefault buffer by calling `pygame.mixer.pre_init()` before\n`pygame.mixer.init()` or `pygame.init()` is called. For example:\n`pygame.mixer.pre_init(44100,-16,2, 1024)`\n\nInitialize the mixer module for Sound loading and playback. The default\narguments can be overridden to provide specific audio mixing. Keyword\narguments are accepted. For backward compatibility where an argument is set\nzero the default value is used (possible changed by a pre_init call).\n\nThe size argument represents how many bits are used for each audio sample. If\nthe value is negative then signed sample values will be used. Positive values\nmean unsigned audio samples will be used. An invalid value raises an\nexception.\n\nThe channels argument is used to specify whether to use mono or stereo. 1 for\nmono and 2 for stereo.\n\nThe buffer argument controls the number of internal samples used in the sound\nmixer. The default value should work for most cases. It can be lowered to\nreduce latency, but sound dropout may occur. It can be raised to larger values\nto ensure playback never skips, but it will impose latency on sound playback.\nThe buffer size must be a power of two (if not it is rounded up to the next\nnearest power of 2).\n\nSome platforms require the `pygame.mixer` module to be initialized after the\ndisplay modules have initialized. The top level `pygame.init()` takes care of\nthis automatically, but cannot pass any arguments to the mixer init. To solve\nthis, mixer has a function `pygame.mixer.pre_init()` to set the proper\ndefaults before the toplevel init is used.\n\nWhen using allowedchanges=0 it will convert the samples at runtime to match\nwhat the hardware supports. For example a sound card may not support 16bit\nsound samples, so instead it will use 8bit samples internally. If\nAUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will change\nto the closest that SDL2 supports.\n\nApart from 0, allowedchanged accepts the following constants ORed together:\n\nIt is safe to call this more than once, but after the mixer is initialized you\ncannot change the playback arguments without first calling\n`pygame.mixer.quit()`.\n\nChanged in pygame 1.8: The default `buffersize` was changed from 1024 to 3072.\n\nChanged in pygame 1.9.1: The default `buffersize` was changed from 3072 to\n4096.\n\nChanged in pygame 2.0.0: The default `buffersize` was changed from 4096 to\n512. The default frequency changed to 44100 from 22050.\n\nChanged in pygame 2.0.0: `size` can be 32 (32bit floats).\n\nChanged in pygame 2.0.0: `channels` can also be 4 or 6.\n\nNew in pygame 2.0.0: `allowedchanges` argument added\n\nCall pre_init to change the defaults used when the real `pygame.mixer.init()`\nis called. Keyword arguments are accepted. The best way to set custom mixer\nplayback values is to call `pygame.mixer.pre_init()` before calling the top\nlevel `pygame.init()`. For backward compatibility argument values of zero are\nreplaced with the startup defaults.\n\nChanged in pygame 1.8: The default `buffersize` was changed from 1024 to 3072.\n\nChanged in pygame 1.9.1: The default `buffersize` was changed from 3072 to\n4096.\n\nChanged in pygame 2.0.0: The default `buffersize` was changed from 4096 to\n512. The default frequency changed to 44100 from 22050.\n\nThis will uninitialize `pygame.mixer`. All playback will stop and any loaded\nSound objects may not be compatible with the mixer if it is reinitialized\nlater.\n\nIf the mixer is initialized, this returns the playback arguments it is using.\nIf the mixer has not been initialized this returns `None`.\n\nThis will stop all playback of all active mixer channels.\n\nThis will temporarily stop all playback on the active mixer channels. The\nplayback can later be resumed with `pygame.mixer.unpause()`\n\nThis will resume all active sound channels after they have been paused.\n\nThis will fade out the volume on all active channels over the time argument in\nmilliseconds. After the sound is muted the playback will stop.\n\nSets the number of available channels for the mixer. The default value is 8.\nThe value can be increased or decreased. If the value is decreased, sounds\nplaying on the truncated channels are stopped.\n\nReturns the number of currently active playback channels.\n\nThe mixer can reserve any number of channels that will not be automatically\nselected for playback by Sounds. If sounds are currently playing on the\nreserved channels they will not be stopped.\n\nThis allows the application to reserve a specific number of channels for\nimportant sounds that must not be dropped or have a guaranteed channel to play\non.\n\nThis will find and return an inactive Channel object. If there are no inactive\nChannels this function will return `None`. If there are no inactive channels\nand the force argument is `True`, this will find the Channel with the longest\nrunning Sound and return it.\n\nIf the mixer has reserved channels from `pygame.mixer.set_reserved()` then\nthose channels will not be returned here.\n\nReturns `True` if the mixer is busy mixing any channels. If the mixer is idle\nthen this return `False`.\n\nNote\n\nThe linked and compile version numbers should be the same.\n\nNew in pygame 2.0.0.\n\nLoad a new sound buffer from a filename, a python file object or a readable\nbuffer object. Limited resampling will be performed to help the sample match\nthe initialize arguments for the mixer. A Unicode string can only be a file\npathname. A Python 2.x string or a Python 3.x bytes object can be either a\npathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid\nambiguity; otherwise Sound may guess wrong. If the array keyword is used, the\nobject is expected to export a version 3, `C` level array interface or, for\nPython 2.6 or later, a new buffer interface (The object is checked for a\nbuffer interface first.)\n\nThe Sound object represents actual sound sample data. Methods that change the\nstate of the Sound object will the all instances of the Sound playback. A\nSound object also exports an array interface, and, for Python 2.6 or later, a\nnew buffer interface.\n\nThe Sound can be loaded from an `OGG` audio file or from an uncompressed\n`WAV`.\n\nNote: The buffer will be copied internally, no data will be shared between it\nand the Sound object.\n\nFor now buffer and array support is consistent with `sndarray.make_sound` for\nNumeric arrays, in that sample sign and byte order are ignored. This will\nchange, either by correctly handling sign and byte order, or by raising an\nexception when different. Also, source samples are truncated to fit the audio\nsample size. This will not change.\n\nNew in pygame 1.8: `pygame.mixer.Sound(buffer)`\n\nNew in pygame 1.9.2: `pygame.mixer.Sound` keyword arguments and array\ninterface support\n\nBegin playback of the Sound (i.e., on the computer's speakers) on an available\nChannel. This will forcibly select a Channel, so playback may cut off a\ncurrently playing sound if necessary.\n\nThe loops argument controls how many times the sample will be repeated after\nbeing played the first time. A value of 5 means that the sound will be played\nonce, then repeated five times, and so is played a total of six times. The\ndefault value (zero) means the Sound is not repeated, and so is only played\nonce. If loops is set to -1 the Sound will loop indefinitely (though you can\nstill call `stop()` to stop it).\n\nThe maxtime argument can be used to stop playback after a given number of\nmilliseconds.\n\nThe fade_ms argument will make the sound start playing at 0 volume and fade up\nto full volume over the time given. The sample may end before the fade-in is\ncomplete.\n\nThis returns the Channel object for the channel that was selected.\n\nThis will stop the playback of this Sound on any active Channels.\n\nThis will stop playback of the sound after fading it out over the time\nargument in milliseconds. The Sound will fade and stop on all actively playing\nchannels.\n\nThis will set the playback volume (loudness) for this Sound. This will\nimmediately affect the Sound if it is playing. It will also affect any future\nplayback of this Sound.\n\nvolume in the range of 0.0 to 1.0 (inclusive)\n\nReturn a value from 0.0 to 1.0 representing the volume for this Sound.\n\nReturn the number of active channels this sound is playing on.\n\nReturn the length of this Sound in seconds.\n\nReturn a copy of the Sound object buffer as a bytes (for Python 3.x) or str\n(for Python 2.x) object.\n\nNew in pygame 1.9.2.\n\nReturn a Channel object for one of the current channels. The id must be a\nvalue from 0 to the value of `pygame.mixer.get_num_channels()`.\n\nThe Channel object can be used to get fine control over the playback of\nSounds. A channel can only playback a single Sound at time. Using channels is\nentirely optional since pygame can manage them by default.\n\nThis will begin playback of a Sound on a specific Channel. If the Channel is\ncurrently playing any other Sound it will be stopped.\n\nThe loops argument has the same meaning as in `Sound.play()`: it is the number\nof times to repeat the sound after the first time. If it is 3, the sound will\nbe played 4 times (the first time, then three more). If loops is -1 then the\nplayback will repeat indefinitely.\n\nAs in `Sound.play()`, the maxtime argument can be used to stop playback of the\nSound after a given number of milliseconds.\n\nAs in `Sound.play()`, the fade_ms argument can be used fade in the sound.\n\nStop sound playback on a channel. After playback is stopped the channel\nbecomes available for new Sounds to play on it.\n\nTemporarily stop the playback of sound on a channel. It can be resumed at a\nlater time with `Channel.unpause()`\n\nResume the playback on a paused channel.\n\nStop playback of a channel after fading out the sound over the given time\nargument in milliseconds.\n\nSet the volume (loudness) of a playing sound. When a channel starts to play\nits volume value is reset. This only affects the current sound. The value\nargument is between 0.0 and 1.0.\n\nIf one argument is passed, it will be the volume of both speakers. If two\narguments are passed and the mixer is in stereo mode, the first argument will\nbe the volume of the left speaker and the second will be the volume of the\nright speaker. (If the second argument is `None`, the first argument will be\nthe volume of both speakers.)\n\nIf the channel is playing a Sound on which `set_volume()` has also been\ncalled, both calls are taken into account. For example:\n\nReturn the volume of the channel for the current playing sound. This does not\ntake into account stereo separation used by `Channel.set_volume()`. The Sound\nobject also has its own volume which is mixed with the channel.\n\nReturns `True` if the channel is actively mixing sound. If the channel is idle\nthis returns `False`.\n\nReturn the actual Sound object currently playing on this channel. If the\nchannel is idle `None` is returned.\n\nWhen a Sound is queued on a Channel, it will begin playing immediately after\nthe current Sound is finished. Each channel can only have a single Sound\nqueued at a time. The queued Sound will only play if the current playback\nfinished automatically. It is cleared on any other call to `Channel.stop()` or\n`Channel.play()`.\n\nIf there is no sound actively playing on the Channel then the Sound will begin\nplaying immediately.\n\nIf a Sound is already queued on this channel it will be returned. Once the\nqueued sound begins playback it will no longer be on the queue.\n\nWhen an endevent is set for a channel, it will send an event to the pygame\nqueue every time a sound finishes playing on that channel (not just the first\ntime). Use `pygame.event.get()` to retrieve the endevent once it's sent.\n\nNote that if you called `Sound.play(n)` or `Channel.play(sound,n)`, the end\nevent is sent only once: after the sound has been played \"n+1\" times (see the\ndocumentation of Sound.play).\n\nIf `Channel.stop()` or `Channel.play()` is called while the sound was still\nplaying, the event will be posted immediately.\n\nThe type argument will be the event id sent to the queue. This can be any\nvalid event type, but a good choice would be a value between\n`pygame.locals.USEREVENT` and `pygame.locals.NUMEVENTS`. If no type argument\nis given then the Channel will stop sending endevents.\n\nReturns the event type to be sent every time the Channel finishes playback of\na Sound. If there is no endevent the function returns `pygame.NOEVENT`.\n\n"}, {"name": "module-mixer.music", "path": "ref/music", "type": "pygame.mixer.music", "text": "\nThe music module is closely tied to `pygame.mixer`. Use the music module to\ncontrol the playback of music in the sound mixer.\n\nThe difference between the music playback and regular Sound playback is that\nthe music is streamed, and never actually loaded all at once. The mixer system\nonly supports a single music stream at once.\n\nBe aware that `MP3` support is limited. On some systems an unsupported format\ncan crash the program, `e.g`. Debian Linux. Consider using `OGG` instead.\n\nThis will load a music filename/file object and prepare it for playback. If a\nmusic stream is already playing it will be stopped. This does not start the\nmusic playing.\n\nThis closes resources like files for any music that may be loaded.\n\nNew in pygame 2.0.0.\n\nThis will play the loaded music stream. If the music is already playing it\nwill be restarted.\n\n`loops` is an optional integer argument, which is `0` by default, it tells how\nmany times to repeat the music. The music repeats indefinately if this\nargument is set to `-1`.\n\n`start` is an optional float argument, which is `0.0` by default, which\ndenotes the position in time, the music starts playing from. The starting\nposition depends on the format of the music played. `MP3` and `OGG` use the\nposition as time in seconds. For mp3s the start time position selected may not\nbe accurate as things like variable bit rate encoding and ID3 tags can throw\noff the timing calculations. For `MOD` music it is the pattern order number.\nPassing a start position will raise a NotImplementedError if the start\nposition cannot be set.\n\n`fade_ms` is an optional integer argument, which is `0` by default, makes the\nmusic start playing at `0` volume and fade up to full volume over the given\ntime. The sample may end before the fade-in is complete.\n\nChanged in pygame 2.0.0: Added optional `fade_ms` argument\n\nResets playback of the current music to the beginning.\n\nStops the music playback if it is currently playing. It Won't Unload the\nmusic.\n\nTemporarily stop playback of the music stream. It can be resumed with the\n`pygame.mixer.music.unpause()` function.\n\nThis will resume the playback of a music stream after it has been paused.\n\nFade out and stop the currently playing music.\n\nThe `time` argument denotes the integer milliseconds for which the fading\neffect is generated.\n\nNote, that this function blocks until the music has faded out. Calls to\n`fadeout()` and `set_volume()` will have no effect during this time. If an\nevent was set using `set_endevent()` it will be called after the music has\nfaded.\n\nSet the volume of the music playback.\n\nThe `volume` argument is a float between `0.0` and `1.0` that sets volume.\nWhen new music is loaded the volume is reset to full volume.\n\nReturns the current volume for the mixer. The value will be between `0.0` and\n`1.0`.\n\nReturns True when the music stream is actively playing. When the music is idle\nthis returns False. In pygame 2.0.1 and above this function returns False when\nthe music is paused. In pygame 1 it returns True when the music is paused.\n\nChanged in pygame 2.0.1: Returns False when music paused.\n\nThis sets the position in the music file where playback will start. The\nmeaning of \"pos\", a float (or a number that can be converted to a float),\ndepends on the music format.\n\nFor `MOD` files, pos is the integer pattern number in the module. For `OGG` it\nis the absolute position, in seconds, from the beginning of the sound. For\n`MP3` files, it is the relative position, in seconds, from the current\nposition. For absolute positioning in an `MP3` file, first call `rewind()`.\n\nOther file formats are unsupported. Newer versions of SDL_mixer have better\npositioning support than earlier ones. An SDLError is raised if a particular\nformat does not support positioning.\n\nFunction `set_pos()` calls underlining SDL_mixer function\n`Mix_SetMusicPosition`.\n\nNew in pygame 1.9.2.\n\nThis gets the number of milliseconds that the music has been playing for. The\nreturned time only represents how long the music has been playing; it does not\ntake into account any starting position offsets.\n\nThis will load a sound file and queue it. A queued sound file will begin as\nsoon as the current sound naturally ends. Only one sound can be queued at a\ntime. Queuing a new sound while another sound is queued will result in the new\nsound becoming the queued sound. Also, if the current sound is ever stopped or\nchanged, the queued sound will be lost.\n\nThe following example will play music by Bach six times, then play music by\nMozart once:\n\nThis causes pygame to signal (by means of the event queue) when the music is\ndone playing. The argument determines the type of event that will be queued.\n\nThe event will be queued every time the music finishes, not just the first\ntime. To stop the event from being queued, call this method with no argument.\n\nReturns the event type to be sent every time the music finishes playback. If\nthere is no endevent the function returns `pygame.NOEVENT`.\n\n"}, {"name": "module-mouse", "path": "ref/mouse", "type": "pygame.mouse", "text": "\nThe mouse functions can be used to get the current state of the mouse device.\nThese functions can also alter the system cursor for the mouse.\n\nWhen the display mode is set, the event queue will start receiving mouse\nevents. The mouse buttons generate `pygame.MOUSEBUTTONDOWN` and\n`pygame.MOUSEBUTTONUP` events when they are pressed and released. These events\ncontain a button attribute representing which button was pressed. The mouse\nwheel will generate `pygame.MOUSEBUTTONDOWN` and `pygame.MOUSEBUTTONUP` events\nwhen rolled. The button will be set to 4 when the wheel is rolled up, and to\nbutton 5 when the wheel is rolled down. Whenever the mouse is moved it\ngenerates a `pygame.MOUSEMOTION` event. The mouse movement is broken into\nsmall and accurate motion events. As the mouse is moving many motion events\nwill be placed on the queue. Mouse motion events that are not properly cleaned\nfrom the event queue are the primary reason the event queue fills up.\n\nIf the mouse cursor is hidden, and input is grabbed to the current display the\nmouse will enter a virtual input mode, where the relative movements of the\nmouse will never be stopped by the borders of the screen. See the functions\n`pygame.mouse.set_visible()` and `pygame.event.set_grab()` to get this\nconfigured.\n\nMouse Wheel Behavior in pygame 2\n\nThere is proper functionality for mouse wheel behaviour with pygame 2\nsupporting `pygame.MOUSEWHEEL` events. The new events support horizontal and\nvertical scroll movements, with signed integer values representing the amount\nscrolled (`x` and `y`), as well as `flipped` direction (the set positive and\nnegative values for each axis is flipped). Read more about SDL2 input-related\nchanges here https://wiki.libsdl.org/MigrationGuide#Input\n\nIn pygame 2, the mouse wheel functionality can be used by listening for the\n`pygame.MOUSEWHEEL` type of an event. When this event is triggered, a\ndeveloper can access the appropriate `Event` object with `pygame.event.get()`.\nThe object can be used to access data about the mouse scroll, such as `which`\n(it will tell you what exact mouse device trigger the event).\n\nReturns a sequence of booleans representing the state of all the mouse\nbuttons. A true value means the mouse is currently being pressed at the time\nof the call.\n\nNote, to get all of the mouse events it is better to use either\n`pygame.event.wait()` or `pygame.event.get()` and check all of those events to\nsee if they are `MOUSEBUTTONDOWN`, `MOUSEBUTTONUP`, or `MOUSEMOTION`.\n\nNote, that on `X11` some X servers use middle button emulation. When you click\nboth buttons `1` and `3` at the same time a `2` button event can be emitted.\n\nNote, remember to call `pygame.event.get()` before this function. Otherwise it\nwill not work as expected.\n\nTo support five button mice, an optional parameter `num_buttons` has been\nadded in pygame 2. When this is set to `5`, `button4` and `button5` are added\nto the returned tuple. Only `3` and `5` are valid values for this parameter.\n\nChanged in pygame 2.0.0: `num_buttons` argument added\n\nReturns the `x` and `y` position of the mouse cursor. The position is relative\nto the top-left corner of the display. The cursor position can be located\noutside of the display window, but is always constrained to the screen.\n\nReturns the amount of movement in `x` and `y` since the previous call to this\nfunction. The relative movement of the mouse cursor is constrained to the\nedges of the screen, but see the virtual input mouse mode for a way around\nthis. Virtual input mode is described at the top of the page.\n\nSet the current mouse position to arguments given. If the mouse cursor is\nvisible it will jump to the new coordinates. Moving the mouse will generate a\nnew `pygame.MOUSEMOTION` event.\n\nIf the bool argument is true, the mouse cursor will be visible. This will\nreturn the previous visible state of the cursor.\n\nGet the current visibility state of the mouse cursor. `True` if the mouse is\nvisible, `False` otherwise.\n\nNew in pygame 2.0.0.\n\nReturns true when pygame is receiving mouse input events (or, in windowing\nterminology, is \"active\" or has the \"focus\").\n\nThis method is most useful when working in a window. By contrast, in full-\nscreen mode, this method always returns true.\n\nNote: under `MS` Windows, the window that has the mouse focus also has the\nkeyboard focus. But under X-Windows, one window can receive mouse events and\nanother receive keyboard events. `pygame.mouse.get_focused()` indicates\nwhether the pygame window receives mouse events.\n\nWhen the mouse cursor is visible, it will be displayed as a black and white\nbitmap using the given bitmask arrays. The `size` is a sequence containing the\ncursor width and height. `hotspot` is a sequence containing the cursor hotspot\nposition.\n\nA cursor has a width and height, but a mouse position is represented by a set\nof point coordinates. So the value passed into the cursor `hotspot` variable\nhelps pygame to actually determine at what exact point the cursor is at.\n\n`xormasks` is a sequence of bytes containing the cursor xor data masks. Lastly\n`andmasks`, a sequence of bytes containing the cursor bitmask data. To create\nthese variables, we can make use of the `pygame.cursors.compile()` function.\n\nWidth and height must be a multiple of 8, and the mask arrays must be the\ncorrect size for the given width and height. Otherwise an exception is raised.\n\nSee the `pygame.cursor` module for help creating default and custom masks for\nthe mouse cursor and also for more examples related to cursors.\n\nWhen the mouse cursor is visible, it will displayed as a operating system\nspecific variant of the options below.\n\nNew in pygame 2.0.0.\n\nGet the information about the mouse system cursor. The return value is the\nsame data as the arguments passed into `pygame.mouse.set_cursor()`.\n\nNote\n\nThis method is unavailable with pygame 2, as SDL2 does not provide the\nunderlying code to implement this method.\n\n"}, {"name": "module-pixelcopy", "path": "ref/pixelcopy", "type": "pygame.pixelcopy", "text": "\nThe `pygame.pixelcopy` module contains functions for copying between surfaces\nand objects exporting an array structure interface. It is a backend for\n`pygame.surfarray`, adding NumPy support. But pixelcopy is more general, and\nintended for direct use.\n\nThe array struct interface exposes an array's data in a standard way. It was\nintroduced in NumPy. In Python 2.7 and above it is replaced by the new buffer\nprotocol, though the buffer protocol is still a work in progress. The array\nstruct interface, on the other hand, is stable and works with earlier Python\nversions. So for now the array struct interface is the predominate way pygame\nhandles array introspection.\n\nNew in pygame 1.9.2.\n\nThe surface_to_array function copies pixels from a Surface object to a 2D or\n3D array. Depending on argument `kind` and the target array dimension, a copy\nmay be raw pixel value, RGB, a color component slice, or colorkey alpha\ntransparency value. Recognized `kind` values are the single character codes\n'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case insensitive, so 'p' is\nequivalent to 'P'. The first two dimensions of the target must be the surface\nsize (w, h).\n\nThe default 'P' kind code does a direct raw integer pixel (mapped) value copy\nto a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array having\nshape (w, h, 3). For an 8 bit colormap surface this means the table index is\ncopied to a 2D array, not the table value itself. A 2D array's item size must\nbe at least as large as the surface's pixel byte size. The item size of a 3D\narray must be at least one byte.\n\nFor the 'R', 'G', 'B', and 'A' copy kinds a single color component of the\nunmapped surface pixels are copied to the target 2D array. For kind 'A' and\nsurfaces with source alpha (the surface was created with the SRCALPHA flag),\nhas a colorkey (set with `Surface.set_colorkey()`), or has a blanket alpha\n(set with `Surface.set_alpha()`) then the alpha values are those expected for\na SDL surface. If a surface has no explicit alpha value, then the target array\nis filled with the value of the optional `opaque` surface_to_array argument\n(default 255: not transparent).\n\nCopy kind 'C' is a special case for alpha copy of a source surface with\ncolorkey. Unlike the 'A' color component copy, the `clear` argument value is\nused for colorkey matches, `opaque` otherwise. By default, a match has alpha 0\n(totally transparent), while everything else is alpha 255 (totally opaque). It\nis a more general implementation of `pygame.surfarray.array_colorkey()`.\n\nSpecific to surface_to_array, a ValueError is raised for target arrays with\nincorrect shape or item size. A TypeError is raised for an incorrect kind\ncode. Surface specific problems, such as locking, raise a pygame.error.\n\nSee `pygame.surfarray.blit_array()`.\n\nMap an array of color element values - (w, h, ..., 3) - to an array of pixels\n- (w, h) according to the format of <surface>.\n\nCreate a new Surface that best resembles the data and format of the array. The\narray can be 2D or 3D with any sized integer values.\n\n"}, {"name": "module-pygame", "path": "ref/pygame", "type": "pygame", "text": "\nThe pygame package represents the top-level package for others to use. Pygame\nitself is broken into many submodules, but this does not affect programs that\nuse pygame.\n\nAs a convenience, most of the top-level variables in pygame have been placed\ninside a module named `pygame.locals`. This is meant to be used with `from\npygame.locals import *`, in addition to `import pygame`.\n\nWhen you `import pygame` all available pygame submodules are automatically\nimported. Be aware that some of the pygame modules are considered optional,\nand may not be available. In that case, pygame will provide a placeholder\nobject instead of the module, which can be used to test for availability.\n\nInitialize all imported pygame modules. No exceptions will be raised if a\nmodule fails, but the total number if successful and failed inits will be\nreturned as a tuple. You can always initialize individual modules manually,\nbut `pygame.init()` is a convenient way to get everything started. The\n`init()` functions for individual modules will raise exceptions when they\nfail.\n\nYou may want to initialize the different modules separately to speed up your\nprogram or to not use modules your game does not require.\n\nIt is safe to call this `init()` more than once as repeated calls will have no\neffect. This is true even if you have `pygame.quit()` all the modules.\n\nUninitialize all pygame modules that have previously been initialized. When\nthe Python interpreter shuts down, this method is called regardless, so your\nprogram should not need it, except when it wants to terminate its pygame\nresources and continue. It is safe to call this function more than once as\nrepeated calls have no effect.\n\nNote\n\nCalling `pygame.quit()` will not exit your program. Consider letting your\nprogram end in the same way a normal Python program will end.\n\nReturns `True` if pygame is currently initialized.\n\nNew in pygame 1.9.5.\n\nThis exception is raised whenever a pygame or SDL operation fails. You can\ncatch any anticipated problems and deal with the error. The exception is\nalways raised with a descriptive message about the problem.\n\nDerived from the `RuntimeError` exception, which can also be used to catch\nthese raised errors.\n\nSDL maintains an internal error message. This message will usually be given to\nyou when `pygame.error()` is raised, so this function will rarely be needed.\n\nSDL maintains an internal error message. This message will usually be given to\nyou when `pygame.error()` is raised, so this function will rarely be needed.\n\nReturns the three version numbers of the SDL library. This version is built at\ncompile time. It can be used to detect which features may or may not be\navailable through pygame.\n\nNew in pygame 1.7.0.\n\nReturns the byte order of the SDL library. It returns `1234` for little endian\nbyte order and `4321` for big endian byte order.\n\nNew in pygame 1.8.\n\nWhen `pygame.quit()` is called, all registered quit functions are called.\nPygame modules do this automatically when they are initializing, so this\nfunction will rarely be needed.\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return\n`None`; if not given, raise `SyntaxError`.\n\nencoding (string): If present, encoding to use. The default is\n`'unicode_escape'`.\n\nerrors (string): If given, how to handle unencodable characters. The default\nis `'backslashreplace'`.\n\netype (exception type): If given, the exception type to raise for an encoding\nerror. The default is `UnicodeEncodeError`, as returned by\n`PyUnicode_AsEncodedString()`. For the default encoding and errors values\nthere should be no encoding errors.\n\nThis function is used in encoding file paths. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return\n`None`; if not given, raise `SyntaxError`.\n\netype (exception type): If given, the exception type to raise for an encoding\nerror. The default is `UnicodeEncodeError`, as returned by\n`PyUnicode_AsEncodedString()`.\n\nThis function is used to encode file paths in pygame. Encoding is to the codec\nas returned by `sys.getfilesystemencoding()`. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\nThis module is automatically imported into the pygame package and can be used\nto check which version of pygame has been imported.\n\nThis is the version represented as a string. It can contain a micro release\nnumber as well, e.g. `'1.5.2'`\n\nThis version information can easily be compared with other version numbers of\nthe same format. An example of checking pygame version numbers would look like\nthis:\n\nNew in pygame 1.9.6: Attributes `major`, `minor`, and `patch`.\n\nChanged in pygame 1.9.6: `str(pygame.version.vernum)` returns a string like\n`\"2.0.0\"` instead of `\"(2, 0, 0)\"`.\n\nChanged in pygame 1.9.6: `repr(pygame.version.vernum)` returns a string like\n`\"PygameVersion(major=2, minor=0, patch=0)\"` instead of `\"(2, 0, 0)\"`.\n\nThe Mercurial node identifier of the repository checkout from which this\npackage was built. If the identifier ends with a plus sign '+' then the\npackage contains uncommitted changes. Please include this revision number in\nbug reports, especially for non-release pygame builds.\n\nImportant note: pygame development has moved to github, this variable is\nobsolete now. As soon as development shifted to github, this variable started\nreturning an empty string `\"\"`. It has always been returning an empty string\nsince `v1.9.5`.\n\nChanged in pygame 1.9.5: Always returns an empty string `\"\"`.\n\nThis is the SDL library version represented as an extended tuple. It also has\nattributes 'major', 'minor' & 'patch' that can be accessed like this:\n\nprinting the whole thing returns a string like this:\n\nNew in pygame 2.0.0.\n\nSetting Environment Variables\n\nSome aspects of pygame's behaviour can be controlled by setting environment\nvariables, they cover a wide range of the library's functionality. Some of the\nvariables are from pygame itself, while others come from the underlying C SDL\nlibrary that pygame uses.\n\nIn python, environment variables are usually set in code like this:\n\nOr to preserve users ability to override the variable:\n\nIf the variable is more useful for users of an app to set than the developer\nthen they can set it like this:\n\nWindows:\n\nLinux/Mac:\n\nFor some variables they need to be set before initialising pygame, some must\nbe set before even importing pygame, and others can simply be set right before\nthe area of code they control is run.\n\nBelow is a list of environment variables, their settable values, and a brief\ndescription of what they do.\n\nPygame Environment Variables\n\nThese variables are defined by pygame itself.\n\nThis sets the display where pygame will open its window or screen. The value\nset here will be used if set before calling `pygame.display.set_mode()`, and\nas long as no 'display' parameter is passed into `pygame.display.set_mode()`.\n\nThis forces set_mode() to use the SCALED display mode and, if \"photo\" is set,\nmakes the scaling use the slowest, but highest quality anisotropic scaling\nalgorithm, if it is available. Must be set before calling\n`pygame.display.set_mode()`.\n\nThis makes pygame use the SDL2 blitter for all alpha blending. The SDL2\nblitter is sometimes faster than the default blitter but uses a different\nformula so the final colours may differ. Must be set before `pygame.init()` is\ncalled.\n\nThis stops the welcome message popping up in the console that tells you which\nversion of python, pygame & SDL you are using. Must be set before importing\npygame.\n\nThis switches the pygame.font module to a pure freetype implementation that\nbypasses SDL_ttf. See the font module for why you might want to do this. Must\nbe set before importing pygame.\n\nForces the library backend used in the camera module, overriding the platform\ndefaults. Must be set before calling `pygame.camera.init()`.\n\nSDL Environment Variables\n\nThese variables are defined by SDL.\n\nFor documentation on the environment variables available in pygame 1 try here.\nFor Pygame 2, some selected environment variables are listed below.\n\nThis will make the pygame window open in the centre of the display. Must be\nset before calling `pygame.display.set_mode()`.\n\nThis allows control over the placement of the pygame window within the\ndisplay. Must be set before calling `pygame.display.set_mode()`.\n\nOn some platforms there are multiple video drivers available and this allows\nusers to pick between them. More information is available here. Must be set\nbefore calling `pygame.init()` or `pygame.display.init()`.\n\nOn some platforms there are multiple audio drivers available and this allows\nusers to pick between them. More information is available here. Must be set\nbefore calling `pygame.init()` or `pygame.mixer.init()`.\n\nBy default pygame apps disable screensavers while they are running. Setting\nthis environment variable allows users or developers to change that and make\nscreensavers run again.\n\nBy default SDL tries to disable the X11 compositor for all pygame apps. This\nis usually a good thing as it's faster, however if you have an app which\ndoesn't update every frame and are using linux you may want to disable this\nbypass. The bypass has reported problems on KDE linux. This variable is only\nused on x11/linux platforms.\n\n"}, {"name": "module-scrap", "path": "ref/scrap", "type": "pygame.scrap", "text": "\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code may break with the next pygame release.\n\nThe scrap module is for transferring data to/from the clipboard. This allows\nfor cutting and pasting data between pygame and other applications. Some basic\ndata (MIME) types are defined and registered:\n\n`pygame.SCRAP_PPM`, `pygame.SCRAP_PBM` and `pygame.SCRAP_BMP` are suitable for\nsurface buffers to be shared with other applications. `pygame.SCRAP_TEXT` is\nan alias for the plain text clipboard type.\n\nDepending on the platform, additional types are automatically registered when\ndata is placed into the clipboard to guarantee a consistent sharing behaviour\nwith other applications. The following listed types can be used as strings to\nbe passed to the respective `pygame.scrap` module functions.\n\nFor Windows platforms, these additional types are supported automatically and\nresolve to their internal definitions:\n\nFor X11 platforms, these additional types are supported automatically and\nresolve to their internal definitions:\n\nUser defined types can be used, but the data might not be accessible by other\napplications unless they know what data type to look for. Example: Data placed\ninto the clipboard by `pygame.scrap.put(\"my_data_type\", byte_data)` can only\nbe accessed by applications which query the clipboard for the `\"my_data_type\"`\ndata type.\n\nFor an example of how the scrap module works refer to the examples page\n(`pygame.examples.scrap_clipboard.main()`) or the code directly in GitHub\n(pygame/examples/scrap_clipboard.py).\n\nNew in pygame 1.8.\n\nNote\n\nThe scrap module is currently only supported for Windows, X11 and Mac OS X. On\nMac OS X only text works at the moment - other types may be supported in\nfuture releases.\n\nInitialize the scrap module.\n\nNote\n\nThe scrap module requires `pygame.display.set_mode()` be called before being\ninitialized.\n\nGets the scrap module's initialization state.\n\nNew in pygame 1.9.5.\n\nRetrieves the data for the specified type from the clipboard. In python 3 the\ndata is returned as a byte string and might need further processing (such as\ndecoding to Unicode).\n\nGets a list of data type string identifiers for the data currently available\non the clipboard. Each identifier can be used in the `pygame.scrap.get()`\nmethod to get the clipboard content of the specific type.\n\nPlaces data for a given clipboard type into the clipboard. The data must be a\nstring buffer. The type is a string identifying the type of data to be placed\ninto the clipboard. This can be one of the predefined `pygame.SCRAP_PBM`,\n`pygame.SCRAP_PPM`, `pygame.SCRAP_BMP` or `pygame.SCRAP_TEXT` values or a user\ndefined string identifier.\n\npygame.error \\-- if unable to put the data into the clipboard\n\nChecks whether data for the given type is currently available in the\nclipboard.\n\nIndicates if the clipboard ownership has been lost by the pygame application.\n\nSets the access mode for the clipboard. This is only of interest for X11\nenvironments where clipboard modes `pygame.SCRAP_SELECTION` (for mouse\nselections) and `pygame.SCRAP_CLIPBOARD` (for the clipboard) are available.\nSetting the mode to `pygame.SCRAP_SELECTION` in other environments will not\nchange the mode from `pygame.SCRAP_CLIPBOARD`.\n\n"}, {"name": "module-sndarray", "path": "ref/sndarray", "type": "pygame.sndarray", "text": "\nFunctions to convert between NumPy arrays and Sound objects. This module will\nonly be available when pygame can use the external NumPy package.\n\nSound data is made of thousands of samples per second, and each sample is the\namplitude of the wave at a particular moment in time. For example, in 22-kHz\nformat, element number 5 of the array is the amplitude of the wave after\n5/22000 seconds.\n\nEach sample is an 8-bit or 16-bit integer, depending on the data format. A\nstereo sound file has two values per sample, while a mono sound file only has\none.\n\nCreates a new array for the sound data and copies the samples. The array will\nalways be in the format returned from `pygame.mixer.get_init()`.\n\nCreates a new array that directly references the samples in a Sound object.\nModifying the array will change the Sound. The array will always be in the\nformat returned from `pygame.mixer.get_init()`.\n\nCreate a new playable Sound object from an array. The mixer module must be\ninitialized and the array format must be similar to the mixer audio format.\n\nDEPRECATED: Uses the requested array type for the module functions. The only\nsupported arraytype is `'numpy'`. Other values will raise ValueError.\n\nDEPRECATED: Returns the currently active array type. This will be a value of\nthe `get_arraytypes()` tuple and indicates which type of array module is used\nfor the array creation.\n\nNew in pygame 1.8.\n\nDEPRECATED: Checks, which array systems are available and returns them as a\ntuple of strings. The values of the tuple can be used directly in the\n`pygame.sndarray.use_arraytype()` () method. If no supported array system\ncould be found, None will be returned.\n\nNew in pygame 1.8.\n\n"}, {"name": "module-sprite", "path": "ref/sprite", "type": "pygame.sprite", "text": "\nThis module contains several simple classes to be used within games. There is\nthe main Sprite class and several Group classes that contain Sprites. The use\nof these classes is entirely optional when using pygame. The classes are\nfairly lightweight and only provide a starting place for the code that is\ncommon to most games.\n\nThe Sprite class is intended to be used as a base class for the different\ntypes of objects in the game. There is also a base Group class that simply\nstores sprites. A game could create new types of Group classes that operate on\nspecially customized Sprite instances they contain.\n\nThe basic Sprite class can draw the Sprites it contains to a Surface. The\n`Group.draw()` method requires that each Sprite have a `Surface.image`\nattribute and a `Surface.rect`. The `Group.clear()` method requires these same\nattributes, and can be used to erase all the Sprites with background. There\nare also more advanced Groups: `pygame.sprite.RenderUpdates()` and\n`pygame.sprite.OrderedUpdates()`.\n\nLastly, this module contains several collision functions. These help find\nsprites inside multiple groups that have intersecting bounding rectangles. To\nfind the collisions, the Sprites are required to have a `Surface.rect`\nattribute assigned.\n\nThe groups are designed for high efficiency in removing and adding Sprites to\nthem. They also allow cheap testing to see if a Sprite already exists in a\nGroup. A given Sprite can exist in any number of groups. A game could use some\ngroups to control object rendering, and a completely separate set of groups to\ncontrol interaction or player movement. Instead of adding type attributes or\nbools to a derived Sprite class, consider keeping the Sprites inside organized\nGroups. This will allow for easier lookup later in the game.\n\nSprites and Groups manage their relationships with the `add()` and `remove()`\nmethods. These methods can accept a single or multiple targets for membership.\nThe default initializers for these classes also takes a single or list of\ntargets for initial membership. It is safe to repeatedly add and remove the\nsame Sprite from a Group.\n\nWhile it is possible to design sprite and group classes that don't derive from\nthe Sprite and AbstractGroup classes below, it is strongly recommended that\nyou extend those when you add a Sprite or Group class.\n\nSprites are not thread safe. So lock them yourself if using threads.\n\nThe base class for visible game objects. Derived classes will want to override\nthe `Sprite.update()` and assign a `Sprite.image` and `Sprite.rect`\nattributes. The initializer can accept any number of Group instances to be\nadded to.\n\nWhen subclassing the Sprite, be sure to call the base initializer before\nadding the Sprite to Groups. For example:\n\nThe default implementation of this method does nothing; it's just a convenient\n\"hook\" that you can override. This method is called by `Group.update()` with\nwhatever arguments you give it.\n\nThere is no need to use this method if not using the convenience method by the\nsame name in the Group class.\n\nAny number of Group instances can be passed as arguments. The Sprite will be\nadded to the Groups it is not already a member of.\n\nAny number of Group instances can be passed as arguments. The Sprite will be\nremoved from the Groups it is currently a member of.\n\nThe Sprite is removed from all the Groups that contain it. This won't change\nanything about the state of the Sprite. It is possible to continue to use the\nSprite after this method has been called, including adding it to Groups.\n\nReturns True when the Sprite belongs to one or more Groups.\n\nReturn a list of all the Groups that contain this Sprite.\n\nExtra DirtySprite attributes with their default values:\n\ndirty = 1\n\nblendmode = 0\n\nsource_rect = None\n\nvisible = 1\n\nlayer = 0\n\nA simple container for Sprite objects. This class can be inherited to create\ncontainers with more specific behaviors. The constructor takes any number of\nSprite arguments to add to the Group. The group supports the following\nstandard Python operations:\n\nThe Sprites in the Group are not ordered, so drawing and iterating the Sprites\nis in no particular order.\n\nReturn a list of all the Sprites this group contains. You can also get an\niterator from the group, but you cannot iterate over a Group while modifying\nit.\n\nCreates a new Group with all the same Sprites as the original. If you have\nsubclassed Group, the new object will have the same (sub-)class as the\noriginal. This only works if the derived class's constructor takes the same\narguments as the Group class's.\n\nAdd any number of Sprites to this Group. This will only add Sprites that are\nnot already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nRemove any number of Sprites from the Group. This will only remove Sprites\nthat are already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nReturn True if the Group contains all of the given sprites. This is similar to\nusing the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests\nif a single Sprite belongs to a Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nCalls the `update()` method on all Sprites in the Group. The base Sprite class\nhas an update method that takes any number of arguments and does nothing. The\narguments passed to `Group.update()` will be passed to each Sprite.\n\nThere is no way to get the return value from the `Sprite.update()` methods.\n\nDraws the contained Sprites to the Surface argument. This uses the\n`Sprite.image` attribute for the source surface, and `Sprite.rect` for the\nposition.\n\nThe Group does not keep sprites in any order, so the draw order is arbitrary.\n\nErases the Sprites used in the last `Group.draw()` call. The destination\nSurface is cleared by filling the drawn Sprite positions with the background.\n\nThe background is usually a Surface image the same dimensions as the\ndestination Surface. However, it can also be a callback function that takes\ntwo arguments; the destination Surface and an area to clear. The background\ncallback function will be called several times each clear.\n\nHere is an example callback that will clear the Sprites with solid red:\n\nRemoves all Sprites from this Group.\n\nThis class is an alias to `pygame.sprite.Group()`. It has no additional\nfunctionality.\n\nThis class is an alias to `pygame.sprite.Group()`. It has no additional\nfunctionality.\n\nThis class is derived from `pygame.sprite.Group()`. It has an extended\n`draw()` method that tracks the changed areas of the screen.\n\nDraws all the Sprites to the surface, the same as `Group.draw()`. This method\nalso returns a list of Rectangular areas on the screen that have been changed.\nThe returned changes include areas of the screen that have been affected by\nprevious `Group.clear()` calls.\n\nThe returned Rect list should be passed to `pygame.display.update()`. This\nwill help performance on software driven display modes. This type of updating\nis usually only helpful on destinations with non-animating backgrounds.\n\nThis class derives from `pygame.sprite.RenderUpdates()`. It maintains the\norder in which the Sprites were added to the Group for rendering. This makes\nadding and removing Sprites from the Group a little slower than regular\nGroups.\n\nThis group is fully compatible with `pygame.sprite.Sprite`.\n\nYou can set the default layer through kwargs using 'default_layer' and an\ninteger for the layer. The default layer is 0.\n\nIf the sprite you add has an attribute _layer then that layer will be used. If\nthe **kwarg contains 'layer' then the sprites passed will be added to that\nlayer (overriding the `sprite.layer` attribute). If neither sprite has\nattribute layer nor **kwarg then the default layer is used to add the sprites.\n\nNew in pygame 1.8.\n\nIf the `sprite(s)` have an attribute layer then that is used for the layer. If\n**kwargs contains 'layer' then the `sprite(s)` will be added to that argument\n(overriding the sprite layer attribute). If neither is passed then the\n`sprite(s)` will be added to the default layer.\n\nBottom sprites first, top last.\n\nRaises IndexOutOfBounds if the idx is not within range.\n\nsprite must have been added to the renderer. It is not checked.\n\nIf the sprite is not found then it will return the default layer.\n\nBrings the sprite to front, changing sprite layer to topmost layer (added at\nthe end of that layer).\n\nMoves the sprite to the bottom layer, moving it behind all other layers and\nadding one additional layer.\n\nReturns all sprites from a layer, ordered by how they where added. It uses\nlinear search and the sprites are not removed from layer.\n\nThe layers number must exist, it is not checked.\n\nThis group requires `pygame.sprite.DirtySprite` or any sprite that has the\nfollowing attributes:\n\nIt uses the dirty flag technique and is therefore faster than the\n`pygame.sprite.RenderUpdates` if you have many static sprites. It also\nswitches automatically between dirty rect update and full screen drawing, so\nyou do no have to worry what would be faster.\n\nSame as for the `pygame.sprite.Group`. You can specify some additional\nattributes through kwargs:\n\nNew in pygame 1.8.\n\nYou can pass the background too. If a background is already set, then the bgd\nargument has no effect.\n\nscreen_rect is in screen coordinates.\n\nsprite must have been added to the renderer. It is not checked.\n\nDefault is 1000./80 where 80 is the fps I want to switch to full screen mode.\nThis method's name is a typo and should be fixed.\n\nThe GroupSingle container only holds a single Sprite. When a new Sprite is\nadded, the old one is removed.\n\nThere is a special property, `GroupSingle.sprite`, that accesses the Sprite\nthat this Group contains. It can be None when the Group is empty. The property\ncan also be assigned to add a Sprite into the GroupSingle container.\n\nReturn a list containing all Sprites in a Group that intersect with another\nSprite. Intersection is determined by comparing the `Sprite.rect` attribute of\neach Sprite.\n\nThe dokill argument is a bool. If set to True, all Sprites that collide will\nbe removed from the Group.\n\nThe collided argument is a callback function used to calculate if two sprites\nare colliding. it should take two sprites as values, and return a bool value\nindicating if they are colliding. If collided is not passed, all sprites must\nhave a \"rect\" value, which is a rectangle of the sprite area, which will be\nused to calculate the collision.\n\ncollided callables:\n\nExample:\n\nTests for collision between two sprites. Uses the pygame rect colliderect\nfunction to calculate the collision. Intended to be passed as a collided\ncallback function to the *collide functions. Sprites must have a \"rect\"\nattributes.\n\nNew in pygame 1.8.\n\nA callable class that checks for collisions between two sprites, using a\nscaled version of the sprites rects.\n\nIs created with a ratio, the instance is then intended to be passed as a\ncollided callback function to the *collide functions.\n\nA ratio is a floating point number - 1.0 is the same size, 2.0 is twice as\nbig, and 0.5 is half the size.\n\nNew in pygame 1.8.1.\n\nTests for collision between two sprites, by testing to see if two circles\ncentered on the sprites overlap. If the sprites have a \"radius\" attribute,\nthat is used to create the circle, otherwise a circle is created that is big\nenough to completely enclose the sprites rect as given by the \"rect\"\nattribute. Intended to be passed as a collided callback function to the\n*collide functions. Sprites must have a \"rect\" and an optional \"radius\"\nattribute.\n\nNew in pygame 1.8.1.\n\nA callable class that checks for collisions between two sprites, using a\nscaled version of the sprites radius.\n\nIs created with a floating point ratio, the instance is then intended to be\npassed as a collided callback function to the *collide functions.\n\nA ratio is a floating point number - 1.0 is the same size, 2.0 is twice as\nbig, and 0.5 is half the size.\n\nThe created callable tests for collision between two sprites, by testing to\nsee if two circles centered on the sprites overlap, after scaling the circles\nradius by the stored ratio. If the sprites have a \"radius\" attribute, that is\nused to create the circle, otherwise a circle is created that is big enough to\ncompletely enclose the sprites rect as given by the \"rect\" attribute. Intended\nto be passed as a collided callback function to the *collide functions.\nSprites must have a \"rect\" and an optional \"radius\" attribute.\n\nNew in pygame 1.8.1.\n\nTests for collision between two sprites, by testing if their bitmasks overlap\n(uses `pygame.mask.Mask.overlap()`). If the sprites have a `mask` attribute,\nit is used as the mask, otherwise a mask is created from the sprite's `image`\n(uses `pygame.mask.from_surface()`). Sprites must have a `rect` attribute; the\n`mask` attribute is optional.\n\nThe first point of collision between the masks is returned. The collision\npoint is offset from `sprite1`'s mask's topleft corner (which is always (0,\n0)). The collision point is a position within the mask and is not related to\nthe actual screen position of `sprite1`.\n\nThis function is intended to be passed as a `collided` callback function to\nthe group collide functions (see `spritecollide()`, `groupcollide()`,\n`spritecollideany()`).\n\nNote\n\nTo increase performance, create and set a `mask` attibute for all sprites that\nwill use this function to check for collisions. Otherwise, each time this\nfunction is called it will create new masks.\n\nNote\n\nA new mask needs to be recreated each time a sprite's image is changed (e.g.\nif a new image is used or the existing image is rotated).\n\nNew in pygame 1.8.0.\n\nThis will find collisions between all the Sprites in two groups. Collision is\ndetermined by comparing the `Sprite.rect` attribute of each Sprite or by using\nthe collided function if it is not None.\n\nEvery Sprite inside group1 is added to the return dictionary. The value for\neach item is the list of Sprites in group2 that intersect.\n\nIf either dokill argument is True, the colliding Sprites will be removed from\ntheir respective Group.\n\nThe collided argument is a callback function used to calculate if two sprites\nare colliding. It should take two sprites as values and return a bool value\nindicating if they are colliding. If collided is not passed, then all sprites\nmust have a \"rect\" value, which is a rectangle of the sprite area, which will\nbe used to calculate the collision.\n\nIf the sprite collides with any single sprite in the group, a single sprite\nfrom the group is returned. On no collision None is returned.\n\nIf you don't need all the features of the `pygame.sprite.spritecollide()`\nfunction, this function will be a bit quicker.\n\nThe collided argument is a callback function used to calculate if two sprites\nare colliding. It should take two sprites as values and return a bool value\nindicating if they are colliding. If collided is not passed, then all sprites\nmust have a \"rect\" value, which is a rectangle of the sprite area, which will\nbe used to calculate the collision.\n\n"}, {"name": "module-surfarray", "path": "ref/surfarray", "type": "pygame.surfarray", "text": "\nFunctions to convert pixel data between pygame Surfaces and arrays. This\nmodule will only be functional when pygame can use the external NumPy package.\n\nEvery pixel is stored as a single integer value to represent the red, green,\nand blue colors. The 8-bit images use a value that looks into a colormap.\nPixels with higher depth use a bit packing process to place three or four\nvalues into a single number.\n\nThe arrays are indexed by the `X` axis first, followed by the `Y` axis. Arrays\nthat treat the pixels as a single integer are referred to as 2D arrays. This\nmodule can also separate the red, green, and blue color values into separate\nindices. These types of arrays are referred to as 3D arrays, and the last\nindex is 0 for red, 1 for green, and 2 for blue.\n\nCopy the `mapped` (raw) pixels from a Surface into a 2D array. The bit depth\nof the surface will control the size of the integer values, and will work for\nany type of pixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the\n`pygame.Surface.lock()` \\- lock the Surface memory for pixel access method).\n\nCreate a new 2D array that directly references the pixel values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nPixels from a 24-bit Surface cannot be referenced, but all other Surface bit\ndepths can.\n\nThe Surface this references will remain locked for the lifetime of the array\n(see the `pygame.Surface.lock()` \\- lock the Surface memory for pixel access\nmethod).\n\nCopy the pixels from a Surface into a 3D array. The bit depth of the surface\nwill control the size of the integer values, and will work for any type of\npixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the\n`pygame.Surface.lock()` \\- lock the Surface memory for pixel access method).\n\nCreate a new 3D array that directly references the pixel values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis will only work on Surfaces that have 24-bit or 32-bit formats. Lower\npixel formats cannot be referenced.\n\nThe Surface this references will remain locked for the lifetime of the array\n(see the `pygame.Surface.lock()` \\- lock the Surface memory for pixel access\nmethod).\n\nCopy the pixel alpha values (degree of transparency) from a Surface into a 2D\narray. This will work for any type of Surface format. Surfaces without a pixel\nalpha will return an array with all opaque values.\n\nThis function will temporarily lock the Surface as pixels are copied (see the\n`pygame.Surface.lock()` \\- lock the Surface memory for pixel access method).\n\nCreate a new 2D array that directly references the alpha values (degree of\ntransparency) in a Surface. Any changes to the array will affect the pixels in\nthe Surface. This is a fast operation since no data is copied.\n\nThis can only work on 32-bit Surfaces with a per-pixel alpha value.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\nCreate a new 2D array that directly references the red values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\nCreate a new 2D array that directly references the green values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\nCreate a new 2D array that directly references the blue values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\nCreate a new array with the colorkey transparency value from each pixel. If\nthe pixel matches the colorkey it will be fully transparent; otherwise it will\nbe fully opaque.\n\nThis will work on any type of Surface format. If the image has no colorkey a\nsolid opaque array will be returned.\n\nThis function will temporarily lock the Surface as pixels are copied.\n\nCreate a new Surface that best resembles the data and format on the array. The\narray can be 2D or 3D with any sized integer values. Function make_surface\nuses the array struct interface to acquire array properties, so is not limited\nto just NumPy arrays. See `pygame.pixelcopy`.\n\nNew in pygame 1.9.2: array struct interface support.\n\nDirectly copy values from an array into a Surface. This is faster than\nconverting the array into a Surface and blitting. The array must be the same\ndimensions as the Surface and will completely replace all pixel values. Only\ninteger, ASCII character and record arrays are accepted.\n\nThis function will temporarily lock the Surface as the new values are copied.\n\nConvert a 3D array into a 2D array. This will use the given Surface format to\ncontrol the conversion. Palette surface formats are supported for NumPy\narrays.\n\nDEPRECATED: Uses the requested array type for the module functions. The only\nsupported arraytype is `'numpy'`. Other values will raise ValueError.\n\nDEPRECATED: Returns the currently active array type. This will be a value of\nthe `get_arraytypes()` tuple and indicates which type of array module is used\nfor the array creation.\n\nNew in pygame 1.8.\n\nDEPRECATED: Checks, which array systems are available and returns them as a\ntuple of strings. The values of the tuple can be used directly in the\n`pygame.surfarray.use_arraytype()` () method. If no supported array system\ncould be found, None will be returned.\n\nNew in pygame 1.8.\n\n"}, {"name": "module-tests", "path": "ref/tests", "type": "pygame.tests", "text": "\nA quick way to run the test suite package from the command line is to import\nthe go submodule with the Python -m option:\n\nCommand line option --help displays a usage message. Available options\ncorrespond to the `pygame.tests.run()` arguments.\n\nThe xxxx_test submodules of the tests package are unit test suites for\nindividual parts of pygame. Each can also be run as a main program. This is\nuseful if the test, such as cdrom_test, is interactive.\n\nFor pygame development the test suite can be run from a pygame distribution\nroot directory. Program `run_tests.py` is provided for convenience, though\ntest/go.py can be run directly.\n\nModule level tags control which modules are included in a unit test run. Tags\nare assigned to a unit test module with a corresponding <name>_tags.py module.\nThe tags module has the global __tags__, a list of tag names. For example,\n`cdrom_test.py` has a tag file `cdrom_tags.py` containing a tags list that has\nthe 'interactive' string. The 'interactive' tag indicates `cdrom_test.py`\nexpects user input. It is excluded from a `run_tests.py` or `pygame.tests.go`\nrun. Two other tags that are excluded are 'ignore' and 'subprocess_ignore'.\nThese two tags indicate unit tests that will not run on a particular platform,\nor for which no corresponding pygame module is available. The test runner will\nlist each excluded module along with the tag responsible.\n\nPositional arguments (optional):\n\nKeyword arguments:\n\nReturn value:\n\nBy default individual test modules are run in separate subprocesses. This\nrecreates normal pygame usage where `pygame.init()` and `pygame.quit()` are\ncalled only once per program execution, and avoids unfortunate interactions\nbetween test modules. Also, a time limit is placed on test execution, so\nfrozen tests are killed when there time allotment expired. Use the single\nprocess option if threading is not working properly or if tests are taking too\nlong. It is not guaranteed that all tests will pass in single process mode.\n\nTests are run in a randomized order if the randomize argument is True or a\nseed argument is provided. If no seed integer is provided then the system time\nis used.\n\nIndividual test modules may have a __tags__ attribute, a list of tag strings\nused to selectively omit modules from a run. By default only 'interactive'\nmodules such as cdrom_test are ignored. An interactive module must be run from\nthe console as a Python program.\n\nThis function can only be called once per Python session. It is not reentrant.\n\n"}, {"name": "module-time", "path": "ref/time", "type": "pygame.time", "text": "\nTimes in pygame are represented in milliseconds (1/1000 seconds). Most\nplatforms have a limited time resolution of around 10 milliseconds. This\nresolution, in milliseconds, is given in the `TIMER_RESOLUTION` constant.\n\nReturn the number of milliseconds since `pygame.init()` was called. Before\npygame is initialized this will always be 0.\n\nWill pause for a given number of milliseconds. This function sleeps the\nprocess to share the processor with other programs. A program that waits for\neven a few milliseconds will consume very little processor time. It is\nslightly less accurate than the `pygame.time.delay()` function.\n\nThis returns the actual number of milliseconds used.\n\nWill pause for a given number of milliseconds. This function will use the\nprocessor (rather than sleeping) in order to make the delay more accurate than\n`pygame.time.wait()`.\n\nThis returns the actual number of milliseconds used.\n\nSet an event type to appear on the event queue every given number of\nmilliseconds. The first event will not appear until the amount of time has\npassed.\n\nEvery event type can have a separate timer attached to it. It is best to use\nthe value between `pygame.USEREVENT` and `pygame.NUMEVENTS`.\n\nTo disable the timer for an event, set the milliseconds argument to 0.\n\nIf the once argument is True, then only send the timer once.\n\nNew in pygame 2.0.0.dev3: once argument added.\n\nCreates a new Clock object that can be used to track an amount of time. The\nclock also provides several functions to help control a game's framerate.\n\nThis method should be called once per frame. It will compute how many\nmilliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep\nthe game running slower than the given ticks per second. This can be used to\nhelp limit the runtime speed of a game. By calling `Clock.tick(40)` once per\nframe, the program will never run at more than 40 frames per second.\n\nNote that this function uses SDL_Delay function which is not accurate on every\nplatform, but does not use much CPU. Use tick_busy_loop if you want an\naccurate timer, and don't mind chewing CPU.\n\nThis method should be called once per frame. It will compute how many\nmilliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep\nthe game running slower than the given ticks per second. This can be used to\nhelp limit the runtime speed of a game. By calling `Clock.tick_busy_loop(40)`\nonce per frame, the program will never run at more than 40 frames per second.\n\nNote that this function uses `pygame.time.delay()`, which uses lots of CPU in\na busy loop to make sure that timing is more accurate.\n\nNew in pygame 1.8.\n\nThe number of milliseconds that passed between the previous two calls to\n`Clock.tick()`.\n\nSimilar to `Clock.get_time()`, but does not include any time used while\n`Clock.tick()` was delaying to limit the framerate.\n\nCompute your game's framerate (in frames per second). It is computed by\naveraging the last ten calls to `Clock.tick()`.\n\n"}, {"name": "module-transform", "path": "ref/transform", "type": "pygame.transform", "text": "\nA Surface transform is an operation that moves or resizes the pixels. All\nthese functions take a Surface to operate on and return a new Surface with the\nresults.\n\nSome of the transforms are considered destructive. These means every time they\nare performed they lose pixel data. Common examples of this are resizing and\nrotating. For this reason, it is better to re-transform the original surface\nthan to keep transforming an image multiple times. (For example, suppose you\nare animating a bouncing spring which expands and contracts. If you applied\nthe size changes incrementally to the previous images, you would lose detail.\nInstead, always begin with the original image and scale to the desired size.)\n\nThis can flip a Surface either vertically, horizontally, or both. Flipping a\nSurface is non-destructive and returns a new Surface with the same dimensions.\n\nResizes the Surface to a new resolution. This is a fast scale operation that\ndoes not sample the results.\n\nAn optional destination surface can be used, rather than have it create a new\none. This is quicker if you want to repeatedly scale something. However the\ndestination must be the same size as the (width, height) passed in. Also the\ndestination surface must be the same format.\n\nUnfiltered counterclockwise rotation. The angle argument represents degrees\nand can be any floating point value. Negative angle amounts will rotate\nclockwise.\n\nUnless rotating by 90 degree increments, the image will be padded larger to\nhold the new size. If the image has pixel alphas, the padded area will be\ntransparent. Otherwise pygame will pick a color that matches the Surface\ncolorkey or the topleft pixel value.\n\nThis is a combined scale and rotation transform. The resulting Surface will be\na filtered 32-bit Surface. The scale argument is a floating point value that\nwill be multiplied by the current resolution. The angle argument is a floating\npoint value that represents the counterclockwise degrees to rotate. A negative\nrotation angle will rotate clockwise.\n\nThis will return a new image that is double the size of the original. It uses\nthe AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap\ngraphics.\n\nThis really only has an effect on simple images with solid colors. On\nphotographic and antialiased images it will look like a regular unfiltered\nscale.\n\nAn optional destination surface can be used, rather than have it create a new\none. This is quicker if you want to repeatedly scale something. However the\ndestination must be twice the size of the source surface passed in. Also the\ndestination surface must be the same format.\n\nUses one of two different algorithms for scaling each dimension of the input\nsurface as required. For shrinkage, the output pixels are area averages of the\ncolors they cover. For expansion, a bilinear filter is used. For the x86-64\nand i686 architectures, optimized `MMX` routines are included and will run\nmuch faster than other machine types. The size is a 2 number sequence for\n(width, height). This function only works for 24-bit or 32-bit surfaces. An\nexception will be thrown if the input surface bit depth is less than 24.\n\nNew in pygame 1.8.\n\nShows whether or not smoothscale is using `MMX` or `SSE` acceleration. If no\nacceleration is available then \"GENERIC\" is returned. For a x86 processor the\nlevel of acceleration to use is determined at runtime.\n\nThis function is provided for pygame testing and debugging.\n\nSets smoothscale acceleration. Takes a string argument. A value of 'GENERIC'\nturns off acceleration. 'MMX' uses `MMX` instructions only. 'SSE' allows `SSE`\nextensions as well. A value error is raised if type is not recognized or not\nsupported by the current processor.\n\nThis function is provided for pygame testing and debugging. If smoothscale\ncauses an invalid instruction error then it is a pygame/SDL bug that should be\nreported. Use this function as a temporary fix only.\n\nExtracts a portion of an image. All vertical and horizontal pixels surrounding\nthe given rectangle area are removed. The corner areas (diagonal to the rect)\nare then brought together. (The original image is not altered by this\noperation.)\n\n`NOTE`: If you want a \"crop\" that returns the part of an image within a rect,\nyou can blit with a rect to a new surface or copy a subsurface.\n\nFinds the edges in a surface using the laplacian algorithm.\n\nNew in pygame 1.8.\n\nTakes a sequence of surfaces and returns a surface with average colors from\neach of the surfaces.\n\npalette_colors - if true we average the colors in palette, otherwise we\naverage the pixel values. This is useful if the surface is actually greyscale\ncolors, and not palette colors.\n\nNote, this function currently does not handle palette using surfaces\ncorrectly.\n\nNew in pygame 1.8.\n\nNew in pygame 1.9: `palette_colors` argument\n\nFinds the average color of a Surface or a region of a surface specified by a\nRect, and returns it as a Color.\n\nThis versatile function can be used for find colors in a 'surf' close to a\n'search_color' or close to colors in a separate 'search_surf'.\n\nIt can also be used to transfer pixels into a 'dest_surf' that match or don't\nmatch.\n\nBy default it sets pixels in the 'dest_surf' where all of the pixels NOT\nwithin the threshold are changed to set_color. If inverse_set is optionally\nset to True, the pixels that ARE within the threshold are changed to\nset_color.\n\nIf the optional 'search_surf' surface is given, it is used to threshold\nagainst rather than the specified 'set_color'. That is, it will find each\npixel in the 'surf' that is within the 'threshold' of the pixel at the same\ncoordinates of the 'search_surf'.\n\nint\n\nThe number of pixels that are within the 'threshold' in 'surf' compared to\neither 'search_color' or search_surf.\n\nSee the threshold tests for a full of examples:\nhttps://github.com/pygame/pygame/blob/master/test/transform_test.py\n\nNew in pygame 1.8.\n\nChanged in pygame 1.9.4: Fixed a lot of bugs and added keyword arguments. Test\nyour code.\n\n"}, {"name": "module-version", "path": "ref/pygame", "type": "pygame", "text": "\nThe pygame package represents the top-level package for others to use. Pygame\nitself is broken into many submodules, but this does not affect programs that\nuse pygame.\n\nAs a convenience, most of the top-level variables in pygame have been placed\ninside a module named `pygame.locals`. This is meant to be used with `from\npygame.locals import *`, in addition to `import pygame`.\n\nWhen you `import pygame` all available pygame submodules are automatically\nimported. Be aware that some of the pygame modules are considered optional,\nand may not be available. In that case, pygame will provide a placeholder\nobject instead of the module, which can be used to test for availability.\n\nInitialize all imported pygame modules. No exceptions will be raised if a\nmodule fails, but the total number if successful and failed inits will be\nreturned as a tuple. You can always initialize individual modules manually,\nbut `pygame.init()` is a convenient way to get everything started. The\n`init()` functions for individual modules will raise exceptions when they\nfail.\n\nYou may want to initialize the different modules separately to speed up your\nprogram or to not use modules your game does not require.\n\nIt is safe to call this `init()` more than once as repeated calls will have no\neffect. This is true even if you have `pygame.quit()` all the modules.\n\nUninitialize all pygame modules that have previously been initialized. When\nthe Python interpreter shuts down, this method is called regardless, so your\nprogram should not need it, except when it wants to terminate its pygame\nresources and continue. It is safe to call this function more than once as\nrepeated calls have no effect.\n\nNote\n\nCalling `pygame.quit()` will not exit your program. Consider letting your\nprogram end in the same way a normal Python program will end.\n\nReturns `True` if pygame is currently initialized.\n\nNew in pygame 1.9.5.\n\nThis exception is raised whenever a pygame or SDL operation fails. You can\ncatch any anticipated problems and deal with the error. The exception is\nalways raised with a descriptive message about the problem.\n\nDerived from the `RuntimeError` exception, which can also be used to catch\nthese raised errors.\n\nSDL maintains an internal error message. This message will usually be given to\nyou when `pygame.error()` is raised, so this function will rarely be needed.\n\nSDL maintains an internal error message. This message will usually be given to\nyou when `pygame.error()` is raised, so this function will rarely be needed.\n\nReturns the three version numbers of the SDL library. This version is built at\ncompile time. It can be used to detect which features may or may not be\navailable through pygame.\n\nNew in pygame 1.7.0.\n\nReturns the byte order of the SDL library. It returns `1234` for little endian\nbyte order and `4321` for big endian byte order.\n\nNew in pygame 1.8.\n\nWhen `pygame.quit()` is called, all registered quit functions are called.\nPygame modules do this automatically when they are initializing, so this\nfunction will rarely be needed.\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return\n`None`; if not given, raise `SyntaxError`.\n\nencoding (string): If present, encoding to use. The default is\n`'unicode_escape'`.\n\nerrors (string): If given, how to handle unencodable characters. The default\nis `'backslashreplace'`.\n\netype (exception type): If given, the exception type to raise for an encoding\nerror. The default is `UnicodeEncodeError`, as returned by\n`PyUnicode_AsEncodedString()`. For the default encoding and errors values\nthere should be no encoding errors.\n\nThis function is used in encoding file paths. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return\n`None`; if not given, raise `SyntaxError`.\n\netype (exception type): If given, the exception type to raise for an encoding\nerror. The default is `UnicodeEncodeError`, as returned by\n`PyUnicode_AsEncodedString()`.\n\nThis function is used to encode file paths in pygame. Encoding is to the codec\nas returned by `sys.getfilesystemencoding()`. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\nThis module is automatically imported into the pygame package and can be used\nto check which version of pygame has been imported.\n\nThis is the version represented as a string. It can contain a micro release\nnumber as well, e.g. `'1.5.2'`\n\nThis version information can easily be compared with other version numbers of\nthe same format. An example of checking pygame version numbers would look like\nthis:\n\nNew in pygame 1.9.6: Attributes `major`, `minor`, and `patch`.\n\nChanged in pygame 1.9.6: `str(pygame.version.vernum)` returns a string like\n`\"2.0.0\"` instead of `\"(2, 0, 0)\"`.\n\nChanged in pygame 1.9.6: `repr(pygame.version.vernum)` returns a string like\n`\"PygameVersion(major=2, minor=0, patch=0)\"` instead of `\"(2, 0, 0)\"`.\n\nThe Mercurial node identifier of the repository checkout from which this\npackage was built. If the identifier ends with a plus sign '+' then the\npackage contains uncommitted changes. Please include this revision number in\nbug reports, especially for non-release pygame builds.\n\nImportant note: pygame development has moved to github, this variable is\nobsolete now. As soon as development shifted to github, this variable started\nreturning an empty string `\"\"`. It has always been returning an empty string\nsince `v1.9.5`.\n\nChanged in pygame 1.9.5: Always returns an empty string `\"\"`.\n\nThis is the SDL library version represented as an extended tuple. It also has\nattributes 'major', 'minor' & 'patch' that can be accessed like this:\n\nprinting the whole thing returns a string like this:\n\nNew in pygame 2.0.0.\n\nSetting Environment Variables\n\nSome aspects of pygame's behaviour can be controlled by setting environment\nvariables, they cover a wide range of the library's functionality. Some of the\nvariables are from pygame itself, while others come from the underlying C SDL\nlibrary that pygame uses.\n\nIn python, environment variables are usually set in code like this:\n\nOr to preserve users ability to override the variable:\n\nIf the variable is more useful for users of an app to set than the developer\nthen they can set it like this:\n\nWindows:\n\nLinux/Mac:\n\nFor some variables they need to be set before initialising pygame, some must\nbe set before even importing pygame, and others can simply be set right before\nthe area of code they control is run.\n\nBelow is a list of environment variables, their settable values, and a brief\ndescription of what they do.\n\nPygame Environment Variables\n\nThese variables are defined by pygame itself.\n\nThis sets the display where pygame will open its window or screen. The value\nset here will be used if set before calling `pygame.display.set_mode()`, and\nas long as no 'display' parameter is passed into `pygame.display.set_mode()`.\n\nThis forces set_mode() to use the SCALED display mode and, if \"photo\" is set,\nmakes the scaling use the slowest, but highest quality anisotropic scaling\nalgorithm, if it is available. Must be set before calling\n`pygame.display.set_mode()`.\n\nThis makes pygame use the SDL2 blitter for all alpha blending. The SDL2\nblitter is sometimes faster than the default blitter but uses a different\nformula so the final colours may differ. Must be set before `pygame.init()` is\ncalled.\n\nThis stops the welcome message popping up in the console that tells you which\nversion of python, pygame & SDL you are using. Must be set before importing\npygame.\n\nThis switches the pygame.font module to a pure freetype implementation that\nbypasses SDL_ttf. See the font module for why you might want to do this. Must\nbe set before importing pygame.\n\nForces the library backend used in the camera module, overriding the platform\ndefaults. Must be set before calling `pygame.camera.init()`.\n\nSDL Environment Variables\n\nThese variables are defined by SDL.\n\nFor documentation on the environment variables available in pygame 1 try here.\nFor Pygame 2, some selected environment variables are listed below.\n\nThis will make the pygame window open in the centre of the display. Must be\nset before calling `pygame.display.set_mode()`.\n\nThis allows control over the placement of the pygame window within the\ndisplay. Must be set before calling `pygame.display.set_mode()`.\n\nOn some platforms there are multiple video drivers available and this allows\nusers to pick between them. More information is available here. Must be set\nbefore calling `pygame.init()` or `pygame.display.init()`.\n\nOn some platforms there are multiple audio drivers available and this allows\nusers to pick between them. More information is available here. Must be set\nbefore calling `pygame.init()` or `pygame.mixer.init()`.\n\nBy default pygame apps disable screensavers while they are running. Setting\nthis environment variable allows users or developers to change that and make\nscreensavers run again.\n\nBy default SDL tries to disable the X11 compositor for all pygame apps. This\nis usually a good thing as it's faster, however if you have an app which\ndoesn't update every frame and are using linux you may want to disable this\nbypass. The bypass has reported problems on KDE linux. This variable is only\nused on x11/linux platforms.\n\n"}, {"name": "mouse", "path": "ref/mouse", "type": "pygame.mouse", "text": "\nThe mouse functions can be used to get the current state of the mouse device.\nThese functions can also alter the system cursor for the mouse.\n\nWhen the display mode is set, the event queue will start receiving mouse\nevents. The mouse buttons generate `pygame.MOUSEBUTTONDOWN` and\n`pygame.MOUSEBUTTONUP` events when they are pressed and released. These events\ncontain a button attribute representing which button was pressed. The mouse\nwheel will generate `pygame.MOUSEBUTTONDOWN` and `pygame.MOUSEBUTTONUP` events\nwhen rolled. The button will be set to 4 when the wheel is rolled up, and to\nbutton 5 when the wheel is rolled down. Whenever the mouse is moved it\ngenerates a `pygame.MOUSEMOTION` event. The mouse movement is broken into\nsmall and accurate motion events. As the mouse is moving many motion events\nwill be placed on the queue. Mouse motion events that are not properly cleaned\nfrom the event queue are the primary reason the event queue fills up.\n\nIf the mouse cursor is hidden, and input is grabbed to the current display the\nmouse will enter a virtual input mode, where the relative movements of the\nmouse will never be stopped by the borders of the screen. See the functions\n`pygame.mouse.set_visible()` and `pygame.event.set_grab()` to get this\nconfigured.\n\nMouse Wheel Behavior in pygame 2\n\nThere is proper functionality for mouse wheel behaviour with pygame 2\nsupporting `pygame.MOUSEWHEEL` events. The new events support horizontal and\nvertical scroll movements, with signed integer values representing the amount\nscrolled (`x` and `y`), as well as `flipped` direction (the set positive and\nnegative values for each axis is flipped). Read more about SDL2 input-related\nchanges here https://wiki.libsdl.org/MigrationGuide#Input\n\nIn pygame 2, the mouse wheel functionality can be used by listening for the\n`pygame.MOUSEWHEEL` type of an event. When this event is triggered, a\ndeveloper can access the appropriate `Event` object with `pygame.event.get()`.\nThe object can be used to access data about the mouse scroll, such as `which`\n(it will tell you what exact mouse device trigger the event).\n\nReturns a sequence of booleans representing the state of all the mouse\nbuttons. A true value means the mouse is currently being pressed at the time\nof the call.\n\nNote, to get all of the mouse events it is better to use either\n`pygame.event.wait()` or `pygame.event.get()` and check all of those events to\nsee if they are `MOUSEBUTTONDOWN`, `MOUSEBUTTONUP`, or `MOUSEMOTION`.\n\nNote, that on `X11` some X servers use middle button emulation. When you click\nboth buttons `1` and `3` at the same time a `2` button event can be emitted.\n\nNote, remember to call `pygame.event.get()` before this function. Otherwise it\nwill not work as expected.\n\nTo support five button mice, an optional parameter `num_buttons` has been\nadded in pygame 2. When this is set to `5`, `button4` and `button5` are added\nto the returned tuple. Only `3` and `5` are valid values for this parameter.\n\nChanged in pygame 2.0.0: `num_buttons` argument added\n\nReturns the `x` and `y` position of the mouse cursor. The position is relative\nto the top-left corner of the display. The cursor position can be located\noutside of the display window, but is always constrained to the screen.\n\nReturns the amount of movement in `x` and `y` since the previous call to this\nfunction. The relative movement of the mouse cursor is constrained to the\nedges of the screen, but see the virtual input mouse mode for a way around\nthis. Virtual input mode is described at the top of the page.\n\nSet the current mouse position to arguments given. If the mouse cursor is\nvisible it will jump to the new coordinates. Moving the mouse will generate a\nnew `pygame.MOUSEMOTION` event.\n\nIf the bool argument is true, the mouse cursor will be visible. This will\nreturn the previous visible state of the cursor.\n\nGet the current visibility state of the mouse cursor. `True` if the mouse is\nvisible, `False` otherwise.\n\nNew in pygame 2.0.0.\n\nReturns true when pygame is receiving mouse input events (or, in windowing\nterminology, is \"active\" or has the \"focus\").\n\nThis method is most useful when working in a window. By contrast, in full-\nscreen mode, this method always returns true.\n\nNote: under `MS` Windows, the window that has the mouse focus also has the\nkeyboard focus. But under X-Windows, one window can receive mouse events and\nanother receive keyboard events. `pygame.mouse.get_focused()` indicates\nwhether the pygame window receives mouse events.\n\nWhen the mouse cursor is visible, it will be displayed as a black and white\nbitmap using the given bitmask arrays. The `size` is a sequence containing the\ncursor width and height. `hotspot` is a sequence containing the cursor hotspot\nposition.\n\nA cursor has a width and height, but a mouse position is represented by a set\nof point coordinates. So the value passed into the cursor `hotspot` variable\nhelps pygame to actually determine at what exact point the cursor is at.\n\n`xormasks` is a sequence of bytes containing the cursor xor data masks. Lastly\n`andmasks`, a sequence of bytes containing the cursor bitmask data. To create\nthese variables, we can make use of the `pygame.cursors.compile()` function.\n\nWidth and height must be a multiple of 8, and the mask arrays must be the\ncorrect size for the given width and height. Otherwise an exception is raised.\n\nSee the `pygame.cursor` module for help creating default and custom masks for\nthe mouse cursor and also for more examples related to cursors.\n\nWhen the mouse cursor is visible, it will displayed as a operating system\nspecific variant of the options below.\n\nNew in pygame 2.0.0.\n\nGet the information about the mouse system cursor. The return value is the\nsame data as the arguments passed into `pygame.mouse.set_cursor()`.\n\nNote\n\nThis method is unavailable with pygame 2, as SDL2 does not provide the\nunderlying code to implement this method.\n\n"}, {"name": "mouse.get_cursor", "path": "ref/mouse#pygame.mouse.get_cursor", "type": "pygame.mouse", "text": "\nGet the information about the mouse system cursor. The return value is the\nsame data as the arguments passed into `pygame.mouse.set_cursor()`.\n\nNote\n\nThis method is unavailable with pygame 2, as SDL2 does not provide the\nunderlying code to implement this method.\n\n"}, {"name": "mouse.get_focused", "path": "ref/mouse#pygame.mouse.get_focused", "type": "pygame.mouse", "text": "\nReturns true when pygame is receiving mouse input events (or, in windowing\nterminology, is \"active\" or has the \"focus\").\n\nThis method is most useful when working in a window. By contrast, in full-\nscreen mode, this method always returns true.\n\nNote: under `MS` Windows, the window that has the mouse focus also has the\nkeyboard focus. But under X-Windows, one window can receive mouse events and\nanother receive keyboard events. `pygame.mouse.get_focused()` indicates\nwhether the pygame window receives mouse events.\n\n"}, {"name": "mouse.get_pos", "path": "ref/mouse#pygame.mouse.get_pos", "type": "pygame.mouse", "text": "\nReturns the `x` and `y` position of the mouse cursor. The position is relative\nto the top-left corner of the display. The cursor position can be located\noutside of the display window, but is always constrained to the screen.\n\n"}, {"name": "mouse.get_pressed", "path": "ref/mouse#pygame.mouse.get_pressed", "type": "pygame.mouse", "text": "\nReturns a sequence of booleans representing the state of all the mouse\nbuttons. A true value means the mouse is currently being pressed at the time\nof the call.\n\nNote, to get all of the mouse events it is better to use either\n`pygame.event.wait()` or `pygame.event.get()` and check all of those events to\nsee if they are `MOUSEBUTTONDOWN`, `MOUSEBUTTONUP`, or `MOUSEMOTION`.\n\nNote, that on `X11` some X servers use middle button emulation. When you click\nboth buttons `1` and `3` at the same time a `2` button event can be emitted.\n\nNote, remember to call `pygame.event.get()` before this function. Otherwise it\nwill not work as expected.\n\nTo support five button mice, an optional parameter `num_buttons` has been\nadded in pygame 2. When this is set to `5`, `button4` and `button5` are added\nto the returned tuple. Only `3` and `5` are valid values for this parameter.\n\nChanged in pygame 2.0.0: `num_buttons` argument added\n\n"}, {"name": "mouse.get_rel", "path": "ref/mouse#pygame.mouse.get_rel", "type": "pygame.mouse", "text": "\nReturns the amount of movement in `x` and `y` since the previous call to this\nfunction. The relative movement of the mouse cursor is constrained to the\nedges of the screen, but see the virtual input mouse mode for a way around\nthis. Virtual input mode is described at the top of the page.\n\n"}, {"name": "mouse.get_visible", "path": "ref/mouse#pygame.mouse.get_visible", "type": "pygame.mouse", "text": "\nGet the current visibility state of the mouse cursor. `True` if the mouse is\nvisible, `False` otherwise.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "mouse.set_cursor", "path": "ref/mouse#pygame.mouse.set_cursor", "type": "pygame.mouse", "text": "\nWhen the mouse cursor is visible, it will be displayed as a black and white\nbitmap using the given bitmask arrays. The `size` is a sequence containing the\ncursor width and height. `hotspot` is a sequence containing the cursor hotspot\nposition.\n\nA cursor has a width and height, but a mouse position is represented by a set\nof point coordinates. So the value passed into the cursor `hotspot` variable\nhelps pygame to actually determine at what exact point the cursor is at.\n\n`xormasks` is a sequence of bytes containing the cursor xor data masks. Lastly\n`andmasks`, a sequence of bytes containing the cursor bitmask data. To create\nthese variables, we can make use of the `pygame.cursors.compile()` function.\n\nWidth and height must be a multiple of 8, and the mask arrays must be the\ncorrect size for the given width and height. Otherwise an exception is raised.\n\nSee the `pygame.cursor` module for help creating default and custom masks for\nthe mouse cursor and also for more examples related to cursors.\n\n"}, {"name": "mouse.set_pos", "path": "ref/mouse#pygame.mouse.set_pos", "type": "pygame.mouse", "text": "\nSet the current mouse position to arguments given. If the mouse cursor is\nvisible it will jump to the new coordinates. Moving the mouse will generate a\nnew `pygame.MOUSEMOTION` event.\n\n"}, {"name": "mouse.set_system_cursor", "path": "ref/mouse#pygame.mouse.set_system_cursor", "type": "pygame.mouse", "text": "\nWhen the mouse cursor is visible, it will displayed as a operating system\nspecific variant of the options below.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "mouse.set_visible", "path": "ref/mouse#pygame.mouse.set_visible", "type": "pygame.mouse", "text": "\nIf the bool argument is true, the mouse cursor will be visible. This will\nreturn the previous visible state of the cursor.\n\n"}, {"name": "Overlay", "path": "ref/overlay", "type": "pygame.Overlay", "text": "\nThe Overlay objects provide support for accessing hardware video overlays.\nVideo overlays do not use standard `RGB` pixel formats, and can use multiple\nresolutions of data to create a single image.\n\nThe Overlay objects represent lower level access to the display hardware. To\nuse the object you must understand the technical details of video overlays.\n\nThe Overlay format determines the type of pixel data used. Not all hardware\nwill support all types of overlay formats. Here is a list of available format\ntypes:\n\nThe width and height arguments control the size for the overlay image data.\nThe overlay image can be displayed at any size, not just the resolution of the\noverlay.\n\nThe overlay objects are always visible, and always show above the regular\ndisplay contents.\n\nDisplay the YUV data in SDL's overlay planes. The y, u, and v arguments are\nstrings of binary data. The data must be in the correct format used to create\nthe Overlay.\n\nIf no argument is passed in, the Overlay will simply be redrawn with the\ncurrent data. This can be useful when the Overlay is not really hardware\naccelerated.\n\nThe strings are not validated, and improperly sized strings could crash the\nprogram.\n\nSet the location for the overlay. The overlay will always be shown relative to\nthe main display Surface. This does not actually redraw the overlay, it will\nbe updated on the next call to `Overlay.display()`.\n\nReturns a True value when the Overlay is hardware accelerated. If the platform\ndoes not support acceleration, software rendering is used.\n\n"}, {"name": "Overlay.display", "path": "ref/overlay#pygame.Overlay.display", "type": "pygame.Overlay", "text": "\nDisplay the YUV data in SDL's overlay planes. The y, u, and v arguments are\nstrings of binary data. The data must be in the correct format used to create\nthe Overlay.\n\nIf no argument is passed in, the Overlay will simply be redrawn with the\ncurrent data. This can be useful when the Overlay is not really hardware\naccelerated.\n\nThe strings are not validated, and improperly sized strings could crash the\nprogram.\n\n"}, {"name": "Overlay.get_hardware", "path": "ref/overlay#pygame.Overlay.get_hardware", "type": "pygame.Overlay", "text": "\nReturns a True value when the Overlay is hardware accelerated. If the platform\ndoes not support acceleration, software rendering is used.\n\n"}, {"name": "Overlay.set_location", "path": "ref/overlay#pygame.Overlay.set_location", "type": "pygame.Overlay", "text": "\nSet the location for the overlay. The overlay will always be shown relative to\nthe main display Surface. This does not actually redraw the overlay, it will\nbe updated on the next call to `Overlay.display()`.\n\n"}, {"name": "PixelArray", "path": "ref/pixelarray", "type": "pygame.PixelArray", "text": "\nThe PixelArray wraps a Surface and provides direct access to the surface's\npixels. A pixel array can be one or two dimensional. A two dimensional array,\nlike its surface, is indexed [column, row]. Pixel arrays support slicing, both\nfor returning a subarray or for assignment. A pixel array sliced on a single\ncolumn or row returns a one dimensional pixel array. Arithmetic and other\noperations are not supported. A pixel array can be safely assigned to itself.\nFinally, pixel arrays export an array struct interface, allowing them to\ninteract with `pygame.pixelcopy` methods and NumPy arrays.\n\nA PixelArray pixel item can be assigned a raw integer values, a `pygame.Color`\ninstance, or a (r, g, b[, a]) tuple.\n\nHowever, only a pixel's integer value is returned. So, to compare a pixel to a\nparticular color the color needs to be first mapped using the\n`Surface.map_rgb()` method of the Surface object for which the PixelArray was\ncreated.\n\nWhen assigning to a range of of pixels, a non tuple sequence of colors or a\nPixelArray can be used as the value. For a sequence, the length must match the\nPixelArray width.\n\nFor PixelArray assignment, if the right hand side array has a row length of 1,\nthen the column is broadcast over the target array's rows. An array of height\n1 is broadcast over the target's columns, and is equivalent to assigning a 1D\nPixelArray.\n\nSubscript slices can also be used to assign to a rectangular subview of the\ntarget PixelArray.\n\nSubscript slices can also be used to do fast rectangular pixel manipulations\ninstead of iterating over the x or y axis. The\n\nDuring its lifetime, the PixelArray locks the surface, thus you explicitly\nhave to close() it once its not used any more and the surface should perform\noperations in the same scope. It is best to use it as a context manager using\nthe with PixelArray(surf) as pixel_array: style. So it works on pypy too.\n\nA simple `:` slice index for the column can be omitted.\n\nA note about PixelArray to PixelArray assignment, for arrays with an item size\nof 3 (created from 24 bit surfaces) pixel values are translated from the\nsource to the destinations format. The red, green, and blue color elements of\neach pixel are shifted to match the format of the target surface. For all\nother pixel sizes no such remapping occurs. This should change in later pygame\nreleases, where format conversions are performed for all pixel sizes. To avoid\ncode breakage when full mapped copying is implemented it is suggested\nPixelArray to PixelArray copies be only between surfaces of identical format.\n\nclose() method was added. For explicitly cleaning up.\n\nbeing able to use PixelArray as a context manager for cleanup.\n\nboth of these are useful for when working without reference counting (pypy).\n\narray struct interface\n\ntranspose method\n\nbroadcasting for a length 1 dimension\n\nA 2D PixelArray can have a length 1 dimension. Only an integer index on a 2D\nPixelArray returns a 1D array.\n\nFor assignment, a tuple can only be a color. Any other sequence type is a\nsequence of colors.\n\nThe Surface the PixelArray was created for.\n\nThis is the same as `Surface.get_bytesize()` for the pixel array's surface.\n\nNew in pygame 1.9.2.\n\nA pixel array can be 1 or 2 dimensional.\n\nNew in pygame 1.9.2.\n\nA tuple or length `ndim` giving the length of each dimension. Analogous to\n`Surface.get_size()`.\n\nNew in pygame 1.9.2.\n\nA tuple or length `ndim` byte counts. When a stride is multiplied by the\ncorresponding index it gives the offset of that index from the start of the\narray. A stride is negative for an array that has is inverted (has a negative\nstep).\n\nNew in pygame 1.9.2.\n\nCreates a new Surface from the current PixelArray. Depending on the current\nPixelArray the size, pixel order etc. will be different from the original\nSurface.\n\nNew in pygame 1.8.1.\n\nReplaces the pixels with the passed color in the PixelArray by changing them\nthem to the passed replacement color.\n\nIt uses a simple weighted Euclidean distance formula to calculate the distance\nbetween the colors. The distance space ranges from 0.0 to 1.0 and is used as\nthreshold for the color detection. This causes the replacement to take pixels\nwith a similar, but not exactly identical color, into account as well.\n\nThis is an in place operation that directly affects the pixels of the\nPixelArray.\n\nNew in pygame 1.8.1.\n\nExtracts the passed color by changing all matching pixels to white, while non-\nmatching pixels are changed to black. This returns a new PixelArray with the\nblack/white color mask.\n\nIt uses a simple weighted Euclidean distance formula to calculate the distance\nbetween the colors. The distance space ranges from 0.0 to 1.0 and is used as\nthreshold for the color detection. This causes the extraction to take pixels\nwith a similar, but not exactly identical color, into account as well.\n\nNew in pygame 1.8.1.\n\nCompares the contents of the PixelArray with those from the passed in\nPixelArray. It returns a new PixelArray with a black/white color mask that\nindicates the differences (black) of both arrays. Both PixelArray objects must\nhave identical bit depths and dimensions.\n\nIt uses a simple weighted Euclidean distance formula to calculate the distance\nbetween the colors. The distance space ranges from 0.0 to 1.0 and is used as a\nthreshold for the color detection. This causes the comparison to mark pixels\nwith a similar, but not exactly identical color, as white.\n\nNew in pygame 1.8.1.\n\nThis method returns a new view of the pixel array with the rows and columns\nswapped. So for a (w, h) sized array a (h, w) slice is returned. If an array\nis one dimensional, then a length 1 x dimension is added, resulting in a 2D\npixel array.\n\nNew in pygame 1.9.2.\n\nThis method is for explicitly closing the PixelArray, and releasing a lock on\nthe Suface.\n\nNew in pygame 1.9.4.\n\n"}, {"name": "PixelArray.close", "path": "ref/pixelarray#pygame.PixelArray.close", "type": "pygame.PixelArray", "text": "\nThis method is for explicitly closing the PixelArray, and releasing a lock on\nthe Suface.\n\nNew in pygame 1.9.4.\n\n"}, {"name": "PixelArray.compare", "path": "ref/pixelarray#pygame.PixelArray.compare", "type": "pygame.PixelArray", "text": "\nCompares the contents of the PixelArray with those from the passed in\nPixelArray. It returns a new PixelArray with a black/white color mask that\nindicates the differences (black) of both arrays. Both PixelArray objects must\nhave identical bit depths and dimensions.\n\nIt uses a simple weighted Euclidean distance formula to calculate the distance\nbetween the colors. The distance space ranges from 0.0 to 1.0 and is used as a\nthreshold for the color detection. This causes the comparison to mark pixels\nwith a similar, but not exactly identical color, as white.\n\nNew in pygame 1.8.1.\n\n"}, {"name": "PixelArray.extract", "path": "ref/pixelarray#pygame.PixelArray.extract", "type": "pygame.PixelArray", "text": "\nExtracts the passed color by changing all matching pixels to white, while non-\nmatching pixels are changed to black. This returns a new PixelArray with the\nblack/white color mask.\n\nIt uses a simple weighted Euclidean distance formula to calculate the distance\nbetween the colors. The distance space ranges from 0.0 to 1.0 and is used as\nthreshold for the color detection. This causes the extraction to take pixels\nwith a similar, but not exactly identical color, into account as well.\n\nNew in pygame 1.8.1.\n\n"}, {"name": "PixelArray.itemsize", "path": "ref/pixelarray#pygame.PixelArray.itemsize", "type": "pygame.PixelArray", "text": "\nThis is the same as `Surface.get_bytesize()` for the pixel array's surface.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "PixelArray.make_surface", "path": "ref/pixelarray#pygame.PixelArray.make_surface", "type": "pygame.PixelArray", "text": "\nCreates a new Surface from the current PixelArray. Depending on the current\nPixelArray the size, pixel order etc. will be different from the original\nSurface.\n\nNew in pygame 1.8.1.\n\n"}, {"name": "PixelArray.ndim", "path": "ref/pixelarray#pygame.PixelArray.ndim", "type": "pygame.PixelArray", "text": "\nA pixel array can be 1 or 2 dimensional.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "PixelArray.replace", "path": "ref/pixelarray#pygame.PixelArray.replace", "type": "pygame.PixelArray", "text": "\nReplaces the pixels with the passed color in the PixelArray by changing them\nthem to the passed replacement color.\n\nIt uses a simple weighted Euclidean distance formula to calculate the distance\nbetween the colors. The distance space ranges from 0.0 to 1.0 and is used as\nthreshold for the color detection. This causes the replacement to take pixels\nwith a similar, but not exactly identical color, into account as well.\n\nThis is an in place operation that directly affects the pixels of the\nPixelArray.\n\nNew in pygame 1.8.1.\n\n"}, {"name": "PixelArray.shape", "path": "ref/pixelarray#pygame.PixelArray.shape", "type": "pygame.PixelArray", "text": "\nA tuple or length `ndim` giving the length of each dimension. Analogous to\n`Surface.get_size()`.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "PixelArray.strides", "path": "ref/pixelarray#pygame.PixelArray.strides", "type": "pygame.PixelArray", "text": "\nA tuple or length `ndim` byte counts. When a stride is multiplied by the\ncorresponding index it gives the offset of that index from the start of the\narray. A stride is negative for an array that has is inverted (has a negative\nstep).\n\nNew in pygame 1.9.2.\n\n"}, {"name": "PixelArray.surface", "path": "ref/pixelarray#pygame.PixelArray.surface", "type": "pygame.PixelArray", "text": "\nThe Surface the PixelArray was created for.\n\n"}, {"name": "PixelArray.transpose", "path": "ref/pixelarray#pygame.PixelArray.transpose", "type": "pygame.PixelArray", "text": "\nThis method returns a new view of the pixel array with the rows and columns\nswapped. So for a (w, h) sized array a (h, w) slice is returned. If an array\nis one dimensional, then a length 1 x dimension is added, resulting in a 2D\npixel array.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "pixelcopy", "path": "ref/pixelcopy", "type": "pygame.pixelcopy", "text": "\nThe `pygame.pixelcopy` module contains functions for copying between surfaces\nand objects exporting an array structure interface. It is a backend for\n`pygame.surfarray`, adding NumPy support. But pixelcopy is more general, and\nintended for direct use.\n\nThe array struct interface exposes an array's data in a standard way. It was\nintroduced in NumPy. In Python 2.7 and above it is replaced by the new buffer\nprotocol, though the buffer protocol is still a work in progress. The array\nstruct interface, on the other hand, is stable and works with earlier Python\nversions. So for now the array struct interface is the predominate way pygame\nhandles array introspection.\n\nNew in pygame 1.9.2.\n\nThe surface_to_array function copies pixels from a Surface object to a 2D or\n3D array. Depending on argument `kind` and the target array dimension, a copy\nmay be raw pixel value, RGB, a color component slice, or colorkey alpha\ntransparency value. Recognized `kind` values are the single character codes\n'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case insensitive, so 'p' is\nequivalent to 'P'. The first two dimensions of the target must be the surface\nsize (w, h).\n\nThe default 'P' kind code does a direct raw integer pixel (mapped) value copy\nto a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array having\nshape (w, h, 3). For an 8 bit colormap surface this means the table index is\ncopied to a 2D array, not the table value itself. A 2D array's item size must\nbe at least as large as the surface's pixel byte size. The item size of a 3D\narray must be at least one byte.\n\nFor the 'R', 'G', 'B', and 'A' copy kinds a single color component of the\nunmapped surface pixels are copied to the target 2D array. For kind 'A' and\nsurfaces with source alpha (the surface was created with the SRCALPHA flag),\nhas a colorkey (set with `Surface.set_colorkey()`), or has a blanket alpha\n(set with `Surface.set_alpha()`) then the alpha values are those expected for\na SDL surface. If a surface has no explicit alpha value, then the target array\nis filled with the value of the optional `opaque` surface_to_array argument\n(default 255: not transparent).\n\nCopy kind 'C' is a special case for alpha copy of a source surface with\ncolorkey. Unlike the 'A' color component copy, the `clear` argument value is\nused for colorkey matches, `opaque` otherwise. By default, a match has alpha 0\n(totally transparent), while everything else is alpha 255 (totally opaque). It\nis a more general implementation of `pygame.surfarray.array_colorkey()`.\n\nSpecific to surface_to_array, a ValueError is raised for target arrays with\nincorrect shape or item size. A TypeError is raised for an incorrect kind\ncode. Surface specific problems, such as locking, raise a pygame.error.\n\nSee `pygame.surfarray.blit_array()`.\n\nMap an array of color element values - (w, h, ..., 3) - to an array of pixels\n- (w, h) according to the format of <surface>.\n\nCreate a new Surface that best resembles the data and format of the array. The\narray can be 2D or 3D with any sized integer values.\n\n"}, {"name": "pixelcopy.array_to_surface", "path": "ref/pixelcopy#pygame.pixelcopy.array_to_surface", "type": "pygame.pixelcopy", "text": "\nSee `pygame.surfarray.blit_array()`.\n\n"}, {"name": "pixelcopy.make_surface", "path": "ref/pixelcopy#pygame.pixelcopy.make_surface", "type": "pygame.pixelcopy", "text": "\nCreate a new Surface that best resembles the data and format of the array. The\narray can be 2D or 3D with any sized integer values.\n\n"}, {"name": "pixelcopy.map_array", "path": "ref/pixelcopy#pygame.pixelcopy.map_array", "type": "pygame.pixelcopy", "text": "\nMap an array of color element values - (w, h, ..., 3) - to an array of pixels\n- (w, h) according to the format of <surface>.\n\n"}, {"name": "pixelcopy.surface_to_array", "path": "ref/pixelcopy#pygame.pixelcopy.surface_to_array", "type": "pygame.pixelcopy", "text": "\nThe surface_to_array function copies pixels from a Surface object to a 2D or\n3D array. Depending on argument `kind` and the target array dimension, a copy\nmay be raw pixel value, RGB, a color component slice, or colorkey alpha\ntransparency value. Recognized `kind` values are the single character codes\n'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case insensitive, so 'p' is\nequivalent to 'P'. The first two dimensions of the target must be the surface\nsize (w, h).\n\nThe default 'P' kind code does a direct raw integer pixel (mapped) value copy\nto a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array having\nshape (w, h, 3). For an 8 bit colormap surface this means the table index is\ncopied to a 2D array, not the table value itself. A 2D array's item size must\nbe at least as large as the surface's pixel byte size. The item size of a 3D\narray must be at least one byte.\n\nFor the 'R', 'G', 'B', and 'A' copy kinds a single color component of the\nunmapped surface pixels are copied to the target 2D array. For kind 'A' and\nsurfaces with source alpha (the surface was created with the SRCALPHA flag),\nhas a colorkey (set with `Surface.set_colorkey()`), or has a blanket alpha\n(set with `Surface.set_alpha()`) then the alpha values are those expected for\na SDL surface. If a surface has no explicit alpha value, then the target array\nis filled with the value of the optional `opaque` surface_to_array argument\n(default 255: not transparent).\n\nCopy kind 'C' is a special case for alpha copy of a source surface with\ncolorkey. Unlike the 'A' color component copy, the `clear` argument value is\nused for colorkey matches, `opaque` otherwise. By default, a match has alpha 0\n(totally transparent), while everything else is alpha 255 (totally opaque). It\nis a more general implementation of `pygame.surfarray.array_colorkey()`.\n\nSpecific to surface_to_array, a ValueError is raised for target arrays with\nincorrect shape or item size. A TypeError is raised for an incorrect kind\ncode. Surface specific problems, such as locking, raise a pygame.error.\n\n"}, {"name": "pygame", "path": "ref/pygame", "type": "pygame", "text": "\nThe pygame package represents the top-level package for others to use. Pygame\nitself is broken into many submodules, but this does not affect programs that\nuse pygame.\n\nAs a convenience, most of the top-level variables in pygame have been placed\ninside a module named `pygame.locals`. This is meant to be used with `from\npygame.locals import *`, in addition to `import pygame`.\n\nWhen you `import pygame` all available pygame submodules are automatically\nimported. Be aware that some of the pygame modules are considered optional,\nand may not be available. In that case, pygame will provide a placeholder\nobject instead of the module, which can be used to test for availability.\n\nInitialize all imported pygame modules. No exceptions will be raised if a\nmodule fails, but the total number if successful and failed inits will be\nreturned as a tuple. You can always initialize individual modules manually,\nbut `pygame.init()` is a convenient way to get everything started. The\n`init()` functions for individual modules will raise exceptions when they\nfail.\n\nYou may want to initialize the different modules separately to speed up your\nprogram or to not use modules your game does not require.\n\nIt is safe to call this `init()` more than once as repeated calls will have no\neffect. This is true even if you have `pygame.quit()` all the modules.\n\nUninitialize all pygame modules that have previously been initialized. When\nthe Python interpreter shuts down, this method is called regardless, so your\nprogram should not need it, except when it wants to terminate its pygame\nresources and continue. It is safe to call this function more than once as\nrepeated calls have no effect.\n\nNote\n\nCalling `pygame.quit()` will not exit your program. Consider letting your\nprogram end in the same way a normal Python program will end.\n\nReturns `True` if pygame is currently initialized.\n\nNew in pygame 1.9.5.\n\nThis exception is raised whenever a pygame or SDL operation fails. You can\ncatch any anticipated problems and deal with the error. The exception is\nalways raised with a descriptive message about the problem.\n\nDerived from the `RuntimeError` exception, which can also be used to catch\nthese raised errors.\n\nSDL maintains an internal error message. This message will usually be given to\nyou when `pygame.error()` is raised, so this function will rarely be needed.\n\nSDL maintains an internal error message. This message will usually be given to\nyou when `pygame.error()` is raised, so this function will rarely be needed.\n\nReturns the three version numbers of the SDL library. This version is built at\ncompile time. It can be used to detect which features may or may not be\navailable through pygame.\n\nNew in pygame 1.7.0.\n\nReturns the byte order of the SDL library. It returns `1234` for little endian\nbyte order and `4321` for big endian byte order.\n\nNew in pygame 1.8.\n\nWhen `pygame.quit()` is called, all registered quit functions are called.\nPygame modules do this automatically when they are initializing, so this\nfunction will rarely be needed.\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return\n`None`; if not given, raise `SyntaxError`.\n\nencoding (string): If present, encoding to use. The default is\n`'unicode_escape'`.\n\nerrors (string): If given, how to handle unencodable characters. The default\nis `'backslashreplace'`.\n\netype (exception type): If given, the exception type to raise for an encoding\nerror. The default is `UnicodeEncodeError`, as returned by\n`PyUnicode_AsEncodedString()`. For the default encoding and errors values\nthere should be no encoding errors.\n\nThis function is used in encoding file paths. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return\n`None`; if not given, raise `SyntaxError`.\n\netype (exception type): If given, the exception type to raise for an encoding\nerror. The default is `UnicodeEncodeError`, as returned by\n`PyUnicode_AsEncodedString()`.\n\nThis function is used to encode file paths in pygame. Encoding is to the codec\nas returned by `sys.getfilesystemencoding()`. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\nThis module is automatically imported into the pygame package and can be used\nto check which version of pygame has been imported.\n\nThis is the version represented as a string. It can contain a micro release\nnumber as well, e.g. `'1.5.2'`\n\nThis version information can easily be compared with other version numbers of\nthe same format. An example of checking pygame version numbers would look like\nthis:\n\nNew in pygame 1.9.6: Attributes `major`, `minor`, and `patch`.\n\nChanged in pygame 1.9.6: `str(pygame.version.vernum)` returns a string like\n`\"2.0.0\"` instead of `\"(2, 0, 0)\"`.\n\nChanged in pygame 1.9.6: `repr(pygame.version.vernum)` returns a string like\n`\"PygameVersion(major=2, minor=0, patch=0)\"` instead of `\"(2, 0, 0)\"`.\n\nThe Mercurial node identifier of the repository checkout from which this\npackage was built. If the identifier ends with a plus sign '+' then the\npackage contains uncommitted changes. Please include this revision number in\nbug reports, especially for non-release pygame builds.\n\nImportant note: pygame development has moved to github, this variable is\nobsolete now. As soon as development shifted to github, this variable started\nreturning an empty string `\"\"`. It has always been returning an empty string\nsince `v1.9.5`.\n\nChanged in pygame 1.9.5: Always returns an empty string `\"\"`.\n\nThis is the SDL library version represented as an extended tuple. It also has\nattributes 'major', 'minor' & 'patch' that can be accessed like this:\n\nprinting the whole thing returns a string like this:\n\nNew in pygame 2.0.0.\n\nSetting Environment Variables\n\nSome aspects of pygame's behaviour can be controlled by setting environment\nvariables, they cover a wide range of the library's functionality. Some of the\nvariables are from pygame itself, while others come from the underlying C SDL\nlibrary that pygame uses.\n\nIn python, environment variables are usually set in code like this:\n\nOr to preserve users ability to override the variable:\n\nIf the variable is more useful for users of an app to set than the developer\nthen they can set it like this:\n\nWindows:\n\nLinux/Mac:\n\nFor some variables they need to be set before initialising pygame, some must\nbe set before even importing pygame, and others can simply be set right before\nthe area of code they control is run.\n\nBelow is a list of environment variables, their settable values, and a brief\ndescription of what they do.\n\nPygame Environment Variables\n\nThese variables are defined by pygame itself.\n\nThis sets the display where pygame will open its window or screen. The value\nset here will be used if set before calling `pygame.display.set_mode()`, and\nas long as no 'display' parameter is passed into `pygame.display.set_mode()`.\n\nThis forces set_mode() to use the SCALED display mode and, if \"photo\" is set,\nmakes the scaling use the slowest, but highest quality anisotropic scaling\nalgorithm, if it is available. Must be set before calling\n`pygame.display.set_mode()`.\n\nThis makes pygame use the SDL2 blitter for all alpha blending. The SDL2\nblitter is sometimes faster than the default blitter but uses a different\nformula so the final colours may differ. Must be set before `pygame.init()` is\ncalled.\n\nThis stops the welcome message popping up in the console that tells you which\nversion of python, pygame & SDL you are using. Must be set before importing\npygame.\n\nThis switches the pygame.font module to a pure freetype implementation that\nbypasses SDL_ttf. See the font module for why you might want to do this. Must\nbe set before importing pygame.\n\nForces the library backend used in the camera module, overriding the platform\ndefaults. Must be set before calling `pygame.camera.init()`.\n\nSDL Environment Variables\n\nThese variables are defined by SDL.\n\nFor documentation on the environment variables available in pygame 1 try here.\nFor Pygame 2, some selected environment variables are listed below.\n\nThis will make the pygame window open in the centre of the display. Must be\nset before calling `pygame.display.set_mode()`.\n\nThis allows control over the placement of the pygame window within the\ndisplay. Must be set before calling `pygame.display.set_mode()`.\n\nOn some platforms there are multiple video drivers available and this allows\nusers to pick between them. More information is available here. Must be set\nbefore calling `pygame.init()` or `pygame.display.init()`.\n\nOn some platforms there are multiple audio drivers available and this allows\nusers to pick between them. More information is available here. Must be set\nbefore calling `pygame.init()` or `pygame.mixer.init()`.\n\nBy default pygame apps disable screensavers while they are running. Setting\nthis environment variable allows users or developers to change that and make\nscreensavers run again.\n\nBy default SDL tries to disable the X11 compositor for all pygame apps. This\nis usually a good thing as it's faster, however if you have an app which\ndoesn't update every frame and are using linux you may want to disable this\nbypass. The bypass has reported problems on KDE linux. This variable is only\nused on x11/linux platforms.\n\n"}, {"name": "quit", "path": "ref/pygame#pygame.quit", "type": "pygame", "text": "\nUninitialize all pygame modules that have previously been initialized. When\nthe Python interpreter shuts down, this method is called regardless, so your\nprogram should not need it, except when it wants to terminate its pygame\nresources and continue. It is safe to call this function more than once as\nrepeated calls have no effect.\n\nNote\n\nCalling `pygame.quit()` will not exit your program. Consider letting your\nprogram end in the same way a normal Python program will end.\n\n"}, {"name": "Rect", "path": "ref/rect", "type": "pygame.Rect", "text": "\nPygame uses Rect objects to store and manipulate rectangular areas. A Rect can\nbe created from a combination of left, top, width, and height values. Rects\ncan also be created from python objects that are already a Rect or have an\nattribute named \"rect\".\n\nAny pygame function that requires a Rect argument also accepts any of these\nvalues to construct a Rect. This makes it easier to create Rects on the fly as\narguments to functions.\n\nThe Rect functions that change the position or size of a Rect return a new\ncopy of the Rect with the affected changes. The original Rect is not modified.\nSome methods have an alternate \"in-place\" version that returns None but\naffects the original Rect. These \"in-place\" methods are denoted with the \"ip\"\nsuffix.\n\nThe Rect object has several virtual attributes which can be used to move and\nalign the Rect:\n\nAll of these attributes can be assigned to:\n\nAssigning to size, width or height changes the dimensions of the rectangle;\nall other assignments move the rectangle without resizing it. Notice that some\nattributes are integers and others are pairs of integers.\n\nIf a Rect has a nonzero width or height, it will return `True` for a nonzero\ntest. Some methods return a Rect with 0 size to represent an invalid\nrectangle. A Rect with a 0 size will not collide when using collision\ndetection methods (e.g. `collidepoint()`, `colliderect()`, etc.).\n\nThe coordinates for Rect objects are all integers. The size values can be\nprogrammed to have negative values, but these are considered illegal Rects for\nmost operations.\n\nThere are several collision tests between other rectangles. Most python\ncontainers can be searched for collisions against a single Rect.\n\nThe area covered by a Rect does not include the right- and bottom-most edge of\npixels. If one Rect's bottom border is another Rect's top border (i.e.,\nrect1.bottom=rect2.top), the two meet exactly on the screen but do not\noverlap, and `rect1.colliderect(rect2)` returns false.\n\nNew in pygame 1.9.2: The Rect class can be subclassed. Methods such as\n`copy()` and `move()` will recognize this and return instances of the\nsubclass. However, the subclass's `__init__()` method is not called, and\n`__new__()` is assumed to take no arguments. So these methods should be\noverridden if any extra attributes need to be copied.\n\nReturns a new rectangle having the same position and size as the original.\n\nNew in pygame 1.9\n\nReturns a new rectangle that is moved by the given offset. The x and y\narguments can be any integer value, positive or negative.\n\nSame as the `Rect.move()` method, but operates in place.\n\nReturns a new rectangle with the size changed by the given offset. The\nrectangle remains centered around its current center. Negative values will\nshrink the rectangle. Note, uses integers, if the offset given is too small(<\n2 > -2), center will be off.\n\nSame as the `Rect.inflate()` method, but operates in place.\n\nSets the position and size of the rectangle, in place. See parameters for\n`pygame.Rect()` for the parameters of this function.\n\nNew in pygame 2.0.1.\n\nReturns a new rectangle that is moved to be completely inside the argument\nRect. If the rectangle is too large to fit inside, it is centered inside the\nargument Rect, but its size is not changed.\n\nSame as the `Rect.clamp()` method, but operates in place.\n\nReturns a new rectangle that is cropped to be completely inside the argument\nRect. If the two rectangles do not overlap to begin with, a Rect with 0 size\nis returned.\n\nReturns the coordinates of a line that is cropped to be completely inside the\nrectangle. If the line does not overlap the rectangle, then an empty tuple is\nreturned.\n\nThe line to crop can be any of the following formats (floats can be used in\nplace of ints, but they will be truncated):\n\nNote\n\nThis method can be used for collision detection between a rect and a line. See\nexample code below.\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a `pygame.Rect` always lie\none pixel outside of its actual border.\n\nNew in pygame 2.0.0.\n\nReturns a new rectangle that completely covers the area of the two provided\nrectangles. There may be area inside the new Rect that is not covered by the\noriginals.\n\nSame as the `Rect.union()` method, but operates in place.\n\nReturns the union of one rectangle with a sequence of many rectangles.\n\nThe same as the `Rect.unionall()` method, but operates in place.\n\nReturns a new rectangle that is moved and resized to fit another. The aspect\nratio of the original Rect is preserved, so the new rectangle may be smaller\nthan the target in either width or height.\n\nThis will flip the width or height of a rectangle if it has a negative size.\nThe rectangle will remain in the same place, with only the sides swapped.\n\nReturns true when the argument is completely inside the Rect.\n\nReturns true if the given point is inside the rectangle. A point along the\nright or bottom edge is not considered to be inside the rectangle.\n\nNote\n\nFor collision detection between a rect and a line the `clipline()` method can\nbe used.\n\nReturns true if any portion of either rectangle overlap (except the top+bottom\nor left+right edges).\n\nNote\n\nFor collision detection between a rect and a line the `clipline()` method can\nbe used.\n\nTest whether the rectangle collides with any in a sequence of rectangles. The\nindex of the first collision found is returned. If no collisions are found an\nindex of -1 is returned.\n\nReturns a list of all the indices that contain rectangles that collide with\nthe Rect. If no intersecting rectangles are found, an empty list is returned.\n\nReturns the first key and value pair that intersects with the calling Rect\nobject. If no collisions are found, `None` is returned. If `use_values` is 0\n(default) then the dict's keys will be used in the collision detection,\notherwise the dict's values will be used.\n\nNote\n\nRect objects cannot be used as keys in a dictionary (they are not hashable),\nso they must be converted to a tuple/list. e.g.\n`rect.collidedict({tuple(key_rect) : value})`\n\nReturns a list of all the key and value pairs that intersect with the calling\nRect object. If no collisions are found an empty list is returned. If\n`use_values` is 0 (default) then the dict's keys will be used in the collision\ndetection, otherwise the dict's values will be used.\n\nNote\n\nRect objects cannot be used as keys in a dictionary (they are not hashable),\nso they must be converted to a tuple/list. e.g.\n`rect.collidedictall({tuple(key_rect) : value})`\n\n"}, {"name": "Rect.clamp", "path": "ref/rect#pygame.Rect.clamp", "type": "pygame.Rect", "text": "\nReturns a new rectangle that is moved to be completely inside the argument\nRect. If the rectangle is too large to fit inside, it is centered inside the\nargument Rect, but its size is not changed.\n\n"}, {"name": "Rect.clamp_ip", "path": "ref/rect#pygame.Rect.clamp_ip", "type": "pygame.Rect", "text": "\nSame as the `Rect.clamp()` method, but operates in place.\n\n"}, {"name": "Rect.clip", "path": "ref/rect#pygame.Rect.clip", "type": "pygame.Rect", "text": "\nReturns a new rectangle that is cropped to be completely inside the argument\nRect. If the two rectangles do not overlap to begin with, a Rect with 0 size\nis returned.\n\n"}, {"name": "Rect.clipline", "path": "ref/rect#pygame.Rect.clipline", "type": "pygame.Rect", "text": "\nReturns the coordinates of a line that is cropped to be completely inside the\nrectangle. If the line does not overlap the rectangle, then an empty tuple is\nreturned.\n\nThe line to crop can be any of the following formats (floats can be used in\nplace of ints, but they will be truncated):\n\nNote\n\nThis method can be used for collision detection between a rect and a line. See\nexample code below.\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a `pygame.Rect` always lie\none pixel outside of its actual border.\n\nNew in pygame 2.0.0.\n\n"}, {"name": "Rect.collidedict", "path": "ref/rect#pygame.Rect.collidedict", "type": "pygame.Rect", "text": "\nReturns the first key and value pair that intersects with the calling Rect\nobject. If no collisions are found, `None` is returned. If `use_values` is 0\n(default) then the dict's keys will be used in the collision detection,\notherwise the dict's values will be used.\n\nNote\n\nRect objects cannot be used as keys in a dictionary (they are not hashable),\nso they must be converted to a tuple/list. e.g.\n`rect.collidedict({tuple(key_rect) : value})`\n\n"}, {"name": "Rect.collidedictall", "path": "ref/rect#pygame.Rect.collidedictall", "type": "pygame.Rect", "text": "\nReturns a list of all the key and value pairs that intersect with the calling\nRect object. If no collisions are found an empty list is returned. If\n`use_values` is 0 (default) then the dict's keys will be used in the collision\ndetection, otherwise the dict's values will be used.\n\nNote\n\nRect objects cannot be used as keys in a dictionary (they are not hashable),\nso they must be converted to a tuple/list. e.g.\n`rect.collidedictall({tuple(key_rect) : value})`\n\n"}, {"name": "Rect.collidelist", "path": "ref/rect#pygame.Rect.collidelist", "type": "pygame.Rect", "text": "\nTest whether the rectangle collides with any in a sequence of rectangles. The\nindex of the first collision found is returned. If no collisions are found an\nindex of -1 is returned.\n\n"}, {"name": "Rect.collidelistall", "path": "ref/rect#pygame.Rect.collidelistall", "type": "pygame.Rect", "text": "\nReturns a list of all the indices that contain rectangles that collide with\nthe Rect. If no intersecting rectangles are found, an empty list is returned.\n\n"}, {"name": "Rect.collidepoint", "path": "ref/rect#pygame.Rect.collidepoint", "type": "pygame.Rect", "text": "\nReturns true if the given point is inside the rectangle. A point along the\nright or bottom edge is not considered to be inside the rectangle.\n\nNote\n\nFor collision detection between a rect and a line the `clipline()` method can\nbe used.\n\n"}, {"name": "Rect.colliderect", "path": "ref/rect#pygame.Rect.colliderect", "type": "pygame.Rect", "text": "\nReturns true if any portion of either rectangle overlap (except the top+bottom\nor left+right edges).\n\nNote\n\nFor collision detection between a rect and a line the `clipline()` method can\nbe used.\n\n"}, {"name": "Rect.contains", "path": "ref/rect#pygame.Rect.contains", "type": "pygame.Rect", "text": "\nReturns true when the argument is completely inside the Rect.\n\n"}, {"name": "Rect.copy", "path": "ref/rect#pygame.Rect.copy", "type": "pygame.Rect", "text": "\nReturns a new rectangle having the same position and size as the original.\n\nNew in pygame 1.9\n\n"}, {"name": "Rect.fit", "path": "ref/rect#pygame.Rect.fit", "type": "pygame.Rect", "text": "\nReturns a new rectangle that is moved and resized to fit another. The aspect\nratio of the original Rect is preserved, so the new rectangle may be smaller\nthan the target in either width or height.\n\n"}, {"name": "Rect.inflate", "path": "ref/rect#pygame.Rect.inflate", "type": "pygame.Rect", "text": "\nReturns a new rectangle with the size changed by the given offset. The\nrectangle remains centered around its current center. Negative values will\nshrink the rectangle. Note, uses integers, if the offset given is too small(<\n2 > -2), center will be off.\n\n"}, {"name": "Rect.inflate_ip", "path": "ref/rect#pygame.Rect.inflate_ip", "type": "pygame.Rect", "text": "\nSame as the `Rect.inflate()` method, but operates in place.\n\n"}, {"name": "Rect.move", "path": "ref/rect#pygame.Rect.move", "type": "pygame.Rect", "text": "\nReturns a new rectangle that is moved by the given offset. The x and y\narguments can be any integer value, positive or negative.\n\n"}, {"name": "Rect.move_ip", "path": "ref/rect#pygame.Rect.move_ip", "type": "pygame.Rect", "text": "\nSame as the `Rect.move()` method, but operates in place.\n\n"}, {"name": "Rect.normalize", "path": "ref/rect#pygame.Rect.normalize", "type": "pygame.Rect", "text": "\nThis will flip the width or height of a rectangle if it has a negative size.\nThe rectangle will remain in the same place, with only the sides swapped.\n\n"}, {"name": "Rect.union", "path": "ref/rect#pygame.Rect.union", "type": "pygame.Rect", "text": "\nReturns a new rectangle that completely covers the area of the two provided\nrectangles. There may be area inside the new Rect that is not covered by the\noriginals.\n\n"}, {"name": "Rect.union_ip", "path": "ref/rect#pygame.Rect.union_ip", "type": "pygame.Rect", "text": "\nSame as the `Rect.union()` method, but operates in place.\n\n"}, {"name": "Rect.unionall", "path": "ref/rect#pygame.Rect.unionall", "type": "pygame.Rect", "text": "\nReturns the union of one rectangle with a sequence of many rectangles.\n\n"}, {"name": "Rect.unionall_ip", "path": "ref/rect#pygame.Rect.unionall_ip", "type": "pygame.Rect", "text": "\nThe same as the `Rect.unionall()` method, but operates in place.\n\n"}, {"name": "Rect.update", "path": "ref/rect#pygame.Rect.update", "type": "pygame.Rect", "text": "\nSets the position and size of the rectangle, in place. See parameters for\n`pygame.Rect()` for the parameters of this function.\n\nNew in pygame 2.0.1.\n\n"}, {"name": "register_quit", "path": "ref/pygame#pygame.register_quit", "type": "pygame", "text": "\nWhen `pygame.quit()` is called, all registered quit functions are called.\nPygame modules do this automatically when they are initializing, so this\nfunction will rarely be needed.\n\n"}, {"name": "scrap", "path": "ref/scrap", "type": "pygame.scrap", "text": "\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code may break with the next pygame release.\n\nThe scrap module is for transferring data to/from the clipboard. This allows\nfor cutting and pasting data between pygame and other applications. Some basic\ndata (MIME) types are defined and registered:\n\n`pygame.SCRAP_PPM`, `pygame.SCRAP_PBM` and `pygame.SCRAP_BMP` are suitable for\nsurface buffers to be shared with other applications. `pygame.SCRAP_TEXT` is\nan alias for the plain text clipboard type.\n\nDepending on the platform, additional types are automatically registered when\ndata is placed into the clipboard to guarantee a consistent sharing behaviour\nwith other applications. The following listed types can be used as strings to\nbe passed to the respective `pygame.scrap` module functions.\n\nFor Windows platforms, these additional types are supported automatically and\nresolve to their internal definitions:\n\nFor X11 platforms, these additional types are supported automatically and\nresolve to their internal definitions:\n\nUser defined types can be used, but the data might not be accessible by other\napplications unless they know what data type to look for. Example: Data placed\ninto the clipboard by `pygame.scrap.put(\"my_data_type\", byte_data)` can only\nbe accessed by applications which query the clipboard for the `\"my_data_type\"`\ndata type.\n\nFor an example of how the scrap module works refer to the examples page\n(`pygame.examples.scrap_clipboard.main()`) or the code directly in GitHub\n(pygame/examples/scrap_clipboard.py).\n\nNew in pygame 1.8.\n\nNote\n\nThe scrap module is currently only supported for Windows, X11 and Mac OS X. On\nMac OS X only text works at the moment - other types may be supported in\nfuture releases.\n\nInitialize the scrap module.\n\nNote\n\nThe scrap module requires `pygame.display.set_mode()` be called before being\ninitialized.\n\nGets the scrap module's initialization state.\n\nNew in pygame 1.9.5.\n\nRetrieves the data for the specified type from the clipboard. In python 3 the\ndata is returned as a byte string and might need further processing (such as\ndecoding to Unicode).\n\nGets a list of data type string identifiers for the data currently available\non the clipboard. Each identifier can be used in the `pygame.scrap.get()`\nmethod to get the clipboard content of the specific type.\n\nPlaces data for a given clipboard type into the clipboard. The data must be a\nstring buffer. The type is a string identifying the type of data to be placed\ninto the clipboard. This can be one of the predefined `pygame.SCRAP_PBM`,\n`pygame.SCRAP_PPM`, `pygame.SCRAP_BMP` or `pygame.SCRAP_TEXT` values or a user\ndefined string identifier.\n\npygame.error \\-- if unable to put the data into the clipboard\n\nChecks whether data for the given type is currently available in the\nclipboard.\n\nIndicates if the clipboard ownership has been lost by the pygame application.\n\nSets the access mode for the clipboard. This is only of interest for X11\nenvironments where clipboard modes `pygame.SCRAP_SELECTION` (for mouse\nselections) and `pygame.SCRAP_CLIPBOARD` (for the clipboard) are available.\nSetting the mode to `pygame.SCRAP_SELECTION` in other environments will not\nchange the mode from `pygame.SCRAP_CLIPBOARD`.\n\n"}, {"name": "scrap.contains", "path": "ref/scrap#pygame.scrap.contains", "type": "pygame.scrap", "text": "\nChecks whether data for the given type is currently available in the\nclipboard.\n\n"}, {"name": "scrap.get", "path": "ref/scrap#pygame.scrap.get", "type": "pygame.scrap", "text": "\nRetrieves the data for the specified type from the clipboard. In python 3 the\ndata is returned as a byte string and might need further processing (such as\ndecoding to Unicode).\n\n"}, {"name": "scrap.get_init", "path": "ref/scrap#pygame.scrap.get_init", "type": "pygame.scrap", "text": "\nGets the scrap module's initialization state.\n\nNew in pygame 1.9.5.\n\n"}, {"name": "scrap.get_types", "path": "ref/scrap#pygame.scrap.get_types", "type": "pygame.scrap", "text": "\nGets a list of data type string identifiers for the data currently available\non the clipboard. Each identifier can be used in the `pygame.scrap.get()`\nmethod to get the clipboard content of the specific type.\n\n"}, {"name": "scrap.init", "path": "ref/scrap#pygame.scrap.init", "type": "pygame.scrap", "text": "\nInitialize the scrap module.\n\nNote\n\nThe scrap module requires `pygame.display.set_mode()` be called before being\ninitialized.\n\n"}, {"name": "scrap.lost", "path": "ref/scrap#pygame.scrap.lost", "type": "pygame.scrap", "text": "\nIndicates if the clipboard ownership has been lost by the pygame application.\n\n"}, {"name": "scrap.put", "path": "ref/scrap#pygame.scrap.put", "type": "pygame.scrap", "text": "\nPlaces data for a given clipboard type into the clipboard. The data must be a\nstring buffer. The type is a string identifying the type of data to be placed\ninto the clipboard. This can be one of the predefined `pygame.SCRAP_PBM`,\n`pygame.SCRAP_PPM`, `pygame.SCRAP_BMP` or `pygame.SCRAP_TEXT` values or a user\ndefined string identifier.\n\npygame.error \\-- if unable to put the data into the clipboard\n\n"}, {"name": "scrap.set_mode", "path": "ref/scrap#pygame.scrap.set_mode", "type": "pygame.scrap", "text": "\nSets the access mode for the clipboard. This is only of interest for X11\nenvironments where clipboard modes `pygame.SCRAP_SELECTION` (for mouse\nselections) and `pygame.SCRAP_CLIPBOARD` (for the clipboard) are available.\nSetting the mode to `pygame.SCRAP_SELECTION` in other environments will not\nchange the mode from `pygame.SCRAP_CLIPBOARD`.\n\n"}, {"name": "set_error", "path": "ref/pygame#pygame.set_error", "type": "pygame", "text": "\nSDL maintains an internal error message. This message will usually be given to\nyou when `pygame.error()` is raised, so this function will rarely be needed.\n\n"}, {"name": "sndarray", "path": "ref/sndarray", "type": "pygame.sndarray", "text": "\nFunctions to convert between NumPy arrays and Sound objects. This module will\nonly be available when pygame can use the external NumPy package.\n\nSound data is made of thousands of samples per second, and each sample is the\namplitude of the wave at a particular moment in time. For example, in 22-kHz\nformat, element number 5 of the array is the amplitude of the wave after\n5/22000 seconds.\n\nEach sample is an 8-bit or 16-bit integer, depending on the data format. A\nstereo sound file has two values per sample, while a mono sound file only has\none.\n\nCreates a new array for the sound data and copies the samples. The array will\nalways be in the format returned from `pygame.mixer.get_init()`.\n\nCreates a new array that directly references the samples in a Sound object.\nModifying the array will change the Sound. The array will always be in the\nformat returned from `pygame.mixer.get_init()`.\n\nCreate a new playable Sound object from an array. The mixer module must be\ninitialized and the array format must be similar to the mixer audio format.\n\nDEPRECATED: Uses the requested array type for the module functions. The only\nsupported arraytype is `'numpy'`. Other values will raise ValueError.\n\nDEPRECATED: Returns the currently active array type. This will be a value of\nthe `get_arraytypes()` tuple and indicates which type of array module is used\nfor the array creation.\n\nNew in pygame 1.8.\n\nDEPRECATED: Checks, which array systems are available and returns them as a\ntuple of strings. The values of the tuple can be used directly in the\n`pygame.sndarray.use_arraytype()` () method. If no supported array system\ncould be found, None will be returned.\n\nNew in pygame 1.8.\n\n"}, {"name": "sndarray.array", "path": "ref/sndarray#pygame.sndarray.array", "type": "pygame.sndarray", "text": "\nCreates a new array for the sound data and copies the samples. The array will\nalways be in the format returned from `pygame.mixer.get_init()`.\n\n"}, {"name": "sndarray.get_arraytype", "path": "ref/sndarray#pygame.sndarray.get_arraytype", "type": "pygame.sndarray", "text": "\nDEPRECATED: Returns the currently active array type. This will be a value of\nthe `get_arraytypes()` tuple and indicates which type of array module is used\nfor the array creation.\n\nNew in pygame 1.8.\n\n"}, {"name": "sndarray.get_arraytypes", "path": "ref/sndarray#pygame.sndarray.get_arraytypes", "type": "pygame.sndarray", "text": "\nDEPRECATED: Checks, which array systems are available and returns them as a\ntuple of strings. The values of the tuple can be used directly in the\n`pygame.sndarray.use_arraytype()` () method. If no supported array system\ncould be found, None will be returned.\n\nNew in pygame 1.8.\n\n"}, {"name": "sndarray.make_sound", "path": "ref/sndarray#pygame.sndarray.make_sound", "type": "pygame.sndarray", "text": "\nCreate a new playable Sound object from an array. The mixer module must be\ninitialized and the array format must be similar to the mixer audio format.\n\n"}, {"name": "sndarray.samples", "path": "ref/sndarray#pygame.sndarray.samples", "type": "pygame.sndarray", "text": "\nCreates a new array that directly references the samples in a Sound object.\nModifying the array will change the Sound. The array will always be in the\nformat returned from `pygame.mixer.get_init()`.\n\n"}, {"name": "sndarray.use_arraytype", "path": "ref/sndarray#pygame.sndarray.use_arraytype", "type": "pygame.sndarray", "text": "\nDEPRECATED: Uses the requested array type for the module functions. The only\nsupported arraytype is `'numpy'`. Other values will raise ValueError.\n\n"}, {"name": "sprite", "path": "ref/sprite", "type": "pygame.sprite", "text": "\nThis module contains several simple classes to be used within games. There is\nthe main Sprite class and several Group classes that contain Sprites. The use\nof these classes is entirely optional when using pygame. The classes are\nfairly lightweight and only provide a starting place for the code that is\ncommon to most games.\n\nThe Sprite class is intended to be used as a base class for the different\ntypes of objects in the game. There is also a base Group class that simply\nstores sprites. A game could create new types of Group classes that operate on\nspecially customized Sprite instances they contain.\n\nThe basic Sprite class can draw the Sprites it contains to a Surface. The\n`Group.draw()` method requires that each Sprite have a `Surface.image`\nattribute and a `Surface.rect`. The `Group.clear()` method requires these same\nattributes, and can be used to erase all the Sprites with background. There\nare also more advanced Groups: `pygame.sprite.RenderUpdates()` and\n`pygame.sprite.OrderedUpdates()`.\n\nLastly, this module contains several collision functions. These help find\nsprites inside multiple groups that have intersecting bounding rectangles. To\nfind the collisions, the Sprites are required to have a `Surface.rect`\nattribute assigned.\n\nThe groups are designed for high efficiency in removing and adding Sprites to\nthem. They also allow cheap testing to see if a Sprite already exists in a\nGroup. A given Sprite can exist in any number of groups. A game could use some\ngroups to control object rendering, and a completely separate set of groups to\ncontrol interaction or player movement. Instead of adding type attributes or\nbools to a derived Sprite class, consider keeping the Sprites inside organized\nGroups. This will allow for easier lookup later in the game.\n\nSprites and Groups manage their relationships with the `add()` and `remove()`\nmethods. These methods can accept a single or multiple targets for membership.\nThe default initializers for these classes also takes a single or list of\ntargets for initial membership. It is safe to repeatedly add and remove the\nsame Sprite from a Group.\n\nWhile it is possible to design sprite and group classes that don't derive from\nthe Sprite and AbstractGroup classes below, it is strongly recommended that\nyou extend those when you add a Sprite or Group class.\n\nSprites are not thread safe. So lock them yourself if using threads.\n\nThe base class for visible game objects. Derived classes will want to override\nthe `Sprite.update()` and assign a `Sprite.image` and `Sprite.rect`\nattributes. The initializer can accept any number of Group instances to be\nadded to.\n\nWhen subclassing the Sprite, be sure to call the base initializer before\nadding the Sprite to Groups. For example:\n\nThe default implementation of this method does nothing; it's just a convenient\n\"hook\" that you can override. This method is called by `Group.update()` with\nwhatever arguments you give it.\n\nThere is no need to use this method if not using the convenience method by the\nsame name in the Group class.\n\nAny number of Group instances can be passed as arguments. The Sprite will be\nadded to the Groups it is not already a member of.\n\nAny number of Group instances can be passed as arguments. The Sprite will be\nremoved from the Groups it is currently a member of.\n\nThe Sprite is removed from all the Groups that contain it. This won't change\nanything about the state of the Sprite. It is possible to continue to use the\nSprite after this method has been called, including adding it to Groups.\n\nReturns True when the Sprite belongs to one or more Groups.\n\nReturn a list of all the Groups that contain this Sprite.\n\nExtra DirtySprite attributes with their default values:\n\ndirty = 1\n\nblendmode = 0\n\nsource_rect = None\n\nvisible = 1\n\nlayer = 0\n\nA simple container for Sprite objects. This class can be inherited to create\ncontainers with more specific behaviors. The constructor takes any number of\nSprite arguments to add to the Group. The group supports the following\nstandard Python operations:\n\nThe Sprites in the Group are not ordered, so drawing and iterating the Sprites\nis in no particular order.\n\nReturn a list of all the Sprites this group contains. You can also get an\niterator from the group, but you cannot iterate over a Group while modifying\nit.\n\nCreates a new Group with all the same Sprites as the original. If you have\nsubclassed Group, the new object will have the same (sub-)class as the\noriginal. This only works if the derived class's constructor takes the same\narguments as the Group class's.\n\nAdd any number of Sprites to this Group. This will only add Sprites that are\nnot already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nRemove any number of Sprites from the Group. This will only remove Sprites\nthat are already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nReturn True if the Group contains all of the given sprites. This is similar to\nusing the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests\nif a single Sprite belongs to a Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nCalls the `update()` method on all Sprites in the Group. The base Sprite class\nhas an update method that takes any number of arguments and does nothing. The\narguments passed to `Group.update()` will be passed to each Sprite.\n\nThere is no way to get the return value from the `Sprite.update()` methods.\n\nDraws the contained Sprites to the Surface argument. This uses the\n`Sprite.image` attribute for the source surface, and `Sprite.rect` for the\nposition.\n\nThe Group does not keep sprites in any order, so the draw order is arbitrary.\n\nErases the Sprites used in the last `Group.draw()` call. The destination\nSurface is cleared by filling the drawn Sprite positions with the background.\n\nThe background is usually a Surface image the same dimensions as the\ndestination Surface. However, it can also be a callback function that takes\ntwo arguments; the destination Surface and an area to clear. The background\ncallback function will be called several times each clear.\n\nHere is an example callback that will clear the Sprites with solid red:\n\nRemoves all Sprites from this Group.\n\nThis class is an alias to `pygame.sprite.Group()`. It has no additional\nfunctionality.\n\nThis class is an alias to `pygame.sprite.Group()`. It has no additional\nfunctionality.\n\nThis class is derived from `pygame.sprite.Group()`. It has an extended\n`draw()` method that tracks the changed areas of the screen.\n\nDraws all the Sprites to the surface, the same as `Group.draw()`. This method\nalso returns a list of Rectangular areas on the screen that have been changed.\nThe returned changes include areas of the screen that have been affected by\nprevious `Group.clear()` calls.\n\nThe returned Rect list should be passed to `pygame.display.update()`. This\nwill help performance on software driven display modes. This type of updating\nis usually only helpful on destinations with non-animating backgrounds.\n\nThis class derives from `pygame.sprite.RenderUpdates()`. It maintains the\norder in which the Sprites were added to the Group for rendering. This makes\nadding and removing Sprites from the Group a little slower than regular\nGroups.\n\nThis group is fully compatible with `pygame.sprite.Sprite`.\n\nYou can set the default layer through kwargs using 'default_layer' and an\ninteger for the layer. The default layer is 0.\n\nIf the sprite you add has an attribute _layer then that layer will be used. If\nthe **kwarg contains 'layer' then the sprites passed will be added to that\nlayer (overriding the `sprite.layer` attribute). If neither sprite has\nattribute layer nor **kwarg then the default layer is used to add the sprites.\n\nNew in pygame 1.8.\n\nIf the `sprite(s)` have an attribute layer then that is used for the layer. If\n**kwargs contains 'layer' then the `sprite(s)` will be added to that argument\n(overriding the sprite layer attribute). If neither is passed then the\n`sprite(s)` will be added to the default layer.\n\nBottom sprites first, top last.\n\nRaises IndexOutOfBounds if the idx is not within range.\n\nsprite must have been added to the renderer. It is not checked.\n\nIf the sprite is not found then it will return the default layer.\n\nBrings the sprite to front, changing sprite layer to topmost layer (added at\nthe end of that layer).\n\nMoves the sprite to the bottom layer, moving it behind all other layers and\nadding one additional layer.\n\nReturns all sprites from a layer, ordered by how they where added. It uses\nlinear search and the sprites are not removed from layer.\n\nThe layers number must exist, it is not checked.\n\nThis group requires `pygame.sprite.DirtySprite` or any sprite that has the\nfollowing attributes:\n\nIt uses the dirty flag technique and is therefore faster than the\n`pygame.sprite.RenderUpdates` if you have many static sprites. It also\nswitches automatically between dirty rect update and full screen drawing, so\nyou do no have to worry what would be faster.\n\nSame as for the `pygame.sprite.Group`. You can specify some additional\nattributes through kwargs:\n\nNew in pygame 1.8.\n\nYou can pass the background too. If a background is already set, then the bgd\nargument has no effect.\n\nscreen_rect is in screen coordinates.\n\nsprite must have been added to the renderer. It is not checked.\n\nDefault is 1000./80 where 80 is the fps I want to switch to full screen mode.\nThis method's name is a typo and should be fixed.\n\nThe GroupSingle container only holds a single Sprite. When a new Sprite is\nadded, the old one is removed.\n\nThere is a special property, `GroupSingle.sprite`, that accesses the Sprite\nthat this Group contains. It can be None when the Group is empty. The property\ncan also be assigned to add a Sprite into the GroupSingle container.\n\nReturn a list containing all Sprites in a Group that intersect with another\nSprite. Intersection is determined by comparing the `Sprite.rect` attribute of\neach Sprite.\n\nThe dokill argument is a bool. If set to True, all Sprites that collide will\nbe removed from the Group.\n\nThe collided argument is a callback function used to calculate if two sprites\nare colliding. it should take two sprites as values, and return a bool value\nindicating if they are colliding. If collided is not passed, all sprites must\nhave a \"rect\" value, which is a rectangle of the sprite area, which will be\nused to calculate the collision.\n\ncollided callables:\n\nExample:\n\nTests for collision between two sprites. Uses the pygame rect colliderect\nfunction to calculate the collision. Intended to be passed as a collided\ncallback function to the *collide functions. Sprites must have a \"rect\"\nattributes.\n\nNew in pygame 1.8.\n\nA callable class that checks for collisions between two sprites, using a\nscaled version of the sprites rects.\n\nIs created with a ratio, the instance is then intended to be passed as a\ncollided callback function to the *collide functions.\n\nA ratio is a floating point number - 1.0 is the same size, 2.0 is twice as\nbig, and 0.5 is half the size.\n\nNew in pygame 1.8.1.\n\nTests for collision between two sprites, by testing to see if two circles\ncentered on the sprites overlap. If the sprites have a \"radius\" attribute,\nthat is used to create the circle, otherwise a circle is created that is big\nenough to completely enclose the sprites rect as given by the \"rect\"\nattribute. Intended to be passed as a collided callback function to the\n*collide functions. Sprites must have a \"rect\" and an optional \"radius\"\nattribute.\n\nNew in pygame 1.8.1.\n\nA callable class that checks for collisions between two sprites, using a\nscaled version of the sprites radius.\n\nIs created with a floating point ratio, the instance is then intended to be\npassed as a collided callback function to the *collide functions.\n\nA ratio is a floating point number - 1.0 is the same size, 2.0 is twice as\nbig, and 0.5 is half the size.\n\nThe created callable tests for collision between two sprites, by testing to\nsee if two circles centered on the sprites overlap, after scaling the circles\nradius by the stored ratio. If the sprites have a \"radius\" attribute, that is\nused to create the circle, otherwise a circle is created that is big enough to\ncompletely enclose the sprites rect as given by the \"rect\" attribute. Intended\nto be passed as a collided callback function to the *collide functions.\nSprites must have a \"rect\" and an optional \"radius\" attribute.\n\nNew in pygame 1.8.1.\n\nTests for collision between two sprites, by testing if their bitmasks overlap\n(uses `pygame.mask.Mask.overlap()`). If the sprites have a `mask` attribute,\nit is used as the mask, otherwise a mask is created from the sprite's `image`\n(uses `pygame.mask.from_surface()`). Sprites must have a `rect` attribute; the\n`mask` attribute is optional.\n\nThe first point of collision between the masks is returned. The collision\npoint is offset from `sprite1`'s mask's topleft corner (which is always (0,\n0)). The collision point is a position within the mask and is not related to\nthe actual screen position of `sprite1`.\n\nThis function is intended to be passed as a `collided` callback function to\nthe group collide functions (see `spritecollide()`, `groupcollide()`,\n`spritecollideany()`).\n\nNote\n\nTo increase performance, create and set a `mask` attibute for all sprites that\nwill use this function to check for collisions. Otherwise, each time this\nfunction is called it will create new masks.\n\nNote\n\nA new mask needs to be recreated each time a sprite's image is changed (e.g.\nif a new image is used or the existing image is rotated).\n\nNew in pygame 1.8.0.\n\nThis will find collisions between all the Sprites in two groups. Collision is\ndetermined by comparing the `Sprite.rect` attribute of each Sprite or by using\nthe collided function if it is not None.\n\nEvery Sprite inside group1 is added to the return dictionary. The value for\neach item is the list of Sprites in group2 that intersect.\n\nIf either dokill argument is True, the colliding Sprites will be removed from\ntheir respective Group.\n\nThe collided argument is a callback function used to calculate if two sprites\nare colliding. It should take two sprites as values and return a bool value\nindicating if they are colliding. If collided is not passed, then all sprites\nmust have a \"rect\" value, which is a rectangle of the sprite area, which will\nbe used to calculate the collision.\n\nIf the sprite collides with any single sprite in the group, a single sprite\nfrom the group is returned. On no collision None is returned.\n\nIf you don't need all the features of the `pygame.sprite.spritecollide()`\nfunction, this function will be a bit quicker.\n\nThe collided argument is a callback function used to calculate if two sprites\nare colliding. It should take two sprites as values and return a bool value\nindicating if they are colliding. If collided is not passed, then all sprites\nmust have a \"rect\" value, which is a rectangle of the sprite area, which will\nbe used to calculate the collision.\n\n"}, {"name": "sprite.collide_circle", "path": "ref/sprite#pygame.sprite.collide_circle", "type": "pygame.sprite", "text": "\nTests for collision between two sprites, by testing to see if two circles\ncentered on the sprites overlap. If the sprites have a \"radius\" attribute,\nthat is used to create the circle, otherwise a circle is created that is big\nenough to completely enclose the sprites rect as given by the \"rect\"\nattribute. Intended to be passed as a collided callback function to the\n*collide functions. Sprites must have a \"rect\" and an optional \"radius\"\nattribute.\n\nNew in pygame 1.8.1.\n\n"}, {"name": "sprite.collide_circle_ratio", "path": "ref/sprite#pygame.sprite.collide_circle_ratio", "type": "pygame.sprite", "text": "\nA callable class that checks for collisions between two sprites, using a\nscaled version of the sprites radius.\n\nIs created with a floating point ratio, the instance is then intended to be\npassed as a collided callback function to the *collide functions.\n\nA ratio is a floating point number - 1.0 is the same size, 2.0 is twice as\nbig, and 0.5 is half the size.\n\nThe created callable tests for collision between two sprites, by testing to\nsee if two circles centered on the sprites overlap, after scaling the circles\nradius by the stored ratio. If the sprites have a \"radius\" attribute, that is\nused to create the circle, otherwise a circle is created that is big enough to\ncompletely enclose the sprites rect as given by the \"rect\" attribute. Intended\nto be passed as a collided callback function to the *collide functions.\nSprites must have a \"rect\" and an optional \"radius\" attribute.\n\nNew in pygame 1.8.1.\n\n"}, {"name": "sprite.collide_mask", "path": "ref/sprite#pygame.sprite.collide_mask", "type": "pygame.sprite", "text": "\nTests for collision between two sprites, by testing if their bitmasks overlap\n(uses `pygame.mask.Mask.overlap()`). If the sprites have a `mask` attribute,\nit is used as the mask, otherwise a mask is created from the sprite's `image`\n(uses `pygame.mask.from_surface()`). Sprites must have a `rect` attribute; the\n`mask` attribute is optional.\n\nThe first point of collision between the masks is returned. The collision\npoint is offset from `sprite1`'s mask's topleft corner (which is always (0,\n0)). The collision point is a position within the mask and is not related to\nthe actual screen position of `sprite1`.\n\nThis function is intended to be passed as a `collided` callback function to\nthe group collide functions (see `spritecollide()`, `groupcollide()`,\n`spritecollideany()`).\n\nNote\n\nTo increase performance, create and set a `mask` attibute for all sprites that\nwill use this function to check for collisions. Otherwise, each time this\nfunction is called it will create new masks.\n\nNote\n\nA new mask needs to be recreated each time a sprite's image is changed (e.g.\nif a new image is used or the existing image is rotated).\n\nNew in pygame 1.8.0.\n\n"}, {"name": "sprite.collide_rect", "path": "ref/sprite#pygame.sprite.collide_rect", "type": "pygame.sprite", "text": "\nTests for collision between two sprites. Uses the pygame rect colliderect\nfunction to calculate the collision. Intended to be passed as a collided\ncallback function to the *collide functions. Sprites must have a \"rect\"\nattributes.\n\nNew in pygame 1.8.\n\n"}, {"name": "sprite.collide_rect_ratio", "path": "ref/sprite#pygame.sprite.collide_rect_ratio", "type": "pygame.sprite", "text": "\nA callable class that checks for collisions between two sprites, using a\nscaled version of the sprites rects.\n\nIs created with a ratio, the instance is then intended to be passed as a\ncollided callback function to the *collide functions.\n\nA ratio is a floating point number - 1.0 is the same size, 2.0 is twice as\nbig, and 0.5 is half the size.\n\nNew in pygame 1.8.1.\n\n"}, {"name": "sprite.DirtySprite", "path": "ref/sprite#pygame.sprite.DirtySprite", "type": "pygame.sprite", "text": "\nExtra DirtySprite attributes with their default values:\n\ndirty = 1\n\nblendmode = 0\n\nsource_rect = None\n\nvisible = 1\n\nlayer = 0\n\n"}, {"name": "sprite.Group", "path": "ref/sprite#pygame.sprite.Group", "type": "pygame.sprite", "text": "\nA simple container for Sprite objects. This class can be inherited to create\ncontainers with more specific behaviors. The constructor takes any number of\nSprite arguments to add to the Group. The group supports the following\nstandard Python operations:\n\nThe Sprites in the Group are not ordered, so drawing and iterating the Sprites\nis in no particular order.\n\nReturn a list of all the Sprites this group contains. You can also get an\niterator from the group, but you cannot iterate over a Group while modifying\nit.\n\nCreates a new Group with all the same Sprites as the original. If you have\nsubclassed Group, the new object will have the same (sub-)class as the\noriginal. This only works if the derived class's constructor takes the same\narguments as the Group class's.\n\nAdd any number of Sprites to this Group. This will only add Sprites that are\nnot already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nRemove any number of Sprites from the Group. This will only remove Sprites\nthat are already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nReturn True if the Group contains all of the given sprites. This is similar to\nusing the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests\nif a single Sprite belongs to a Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nCalls the `update()` method on all Sprites in the Group. The base Sprite class\nhas an update method that takes any number of arguments and does nothing. The\narguments passed to `Group.update()` will be passed to each Sprite.\n\nThere is no way to get the return value from the `Sprite.update()` methods.\n\nDraws the contained Sprites to the Surface argument. This uses the\n`Sprite.image` attribute for the source surface, and `Sprite.rect` for the\nposition.\n\nThe Group does not keep sprites in any order, so the draw order is arbitrary.\n\nErases the Sprites used in the last `Group.draw()` call. The destination\nSurface is cleared by filling the drawn Sprite positions with the background.\n\nThe background is usually a Surface image the same dimensions as the\ndestination Surface. However, it can also be a callback function that takes\ntwo arguments; the destination Surface and an area to clear. The background\ncallback function will be called several times each clear.\n\nHere is an example callback that will clear the Sprites with solid red:\n\nRemoves all Sprites from this Group.\n\n"}, {"name": "sprite.Group.add", "path": "ref/sprite#pygame.sprite.Group.add", "type": "pygame.sprite", "text": "\nAdd any number of Sprites to this Group. This will only add Sprites that are\nnot already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\n"}, {"name": "sprite.Group.clear", "path": "ref/sprite#pygame.sprite.Group.clear", "type": "pygame.sprite", "text": "\nErases the Sprites used in the last `Group.draw()` call. The destination\nSurface is cleared by filling the drawn Sprite positions with the background.\n\nThe background is usually a Surface image the same dimensions as the\ndestination Surface. However, it can also be a callback function that takes\ntwo arguments; the destination Surface and an area to clear. The background\ncallback function will be called several times each clear.\n\nHere is an example callback that will clear the Sprites with solid red:\n\n"}, {"name": "sprite.Group.copy", "path": "ref/sprite#pygame.sprite.Group.copy", "type": "pygame.sprite", "text": "\nCreates a new Group with all the same Sprites as the original. If you have\nsubclassed Group, the new object will have the same (sub-)class as the\noriginal. This only works if the derived class's constructor takes the same\narguments as the Group class's.\n\n"}, {"name": "sprite.Group.draw", "path": "ref/sprite#pygame.sprite.Group.draw", "type": "pygame.sprite", "text": "\nDraws the contained Sprites to the Surface argument. This uses the\n`Sprite.image` attribute for the source surface, and `Sprite.rect` for the\nposition.\n\nThe Group does not keep sprites in any order, so the draw order is arbitrary.\n\n"}, {"name": "sprite.Group.empty", "path": "ref/sprite#pygame.sprite.Group.empty", "type": "pygame.sprite", "text": "\nRemoves all Sprites from this Group.\n\n"}, {"name": "sprite.Group.has", "path": "ref/sprite#pygame.sprite.Group.has", "type": "pygame.sprite", "text": "\nReturn True if the Group contains all of the given sprites. This is similar to\nusing the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests\nif a single Sprite belongs to a Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\n"}, {"name": "sprite.Group.remove", "path": "ref/sprite#pygame.sprite.Group.remove", "type": "pygame.sprite", "text": "\nRemove any number of Sprites from the Group. This will only remove Sprites\nthat are already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\n"}, {"name": "sprite.Group.sprites", "path": "ref/sprite#pygame.sprite.Group.sprites", "type": "pygame.sprite", "text": "\nReturn a list of all the Sprites this group contains. You can also get an\niterator from the group, but you cannot iterate over a Group while modifying\nit.\n\n"}, {"name": "sprite.Group.update", "path": "ref/sprite#pygame.sprite.Group.update", "type": "pygame.sprite", "text": "\nCalls the `update()` method on all Sprites in the Group. The base Sprite class\nhas an update method that takes any number of arguments and does nothing. The\narguments passed to `Group.update()` will be passed to each Sprite.\n\nThere is no way to get the return value from the `Sprite.update()` methods.\n\n"}, {"name": "sprite.groupcollide", "path": "ref/sprite#pygame.sprite.groupcollide", "type": "pygame.sprite", "text": "\nThis will find collisions between all the Sprites in two groups. Collision is\ndetermined by comparing the `Sprite.rect` attribute of each Sprite or by using\nthe collided function if it is not None.\n\nEvery Sprite inside group1 is added to the return dictionary. The value for\neach item is the list of Sprites in group2 that intersect.\n\nIf either dokill argument is True, the colliding Sprites will be removed from\ntheir respective Group.\n\nThe collided argument is a callback function used to calculate if two sprites\nare colliding. It should take two sprites as values and return a bool value\nindicating if they are colliding. If collided is not passed, then all sprites\nmust have a \"rect\" value, which is a rectangle of the sprite area, which will\nbe used to calculate the collision.\n\n"}, {"name": "sprite.GroupSingle", "path": "ref/sprite#pygame.sprite.GroupSingle", "type": "pygame.sprite", "text": "\nThe GroupSingle container only holds a single Sprite. When a new Sprite is\nadded, the old one is removed.\n\nThere is a special property, `GroupSingle.sprite`, that accesses the Sprite\nthat this Group contains. It can be None when the Group is empty. The property\ncan also be assigned to add a Sprite into the GroupSingle container.\n\n"}, {"name": "sprite.LayeredDirty", "path": "ref/sprite#pygame.sprite.LayeredDirty", "type": "pygame.sprite", "text": "\nThis group requires `pygame.sprite.DirtySprite` or any sprite that has the\nfollowing attributes:\n\nIt uses the dirty flag technique and is therefore faster than the\n`pygame.sprite.RenderUpdates` if you have many static sprites. It also\nswitches automatically between dirty rect update and full screen drawing, so\nyou do no have to worry what would be faster.\n\nSame as for the `pygame.sprite.Group`. You can specify some additional\nattributes through kwargs:\n\nNew in pygame 1.8.\n\nYou can pass the background too. If a background is already set, then the bgd\nargument has no effect.\n\nscreen_rect is in screen coordinates.\n\nsprite must have been added to the renderer. It is not checked.\n\nDefault is 1000./80 where 80 is the fps I want to switch to full screen mode.\nThis method's name is a typo and should be fixed.\n\n"}, {"name": "sprite.LayeredDirty.change_layer", "path": "ref/sprite#pygame.sprite.LayeredDirty.change_layer", "type": "pygame.sprite", "text": "\nsprite must have been added to the renderer. It is not checked.\n\n"}, {"name": "sprite.LayeredDirty.clear", "path": "ref/sprite#pygame.sprite.LayeredDirty.clear", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredDirty.draw", "path": "ref/sprite#pygame.sprite.LayeredDirty.draw", "type": "pygame.sprite", "text": "\nYou can pass the background too. If a background is already set, then the bgd\nargument has no effect.\n\n"}, {"name": "sprite.LayeredDirty.get_clip", "path": "ref/sprite#pygame.sprite.LayeredDirty.get_clip", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredDirty.repaint_rect", "path": "ref/sprite#pygame.sprite.LayeredDirty.repaint_rect", "type": "pygame.sprite", "text": "\nscreen_rect is in screen coordinates.\n\n"}, {"name": "sprite.LayeredDirty.set_clip", "path": "ref/sprite#pygame.sprite.LayeredDirty.set_clip", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredDirty.set_timing_treshold", "path": "ref/sprite#pygame.sprite.LayeredDirty.set_timing_treshold", "type": "pygame.sprite", "text": "\nDefault is 1000./80 where 80 is the fps I want to switch to full screen mode.\nThis method's name is a typo and should be fixed.\n\n"}, {"name": "sprite.LayeredUpdates", "path": "ref/sprite#pygame.sprite.LayeredUpdates", "type": "pygame.sprite", "text": "\nThis group is fully compatible with `pygame.sprite.Sprite`.\n\nYou can set the default layer through kwargs using 'default_layer' and an\ninteger for the layer. The default layer is 0.\n\nIf the sprite you add has an attribute _layer then that layer will be used. If\nthe **kwarg contains 'layer' then the sprites passed will be added to that\nlayer (overriding the `sprite.layer` attribute). If neither sprite has\nattribute layer nor **kwarg then the default layer is used to add the sprites.\n\nNew in pygame 1.8.\n\nIf the `sprite(s)` have an attribute layer then that is used for the layer. If\n**kwargs contains 'layer' then the `sprite(s)` will be added to that argument\n(overriding the sprite layer attribute). If neither is passed then the\n`sprite(s)` will be added to the default layer.\n\nBottom sprites first, top last.\n\nRaises IndexOutOfBounds if the idx is not within range.\n\nsprite must have been added to the renderer. It is not checked.\n\nIf the sprite is not found then it will return the default layer.\n\nBrings the sprite to front, changing sprite layer to topmost layer (added at\nthe end of that layer).\n\nMoves the sprite to the bottom layer, moving it behind all other layers and\nadding one additional layer.\n\nReturns all sprites from a layer, ordered by how they where added. It uses\nlinear search and the sprites are not removed from layer.\n\nThe layers number must exist, it is not checked.\n\n"}, {"name": "sprite.LayeredUpdates.add", "path": "ref/sprite#pygame.sprite.LayeredUpdates.add", "type": "pygame.sprite", "text": "\nIf the `sprite(s)` have an attribute layer then that is used for the layer. If\n**kwargs contains 'layer' then the `sprite(s)` will be added to that argument\n(overriding the sprite layer attribute). If neither is passed then the\n`sprite(s)` will be added to the default layer.\n\n"}, {"name": "sprite.LayeredUpdates.change_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.change_layer", "type": "pygame.sprite", "text": "\nsprite must have been added to the renderer. It is not checked.\n\n"}, {"name": "sprite.LayeredUpdates.draw", "path": "ref/sprite#pygame.sprite.LayeredUpdates.draw", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.get_bottom_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_bottom_layer", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.get_layer_of_sprite", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_layer_of_sprite", "type": "pygame.sprite", "text": "\nIf the sprite is not found then it will return the default layer.\n\n"}, {"name": "sprite.LayeredUpdates.get_sprite", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_sprite", "type": "pygame.sprite", "text": "\nRaises IndexOutOfBounds if the idx is not within range.\n\n"}, {"name": "sprite.LayeredUpdates.get_sprites_at", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_sprites_at", "type": "pygame.sprite", "text": "\nBottom sprites first, top last.\n\n"}, {"name": "sprite.LayeredUpdates.get_sprites_from_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_sprites_from_layer", "type": "pygame.sprite", "text": "\nReturns all sprites from a layer, ordered by how they where added. It uses\nlinear search and the sprites are not removed from layer.\n\n"}, {"name": "sprite.LayeredUpdates.get_top_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_top_layer", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.get_top_sprite", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_top_sprite", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.layers", "path": "ref/sprite#pygame.sprite.LayeredUpdates.layers", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.move_to_back", "path": "ref/sprite#pygame.sprite.LayeredUpdates.move_to_back", "type": "pygame.sprite", "text": "\nMoves the sprite to the bottom layer, moving it behind all other layers and\nadding one additional layer.\n\n"}, {"name": "sprite.LayeredUpdates.move_to_front", "path": "ref/sprite#pygame.sprite.LayeredUpdates.move_to_front", "type": "pygame.sprite", "text": "\nBrings the sprite to front, changing sprite layer to topmost layer (added at\nthe end of that layer).\n\n"}, {"name": "sprite.LayeredUpdates.remove_sprites_of_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.remove_sprites_of_layer", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.sprites", "path": "ref/sprite#pygame.sprite.LayeredUpdates.sprites", "type": "pygame.sprite", "text": "\n\n"}, {"name": "sprite.LayeredUpdates.switch_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.switch_layer", "type": "pygame.sprite", "text": "\nThe layers number must exist, it is not checked.\n\n"}, {"name": "sprite.OrderedUpdates", "path": "ref/sprite#pygame.sprite.OrderedUpdates", "type": "pygame.sprite", "text": "\nThis class derives from `pygame.sprite.RenderUpdates()`. It maintains the\norder in which the Sprites were added to the Group for rendering. This makes\nadding and removing Sprites from the Group a little slower than regular\nGroups.\n\n"}, {"name": "sprite.RenderClear", "path": "ref/sprite#pygame.sprite.RenderClear", "type": "pygame.sprite", "text": "\nThis class is an alias to `pygame.sprite.Group()`. It has no additional\nfunctionality.\n\n"}, {"name": "sprite.RenderPlain", "path": "ref/sprite#pygame.sprite.RenderPlain", "type": "pygame.sprite", "text": "\nThis class is an alias to `pygame.sprite.Group()`. It has no additional\nfunctionality.\n\n"}, {"name": "sprite.RenderUpdates", "path": "ref/sprite#pygame.sprite.RenderUpdates", "type": "pygame.sprite", "text": "\nThis class is derived from `pygame.sprite.Group()`. It has an extended\n`draw()` method that tracks the changed areas of the screen.\n\nDraws all the Sprites to the surface, the same as `Group.draw()`. This method\nalso returns a list of Rectangular areas on the screen that have been changed.\nThe returned changes include areas of the screen that have been affected by\nprevious `Group.clear()` calls.\n\nThe returned Rect list should be passed to `pygame.display.update()`. This\nwill help performance on software driven display modes. This type of updating\nis usually only helpful on destinations with non-animating backgrounds.\n\n"}, {"name": "sprite.RenderUpdates.draw", "path": "ref/sprite#pygame.sprite.RenderUpdates.draw", "type": "pygame.sprite", "text": "\nDraws all the Sprites to the surface, the same as `Group.draw()`. This method\nalso returns a list of Rectangular areas on the screen that have been changed.\nThe returned changes include areas of the screen that have been affected by\nprevious `Group.clear()` calls.\n\nThe returned Rect list should be passed to `pygame.display.update()`. This\nwill help performance on software driven display modes. This type of updating\nis usually only helpful on destinations with non-animating backgrounds.\n\n"}, {"name": "sprite.Sprite", "path": "ref/sprite#pygame.sprite.Sprite", "type": "pygame.sprite", "text": "\nThe base class for visible game objects. Derived classes will want to override\nthe `Sprite.update()` and assign a `Sprite.image` and `Sprite.rect`\nattributes. The initializer can accept any number of Group instances to be\nadded to.\n\nWhen subclassing the Sprite, be sure to call the base initializer before\nadding the Sprite to Groups. For example:\n\nThe default implementation of this method does nothing; it's just a convenient\n\"hook\" that you can override. This method is called by `Group.update()` with\nwhatever arguments you give it.\n\nThere is no need to use this method if not using the convenience method by the\nsame name in the Group class.\n\nAny number of Group instances can be passed as arguments. The Sprite will be\nadded to the Groups it is not already a member of.\n\nAny number of Group instances can be passed as arguments. The Sprite will be\nremoved from the Groups it is currently a member of.\n\nThe Sprite is removed from all the Groups that contain it. This won't change\nanything about the state of the Sprite. It is possible to continue to use the\nSprite after this method has been called, including adding it to Groups.\n\nReturns True when the Sprite belongs to one or more Groups.\n\nReturn a list of all the Groups that contain this Sprite.\n\n"}, {"name": "sprite.Sprite.add", "path": "ref/sprite#pygame.sprite.Sprite.add", "type": "pygame.sprite", "text": "\nAny number of Group instances can be passed as arguments. The Sprite will be\nadded to the Groups it is not already a member of.\n\n"}, {"name": "sprite.Sprite.alive", "path": "ref/sprite#pygame.sprite.Sprite.alive", "type": "pygame.sprite", "text": "\nReturns True when the Sprite belongs to one or more Groups.\n\n"}, {"name": "sprite.Sprite.groups", "path": "ref/sprite#pygame.sprite.Sprite.groups", "type": "pygame.sprite", "text": "\nReturn a list of all the Groups that contain this Sprite.\n\n"}, {"name": "sprite.Sprite.kill", "path": "ref/sprite#pygame.sprite.Sprite.kill", "type": "pygame.sprite", "text": "\nThe Sprite is removed from all the Groups that contain it. This won't change\nanything about the state of the Sprite. It is possible to continue to use the\nSprite after this method has been called, including adding it to Groups.\n\n"}, {"name": "sprite.Sprite.remove", "path": "ref/sprite#pygame.sprite.Sprite.remove", "type": "pygame.sprite", "text": "\nAny number of Group instances can be passed as arguments. The Sprite will be\nremoved from the Groups it is currently a member of.\n\n"}, {"name": "sprite.Sprite.update", "path": "ref/sprite#pygame.sprite.Sprite.update", "type": "pygame.sprite", "text": "\nThe default implementation of this method does nothing; it's just a convenient\n\"hook\" that you can override. This method is called by `Group.update()` with\nwhatever arguments you give it.\n\nThere is no need to use this method if not using the convenience method by the\nsame name in the Group class.\n\n"}, {"name": "sprite.spritecollide", "path": "ref/sprite#pygame.sprite.spritecollide", "type": "pygame.sprite", "text": "\nReturn a list containing all Sprites in a Group that intersect with another\nSprite. Intersection is determined by comparing the `Sprite.rect` attribute of\neach Sprite.\n\nThe dokill argument is a bool. If set to True, all Sprites that collide will\nbe removed from the Group.\n\nThe collided argument is a callback function used to calculate if two sprites\nare colliding. it should take two sprites as values, and return a bool value\nindicating if they are colliding. If collided is not passed, all sprites must\nhave a \"rect\" value, which is a rectangle of the sprite area, which will be\nused to calculate the collision.\n\ncollided callables:\n\nExample:\n\n"}, {"name": "sprite.spritecollideany", "path": "ref/sprite#pygame.sprite.spritecollideany", "type": "pygame.sprite", "text": "\nIf the sprite collides with any single sprite in the group, a single sprite\nfrom the group is returned. On no collision None is returned.\n\nIf you don't need all the features of the `pygame.sprite.spritecollide()`\nfunction, this function will be a bit quicker.\n\nThe collided argument is a callback function used to calculate if two sprites\nare colliding. It should take two sprites as values and return a bool value\nindicating if they are colliding. If collided is not passed, then all sprites\nmust have a \"rect\" value, which is a rectangle of the sprite area, which will\nbe used to calculate the collision.\n\n"}, {"name": "Surface", "path": "ref/surface", "type": "pygame.Surface", "text": "\nA pygame Surface is used to represent any image. The Surface has a fixed\nresolution and pixel format. Surfaces with 8-bit pixels use a color palette to\nmap to 24-bit color.\n\nCall `pygame.Surface()` to create a new image object. The Surface will be\ncleared to all black. The only required arguments are the sizes. With no\nadditional arguments, the Surface will be created in a format that best\nmatches the display Surface.\n\nThe pixel format can be controlled by passing the bit depth or an existing\nSurface. The flags argument is a bitmask of additional features for the\nsurface. You can pass any combination of these flags:\n\nBoth flags are only a request, and may not be possible for all displays and\nformats.\n\nAdvance users can combine a set of bitmasks with a depth value. The masks are\na set of 4 integers representing which bits in a pixel will represent each\ncolor. Normal Surfaces should not require the masks argument.\n\nSurfaces can have many extra attributes like alpha planes, colorkeys, source\nrectangle clipping. These functions mainly effect how the Surface is blitted\nto other Surfaces. The blit routines will attempt to use hardware acceleration\nwhen possible, otherwise they will use highly optimized software blitting\nmethods.\n\nThere are three types of transparency supported in pygame: colorkeys, surface\nalphas, and pixel alphas. Surface alphas can be mixed with colorkeys, but an\nimage with per pixel alphas cannot use the other modes. Colorkey transparency\nmakes a single color value transparent. Any pixels matching the colorkey will\nnot be drawn. The surface alpha value is a single value that changes the\ntransparency for the entire image. A surface alpha of 255 is opaque, and a\nvalue of 0 is completely transparent.\n\nPer pixel alphas are different because they store a transparency value for\nevery pixel. This allows for the most precise transparency effects, but it\nalso the slowest. Per pixel alphas cannot be mixed with surface alpha and\ncolorkeys.\n\nThere is support for pixel access for the Surfaces. Pixel access on hardware\nsurfaces is slow and not recommended. Pixels can be accessed using the\n`get_at()` and `set_at()` functions. These methods are fine for simple access,\nbut will be considerably slow when doing of pixel work with them. If you plan\non doing a lot of pixel level work, it is recommended to use a\n`pygame.PixelArray`, which gives an array like view of the surface. For\ninvolved mathematical manipulations try the `pygame.surfarray` module (It's\nquite quick, but requires NumPy.)\n\nAny functions that directly access a surface's pixel data will need that\nsurface to be lock()'ed. These functions can `lock()` and `unlock()` the\nsurfaces themselves without assistance. But, if a function will be called many\ntimes, there will be a lot of overhead for multiple locking and unlocking of\nthe surface. It is best to lock the surface manually before making the\nfunction call many times, and then unlocking when you are finished. All\nfunctions that need a locked surface will say so in their docs. Remember to\nleave the Surface locked only while necessary.\n\nSurface pixels are stored internally as a single number that has all the\ncolors encoded into it. Use the `map_rgb()` and `unmap_rgb()` to convert\nbetween individual red, green, and blue values into a packed integer for that\nSurface.\n\nSurfaces can also reference sections of other Surfaces. These are created with\nthe `subsurface()` method. Any change to either Surface will effect the other.\n\nEach Surface contains a clipping area. By default the clip area covers the\nentire Surface. If it is changed, all drawing operations will only effect the\nsmaller area.\n\nDraws a source Surface onto this Surface. The draw can be positioned with the\ndest argument. The dest argument can either be a pair of coordinates\nrepresenting the position of the upper left corner of the blit or a Rect,\nwhere the upper left corner of the rectangle will be used as the position for\nthe blit. The size of the destination rectangle does not effect the blit.\n\nAn optional area rectangle can be passed as well. This represents a smaller\nportion of the source Surface to draw.\n\nNew in pygame 1.8: Optional `special_flags`: `BLEND_ADD`, `BLEND_SUB`,\n`BLEND_MULT`, `BLEND_MIN`, `BLEND_MAX`.\n\nNew in pygame 1.8.1: Optional `special_flags`: `BLEND_RGBA_ADD`,\n`BLEND_RGBA_SUB`, `BLEND_RGBA_MULT`, `BLEND_RGBA_MIN`, `BLEND_RGBA_MAX`\n`BLEND_RGB_ADD`, `BLEND_RGB_SUB`, `BLEND_RGB_MULT`, `BLEND_RGB_MIN`,\n`BLEND_RGB_MAX`.\n\nNew in pygame 1.9.2: Optional `special_flags`: `BLEND_PREMULTIPLIED`\n\nNew in pygame 2.0.0: Optional `special_flags`: `BLEND_ALPHA_SDL2` \\- Uses the\nSDL2 blitter for alpha blending, this gives different results than the default\nblitter, which is modelled after SDL1, due to different approximations used\nfor the alpha blending formula. The SDL2 blitter also supports RLE on alpha\nblended surfaces which the pygame one does not.\n\nThe return rectangle is the area of the affected pixels, excluding any pixels\noutside the destination Surface, or outside the clipping area.\n\nPixel alphas will be ignored when blitting to an 8 bit Surface.\n\nFor a surface with colorkey or blanket alpha, a blit to self may give slightly\ndifferent colors than a non self-blit.\n\nDraws many surfaces onto this Surface. It takes a sequence as input, with each\nof the elements corresponding to the ones of `blit()`. It needs at minimum a\nsequence of (source, dest).\n\na list of rects of the areas changed if `doreturn` is `True`, otherwise `None`\n\nlist or None\n\nNew in pygame 1.9.4.\n\nCreates a new copy of the Surface with the pixel format changed. The new pixel\nformat can be determined from another existing Surface. Otherwise depth,\nflags, and masks arguments can be used, similar to the `pygame.Surface()`\ncall.\n\nIf no arguments are passed the new Surface will have the same pixel format as\nthe display Surface. This is always the fastest format for blitting. It is a\ngood idea to convert all Surfaces before they are blitted many times.\n\nThe converted Surface will have no pixel alphas. They will be stripped if the\noriginal had them. See `convert_alpha()` for preserving or creating per-pixel\nalphas.\n\nThe new copy will have the same class as the copied surface. This lets as\nSurface subclass inherit this method without the need to override, unless\nsubclass specific instance attributes also need copying.\n\nCreates a new copy of the surface with the desired pixel format. The new\nsurface will be in a format suited for quick blitting to the given format with\nper pixel alpha. If no surface is given, the new surface will be optimized for\nblitting to the current display.\n\nUnlike the `convert()` method, the pixel format for the new image will not be\nexactly the same as the requested source, but it will be optimized for fast\nalpha blitting to the destination.\n\nAs with `convert()` the returned surface has the same class as the converted\nsurface.\n\nMakes a duplicate copy of a Surface. The new surface will have the same pixel\nformats, color palettes, transparency settings, and class as the original. If\na Surface subclass also needs to copy any instance specific attributes then it\nshould override `copy()`.\n\nFill the Surface with a solid color. If no rect argument is given the entire\nSurface will be filled. The rect argument will limit the fill to a specific\narea. The fill will also be contained by the Surface clip area.\n\nThe color argument can be either a `RGB` sequence, a `RGBA` sequence or a\nmapped color index. If using `RGBA`, the Alpha (A part of `RGBA`) is ignored\nunless the surface uses per pixel alpha (Surface has the `SRCALPHA` flag).\n\nNew in pygame 1.8: Optional `special_flags`: `BLEND_ADD`, `BLEND_SUB`,\n`BLEND_MULT`, `BLEND_MIN`, `BLEND_MAX`.\n\nNew in pygame 1.8.1: Optional `special_flags`: `BLEND_RGBA_ADD`,\n`BLEND_RGBA_SUB`, `BLEND_RGBA_MULT`, `BLEND_RGBA_MIN`, `BLEND_RGBA_MAX`\n`BLEND_RGB_ADD`, `BLEND_RGB_SUB`, `BLEND_RGB_MULT`, `BLEND_RGB_MIN`,\n`BLEND_RGB_MAX`.\n\nThis will return the affected Surface area.\n\nMove the image by dx pixels right and dy pixels down. dx and dy may be\nnegative for left and up scrolls respectively. Areas of the surface that are\nnot overwritten retain their original pixel values. Scrolling is contained by\nthe Surface clip area. It is safe to have dx and dy values that exceed the\nsurface size.\n\nNew in pygame 1.9.\n\nSet the current color key for the Surface. When blitting this Surface onto a\ndestination, any pixels that have the same color as the colorkey will be\ntransparent. The color can be an `RGB` color or a mapped color integer. If\n`None` is passed, the colorkey will be unset.\n\nThe colorkey will be ignored if the Surface is formatted to use per pixel\nalpha values. The colorkey can be mixed with the full Surface alpha value.\n\nThe optional flags argument can be set to `pygame.RLEACCEL` to provide better\nperformance on non accelerated displays. An `RLEACCEL` Surface will be slower\nto modify, but quicker to blit as a source.\n\nReturn the current colorkey value for the Surface. If the colorkey is not set\nthen `None` is returned.\n\nSet the current alpha value for the Surface. When blitting this Surface onto a\ndestination, the pixels will be drawn slightly transparent. The alpha value is\nan integer from 0 to 255, 0 is fully transparent and 255 is fully opaque. If\n`None` is passed for the alpha value, then alpha blending will be disabled,\nincluding per-pixel alpha.\n\nThis value is different than the per pixel Surface alpha. For a surface with\nper pixel alpha, blanket alpha is ignored and `None` is returned.\n\nChanged in pygame 2.0: per-surface alpha can be combined with per-pixel alpha.\n\nThe optional flags argument can be set to `pygame.RLEACCEL` to provide better\nperformance on non accelerated displays. An `RLEACCEL` Surface will be slower\nto modify, but quicker to blit as a source.\n\nReturn the current alpha value for the Surface.\n\nLock the pixel data of a Surface for access. On accelerated Surfaces, the\npixel data may be stored in volatile video memory or nonlinear compressed\nforms. When a Surface is locked the pixel memory becomes available to access\nby regular software. Code that reads or writes pixel values will need the\nSurface to be locked.\n\nSurfaces should not remain locked for more than necessary. A locked Surface\ncan often not be displayed or managed by pygame.\n\nNot all Surfaces require locking. The `mustlock()` method can determine if it\nis actually required. There is no performance penalty for locking and\nunlocking a Surface that does not need it.\n\nAll pygame functions will automatically lock and unlock the Surface data as\nneeded. If a section of code is going to make calls that will repeatedly lock\nand unlock the Surface many times, it can be helpful to wrap the block inside\na lock and unlock pair.\n\nIt is safe to nest locking and unlocking calls. The surface will only be\nunlocked after the final lock is released.\n\nUnlock the Surface pixel data after it has been locked. The unlocked Surface\ncan once again be drawn and managed by pygame. See the `lock()` documentation\nfor more details.\n\nAll pygame functions will automatically lock and unlock the Surface data as\nneeded. If a section of code is going to make calls that will repeatedly lock\nand unlock the Surface many times, it can be helpful to wrap the block inside\na lock and unlock pair.\n\nIt is safe to nest locking and unlocking calls. The surface will only be\nunlocked after the final lock is released.\n\nReturns `True` if the Surface is required to be locked to access pixel data.\nUsually pure software Surfaces do not require locking. This method is rarely\nneeded, since it is safe and quickest to just lock all Surfaces as needed.\n\nAll pygame functions will automatically lock and unlock the Surface data as\nneeded. If a section of code is going to make calls that will repeatedly lock\nand unlock the Surface many times, it can be helpful to wrap the block inside\na lock and unlock pair.\n\nReturns `True` when the Surface is locked. It doesn't matter how many times\nthe Surface is locked.\n\nReturns the currently existing locks for the Surface.\n\nReturn a copy of the `RGBA` Color value at the given pixel. If the Surface has\nno per pixel alpha, then the alpha value will always be 255 (opaque). If the\npixel position is outside the area of the Surface an `IndexError` exception\nwill be raised.\n\nGetting and setting pixels one at a time is generally too slow to be used in a\ngame or realtime situation. It is better to use methods which operate on many\npixels at a time like with the blit, fill and draw methods - or by using\n`pygame.surfarray`/`pygame.PixelArray`.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nNew in pygame 1.9: Returning a Color instead of tuple. Use\n`tuple(surf.get_at((x,y)))` if you want a tuple, and not a Color. This should\nonly matter if you want to use the color as a key in a dict.\n\nSet the `RGBA` or mapped integer color value for a single pixel. If the\nSurface does not have per pixel alphas, the alpha value is ignored. Setting\npixels outside the Surface area or outside the Surface clipping will have no\neffect.\n\nGetting and setting pixels one at a time is generally too slow to be used in a\ngame or realtime situation.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nReturn the integer value of the given pixel. If the pixel position is outside\nthe area of the Surface an `IndexError` exception will be raised.\n\nThis method is intended for pygame unit testing. It unlikely has any use in an\napplication.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nNew in pygame 1.9.2.\n\nReturn a list of up to 256 color elements that represent the indexed colors\nused in an 8-bit Surface. The returned list is a copy of the palette, and\nchanges will have no effect on the Surface.\n\nReturning a list of `Color(with length 3)` instances instead of tuples.\n\nNew in pygame 1.9.\n\nReturns the red, green, and blue color values for a single index in a Surface\npalette. The index should be a value from 0 to 255.\n\nNew in pygame 1.9: Returning `Color(with length 3)` instance instead of a\ntuple.\n\nSet the full palette for an 8-bit Surface. This will replace the colors in the\nexisting palette. A partial palette can be passed and only the first colors in\nthe original palette will be changed.\n\nThis function has no effect on a Surface with more than 8-bits per pixel.\n\nSet the palette value for a single entry in a Surface palette. The index\nshould be a value from 0 to 255.\n\nThis function has no effect on a Surface with more than 8-bits per pixel.\n\nConvert an `RGBA` color into the mapped integer value for this Surface. The\nreturned integer will contain no more bits than the bit depth of the Surface.\nMapped color values are not often used inside pygame, but can be passed to\nmost functions that require a Surface and a color.\n\nSee the Surface object documentation for more information about colors and\npixel formats.\n\nConvert an mapped integer color into the `RGB` color components for this\nSurface. Mapped color values are not often used inside pygame, but can be\npassed to most functions that require a Surface and a color.\n\nSee the Surface object documentation for more information about colors and\npixel formats.\n\nEach Surface has an active clipping area. This is a rectangle that represents\nthe only pixels on the Surface that can be modified. If `None` is passed for\nthe rectangle the full Surface will be available for changes.\n\nThe clipping area is always restricted to the area of the Surface itself. If\nthe clip rectangle is too large it will be shrunk to fit inside the Surface.\n\nReturn a rectangle of the current clipping area. The Surface will always\nreturn a valid rectangle that will never be outside the bounds of the image.\nIf the Surface has had `None` set for the clipping area, the Surface will\nreturn a rectangle with the full area of the Surface.\n\nReturns a new Surface that shares its pixels with its new parent. The new\nSurface is considered a child of the original. Modifications to either Surface\npixels will effect each other. Surface information like clipping area and\ncolor keys are unique to each Surface.\n\nThe new Surface will inherit the palette, color key, and alpha settings from\nits parent.\n\nIt is possible to have any number of subsurfaces and subsubsurfaces on the\nparent. It is also possible to subsurface the display Surface if the display\nmode is not hardware accelerated.\n\nSee `get_offset()` and `get_parent()` to learn more about the state of a\nsubsurface.\n\nA subsurface will have the same class as the parent surface.\n\nReturns the parent Surface of a subsurface. If this is not a subsurface then\n`None` will be returned.\n\nReturns the parent Surface of a subsurface. If this is not a subsurface then\nthis surface will be returned.\n\nGet the offset position of a child subsurface inside of a parent. If the\nSurface is not a subsurface this will return (0, 0).\n\nGet the offset position of a child subsurface inside of its top level parent\nSurface. If the Surface is not a subsurface this will return (0, 0).\n\nReturn the width and height of the Surface in pixels.\n\nReturn the width of the Surface in pixels.\n\nReturn the height of the Surface in pixels.\n\nReturns a new rectangle covering the entire surface. This rectangle will\nalways start at (0, 0) with a width and height the same size as the image.\n\nYou can pass keyword argument values to this function. These named values will\nbe applied to the attributes of the Rect before it is returned. An example\nwould be `mysurf.get_rect(center=(100, 100))` to create a rectangle for the\nSurface centered at a given position.\n\nReturns the number of bits used to represent each pixel. This value may not\nexactly fill the number of bytes used per pixel. For example a 15 bit Surface\nstill requires a full 2 bytes.\n\nReturn the number of bytes used per pixel.\n\nReturns a set of current Surface features. Each feature is a bit in the flags\nbitmask. Typical flags are `HWSURFACE`, `RLEACCEL`, `SRCALPHA`, and\n`SRCCOLORKEY`.\n\nHere is a more complete list of flags. A full list can be found in\n`SDL_video.h`\n\nAvailable for `pygame.display.set_mode()`\n\nUsed internally (read-only)\n\nReturn the number of bytes separating each row in the Surface. Surfaces in\nvideo memory are not always linearly packed. Subsurfaces will also have a\nlarger pitch than their real width.\n\nThis value is not needed for normal pygame usage.\n\nReturns the bitmasks used to isolate each color in a mapped integer.\n\nThis value is not needed for normal pygame usage.\n\nThis is not needed for normal pygame usage.\n\nNote\n\nIn SDL2, the masks are read-only and accordingly this method will raise an\nAttributeError if called.\n\nNew in pygame 1.8.1.\n\nReturns the pixel shifts need to convert between each color and a mapped\ninteger.\n\nThis value is not needed for normal pygame usage.\n\nThis is not needed for normal pygame usage.\n\nNote\n\nIn SDL2, the shifts are read-only and accordingly this method will raise an\nAttributeError if called.\n\nNew in pygame 1.8.1.\n\nReturn the least significant number of bits stripped from each color in a\nmapped integer.\n\nThis value is not needed for normal pygame usage.\n\nReturns the smallest rectangular region that contains all the pixels in the\nsurface that have an alpha value greater than or equal to the minimum alpha\nvalue.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nNew in pygame 1.8.\n\nReturn an object which exports a surface's internal pixel buffer as a C level\narray struct, Python level array interface or a C level buffer interface. The\npixel buffer is writeable. The new buffer protocol is supported for Python 2.6\nand up in CPython. The old buffer protocol is also supported for Python 2.x.\nThe old buffer data is in one segment for kind '0', multi-segment for other\nbuffer view kinds.\n\nThe kind argument is the length 1 string '0', '1', '2', '3', 'r', 'g', 'b', or\n'a'. The letters are case insensitive; 'A' will work as well. The argument can\nbe either a Unicode or byte (char) string. The default is '2'.\n\n'0' returns a contiguous unstructured bytes view. No surface shape information\nis given. A `ValueError` is raised if the surface's pixels are discontinuous.\n\n'1' returns a (surface-width * surface-height) array of continuous pixels. A\n`ValueError` is raised if the surface pixels are discontinuous.\n\n'2' returns a (surface-width, surface-height) array of raw pixels. The pixels\nare surface-bytesize-d unsigned integers. The pixel format is surface\nspecific. The 3 byte unsigned integers of 24 bit surfaces are unlikely\naccepted by anything other than other pygame functions.\n\n'3' returns a (surface-width, surface-height, 3) array of `RGB` color\ncomponents. Each of the red, green, and blue components are unsigned bytes.\nOnly 24-bit and 32-bit surfaces are supported. The color components must be in\neither `RGB` or `BGR` order within the pixel.\n\n'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a (surface-\nwidth, surface-height) view of a single color component within a surface: a\ncolor plane. Color components are unsigned bytes. Both 24-bit and 32-bit\nsurfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with `SRCALPHA`\nsupport 'a'.\n\nThe surface is locked only when an exposed interface is accessed. For new\nbuffer interface accesses, the surface is unlocked once the last buffer view\nis released. For array interface and old buffer interface accesses, the\nsurface remains locked until the BufferProxy object is released.\n\nNew in pygame 1.9.2.\n\nReturn a buffer object for the pixels of the Surface. The buffer can be used\nfor direct pixel access and manipulation. Surface pixel data is represented as\nan unstructured block of memory, with a start address and length in bytes. The\ndata need not be contiguous. Any gaps are included in the length, but\notherwise ignored.\n\nThis method implicitly locks the Surface. The lock will be released when the\nreturned `pygame.BufferProxy` object is garbage collected.\n\nNew in pygame 1.8.\n\nThe starting address of the surface's raw pixel bytes.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "Surface._pixels_address", "path": "ref/surface#pygame.Surface._pixels_address", "type": "pygame.Surface", "text": "\nThe starting address of the surface's raw pixel bytes.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "Surface.blit", "path": "ref/surface#pygame.Surface.blit", "type": "pygame.Surface", "text": "\nDraws a source Surface onto this Surface. The draw can be positioned with the\ndest argument. The dest argument can either be a pair of coordinates\nrepresenting the position of the upper left corner of the blit or a Rect,\nwhere the upper left corner of the rectangle will be used as the position for\nthe blit. The size of the destination rectangle does not effect the blit.\n\nAn optional area rectangle can be passed as well. This represents a smaller\nportion of the source Surface to draw.\n\nNew in pygame 1.8: Optional `special_flags`: `BLEND_ADD`, `BLEND_SUB`,\n`BLEND_MULT`, `BLEND_MIN`, `BLEND_MAX`.\n\nNew in pygame 1.8.1: Optional `special_flags`: `BLEND_RGBA_ADD`,\n`BLEND_RGBA_SUB`, `BLEND_RGBA_MULT`, `BLEND_RGBA_MIN`, `BLEND_RGBA_MAX`\n`BLEND_RGB_ADD`, `BLEND_RGB_SUB`, `BLEND_RGB_MULT`, `BLEND_RGB_MIN`,\n`BLEND_RGB_MAX`.\n\nNew in pygame 1.9.2: Optional `special_flags`: `BLEND_PREMULTIPLIED`\n\nNew in pygame 2.0.0: Optional `special_flags`: `BLEND_ALPHA_SDL2` \\- Uses the\nSDL2 blitter for alpha blending, this gives different results than the default\nblitter, which is modelled after SDL1, due to different approximations used\nfor the alpha blending formula. The SDL2 blitter also supports RLE on alpha\nblended surfaces which the pygame one does not.\n\nThe return rectangle is the area of the affected pixels, excluding any pixels\noutside the destination Surface, or outside the clipping area.\n\nPixel alphas will be ignored when blitting to an 8 bit Surface.\n\nFor a surface with colorkey or blanket alpha, a blit to self may give slightly\ndifferent colors than a non self-blit.\n\n"}, {"name": "Surface.blits", "path": "ref/surface#pygame.Surface.blits", "type": "pygame.Surface", "text": "\nDraws many surfaces onto this Surface. It takes a sequence as input, with each\nof the elements corresponding to the ones of `blit()`. It needs at minimum a\nsequence of (source, dest).\n\na list of rects of the areas changed if `doreturn` is `True`, otherwise `None`\n\nlist or None\n\nNew in pygame 1.9.4.\n\n"}, {"name": "Surface.convert", "path": "ref/surface#pygame.Surface.convert", "type": "pygame.Surface", "text": "\nCreates a new copy of the Surface with the pixel format changed. The new pixel\nformat can be determined from another existing Surface. Otherwise depth,\nflags, and masks arguments can be used, similar to the `pygame.Surface()`\ncall.\n\nIf no arguments are passed the new Surface will have the same pixel format as\nthe display Surface. This is always the fastest format for blitting. It is a\ngood idea to convert all Surfaces before they are blitted many times.\n\nThe converted Surface will have no pixel alphas. They will be stripped if the\noriginal had them. See `convert_alpha()` for preserving or creating per-pixel\nalphas.\n\nThe new copy will have the same class as the copied surface. This lets as\nSurface subclass inherit this method without the need to override, unless\nsubclass specific instance attributes also need copying.\n\n"}, {"name": "Surface.convert_alpha", "path": "ref/surface#pygame.Surface.convert_alpha", "type": "pygame.Surface", "text": "\nCreates a new copy of the surface with the desired pixel format. The new\nsurface will be in a format suited for quick blitting to the given format with\nper pixel alpha. If no surface is given, the new surface will be optimized for\nblitting to the current display.\n\nUnlike the `convert()` method, the pixel format for the new image will not be\nexactly the same as the requested source, but it will be optimized for fast\nalpha blitting to the destination.\n\nAs with `convert()` the returned surface has the same class as the converted\nsurface.\n\n"}, {"name": "Surface.copy", "path": "ref/surface#pygame.Surface.copy", "type": "pygame.Surface", "text": "\nMakes a duplicate copy of a Surface. The new surface will have the same pixel\nformats, color palettes, transparency settings, and class as the original. If\na Surface subclass also needs to copy any instance specific attributes then it\nshould override `copy()`.\n\n"}, {"name": "Surface.fill", "path": "ref/surface#pygame.Surface.fill", "type": "pygame.Surface", "text": "\nFill the Surface with a solid color. If no rect argument is given the entire\nSurface will be filled. The rect argument will limit the fill to a specific\narea. The fill will also be contained by the Surface clip area.\n\nThe color argument can be either a `RGB` sequence, a `RGBA` sequence or a\nmapped color index. If using `RGBA`, the Alpha (A part of `RGBA`) is ignored\nunless the surface uses per pixel alpha (Surface has the `SRCALPHA` flag).\n\nNew in pygame 1.8: Optional `special_flags`: `BLEND_ADD`, `BLEND_SUB`,\n`BLEND_MULT`, `BLEND_MIN`, `BLEND_MAX`.\n\nNew in pygame 1.8.1: Optional `special_flags`: `BLEND_RGBA_ADD`,\n`BLEND_RGBA_SUB`, `BLEND_RGBA_MULT`, `BLEND_RGBA_MIN`, `BLEND_RGBA_MAX`\n`BLEND_RGB_ADD`, `BLEND_RGB_SUB`, `BLEND_RGB_MULT`, `BLEND_RGB_MIN`,\n`BLEND_RGB_MAX`.\n\nThis will return the affected Surface area.\n\n"}, {"name": "Surface.get_abs_offset", "path": "ref/surface#pygame.Surface.get_abs_offset", "type": "pygame.Surface", "text": "\nGet the offset position of a child subsurface inside of its top level parent\nSurface. If the Surface is not a subsurface this will return (0, 0).\n\n"}, {"name": "Surface.get_abs_parent", "path": "ref/surface#pygame.Surface.get_abs_parent", "type": "pygame.Surface", "text": "\nReturns the parent Surface of a subsurface. If this is not a subsurface then\nthis surface will be returned.\n\n"}, {"name": "Surface.get_alpha", "path": "ref/surface#pygame.Surface.get_alpha", "type": "pygame.Surface", "text": "\nReturn the current alpha value for the Surface.\n\n"}, {"name": "Surface.get_at", "path": "ref/surface#pygame.Surface.get_at", "type": "pygame.Surface", "text": "\nReturn a copy of the `RGBA` Color value at the given pixel. If the Surface has\nno per pixel alpha, then the alpha value will always be 255 (opaque). If the\npixel position is outside the area of the Surface an `IndexError` exception\nwill be raised.\n\nGetting and setting pixels one at a time is generally too slow to be used in a\ngame or realtime situation. It is better to use methods which operate on many\npixels at a time like with the blit, fill and draw methods - or by using\n`pygame.surfarray`/`pygame.PixelArray`.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nNew in pygame 1.9: Returning a Color instead of tuple. Use\n`tuple(surf.get_at((x,y)))` if you want a tuple, and not a Color. This should\nonly matter if you want to use the color as a key in a dict.\n\n"}, {"name": "Surface.get_at_mapped", "path": "ref/surface#pygame.Surface.get_at_mapped", "type": "pygame.Surface", "text": "\nReturn the integer value of the given pixel. If the pixel position is outside\nthe area of the Surface an `IndexError` exception will be raised.\n\nThis method is intended for pygame unit testing. It unlikely has any use in an\napplication.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "Surface.get_bitsize", "path": "ref/surface#pygame.Surface.get_bitsize", "type": "pygame.Surface", "text": "\nReturns the number of bits used to represent each pixel. This value may not\nexactly fill the number of bytes used per pixel. For example a 15 bit Surface\nstill requires a full 2 bytes.\n\n"}, {"name": "Surface.get_bounding_rect", "path": "ref/surface#pygame.Surface.get_bounding_rect", "type": "pygame.Surface", "text": "\nReturns the smallest rectangular region that contains all the pixels in the\nsurface that have an alpha value greater than or equal to the minimum alpha\nvalue.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nNew in pygame 1.8.\n\n"}, {"name": "Surface.get_buffer", "path": "ref/surface#pygame.Surface.get_buffer", "type": "pygame.Surface", "text": "\nReturn a buffer object for the pixels of the Surface. The buffer can be used\nfor direct pixel access and manipulation. Surface pixel data is represented as\nan unstructured block of memory, with a start address and length in bytes. The\ndata need not be contiguous. Any gaps are included in the length, but\notherwise ignored.\n\nThis method implicitly locks the Surface. The lock will be released when the\nreturned `pygame.BufferProxy` object is garbage collected.\n\nNew in pygame 1.8.\n\n"}, {"name": "Surface.get_bytesize", "path": "ref/surface#pygame.Surface.get_bytesize", "type": "pygame.Surface", "text": "\nReturn the number of bytes used per pixel.\n\n"}, {"name": "Surface.get_clip", "path": "ref/surface#pygame.Surface.get_clip", "type": "pygame.Surface", "text": "\nReturn a rectangle of the current clipping area. The Surface will always\nreturn a valid rectangle that will never be outside the bounds of the image.\nIf the Surface has had `None` set for the clipping area, the Surface will\nreturn a rectangle with the full area of the Surface.\n\n"}, {"name": "Surface.get_colorkey", "path": "ref/surface#pygame.Surface.get_colorkey", "type": "pygame.Surface", "text": "\nReturn the current colorkey value for the Surface. If the colorkey is not set\nthen `None` is returned.\n\n"}, {"name": "Surface.get_flags", "path": "ref/surface#pygame.Surface.get_flags", "type": "pygame.Surface", "text": "\nReturns a set of current Surface features. Each feature is a bit in the flags\nbitmask. Typical flags are `HWSURFACE`, `RLEACCEL`, `SRCALPHA`, and\n`SRCCOLORKEY`.\n\nHere is a more complete list of flags. A full list can be found in\n`SDL_video.h`\n\nAvailable for `pygame.display.set_mode()`\n\nUsed internally (read-only)\n\n"}, {"name": "Surface.get_height", "path": "ref/surface#pygame.Surface.get_height", "type": "pygame.Surface", "text": "\nReturn the height of the Surface in pixels.\n\n"}, {"name": "Surface.get_locked", "path": "ref/surface#pygame.Surface.get_locked", "type": "pygame.Surface", "text": "\nReturns `True` when the Surface is locked. It doesn't matter how many times\nthe Surface is locked.\n\n"}, {"name": "Surface.get_locks", "path": "ref/surface#pygame.Surface.get_locks", "type": "pygame.Surface", "text": "\nReturns the currently existing locks for the Surface.\n\n"}, {"name": "Surface.get_losses", "path": "ref/surface#pygame.Surface.get_losses", "type": "pygame.Surface", "text": "\nReturn the least significant number of bits stripped from each color in a\nmapped integer.\n\nThis value is not needed for normal pygame usage.\n\n"}, {"name": "Surface.get_masks", "path": "ref/surface#pygame.Surface.get_masks", "type": "pygame.Surface", "text": "\nReturns the bitmasks used to isolate each color in a mapped integer.\n\nThis value is not needed for normal pygame usage.\n\n"}, {"name": "Surface.get_offset", "path": "ref/surface#pygame.Surface.get_offset", "type": "pygame.Surface", "text": "\nGet the offset position of a child subsurface inside of a parent. If the\nSurface is not a subsurface this will return (0, 0).\n\n"}, {"name": "Surface.get_palette", "path": "ref/surface#pygame.Surface.get_palette", "type": "pygame.Surface", "text": "\nReturn a list of up to 256 color elements that represent the indexed colors\nused in an 8-bit Surface. The returned list is a copy of the palette, and\nchanges will have no effect on the Surface.\n\nReturning a list of `Color(with length 3)` instances instead of tuples.\n\nNew in pygame 1.9.\n\n"}, {"name": "Surface.get_palette_at", "path": "ref/surface#pygame.Surface.get_palette_at", "type": "pygame.Surface", "text": "\nReturns the red, green, and blue color values for a single index in a Surface\npalette. The index should be a value from 0 to 255.\n\nNew in pygame 1.9: Returning `Color(with length 3)` instance instead of a\ntuple.\n\n"}, {"name": "Surface.get_parent", "path": "ref/surface#pygame.Surface.get_parent", "type": "pygame.Surface", "text": "\nReturns the parent Surface of a subsurface. If this is not a subsurface then\n`None` will be returned.\n\n"}, {"name": "Surface.get_pitch", "path": "ref/surface#pygame.Surface.get_pitch", "type": "pygame.Surface", "text": "\nReturn the number of bytes separating each row in the Surface. Surfaces in\nvideo memory are not always linearly packed. Subsurfaces will also have a\nlarger pitch than their real width.\n\nThis value is not needed for normal pygame usage.\n\n"}, {"name": "Surface.get_rect", "path": "ref/surface#pygame.Surface.get_rect", "type": "pygame.Surface", "text": "\nReturns a new rectangle covering the entire surface. This rectangle will\nalways start at (0, 0) with a width and height the same size as the image.\n\nYou can pass keyword argument values to this function. These named values will\nbe applied to the attributes of the Rect before it is returned. An example\nwould be `mysurf.get_rect(center=(100, 100))` to create a rectangle for the\nSurface centered at a given position.\n\n"}, {"name": "Surface.get_shifts", "path": "ref/surface#pygame.Surface.get_shifts", "type": "pygame.Surface", "text": "\nReturns the pixel shifts need to convert between each color and a mapped\ninteger.\n\nThis value is not needed for normal pygame usage.\n\n"}, {"name": "Surface.get_size", "path": "ref/surface#pygame.Surface.get_size", "type": "pygame.Surface", "text": "\nReturn the width and height of the Surface in pixels.\n\n"}, {"name": "Surface.get_view", "path": "ref/surface#pygame.Surface.get_view", "type": "pygame.Surface", "text": "\nReturn an object which exports a surface's internal pixel buffer as a C level\narray struct, Python level array interface or a C level buffer interface. The\npixel buffer is writeable. The new buffer protocol is supported for Python 2.6\nand up in CPython. The old buffer protocol is also supported for Python 2.x.\nThe old buffer data is in one segment for kind '0', multi-segment for other\nbuffer view kinds.\n\nThe kind argument is the length 1 string '0', '1', '2', '3', 'r', 'g', 'b', or\n'a'. The letters are case insensitive; 'A' will work as well. The argument can\nbe either a Unicode or byte (char) string. The default is '2'.\n\n'0' returns a contiguous unstructured bytes view. No surface shape information\nis given. A `ValueError` is raised if the surface's pixels are discontinuous.\n\n'1' returns a (surface-width * surface-height) array of continuous pixels. A\n`ValueError` is raised if the surface pixels are discontinuous.\n\n'2' returns a (surface-width, surface-height) array of raw pixels. The pixels\nare surface-bytesize-d unsigned integers. The pixel format is surface\nspecific. The 3 byte unsigned integers of 24 bit surfaces are unlikely\naccepted by anything other than other pygame functions.\n\n'3' returns a (surface-width, surface-height, 3) array of `RGB` color\ncomponents. Each of the red, green, and blue components are unsigned bytes.\nOnly 24-bit and 32-bit surfaces are supported. The color components must be in\neither `RGB` or `BGR` order within the pixel.\n\n'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a (surface-\nwidth, surface-height) view of a single color component within a surface: a\ncolor plane. Color components are unsigned bytes. Both 24-bit and 32-bit\nsurfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with `SRCALPHA`\nsupport 'a'.\n\nThe surface is locked only when an exposed interface is accessed. For new\nbuffer interface accesses, the surface is unlocked once the last buffer view\nis released. For array interface and old buffer interface accesses, the\nsurface remains locked until the BufferProxy object is released.\n\nNew in pygame 1.9.2.\n\n"}, {"name": "Surface.get_width", "path": "ref/surface#pygame.Surface.get_width", "type": "pygame.Surface", "text": "\nReturn the width of the Surface in pixels.\n\n"}, {"name": "Surface.lock", "path": "ref/surface#pygame.Surface.lock", "type": "pygame.Surface", "text": "\nLock the pixel data of a Surface for access. On accelerated Surfaces, the\npixel data may be stored in volatile video memory or nonlinear compressed\nforms. When a Surface is locked the pixel memory becomes available to access\nby regular software. Code that reads or writes pixel values will need the\nSurface to be locked.\n\nSurfaces should not remain locked for more than necessary. A locked Surface\ncan often not be displayed or managed by pygame.\n\nNot all Surfaces require locking. The `mustlock()` method can determine if it\nis actually required. There is no performance penalty for locking and\nunlocking a Surface that does not need it.\n\nAll pygame functions will automatically lock and unlock the Surface data as\nneeded. If a section of code is going to make calls that will repeatedly lock\nand unlock the Surface many times, it can be helpful to wrap the block inside\na lock and unlock pair.\n\nIt is safe to nest locking and unlocking calls. The surface will only be\nunlocked after the final lock is released.\n\n"}, {"name": "Surface.map_rgb", "path": "ref/surface#pygame.Surface.map_rgb", "type": "pygame.Surface", "text": "\nConvert an `RGBA` color into the mapped integer value for this Surface. The\nreturned integer will contain no more bits than the bit depth of the Surface.\nMapped color values are not often used inside pygame, but can be passed to\nmost functions that require a Surface and a color.\n\nSee the Surface object documentation for more information about colors and\npixel formats.\n\n"}, {"name": "Surface.mustlock", "path": "ref/surface#pygame.Surface.mustlock", "type": "pygame.Surface", "text": "\nReturns `True` if the Surface is required to be locked to access pixel data.\nUsually pure software Surfaces do not require locking. This method is rarely\nneeded, since it is safe and quickest to just lock all Surfaces as needed.\n\nAll pygame functions will automatically lock and unlock the Surface data as\nneeded. If a section of code is going to make calls that will repeatedly lock\nand unlock the Surface many times, it can be helpful to wrap the block inside\na lock and unlock pair.\n\n"}, {"name": "Surface.scroll", "path": "ref/surface#pygame.Surface.scroll", "type": "pygame.Surface", "text": "\nMove the image by dx pixels right and dy pixels down. dx and dy may be\nnegative for left and up scrolls respectively. Areas of the surface that are\nnot overwritten retain their original pixel values. Scrolling is contained by\nthe Surface clip area. It is safe to have dx and dy values that exceed the\nsurface size.\n\nNew in pygame 1.9.\n\n"}, {"name": "Surface.set_alpha", "path": "ref/surface#pygame.Surface.set_alpha", "type": "pygame.Surface", "text": "\nSet the current alpha value for the Surface. When blitting this Surface onto a\ndestination, the pixels will be drawn slightly transparent. The alpha value is\nan integer from 0 to 255, 0 is fully transparent and 255 is fully opaque. If\n`None` is passed for the alpha value, then alpha blending will be disabled,\nincluding per-pixel alpha.\n\nThis value is different than the per pixel Surface alpha. For a surface with\nper pixel alpha, blanket alpha is ignored and `None` is returned.\n\nChanged in pygame 2.0: per-surface alpha can be combined with per-pixel alpha.\n\nThe optional flags argument can be set to `pygame.RLEACCEL` to provide better\nperformance on non accelerated displays. An `RLEACCEL` Surface will be slower\nto modify, but quicker to blit as a source.\n\n"}, {"name": "Surface.set_at", "path": "ref/surface#pygame.Surface.set_at", "type": "pygame.Surface", "text": "\nSet the `RGBA` or mapped integer color value for a single pixel. If the\nSurface does not have per pixel alphas, the alpha value is ignored. Setting\npixels outside the Surface area or outside the Surface clipping will have no\neffect.\n\nGetting and setting pixels one at a time is generally too slow to be used in a\ngame or realtime situation.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\n"}, {"name": "Surface.set_clip", "path": "ref/surface#pygame.Surface.set_clip", "type": "pygame.Surface", "text": "\nEach Surface has an active clipping area. This is a rectangle that represents\nthe only pixels on the Surface that can be modified. If `None` is passed for\nthe rectangle the full Surface will be available for changes.\n\nThe clipping area is always restricted to the area of the Surface itself. If\nthe clip rectangle is too large it will be shrunk to fit inside the Surface.\n\n"}, {"name": "Surface.set_colorkey", "path": "ref/surface#pygame.Surface.set_colorkey", "type": "pygame.Surface", "text": "\nSet the current color key for the Surface. When blitting this Surface onto a\ndestination, any pixels that have the same color as the colorkey will be\ntransparent. The color can be an `RGB` color or a mapped color integer. If\n`None` is passed, the colorkey will be unset.\n\nThe colorkey will be ignored if the Surface is formatted to use per pixel\nalpha values. The colorkey can be mixed with the full Surface alpha value.\n\nThe optional flags argument can be set to `pygame.RLEACCEL` to provide better\nperformance on non accelerated displays. An `RLEACCEL` Surface will be slower\nto modify, but quicker to blit as a source.\n\n"}, {"name": "Surface.set_masks", "path": "ref/surface#pygame.Surface.set_masks", "type": "pygame.Surface", "text": "\nThis is not needed for normal pygame usage.\n\nNote\n\nIn SDL2, the masks are read-only and accordingly this method will raise an\nAttributeError if called.\n\nNew in pygame 1.8.1.\n\n"}, {"name": "Surface.set_palette", "path": "ref/surface#pygame.Surface.set_palette", "type": "pygame.Surface", "text": "\nSet the full palette for an 8-bit Surface. This will replace the colors in the\nexisting palette. A partial palette can be passed and only the first colors in\nthe original palette will be changed.\n\nThis function has no effect on a Surface with more than 8-bits per pixel.\n\n"}, {"name": "Surface.set_palette_at", "path": "ref/surface#pygame.Surface.set_palette_at", "type": "pygame.Surface", "text": "\nSet the palette value for a single entry in a Surface palette. The index\nshould be a value from 0 to 255.\n\nThis function has no effect on a Surface with more than 8-bits per pixel.\n\n"}, {"name": "Surface.set_shifts", "path": "ref/surface#pygame.Surface.set_shifts", "type": "pygame.Surface", "text": "\nThis is not needed for normal pygame usage.\n\nNote\n\nIn SDL2, the shifts are read-only and accordingly this method will raise an\nAttributeError if called.\n\nNew in pygame 1.8.1.\n\n"}, {"name": "Surface.subsurface", "path": "ref/surface#pygame.Surface.subsurface", "type": "pygame.Surface", "text": "\nReturns a new Surface that shares its pixels with its new parent. The new\nSurface is considered a child of the original. Modifications to either Surface\npixels will effect each other. Surface information like clipping area and\ncolor keys are unique to each Surface.\n\nThe new Surface will inherit the palette, color key, and alpha settings from\nits parent.\n\nIt is possible to have any number of subsurfaces and subsubsurfaces on the\nparent. It is also possible to subsurface the display Surface if the display\nmode is not hardware accelerated.\n\nSee `get_offset()` and `get_parent()` to learn more about the state of a\nsubsurface.\n\nA subsurface will have the same class as the parent surface.\n\n"}, {"name": "Surface.unlock", "path": "ref/surface#pygame.Surface.unlock", "type": "pygame.Surface", "text": "\nUnlock the Surface pixel data after it has been locked. The unlocked Surface\ncan once again be drawn and managed by pygame. See the `lock()` documentation\nfor more details.\n\nAll pygame functions will automatically lock and unlock the Surface data as\nneeded. If a section of code is going to make calls that will repeatedly lock\nand unlock the Surface many times, it can be helpful to wrap the block inside\na lock and unlock pair.\n\nIt is safe to nest locking and unlocking calls. The surface will only be\nunlocked after the final lock is released.\n\n"}, {"name": "Surface.unmap_rgb", "path": "ref/surface#pygame.Surface.unmap_rgb", "type": "pygame.Surface", "text": "\nConvert an mapped integer color into the `RGB` color components for this\nSurface. Mapped color values are not often used inside pygame, but can be\npassed to most functions that require a Surface and a color.\n\nSee the Surface object documentation for more information about colors and\npixel formats.\n\n"}, {"name": "surfarray", "path": "ref/surfarray", "type": "pygame.surfarray", "text": "\nFunctions to convert pixel data between pygame Surfaces and arrays. This\nmodule will only be functional when pygame can use the external NumPy package.\n\nEvery pixel is stored as a single integer value to represent the red, green,\nand blue colors. The 8-bit images use a value that looks into a colormap.\nPixels with higher depth use a bit packing process to place three or four\nvalues into a single number.\n\nThe arrays are indexed by the `X` axis first, followed by the `Y` axis. Arrays\nthat treat the pixels as a single integer are referred to as 2D arrays. This\nmodule can also separate the red, green, and blue color values into separate\nindices. These types of arrays are referred to as 3D arrays, and the last\nindex is 0 for red, 1 for green, and 2 for blue.\n\nCopy the `mapped` (raw) pixels from a Surface into a 2D array. The bit depth\nof the surface will control the size of the integer values, and will work for\nany type of pixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the\n`pygame.Surface.lock()` \\- lock the Surface memory for pixel access method).\n\nCreate a new 2D array that directly references the pixel values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nPixels from a 24-bit Surface cannot be referenced, but all other Surface bit\ndepths can.\n\nThe Surface this references will remain locked for the lifetime of the array\n(see the `pygame.Surface.lock()` \\- lock the Surface memory for pixel access\nmethod).\n\nCopy the pixels from a Surface into a 3D array. The bit depth of the surface\nwill control the size of the integer values, and will work for any type of\npixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the\n`pygame.Surface.lock()` \\- lock the Surface memory for pixel access method).\n\nCreate a new 3D array that directly references the pixel values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis will only work on Surfaces that have 24-bit or 32-bit formats. Lower\npixel formats cannot be referenced.\n\nThe Surface this references will remain locked for the lifetime of the array\n(see the `pygame.Surface.lock()` \\- lock the Surface memory for pixel access\nmethod).\n\nCopy the pixel alpha values (degree of transparency) from a Surface into a 2D\narray. This will work for any type of Surface format. Surfaces without a pixel\nalpha will return an array with all opaque values.\n\nThis function will temporarily lock the Surface as pixels are copied (see the\n`pygame.Surface.lock()` \\- lock the Surface memory for pixel access method).\n\nCreate a new 2D array that directly references the alpha values (degree of\ntransparency) in a Surface. Any changes to the array will affect the pixels in\nthe Surface. This is a fast operation since no data is copied.\n\nThis can only work on 32-bit Surfaces with a per-pixel alpha value.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\nCreate a new 2D array that directly references the red values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\nCreate a new 2D array that directly references the green values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\nCreate a new 2D array that directly references the blue values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\nCreate a new array with the colorkey transparency value from each pixel. If\nthe pixel matches the colorkey it will be fully transparent; otherwise it will\nbe fully opaque.\n\nThis will work on any type of Surface format. If the image has no colorkey a\nsolid opaque array will be returned.\n\nThis function will temporarily lock the Surface as pixels are copied.\n\nCreate a new Surface that best resembles the data and format on the array. The\narray can be 2D or 3D with any sized integer values. Function make_surface\nuses the array struct interface to acquire array properties, so is not limited\nto just NumPy arrays. See `pygame.pixelcopy`.\n\nNew in pygame 1.9.2: array struct interface support.\n\nDirectly copy values from an array into a Surface. This is faster than\nconverting the array into a Surface and blitting. The array must be the same\ndimensions as the Surface and will completely replace all pixel values. Only\ninteger, ASCII character and record arrays are accepted.\n\nThis function will temporarily lock the Surface as the new values are copied.\n\nConvert a 3D array into a 2D array. This will use the given Surface format to\ncontrol the conversion. Palette surface formats are supported for NumPy\narrays.\n\nDEPRECATED: Uses the requested array type for the module functions. The only\nsupported arraytype is `'numpy'`. Other values will raise ValueError.\n\nDEPRECATED: Returns the currently active array type. This will be a value of\nthe `get_arraytypes()` tuple and indicates which type of array module is used\nfor the array creation.\n\nNew in pygame 1.8.\n\nDEPRECATED: Checks, which array systems are available and returns them as a\ntuple of strings. The values of the tuple can be used directly in the\n`pygame.surfarray.use_arraytype()` () method. If no supported array system\ncould be found, None will be returned.\n\nNew in pygame 1.8.\n\n"}, {"name": "surfarray.array2d", "path": "ref/surfarray#pygame.surfarray.array2d", "type": "pygame.surfarray", "text": "\nCopy the `mapped` (raw) pixels from a Surface into a 2D array. The bit depth\nof the surface will control the size of the integer values, and will work for\nany type of pixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the\n`pygame.Surface.lock()` \\- lock the Surface memory for pixel access method).\n\n"}, {"name": "surfarray.array3d", "path": "ref/surfarray#pygame.surfarray.array3d", "type": "pygame.surfarray", "text": "\nCopy the pixels from a Surface into a 3D array. The bit depth of the surface\nwill control the size of the integer values, and will work for any type of\npixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the\n`pygame.Surface.lock()` \\- lock the Surface memory for pixel access method).\n\n"}, {"name": "surfarray.array_alpha", "path": "ref/surfarray#pygame.surfarray.array_alpha", "type": "pygame.surfarray", "text": "\nCopy the pixel alpha values (degree of transparency) from a Surface into a 2D\narray. This will work for any type of Surface format. Surfaces without a pixel\nalpha will return an array with all opaque values.\n\nThis function will temporarily lock the Surface as pixels are copied (see the\n`pygame.Surface.lock()` \\- lock the Surface memory for pixel access method).\n\n"}, {"name": "surfarray.array_colorkey", "path": "ref/surfarray#pygame.surfarray.array_colorkey", "type": "pygame.surfarray", "text": "\nCreate a new array with the colorkey transparency value from each pixel. If\nthe pixel matches the colorkey it will be fully transparent; otherwise it will\nbe fully opaque.\n\nThis will work on any type of Surface format. If the image has no colorkey a\nsolid opaque array will be returned.\n\nThis function will temporarily lock the Surface as pixels are copied.\n\n"}, {"name": "surfarray.blit_array", "path": "ref/surfarray#pygame.surfarray.blit_array", "type": "pygame.surfarray", "text": "\nDirectly copy values from an array into a Surface. This is faster than\nconverting the array into a Surface and blitting. The array must be the same\ndimensions as the Surface and will completely replace all pixel values. Only\ninteger, ASCII character and record arrays are accepted.\n\nThis function will temporarily lock the Surface as the new values are copied.\n\n"}, {"name": "surfarray.get_arraytype", "path": "ref/surfarray#pygame.surfarray.get_arraytype", "type": "pygame.surfarray", "text": "\nDEPRECATED: Returns the currently active array type. This will be a value of\nthe `get_arraytypes()` tuple and indicates which type of array module is used\nfor the array creation.\n\nNew in pygame 1.8.\n\n"}, {"name": "surfarray.get_arraytypes", "path": "ref/surfarray#pygame.surfarray.get_arraytypes", "type": "pygame.surfarray", "text": "\nDEPRECATED: Checks, which array systems are available and returns them as a\ntuple of strings. The values of the tuple can be used directly in the\n`pygame.surfarray.use_arraytype()` () method. If no supported array system\ncould be found, None will be returned.\n\nNew in pygame 1.8.\n\n"}, {"name": "surfarray.make_surface", "path": "ref/surfarray#pygame.surfarray.make_surface", "type": "pygame.surfarray", "text": "\nCreate a new Surface that best resembles the data and format on the array. The\narray can be 2D or 3D with any sized integer values. Function make_surface\nuses the array struct interface to acquire array properties, so is not limited\nto just NumPy arrays. See `pygame.pixelcopy`.\n\nNew in pygame 1.9.2: array struct interface support.\n\n"}, {"name": "surfarray.map_array", "path": "ref/surfarray#pygame.surfarray.map_array", "type": "pygame.surfarray", "text": "\nConvert a 3D array into a 2D array. This will use the given Surface format to\ncontrol the conversion. Palette surface formats are supported for NumPy\narrays.\n\n"}, {"name": "surfarray.pixels2d", "path": "ref/surfarray#pygame.surfarray.pixels2d", "type": "pygame.surfarray", "text": "\nCreate a new 2D array that directly references the pixel values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nPixels from a 24-bit Surface cannot be referenced, but all other Surface bit\ndepths can.\n\nThe Surface this references will remain locked for the lifetime of the array\n(see the `pygame.Surface.lock()` \\- lock the Surface memory for pixel access\nmethod).\n\n"}, {"name": "surfarray.pixels3d", "path": "ref/surfarray#pygame.surfarray.pixels3d", "type": "pygame.surfarray", "text": "\nCreate a new 3D array that directly references the pixel values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis will only work on Surfaces that have 24-bit or 32-bit formats. Lower\npixel formats cannot be referenced.\n\nThe Surface this references will remain locked for the lifetime of the array\n(see the `pygame.Surface.lock()` \\- lock the Surface memory for pixel access\nmethod).\n\n"}, {"name": "surfarray.pixels_alpha", "path": "ref/surfarray#pygame.surfarray.pixels_alpha", "type": "pygame.surfarray", "text": "\nCreate a new 2D array that directly references the alpha values (degree of\ntransparency) in a Surface. Any changes to the array will affect the pixels in\nthe Surface. This is a fast operation since no data is copied.\n\nThis can only work on 32-bit Surfaces with a per-pixel alpha value.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\n"}, {"name": "surfarray.pixels_blue", "path": "ref/surfarray#pygame.surfarray.pixels_blue", "type": "pygame.surfarray", "text": "\nCreate a new 2D array that directly references the blue values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\n"}, {"name": "surfarray.pixels_green", "path": "ref/surfarray#pygame.surfarray.pixels_green", "type": "pygame.surfarray", "text": "\nCreate a new 2D array that directly references the green values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\n"}, {"name": "surfarray.pixels_red", "path": "ref/surfarray#pygame.surfarray.pixels_red", "type": "pygame.surfarray", "text": "\nCreate a new 2D array that directly references the red values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a fast\noperation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this array references will remain locked for the lifetime of the\narray.\n\n"}, {"name": "surfarray.use_arraytype", "path": "ref/surfarray#pygame.surfarray.use_arraytype", "type": "pygame.surfarray", "text": "\nDEPRECATED: Uses the requested array type for the module functions. The only\nsupported arraytype is `'numpy'`. Other values will raise ValueError.\n\n"}, {"name": "tests", "path": "ref/tests", "type": "pygame.tests", "text": "\nA quick way to run the test suite package from the command line is to import\nthe go submodule with the Python -m option:\n\nCommand line option --help displays a usage message. Available options\ncorrespond to the `pygame.tests.run()` arguments.\n\nThe xxxx_test submodules of the tests package are unit test suites for\nindividual parts of pygame. Each can also be run as a main program. This is\nuseful if the test, such as cdrom_test, is interactive.\n\nFor pygame development the test suite can be run from a pygame distribution\nroot directory. Program `run_tests.py` is provided for convenience, though\ntest/go.py can be run directly.\n\nModule level tags control which modules are included in a unit test run. Tags\nare assigned to a unit test module with a corresponding <name>_tags.py module.\nThe tags module has the global __tags__, a list of tag names. For example,\n`cdrom_test.py` has a tag file `cdrom_tags.py` containing a tags list that has\nthe 'interactive' string. The 'interactive' tag indicates `cdrom_test.py`\nexpects user input. It is excluded from a `run_tests.py` or `pygame.tests.go`\nrun. Two other tags that are excluded are 'ignore' and 'subprocess_ignore'.\nThese two tags indicate unit tests that will not run on a particular platform,\nor for which no corresponding pygame module is available. The test runner will\nlist each excluded module along with the tag responsible.\n\nPositional arguments (optional):\n\nKeyword arguments:\n\nReturn value:\n\nBy default individual test modules are run in separate subprocesses. This\nrecreates normal pygame usage where `pygame.init()` and `pygame.quit()` are\ncalled only once per program execution, and avoids unfortunate interactions\nbetween test modules. Also, a time limit is placed on test execution, so\nfrozen tests are killed when there time allotment expired. Use the single\nprocess option if threading is not working properly or if tests are taking too\nlong. It is not guaranteed that all tests will pass in single process mode.\n\nTests are run in a randomized order if the randomize argument is True or a\nseed argument is provided. If no seed integer is provided then the system time\nis used.\n\nIndividual test modules may have a __tags__ attribute, a list of tag strings\nused to selectively omit modules from a run. By default only 'interactive'\nmodules such as cdrom_test are ignored. An interactive module must be run from\nthe console as a Python program.\n\nThis function can only be called once per Python session. It is not reentrant.\n\n"}, {"name": "tests.run", "path": "ref/tests#pygame.tests.run", "type": "pygame.tests", "text": "\nPositional arguments (optional):\n\nKeyword arguments:\n\nReturn value:\n\nBy default individual test modules are run in separate subprocesses. This\nrecreates normal pygame usage where `pygame.init()` and `pygame.quit()` are\ncalled only once per program execution, and avoids unfortunate interactions\nbetween test modules. Also, a time limit is placed on test execution, so\nfrozen tests are killed when there time allotment expired. Use the single\nprocess option if threading is not working properly or if tests are taking too\nlong. It is not guaranteed that all tests will pass in single process mode.\n\nTests are run in a randomized order if the randomize argument is True or a\nseed argument is provided. If no seed integer is provided then the system time\nis used.\n\nIndividual test modules may have a __tags__ attribute, a list of tag strings\nused to selectively omit modules from a run. By default only 'interactive'\nmodules such as cdrom_test are ignored. An interactive module must be run from\nthe console as a Python program.\n\nThis function can only be called once per Python session. It is not reentrant.\n\n"}, {"name": "time", "path": "ref/time", "type": "pygame.time", "text": "\nTimes in pygame are represented in milliseconds (1/1000 seconds). Most\nplatforms have a limited time resolution of around 10 milliseconds. This\nresolution, in milliseconds, is given in the `TIMER_RESOLUTION` constant.\n\nReturn the number of milliseconds since `pygame.init()` was called. Before\npygame is initialized this will always be 0.\n\nWill pause for a given number of milliseconds. This function sleeps the\nprocess to share the processor with other programs. A program that waits for\neven a few milliseconds will consume very little processor time. It is\nslightly less accurate than the `pygame.time.delay()` function.\n\nThis returns the actual number of milliseconds used.\n\nWill pause for a given number of milliseconds. This function will use the\nprocessor (rather than sleeping) in order to make the delay more accurate than\n`pygame.time.wait()`.\n\nThis returns the actual number of milliseconds used.\n\nSet an event type to appear on the event queue every given number of\nmilliseconds. The first event will not appear until the amount of time has\npassed.\n\nEvery event type can have a separate timer attached to it. It is best to use\nthe value between `pygame.USEREVENT` and `pygame.NUMEVENTS`.\n\nTo disable the timer for an event, set the milliseconds argument to 0.\n\nIf the once argument is True, then only send the timer once.\n\nNew in pygame 2.0.0.dev3: once argument added.\n\nCreates a new Clock object that can be used to track an amount of time. The\nclock also provides several functions to help control a game's framerate.\n\nThis method should be called once per frame. It will compute how many\nmilliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep\nthe game running slower than the given ticks per second. This can be used to\nhelp limit the runtime speed of a game. By calling `Clock.tick(40)` once per\nframe, the program will never run at more than 40 frames per second.\n\nNote that this function uses SDL_Delay function which is not accurate on every\nplatform, but does not use much CPU. Use tick_busy_loop if you want an\naccurate timer, and don't mind chewing CPU.\n\nThis method should be called once per frame. It will compute how many\nmilliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep\nthe game running slower than the given ticks per second. This can be used to\nhelp limit the runtime speed of a game. By calling `Clock.tick_busy_loop(40)`\nonce per frame, the program will never run at more than 40 frames per second.\n\nNote that this function uses `pygame.time.delay()`, which uses lots of CPU in\na busy loop to make sure that timing is more accurate.\n\nNew in pygame 1.8.\n\nThe number of milliseconds that passed between the previous two calls to\n`Clock.tick()`.\n\nSimilar to `Clock.get_time()`, but does not include any time used while\n`Clock.tick()` was delaying to limit the framerate.\n\nCompute your game's framerate (in frames per second). It is computed by\naveraging the last ten calls to `Clock.tick()`.\n\n"}, {"name": "time.Clock", "path": "ref/time#pygame.time.Clock", "type": "pygame.time", "text": "\nCreates a new Clock object that can be used to track an amount of time. The\nclock also provides several functions to help control a game's framerate.\n\nThis method should be called once per frame. It will compute how many\nmilliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep\nthe game running slower than the given ticks per second. This can be used to\nhelp limit the runtime speed of a game. By calling `Clock.tick(40)` once per\nframe, the program will never run at more than 40 frames per second.\n\nNote that this function uses SDL_Delay function which is not accurate on every\nplatform, but does not use much CPU. Use tick_busy_loop if you want an\naccurate timer, and don't mind chewing CPU.\n\nThis method should be called once per frame. It will compute how many\nmilliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep\nthe game running slower than the given ticks per second. This can be used to\nhelp limit the runtime speed of a game. By calling `Clock.tick_busy_loop(40)`\nonce per frame, the program will never run at more than 40 frames per second.\n\nNote that this function uses `pygame.time.delay()`, which uses lots of CPU in\na busy loop to make sure that timing is more accurate.\n\nNew in pygame 1.8.\n\nThe number of milliseconds that passed between the previous two calls to\n`Clock.tick()`.\n\nSimilar to `Clock.get_time()`, but does not include any time used while\n`Clock.tick()` was delaying to limit the framerate.\n\nCompute your game's framerate (in frames per second). It is computed by\naveraging the last ten calls to `Clock.tick()`.\n\n"}, {"name": "time.Clock.get_fps", "path": "ref/time#pygame.time.Clock.get_fps", "type": "pygame.time", "text": "\nCompute your game's framerate (in frames per second). It is computed by\naveraging the last ten calls to `Clock.tick()`.\n\n"}, {"name": "time.Clock.get_rawtime", "path": "ref/time#pygame.time.Clock.get_rawtime", "type": "pygame.time", "text": "\nSimilar to `Clock.get_time()`, but does not include any time used while\n`Clock.tick()` was delaying to limit the framerate.\n\n"}, {"name": "time.Clock.get_time", "path": "ref/time#pygame.time.Clock.get_time", "type": "pygame.time", "text": "\nThe number of milliseconds that passed between the previous two calls to\n`Clock.tick()`.\n\n"}, {"name": "time.Clock.tick", "path": "ref/time#pygame.time.Clock.tick", "type": "pygame.time", "text": "\nThis method should be called once per frame. It will compute how many\nmilliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep\nthe game running slower than the given ticks per second. This can be used to\nhelp limit the runtime speed of a game. By calling `Clock.tick(40)` once per\nframe, the program will never run at more than 40 frames per second.\n\nNote that this function uses SDL_Delay function which is not accurate on every\nplatform, but does not use much CPU. Use tick_busy_loop if you want an\naccurate timer, and don't mind chewing CPU.\n\n"}, {"name": "time.Clock.tick_busy_loop", "path": "ref/time#pygame.time.Clock.tick_busy_loop", "type": "pygame.time", "text": "\nThis method should be called once per frame. It will compute how many\nmilliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep\nthe game running slower than the given ticks per second. This can be used to\nhelp limit the runtime speed of a game. By calling `Clock.tick_busy_loop(40)`\nonce per frame, the program will never run at more than 40 frames per second.\n\nNote that this function uses `pygame.time.delay()`, which uses lots of CPU in\na busy loop to make sure that timing is more accurate.\n\nNew in pygame 1.8.\n\n"}, {"name": "time.delay", "path": "ref/time#pygame.time.delay", "type": "pygame.time", "text": "\nWill pause for a given number of milliseconds. This function will use the\nprocessor (rather than sleeping) in order to make the delay more accurate than\n`pygame.time.wait()`.\n\nThis returns the actual number of milliseconds used.\n\n"}, {"name": "time.get_ticks", "path": "ref/time#pygame.time.get_ticks", "type": "pygame.time", "text": "\nReturn the number of milliseconds since `pygame.init()` was called. Before\npygame is initialized this will always be 0.\n\n"}, {"name": "time.set_timer", "path": "ref/time#pygame.time.set_timer", "type": "pygame.time", "text": "\nSet an event type to appear on the event queue every given number of\nmilliseconds. The first event will not appear until the amount of time has\npassed.\n\nEvery event type can have a separate timer attached to it. It is best to use\nthe value between `pygame.USEREVENT` and `pygame.NUMEVENTS`.\n\nTo disable the timer for an event, set the milliseconds argument to 0.\n\nIf the once argument is True, then only send the timer once.\n\nNew in pygame 2.0.0.dev3: once argument added.\n\n"}, {"name": "time.wait", "path": "ref/time#pygame.time.wait", "type": "pygame.time", "text": "\nWill pause for a given number of milliseconds. This function sleeps the\nprocess to share the processor with other programs. A program that waits for\neven a few milliseconds will consume very little processor time. It is\nslightly less accurate than the `pygame.time.delay()` function.\n\nThis returns the actual number of milliseconds used.\n\n"}, {"name": "transform", "path": "ref/transform", "type": "pygame.transform", "text": "\nA Surface transform is an operation that moves or resizes the pixels. All\nthese functions take a Surface to operate on and return a new Surface with the\nresults.\n\nSome of the transforms are considered destructive. These means every time they\nare performed they lose pixel data. Common examples of this are resizing and\nrotating. For this reason, it is better to re-transform the original surface\nthan to keep transforming an image multiple times. (For example, suppose you\nare animating a bouncing spring which expands and contracts. If you applied\nthe size changes incrementally to the previous images, you would lose detail.\nInstead, always begin with the original image and scale to the desired size.)\n\nThis can flip a Surface either vertically, horizontally, or both. Flipping a\nSurface is non-destructive and returns a new Surface with the same dimensions.\n\nResizes the Surface to a new resolution. This is a fast scale operation that\ndoes not sample the results.\n\nAn optional destination surface can be used, rather than have it create a new\none. This is quicker if you want to repeatedly scale something. However the\ndestination must be the same size as the (width, height) passed in. Also the\ndestination surface must be the same format.\n\nUnfiltered counterclockwise rotation. The angle argument represents degrees\nand can be any floating point value. Negative angle amounts will rotate\nclockwise.\n\nUnless rotating by 90 degree increments, the image will be padded larger to\nhold the new size. If the image has pixel alphas, the padded area will be\ntransparent. Otherwise pygame will pick a color that matches the Surface\ncolorkey or the topleft pixel value.\n\nThis is a combined scale and rotation transform. The resulting Surface will be\na filtered 32-bit Surface. The scale argument is a floating point value that\nwill be multiplied by the current resolution. The angle argument is a floating\npoint value that represents the counterclockwise degrees to rotate. A negative\nrotation angle will rotate clockwise.\n\nThis will return a new image that is double the size of the original. It uses\nthe AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap\ngraphics.\n\nThis really only has an effect on simple images with solid colors. On\nphotographic and antialiased images it will look like a regular unfiltered\nscale.\n\nAn optional destination surface can be used, rather than have it create a new\none. This is quicker if you want to repeatedly scale something. However the\ndestination must be twice the size of the source surface passed in. Also the\ndestination surface must be the same format.\n\nUses one of two different algorithms for scaling each dimension of the input\nsurface as required. For shrinkage, the output pixels are area averages of the\ncolors they cover. For expansion, a bilinear filter is used. For the x86-64\nand i686 architectures, optimized `MMX` routines are included and will run\nmuch faster than other machine types. The size is a 2 number sequence for\n(width, height). This function only works for 24-bit or 32-bit surfaces. An\nexception will be thrown if the input surface bit depth is less than 24.\n\nNew in pygame 1.8.\n\nShows whether or not smoothscale is using `MMX` or `SSE` acceleration. If no\nacceleration is available then \"GENERIC\" is returned. For a x86 processor the\nlevel of acceleration to use is determined at runtime.\n\nThis function is provided for pygame testing and debugging.\n\nSets smoothscale acceleration. Takes a string argument. A value of 'GENERIC'\nturns off acceleration. 'MMX' uses `MMX` instructions only. 'SSE' allows `SSE`\nextensions as well. A value error is raised if type is not recognized or not\nsupported by the current processor.\n\nThis function is provided for pygame testing and debugging. If smoothscale\ncauses an invalid instruction error then it is a pygame/SDL bug that should be\nreported. Use this function as a temporary fix only.\n\nExtracts a portion of an image. All vertical and horizontal pixels surrounding\nthe given rectangle area are removed. The corner areas (diagonal to the rect)\nare then brought together. (The original image is not altered by this\noperation.)\n\n`NOTE`: If you want a \"crop\" that returns the part of an image within a rect,\nyou can blit with a rect to a new surface or copy a subsurface.\n\nFinds the edges in a surface using the laplacian algorithm.\n\nNew in pygame 1.8.\n\nTakes a sequence of surfaces and returns a surface with average colors from\neach of the surfaces.\n\npalette_colors - if true we average the colors in palette, otherwise we\naverage the pixel values. This is useful if the surface is actually greyscale\ncolors, and not palette colors.\n\nNote, this function currently does not handle palette using surfaces\ncorrectly.\n\nNew in pygame 1.8.\n\nNew in pygame 1.9: `palette_colors` argument\n\nFinds the average color of a Surface or a region of a surface specified by a\nRect, and returns it as a Color.\n\nThis versatile function can be used for find colors in a 'surf' close to a\n'search_color' or close to colors in a separate 'search_surf'.\n\nIt can also be used to transfer pixels into a 'dest_surf' that match or don't\nmatch.\n\nBy default it sets pixels in the 'dest_surf' where all of the pixels NOT\nwithin the threshold are changed to set_color. If inverse_set is optionally\nset to True, the pixels that ARE within the threshold are changed to\nset_color.\n\nIf the optional 'search_surf' surface is given, it is used to threshold\nagainst rather than the specified 'set_color'. That is, it will find each\npixel in the 'surf' that is within the 'threshold' of the pixel at the same\ncoordinates of the 'search_surf'.\n\nint\n\nThe number of pixels that are within the 'threshold' in 'surf' compared to\neither 'search_color' or search_surf.\n\nSee the threshold tests for a full of examples:\nhttps://github.com/pygame/pygame/blob/master/test/transform_test.py\n\nNew in pygame 1.8.\n\nChanged in pygame 1.9.4: Fixed a lot of bugs and added keyword arguments. Test\nyour code.\n\n"}, {"name": "transform.average_color", "path": "ref/transform#pygame.transform.average_color", "type": "pygame.transform", "text": "\nFinds the average color of a Surface or a region of a surface specified by a\nRect, and returns it as a Color.\n\n"}, {"name": "transform.average_surfaces", "path": "ref/transform#pygame.transform.average_surfaces", "type": "pygame.transform", "text": "\nTakes a sequence of surfaces and returns a surface with average colors from\neach of the surfaces.\n\npalette_colors - if true we average the colors in palette, otherwise we\naverage the pixel values. This is useful if the surface is actually greyscale\ncolors, and not palette colors.\n\nNote, this function currently does not handle palette using surfaces\ncorrectly.\n\nNew in pygame 1.8.\n\nNew in pygame 1.9: `palette_colors` argument\n\n"}, {"name": "transform.chop", "path": "ref/transform#pygame.transform.chop", "type": "pygame.transform", "text": "\nExtracts a portion of an image. All vertical and horizontal pixels surrounding\nthe given rectangle area are removed. The corner areas (diagonal to the rect)\nare then brought together. (The original image is not altered by this\noperation.)\n\n`NOTE`: If you want a \"crop\" that returns the part of an image within a rect,\nyou can blit with a rect to a new surface or copy a subsurface.\n\n"}, {"name": "transform.flip", "path": "ref/transform#pygame.transform.flip", "type": "pygame.transform", "text": "\nThis can flip a Surface either vertically, horizontally, or both. Flipping a\nSurface is non-destructive and returns a new Surface with the same dimensions.\n\n"}, {"name": "transform.get_smoothscale_backend", "path": "ref/transform#pygame.transform.get_smoothscale_backend", "type": "pygame.transform", "text": "\nShows whether or not smoothscale is using `MMX` or `SSE` acceleration. If no\nacceleration is available then \"GENERIC\" is returned. For a x86 processor the\nlevel of acceleration to use is determined at runtime.\n\nThis function is provided for pygame testing and debugging.\n\n"}, {"name": "transform.laplacian", "path": "ref/transform#pygame.transform.laplacian", "type": "pygame.transform", "text": "\nFinds the edges in a surface using the laplacian algorithm.\n\nNew in pygame 1.8.\n\n"}, {"name": "transform.rotate", "path": "ref/transform#pygame.transform.rotate", "type": "pygame.transform", "text": "\nUnfiltered counterclockwise rotation. The angle argument represents degrees\nand can be any floating point value. Negative angle amounts will rotate\nclockwise.\n\nUnless rotating by 90 degree increments, the image will be padded larger to\nhold the new size. If the image has pixel alphas, the padded area will be\ntransparent. Otherwise pygame will pick a color that matches the Surface\ncolorkey or the topleft pixel value.\n\n"}, {"name": "transform.rotozoom", "path": "ref/transform#pygame.transform.rotozoom", "type": "pygame.transform", "text": "\nThis is a combined scale and rotation transform. The resulting Surface will be\na filtered 32-bit Surface. The scale argument is a floating point value that\nwill be multiplied by the current resolution. The angle argument is a floating\npoint value that represents the counterclockwise degrees to rotate. A negative\nrotation angle will rotate clockwise.\n\n"}, {"name": "transform.scale", "path": "ref/transform#pygame.transform.scale", "type": "pygame.transform", "text": "\nResizes the Surface to a new resolution. This is a fast scale operation that\ndoes not sample the results.\n\nAn optional destination surface can be used, rather than have it create a new\none. This is quicker if you want to repeatedly scale something. However the\ndestination must be the same size as the (width, height) passed in. Also the\ndestination surface must be the same format.\n\n"}, {"name": "transform.scale2x", "path": "ref/transform#pygame.transform.scale2x", "type": "pygame.transform", "text": "\nThis will return a new image that is double the size of the original. It uses\nthe AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap\ngraphics.\n\nThis really only has an effect on simple images with solid colors. On\nphotographic and antialiased images it will look like a regular unfiltered\nscale.\n\nAn optional destination surface can be used, rather than have it create a new\none. This is quicker if you want to repeatedly scale something. However the\ndestination must be twice the size of the source surface passed in. Also the\ndestination surface must be the same format.\n\n"}, {"name": "transform.set_smoothscale_backend", "path": "ref/transform#pygame.transform.set_smoothscale_backend", "type": "pygame.transform", "text": "\nSets smoothscale acceleration. Takes a string argument. A value of 'GENERIC'\nturns off acceleration. 'MMX' uses `MMX` instructions only. 'SSE' allows `SSE`\nextensions as well. A value error is raised if type is not recognized or not\nsupported by the current processor.\n\nThis function is provided for pygame testing and debugging. If smoothscale\ncauses an invalid instruction error then it is a pygame/SDL bug that should be\nreported. Use this function as a temporary fix only.\n\n"}, {"name": "transform.smoothscale", "path": "ref/transform#pygame.transform.smoothscale", "type": "pygame.transform", "text": "\nUses one of two different algorithms for scaling each dimension of the input\nsurface as required. For shrinkage, the output pixels are area averages of the\ncolors they cover. For expansion, a bilinear filter is used. For the x86-64\nand i686 architectures, optimized `MMX` routines are included and will run\nmuch faster than other machine types. The size is a 2 number sequence for\n(width, height). This function only works for 24-bit or 32-bit surfaces. An\nexception will be thrown if the input surface bit depth is less than 24.\n\nNew in pygame 1.8.\n\n"}, {"name": "transform.threshold", "path": "ref/transform#pygame.transform.threshold", "type": "pygame.transform", "text": "\nThis versatile function can be used for find colors in a 'surf' close to a\n'search_color' or close to colors in a separate 'search_surf'.\n\nIt can also be used to transfer pixels into a 'dest_surf' that match or don't\nmatch.\n\nBy default it sets pixels in the 'dest_surf' where all of the pixels NOT\nwithin the threshold are changed to set_color. If inverse_set is optionally\nset to True, the pixels that ARE within the threshold are changed to\nset_color.\n\nIf the optional 'search_surf' surface is given, it is used to threshold\nagainst rather than the specified 'set_color'. That is, it will find each\npixel in the 'surf' that is within the 'threshold' of the pixel at the same\ncoordinates of the 'search_surf'.\n\nint\n\nThe number of pixels that are within the 'threshold' in 'surf' compared to\neither 'search_color' or search_surf.\n\nSee the threshold tests for a full of examples:\nhttps://github.com/pygame/pygame/blob/master/test/transform_test.py\n\nNew in pygame 1.8.\n\nChanged in pygame 1.9.4: Fixed a lot of bugs and added keyword arguments. Test\nyour code.\n\n"}, {"name": "version.rev", "path": "ref/pygame#pygame.version.rev", "type": "pygame", "text": "\nThe Mercurial node identifier of the repository checkout from which this\npackage was built. If the identifier ends with a plus sign '+' then the\npackage contains uncommitted changes. Please include this revision number in\nbug reports, especially for non-release pygame builds.\n\nImportant note: pygame development has moved to github, this variable is\nobsolete now. As soon as development shifted to github, this variable started\nreturning an empty string `\"\"`. It has always been returning an empty string\nsince `v1.9.5`.\n\nChanged in pygame 1.9.5: Always returns an empty string `\"\"`.\n\n"}, {"name": "version.SDL", "path": "ref/pygame#pygame.version.SDL", "type": "pygame", "text": "\nThis is the SDL library version represented as an extended tuple. It also has\nattributes 'major', 'minor' & 'patch' that can be accessed like this:\n\nprinting the whole thing returns a string like this:\n\nNew in pygame 2.0.0.\n\n"}, {"name": "version.ver", "path": "ref/pygame#pygame.version.ver", "type": "pygame", "text": "\nThis is the version represented as a string. It can contain a micro release\nnumber as well, e.g. `'1.5.2'`\n\n"}, {"name": "version.vernum", "path": "ref/pygame#pygame.version.vernum", "type": "pygame", "text": "\nThis version information can easily be compared with other version numbers of\nthe same format. An example of checking pygame version numbers would look like\nthis:\n\nNew in pygame 1.9.6: Attributes `major`, `minor`, and `patch`.\n\nChanged in pygame 1.9.6: `str(pygame.version.vernum)` returns a string like\n`\"2.0.0\"` instead of `\"(2, 0, 0)\"`.\n\nChanged in pygame 1.9.6: `repr(pygame.version.vernum)` returns a string like\n`\"PygameVersion(major=2, minor=0, patch=0)\"` instead of `\"(2, 0, 0)\"`.\n\n"}]