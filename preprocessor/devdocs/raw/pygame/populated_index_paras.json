[{"name": "_sdl2.touch", "path": "ref/touch", "type": "pygame._sdl2.touch", "text": ["New in pygame 2: This module requires SDL2.", "Return the number of available touch devices.", "Return an integer id associated with the given index.", "Return the number of fingers active for the touch device whose id is touchid.", "Return a dict for the finger index active on touchid. The dict contains these keys:"]}, {"name": "_sdl2.touch.get_device", "path": "ref/touch#pygame._sdl2.touch.get_device", "type": "pygame._sdl2.touch", "text": ["Return an integer id associated with the given index."]}, {"name": "_sdl2.touch.get_finger", "path": "ref/touch#pygame._sdl2.touch.get_finger", "type": "pygame._sdl2.touch", "text": ["Return a dict for the finger index active on touchid. The dict contains these keys:"]}, {"name": "_sdl2.touch.get_num_devices", "path": "ref/touch#pygame._sdl2.touch.get_num_devices", "type": "pygame._sdl2.touch", "text": ["Return the number of available touch devices."]}, {"name": "_sdl2.touch.get_num_fingers", "path": "ref/touch#pygame._sdl2.touch.get_num_fingers", "type": "pygame._sdl2.touch", "text": ["Return the number of fingers active for the touch device whose id is touchid."]}, {"name": "BufferProxy", "path": "ref/bufferproxy", "type": "pygame.BufferProxy", "text": ["BufferProxy is a pygame support type, designed as the return value of the Surface.get_buffer() and Surface.get_view() methods. For all Python versions a BufferProxy object exports a C struct and Python level array interface on behalf of its parent object's buffer. For CPython 2.6 and later a new buffer interface is also exported. In pygame, BufferProxy is key to implementing the pygame.surfarray module.", "BufferProxy instances can be created directly from Python code, either for a parent that exports an interface, or from a Python dict describing an object's buffer layout. The dict entries are based on the Python level array interface mapping. The following keys are recognized:", "The BufferProxy class supports subclassing, instance variables, and weak references.", "New in pygame 1.8.0.", "Extended in pygame 1.9.2.", "The Surface which returned the BufferProxy object or the object passed to a BufferProxy call.", "The number of valid bytes of data exported. For discontinuous data, that is data which is not a single block of memory, the bytes within the gaps are excluded from the count. This property is equivalent to the Py_buffer C struct len field.", "The buffer data as a str/bytes object. Any gaps in the exported data are removed.", "Overwrite bytes in the parent object's data. The data must be C or F contiguous, otherwise a ValueError is raised. Argument buffer is a str/bytes object. An optional offset gives a start position, in bytes, within the buffer where overwriting begins. If the offset is negative or greater that or equal to the buffer proxy's length value, an IndexException is raised. If len(buffer) > proxy.length + offset, a ValueError is raised."]}, {"name": "BufferProxy.length", "path": "ref/bufferproxy#pygame.BufferProxy.length", "type": "pygame.BufferProxy", "text": ["The number of valid bytes of data exported. For discontinuous data, that is data which is not a single block of memory, the bytes within the gaps are excluded from the count. This property is equivalent to the Py_buffer C struct len field."]}, {"name": "BufferProxy.parent", "path": "ref/bufferproxy#pygame.BufferProxy.parent", "type": "pygame.BufferProxy", "text": ["The Surface which returned the BufferProxy object or the object passed to a BufferProxy call."]}, {"name": "BufferProxy.raw", "path": "ref/bufferproxy#pygame.BufferProxy.raw", "type": "pygame.BufferProxy", "text": ["The buffer data as a str/bytes object. Any gaps in the exported data are removed."]}, {"name": "BufferProxy.write", "path": "ref/bufferproxy#pygame.BufferProxy.write", "type": "pygame.BufferProxy", "text": ["Overwrite bytes in the parent object's data. The data must be C or F contiguous, otherwise a ValueError is raised. Argument buffer is a str/bytes object. An optional offset gives a start position, in bytes, within the buffer where overwriting begins. If the offset is negative or greater that or equal to the buffer proxy's length value, an IndexException is raised. If len(buffer) > proxy.length + offset, a ValueError is raised."]}, {"name": "camera", "path": "ref/camera", "type": "pygame.camera", "text": ["Pygame currently supports only Linux and v4l2 cameras.", "EXPERIMENTAL!: This API may change or disappear in later pygame releases. If you use this, your code will very likely break with the next pygame release.", "The Bayer to RGB function is based on:", "New in pygame 1.9.0.", "Allows for conversion from \"RGB\" to a destination colorspace of \"HSV\" or \"YUV\". The source and destination surfaces must be the same size and pixel depth. This is useful for computer vision on devices with limited processing power. Capture as small of an image as possible, transform.scale() it even smaller, and then convert the colorspace to YUV or HSV before doing any processing on it.", "Checks the computer for available cameras and returns a list of strings of camera names, ready to be fed into pygame.camera.Camera.", "Loads a v4l2 camera. The device is typically something like \"/dev/video0\". Default width and height are 640 by 480. Format is the desired colorspace of the output. This is useful for computer vision purposes. The default is RGB. The following are supported:", "Opens the camera device, attempts to initialize it, and begins recording images to a buffer. The camera must be started before any of the below functions can be used.", "Stops recording, uninitializes the camera, and closes it. Once a camera is stopped, the below functions cannot be used until it is started again.", "If the camera supports it, get_controls will return the current settings for horizontal and vertical image flip as bools and brightness as an int. If unsupported, it will return the default values of (0, 0, 0). Note that the return values here may be different than those returned by set_controls, though these are more likely to be correct.", "Allows you to change camera settings if the camera supports it. The return values will be the input values if the camera claims it succeeded or the values previously in use if not. Each argument is optional, and the desired one can be chosen by supplying the keyword, like hflip. Note that the actual settings being used by the camera may not be the same as those returned by set_controls.", "Returns the current dimensions of the images being captured by the camera. This will return the actual size, which may be different than the one specified during initialization if the camera did not support that size.", "If an image is ready to get, it returns true. Otherwise it returns false. Note that some webcams will always return False and will only queue a frame when called with a blocking function like get_image(). This is useful to separate the framerate of the game from that of the camera without having to use threading.", "Pulls an image off of the buffer as an RGB Surface. It can optionally reuse an existing Surface to save time. The bit-depth of the surface is either 24 bits or the same as the optionally supplied Surface.", "Gets an image from a camera as a string in the native pixelformat of the camera. Useful for integration with other libraries."]}, {"name": "camera.Camera", "path": "ref/camera#pygame.camera.Camera", "type": "pygame.camera", "text": ["Loads a v4l2 camera. The device is typically something like \"/dev/video0\". Default width and height are 640 by 480. Format is the desired colorspace of the output. This is useful for computer vision purposes. The default is RGB. The following are supported:", "Opens the camera device, attempts to initialize it, and begins recording images to a buffer. The camera must be started before any of the below functions can be used.", "Stops recording, uninitializes the camera, and closes it. Once a camera is stopped, the below functions cannot be used until it is started again.", "If the camera supports it, get_controls will return the current settings for horizontal and vertical image flip as bools and brightness as an int. If unsupported, it will return the default values of (0, 0, 0). Note that the return values here may be different than those returned by set_controls, though these are more likely to be correct.", "Allows you to change camera settings if the camera supports it. The return values will be the input values if the camera claims it succeeded or the values previously in use if not. Each argument is optional, and the desired one can be chosen by supplying the keyword, like hflip. Note that the actual settings being used by the camera may not be the same as those returned by set_controls.", "Returns the current dimensions of the images being captured by the camera. This will return the actual size, which may be different than the one specified during initialization if the camera did not support that size.", "If an image is ready to get, it returns true. Otherwise it returns false. Note that some webcams will always return False and will only queue a frame when called with a blocking function like get_image(). This is useful to separate the framerate of the game from that of the camera without having to use threading.", "Pulls an image off of the buffer as an RGB Surface. It can optionally reuse an existing Surface to save time. The bit-depth of the surface is either 24 bits or the same as the optionally supplied Surface.", "Gets an image from a camera as a string in the native pixelformat of the camera. Useful for integration with other libraries."]}, {"name": "camera.Camera.get_controls", "path": "ref/camera#pygame.camera.Camera.get_controls", "type": "pygame.camera", "text": ["If the camera supports it, get_controls will return the current settings for horizontal and vertical image flip as bools and brightness as an int. If unsupported, it will return the default values of (0, 0, 0). Note that the return values here may be different than those returned by set_controls, though these are more likely to be correct."]}, {"name": "camera.Camera.get_image", "path": "ref/camera#pygame.camera.Camera.get_image", "type": "pygame.camera", "text": ["Pulls an image off of the buffer as an RGB Surface. It can optionally reuse an existing Surface to save time. The bit-depth of the surface is either 24 bits or the same as the optionally supplied Surface."]}, {"name": "camera.Camera.get_raw", "path": "ref/camera#pygame.camera.Camera.get_raw", "type": "pygame.camera", "text": ["Gets an image from a camera as a string in the native pixelformat of the camera. Useful for integration with other libraries."]}, {"name": "camera.Camera.get_size", "path": "ref/camera#pygame.camera.Camera.get_size", "type": "pygame.camera", "text": ["Returns the current dimensions of the images being captured by the camera. This will return the actual size, which may be different than the one specified during initialization if the camera did not support that size."]}, {"name": "camera.Camera.query_image", "path": "ref/camera#pygame.camera.Camera.query_image", "type": "pygame.camera", "text": ["If an image is ready to get, it returns true. Otherwise it returns false. Note that some webcams will always return False and will only queue a frame when called with a blocking function like get_image(). This is useful to separate the framerate of the game from that of the camera without having to use threading."]}, {"name": "camera.Camera.set_controls", "path": "ref/camera#pygame.camera.Camera.set_controls", "type": "pygame.camera", "text": ["Allows you to change camera settings if the camera supports it. The return values will be the input values if the camera claims it succeeded or the values previously in use if not. Each argument is optional, and the desired one can be chosen by supplying the keyword, like hflip. Note that the actual settings being used by the camera may not be the same as those returned by set_controls."]}, {"name": "camera.Camera.start", "path": "ref/camera#pygame.camera.Camera.start", "type": "pygame.camera", "text": ["Opens the camera device, attempts to initialize it, and begins recording images to a buffer. The camera must be started before any of the below functions can be used."]}, {"name": "camera.Camera.stop", "path": "ref/camera#pygame.camera.Camera.stop", "type": "pygame.camera", "text": ["Stops recording, uninitializes the camera, and closes it. Once a camera is stopped, the below functions cannot be used until it is started again."]}, {"name": "camera.colorspace", "path": "ref/camera#pygame.camera.colorspace", "type": "pygame.camera", "text": ["Allows for conversion from \"RGB\" to a destination colorspace of \"HSV\" or \"YUV\". The source and destination surfaces must be the same size and pixel depth. This is useful for computer vision on devices with limited processing power. Capture as small of an image as possible, transform.scale() it even smaller, and then convert the colorspace to YUV or HSV before doing any processing on it."]}, {"name": "camera.list_cameras", "path": "ref/camera#pygame.camera.list_cameras", "type": "pygame.camera", "text": ["Checks the computer for available cameras and returns a list of strings of camera names, ready to be fed into pygame.camera.Camera."]}, {"name": "cdrom", "path": "ref/cdrom", "type": "pygame.cdrom", "text": ["The cdrom module manages the CD and DVD drives on a computer. It can also control the playback of audio CDs. This module needs to be initialized before it can do anything. Each CD object you create represents a cdrom drive and must also be initialized individually before it can do most things.", "Initialize the cdrom module. This will scan the system for all CD devices. The module must be initialized before any other functions will work. This automatically happens when you call pygame.init().", "It is safe to call this function more than once.", "Uninitialize the cdrom module. After you call this any existing CD objects will no longer work.", "It is safe to call this function more than once.", "Test if the cdrom module is initialized or not. This is different than the CD.init() since each drive must also be initialized individually.", "Return the number of cd drives on the system. When you create CD objects you need to pass an integer id that must be lower than this count. The count will be 0 if there are no drives on the system.", "You can create a CD object for each cdrom on the system. Use pygame.cdrom.get_count() to determine how many drives actually exist. The id argument is an integer of the drive, starting at zero.", "The CD object is not initialized, you can only call CD.get_id() and CD.get_name() on an uninitialized drive.", "It is safe to create multiple CD objects for the same drive, they will all cooperate normally.", "Initialize the cdrom drive for use. The drive must be initialized for most CD methods to work. Even if the rest of pygame has been initialized.", "There may be a brief pause while the drive is initialized. Avoid CD.init() if the program should not stop for a second or two.", "Uninitialize a drive for use. Call this when your program will not be accessing the drive for awhile.", "Test if this CDROM device is initialized. This is different than the pygame.cdrom.init() since each drive must also be initialized individually.", "Playback audio from an audio cdrom in the drive. Besides the track number argument, you can also pass a starting and ending time for playback. The start and end time are in seconds, and can limit the section of an audio track played.", "If you pass a start time but no end, the audio will play to the end of the track. If you pass a start time and 'None' for the end time, the audio will play to the end of the entire disc.", "See the CD.get_numtracks() and CD.get_track_audio() to find tracks to playback.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Stops playback of audio from the cdrom. This will also lose the current playback position. This method does nothing if the drive isn't already playing audio.", "Temporarily stop audio playback on the CD. The playback can be resumed at the same point with the CD.resume() method. If the CD is not playing this method does nothing.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Unpause a paused CD. If the CD is not paused or already playing, this method does nothing.", "This will open the cdrom drive and eject the cdrom. If the drive is playing or paused it will be stopped.", "Returns the integer id that was used to create the CD instance. This method can work on an uninitialized CD.", "Return the string name of the drive. This is the system name used to represent the drive. It is often the drive letter or device name. This method can work on an uninitialized CD.", "Returns True if the drive busy playing back audio.", "Returns True if the drive is currently paused.", "Returns both the current track and time of that track. This method works when the drive is either playing or paused.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Return False if there is a cdrom currently in the drive. If the drive is empty this will return True.", "Return the number of tracks on the cdrom in the drive. This will return zero of the drive is empty or has no tracks.", "Determine if a track on a cdrom contains audio data. You can also call CD.num_tracks() and CD.get_all() to determine more information about the cdrom.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Return a list with information for every track on the cdrom. The information consists of a tuple with four values. The audio value is True if the track contains audio data. The start, end, and length values are floating point numbers in seconds. Start and end represent absolute times on the entire disc.", "Return the absolute time in seconds where at start of the cdrom track.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Return a floating point value in seconds of the length of the cdrom track.", "Note, track 0 is the first track on the CD. Track numbers start at zero."]}, {"name": "cdrom.CD", "path": "ref/cdrom#pygame.cdrom.CD", "type": "pygame.cdrom", "text": ["You can create a CD object for each cdrom on the system. Use pygame.cdrom.get_count() to determine how many drives actually exist. The id argument is an integer of the drive, starting at zero.", "The CD object is not initialized, you can only call CD.get_id() and CD.get_name() on an uninitialized drive.", "It is safe to create multiple CD objects for the same drive, they will all cooperate normally.", "Initialize the cdrom drive for use. The drive must be initialized for most CD methods to work. Even if the rest of pygame has been initialized.", "There may be a brief pause while the drive is initialized. Avoid CD.init() if the program should not stop for a second or two.", "Uninitialize a drive for use. Call this when your program will not be accessing the drive for awhile.", "Test if this CDROM device is initialized. This is different than the pygame.cdrom.init() since each drive must also be initialized individually.", "Playback audio from an audio cdrom in the drive. Besides the track number argument, you can also pass a starting and ending time for playback. The start and end time are in seconds, and can limit the section of an audio track played.", "If you pass a start time but no end, the audio will play to the end of the track. If you pass a start time and 'None' for the end time, the audio will play to the end of the entire disc.", "See the CD.get_numtracks() and CD.get_track_audio() to find tracks to playback.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Stops playback of audio from the cdrom. This will also lose the current playback position. This method does nothing if the drive isn't already playing audio.", "Temporarily stop audio playback on the CD. The playback can be resumed at the same point with the CD.resume() method. If the CD is not playing this method does nothing.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Unpause a paused CD. If the CD is not paused or already playing, this method does nothing.", "This will open the cdrom drive and eject the cdrom. If the drive is playing or paused it will be stopped.", "Returns the integer id that was used to create the CD instance. This method can work on an uninitialized CD.", "Return the string name of the drive. This is the system name used to represent the drive. It is often the drive letter or device name. This method can work on an uninitialized CD.", "Returns True if the drive busy playing back audio.", "Returns True if the drive is currently paused.", "Returns both the current track and time of that track. This method works when the drive is either playing or paused.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Return False if there is a cdrom currently in the drive. If the drive is empty this will return True.", "Return the number of tracks on the cdrom in the drive. This will return zero of the drive is empty or has no tracks.", "Determine if a track on a cdrom contains audio data. You can also call CD.num_tracks() and CD.get_all() to determine more information about the cdrom.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Return a list with information for every track on the cdrom. The information consists of a tuple with four values. The audio value is True if the track contains audio data. The start, end, and length values are floating point numbers in seconds. Start and end represent absolute times on the entire disc.", "Return the absolute time in seconds where at start of the cdrom track.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Return a floating point value in seconds of the length of the cdrom track.", "Note, track 0 is the first track on the CD. Track numbers start at zero."]}, {"name": "cdrom.CD.eject", "path": "ref/cdrom#pygame.cdrom.CD.eject", "type": "pygame.cdrom", "text": ["This will open the cdrom drive and eject the cdrom. If the drive is playing or paused it will be stopped."]}, {"name": "cdrom.CD.get_all", "path": "ref/cdrom#pygame.cdrom.CD.get_all", "type": "pygame.cdrom", "text": ["Return a list with information for every track on the cdrom. The information consists of a tuple with four values. The audio value is True if the track contains audio data. The start, end, and length values are floating point numbers in seconds. Start and end represent absolute times on the entire disc."]}, {"name": "cdrom.CD.get_busy", "path": "ref/cdrom#pygame.cdrom.CD.get_busy", "type": "pygame.cdrom", "text": ["Returns True if the drive busy playing back audio."]}, {"name": "cdrom.CD.get_current", "path": "ref/cdrom#pygame.cdrom.CD.get_current", "type": "pygame.cdrom", "text": ["Returns both the current track and time of that track. This method works when the drive is either playing or paused.", "Note, track 0 is the first track on the CD. Track numbers start at zero."]}, {"name": "cdrom.CD.get_empty", "path": "ref/cdrom#pygame.cdrom.CD.get_empty", "type": "pygame.cdrom", "text": ["Return False if there is a cdrom currently in the drive. If the drive is empty this will return True."]}, {"name": "cdrom.CD.get_id", "path": "ref/cdrom#pygame.cdrom.CD.get_id", "type": "pygame.cdrom", "text": ["Returns the integer id that was used to create the CD instance. This method can work on an uninitialized CD."]}, {"name": "cdrom.CD.get_init", "path": "ref/cdrom#pygame.cdrom.CD.get_init", "type": "pygame.cdrom", "text": ["Test if this CDROM device is initialized. This is different than the pygame.cdrom.init() since each drive must also be initialized individually."]}, {"name": "cdrom.CD.get_name", "path": "ref/cdrom#pygame.cdrom.CD.get_name", "type": "pygame.cdrom", "text": ["Return the string name of the drive. This is the system name used to represent the drive. It is often the drive letter or device name. This method can work on an uninitialized CD."]}, {"name": "cdrom.CD.get_numtracks", "path": "ref/cdrom#pygame.cdrom.CD.get_numtracks", "type": "pygame.cdrom", "text": ["Return the number of tracks on the cdrom in the drive. This will return zero of the drive is empty or has no tracks."]}, {"name": "cdrom.CD.get_paused", "path": "ref/cdrom#pygame.cdrom.CD.get_paused", "type": "pygame.cdrom", "text": ["Returns True if the drive is currently paused."]}, {"name": "cdrom.CD.get_track_audio", "path": "ref/cdrom#pygame.cdrom.CD.get_track_audio", "type": "pygame.cdrom", "text": ["Determine if a track on a cdrom contains audio data. You can also call CD.num_tracks() and CD.get_all() to determine more information about the cdrom.", "Note, track 0 is the first track on the CD. Track numbers start at zero."]}, {"name": "cdrom.CD.get_track_length", "path": "ref/cdrom#pygame.cdrom.CD.get_track_length", "type": "pygame.cdrom", "text": ["Return a floating point value in seconds of the length of the cdrom track.", "Note, track 0 is the first track on the CD. Track numbers start at zero."]}, {"name": "cdrom.CD.get_track_start", "path": "ref/cdrom#pygame.cdrom.CD.get_track_start", "type": "pygame.cdrom", "text": ["Return the absolute time in seconds where at start of the cdrom track.", "Note, track 0 is the first track on the CD. Track numbers start at zero."]}, {"name": "cdrom.CD.init", "path": "ref/cdrom#pygame.cdrom.CD.init", "type": "pygame.cdrom", "text": ["Initialize the cdrom drive for use. The drive must be initialized for most CD methods to work. Even if the rest of pygame has been initialized.", "There may be a brief pause while the drive is initialized. Avoid CD.init() if the program should not stop for a second or two."]}, {"name": "cdrom.CD.pause", "path": "ref/cdrom#pygame.cdrom.CD.pause", "type": "pygame.cdrom", "text": ["Temporarily stop audio playback on the CD. The playback can be resumed at the same point with the CD.resume() method. If the CD is not playing this method does nothing.", "Note, track 0 is the first track on the CD. Track numbers start at zero."]}, {"name": "cdrom.CD.play", "path": "ref/cdrom#pygame.cdrom.CD.play", "type": "pygame.cdrom", "text": ["Playback audio from an audio cdrom in the drive. Besides the track number argument, you can also pass a starting and ending time for playback. The start and end time are in seconds, and can limit the section of an audio track played.", "If you pass a start time but no end, the audio will play to the end of the track. If you pass a start time and 'None' for the end time, the audio will play to the end of the entire disc.", "See the CD.get_numtracks() and CD.get_track_audio() to find tracks to playback.", "Note, track 0 is the first track on the CD. Track numbers start at zero."]}, {"name": "cdrom.CD.quit", "path": "ref/cdrom#pygame.cdrom.CD.quit", "type": "pygame.cdrom", "text": ["Uninitialize a drive for use. Call this when your program will not be accessing the drive for awhile."]}, {"name": "cdrom.CD.resume", "path": "ref/cdrom#pygame.cdrom.CD.resume", "type": "pygame.cdrom", "text": ["Unpause a paused CD. If the CD is not paused or already playing, this method does nothing."]}, {"name": "cdrom.CD.stop", "path": "ref/cdrom#pygame.cdrom.CD.stop", "type": "pygame.cdrom", "text": ["Stops playback of audio from the cdrom. This will also lose the current playback position. This method does nothing if the drive isn't already playing audio."]}, {"name": "cdrom.get_count", "path": "ref/cdrom#pygame.cdrom.get_count", "type": "pygame.cdrom", "text": ["Return the number of cd drives on the system. When you create CD objects you need to pass an integer id that must be lower than this count. The count will be 0 if there are no drives on the system."]}, {"name": "cdrom.get_init", "path": "ref/cdrom#pygame.cdrom.get_init", "type": "pygame.cdrom", "text": ["Test if the cdrom module is initialized or not. This is different than the CD.init() since each drive must also be initialized individually."]}, {"name": "cdrom.init", "path": "ref/cdrom#pygame.cdrom.init", "type": "pygame.cdrom", "text": ["Initialize the cdrom module. This will scan the system for all CD devices. The module must be initialized before any other functions will work. This automatically happens when you call pygame.init().", "It is safe to call this function more than once."]}, {"name": "cdrom.quit", "path": "ref/cdrom#pygame.cdrom.quit", "type": "pygame.cdrom", "text": ["Uninitialize the cdrom module. After you call this any existing CD objects will no longer work.", "It is safe to call this function more than once."]}, {"name": "Color", "path": "ref/color", "type": "pygame.Color", "text": ["The Color class represents RGBA color values using a value range of 0 to 255 inclusive. It allows basic arithmetic operations \u2014 binary operations +, -, *, //, %, and unary operation ~ \u2014 to create new colors, supports conversions to other color spaces such as HSV or HSL and lets you adjust single color channels. Alpha defaults to 255 (fully opaque) when not given. The arithmetic operations and correct_gamma() method preserve subclasses. For the binary operators, the class of the returned color is that of the left hand color object of the operator.", "Color objects support equality comparison with other color objects and 3 or 4 element tuples of integers. There was a bug in pygame 1.8.1 where the default alpha was 0, not 255 like previously.", "Color objects export the C level array interface. The interface exports a read-only one dimensional unsigned byte array of the same assigned length as the color. For CPython 2.6 and later, the new buffer interface is also exported, with the same characteristics as the array interface.", "The floor division, //, and modulus, %, operators do not raise an exception for division by zero. Instead, if a color, or alpha, channel in the right hand color is 0, then the result is 0. For example:", "color value (see note below for the supported formats)", "Note", "a newly created Color object", "Color", "Changed in pygame 2.0.0: Support for tuples, lists, and Color objects when creating Color objects.", "Changed in pygame 1.9.2: Color objects export the C level array interface.", "Changed in pygame 1.9.0: Color objects support 4-element tuples of integers.", "Changed in pygame 1.8.1: New implementation of the class.", "The red value of the Color.", "The green value of the Color.", "The blue value of the Color.", "The alpha value of the Color.", "The CMY representation of the Color. The CMY components are in the ranges C = [0, 1], M = [0, 1], Y = [0, 1]. Note that this will not return the absolutely exact CMY values for the set RGB values in all cases. Due to the RGB mapping from 0-255 and the CMY mapping from 0-1 rounding errors may cause the CMY values to differ slightly from what you might expect.", "The HSVA representation of the Color. The HSVA components are in the ranges H = [0, 360], S = [0, 100], V = [0, 100], A = [0, 100]. Note that this will not return the absolutely exact HSV values for the set RGB values in all cases. Due to the RGB mapping from 0-255 and the HSV mapping from 0-100 and 0-360 rounding errors may cause the HSV values to differ slightly from what you might expect.", "The HSLA representation of the Color. The HSLA components are in the ranges H = [0, 360], S = [0, 100], V = [0, 100], A = [0, 100]. Note that this will not return the absolutely exact HSL values for the set RGB values in all cases. Due to the RGB mapping from 0-255 and the HSL mapping from 0-100 and 0-360 rounding errors may cause the HSL values to differ slightly from what you might expect.", "The I1I2I3 representation of the Color. The I1I2I3 components are in the ranges I1 = [0, 1], I2 = [-0.5, 0.5], I3 = [-0.5, 0.5]. Note that this will not return the absolutely exact I1I2I3 values for the set RGB values in all cases. Due to the RGB mapping from 0-255 and the I1I2I3 mapping from 0-1 rounding errors may cause the I1I2I3 values to differ slightly from what you might expect.", "Returns the normalized RGBA values of the Color as floating point values.", "Applies a certain gamma value to the Color and returns a new Color with the adjusted RGBA values.", "The default Color length is 4. Colors can have lengths 1,2,3 or 4. This is useful if you want to unpack to r,g,b and not r,g,b,a. If you want to get the length of a Color do len(acolor).", "New in pygame 1.9.0.", "Returns a Color which is a linear interpolation between self and the given Color in RGBA space. The second parameter determines how far between self and other the result is going to be. It must be a value between 0 and 1 where 0 means self and 1 means other will be returned.", "New in pygame 2.0.1.", "Returns a new Color where each of the red, green and blue colour channels have been multiplied by the alpha channel of the original color. The alpha channel remains unchanged.", "This is useful when working with the BLEND_PREMULTIPLIED blending mode flag for pygame.Surface.blit(), which assumes that all surfaces using it are using pre-multiplied alpha colors.", "New in pygame 2.0.0.", "Sets the elements of the color. See parameters for pygame.Color() for the parameters of this function. If the alpha value was not set it will not change.", "New in pygame 2.0.1."]}, {"name": "Color.a", "path": "ref/color#pygame.Color.a", "type": "pygame.Color", "text": ["The alpha value of the Color."]}, {"name": "Color.b", "path": "ref/color#pygame.Color.b", "type": "pygame.Color", "text": ["The blue value of the Color."]}, {"name": "Color.cmy", "path": "ref/color#pygame.Color.cmy", "type": "pygame.Color", "text": ["The CMY representation of the Color. The CMY components are in the ranges C = [0, 1], M = [0, 1], Y = [0, 1]. Note that this will not return the absolutely exact CMY values for the set RGB values in all cases. Due to the RGB mapping from 0-255 and the CMY mapping from 0-1 rounding errors may cause the CMY values to differ slightly from what you might expect."]}, {"name": "Color.correct_gamma", "path": "ref/color#pygame.Color.correct_gamma", "type": "pygame.Color", "text": ["Applies a certain gamma value to the Color and returns a new Color with the adjusted RGBA values."]}, {"name": "Color.g", "path": "ref/color#pygame.Color.g", "type": "pygame.Color", "text": ["The green value of the Color."]}, {"name": "Color.hsla", "path": "ref/color#pygame.Color.hsla", "type": "pygame.Color", "text": ["The HSLA representation of the Color. The HSLA components are in the ranges H = [0, 360], S = [0, 100], V = [0, 100], A = [0, 100]. Note that this will not return the absolutely exact HSL values for the set RGB values in all cases. Due to the RGB mapping from 0-255 and the HSL mapping from 0-100 and 0-360 rounding errors may cause the HSL values to differ slightly from what you might expect."]}, {"name": "Color.hsva", "path": "ref/color#pygame.Color.hsva", "type": "pygame.Color", "text": ["The HSVA representation of the Color. The HSVA components are in the ranges H = [0, 360], S = [0, 100], V = [0, 100], A = [0, 100]. Note that this will not return the absolutely exact HSV values for the set RGB values in all cases. Due to the RGB mapping from 0-255 and the HSV mapping from 0-100 and 0-360 rounding errors may cause the HSV values to differ slightly from what you might expect."]}, {"name": "Color.i1i2i3", "path": "ref/color#pygame.Color.i1i2i3", "type": "pygame.Color", "text": ["The I1I2I3 representation of the Color. The I1I2I3 components are in the ranges I1 = [0, 1], I2 = [-0.5, 0.5], I3 = [-0.5, 0.5]. Note that this will not return the absolutely exact I1I2I3 values for the set RGB values in all cases. Due to the RGB mapping from 0-255 and the I1I2I3 mapping from 0-1 rounding errors may cause the I1I2I3 values to differ slightly from what you might expect."]}, {"name": "Color.lerp", "path": "ref/color#pygame.Color.lerp", "type": "pygame.Color", "text": ["Returns a Color which is a linear interpolation between self and the given Color in RGBA space. The second parameter determines how far between self and other the result is going to be. It must be a value between 0 and 1 where 0 means self and 1 means other will be returned.", "New in pygame 2.0.1."]}, {"name": "Color.normalize", "path": "ref/color#pygame.Color.normalize", "type": "pygame.Color", "text": ["Returns the normalized RGBA values of the Color as floating point values."]}, {"name": "Color.premul_alpha", "path": "ref/color#pygame.Color.premul_alpha", "type": "pygame.Color", "text": ["Returns a new Color where each of the red, green and blue colour channels have been multiplied by the alpha channel of the original color. The alpha channel remains unchanged.", "This is useful when working with the BLEND_PREMULTIPLIED blending mode flag for pygame.Surface.blit(), which assumes that all surfaces using it are using pre-multiplied alpha colors.", "New in pygame 2.0.0."]}, {"name": "Color.r", "path": "ref/color#pygame.Color.r", "type": "pygame.Color", "text": ["The red value of the Color."]}, {"name": "Color.set_length", "path": "ref/color#pygame.Color.set_length", "type": "pygame.Color", "text": ["The default Color length is 4. Colors can have lengths 1,2,3 or 4. This is useful if you want to unpack to r,g,b and not r,g,b,a. If you want to get the length of a Color do len(acolor).", "New in pygame 1.9.0."]}, {"name": "Color.update", "path": "ref/color#pygame.Color.update", "type": "pygame.Color", "text": ["Sets the elements of the color. See parameters for pygame.Color() for the parameters of this function. If the alpha value was not set it will not change.", "New in pygame 2.0.1."]}, {"name": "cursors", "path": "ref/cursors", "type": "pygame.cursors", "text": ["Pygame offers control over the system hardware cursor. Pygame only supports black and white cursors for the system. You control the cursor with functions inside pygame.mouse.", "This cursors module contains functions for loading and decoding various cursor formats. These allow you to easily store your cursors in external files or directly as encoded python strings.", "The module includes several standard cursors. The pygame.mouse.set_cursor() function takes several arguments. All those arguments have been stored in a single tuple you can call like this:", "The following variables can be passed to pygame.mouse.set_cursor function:", "This module also contains a few cursors as formatted strings. You'll need to pass these to pygame.cursors.compile() function before you can use them. The example call would look like this:", "The following strings can be converted into cursor bitmaps with pygame.cursors.compile() :", "A sequence of strings can be used to create binary cursor data for the system cursor. This returns the binary data in the form of two tuples. Those can be passed as the third and fourth arguments respectively of the pygame.mouse.set_cursor() function.", "If you are creating your own cursor strings, you can use any value represent the black and white pixels. Some system allow you to set a special toggle color for the system color, this is also called the xor color. If the system does not support xor cursors, that color will simply be black.", "The height must be divisible by 8. The width of the strings must all be equal and be divisible by 8. If these two conditions are not met, ValueError is raised. An example set of cursor strings looks like this", "This loads cursors for a simple subset of XBM files. XBM files are traditionally used to store cursors on UNIX systems, they are an ASCII format used to represent simple images.", "Sometimes the black and white color values will be split into two separate XBM files. You can pass a second maskfile argument to load the two images into a single cursor.", "The cursorfile and maskfile arguments can either be filenames or file-like object with the readlines method.", "The return value cursor_args can be passed directly to the pygame.mouse.set_cursor() function."]}, {"name": "cursors.compile", "path": "ref/cursors#pygame.cursors.compile", "type": "pygame.cursors", "text": ["A sequence of strings can be used to create binary cursor data for the system cursor. This returns the binary data in the form of two tuples. Those can be passed as the third and fourth arguments respectively of the pygame.mouse.set_cursor() function.", "If you are creating your own cursor strings, you can use any value represent the black and white pixels. Some system allow you to set a special toggle color for the system color, this is also called the xor color. If the system does not support xor cursors, that color will simply be black.", "The height must be divisible by 8. The width of the strings must all be equal and be divisible by 8. If these two conditions are not met, ValueError is raised. An example set of cursor strings looks like this"]}, {"name": "cursors.load_xbm", "path": "ref/cursors#pygame.cursors.load_xbm", "type": "pygame.cursors", "text": ["This loads cursors for a simple subset of XBM files. XBM files are traditionally used to store cursors on UNIX systems, they are an ASCII format used to represent simple images.", "Sometimes the black and white color values will be split into two separate XBM files. You can pass a second maskfile argument to load the two images into a single cursor.", "The cursorfile and maskfile arguments can either be filenames or file-like object with the readlines method.", "The return value cursor_args can be passed directly to the pygame.mouse.set_cursor() function."]}, {"name": "display", "path": "ref/display", "type": "pygame.display", "text": ["This module offers control over the pygame display. Pygame has a single display Surface that is either contained in a window or runs full screen. Once you create the display you treat it as a regular Surface. Changes are not immediately visible onscreen; you must choose one of the two flipping functions to update the actual display.", "The origin of the display, where x = 0 and y = 0, is the top left of the screen. Both axes increase positively towards the bottom right of the screen.", "The pygame display can actually be initialized in one of several modes. By default, the display is a basic software driven framebuffer. You can request special modules like hardware acceleration and OpenGL support. These are controlled by flags passed to pygame.display.set_mode().", "Pygame can only have a single display active at any time. Creating a new one with pygame.display.set_mode() will close the previous display. If precise control is needed over the pixel format or display resolutions, use the functions pygame.display.mode_ok(), pygame.display.list_modes(), and pygame.display.Info() to query information about the display.", "Once the display Surface is created, the functions from this module affect the single existing display. The Surface becomes invalid if the module is uninitialized. If a new display mode is set, the existing Surface will automatically switch to operate on the new display.", "When the display mode is set, several events are placed on the pygame event queue. pygame.QUIT is sent when the user has requested the program to shut down. The window will receive pygame.ACTIVEEVENT events as the display gains and loses input focus. If the display is set with the pygame.RESIZABLE flag, pygame.VIDEORESIZE events will be sent when the user adjusts the window dimensions. Hardware displays that draw direct to the screen will get pygame.VIDEOEXPOSE events when portions of the window must be redrawn.", "In pygame 2, there is a new type of event called pygame.WINDOWEVENT that is meant to replace all window related events like pygame.VIDEORESIZE, pygame.VIDEOEXPOSE and pygame.ACTIVEEVENT.", "Note that the WINDOWEVENT API is considered experimental, and may change in future releases.", "The new events of type pygame.WINDOWEVENT have an event attribute that can take the following values.", "If SDL version used is less than 2.0.5, the last two values WINDOWEVENT_TAKE_FOCUS and WINDOWEVENT_HIT_TEST will not work. See the SDL implementation (in C programming) of the same over here.", "Some display environments have an option for automatically stretching all windows. When this option is enabled, this automatic stretching distorts the appearance of the pygame window. In the pygame examples directory, there is example code (prevent_display_stretching.py) which shows how to disable this automatic stretching of the pygame display on Microsoft Windows (Vista or newer required).", "Initializes the pygame display module. The display module cannot do anything until it is initialized. This is usually handled for you automatically when you call the higher level pygame.init().", "Pygame will select from one of several internal display backends when it is initialized. The display mode will be chosen depending on the platform and permissions of current user. Before the display module is initialized the environment variable SDL_VIDEODRIVER can be set to control which backend is used. The systems with multiple choices are listed here.", "On some platforms it is possible to embed the pygame display into an already existing window. To do this, the environment variable SDL_WINDOWID must be set to a string containing the window id or handle. The environment variable is checked when the pygame display is initialized. Be aware that there can be many strange side effects when running in an embedded display.", "It is harmless to call this more than once, repeated calls have no effect.", "This will shut down the entire display module. This means any active displays will be closed. This will also be handled automatically when the program exits.", "It is harmless to call this more than once, repeated calls have no effect.", "Returns True if the pygame.display module is currently initialized.", "This function will create a display Surface. The arguments passed in are requests for a display type. The actual created display will be the best possible match supported by the system.", "The size argument is a pair of numbers representing the width and height. The flags argument is a collection of additional options. The depth argument represents the number of bits to use for color.", "The Surface that gets returned can be drawn to like a regular Surface but changes will eventually be seen on the monitor.", "If no size is passed or is set to (0, 0) and pygame uses SDL version 1.2.10 or above, the created Surface will have the same size as the current screen resolution. If only the width or height are set to 0, the Surface will have the same width or height as the screen resolution. Using a SDL version prior to 1.2.10 will raise an exception.", "It is usually best to not pass the depth argument. It will default to the best and fastest color depth for the system. If your game requires a specific color format you can control the depth with this argument. Pygame will emulate an unavailable color depth which can be slow.", "When requesting fullscreen display modes, sometimes an exact match for the requested size cannot be made. In these situations pygame will select the closest compatible match. The returned surface will still always match the requested size.", "On high resolution displays(4k, 1080p) and tiny graphics games (640x480) show up very small so that they are unplayable. SCALED scales up the window for you. The game thinks it's a 640x480 window, but really it can be bigger. Mouse events are scaled for you, so your game doesn't need to do it. Note that SCALED is considered an experimental API and may change in future releases.", "The flags argument controls which type of display you want. There are several to choose from, and you can even combine multiple types using the bitwise or operator, (the pipe \"|\" character). If you pass 0 or no flags argument it will default to a software driven window. Here are the display flags you will want to choose from:", "Pygame 2 has the following additional flags available.", "New in pygame 2.0.0: SCALED, SHOWN and HIDDEN", "By setting the vsync parameter to 1, it is possible to get a display with vertical sync, but you are not guaranteed to get one. The request only works at all for calls to set_mode() with the pygame.OPENGL or pygame.SCALED flags set, and is still not guaranteed even with one of those set. What you get depends on the hardware and driver configuration of the system pygame is running on. Here is an example usage of a call to set_mode() that may give you a display with vsync:", "Vsync behaviour is considered experimental, and may change in future releases.", "New in pygame 2.0.0: vsync", "Basic example:", "The display index 0 means the default display is used.", "Changed in pygame 1.9.5: display argument added", "Return a reference to the currently set display Surface. If no display mode has been set this will return None.", "This will update the contents of the entire display. If your display mode is using the flags pygame.HWSURFACE and pygame.DOUBLEBUF, this will wait for a vertical retrace and swap the surfaces. If you are using a different type of display mode, it will simply update the entire contents of the surface.", "When using an pygame.OPENGL display mode this will perform a gl buffer swap.", "This function is like an optimized version of pygame.display.flip() for software displays. It allows only a portion of the screen to updated, instead of the entire area. If no argument is passed it updates the entire Surface area like pygame.display.flip().", "You can pass the function a single rectangle, or a sequence of rectangles. It is more efficient to pass many rectangles at once than to call update multiple times with single or a partial list of rectangles. If passing a sequence of rectangles it is safe to include None values in the list, which will be skipped.", "This call cannot be used on pygame.OPENGL displays and will generate an exception.", "Pygame chooses one of many available display backends when it is initialized. This returns the internal name used for the display backend. This can be used to provide limited information about what display capabilities might be accelerated. See the SDL_VIDEODRIVER flags in pygame.display.set_mode() to see some of the common options.", "Creates a simple object containing several attributes to describe the current graphics environment. If this is called before pygame.display.set_mode() some platforms can provide information about the default display mode. This can also be called after setting the display mode to verify specific display options were satisfied. The VidInfo object has several attributes:", "Creates a dictionary filled with string keys. The strings and values are arbitrarily created by the system. Some systems may have no information and an empty dictionary will be returned. Most platforms will return a \"window\" key with the value set to the system id for the current display.", "New in pygame 1.7.1.", "This function returns a list of possible sizes for a specified color depth. The return value will be an empty list if no display modes are available with the given arguments. A return value of -1 means that any requested size should work (this is likely the case for windowed modes). Mode sizes are sorted from biggest to smallest.", "If depth is 0, the current/best color depth for the display is used. The flags defaults to pygame.FULLSCREEN, but you may need to add additional flags for specific fullscreen modes.", "The display index 0 means the default display is used.", "Changed in pygame 1.9.5: display argument added", "This function uses the same arguments as pygame.display.set_mode(). It is used to determine if a requested display mode is available. It will return 0 if the display mode cannot be set. Otherwise it will return a pixel depth that best matches the display asked for.", "Usually the depth argument is not passed, but some platforms can support multiple display depths. If passed it will hint to which depth is a better match.", "The most useful flags to pass will be pygame.HWSURFACE, pygame.DOUBLEBUF, and maybe pygame.FULLSCREEN. The function will return 0 if these display flags cannot be set.", "The display index 0 means the default display is used.", "Changed in pygame 1.9.5: display argument added", "After calling pygame.display.set_mode() with the pygame.OPENGL flag, it is a good idea to check the value of any requested OpenGL attributes. See pygame.display.gl_set_attribute() for a list of valid flags.", "When calling pygame.display.set_mode() with the pygame.OPENGL flag, Pygame automatically handles setting the OpenGL attributes like color and double-buffering. OpenGL offers several other attributes you may want control over. Pass one of these attributes as the flag, and its appropriate value. This must be called before pygame.display.set_mode().", "Many settings are the requested minimum. Creating a window with an OpenGL context will fail if OpenGL cannot provide the requested attribute, but it may for example give you a stencil buffer even if you request none, or it may give you a larger one than requested.", "The OPENGL flags are:", "GL_MULTISAMPLEBUFFERS", "Whether to enable multisampling anti-aliasing. Defaults to 0 (disabled).", "Set GL_MULTISAMPLESAMPLES to a value above 0 to control the amount of anti-aliasing. A typical value is 2 or 3.", "GL_STENCIL_SIZE", "GL_DEPTH_SIZE", "GL_STEREO", "GL_BUFFER_SIZE", "New in pygame 2.0.0: Additional attributes:", "GL_CONTEXT_PROFILE_MASK", "Sets the OpenGL profile to one of these values:", "GL_ACCELERATED_VISUAL", "Returns True when the display Surface is considered actively renderable on the screen and may be visible to the user. This is the default state immediately after pygame.display.set_mode(). This method may return True even if the application is fully hidden behind another application window.", "This will return False if the display Surface has been iconified or minimized (either via pygame.display.iconify() or via an OS specific method such as the minimize-icon available on most desktops).", "The method can also return False for other reasons without the application being explicitly iconified or minimized by the user. A notable example being if the user has multiple virtual desktops and the display Surface is not on the active virtual desktop.", "Note", "This function returning True is unrelated to whether the application has input focus. Please see pygame.key.get_focused() and pygame.mouse.get_focused() for APIs related to input focus.", "Request the window for the display surface be iconified or hidden. Not all systems and displays support an iconified display. The function will return True if successful.", "When the display is iconified pygame.display.get_active() will return False. The event queue should receive an ACTIVEEVENT event when the window has been iconified. Additionally, the event queue also recieves a WINDOWEVENT_MINIMIZED event when the window has been iconified on pygame 2.", "Switches the display window between windowed and fullscreen modes. Display driver support is not great when using pygame 1, but with pygame 2 it is the most reliable method to switch to and from fullscreen.", "Supported display drivers in pygame 1:", "Supported display drivers in pygame 2:", "Set the red, green, and blue gamma values on the display hardware. If the green and blue arguments are not passed, they will both be the same as red. Not all systems and hardware support gamma ramps, if the function succeeds it will return True.", "A gamma value of 1.0 creates a linear color table. Lower values will darken the display and higher values will brighten.", "Set the red, green, and blue gamma ramps with an explicit lookup table. Each argument should be sequence of 256 integers. The integers should range between 0 and 0xffff. Not all systems and hardware support gamma ramps, if the function succeeds it will return True.", "Sets the runtime icon the system will use to represent the display window. All windows default to a simple pygame logo for the window icon.", "You can pass any surface, but most systems want a smaller image around 32x32. The image can have colorkey transparency which will be passed to the system.", "Some systems do not allow the window icon to change after it has been shown. This function can be called before pygame.display.set_mode() to create the icon before the display mode is set.", "If the display has a window title, this function will change the name on the window. Some systems support an alternate shorter title to be used for minimized displays.", "Returns the title and icontitle for the display Surface. These will often be the same value.", "This will change the video display color palette for 8-bit displays. This does not change the palette for the actual display Surface, only the palette that is used to display the Surface. If no palette argument is passed, the system default palette will be restored. The palette is a sequence of RGB triplets.", "Returns the number of available displays. This is always 1 if pygame.get_sdl_version() returns a major version number below 2.", "New in pygame 1.9.5.", "Returns the size of the window initialized with pygame.display.set_mode(). This may differ from the size of the display surface if SCALED is used.", "New in pygame 2.0.0.", "Return whether screensaver is allowed to run whilst the app is running. Default is False. By default pygame does not allow the screensaver during game play.", "Note", "Some platforms do not have a screensaver or support disabling the screensaver. Please see pygame.display.set_allow_screensaver() for caveats with screensaver support.", "New in pygame 2.0.0.", "Change whether screensavers should be allowed whilst the app is running. The default is False. By default pygame does not allow the screensaver during game play.", "If the screensaver has been disallowed due to this function, it will automatically be allowed to run when pygame.quit() is called.", "It is possible to influence the default value via the environment variable SDL_HINT_VIDEO_ALLOW_SCREENSAVER, which can be set to either 0 (disable) or 1 (enable).", "Note", "Disabling screensaver is subject to platform support. When platform support is absent, this function will silently appear to work even though the screensaver state is unchanged. The lack of feedback is due to SDL not providing any supported method for determining whether it supports changing the screensaver state. SDL_HINT_VIDEO_ALLOW_SCREENSAVER is available in SDL 2.0.2 or later. SDL1.2 does not implement this.", "New in pygame 2.0.0."]}, {"name": "display.flip", "path": "ref/display#pygame.display.flip", "type": "pygame.display", "text": ["This will update the contents of the entire display. If your display mode is using the flags pygame.HWSURFACE and pygame.DOUBLEBUF, this will wait for a vertical retrace and swap the surfaces. If you are using a different type of display mode, it will simply update the entire contents of the surface.", "When using an pygame.OPENGL display mode this will perform a gl buffer swap."]}, {"name": "display.get_active", "path": "ref/display#pygame.display.get_active", "type": "pygame.display", "text": ["Returns True when the display Surface is considered actively renderable on the screen and may be visible to the user. This is the default state immediately after pygame.display.set_mode(). This method may return True even if the application is fully hidden behind another application window.", "This will return False if the display Surface has been iconified or minimized (either via pygame.display.iconify() or via an OS specific method such as the minimize-icon available on most desktops).", "The method can also return False for other reasons without the application being explicitly iconified or minimized by the user. A notable example being if the user has multiple virtual desktops and the display Surface is not on the active virtual desktop.", "Note", "This function returning True is unrelated to whether the application has input focus. Please see pygame.key.get_focused() and pygame.mouse.get_focused() for APIs related to input focus."]}, {"name": "display.get_allow_screensaver", "path": "ref/display#pygame.display.get_allow_screensaver", "type": "pygame.display", "text": ["Return whether screensaver is allowed to run whilst the app is running. Default is False. By default pygame does not allow the screensaver during game play.", "Note", "Some platforms do not have a screensaver or support disabling the screensaver. Please see pygame.display.set_allow_screensaver() for caveats with screensaver support.", "New in pygame 2.0.0."]}, {"name": "display.get_caption", "path": "ref/display#pygame.display.get_caption", "type": "pygame.display", "text": ["Returns the title and icontitle for the display Surface. These will often be the same value."]}, {"name": "display.get_driver", "path": "ref/display#pygame.display.get_driver", "type": "pygame.display", "text": ["Pygame chooses one of many available display backends when it is initialized. This returns the internal name used for the display backend. This can be used to provide limited information about what display capabilities might be accelerated. See the SDL_VIDEODRIVER flags in pygame.display.set_mode() to see some of the common options."]}, {"name": "display.get_init", "path": "ref/display#pygame.display.get_init", "type": "pygame.display", "text": ["Returns True if the pygame.display module is currently initialized."]}, {"name": "display.get_num_displays", "path": "ref/display#pygame.display.get_num_displays", "type": "pygame.display", "text": ["Returns the number of available displays. This is always 1 if pygame.get_sdl_version() returns a major version number below 2.", "New in pygame 1.9.5."]}, {"name": "display.get_surface", "path": "ref/display#pygame.display.get_surface", "type": "pygame.display", "text": ["Return a reference to the currently set display Surface. If no display mode has been set this will return None."]}, {"name": "display.get_window_size", "path": "ref/display#pygame.display.get_window_size", "type": "pygame.display", "text": ["Returns the size of the window initialized with pygame.display.set_mode(). This may differ from the size of the display surface if SCALED is used.", "New in pygame 2.0.0."]}, {"name": "display.get_wm_info", "path": "ref/display#pygame.display.get_wm_info", "type": "pygame.display", "text": ["Creates a dictionary filled with string keys. The strings and values are arbitrarily created by the system. Some systems may have no information and an empty dictionary will be returned. Most platforms will return a \"window\" key with the value set to the system id for the current display.", "New in pygame 1.7.1."]}, {"name": "display.gl_get_attribute", "path": "ref/display#pygame.display.gl_get_attribute", "type": "pygame.display", "text": ["After calling pygame.display.set_mode() with the pygame.OPENGL flag, it is a good idea to check the value of any requested OpenGL attributes. See pygame.display.gl_set_attribute() for a list of valid flags."]}, {"name": "display.gl_set_attribute", "path": "ref/display#pygame.display.gl_set_attribute", "type": "pygame.display", "text": ["When calling pygame.display.set_mode() with the pygame.OPENGL flag, Pygame automatically handles setting the OpenGL attributes like color and double-buffering. OpenGL offers several other attributes you may want control over. Pass one of these attributes as the flag, and its appropriate value. This must be called before pygame.display.set_mode().", "Many settings are the requested minimum. Creating a window with an OpenGL context will fail if OpenGL cannot provide the requested attribute, but it may for example give you a stencil buffer even if you request none, or it may give you a larger one than requested.", "The OPENGL flags are:", "GL_MULTISAMPLEBUFFERS", "Whether to enable multisampling anti-aliasing. Defaults to 0 (disabled).", "Set GL_MULTISAMPLESAMPLES to a value above 0 to control the amount of anti-aliasing. A typical value is 2 or 3.", "GL_STENCIL_SIZE", "GL_DEPTH_SIZE", "GL_STEREO", "GL_BUFFER_SIZE", "New in pygame 2.0.0: Additional attributes:", "GL_CONTEXT_PROFILE_MASK", "Sets the OpenGL profile to one of these values:", "GL_ACCELERATED_VISUAL"]}, {"name": "display.iconify", "path": "ref/display#pygame.display.iconify", "type": "pygame.display", "text": ["Request the window for the display surface be iconified or hidden. Not all systems and displays support an iconified display. The function will return True if successful.", "When the display is iconified pygame.display.get_active() will return False. The event queue should receive an ACTIVEEVENT event when the window has been iconified. Additionally, the event queue also recieves a WINDOWEVENT_MINIMIZED event when the window has been iconified on pygame 2."]}, {"name": "display.Info", "path": "ref/display#pygame.display.Info", "type": "pygame.display", "text": ["Creates a simple object containing several attributes to describe the current graphics environment. If this is called before pygame.display.set_mode() some platforms can provide information about the default display mode. This can also be called after setting the display mode to verify specific display options were satisfied. The VidInfo object has several attributes:"]}, {"name": "display.init", "path": "ref/display#pygame.display.init", "type": "pygame.display", "text": ["Initializes the pygame display module. The display module cannot do anything until it is initialized. This is usually handled for you automatically when you call the higher level pygame.init().", "Pygame will select from one of several internal display backends when it is initialized. The display mode will be chosen depending on the platform and permissions of current user. Before the display module is initialized the environment variable SDL_VIDEODRIVER can be set to control which backend is used. The systems with multiple choices are listed here.", "On some platforms it is possible to embed the pygame display into an already existing window. To do this, the environment variable SDL_WINDOWID must be set to a string containing the window id or handle. The environment variable is checked when the pygame display is initialized. Be aware that there can be many strange side effects when running in an embedded display.", "It is harmless to call this more than once, repeated calls have no effect."]}, {"name": "display.list_modes", "path": "ref/display#pygame.display.list_modes", "type": "pygame.display", "text": ["This function returns a list of possible sizes for a specified color depth. The return value will be an empty list if no display modes are available with the given arguments. A return value of -1 means that any requested size should work (this is likely the case for windowed modes). Mode sizes are sorted from biggest to smallest.", "If depth is 0, the current/best color depth for the display is used. The flags defaults to pygame.FULLSCREEN, but you may need to add additional flags for specific fullscreen modes.", "The display index 0 means the default display is used.", "Changed in pygame 1.9.5: display argument added"]}, {"name": "display.mode_ok", "path": "ref/display#pygame.display.mode_ok", "type": "pygame.display", "text": ["This function uses the same arguments as pygame.display.set_mode(). It is used to determine if a requested display mode is available. It will return 0 if the display mode cannot be set. Otherwise it will return a pixel depth that best matches the display asked for.", "Usually the depth argument is not passed, but some platforms can support multiple display depths. If passed it will hint to which depth is a better match.", "The most useful flags to pass will be pygame.HWSURFACE, pygame.DOUBLEBUF, and maybe pygame.FULLSCREEN. The function will return 0 if these display flags cannot be set.", "The display index 0 means the default display is used.", "Changed in pygame 1.9.5: display argument added"]}, {"name": "display.quit", "path": "ref/display#pygame.display.quit", "type": "pygame.display", "text": ["This will shut down the entire display module. This means any active displays will be closed. This will also be handled automatically when the program exits.", "It is harmless to call this more than once, repeated calls have no effect."]}, {"name": "display.set_allow_screensaver", "path": "ref/display#pygame.display.set_allow_screensaver", "type": "pygame.display", "text": ["Change whether screensavers should be allowed whilst the app is running. The default is False. By default pygame does not allow the screensaver during game play.", "If the screensaver has been disallowed due to this function, it will automatically be allowed to run when pygame.quit() is called.", "It is possible to influence the default value via the environment variable SDL_HINT_VIDEO_ALLOW_SCREENSAVER, which can be set to either 0 (disable) or 1 (enable).", "Note", "Disabling screensaver is subject to platform support. When platform support is absent, this function will silently appear to work even though the screensaver state is unchanged. The lack of feedback is due to SDL not providing any supported method for determining whether it supports changing the screensaver state. SDL_HINT_VIDEO_ALLOW_SCREENSAVER is available in SDL 2.0.2 or later. SDL1.2 does not implement this.", "New in pygame 2.0.0."]}, {"name": "display.set_caption", "path": "ref/display#pygame.display.set_caption", "type": "pygame.display", "text": ["If the display has a window title, this function will change the name on the window. Some systems support an alternate shorter title to be used for minimized displays."]}, {"name": "display.set_gamma", "path": "ref/display#pygame.display.set_gamma", "type": "pygame.display", "text": ["Set the red, green, and blue gamma values on the display hardware. If the green and blue arguments are not passed, they will both be the same as red. Not all systems and hardware support gamma ramps, if the function succeeds it will return True.", "A gamma value of 1.0 creates a linear color table. Lower values will darken the display and higher values will brighten."]}, {"name": "display.set_gamma_ramp", "path": "ref/display#pygame.display.set_gamma_ramp", "type": "pygame.display", "text": ["Set the red, green, and blue gamma ramps with an explicit lookup table. Each argument should be sequence of 256 integers. The integers should range between 0 and 0xffff. Not all systems and hardware support gamma ramps, if the function succeeds it will return True."]}, {"name": "display.set_icon", "path": "ref/display#pygame.display.set_icon", "type": "pygame.display", "text": ["Sets the runtime icon the system will use to represent the display window. All windows default to a simple pygame logo for the window icon.", "You can pass any surface, but most systems want a smaller image around 32x32. The image can have colorkey transparency which will be passed to the system.", "Some systems do not allow the window icon to change after it has been shown. This function can be called before pygame.display.set_mode() to create the icon before the display mode is set."]}, {"name": "display.set_mode", "path": "ref/display#pygame.display.set_mode", "type": "pygame.display", "text": ["This function will create a display Surface. The arguments passed in are requests for a display type. The actual created display will be the best possible match supported by the system.", "The size argument is a pair of numbers representing the width and height. The flags argument is a collection of additional options. The depth argument represents the number of bits to use for color.", "The Surface that gets returned can be drawn to like a regular Surface but changes will eventually be seen on the monitor.", "If no size is passed or is set to (0, 0) and pygame uses SDL version 1.2.10 or above, the created Surface will have the same size as the current screen resolution. If only the width or height are set to 0, the Surface will have the same width or height as the screen resolution. Using a SDL version prior to 1.2.10 will raise an exception.", "It is usually best to not pass the depth argument. It will default to the best and fastest color depth for the system. If your game requires a specific color format you can control the depth with this argument. Pygame will emulate an unavailable color depth which can be slow.", "When requesting fullscreen display modes, sometimes an exact match for the requested size cannot be made. In these situations pygame will select the closest compatible match. The returned surface will still always match the requested size.", "On high resolution displays(4k, 1080p) and tiny graphics games (640x480) show up very small so that they are unplayable. SCALED scales up the window for you. The game thinks it's a 640x480 window, but really it can be bigger. Mouse events are scaled for you, so your game doesn't need to do it. Note that SCALED is considered an experimental API and may change in future releases.", "The flags argument controls which type of display you want. There are several to choose from, and you can even combine multiple types using the bitwise or operator, (the pipe \"|\" character). If you pass 0 or no flags argument it will default to a software driven window. Here are the display flags you will want to choose from:", "Pygame 2 has the following additional flags available.", "New in pygame 2.0.0: SCALED, SHOWN and HIDDEN", "By setting the vsync parameter to 1, it is possible to get a display with vertical sync, but you are not guaranteed to get one. The request only works at all for calls to set_mode() with the pygame.OPENGL or pygame.SCALED flags set, and is still not guaranteed even with one of those set. What you get depends on the hardware and driver configuration of the system pygame is running on. Here is an example usage of a call to set_mode() that may give you a display with vsync:", "Vsync behaviour is considered experimental, and may change in future releases.", "New in pygame 2.0.0: vsync", "Basic example:", "The display index 0 means the default display is used.", "Changed in pygame 1.9.5: display argument added"]}, {"name": "display.set_palette", "path": "ref/display#pygame.display.set_palette", "type": "pygame.display", "text": ["This will change the video display color palette for 8-bit displays. This does not change the palette for the actual display Surface, only the palette that is used to display the Surface. If no palette argument is passed, the system default palette will be restored. The palette is a sequence of RGB triplets."]}, {"name": "display.toggle_fullscreen", "path": "ref/display#pygame.display.toggle_fullscreen", "type": "pygame.display", "text": ["Switches the display window between windowed and fullscreen modes. Display driver support is not great when using pygame 1, but with pygame 2 it is the most reliable method to switch to and from fullscreen.", "Supported display drivers in pygame 1:", "Supported display drivers in pygame 2:"]}, {"name": "display.update", "path": "ref/display#pygame.display.update", "type": "pygame.display", "text": ["This function is like an optimized version of pygame.display.flip() for software displays. It allows only a portion of the screen to updated, instead of the entire area. If no argument is passed it updates the entire Surface area like pygame.display.flip().", "You can pass the function a single rectangle, or a sequence of rectangles. It is more efficient to pass many rectangles at once than to call update multiple times with single or a partial list of rectangles. If passing a sequence of rectangles it is safe to include None values in the list, which will be skipped.", "This call cannot be used on pygame.OPENGL displays and will generate an exception."]}, {"name": "draw", "path": "ref/draw", "type": "pygame.draw", "text": ["Draw several simple shapes to a surface. These functions will work for rendering to any format of surface. Rendering to hardware surfaces will be slower than regular software surfaces.", "Most of the functions take a width argument to represent the size of stroke (thickness) around the edge of the shape. If a width of 0 is passed the shape will be filled (solid).", "All the drawing functions respect the clip area for the surface and will be constrained to that area. The functions return a rectangle representing the bounding area of changed pixels. This bounding rectangle is the 'minimum' bounding box that encloses the affected area.", "All the drawing functions accept a color argument that can be one of the following formats:", "A color's alpha value will be written directly into the surface (if the surface contains pixel alphas), but the draw function will not draw transparently.", "These functions temporarily lock the surface they are operating on. Many sequential drawing calls can be sped up by locking and unlocking the surface object around the draw calls (see pygame.Surface.lock() and pygame.Surface.unlock()).", "Note", "See the pygame.gfxdraw module for alternative draw methods.", "Draws a rectangle on the given surface.", "(optional) used for line thickness or to indicate that the rectangle is to be filled (not to be confused with the width value of the rect parameter)", "Note", "When using width values > 1, the edge lines will grow outside the original boundary of the rect. For more details on how the thickness for edge lines grow, refer to the width notes of the pygame.draw.line() function.", "(optional) used for setting the value of bottom right border. If you don't set this value, it will use the border_radius value.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given rect parameter and its width and height will be 0", "Rect", "Note", "The pygame.Surface.fill() method works just as well for drawing filled rectangles and can be hardware accelerated on some platforms with both software and hardware display modes.", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Changed in pygame 2.0.0.dev8: Added support for border radius.", "Draws a polygon on the given surface.", "(optional) used for line thickness or to indicate that the polygon is to be filled", "Note", "When using width values > 1, the edge lines will grow outside the original boundary of the polygon. For more details on how the thickness for edge lines grow, refer to the width notes of the pygame.draw.line() function.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the points parameter (float values will be truncated) and its width and height will be 0", "Rect", "Note", "For an aapolygon, use aalines() with closed=True.", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws a circle on the given surface.", "(optional) used for line thickness or to indicate that the circle is to be filled", "Note", "When using width values > 1, the edge lines will only grow inward.", "(optional) if this is set to True then the bottom right corner of the circle will be drawn", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the center parameter value (float values will be truncated) and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments. Nothing is drawn when the radius is 0 (a pixel at the center coordinates used to be drawn when the radius equaled 0). Floats, and Vector2 are accepted for the center param. The drawing algorithm was improved to look more like a circle.", "Changed in pygame 2.0.0.dev8: Added support for drawing circle quadrants.", "Draws an ellipse on the given surface.", "(optional) used for line thickness or to indicate that the ellipse is to be filled (not to be confused with the width value of the rect parameter)", "Note", "When using width values > 1, the edge lines will only grow inward from the original boundary of the rect parameter.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given rect parameter and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws an elliptical arc on the given surface.", "The two angle arguments are given in radians and indicate the start and stop positions of the arc. The arc is drawn in a counterclockwise direction from the start_angle to the stop_angle.", "stop angle of the arc in radians", "(optional) used for line thickness (not to be confused with the width value of the rect parameter)", "Note", "When using width values > 1, the edge lines will only grow inward from the original boundary of the rect parameter.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given rect parameter and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws a straight line on the given surface. There are no endcaps. For thick lines the ends are squared off.", "(optional) used for line thickness", "Note", "When using width values > 1, lines will grow as follows.", "For odd width values, the thickness of each line grows with the original line being in the center.", "For even width values, the thickness of each line grows with the original line being offset from the center (as there is no exact center line drawn). As a result, lines with a slope < 1 (horizontal-ish) will have 1 more pixel of thickness below the original line (in the y direction). Lines with a slope >= 1 (vertical-ish) will have 1 more pixel of thickness to the right of the original line (in the x direction).", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the start_pos parameter value (float values will be truncated) and its width and height will be 0", "Rect", "TypeError -- if start_pos or end_pos is not a sequence of two numbers", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws a sequence of contiguous straight lines on the given surface. There are no endcaps or miter joints. For thick lines the ends are squared off. Drawing thick lines with sharp corners can have undesired looking results.", "(optional) used for line thickness", "Note", "When using width values > 1 refer to the width notes of line() for details on how thick lines grow.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the points parameter (float values will be truncated) and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws a straight antialiased line on the given surface.", "The line has a thickness of one pixel and the endpoints have a height and width of one pixel each.", "If both endpoints are equal, only a single pixel is drawn (after rounding floats to nearest integer).", "Otherwise if the line is not steep (i.e. if the length along the x-axis is greater than the height along the y-axis):", "For each endpoint:", "If x, the endpoint's x-coordinate, is a whole number find which pixels would be covered by it and draw them.", "Otherwise:", "Calculate the position of the nearest point with a whole number for it's x-coordinate, when extending the line past the endpoint.", "Find which pixels would be covered and how much by that point.", "If the endpoint is the left one, multiply the coverage by (1 - the decimal part of x).", "Otherwise multiply the coverage by the decimal part of x.", "Then draw those pixels.", "Then for each point between the endpoints, along the line, whose x-coordinate is a whole number:", "Find which pixels would be covered and how much by that point and draw them.", "Otherwise do the same for steep lines as for non-steep lines except along the y-axis instead of the x-axis (using y instead of x, top instead of left and bottom instead of right).", "Note", "Regarding float values for coordinates, a point with coordinate consisting of two whole numbers is considered being right in the center of said pixel (and having a height and width of 1 pixel would therefore completely cover it), while a point with coordinate where one (or both) of the numbers have non-zero decimal parts would be partially covering two (or four if both numbers have decimal parts) adjacent pixels, e.g. the point (1.4, 2) covers 60% of the pixel (1, 2) and 40% of the pixel (2,2).", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the start_pos parameter value (float values will be truncated) and its width and height will be 0", "Rect", "TypeError -- if start_pos or end_pos is not a sequence of two numbers", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws a sequence of contiguous straight antialiased lines on the given surface.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the points parameter (float values will be truncated) and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Example code for draw module."]}, {"name": "draw.aaline", "path": "ref/draw#pygame.draw.aaline", "type": "pygame.draw", "text": ["Draws a straight antialiased line on the given surface.", "The line has a thickness of one pixel and the endpoints have a height and width of one pixel each.", "If both endpoints are equal, only a single pixel is drawn (after rounding floats to nearest integer).", "Otherwise if the line is not steep (i.e. if the length along the x-axis is greater than the height along the y-axis):", "For each endpoint:", "If x, the endpoint's x-coordinate, is a whole number find which pixels would be covered by it and draw them.", "Otherwise:", "Calculate the position of the nearest point with a whole number for it's x-coordinate, when extending the line past the endpoint.", "Find which pixels would be covered and how much by that point.", "If the endpoint is the left one, multiply the coverage by (1 - the decimal part of x).", "Otherwise multiply the coverage by the decimal part of x.", "Then draw those pixels.", "Then for each point between the endpoints, along the line, whose x-coordinate is a whole number:", "Find which pixels would be covered and how much by that point and draw them.", "Otherwise do the same for steep lines as for non-steep lines except along the y-axis instead of the x-axis (using y instead of x, top instead of left and bottom instead of right).", "Note", "Regarding float values for coordinates, a point with coordinate consisting of two whole numbers is considered being right in the center of said pixel (and having a height and width of 1 pixel would therefore completely cover it), while a point with coordinate where one (or both) of the numbers have non-zero decimal parts would be partially covering two (or four if both numbers have decimal parts) adjacent pixels, e.g. the point (1.4, 2) covers 60% of the pixel (1, 2) and 40% of the pixel (2,2).", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the start_pos parameter value (float values will be truncated) and its width and height will be 0", "Rect", "TypeError -- if start_pos or end_pos is not a sequence of two numbers", "Changed in pygame 2.0.0: Added support for keyword arguments."]}, {"name": "draw.aalines", "path": "ref/draw#pygame.draw.aalines", "type": "pygame.draw", "text": ["Draws a sequence of contiguous straight antialiased lines on the given surface.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the points parameter (float values will be truncated) and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments."]}, {"name": "draw.arc", "path": "ref/draw#pygame.draw.arc", "type": "pygame.draw", "text": ["Draws an elliptical arc on the given surface.", "The two angle arguments are given in radians and indicate the start and stop positions of the arc. The arc is drawn in a counterclockwise direction from the start_angle to the stop_angle.", "stop angle of the arc in radians", "(optional) used for line thickness (not to be confused with the width value of the rect parameter)", "Note", "When using width values > 1, the edge lines will only grow inward from the original boundary of the rect parameter.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given rect parameter and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments."]}, {"name": "draw.circle", "path": "ref/draw#pygame.draw.circle", "type": "pygame.draw", "text": ["Draws a circle on the given surface.", "(optional) used for line thickness or to indicate that the circle is to be filled", "Note", "When using width values > 1, the edge lines will only grow inward.", "(optional) if this is set to True then the bottom right corner of the circle will be drawn", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the center parameter value (float values will be truncated) and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments. Nothing is drawn when the radius is 0 (a pixel at the center coordinates used to be drawn when the radius equaled 0). Floats, and Vector2 are accepted for the center param. The drawing algorithm was improved to look more like a circle.", "Changed in pygame 2.0.0.dev8: Added support for drawing circle quadrants."]}, {"name": "draw.ellipse", "path": "ref/draw#pygame.draw.ellipse", "type": "pygame.draw", "text": ["Draws an ellipse on the given surface.", "(optional) used for line thickness or to indicate that the ellipse is to be filled (not to be confused with the width value of the rect parameter)", "Note", "When using width values > 1, the edge lines will only grow inward from the original boundary of the rect parameter.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given rect parameter and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments."]}, {"name": "draw.line", "path": "ref/draw#pygame.draw.line", "type": "pygame.draw", "text": ["Draws a straight line on the given surface. There are no endcaps. For thick lines the ends are squared off.", "(optional) used for line thickness", "Note", "When using width values > 1, lines will grow as follows.", "For odd width values, the thickness of each line grows with the original line being in the center.", "For even width values, the thickness of each line grows with the original line being offset from the center (as there is no exact center line drawn). As a result, lines with a slope < 1 (horizontal-ish) will have 1 more pixel of thickness below the original line (in the y direction). Lines with a slope >= 1 (vertical-ish) will have 1 more pixel of thickness to the right of the original line (in the x direction).", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the start_pos parameter value (float values will be truncated) and its width and height will be 0", "Rect", "TypeError -- if start_pos or end_pos is not a sequence of two numbers", "Changed in pygame 2.0.0: Added support for keyword arguments."]}, {"name": "draw.lines", "path": "ref/draw#pygame.draw.lines", "type": "pygame.draw", "text": ["Draws a sequence of contiguous straight lines on the given surface. There are no endcaps or miter joints. For thick lines the ends are squared off. Drawing thick lines with sharp corners can have undesired looking results.", "(optional) used for line thickness", "Note", "When using width values > 1 refer to the width notes of line() for details on how thick lines grow.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the points parameter (float values will be truncated) and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments."]}, {"name": "draw.polygon", "path": "ref/draw#pygame.draw.polygon", "type": "pygame.draw", "text": ["Draws a polygon on the given surface.", "(optional) used for line thickness or to indicate that the polygon is to be filled", "Note", "When using width values > 1, the edge lines will grow outside the original boundary of the polygon. For more details on how the thickness for edge lines grow, refer to the width notes of the pygame.draw.line() function.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the points parameter (float values will be truncated) and its width and height will be 0", "Rect", "Note", "For an aapolygon, use aalines() with closed=True.", "Changed in pygame 2.0.0: Added support for keyword arguments."]}, {"name": "draw.rect", "path": "ref/draw#pygame.draw.rect", "type": "pygame.draw", "text": ["Draws a rectangle on the given surface.", "(optional) used for line thickness or to indicate that the rectangle is to be filled (not to be confused with the width value of the rect parameter)", "Note", "When using width values > 1, the edge lines will grow outside the original boundary of the rect. For more details on how the thickness for edge lines grow, refer to the width notes of the pygame.draw.line() function.", "(optional) used for setting the value of bottom right border. If you don't set this value, it will use the border_radius value.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given rect parameter and its width and height will be 0", "Rect", "Note", "The pygame.Surface.fill() method works just as well for drawing filled rectangles and can be hardware accelerated on some platforms with both software and hardware display modes.", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Changed in pygame 2.0.0.dev8: Added support for border radius."]}, {"name": "encode_file_path", "path": "ref/pygame#pygame.encode_file_path", "type": "pygame", "text": ["obj: If Unicode, encode; if bytes, return unaltered; if anything else, return None; if not given, raise SyntaxError.", "etype (exception type): If given, the exception type to raise for an encoding error. The default is UnicodeEncodeError, as returned by PyUnicode_AsEncodedString().", "This function is used to encode file paths in pygame. Encoding is to the codec as returned by sys.getfilesystemencoding(). Keyword arguments are supported.", "New in pygame 1.9.2: (primarily for use in unit tests)"]}, {"name": "encode_string", "path": "ref/pygame#pygame.encode_string", "type": "pygame", "text": ["obj: If Unicode, encode; if bytes, return unaltered; if anything else, return None; if not given, raise SyntaxError.", "encoding (string): If present, encoding to use. The default is 'unicode_escape'.", "errors (string): If given, how to handle unencodable characters. The default is 'backslashreplace'.", "etype (exception type): If given, the exception type to raise for an encoding error. The default is UnicodeEncodeError, as returned by PyUnicode_AsEncodedString(). For the default encoding and errors values there should be no encoding errors.", "This function is used in encoding file paths. Keyword arguments are supported.", "New in pygame 1.9.2: (primarily for use in unit tests)"]}, {"name": "error", "path": "ref/pygame#pygame.error", "type": "pygame", "text": ["This exception is raised whenever a pygame or SDL operation fails. You can catch any anticipated problems and deal with the error. The exception is always raised with a descriptive message about the problem.", "Derived from the RuntimeError exception, which can also be used to catch these raised errors."]}, {"name": "event", "path": "ref/event", "type": "pygame.event", "text": ["Pygame handles all its event messaging through an event queue. The routines in this module help you manage that event queue. The input queue is heavily dependent on the pygame.display module. If the display has not been initialized and a video mode not set, the event queue may not work properly. The event subsystem should be called from the main thread. If you want to post events into the queue from other threads, please use the pygame.fastevent module.", "The event queue has an upper limit on the number of events it can hold (128 for standard SDL 1.2). When the queue becomes full new events are quietly dropped. To prevent lost events, especially input events which signal a quit command, your program must handle events every frame (with pygame.event.get(), pygame.event.pump(), pygame.event.wait(), pygame.event.peek() or pygame.event.clear()) and process them. Not handling events may cause your system to decide your program has locked up. To speed up queue processing use pygame.event.set_blocked() to limit which events get queued.", "To get the state of various input devices, you can forego the event queue and access the input devices directly with their appropriate modules: pygame.mouse, pygame.key, and pygame.joystick. If you use this method, remember that pygame requires some form of communication with the system window manager and other parts of the platform. To keep pygame in sync with the system, you will need to call pygame.event.pump() to keep everything current. Usually, this should be called once per game loop. Note: Joysticks will not send any events until the device has been initialized.", "The event queue contains pygame.event.EventType event objects. There are a variety of ways to access the queued events, from simply checking for the existence of events, to grabbing them directly off the stack. The event queue also offers some simple filtering which can slightly help performance by blocking certain event types from the queue. Use pygame.event.set_allowed() and pygame.event.set_blocked() to change this filtering. By default, all event types can be placed on the queue.", "All pygame.event.EventType instances contain an event type identifier and attributes specific to that event type. The event type identifier is accessible as the pygame.event.EventType.type property. Any of the event specific attributes can be accessed through the pygame.event.EventType.__dict__ attribute or directly as an attribute of the event object (as member lookups are passed through to the object's dictionary values). The event object has no method functions. Users can create their own new events with the pygame.event.Event() function.", "The event type identifier is in between the values of NOEVENT and NUMEVENTS. User defined events should have a value in the inclusive range of USEREVENT to NUMEVENTS - 1. It is recommended all user events follow this system.", "Events support equality and inequality comparisons. Two events are equal if they are the same type and have identical attribute values.", "While debugging and experimenting, you can print an event object for a quick display of its type and members. The function pygame.event.event_name() can be used to get a string representing the name of the event type.", "Events that come from the system will have a guaranteed set of member attributes based on the type. The following is a list event types with their specific attributes.", "Changed in pygame 2.0.0: The joy attribute was deprecated, instance_id was added.", "You can also find a list of constants for keyboard keys here.", "On MacOSX when a file is opened using a pygame application, a USEREVENT with its code attribute set to pygame.USEREVENT_DROPFILE is generated. There is an additional attribute called filename where the name of the file being accessed is stored.", "New in pygame 1.9.2.", "When compiled with SDL2, pygame has these additional events and their attributes.", "New in pygame 1.9.5.", "pygame can recognize text or files dropped in its window. If a file is dropped, file will be its path. The DROPTEXT event is only supported on X11.", "New in pygame 2.0.0.", "Events reserved for pygame.midi use.", "New in pygame 2.0.0.", "SDL2 supports controller hotplugging:", "Also in this version, instance_id attributes were added to joystick events, and the joy attribute was deprecated.", "New in pygame 2.0.0.", "For each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system. If you are not using other event functions in your game, you should call pygame.event.pump() to allow pygame to handle internal actions.", "This function is not necessary if your program is consistently processing events on the queue through the other pygame.event functions.", "There are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.", "Caution", "This function should only be called in the thread that initialized pygame.display.", "This will get all the messages and remove them from the queue. If a type or sequence of types is given only those messages will be removed from the queue.", "If you are only taking specific events from the queue, be aware that the queue could eventually fill up with the events you are not interested.", "If pump is True (the default), then pygame.event.pump() will be called.", "Changed in pygame 1.9.5: Added pump argument", "Returns a single event from the queue. If the event queue is empty an event of type pygame.NOEVENT will be returned immediately. The returned event is removed from the queue.", "Caution", "This function should only be called in the thread that initialized pygame.display.", "Returns a single event from the queue. If the queue is empty this function will wait until one is created. From pygame 2.0.0, if a timeout argument is given, the function will return an event of type pygame.NOEVENT if no events enter the queue in timeout milliseconds. The event is removed from the queue once it has been returned. While the program is waiting it will sleep in an idle state. This is important for programs that want to share the system with other applications.", "Changed in pygame 2.0.0.dev13: Added timeout argument", "Caution", "This function should only be called in the thread that initialized pygame.display.", "Returns True if there are any events of the given type waiting on the queue. If a sequence of event types is passed, this will return True if any of those events are on the queue.", "If pump is True (the default), then pygame.event.pump() will be called.", "Changed in pygame 1.9.5: Added pump argument", "Removes all events from the queue. If eventtype is given, removes the given event or sequence of events. This has the same effect as pygame.event.get() except None is returned. It can be slightly more efficient when clearing a full event queue.", "If pump is True (the default), then pygame.event.pump() will be called.", "Changed in pygame 1.9.5: Added pump argument", "Returns a string representing the name (in CapWords style) of the given event type.", "\"UserEvent\" is returned for all values in the user event id range. \"Unknown\" is returned when the event type does not exist.", "The given event types are not allowed to appear on the event queue. By default all events can be placed on the queue. It is safe to disable an event type multiple times.", "If None is passed as the argument, ALL of the event types are blocked from being placed on the queue.", "The given event types are allowed to appear on the event queue. By default, all event types can be placed on the queue. It is safe to enable an event type multiple times.", "If None is passed as the argument, ALL of the event types are allowed to be placed on the queue.", "Returns True if the given event type is blocked from the queue. If a sequence of event types is passed, this will return True if any of those event types are blocked.", "When your program runs in a windowed environment, it will share the mouse and keyboard devices with other applications that have focus. If your program sets the event grab to True, it will lock all input into your program.", "It is best to not always grab the input, since it prevents the user from doing other things on their system.", "Returns True when the input events are grabbed for this application.", "Places the given event at the end of the event queue.", "This is usually used for placing pygame.USEREVENT events on the queue. Although any type of event can be placed, if using the system event types your program should be sure to create the standard attributes with appropriate values.", "If the event queue is full a pygame.error is raised.", "Caution: In pygame 2.0, calling this function with event types defined by pygame (such as pygame.KEYDOWN) may put events into the SDL2 event queue. In this case, an error may be raised if standard attributes of that event are missing or have incompatible values, and unexpected properties may be silently omitted. In order to avoid this behaviour, custom event properties should be used with custom event types. This behaviour is not guaranteed.", "Reserves a pygame.USEREVENT for a custom use.", "If too many events are made a pygame.error is raised.", "New in pygame 2.0.0.dev3.", "Creates a new event with the given type and attributes. The attributes can come from a dictionary argument with string keys or from keyword arguments.", "A pygame object that represents an event. User event instances are created with an pygame.event.Event() function call. The EventType type is not directly callable. EventType instances support attribute assignment and deletion.", "Read-only. The event type identifier. For user created event objects, this is the type argument passed to pygame.event.Event().", "For example, some predefined event identifiers are QUIT and MOUSEMOTION.", "Read-only. The event type specific attributes of an event. The dict attribute is a synonym for backward compatibility.", "For example, the attributes of a KEYDOWN event would be unicode, key, and mod", "New in pygame 1.9.2: Mutable attributes."]}, {"name": "event.clear", "path": "ref/event#pygame.event.clear", "type": "pygame.event", "text": ["Removes all events from the queue. If eventtype is given, removes the given event or sequence of events. This has the same effect as pygame.event.get() except None is returned. It can be slightly more efficient when clearing a full event queue.", "If pump is True (the default), then pygame.event.pump() will be called.", "Changed in pygame 1.9.5: Added pump argument"]}, {"name": "event.custom_type", "path": "ref/event#pygame.event.custom_type", "type": "pygame.event", "text": ["Reserves a pygame.USEREVENT for a custom use.", "If too many events are made a pygame.error is raised.", "New in pygame 2.0.0.dev3."]}, {"name": "event.Event", "path": "ref/event#pygame.event.Event", "type": "pygame.event", "text": ["Creates a new event with the given type and attributes. The attributes can come from a dictionary argument with string keys or from keyword arguments."]}, {"name": "event.event_name", "path": "ref/event#pygame.event.event_name", "type": "pygame.event", "text": ["Returns a string representing the name (in CapWords style) of the given event type.", "\"UserEvent\" is returned for all values in the user event id range. \"Unknown\" is returned when the event type does not exist."]}, {"name": "event.EventType", "path": "ref/event#pygame.event.EventType", "type": "pygame.event", "text": ["A pygame object that represents an event. User event instances are created with an pygame.event.Event() function call. The EventType type is not directly callable. EventType instances support attribute assignment and deletion.", "Read-only. The event type identifier. For user created event objects, this is the type argument passed to pygame.event.Event().", "For example, some predefined event identifiers are QUIT and MOUSEMOTION.", "Read-only. The event type specific attributes of an event. The dict attribute is a synonym for backward compatibility.", "For example, the attributes of a KEYDOWN event would be unicode, key, and mod", "New in pygame 1.9.2: Mutable attributes."]}, {"name": "event.EventType.__dict__", "path": "ref/event#pygame.event.EventType.__dict__", "type": "pygame.event", "text": ["Read-only. The event type specific attributes of an event. The dict attribute is a synonym for backward compatibility.", "For example, the attributes of a KEYDOWN event would be unicode, key, and mod"]}, {"name": "event.EventType.type", "path": "ref/event#pygame.event.EventType.type", "type": "pygame.event", "text": ["Read-only. The event type identifier. For user created event objects, this is the type argument passed to pygame.event.Event().", "For example, some predefined event identifiers are QUIT and MOUSEMOTION."]}, {"name": "event.get", "path": "ref/event#pygame.event.get", "type": "pygame.event", "text": ["This will get all the messages and remove them from the queue. If a type or sequence of types is given only those messages will be removed from the queue.", "If you are only taking specific events from the queue, be aware that the queue could eventually fill up with the events you are not interested.", "If pump is True (the default), then pygame.event.pump() will be called.", "Changed in pygame 1.9.5: Added pump argument"]}, {"name": "event.get_blocked", "path": "ref/event#pygame.event.get_blocked", "type": "pygame.event", "text": ["Returns True if the given event type is blocked from the queue. If a sequence of event types is passed, this will return True if any of those event types are blocked."]}, {"name": "event.get_grab", "path": "ref/event#pygame.event.get_grab", "type": "pygame.event", "text": ["Returns True when the input events are grabbed for this application."]}, {"name": "event.peek", "path": "ref/event#pygame.event.peek", "type": "pygame.event", "text": ["Returns True if there are any events of the given type waiting on the queue. If a sequence of event types is passed, this will return True if any of those events are on the queue.", "If pump is True (the default), then pygame.event.pump() will be called.", "Changed in pygame 1.9.5: Added pump argument"]}, {"name": "event.poll", "path": "ref/event#pygame.event.poll", "type": "pygame.event", "text": ["Returns a single event from the queue. If the event queue is empty an event of type pygame.NOEVENT will be returned immediately. The returned event is removed from the queue.", "Caution", "This function should only be called in the thread that initialized pygame.display."]}, {"name": "event.post", "path": "ref/event#pygame.event.post", "type": "pygame.event", "text": ["Places the given event at the end of the event queue.", "This is usually used for placing pygame.USEREVENT events on the queue. Although any type of event can be placed, if using the system event types your program should be sure to create the standard attributes with appropriate values.", "If the event queue is full a pygame.error is raised.", "Caution: In pygame 2.0, calling this function with event types defined by pygame (such as pygame.KEYDOWN) may put events into the SDL2 event queue. In this case, an error may be raised if standard attributes of that event are missing or have incompatible values, and unexpected properties may be silently omitted. In order to avoid this behaviour, custom event properties should be used with custom event types. This behaviour is not guaranteed."]}, {"name": "event.pump", "path": "ref/event#pygame.event.pump", "type": "pygame.event", "text": ["For each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system. If you are not using other event functions in your game, you should call pygame.event.pump() to allow pygame to handle internal actions.", "This function is not necessary if your program is consistently processing events on the queue through the other pygame.event functions.", "There are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.", "Caution", "This function should only be called in the thread that initialized pygame.display."]}, {"name": "event.set_allowed", "path": "ref/event#pygame.event.set_allowed", "type": "pygame.event", "text": ["The given event types are allowed to appear on the event queue. By default, all event types can be placed on the queue. It is safe to enable an event type multiple times.", "If None is passed as the argument, ALL of the event types are allowed to be placed on the queue."]}, {"name": "event.set_blocked", "path": "ref/event#pygame.event.set_blocked", "type": "pygame.event", "text": ["The given event types are not allowed to appear on the event queue. By default all events can be placed on the queue. It is safe to disable an event type multiple times.", "If None is passed as the argument, ALL of the event types are blocked from being placed on the queue."]}, {"name": "event.set_grab", "path": "ref/event#pygame.event.set_grab", "type": "pygame.event", "text": ["When your program runs in a windowed environment, it will share the mouse and keyboard devices with other applications that have focus. If your program sets the event grab to True, it will lock all input into your program.", "It is best to not always grab the input, since it prevents the user from doing other things on their system."]}, {"name": "event.wait", "path": "ref/event#pygame.event.wait", "type": "pygame.event", "text": ["Returns a single event from the queue. If the queue is empty this function will wait until one is created. From pygame 2.0.0, if a timeout argument is given, the function will return an event of type pygame.NOEVENT if no events enter the queue in timeout milliseconds. The event is removed from the queue once it has been returned. While the program is waiting it will sleep in an idle state. This is important for programs that want to share the system with other applications.", "Changed in pygame 2.0.0.dev13: Added timeout argument", "Caution", "This function should only be called in the thread that initialized pygame.display."]}, {"name": "examples", "path": "ref/examples", "type": "pygame.examples", "text": ["These examples should help get you started with pygame. Here is a brief rundown of what you get. The source code for these examples is in the public domain. Feel free to use for your own projects.", "There are several ways to run the examples. First they can be run as stand-alone programs. Second they can be imported and their main() methods called (see below). Finally, the easiest way is to use the python -m option:", "eg:", "Resources such as images and sounds for the examples are found in the pygame/examples/data subdirectory.", "You can find where the example files are installed by using the following commands inside the python interpreter.", "On each OS and version of Python the location will be slightly different. For example on Windows it might be in 'C:/Python26/Lib/site-packages/pygame/examples/' On Mac OS X it might be in '/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pygame/examples/'", "You can also run the examples in the python interpreter by calling each modules main() function.", "We're always on the lookout for more examples and/or example requests. Code like this is probably the best way to start getting involved with python gaming.", "examples as a package is new to pygame 1.9.0. But most of the examples came with pygame much earlier.", "This started off as a port of the SDL demonstration, Aliens. Now it has evolved into something sort of resembling fun. This demonstrates a lot of different uses of sprites and optimized blitting. Also transparency, colorkeys, fonts, sound, music, joystick, and more. (PS, my high score is 117! goodluck)", "This more closely resembles a port of the SDL Aliens demo. The code is a lot simpler, so it makes a better starting point for people looking at code for the first times. These blitting routines are not as optimized as they should/could be, but the code is easier to follow, and it plays quick enough.", "A simple starfield example. You can change the center of perspective by leftclicking the mouse on the screen.", "This simple example is derived from the line-by-line tutorial that comes with pygame. It is based on a 'popular' web banner. Note there are comments here, but for the full explanation, follow along in the tutorial.", "This is the full and final example from the Pygame Tutorial, \"How Do I Make It Move\". It creates 10 objects and animates them on the screen.", "Note it's a bit scant on error checking, but it's easy to read. :] Fortunately, this is python, and we needn't wrestle with a pile of error codes.", "Super quick, super simple application demonstrating the different ways to render fonts with the font module", "A showcase of rendering features the pygame.freetype.Font class provides in addition to those available with pygame.font.Font. It is a demonstration of direct to surface rendering, with vertical text and rotated text, opaque text and semi transparent text, horizontally stretched text and vertically stretched text.", "Demonstrates creating a vertical gradient with pixelcopy and NumPy python. The app will create a new gradient every half second and report the time needed to create and display the image. If you're not prepared to start working with the NumPy arrays, don't worry about the source for this one :]", "Eventlist is a sloppy style of pygame, but is a handy tool for learning about pygame events and input. At the top of the screen are the state of several device values, and a scrolling list of events are displayed on the bottom.", "This is not quality 'ui' code at all, but you can see how to implement very non-interactive status displays, or even a crude text output control.", "Another example filled with various surfarray effects. It requires the surfarray and image modules to be installed. This little demo can also make a good starting point for any of your own tests with surfarray", "The arraytype parameter is deprecated; passing any value besides 'numpy' will raise ValueError.", "Extremely basic testing of the mixer module. Load a sound and play it. All from the command shell, no graphics.", "If provided, use the audio file 'file_path', otherwise use a default file.", "sound.py optional command line argument: an audio file", "Uses sndarray and NumPy to create offset faded copies of the original sound. Currently it just uses hardcoded values for the number of echoes and the delay. Easy for you to recreate as needed.", "The arraytype parameter is deprecated; passing any value besides 'numpy' will raise ValueError.", "This example was created in a quick comparison with the BlitzBasic gaming language. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).", "Using PyOpenGL and pygame, this creates a spinning 3D multicolored cube.", "A simple demonstration example for the clipboard support.", "Positional arguments:", "This pygame.masks demo will display multiple moving sprites bouncing off each other. More than one sprite image can be provided.", "If run as a program then mask.py takes one or more image files as command line arguments.", "Optional keyword arguments:", "Like the testsprite.c that comes with SDL, this pygame version shows lots of sprites moving around.", "If run as a stand-alone program then no command line arguments are taken.", "arguments:", "How to use pygame with no windowing system, like on headless servers.", "Thumbnail generation with scaling is an example of what you can do with pygame.", "NOTE: the pygame scale function uses MMX/SSE if available, and can be run in multiple threads.", "If headless_no_windows_needed.py is run as a program it takes the following command line arguments:", "This is a stress test for the fastevents module.", "So far it looks like normal pygame.event is faster by up to two times. So maybe fastevent isn't fast at all.", "Tested on Windows XP SP2 Athlon, and FreeBSD.", "However... on my Debian Duron 850 machine fastevents is faster.", "Play the .pgm video file given by a path fname.", "If run as a program overlay.py takes the file name as a command line argument.", "A interactive demo that lets one choose which BLEND_xxx option to apply to a surface.", "Fake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat like blend_fill.", "Display an arrow or circle with crossbar cursor.", "Display various pixelarray generated effects.", "arguments:", "A smoothscale example that resized an image on the screen. Vertical and horizontal arrow keys are used to change the width and height of the displayed image. If the convert_alpha option is True then the source image is forced to have source alpha, whether or not the original images does. If run_speed_test is True then a background timing test is performed instead of the interactive scaler.", "If scaletest.py is run as a program then the command line options are:", "Arguments:", "The output example shows how to translate mouse clicks or computer keyboard events into midi notes. It implements a rudimentary button widget and state machine.", "The input example shows how to translate midi input to pygame events.", "With the use of a virtual midi patch cord the output and input examples can be run as separate processes and connected so the keyboard output is displayed on a console.", "new to pygame 1.9.0", "This example shows a scrollable image that has a zoom factor of eight. It uses the Surface.scroll() function to shift the image on the display surface. A clip rectangle protects a margin area. If called as a function, the example accepts an optional image file path. If run as a program it takes an optional file path command line argument. If no file is provided a default image file is used.", "When running click on a black triangle to move one pixel in the direction the triangle points. Or use the arrow keys. Close the window or press ESC to quit.", "A simple live video player, it uses the first available camera it finds on the system.", "A simple music player with window and keyboard playback control. Playback can be paused and rewound to the beginning."]}, {"name": "examples.aliens.main", "path": "ref/examples#pygame.examples.aliens.main", "type": "pygame.examples", "text": ["This started off as a port of the SDL demonstration, Aliens. Now it has evolved into something sort of resembling fun. This demonstrates a lot of different uses of sprites and optimized blitting. Also transparency, colorkeys, fonts, sound, music, joystick, and more. (PS, my high score is 117! goodluck)"]}, {"name": "examples.arraydemo.main", "path": "ref/examples#pygame.examples.arraydemo.main", "type": "pygame.examples", "text": ["Another example filled with various surfarray effects. It requires the surfarray and image modules to be installed. This little demo can also make a good starting point for any of your own tests with surfarray", "The arraytype parameter is deprecated; passing any value besides 'numpy' will raise ValueError."]}, {"name": "examples.blend_fill.main", "path": "ref/examples#pygame.examples.blend_fill.main", "type": "pygame.examples", "text": ["A interactive demo that lets one choose which BLEND_xxx option to apply to a surface."]}, {"name": "examples.blit_blends.main", "path": "ref/examples#pygame.examples.blit_blends.main", "type": "pygame.examples", "text": ["Fake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat like blend_fill."]}, {"name": "examples.camera.main", "path": "ref/examples#pygame.examples.camera.main", "type": "pygame.examples", "text": ["A simple live video player, it uses the first available camera it finds on the system."]}, {"name": "examples.chimp.main", "path": "ref/examples#pygame.examples.chimp.main", "type": "pygame.examples", "text": ["This simple example is derived from the line-by-line tutorial that comes with pygame. It is based on a 'popular' web banner. Note there are comments here, but for the full explanation, follow along in the tutorial."]}, {"name": "examples.cursors.main", "path": "ref/examples#pygame.examples.cursors.main", "type": "pygame.examples", "text": ["Display an arrow or circle with crossbar cursor."]}, {"name": "examples.eventlist.main", "path": "ref/examples#pygame.examples.eventlist.main", "type": "pygame.examples", "text": ["Eventlist is a sloppy style of pygame, but is a handy tool for learning about pygame events and input. At the top of the screen are the state of several device values, and a scrolling list of events are displayed on the bottom.", "This is not quality 'ui' code at all, but you can see how to implement very non-interactive status displays, or even a crude text output control."]}, {"name": "examples.fastevents.main", "path": "ref/examples#pygame.examples.fastevents.main", "type": "pygame.examples", "text": ["This is a stress test for the fastevents module.", "So far it looks like normal pygame.event is faster by up to two times. So maybe fastevent isn't fast at all.", "Tested on Windows XP SP2 Athlon, and FreeBSD.", "However... on my Debian Duron 850 machine fastevents is faster."]}, {"name": "examples.fonty.main", "path": "ref/examples#pygame.examples.fonty.main", "type": "pygame.examples", "text": ["Super quick, super simple application demonstrating the different ways to render fonts with the font module"]}, {"name": "examples.freetype_misc.main", "path": "ref/examples#pygame.examples.freetype_misc.main", "type": "pygame.examples", "text": ["A showcase of rendering features the pygame.freetype.Font class provides in addition to those available with pygame.font.Font. It is a demonstration of direct to surface rendering, with vertical text and rotated text, opaque text and semi transparent text, horizontally stretched text and vertically stretched text."]}, {"name": "examples.glcube.main", "path": "ref/examples#pygame.examples.glcube.main", "type": "pygame.examples", "text": ["Using PyOpenGL and pygame, this creates a spinning 3D multicolored cube."]}, {"name": "examples.headless_no_windows_needed.main", "path": "ref/examples#pygame.examples.headless_no_windows_needed.main", "type": "pygame.examples", "text": ["arguments:", "How to use pygame with no windowing system, like on headless servers.", "Thumbnail generation with scaling is an example of what you can do with pygame.", "NOTE: the pygame scale function uses MMX/SSE if available, and can be run in multiple threads.", "If headless_no_windows_needed.py is run as a program it takes the following command line arguments:"]}, {"name": "examples.liquid.main", "path": "ref/examples#pygame.examples.liquid.main", "type": "pygame.examples", "text": ["This example was created in a quick comparison with the BlitzBasic gaming language. Nonetheless, it demonstrates a quick 8-bit setup (with colormap)."]}, {"name": "examples.mask.main", "path": "ref/examples#pygame.examples.mask.main", "type": "pygame.examples", "text": ["Positional arguments:", "This pygame.masks demo will display multiple moving sprites bouncing off each other. More than one sprite image can be provided.", "If run as a program then mask.py takes one or more image files as command line arguments."]}, {"name": "examples.midi.main", "path": "ref/examples#pygame.examples.midi.main", "type": "pygame.examples", "text": ["Arguments:", "The output example shows how to translate mouse clicks or computer keyboard events into midi notes. It implements a rudimentary button widget and state machine.", "The input example shows how to translate midi input to pygame events.", "With the use of a virtual midi patch cord the output and input examples can be run as separate processes and connected so the keyboard output is displayed on a console.", "new to pygame 1.9.0"]}, {"name": "examples.moveit.main", "path": "ref/examples#pygame.examples.moveit.main", "type": "pygame.examples", "text": ["This is the full and final example from the Pygame Tutorial, \"How Do I Make It Move\". It creates 10 objects and animates them on the screen.", "Note it's a bit scant on error checking, but it's easy to read. :] Fortunately, this is python, and we needn't wrestle with a pile of error codes."]}, {"name": "examples.oldalien.main", "path": "ref/examples#pygame.examples.oldalien.main", "type": "pygame.examples", "text": ["This more closely resembles a port of the SDL Aliens demo. The code is a lot simpler, so it makes a better starting point for people looking at code for the first times. These blitting routines are not as optimized as they should/could be, but the code is easier to follow, and it plays quick enough."]}, {"name": "examples.overlay.main", "path": "ref/examples#pygame.examples.overlay.main", "type": "pygame.examples", "text": ["Play the .pgm video file given by a path fname.", "If run as a program overlay.py takes the file name as a command line argument."]}, {"name": "examples.pixelarray.main", "path": "ref/examples#pygame.examples.pixelarray.main", "type": "pygame.examples", "text": ["Display various pixelarray generated effects."]}, {"name": "examples.playmus.main", "path": "ref/examples#pygame.examples.playmus.main", "type": "pygame.examples", "text": ["A simple music player with window and keyboard playback control. Playback can be paused and rewound to the beginning."]}, {"name": "examples.scaletest.main", "path": "ref/examples#pygame.examples.scaletest.main", "type": "pygame.examples", "text": ["arguments:", "A smoothscale example that resized an image on the screen. Vertical and horizontal arrow keys are used to change the width and height of the displayed image. If the convert_alpha option is True then the source image is forced to have source alpha, whether or not the original images does. If run_speed_test is True then a background timing test is performed instead of the interactive scaler.", "If scaletest.py is run as a program then the command line options are:"]}, {"name": "examples.scrap_clipboard.main", "path": "ref/examples#pygame.examples.scrap_clipboard.main", "type": "pygame.examples", "text": ["A simple demonstration example for the clipboard support."]}, {"name": "examples.scroll.main", "path": "ref/examples#pygame.examples.scroll.main", "type": "pygame.examples", "text": ["This example shows a scrollable image that has a zoom factor of eight. It uses the Surface.scroll() function to shift the image on the display surface. A clip rectangle protects a margin area. If called as a function, the example accepts an optional image file path. If run as a program it takes an optional file path command line argument. If no file is provided a default image file is used.", "When running click on a black triangle to move one pixel in the direction the triangle points. Or use the arrow keys. Close the window or press ESC to quit."]}, {"name": "examples.sound.main", "path": "ref/examples#pygame.examples.sound.main", "type": "pygame.examples", "text": ["Extremely basic testing of the mixer module. Load a sound and play it. All from the command shell, no graphics.", "If provided, use the audio file 'file_path', otherwise use a default file.", "sound.py optional command line argument: an audio file"]}, {"name": "examples.sound_array_demos.main", "path": "ref/examples#pygame.examples.sound_array_demos.main", "type": "pygame.examples", "text": ["Uses sndarray and NumPy to create offset faded copies of the original sound. Currently it just uses hardcoded values for the number of echoes and the delay. Easy for you to recreate as needed.", "The arraytype parameter is deprecated; passing any value besides 'numpy' will raise ValueError."]}, {"name": "examples.stars.main", "path": "ref/examples#pygame.examples.stars.main", "type": "pygame.examples", "text": ["A simple starfield example. You can change the center of perspective by leftclicking the mouse on the screen."]}, {"name": "examples.testsprite.main", "path": "ref/examples#pygame.examples.testsprite.main", "type": "pygame.examples", "text": ["Optional keyword arguments:", "Like the testsprite.c that comes with SDL, this pygame version shows lots of sprites moving around.", "If run as a stand-alone program then no command line arguments are taken."]}, {"name": "examples.vgrade.main", "path": "ref/examples#pygame.examples.vgrade.main", "type": "pygame.examples", "text": ["Demonstrates creating a vertical gradient with pixelcopy and NumPy python. The app will create a new gradient every half second and report the time needed to create and display the image. If you're not prepared to start working with the NumPy arrays, don't worry about the source for this one :]"]}, {"name": "fastevent", "path": "ref/fastevent", "type": "pygame.fastevent", "text": ["pygame.fastevent is a wrapper for Bob Pendleton's fastevent library. It provides fast events for use in multithreaded environments. When using pygame.fastevent, you can not use any of the pump, wait, poll, post, get, peek, etc. functions from pygame.event, but you should use the Event objects.", "Initialize the pygame.fastevent module.", "Returns True if the pygame.fastevent module is currently initialized.", "For each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system.", "This function is not necessary if your program is consistently processing events on the queue through the other pygame.fastevent functions.", "There are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.", "Returns the current event on the queue. If there are no messages waiting on the queue, this will not return until one is available. Sometimes it is important to use this wait to get events from the queue, it will allow your application to idle when the user isn't doing anything with it.", "Returns next event on queue. If there is no event waiting on the queue, this will return an event with type NOEVENT.", "This will get all the messages and remove them from the queue.", "This will post your own event objects onto the event queue. You can post any event type you want, but some care must be taken. For example, if you post a MOUSEBUTTONDOWN event to the queue, it is likely any code receiving the event will expect the standard MOUSEBUTTONDOWN attributes to be available, like 'pos' and 'button'.", "Because pygame.fastevent.post() may have to wait for the queue to empty, you can get into a dead lock if you try to append an event on to a full queue from the thread that processes events. For that reason I do not recommend using this function in the main thread of an SDL program."]}, {"name": "fastevent.get", "path": "ref/fastevent#pygame.fastevent.get", "type": "pygame.fastevent", "text": ["This will get all the messages and remove them from the queue."]}, {"name": "fastevent.get_init", "path": "ref/fastevent#pygame.fastevent.get_init", "type": "pygame.fastevent", "text": ["Returns True if the pygame.fastevent module is currently initialized."]}, {"name": "fastevent.init", "path": "ref/fastevent#pygame.fastevent.init", "type": "pygame.fastevent", "text": ["Initialize the pygame.fastevent module."]}, {"name": "fastevent.poll", "path": "ref/fastevent#pygame.fastevent.poll", "type": "pygame.fastevent", "text": ["Returns next event on queue. If there is no event waiting on the queue, this will return an event with type NOEVENT."]}, {"name": "fastevent.post", "path": "ref/fastevent#pygame.fastevent.post", "type": "pygame.fastevent", "text": ["This will post your own event objects onto the event queue. You can post any event type you want, but some care must be taken. For example, if you post a MOUSEBUTTONDOWN event to the queue, it is likely any code receiving the event will expect the standard MOUSEBUTTONDOWN attributes to be available, like 'pos' and 'button'.", "Because pygame.fastevent.post() may have to wait for the queue to empty, you can get into a dead lock if you try to append an event on to a full queue from the thread that processes events. For that reason I do not recommend using this function in the main thread of an SDL program."]}, {"name": "fastevent.pump", "path": "ref/fastevent#pygame.fastevent.pump", "type": "pygame.fastevent", "text": ["For each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system.", "This function is not necessary if your program is consistently processing events on the queue through the other pygame.fastevent functions.", "There are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up."]}, {"name": "fastevent.wait", "path": "ref/fastevent#pygame.fastevent.wait", "type": "pygame.fastevent", "text": ["Returns the current event on the queue. If there are no messages waiting on the queue, this will not return until one is available. Sometimes it is important to use this wait to get events from the queue, it will allow your application to idle when the user isn't doing anything with it."]}, {"name": "font", "path": "ref/font", "type": "pygame.font", "text": ["The font module allows for rendering TrueType fonts into a new Surface object. It accepts any UCS-2 character ('u0001' to 'uFFFF'). This module is optional and requires SDL_ttf as a dependency. You should test that pygame.font is available and initialized before attempting to use the module.", "Most of the work done with fonts are done by using the actual Font objects. The module by itself only has routines to initialize the module and create Font objects with pygame.font.Font().", "You can load fonts from the system by using the pygame.font.SysFont() function. There are a few other functions to help lookup the system fonts.", "Pygame comes with a builtin default font. This can always be accessed by passing None as the font name.", "To use the pygame.freetype based pygame.ftfont as pygame.font define the environment variable PYGAME_FREETYPE before the first import of pygame. Module pygame.ftfont is a pygame.font compatible module that passes all but one of the font module unit tests: it does not have the UCS-2 limitation of the SDL_ttf based font module, so fails to raise an exception for a code point greater than 'uFFFF'. If pygame.freetype is unavailable then the SDL_ttf font module will be loaded instead.", "This method is called automatically by pygame.init(). It initializes the font module. The module must be initialized before any other functions will work.", "It is safe to call this function more than once.", "Manually uninitialize SDL_ttf's font system. This is called automatically by pygame.quit().", "It is safe to call this function even if font is currently not initialized.", "Test if the font module is initialized or not.", "Return the filename of the system font. This is not the full path to the file. This file can usually be found in the same directory as the font module, but it can also be bundled in separate archives.", "Returns a list of all the fonts available on the system. The names of the fonts will be set to lowercase with all spaces and punctuation removed. This works on most systems, but some will return an empty list if they cannot find fonts.", "Returns the full path to a font file on the system. If bold or italic are set to true, this will attempt to find the correct family of font.", "The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order. If none of the given names are found, None is returned.", "New in pygame 2.0.1: Accept an iterable of font names.", "Example:", "Return a new Font object that is loaded from the system fonts. The font will match the requested bold and italic flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.", "The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.", "New in pygame 2.0.1: Accept an iterable of font names.", "Load a new font from a given filename or a python file object. The size is the height of the font in pixels. If the filename is None the pygame default font will be loaded. If a font cannot be loaded from the arguments given an exception will be raised. Once the font is created the size cannot be changed.", "Font objects are mainly used to render text into new Surface objects. The render can emulate bold or italic features, but it is better to load from a font with actual italic or bold glyphs. The rendered text can be regular strings or unicode.", "Whether the font should be rendered in bold.", "When set to True, this enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic and underline modes.", "New in pygame 2.0.0.", "Whether the font should be rendered in italic.", "When set to True, this enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold and underline modes.", "New in pygame 2.0.0.", "Whether the font should be rendered in underline.", "When set to True, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold and italic modes.", "New in pygame 2.0.0.", "This creates a new Surface with the specified text rendered on it. pygame provides no way to directly draw text on an existing Surface: instead you must use Font.render() to create an image (Surface) of the text, then blit this image onto another Surface.", "The text can only be a single line: newline characters are not rendered. Null characters ('x00') raise a TypeError. Both Unicode and char (byte) strings are accepted. For Unicode strings only UCS-2 characters ('u0001' to 'uFFFF') are recognized. Anything greater raises a UnicodeError. For char strings a LATIN1 encoding is assumed. The antialias argument is a boolean: if true the characters will have smooth edges. The color argument is the color of the text [e.g.: (0,0,255) for blue]. The optional background argument is a color to use for the text background. If no background is passed the area outside the text will be transparent.", "The Surface returned will be of the dimensions required to hold the text. (the same as those returned by Font.size()). If an empty string is passed for the text, a blank surface will be returned that is zero pixel wide and the height of the font.", "Depending on the type of background and antialiasing used, this returns different types of Surfaces. For performance reasons, it is good to know what type of image will be used. If antialiasing is not used, the return image will always be an 8-bit image with a two-color palette. If the background is transparent a colorkey will be set. Antialiased images are rendered to 24-bit RGB images. If the background is transparent a pixel alpha will be included.", "Optimization: if you know that the final destination for the text (on the screen) will always have a solid background, and the text is antialiased, you can improve performance by specifying the background color. This will cause the resulting image to maintain transparency information by colorkey rather than (much less efficient) alpha values.", "If you render '\\n' an unknown char will be rendered. Usually a rectangle. Instead you need to handle new lines yourself.", "Font rendering is not thread safe: only a single thread can render text at any time.", "Returns the dimensions needed to render the text. This can be used to help determine the positioning needed for text before it is rendered. It can also be used for wordwrapping and other layout effects.", "Be aware that most fonts use kerning which adjusts the widths for specific letter pairs. For example, the width for \"ae\" will not always match the width for \"a\" + \"e\".", "When enabled, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold and italic modes.", "Note", "This is the same as the underline attribute.", "Return True when the font underline is enabled.", "Note", "This is the same as the underline attribute.", "Enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic and underline modes.", "Note", "This is the same as the bold attribute.", "Return True when the font bold rendering mode is enabled.", "Note", "This is the same as the bold attribute.", "Enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold and underline modes.", "Note", "This is the same as the italic attribute.", "The list contains tuples for each character, which contain the minimum X offset, the maximum X offset, the minimum Y offset, the maximum Y offset and the advance offset (bearing plus width) of the character. [(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy, advance), ...]. None is entered in the list for each unrecognized character.", "Return True when the font italic rendering mode is enabled.", "Note", "This is the same as the italic attribute.", "Return the height in pixels for a line of text with the font. When rendering multiple lines of text this is the recommended amount of space between lines.", "Return the height in pixels of the actual rendered text. This is the average size for each glyph in the font.", "Return the height in pixels for the font ascent. The ascent is the number of pixels from the font baseline to the top of the font.", "Return the height in pixels for the font descent. The descent is the number of pixels from the font baseline to the bottom of the font."]}, {"name": "font.Font", "path": "ref/font#pygame.font.Font", "type": "pygame.font", "text": ["Load a new font from a given filename or a python file object. The size is the height of the font in pixels. If the filename is None the pygame default font will be loaded. If a font cannot be loaded from the arguments given an exception will be raised. Once the font is created the size cannot be changed.", "Font objects are mainly used to render text into new Surface objects. The render can emulate bold or italic features, but it is better to load from a font with actual italic or bold glyphs. The rendered text can be regular strings or unicode.", "Whether the font should be rendered in bold.", "When set to True, this enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic and underline modes.", "New in pygame 2.0.0.", "Whether the font should be rendered in italic.", "When set to True, this enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold and underline modes.", "New in pygame 2.0.0.", "Whether the font should be rendered in underline.", "When set to True, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold and italic modes.", "New in pygame 2.0.0.", "This creates a new Surface with the specified text rendered on it. pygame provides no way to directly draw text on an existing Surface: instead you must use Font.render() to create an image (Surface) of the text, then blit this image onto another Surface.", "The text can only be a single line: newline characters are not rendered. Null characters ('x00') raise a TypeError. Both Unicode and char (byte) strings are accepted. For Unicode strings only UCS-2 characters ('u0001' to 'uFFFF') are recognized. Anything greater raises a UnicodeError. For char strings a LATIN1 encoding is assumed. The antialias argument is a boolean: if true the characters will have smooth edges. The color argument is the color of the text [e.g.: (0,0,255) for blue]. The optional background argument is a color to use for the text background. If no background is passed the area outside the text will be transparent.", "The Surface returned will be of the dimensions required to hold the text. (the same as those returned by Font.size()). If an empty string is passed for the text, a blank surface will be returned that is zero pixel wide and the height of the font.", "Depending on the type of background and antialiasing used, this returns different types of Surfaces. For performance reasons, it is good to know what type of image will be used. If antialiasing is not used, the return image will always be an 8-bit image with a two-color palette. If the background is transparent a colorkey will be set. Antialiased images are rendered to 24-bit RGB images. If the background is transparent a pixel alpha will be included.", "Optimization: if you know that the final destination for the text (on the screen) will always have a solid background, and the text is antialiased, you can improve performance by specifying the background color. This will cause the resulting image to maintain transparency information by colorkey rather than (much less efficient) alpha values.", "If you render '\\n' an unknown char will be rendered. Usually a rectangle. Instead you need to handle new lines yourself.", "Font rendering is not thread safe: only a single thread can render text at any time.", "Returns the dimensions needed to render the text. This can be used to help determine the positioning needed for text before it is rendered. It can also be used for wordwrapping and other layout effects.", "Be aware that most fonts use kerning which adjusts the widths for specific letter pairs. For example, the width for \"ae\" will not always match the width for \"a\" + \"e\".", "When enabled, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold and italic modes.", "Note", "This is the same as the underline attribute.", "Return True when the font underline is enabled.", "Note", "This is the same as the underline attribute.", "Enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic and underline modes.", "Note", "This is the same as the bold attribute.", "Return True when the font bold rendering mode is enabled.", "Note", "This is the same as the bold attribute.", "Enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold and underline modes.", "Note", "This is the same as the italic attribute.", "The list contains tuples for each character, which contain the minimum X offset, the maximum X offset, the minimum Y offset, the maximum Y offset and the advance offset (bearing plus width) of the character. [(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy, advance), ...]. None is entered in the list for each unrecognized character.", "Return True when the font italic rendering mode is enabled.", "Note", "This is the same as the italic attribute.", "Return the height in pixels for a line of text with the font. When rendering multiple lines of text this is the recommended amount of space between lines.", "Return the height in pixels of the actual rendered text. This is the average size for each glyph in the font.", "Return the height in pixels for the font ascent. The ascent is the number of pixels from the font baseline to the top of the font.", "Return the height in pixels for the font descent. The descent is the number of pixels from the font baseline to the bottom of the font."]}, {"name": "font.Font.bold", "path": "ref/font#pygame.font.Font.bold", "type": "pygame.font", "text": ["Whether the font should be rendered in bold.", "When set to True, this enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic and underline modes.", "New in pygame 2.0.0."]}, {"name": "font.Font.get_ascent", "path": "ref/font#pygame.font.Font.get_ascent", "type": "pygame.font", "text": ["Return the height in pixels for the font ascent. The ascent is the number of pixels from the font baseline to the top of the font."]}, {"name": "font.Font.get_bold", "path": "ref/font#pygame.font.Font.get_bold", "type": "pygame.font", "text": ["Return True when the font bold rendering mode is enabled.", "Note", "This is the same as the bold attribute."]}, {"name": "font.Font.get_descent", "path": "ref/font#pygame.font.Font.get_descent", "type": "pygame.font", "text": ["Return the height in pixels for the font descent. The descent is the number of pixels from the font baseline to the bottom of the font."]}, {"name": "font.Font.get_height", "path": "ref/font#pygame.font.Font.get_height", "type": "pygame.font", "text": ["Return the height in pixels of the actual rendered text. This is the average size for each glyph in the font."]}, {"name": "font.Font.get_italic", "path": "ref/font#pygame.font.Font.get_italic", "type": "pygame.font", "text": ["Return True when the font italic rendering mode is enabled.", "Note", "This is the same as the italic attribute."]}, {"name": "font.Font.get_linesize", "path": "ref/font#pygame.font.Font.get_linesize", "type": "pygame.font", "text": ["Return the height in pixels for a line of text with the font. When rendering multiple lines of text this is the recommended amount of space between lines."]}, {"name": "font.Font.get_underline", "path": "ref/font#pygame.font.Font.get_underline", "type": "pygame.font", "text": ["Return True when the font underline is enabled.", "Note", "This is the same as the underline attribute."]}, {"name": "font.Font.italic", "path": "ref/font#pygame.font.Font.italic", "type": "pygame.font", "text": ["Whether the font should be rendered in italic.", "When set to True, this enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold and underline modes.", "New in pygame 2.0.0."]}, {"name": "font.Font.metrics", "path": "ref/font#pygame.font.Font.metrics", "type": "pygame.font", "text": ["The list contains tuples for each character, which contain the minimum X offset, the maximum X offset, the minimum Y offset, the maximum Y offset and the advance offset (bearing plus width) of the character. [(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy, advance), ...]. None is entered in the list for each unrecognized character."]}, {"name": "font.Font.render", "path": "ref/font#pygame.font.Font.render", "type": "pygame.font", "text": ["This creates a new Surface with the specified text rendered on it. pygame provides no way to directly draw text on an existing Surface: instead you must use Font.render() to create an image (Surface) of the text, then blit this image onto another Surface.", "The text can only be a single line: newline characters are not rendered. Null characters ('x00') raise a TypeError. Both Unicode and char (byte) strings are accepted. For Unicode strings only UCS-2 characters ('u0001' to 'uFFFF') are recognized. Anything greater raises a UnicodeError. For char strings a LATIN1 encoding is assumed. The antialias argument is a boolean: if true the characters will have smooth edges. The color argument is the color of the text [e.g.: (0,0,255) for blue]. The optional background argument is a color to use for the text background. If no background is passed the area outside the text will be transparent.", "The Surface returned will be of the dimensions required to hold the text. (the same as those returned by Font.size()). If an empty string is passed for the text, a blank surface will be returned that is zero pixel wide and the height of the font.", "Depending on the type of background and antialiasing used, this returns different types of Surfaces. For performance reasons, it is good to know what type of image will be used. If antialiasing is not used, the return image will always be an 8-bit image with a two-color palette. If the background is transparent a colorkey will be set. Antialiased images are rendered to 24-bit RGB images. If the background is transparent a pixel alpha will be included.", "Optimization: if you know that the final destination for the text (on the screen) will always have a solid background, and the text is antialiased, you can improve performance by specifying the background color. This will cause the resulting image to maintain transparency information by colorkey rather than (much less efficient) alpha values.", "If you render '\\n' an unknown char will be rendered. Usually a rectangle. Instead you need to handle new lines yourself.", "Font rendering is not thread safe: only a single thread can render text at any time."]}, {"name": "font.Font.set_bold", "path": "ref/font#pygame.font.Font.set_bold", "type": "pygame.font", "text": ["Enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic and underline modes.", "Note", "This is the same as the bold attribute."]}, {"name": "font.Font.set_italic", "path": "ref/font#pygame.font.Font.set_italic", "type": "pygame.font", "text": ["Enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold and underline modes.", "Note", "This is the same as the italic attribute."]}, {"name": "font.Font.set_underline", "path": "ref/font#pygame.font.Font.set_underline", "type": "pygame.font", "text": ["When enabled, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold and italic modes.", "Note", "This is the same as the underline attribute."]}, {"name": "font.Font.size", "path": "ref/font#pygame.font.Font.size", "type": "pygame.font", "text": ["Returns the dimensions needed to render the text. This can be used to help determine the positioning needed for text before it is rendered. It can also be used for wordwrapping and other layout effects.", "Be aware that most fonts use kerning which adjusts the widths for specific letter pairs. For example, the width for \"ae\" will not always match the width for \"a\" + \"e\"."]}, {"name": "font.Font.underline", "path": "ref/font#pygame.font.Font.underline", "type": "pygame.font", "text": ["Whether the font should be rendered in underline.", "When set to True, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold and italic modes.", "New in pygame 2.0.0."]}, {"name": "font.get_default_font", "path": "ref/font#pygame.font.get_default_font", "type": "pygame.font", "text": ["Return the filename of the system font. This is not the full path to the file. This file can usually be found in the same directory as the font module, but it can also be bundled in separate archives."]}, {"name": "font.get_fonts", "path": "ref/font#pygame.font.get_fonts", "type": "pygame.font", "text": ["Returns a list of all the fonts available on the system. The names of the fonts will be set to lowercase with all spaces and punctuation removed. This works on most systems, but some will return an empty list if they cannot find fonts."]}, {"name": "font.get_init", "path": "ref/font#pygame.font.get_init", "type": "pygame.font", "text": ["Test if the font module is initialized or not."]}, {"name": "font.init", "path": "ref/font#pygame.font.init", "type": "pygame.font", "text": ["This method is called automatically by pygame.init(). It initializes the font module. The module must be initialized before any other functions will work.", "It is safe to call this function more than once."]}, {"name": "font.match_font", "path": "ref/font#pygame.font.match_font", "type": "pygame.font", "text": ["Returns the full path to a font file on the system. If bold or italic are set to true, this will attempt to find the correct family of font.", "The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order. If none of the given names are found, None is returned.", "New in pygame 2.0.1: Accept an iterable of font names.", "Example:"]}, {"name": "font.quit", "path": "ref/font#pygame.font.quit", "type": "pygame.font", "text": ["Manually uninitialize SDL_ttf's font system. This is called automatically by pygame.quit().", "It is safe to call this function even if font is currently not initialized."]}, {"name": "font.SysFont", "path": "ref/font#pygame.font.SysFont", "type": "pygame.font", "text": ["Return a new Font object that is loaded from the system fonts. The font will match the requested bold and italic flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.", "The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.", "New in pygame 2.0.1: Accept an iterable of font names."]}, {"name": "freetype", "path": "ref/freetype", "type": "pygame.freetype", "text": ["The pygame.freetype module is a replacement for pygame.font. It has all of the functionality of the original, plus many new features. Yet is has absolutely no dependencies on the SDL_ttf library. It is implemented directly on the FreeType 2 library. The pygame.freetype module is not itself backward compatible with pygame.font. Instead, use the pygame.ftfont module as a drop-in replacement for pygame.font.", "All font file formats supported by FreeType can be rendered by pygame.freetype, namely TTF, Type1, CFF, OpenType, SFNT, PCF, FNT, BDF, PFR and Type42 fonts. All glyphs having UTF-32 code points are accessible (see Font.ucs4).", "Most work on fonts is done using Font instances. The module itself only has routines for initialization and creation of Font objects. You can load fonts from the system using the SysFont() function.", "Extra support of bitmap fonts is available. Available bitmap sizes can be listed (see Font.get_sizes()). For bitmap only fonts Font can set the size for you (see the Font.size property).", "For now undefined character codes are replaced with the .notdef (not defined) character. How undefined codes are handled may become configurable in a future release.", "Pygame comes with a built-in default font. This can always be accessed by passing None as the font name to the Font constructor.", "Extra rendering features available to pygame.freetype.Font are direct to surface rendering (see Font.render_to()), character kerning (see Font.kerning), vertical layout (see Font.vertical), rotation of rendered text (see Font.rotation), and the strong style (see Font.strong). Some properties are configurable, such as strong style strength (see Font.strength) and underline positioning (see Font.underline_adjustment). Text can be positioned by the upper right corner of the text box or by the text baseline (see Font.origin). Finally, a font's vertical and horizontal size can be adjusted separately (see Font.size). The pygame.examples.freetype_misc example shows these features in use.", "The pygame package does not import freetype automatically when loaded. This module must be imported explicitly to be used.", "New in pygame 1.9.2: freetype", "Return a description of the last error which occurred in the FreeType2 library, or None if no errors have occurred.", "Returns the version of the FreeType library in use by this module.", "Note that the freetype module depends on the FreeType 2 library. It will not compile with the original FreeType 1.0. Hence, the first element of the tuple will always be \"2\".", "This function initializes the underlying FreeType library and must be called before trying to use any of the functionality of the freetype module.", "However, pygame.init() will automatically call this function if the freetype module is already imported. It is safe to call this function more than once.", "Optionally, you may specify a default cache_size for the Glyph cache: the maximum number of glyphs that will be cached at any given time by the module. Exceedingly small values will be automatically tuned for performance. Also a default pixel resolution, in dots per inch, can be given to adjust font scaling.", "This function closes the freetype module. After calling this function, you should not invoke any class, method or function related to the freetype module as they are likely to fail or might give unpredictable results. It is safe to call this function even if the module hasn't been initialized yet.", "Returns True if the pygame.freetype module is currently initialized.", "New in pygame 1.9.5.", "DEPRECATED: Returns True if the pygame.freetype module is currently initialized. Use get_init() instead.", "See pygame.freetype.init().", "Returns the default pixel size, in dots per inch, for the module. The default is 72 DPI.", "Set the default pixel size, in dots per inch, for the module. If the optional argument is omitted or zero the resolution is reset to 72 DPI.", "Return a new Font object that is loaded from the system fonts. The font will match the requested bold and italic flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.", "The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.", "New in pygame 2.0.1: Accept an iterable of font names.", "Return the filename of the default pygame font. This is not the full path to the file. The file is usually in the same directory as the font module, but can also be bundled in a separate archive.", "Argument file can be either a string representing the font's filename, a file-like object containing the font, or None; if None, a default, Pygame, font is used.", "Optionally, a size argument may be specified to set the default size in points, which determines the size of the rendered characters. The size can also be passed explicitly to each method call. Because of the way the caching system works, specifying a default size on the constructor doesn't imply a performance gain over manually passing the size on each function call. If the font is bitmap and no size is given, the default size is set to the first available size for the font.", "If the font file has more than one font, the font to load can be chosen with the index argument. An exception is raised for an out-of-range font index value.", "The optional resolution argument sets the pixel size, in dots per inch, for use in scaling glyphs for this Font instance. If 0 then the default module value, set by init(), is used. The Font object's resolution can only be changed by re-initializing the Font instance.", "The optional ucs4 argument, an integer, sets the default text translation mode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True), to treat Unicode text as UCS-4, with no surrogate pairs. See Font.ucs4.", "Read only. Returns the real (long) name of the font, as recorded in the font file.", "Read only. Returns the path of the loaded font file", "Get or set the default size for text metrics and rendering. It can be a single point size, given as a Python int or float, or a font ppem (width, height) tuple. Size values are non-negative. A zero size or width represents an undefined size. In this case the size must be given as a method argument, or an exception is raised. A zero width but non-zero height is a ValueError.", "For a scalable font, a single number value is equivalent to a tuple with width equal height. A font can be stretched vertically with height set greater than width, or horizontally with width set greater than height. For embedded bitmaps, as listed by get_sizes(), use the nominal width and height to select an available size.", "Font size differs for a non-scalable, bitmap, font. During a method call it must match one of the available sizes returned by method get_sizes(). If not, an exception is raised. If the size is a single number, the size is first matched against the point size value. If no match, then the available size with the same nominal width and height is chosen.", "Gets the final dimensions and origin, in pixels, of text using the optional size in points, style, and rotation. For other relevant render properties, and for any optional argument not given, the default values set for the Font instance are used.", "Returns a Rect instance containing the width and height of the text's bounding box and the position of the text's origin. The origin is useful in aligning separately rendered pieces of text. It gives the baseline position and bearing at the start of the text. See the render_to() method for an example.", "If text is a char (byte) string, its encoding is assumed to be LATIN1.", "Optionally, text can be None, which will return the bounding rectangle for the text passed to a previous get_rect(), render(), render_to(), render_raw(), or render_raw_to() call. See render_to() for more details.", "Returns the glyph metrics for each character in text.", "The glyph metrics are returned as a list of tuples. Each tuple gives metrics of a single character glyph. The glyph metrics are:", "The bounding box min_x, max_x, min_y, and max_y values are returned as grid-fitted pixel coordinates of type int. The advance values are float values.", "The calculations are done using the font's default size in points. Optionally you may specify another point size with the size argument.", "The metrics are adjusted for the current rotation, strong, and oblique settings.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1.", "Read only. Gets the height of the font. This is the average value of all glyphs in the font.", "Read only. Return the number of units from the font's baseline to the top of the bounding box.", "Read only. Return the height in font units for the font descent. The descent is the number of units from the font's baseline to the bottom of the bounding box.", "Return the number of units from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.", "Return the number of pixels from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.", "Returns the height of the font. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.", "Return the glyph bounding box height of the font in pixels. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.", "Returns a list of tuple records, one for each point size supported. Each tuple containing the point size, the height in pixels, width in pixels, horizontal ppem (nominal width) in fractional pixels, and vertical ppem (nominal height) in fractional pixels.", "Returns a new Surface, with the text rendered to it in the color given by 'fgcolor'. If no foreground color is given, the default foreground color, fgcolor is used. If bgcolor is given, the surface will be filled with this color. When no background color is given, the surface background is transparent, zero alpha. Normally the returned surface has a 32 bit pixel size. However, if bgcolor is None and anti-aliasing is disabled a monochrome 8 bit colorkey surface, with colorkey set for the background color, is returned.", "The return value is a tuple: the new surface and the bounding rectangle giving the size and origin of the rendered text.", "If an empty string is passed for text then the returned Rect is zero width and the height of the font.", "Optional fgcolor, style, rotation, and size arguments override the default values set for the Font instance.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1.", "Optionally, text can be None, which will render the text passed to a previous get_rect(), render(), render_to(), render_raw(), or render_raw_to() call. See render_to() for details.", "Renders the string text to the pygame.Surface surf, at position dest, a (x, y) surface coordinate pair. If either x or y is not an integer it is converted to one if possible. Any sequence where the first two items are x and y positional elements is accepted, including a Rect instance. As with render(), optional fgcolor, style, rotation, and size argument are available.", "If a background color bgcolor is given, the text bounding box is first filled with that color. The text is blitted next. Both the background fill and text rendering involve full alpha blits. That is, the alpha values of the foreground, background, and destination target surface all affect the blit.", "The return value is a rectangle giving the size and position of the rendered text within the surface.", "If an empty string is passed for text then the returned Rect is zero width and the height of the font. The rect will test False.", "Optionally, text can be set None, which will re-render text passed to a previous render_to(), get_rect(), render(), render_raw(), or render_raw_to() call. Primarily, this feature is an aid to using render_to() in combination with get_rect(). An example:", "When render_to() is called with the same font properties \u2015 size, style, strength, wide, antialiased, vertical, rotation, kerning, and use_bitmap_strikes \u2015 as get_rect(), render_to() will use the layout calculated by get_rect(). Otherwise, render_to() will recalculate the layout if called with a text string or one of the above properties has changed after the get_rect() call.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1.", "Like render() but with the pixels returned as a byte string of 8-bit gray-scale values. The foreground color is 255, the background 0, useful as an alpha mask for a foreground pattern.", "Render to an array object exposing an array struct interface. The array must be two dimensional with integer items. The default dest value, None, is equivalent to position (0, 0). See render_to(). As with the other render methods, text can be None to render a text string passed previously to another method.", "The return value is a pygame.Rect() giving the size and position of the rendered text.", "Gets or sets the default style of the Font. This default style will be used for all text rendering and size calculations unless overridden specifically a render or get_rect() call. The style value may be a bit-wise OR of one or more of the following constants:", "These constants may be found on the FreeType constants module. Optionally, the default style can be modified or obtained accessing the individual style attributes (underline, oblique, strong).", "The STYLE_OBLIQUE and STYLE_STRONG styles are for scalable fonts only. An attempt to set either for a bitmap font raises an AttributeError. An attempt to set either for an inactive font, as returned by Font.__new__(), raises a RuntimeError.", "Assigning STYLE_DEFAULT to the style property leaves the property unchanged, as this property defines the default. The style property will never return STYLE_DEFAULT.", "Gets or sets whether the font will be underlined when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the 'style' parameter.", "Gets or sets whether the font will be bold when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the 'style' parameter.", "Gets or sets whether the font will be rendered as oblique. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the style parameter.", "The oblique style is only supported for scalable (outline) fonts. An attempt to set this style on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by Font.__new__(), setting this property raises a RuntimeError.", "Gets or sets whether the font will be stretched horizontally when drawing text. It produces a result similar to pygame.font.Font's bold. This style not available for rotated text.", "The amount by which a font glyph's size is enlarged for the strong or wide transformations, as a fraction of the untransformed size. For the wide style only the horizontal dimension is increased. For strong text both the horizontal and vertical dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is equivalent to the pygame.font.Font bold style. The default is 0.02778 ( 1/36 ).", "The strength style is only supported for scalable (outline) fonts. An attempt to set this property on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by Font.__new__(), assignment to this property raises a RuntimeError.", "Gets or sets a factor which, when positive, is multiplied with the font's underline offset to adjust the underline position. A negative value turns an underline into a strike-through or overline. It is multiplied with the ascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5 closely matches Tango underlining. A value of 1.0 mimics pygame.font.Font underlining.", "Read only. Returns True if the font contains fixed-width characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).", "Read only. Returns the number of point sizes for which the font contains bitmap character images. If zero then the font is not a bitmap font. A scalable font may contain pre-rendered point sizes as strikes.", "Read only. Returns True if the font contains outline glyphs. If so, the point size is not limited to available bitmap sizes.", "Some scalable fonts include embedded bitmaps for particular point sizes. This property controls whether or not those bitmap strikes are used. Set it False to disable the loading of any bitmap strike. Set it True, the default, to permit bitmap strikes for a non-rotated render with no style other than wide or underline. This property is ignored for bitmap fonts.", "See also fixed_sizes and get_sizes().", "Gets or sets the font's anti-aliasing mode. This defaults to True on all fonts, which are rendered with full 8 bit blending.", "Set to False to do monochrome rendering. This should provide a small speed gain and reduce cache memory size.", "Gets or sets the font's kerning mode. This defaults to False on all fonts, which will be rendered without kerning.", "Set to True to add kerning between character pairs, if supported by the font, when positioning glyphs.", "Gets or sets whether the characters are laid out vertically rather than horizontally. May be useful when rendering Kanji or some other vertical script.", "Set to True to switch to a vertical text layout. The default is False, place horizontally.", "Note that the Font class does not automatically determine script orientation. Vertical layout must be selected explicitly.", "Also note that several font formats (especially bitmap based ones) don't contain the necessary metrics to draw glyphs vertically, so drawing in those cases will give unspecified results.", "Gets or sets the baseline angle of the rendered text. The angle is represented as integer degrees. The default angle is 0, with horizontal text rendered along the X-axis, and vertical text along the Y-axis. A positive value rotates these axes counterclockwise that many degrees. A negative angle corresponds to a clockwise rotation. The rotation value is normalized to a value within the range 0 to 359 inclusive (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315, 720 -> 720 - (2 * 360) -> 0).", "Only scalable (outline) fonts can be rotated. An attempt to change the rotation of a bitmap font raises an AttributeError. An attempt to change the rotation of an inactive font instance, as returned by Font.__new__(), raises a RuntimeError.", "Gets or sets the default glyph rendering color. It is initially opaque black \u2015 (0, 0, 0, 255). Applies to render() and render_to().", "Gets or sets the default background rendering color. Initially it is unset and text will render with a transparent background by default. Applies to render() and render_to().", "New in pygame 2.0.0.", "If set True, render_to() and render_raw_to() will take the dest position to be that of the text origin, as opposed to the top-left corner of the bounding box. See get_rect() for details.", "If set True, then the text boundary rectangle will be inflated to match that of font.Font. Otherwise, the boundary rectangle is just large enough for the text.", "Gets or sets the decoding of Unicode text. By default, the freetype module performs UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit escape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their corresponding UTF-32 code points on Python interpreters built with a UCS-2 Unicode type (on Windows, for instance). It also means character values within the UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError. Setting ucs4 True turns surrogate pair decoding off, allowing access the full UCS-4 character range to a Python interpreter built with four-byte Unicode character support.", "Read only. Gets pixel size used in scaling font glyphs for this Font instance."]}, {"name": "freetype.Font", "path": "ref/freetype#pygame.freetype.Font", "type": "pygame.freetype", "text": ["Argument file can be either a string representing the font's filename, a file-like object containing the font, or None; if None, a default, Pygame, font is used.", "Optionally, a size argument may be specified to set the default size in points, which determines the size of the rendered characters. The size can also be passed explicitly to each method call. Because of the way the caching system works, specifying a default size on the constructor doesn't imply a performance gain over manually passing the size on each function call. If the font is bitmap and no size is given, the default size is set to the first available size for the font.", "If the font file has more than one font, the font to load can be chosen with the index argument. An exception is raised for an out-of-range font index value.", "The optional resolution argument sets the pixel size, in dots per inch, for use in scaling glyphs for this Font instance. If 0 then the default module value, set by init(), is used. The Font object's resolution can only be changed by re-initializing the Font instance.", "The optional ucs4 argument, an integer, sets the default text translation mode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True), to treat Unicode text as UCS-4, with no surrogate pairs. See Font.ucs4.", "Read only. Returns the real (long) name of the font, as recorded in the font file.", "Read only. Returns the path of the loaded font file", "Get or set the default size for text metrics and rendering. It can be a single point size, given as a Python int or float, or a font ppem (width, height) tuple. Size values are non-negative. A zero size or width represents an undefined size. In this case the size must be given as a method argument, or an exception is raised. A zero width but non-zero height is a ValueError.", "For a scalable font, a single number value is equivalent to a tuple with width equal height. A font can be stretched vertically with height set greater than width, or horizontally with width set greater than height. For embedded bitmaps, as listed by get_sizes(), use the nominal width and height to select an available size.", "Font size differs for a non-scalable, bitmap, font. During a method call it must match one of the available sizes returned by method get_sizes(). If not, an exception is raised. If the size is a single number, the size is first matched against the point size value. If no match, then the available size with the same nominal width and height is chosen.", "Gets the final dimensions and origin, in pixels, of text using the optional size in points, style, and rotation. For other relevant render properties, and for any optional argument not given, the default values set for the Font instance are used.", "Returns a Rect instance containing the width and height of the text's bounding box and the position of the text's origin. The origin is useful in aligning separately rendered pieces of text. It gives the baseline position and bearing at the start of the text. See the render_to() method for an example.", "If text is a char (byte) string, its encoding is assumed to be LATIN1.", "Optionally, text can be None, which will return the bounding rectangle for the text passed to a previous get_rect(), render(), render_to(), render_raw(), or render_raw_to() call. See render_to() for more details.", "Returns the glyph metrics for each character in text.", "The glyph metrics are returned as a list of tuples. Each tuple gives metrics of a single character glyph. The glyph metrics are:", "The bounding box min_x, max_x, min_y, and max_y values are returned as grid-fitted pixel coordinates of type int. The advance values are float values.", "The calculations are done using the font's default size in points. Optionally you may specify another point size with the size argument.", "The metrics are adjusted for the current rotation, strong, and oblique settings.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1.", "Read only. Gets the height of the font. This is the average value of all glyphs in the font.", "Read only. Return the number of units from the font's baseline to the top of the bounding box.", "Read only. Return the height in font units for the font descent. The descent is the number of units from the font's baseline to the bottom of the bounding box.", "Return the number of units from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.", "Return the number of pixels from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.", "Returns the height of the font. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.", "Return the glyph bounding box height of the font in pixels. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.", "Returns a list of tuple records, one for each point size supported. Each tuple containing the point size, the height in pixels, width in pixels, horizontal ppem (nominal width) in fractional pixels, and vertical ppem (nominal height) in fractional pixels.", "Returns a new Surface, with the text rendered to it in the color given by 'fgcolor'. If no foreground color is given, the default foreground color, fgcolor is used. If bgcolor is given, the surface will be filled with this color. When no background color is given, the surface background is transparent, zero alpha. Normally the returned surface has a 32 bit pixel size. However, if bgcolor is None and anti-aliasing is disabled a monochrome 8 bit colorkey surface, with colorkey set for the background color, is returned.", "The return value is a tuple: the new surface and the bounding rectangle giving the size and origin of the rendered text.", "If an empty string is passed for text then the returned Rect is zero width and the height of the font.", "Optional fgcolor, style, rotation, and size arguments override the default values set for the Font instance.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1.", "Optionally, text can be None, which will render the text passed to a previous get_rect(), render(), render_to(), render_raw(), or render_raw_to() call. See render_to() for details.", "Renders the string text to the pygame.Surface surf, at position dest, a (x, y) surface coordinate pair. If either x or y is not an integer it is converted to one if possible. Any sequence where the first two items are x and y positional elements is accepted, including a Rect instance. As with render(), optional fgcolor, style, rotation, and size argument are available.", "If a background color bgcolor is given, the text bounding box is first filled with that color. The text is blitted next. Both the background fill and text rendering involve full alpha blits. That is, the alpha values of the foreground, background, and destination target surface all affect the blit.", "The return value is a rectangle giving the size and position of the rendered text within the surface.", "If an empty string is passed for text then the returned Rect is zero width and the height of the font. The rect will test False.", "Optionally, text can be set None, which will re-render text passed to a previous render_to(), get_rect(), render(), render_raw(), or render_raw_to() call. Primarily, this feature is an aid to using render_to() in combination with get_rect(). An example:", "When render_to() is called with the same font properties \u2015 size, style, strength, wide, antialiased, vertical, rotation, kerning, and use_bitmap_strikes \u2015 as get_rect(), render_to() will use the layout calculated by get_rect(). Otherwise, render_to() will recalculate the layout if called with a text string or one of the above properties has changed after the get_rect() call.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1.", "Like render() but with the pixels returned as a byte string of 8-bit gray-scale values. The foreground color is 255, the background 0, useful as an alpha mask for a foreground pattern.", "Render to an array object exposing an array struct interface. The array must be two dimensional with integer items. The default dest value, None, is equivalent to position (0, 0). See render_to(). As with the other render methods, text can be None to render a text string passed previously to another method.", "The return value is a pygame.Rect() giving the size and position of the rendered text.", "Gets or sets the default style of the Font. This default style will be used for all text rendering and size calculations unless overridden specifically a render or get_rect() call. The style value may be a bit-wise OR of one or more of the following constants:", "These constants may be found on the FreeType constants module. Optionally, the default style can be modified or obtained accessing the individual style attributes (underline, oblique, strong).", "The STYLE_OBLIQUE and STYLE_STRONG styles are for scalable fonts only. An attempt to set either for a bitmap font raises an AttributeError. An attempt to set either for an inactive font, as returned by Font.__new__(), raises a RuntimeError.", "Assigning STYLE_DEFAULT to the style property leaves the property unchanged, as this property defines the default. The style property will never return STYLE_DEFAULT.", "Gets or sets whether the font will be underlined when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the 'style' parameter.", "Gets or sets whether the font will be bold when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the 'style' parameter.", "Gets or sets whether the font will be rendered as oblique. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the style parameter.", "The oblique style is only supported for scalable (outline) fonts. An attempt to set this style on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by Font.__new__(), setting this property raises a RuntimeError.", "Gets or sets whether the font will be stretched horizontally when drawing text. It produces a result similar to pygame.font.Font's bold. This style not available for rotated text.", "The amount by which a font glyph's size is enlarged for the strong or wide transformations, as a fraction of the untransformed size. For the wide style only the horizontal dimension is increased. For strong text both the horizontal and vertical dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is equivalent to the pygame.font.Font bold style. The default is 0.02778 ( 1/36 ).", "The strength style is only supported for scalable (outline) fonts. An attempt to set this property on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by Font.__new__(), assignment to this property raises a RuntimeError.", "Gets or sets a factor which, when positive, is multiplied with the font's underline offset to adjust the underline position. A negative value turns an underline into a strike-through or overline. It is multiplied with the ascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5 closely matches Tango underlining. A value of 1.0 mimics pygame.font.Font underlining.", "Read only. Returns True if the font contains fixed-width characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).", "Read only. Returns the number of point sizes for which the font contains bitmap character images. If zero then the font is not a bitmap font. A scalable font may contain pre-rendered point sizes as strikes.", "Read only. Returns True if the font contains outline glyphs. If so, the point size is not limited to available bitmap sizes.", "Some scalable fonts include embedded bitmaps for particular point sizes. This property controls whether or not those bitmap strikes are used. Set it False to disable the loading of any bitmap strike. Set it True, the default, to permit bitmap strikes for a non-rotated render with no style other than wide or underline. This property is ignored for bitmap fonts.", "See also fixed_sizes and get_sizes().", "Gets or sets the font's anti-aliasing mode. This defaults to True on all fonts, which are rendered with full 8 bit blending.", "Set to False to do monochrome rendering. This should provide a small speed gain and reduce cache memory size.", "Gets or sets the font's kerning mode. This defaults to False on all fonts, which will be rendered without kerning.", "Set to True to add kerning between character pairs, if supported by the font, when positioning glyphs.", "Gets or sets whether the characters are laid out vertically rather than horizontally. May be useful when rendering Kanji or some other vertical script.", "Set to True to switch to a vertical text layout. The default is False, place horizontally.", "Note that the Font class does not automatically determine script orientation. Vertical layout must be selected explicitly.", "Also note that several font formats (especially bitmap based ones) don't contain the necessary metrics to draw glyphs vertically, so drawing in those cases will give unspecified results.", "Gets or sets the baseline angle of the rendered text. The angle is represented as integer degrees. The default angle is 0, with horizontal text rendered along the X-axis, and vertical text along the Y-axis. A positive value rotates these axes counterclockwise that many degrees. A negative angle corresponds to a clockwise rotation. The rotation value is normalized to a value within the range 0 to 359 inclusive (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315, 720 -> 720 - (2 * 360) -> 0).", "Only scalable (outline) fonts can be rotated. An attempt to change the rotation of a bitmap font raises an AttributeError. An attempt to change the rotation of an inactive font instance, as returned by Font.__new__(), raises a RuntimeError.", "Gets or sets the default glyph rendering color. It is initially opaque black \u2015 (0, 0, 0, 255). Applies to render() and render_to().", "Gets or sets the default background rendering color. Initially it is unset and text will render with a transparent background by default. Applies to render() and render_to().", "New in pygame 2.0.0.", "If set True, render_to() and render_raw_to() will take the dest position to be that of the text origin, as opposed to the top-left corner of the bounding box. See get_rect() for details.", "If set True, then the text boundary rectangle will be inflated to match that of font.Font. Otherwise, the boundary rectangle is just large enough for the text.", "Gets or sets the decoding of Unicode text. By default, the freetype module performs UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit escape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their corresponding UTF-32 code points on Python interpreters built with a UCS-2 Unicode type (on Windows, for instance). It also means character values within the UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError. Setting ucs4 True turns surrogate pair decoding off, allowing access the full UCS-4 character range to a Python interpreter built with four-byte Unicode character support.", "Read only. Gets pixel size used in scaling font glyphs for this Font instance."]}, {"name": "freetype.Font.antialiased", "path": "ref/freetype#pygame.freetype.Font.antialiased", "type": "pygame.freetype", "text": ["Gets or sets the font's anti-aliasing mode. This defaults to True on all fonts, which are rendered with full 8 bit blending.", "Set to False to do monochrome rendering. This should provide a small speed gain and reduce cache memory size."]}, {"name": "freetype.Font.ascender", "path": "ref/freetype#pygame.freetype.Font.ascender", "type": "pygame.freetype", "text": ["Read only. Return the number of units from the font's baseline to the top of the bounding box."]}, {"name": "freetype.Font.bgcolor", "path": "ref/freetype#pygame.freetype.Font.bgcolor", "type": "pygame.freetype", "text": ["Gets or sets the default background rendering color. Initially it is unset and text will render with a transparent background by default. Applies to render() and render_to()."]}, {"name": "freetype.Font.descender", "path": "ref/freetype#pygame.freetype.Font.descender", "type": "pygame.freetype", "text": ["Read only. Return the height in font units for the font descent. The descent is the number of units from the font's baseline to the bottom of the bounding box."]}, {"name": "freetype.Font.fgcolor", "path": "ref/freetype#pygame.freetype.Font.fgcolor", "type": "pygame.freetype", "text": ["Gets or sets the default glyph rendering color. It is initially opaque black \u2015 (0, 0, 0, 255). Applies to render() and render_to()."]}, {"name": "freetype.Font.fixed_sizes", "path": "ref/freetype#pygame.freetype.Font.fixed_sizes", "type": "pygame.freetype", "text": ["Read only. Returns the number of point sizes for which the font contains bitmap character images. If zero then the font is not a bitmap font. A scalable font may contain pre-rendered point sizes as strikes."]}, {"name": "freetype.Font.fixed_width", "path": "ref/freetype#pygame.freetype.Font.fixed_width", "type": "pygame.freetype", "text": ["Read only. Returns True if the font contains fixed-width characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono)."]}, {"name": "freetype.Font.get_metrics", "path": "ref/freetype#pygame.freetype.Font.get_metrics", "type": "pygame.freetype", "text": ["Returns the glyph metrics for each character in text.", "The glyph metrics are returned as a list of tuples. Each tuple gives metrics of a single character glyph. The glyph metrics are:", "The bounding box min_x, max_x, min_y, and max_y values are returned as grid-fitted pixel coordinates of type int. The advance values are float values.", "The calculations are done using the font's default size in points. Optionally you may specify another point size with the size argument.", "The metrics are adjusted for the current rotation, strong, and oblique settings.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1."]}, {"name": "freetype.Font.get_rect", "path": "ref/freetype#pygame.freetype.Font.get_rect", "type": "pygame.freetype", "text": ["Gets the final dimensions and origin, in pixels, of text using the optional size in points, style, and rotation. For other relevant render properties, and for any optional argument not given, the default values set for the Font instance are used.", "Returns a Rect instance containing the width and height of the text's bounding box and the position of the text's origin. The origin is useful in aligning separately rendered pieces of text. It gives the baseline position and bearing at the start of the text. See the render_to() method for an example.", "If text is a char (byte) string, its encoding is assumed to be LATIN1.", "Optionally, text can be None, which will return the bounding rectangle for the text passed to a previous get_rect(), render(), render_to(), render_raw(), or render_raw_to() call. See render_to() for more details."]}, {"name": "freetype.Font.get_sized_ascender", "path": "ref/freetype#pygame.freetype.Font.get_sized_ascender", "type": "pygame.freetype", "text": ["Return the number of units from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation."]}, {"name": "freetype.Font.get_sized_descender", "path": "ref/freetype#pygame.freetype.Font.get_sized_descender", "type": "pygame.freetype", "text": ["Return the number of pixels from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation."]}, {"name": "freetype.Font.get_sized_glyph_height", "path": "ref/freetype#pygame.freetype.Font.get_sized_glyph_height", "type": "pygame.freetype", "text": ["Return the glyph bounding box height of the font in pixels. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation."]}, {"name": "freetype.Font.get_sized_height", "path": "ref/freetype#pygame.freetype.Font.get_sized_height", "type": "pygame.freetype", "text": ["Returns the height of the font. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation."]}, {"name": "freetype.Font.get_sizes", "path": "ref/freetype#pygame.freetype.Font.get_sizes", "type": "pygame.freetype", "text": ["Returns a list of tuple records, one for each point size supported. Each tuple containing the point size, the height in pixels, width in pixels, horizontal ppem (nominal width) in fractional pixels, and vertical ppem (nominal height) in fractional pixels."]}, {"name": "freetype.Font.height", "path": "ref/freetype#pygame.freetype.Font.height", "type": "pygame.freetype", "text": ["Read only. Gets the height of the font. This is the average value of all glyphs in the font."]}, {"name": "freetype.Font.kerning", "path": "ref/freetype#pygame.freetype.Font.kerning", "type": "pygame.freetype", "text": ["Gets or sets the font's kerning mode. This defaults to False on all fonts, which will be rendered without kerning.", "Set to True to add kerning between character pairs, if supported by the font, when positioning glyphs."]}, {"name": "freetype.Font.name", "path": "ref/freetype#pygame.freetype.Font.name", "type": "pygame.freetype", "text": ["Read only. Returns the real (long) name of the font, as recorded in the font file."]}, {"name": "freetype.Font.oblique", "path": "ref/freetype#pygame.freetype.Font.oblique", "type": "pygame.freetype", "text": ["Gets or sets whether the font will be rendered as oblique. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the style parameter.", "The oblique style is only supported for scalable (outline) fonts. An attempt to set this style on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by Font.__new__(), setting this property raises a RuntimeError."]}, {"name": "freetype.Font.origin", "path": "ref/freetype#pygame.freetype.Font.origin", "type": "pygame.freetype", "text": ["If set True, render_to() and render_raw_to() will take the dest position to be that of the text origin, as opposed to the top-left corner of the bounding box. See get_rect() for details."]}, {"name": "freetype.Font.pad", "path": "ref/freetype#pygame.freetype.Font.pad", "type": "pygame.freetype", "text": ["If set True, then the text boundary rectangle will be inflated to match that of font.Font. Otherwise, the boundary rectangle is just large enough for the text."]}, {"name": "freetype.Font.path", "path": "ref/freetype#pygame.freetype.Font.path", "type": "pygame.freetype", "text": ["Read only. Returns the path of the loaded font file"]}, {"name": "freetype.Font.render", "path": "ref/freetype#pygame.freetype.Font.render", "type": "pygame.freetype", "text": ["Returns a new Surface, with the text rendered to it in the color given by 'fgcolor'. If no foreground color is given, the default foreground color, fgcolor is used. If bgcolor is given, the surface will be filled with this color. When no background color is given, the surface background is transparent, zero alpha. Normally the returned surface has a 32 bit pixel size. However, if bgcolor is None and anti-aliasing is disabled a monochrome 8 bit colorkey surface, with colorkey set for the background color, is returned.", "The return value is a tuple: the new surface and the bounding rectangle giving the size and origin of the rendered text.", "If an empty string is passed for text then the returned Rect is zero width and the height of the font.", "Optional fgcolor, style, rotation, and size arguments override the default values set for the Font instance.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1.", "Optionally, text can be None, which will render the text passed to a previous get_rect(), render(), render_to(), render_raw(), or render_raw_to() call. See render_to() for details."]}, {"name": "freetype.Font.render_raw", "path": "ref/freetype#pygame.freetype.Font.render_raw", "type": "pygame.freetype", "text": ["Like render() but with the pixels returned as a byte string of 8-bit gray-scale values. The foreground color is 255, the background 0, useful as an alpha mask for a foreground pattern."]}, {"name": "freetype.Font.render_raw_to", "path": "ref/freetype#pygame.freetype.Font.render_raw_to", "type": "pygame.freetype", "text": ["Render to an array object exposing an array struct interface. The array must be two dimensional with integer items. The default dest value, None, is equivalent to position (0, 0). See render_to(). As with the other render methods, text can be None to render a text string passed previously to another method.", "The return value is a pygame.Rect() giving the size and position of the rendered text."]}, {"name": "freetype.Font.render_to", "path": "ref/freetype#pygame.freetype.Font.render_to", "type": "pygame.freetype", "text": ["Renders the string text to the pygame.Surface surf, at position dest, a (x, y) surface coordinate pair. If either x or y is not an integer it is converted to one if possible. Any sequence where the first two items are x and y positional elements is accepted, including a Rect instance. As with render(), optional fgcolor, style, rotation, and size argument are available.", "If a background color bgcolor is given, the text bounding box is first filled with that color. The text is blitted next. Both the background fill and text rendering involve full alpha blits. That is, the alpha values of the foreground, background, and destination target surface all affect the blit.", "The return value is a rectangle giving the size and position of the rendered text within the surface.", "If an empty string is passed for text then the returned Rect is zero width and the height of the font. The rect will test False.", "Optionally, text can be set None, which will re-render text passed to a previous render_to(), get_rect(), render(), render_raw(), or render_raw_to() call. Primarily, this feature is an aid to using render_to() in combination with get_rect(). An example:", "When render_to() is called with the same font properties \u2015 size, style, strength, wide, antialiased, vertical, rotation, kerning, and use_bitmap_strikes \u2015 as get_rect(), render_to() will use the layout calculated by get_rect(). Otherwise, render_to() will recalculate the layout if called with a text string or one of the above properties has changed after the get_rect() call.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1."]}, {"name": "freetype.Font.resolution", "path": "ref/freetype#pygame.freetype.Font.resolution", "type": "pygame.freetype", "text": ["Read only. Gets pixel size used in scaling font glyphs for this Font instance."]}, {"name": "freetype.Font.rotation", "path": "ref/freetype#pygame.freetype.Font.rotation", "type": "pygame.freetype", "text": ["Gets or sets the baseline angle of the rendered text. The angle is represented as integer degrees. The default angle is 0, with horizontal text rendered along the X-axis, and vertical text along the Y-axis. A positive value rotates these axes counterclockwise that many degrees. A negative angle corresponds to a clockwise rotation. The rotation value is normalized to a value within the range 0 to 359 inclusive (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315, 720 -> 720 - (2 * 360) -> 0).", "Only scalable (outline) fonts can be rotated. An attempt to change the rotation of a bitmap font raises an AttributeError. An attempt to change the rotation of an inactive font instance, as returned by Font.__new__(), raises a RuntimeError."]}, {"name": "freetype.Font.scalable", "path": "ref/freetype#pygame.freetype.Font.scalable", "type": "pygame.freetype", "text": ["Read only. Returns True if the font contains outline glyphs. If so, the point size is not limited to available bitmap sizes."]}, {"name": "freetype.Font.size", "path": "ref/freetype#pygame.freetype.Font.size", "type": "pygame.freetype", "text": ["Get or set the default size for text metrics and rendering. It can be a single point size, given as a Python int or float, or a font ppem (width, height) tuple. Size values are non-negative. A zero size or width represents an undefined size. In this case the size must be given as a method argument, or an exception is raised. A zero width but non-zero height is a ValueError.", "For a scalable font, a single number value is equivalent to a tuple with width equal height. A font can be stretched vertically with height set greater than width, or horizontally with width set greater than height. For embedded bitmaps, as listed by get_sizes(), use the nominal width and height to select an available size.", "Font size differs for a non-scalable, bitmap, font. During a method call it must match one of the available sizes returned by method get_sizes(). If not, an exception is raised. If the size is a single number, the size is first matched against the point size value. If no match, then the available size with the same nominal width and height is chosen."]}, {"name": "freetype.Font.strength", "path": "ref/freetype#pygame.freetype.Font.strength", "type": "pygame.freetype", "text": ["The amount by which a font glyph's size is enlarged for the strong or wide transformations, as a fraction of the untransformed size. For the wide style only the horizontal dimension is increased. For strong text both the horizontal and vertical dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is equivalent to the pygame.font.Font bold style. The default is 0.02778 ( 1/36 ).", "The strength style is only supported for scalable (outline) fonts. An attempt to set this property on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by Font.__new__(), assignment to this property raises a RuntimeError."]}, {"name": "freetype.Font.strong", "path": "ref/freetype#pygame.freetype.Font.strong", "type": "pygame.freetype", "text": ["Gets or sets whether the font will be bold when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the 'style' parameter."]}, {"name": "freetype.Font.style", "path": "ref/freetype#pygame.freetype.Font.style", "type": "pygame.freetype", "text": ["Gets or sets the default style of the Font. This default style will be used for all text rendering and size calculations unless overridden specifically a render or get_rect() call. The style value may be a bit-wise OR of one or more of the following constants:", "These constants may be found on the FreeType constants module. Optionally, the default style can be modified or obtained accessing the individual style attributes (underline, oblique, strong).", "The STYLE_OBLIQUE and STYLE_STRONG styles are for scalable fonts only. An attempt to set either for a bitmap font raises an AttributeError. An attempt to set either for an inactive font, as returned by Font.__new__(), raises a RuntimeError.", "Assigning STYLE_DEFAULT to the style property leaves the property unchanged, as this property defines the default. The style property will never return STYLE_DEFAULT."]}, {"name": "freetype.Font.ucs4", "path": "ref/freetype#pygame.freetype.Font.ucs4", "type": "pygame.freetype", "text": ["Gets or sets the decoding of Unicode text. By default, the freetype module performs UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit escape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their corresponding UTF-32 code points on Python interpreters built with a UCS-2 Unicode type (on Windows, for instance). It also means character values within the UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError. Setting ucs4 True turns surrogate pair decoding off, allowing access the full UCS-4 character range to a Python interpreter built with four-byte Unicode character support."]}, {"name": "freetype.Font.underline", "path": "ref/freetype#pygame.freetype.Font.underline", "type": "pygame.freetype", "text": ["Gets or sets whether the font will be underlined when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the 'style' parameter."]}, {"name": "freetype.Font.underline_adjustment", "path": "ref/freetype#pygame.freetype.Font.underline_adjustment", "type": "pygame.freetype", "text": ["Gets or sets a factor which, when positive, is multiplied with the font's underline offset to adjust the underline position. A negative value turns an underline into a strike-through or overline. It is multiplied with the ascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5 closely matches Tango underlining. A value of 1.0 mimics pygame.font.Font underlining."]}, {"name": "freetype.Font.use_bitmap_strikes", "path": "ref/freetype#pygame.freetype.Font.use_bitmap_strikes", "type": "pygame.freetype", "text": ["Some scalable fonts include embedded bitmaps for particular point sizes. This property controls whether or not those bitmap strikes are used. Set it False to disable the loading of any bitmap strike. Set it True, the default, to permit bitmap strikes for a non-rotated render with no style other than wide or underline. This property is ignored for bitmap fonts.", "See also fixed_sizes and get_sizes()."]}, {"name": "freetype.Font.vertical", "path": "ref/freetype#pygame.freetype.Font.vertical", "type": "pygame.freetype", "text": ["Gets or sets whether the characters are laid out vertically rather than horizontally. May be useful when rendering Kanji or some other vertical script.", "Set to True to switch to a vertical text layout. The default is False, place horizontally.", "Note that the Font class does not automatically determine script orientation. Vertical layout must be selected explicitly.", "Also note that several font formats (especially bitmap based ones) don't contain the necessary metrics to draw glyphs vertically, so drawing in those cases will give unspecified results."]}, {"name": "freetype.Font.wide", "path": "ref/freetype#pygame.freetype.Font.wide", "type": "pygame.freetype", "text": ["Gets or sets whether the font will be stretched horizontally when drawing text. It produces a result similar to pygame.font.Font's bold. This style not available for rotated text."]}, {"name": "freetype.get_cache_size", "path": "ref/freetype#pygame.freetype.get_cache_size", "type": "pygame.freetype", "text": ["See pygame.freetype.init()."]}, {"name": "freetype.get_default_font", "path": "ref/freetype#pygame.freetype.get_default_font", "type": "pygame.freetype", "text": ["Return the filename of the default pygame font. This is not the full path to the file. The file is usually in the same directory as the font module, but can also be bundled in a separate archive."]}, {"name": "freetype.get_default_resolution", "path": "ref/freetype#pygame.freetype.get_default_resolution", "type": "pygame.freetype", "text": ["Returns the default pixel size, in dots per inch, for the module. The default is 72 DPI."]}, {"name": "freetype.get_error", "path": "ref/freetype#pygame.freetype.get_error", "type": "pygame.freetype", "text": ["Return a description of the last error which occurred in the FreeType2 library, or None if no errors have occurred."]}, {"name": "freetype.get_init", "path": "ref/freetype#pygame.freetype.get_init", "type": "pygame.freetype", "text": ["Returns True if the pygame.freetype module is currently initialized.", "New in pygame 1.9.5."]}, {"name": "freetype.get_version", "path": "ref/freetype#pygame.freetype.get_version", "type": "pygame.freetype", "text": ["Returns the version of the FreeType library in use by this module.", "Note that the freetype module depends on the FreeType 2 library. It will not compile with the original FreeType 1.0. Hence, the first element of the tuple will always be \"2\"."]}, {"name": "freetype.init", "path": "ref/freetype#pygame.freetype.init", "type": "pygame.freetype", "text": ["This function initializes the underlying FreeType library and must be called before trying to use any of the functionality of the freetype module.", "However, pygame.init() will automatically call this function if the freetype module is already imported. It is safe to call this function more than once.", "Optionally, you may specify a default cache_size for the Glyph cache: the maximum number of glyphs that will be cached at any given time by the module. Exceedingly small values will be automatically tuned for performance. Also a default pixel resolution, in dots per inch, can be given to adjust font scaling."]}, {"name": "freetype.quit", "path": "ref/freetype#pygame.freetype.quit", "type": "pygame.freetype", "text": ["This function closes the freetype module. After calling this function, you should not invoke any class, method or function related to the freetype module as they are likely to fail or might give unpredictable results. It is safe to call this function even if the module hasn't been initialized yet."]}, {"name": "freetype.set_default_resolution", "path": "ref/freetype#pygame.freetype.set_default_resolution", "type": "pygame.freetype", "text": ["Set the default pixel size, in dots per inch, for the module. If the optional argument is omitted or zero the resolution is reset to 72 DPI."]}, {"name": "freetype.SysFont", "path": "ref/freetype#pygame.freetype.SysFont", "type": "pygame.freetype", "text": ["Return a new Font object that is loaded from the system fonts. The font will match the requested bold and italic flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.", "The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.", "New in pygame 2.0.1: Accept an iterable of font names."]}, {"name": "freetype.was_init", "path": "ref/freetype#pygame.freetype.was_init", "type": "pygame.freetype", "text": ["DEPRECATED: Returns True if the pygame.freetype module is currently initialized. Use get_init() instead."]}, {"name": "get_error", "path": "ref/pygame#pygame.get_error", "type": "pygame", "text": ["SDL maintains an internal error message. This message will usually be given to you when pygame.error() is raised, so this function will rarely be needed."]}, {"name": "get_init", "path": "ref/pygame#pygame.get_init", "type": "pygame", "text": ["Returns True if pygame is currently initialized.", "New in pygame 1.9.5."]}, {"name": "get_sdl_byteorder", "path": "ref/pygame#pygame.get_sdl_byteorder", "type": "pygame", "text": ["Returns the byte order of the SDL library. It returns 1234 for little endian byte order and 4321 for big endian byte order.", "New in pygame 1.8."]}, {"name": "get_sdl_version", "path": "ref/pygame#pygame.get_sdl_version", "type": "pygame", "text": ["Returns the three version numbers of the SDL library. This version is built at compile time. It can be used to detect which features may or may not be available through pygame.", "New in pygame 1.7.0."]}, {"name": "gfxdraw", "path": "ref/gfxdraw", "type": "pygame.gfxdraw", "text": ["EXPERIMENTAL!: This API may change or disappear in later pygame releases. If you use this, your code may break with the next pygame release.", "The pygame package does not import gfxdraw automatically when loaded, so it must imported explicitly to be used.", "For all functions the arguments are strictly positional and integers are accepted for coordinates and radii. The color argument can be one of the following formats:", "The functions rectangle() and box() will accept any (x, y, w, h) sequence for their rect argument, though pygame.Rect instances are preferred.", "To draw a filled antialiased shape, first use the antialiased (aa*) version of the function, and then use the filled (filled_*) version. For example:", "Note", "For threading, each of the functions releases the GIL during the C part of the call.", "Note", "See the pygame.draw module for alternative draw methods. The pygame.gfxdraw module differs from the pygame.draw module in the API it uses and the different draw functions available. pygame.gfxdraw wraps the primitives from the library called SDL_gfx, rather than using modified versions.", "New in pygame 1.9.0.", "Draws a single pixel, at position (x ,y), on the given surface.", "None", "NoneType", "Draws a straight horizontal line ((x1, y) to (x2, y)) on the given surface. There are no endcaps.", "None", "NoneType", "Draws a straight vertical line ((x, y1) to (x, y2)) on the given surface. There are no endcaps.", "None", "NoneType", "Draws a straight line ((x1, y1) to (x2, y2)) on the given surface. There are no endcaps.", "None", "NoneType", "Draws an unfilled rectangle on the given surface. For a filled rectangle use box().", "None", "NoneType", "Note", "The rect.bottom and rect.right attributes of a pygame.Rect always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.", "Draws a filled rectangle on the given surface. For an unfilled rectangle use rectangle().", "None", "NoneType", "Note", "The rect.bottom and rect.right attributes of a pygame.Rect always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.", "Note", "The pygame.Surface.fill() method works just as well for drawing filled rectangles. In fact pygame.Surface.fill() can be hardware accelerated on some platforms with both software and hardware display modes.", "Draws an unfilled circle on the given surface. For a filled circle use filled_circle().", "None", "NoneType", "Draws an unfilled antialiased circle on the given surface.", "None", "NoneType", "Draws a filled circle on the given surface. For an unfilled circle use circle().", "None", "NoneType", "Draws an unfilled ellipse on the given surface. For a filled ellipse use filled_ellipse().", "None", "NoneType", "Draws an unfilled antialiased ellipse on the given surface.", "None", "NoneType", "Draws a filled ellipse on the given surface. For an unfilled ellipse use ellipse().", "None", "NoneType", "Draws an arc on the given surface. For an arc with its endpoints connected to its center use pie().", "The two angle arguments are given in degrees and indicate the start and stop positions of the arc. The arc is drawn in a clockwise direction from the start_angle to the stop_angle. If start_angle == stop_angle, nothing will be drawn", "None", "NoneType", "Note", "This function uses degrees while the pygame.draw.arc() function uses radians.", "Draws an unfilled pie on the given surface. A pie is an arc() with its endpoints connected to its center.", "The two angle arguments are given in degrees and indicate the start and stop positions of the pie. The pie is drawn in a clockwise direction from the start_angle to the stop_angle. If start_angle == stop_angle, a straight line will be drawn from the center position at the given angle, to a length of the radius.", "None", "NoneType", "Draws an unfilled trigon (triangle) on the given surface. For a filled trigon use filled_trigon().", "A trigon can also be drawn using polygon() e.g. polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)", "None", "NoneType", "Draws an unfilled antialiased trigon (triangle) on the given surface.", "An aatrigon can also be drawn using aapolygon() e.g. aapolygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)", "None", "NoneType", "Draws a filled trigon (triangle) on the given surface. For an unfilled trigon use trigon().", "A filled_trigon can also be drawn using filled_polygon() e.g. filled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)", "None", "NoneType", "Draws an unfilled polygon on the given surface. For a filled polygon use filled_polygon().", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType", "Draws an unfilled antialiased polygon on the given surface.", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType", "Draws a filled polygon on the given surface. For an unfilled polygon use polygon().", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType", "Draws a textured polygon on the given surface. For better performance, the surface and the texture should have the same format.", "A per-pixel alpha texture blit to a per-pixel alpha surface will differ from a pygame.Surface.blit() blit. Also, a per-pixel alpha texture cannot be used with an 8-bit per pixel destination.", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType", "Draws a B\u00e9zier curve on the given surface.", "None", "NoneType"]}, {"name": "gfxdraw.aacircle", "path": "ref/gfxdraw#pygame.gfxdraw.aacircle", "type": "pygame.gfxdraw", "text": ["Draws an unfilled antialiased circle on the given surface.", "None", "NoneType"]}, {"name": "gfxdraw.aaellipse", "path": "ref/gfxdraw#pygame.gfxdraw.aaellipse", "type": "pygame.gfxdraw", "text": ["Draws an unfilled antialiased ellipse on the given surface.", "None", "NoneType"]}, {"name": "gfxdraw.aapolygon", "path": "ref/gfxdraw#pygame.gfxdraw.aapolygon", "type": "pygame.gfxdraw", "text": ["Draws an unfilled antialiased polygon on the given surface.", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType"]}, {"name": "gfxdraw.aatrigon", "path": "ref/gfxdraw#pygame.gfxdraw.aatrigon", "type": "pygame.gfxdraw", "text": ["Draws an unfilled antialiased trigon (triangle) on the given surface.", "An aatrigon can also be drawn using aapolygon() e.g. aapolygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)", "None", "NoneType"]}, {"name": "gfxdraw.arc", "path": "ref/gfxdraw#pygame.gfxdraw.arc", "type": "pygame.gfxdraw", "text": ["Draws an arc on the given surface. For an arc with its endpoints connected to its center use pie().", "The two angle arguments are given in degrees and indicate the start and stop positions of the arc. The arc is drawn in a clockwise direction from the start_angle to the stop_angle. If start_angle == stop_angle, nothing will be drawn", "None", "NoneType", "Note", "This function uses degrees while the pygame.draw.arc() function uses radians."]}, {"name": "gfxdraw.bezier", "path": "ref/gfxdraw#pygame.gfxdraw.bezier", "type": "pygame.gfxdraw", "text": ["Draws a B\u00e9zier curve on the given surface.", "None", "NoneType"]}, {"name": "gfxdraw.box", "path": "ref/gfxdraw#pygame.gfxdraw.box", "type": "pygame.gfxdraw", "text": ["Draws a filled rectangle on the given surface. For an unfilled rectangle use rectangle().", "None", "NoneType", "Note", "The rect.bottom and rect.right attributes of a pygame.Rect always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.", "Note", "The pygame.Surface.fill() method works just as well for drawing filled rectangles. In fact pygame.Surface.fill() can be hardware accelerated on some platforms with both software and hardware display modes."]}, {"name": "gfxdraw.circle", "path": "ref/gfxdraw#pygame.gfxdraw.circle", "type": "pygame.gfxdraw", "text": ["Draws an unfilled circle on the given surface. For a filled circle use filled_circle().", "None", "NoneType"]}, {"name": "gfxdraw.ellipse", "path": "ref/gfxdraw#pygame.gfxdraw.ellipse", "type": "pygame.gfxdraw", "text": ["Draws an unfilled ellipse on the given surface. For a filled ellipse use filled_ellipse().", "None", "NoneType"]}, {"name": "gfxdraw.filled_circle", "path": "ref/gfxdraw#pygame.gfxdraw.filled_circle", "type": "pygame.gfxdraw", "text": ["Draws a filled circle on the given surface. For an unfilled circle use circle().", "None", "NoneType"]}, {"name": "gfxdraw.filled_ellipse", "path": "ref/gfxdraw#pygame.gfxdraw.filled_ellipse", "type": "pygame.gfxdraw", "text": ["Draws a filled ellipse on the given surface. For an unfilled ellipse use ellipse().", "None", "NoneType"]}, {"name": "gfxdraw.filled_polygon", "path": "ref/gfxdraw#pygame.gfxdraw.filled_polygon", "type": "pygame.gfxdraw", "text": ["Draws a filled polygon on the given surface. For an unfilled polygon use polygon().", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType"]}, {"name": "gfxdraw.filled_trigon", "path": "ref/gfxdraw#pygame.gfxdraw.filled_trigon", "type": "pygame.gfxdraw", "text": ["Draws a filled trigon (triangle) on the given surface. For an unfilled trigon use trigon().", "A filled_trigon can also be drawn using filled_polygon() e.g. filled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)", "None", "NoneType"]}, {"name": "gfxdraw.hline", "path": "ref/gfxdraw#pygame.gfxdraw.hline", "type": "pygame.gfxdraw", "text": ["Draws a straight horizontal line ((x1, y) to (x2, y)) on the given surface. There are no endcaps.", "None", "NoneType"]}, {"name": "gfxdraw.line", "path": "ref/gfxdraw#pygame.gfxdraw.line", "type": "pygame.gfxdraw", "text": ["Draws a straight line ((x1, y1) to (x2, y2)) on the given surface. There are no endcaps.", "None", "NoneType"]}, {"name": "gfxdraw.pie", "path": "ref/gfxdraw#pygame.gfxdraw.pie", "type": "pygame.gfxdraw", "text": ["Draws an unfilled pie on the given surface. A pie is an arc() with its endpoints connected to its center.", "The two angle arguments are given in degrees and indicate the start and stop positions of the pie. The pie is drawn in a clockwise direction from the start_angle to the stop_angle. If start_angle == stop_angle, a straight line will be drawn from the center position at the given angle, to a length of the radius.", "None", "NoneType"]}, {"name": "gfxdraw.pixel", "path": "ref/gfxdraw#pygame.gfxdraw.pixel", "type": "pygame.gfxdraw", "text": ["Draws a single pixel, at position (x ,y), on the given surface.", "None", "NoneType"]}, {"name": "gfxdraw.polygon", "path": "ref/gfxdraw#pygame.gfxdraw.polygon", "type": "pygame.gfxdraw", "text": ["Draws an unfilled polygon on the given surface. For a filled polygon use filled_polygon().", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType"]}, {"name": "gfxdraw.rectangle", "path": "ref/gfxdraw#pygame.gfxdraw.rectangle", "type": "pygame.gfxdraw", "text": ["Draws an unfilled rectangle on the given surface. For a filled rectangle use box().", "None", "NoneType", "Note", "The rect.bottom and rect.right attributes of a pygame.Rect always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing."]}, {"name": "gfxdraw.textured_polygon", "path": "ref/gfxdraw#pygame.gfxdraw.textured_polygon", "type": "pygame.gfxdraw", "text": ["Draws a textured polygon on the given surface. For better performance, the surface and the texture should have the same format.", "A per-pixel alpha texture blit to a per-pixel alpha surface will differ from a pygame.Surface.blit() blit. Also, a per-pixel alpha texture cannot be used with an 8-bit per pixel destination.", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType"]}, {"name": "gfxdraw.trigon", "path": "ref/gfxdraw#pygame.gfxdraw.trigon", "type": "pygame.gfxdraw", "text": ["Draws an unfilled trigon (triangle) on the given surface. For a filled trigon use filled_trigon().", "A trigon can also be drawn using polygon() e.g. polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)", "None", "NoneType"]}, {"name": "gfxdraw.vline", "path": "ref/gfxdraw#pygame.gfxdraw.vline", "type": "pygame.gfxdraw", "text": ["Draws a straight vertical line ((x, y1) to (x, y2)) on the given surface. There are no endcaps.", "None", "NoneType"]}, {"name": "image", "path": "ref/image", "type": "pygame.image", "text": ["The image module contains functions for loading and saving pictures, as well as transferring Surfaces to formats usable by other packages.", "Note that there is no Image class; an image is loaded as a Surface object. The Surface class allows manipulation (drawing lines, setting pixels, capturing regions, etc.).", "The image module is a required dependency of pygame, but it only optionally supports any extended file formats. By default it can only load uncompressed BMP images. When built with full image support, the pygame.image.load() function can support the following formats.", "Saving images only supports a limited set of formats. You can save to the following formats.", "JPEG and JPG refer to the same file format", "New in pygame 1.8: Saving PNG and JPEG files.", "Load an image from a file source. You can pass either a filename or a Python file-like object.", "This function only supports loading \"basic\" image format, ie BMP format. This function is always available, no matter how pygame was built.", "Load an image from a file source. You can pass either a filename or a Python file-like object.", "Pygame will automatically determine the image type (e.g., GIF or bitmap) and create a new Surface object from the data. In some cases it will need to know the file extension (e.g., GIF images should end in \".gif\"). If you pass a raw file-like object, you may also want to pass the original filename as the namehint argument.", "The returned Surface will contain the same color format, colorkey and alpha transparency as the file it came from. You will often want to call Surface.convert() with no arguments, to create a copy that will draw more quickly on the screen.", "For alpha transparency, like in .png images, use the convert_alpha() method after loading so that the image has per pixel transparency.", "pygame may not always be built to support all image formats. At minimum it will support uncompressed BMP. If pygame.image.get_extended() returns 'True', you should be able to load most images (including PNG, JPG and GIF).", "You should use os.path.join() for compatibility.", "This function is similar to pygame.image.load(), except that this function can only be used if pygame was built with extended image format support.", "From version 2.0.1, this function is always available, but raises an error if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.", "Changed in pygame 2.0.1.", "This will save your Surface as either a BMP, TGA, PNG, or JPEG image. If the filename extension is unrecognized it will default to TGA. Both TGA, and BMP file formats create uncompressed files. You can pass a filename or a Python file-like object. For file-like object, the image is saved to TGA format unless a namehint with a recognizable extension is passed in.", "Note", "To be able to save the JPEG file format to a file-like object, SDL2_Image version 2.0.2 or newer is needed.", "Note", "When saving to a file-like object, it seems that for most formats, the object needs to be flushed after saving to it to make loading from it possible.", "Changed in pygame 1.8: Saving PNG and JPEG files.", "Changed in pygame 2.0.0.dev11: The namehint parameter was added to make it possible to save other formats than TGA to a file-like object.", "This will save your Surface as either a PNG or JPEG image.", "Incase the image is being saved to a file-like object, this function uses the namehint argument to determine the format of the file being saved. Saves to JPEG incase the namehint was not specified while saving to file-like object.", "From version 2.0.1, this function is always available, but raises an error if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.", "Changed in pygame 2.0.1.", "If pygame is built with extended image formats, then this function will return the SDL_Image library's version number as a tuple of 3 integers (major, minor, patch). If not, then it will return None.", "New in pygame 2.0.0.dev11.", "If pygame is built with extended image formats this function will return True. It is still not possible to determine which formats will be available, but generally you will be able to load them all.", "Creates a string that can be transferred with the 'fromstring' method in other Python imaging packages. Some Python image packages prefer their images in bottom-to-top format (PyOpenGL for example). If you pass True for the flipped argument, the string buffer will be vertically flipped.", "The format argument is a string of one of the following values. Note that only 8-bit Surfaces can use the \"P\" format. The other formats will work for any Surface. Also note that other Python image packages support more formats than pygame.", "This function takes arguments similar to pygame.image.tostring(). The size argument is a pair of numbers representing the width and height. Once the new Surface is created you can destroy the string buffer.", "The size and format image must compute the exact same size as the passed string buffer. Otherwise an exception will be raised.", "See the pygame.image.frombuffer() method for a potentially faster way to transfer images into pygame.", "Create a new Surface that shares pixel data directly from a bytes buffer. This method takes similar arguments to pygame.image.fromstring(), but is unable to vertically flip the source data.", "This will run much faster than pygame.image.fromstring(), since no pixel data must be allocated and copied.", "It accepts the following 'format' arguments:"]}, {"name": "image.frombuffer", "path": "ref/image#pygame.image.frombuffer", "type": "pygame.image", "text": ["Create a new Surface that shares pixel data directly from a bytes buffer. This method takes similar arguments to pygame.image.fromstring(), but is unable to vertically flip the source data.", "This will run much faster than pygame.image.fromstring(), since no pixel data must be allocated and copied.", "It accepts the following 'format' arguments:"]}, {"name": "image.fromstring", "path": "ref/image#pygame.image.fromstring", "type": "pygame.image", "text": ["This function takes arguments similar to pygame.image.tostring(). The size argument is a pair of numbers representing the width and height. Once the new Surface is created you can destroy the string buffer.", "The size and format image must compute the exact same size as the passed string buffer. Otherwise an exception will be raised.", "See the pygame.image.frombuffer() method for a potentially faster way to transfer images into pygame."]}, {"name": "image.get_extended", "path": "ref/image#pygame.image.get_extended", "type": "pygame.image", "text": ["If pygame is built with extended image formats this function will return True. It is still not possible to determine which formats will be available, but generally you will be able to load them all."]}, {"name": "image.get_sdl_image_version", "path": "ref/image#pygame.image.get_sdl_image_version", "type": "pygame.image", "text": ["If pygame is built with extended image formats, then this function will return the SDL_Image library's version number as a tuple of 3 integers (major, minor, patch). If not, then it will return None.", "New in pygame 2.0.0.dev11."]}, {"name": "image.load", "path": "ref/image#pygame.image.load", "type": "pygame.image", "text": ["Load an image from a file source. You can pass either a filename or a Python file-like object.", "Pygame will automatically determine the image type (e.g., GIF or bitmap) and create a new Surface object from the data. In some cases it will need to know the file extension (e.g., GIF images should end in \".gif\"). If you pass a raw file-like object, you may also want to pass the original filename as the namehint argument.", "The returned Surface will contain the same color format, colorkey and alpha transparency as the file it came from. You will often want to call Surface.convert() with no arguments, to create a copy that will draw more quickly on the screen.", "For alpha transparency, like in .png images, use the convert_alpha() method after loading so that the image has per pixel transparency.", "pygame may not always be built to support all image formats. At minimum it will support uncompressed BMP. If pygame.image.get_extended() returns 'True', you should be able to load most images (including PNG, JPG and GIF).", "You should use os.path.join() for compatibility."]}, {"name": "image.load_basic", "path": "ref/image#pygame.image.load_basic", "type": "pygame.image", "text": ["Load an image from a file source. You can pass either a filename or a Python file-like object.", "This function only supports loading \"basic\" image format, ie BMP format. This function is always available, no matter how pygame was built."]}, {"name": "image.load_extended", "path": "ref/image#pygame.image.load_extended", "type": "pygame.image", "text": ["This function is similar to pygame.image.load(), except that this function can only be used if pygame was built with extended image format support.", "From version 2.0.1, this function is always available, but raises an error if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.", "Changed in pygame 2.0.1."]}, {"name": "image.save", "path": "ref/image#pygame.image.save", "type": "pygame.image", "text": ["This will save your Surface as either a BMP, TGA, PNG, or JPEG image. If the filename extension is unrecognized it will default to TGA. Both TGA, and BMP file formats create uncompressed files. You can pass a filename or a Python file-like object. For file-like object, the image is saved to TGA format unless a namehint with a recognizable extension is passed in.", "Note", "To be able to save the JPEG file format to a file-like object, SDL2_Image version 2.0.2 or newer is needed.", "Note", "When saving to a file-like object, it seems that for most formats, the object needs to be flushed after saving to it to make loading from it possible.", "Changed in pygame 1.8: Saving PNG and JPEG files.", "Changed in pygame 2.0.0.dev11: The namehint parameter was added to make it possible to save other formats than TGA to a file-like object."]}, {"name": "image.save_extended", "path": "ref/image#pygame.image.save_extended", "type": "pygame.image", "text": ["This will save your Surface as either a PNG or JPEG image.", "Incase the image is being saved to a file-like object, this function uses the namehint argument to determine the format of the file being saved. Saves to JPEG incase the namehint was not specified while saving to file-like object.", "From version 2.0.1, this function is always available, but raises an error if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.", "Changed in pygame 2.0.1."]}, {"name": "image.tostring", "path": "ref/image#pygame.image.tostring", "type": "pygame.image", "text": ["Creates a string that can be transferred with the 'fromstring' method in other Python imaging packages. Some Python image packages prefer their images in bottom-to-top format (PyOpenGL for example). If you pass True for the flipped argument, the string buffer will be vertically flipped.", "The format argument is a string of one of the following values. Note that only 8-bit Surfaces can use the \"P\" format. The other formats will work for any Surface. Also note that other Python image packages support more formats than pygame."]}, {"name": "init", "path": "ref/pygame#pygame.init", "type": "pygame", "text": ["Initialize all imported pygame modules. No exceptions will be raised if a module fails, but the total number if successful and failed inits will be returned as a tuple. You can always initialize individual modules manually, but pygame.init() is a convenient way to get everything started. The init() functions for individual modules will raise exceptions when they fail.", "You may want to initialize the different modules separately to speed up your program or to not use modules your game does not require.", "It is safe to call this init() more than once as repeated calls will have no effect. This is true even if you have pygame.quit() all the modules."]}, {"name": "joystick", "path": "ref/joystick", "type": "pygame.joystick", "text": ["The joystick module manages the joystick devices on a computer. Joystick devices include trackballs and video-game-style gamepads, and the module allows the use of multiple buttons and \"hats\". Computers may manage multiple joysticks at a time.", "Each instance of the Joystick class represents one gaming device plugged into the computer. If a gaming pad has multiple joysticks on it, than the joystick object can actually represent multiple joysticks on that single game device.", "For a quick way to initialise the joystick module and get a list of Joystick instances use the following code:", "The following event types will be generated by the joysticks", "And in pygame 2, which supports hotplugging:", "Note that in pygame 2, joysticks events use a unique \"instance ID\". The device index passed in the constructor to a Joystick object is not unique after devices have been added and removed. You must call Joystick.get_instance_id() to find the instance ID that was assigned to a Joystick on opening.", "The event queue needs to be pumped frequently for some of the methods to work. So call one of pygame.event.get, pygame.event.wait, or pygame.event.pump regularly.", "This function is called automatically by pygame.init().", "It initializes the joystick module. The module must be initialized before any other functions will work.", "It is safe to call this function more than once.", "Uninitialize the joystick module. After you call this any existing joystick objects will no longer work.", "It is safe to call this function more than once.", "Test if the pygame.joystick.init() function has been called.", "Return the number of joystick devices on the system. The count will be 0 if there are no joysticks on the system.", "When you create Joystick objects using Joystick(id), you pass an integer that must be lower than this count.", "Create a new joystick to access a physical device. The id argument must be a value from 0 to pygame.joystick.get_count() - 1.", "Joysticks are initialised on creation and are shut down when deallocated. Once the device is initialized the pygame event queue will start receiving events about its input.", "Changed in pygame 2.0.0: Joystick objects are now opened immediately on creation.", "Initialize the joystick, if it has been closed. It is safe to call this even if the joystick is already initialized.", "Deprecated since pygame 2.0.0: In future it will not be possible to reinitialise a closed Joystick object. Will be removed in Pygame 2.1.", "Close a Joystick object. After this the pygame event queue will no longer receive events from the device.", "It is safe to call this more than once.", "Return True if the Joystick object is currently initialised.", "Returns the original device index for this device. This is the same value that was passed to the Joystick() constructor. This method can safely be called while the Joystick is not initialized.", "Deprecated since pygame 2.0.0: The original device index is not useful in pygame 2. Use get_instance_id() instead. Will be removed in Pygame 2.1.", "Get the joystick instance ID. This matches the instance_id field that is given in joystick events.", "New in pygame 2.0.0dev11.", "Get the GUID string. This identifies the exact hardware of the joystick device.", "New in pygame 2.0.0dev11.", "Get a string giving the power status of the device.", "One of: empty, low, medium, full, wired, max, or unknown.", "New in pygame 2.0.0dev11.", "Returns the system name for this joystick device. It is unknown what name the system will give to the Joystick, but it should be a unique name that identifies the device. This method can safely be called while the Joystick is not initialized.", "Returns the number of input axes are on a Joystick. There will usually be two for the position. Controls like rudders and throttles are treated as additional axes.", "The pygame.JOYAXISMOTION events will be in the range from -1.0 to 1.0. A value of 0.0 means the axis is centered. Gamepad devices will usually be -1, 0, or 1 with no values in between. Older analog joystick axes will not always use the full -1 to 1 range, and the centered value will be some area around 0.", "Analog joysticks usually have a bit of noise in their axis, which will generate a lot of rapid small motion events.", "Returns the current position of a joystick axis. The value will range from -1 to 1 with a value of 0 being centered. You may want to take into account some tolerance to handle jitter, and joystick drift may keep the joystick from centering at 0 or using the full range of position values.", "The axis number must be an integer from 0 to get_numaxes() - 1.", "When using gamepads both the control sticks and the analog triggers are usually reported as axes.", "Returns the number of trackball devices on a Joystick. These devices work similar to a mouse but they have no absolute position; they only have relative amounts of movement.", "The pygame.JOYBALLMOTION event will be sent when the trackball is rolled. It will report the amount of movement on the trackball.", "Returns the relative movement of a joystick button. The value is a x, y pair holding the relative movement since the last call to get_ball.", "The ball number must be an integer from 0 to get_numballs() - 1.", "Returns the number of pushable buttons on the joystick. These buttons have a boolean (on or off) state.", "Buttons generate a pygame.JOYBUTTONDOWN and pygame.JOYBUTTONUP event when they are pressed and released.", "Returns the current state of a joystick button.", "Returns the number of joystick hats on a Joystick. Hat devices are like miniature digital joysticks on a joystick. Each hat has two axes of input.", "The pygame.JOYHATMOTION event is generated when the hat changes position. The position attribute for the event contains a pair of values that are either -1, 0, or 1. A position of (0, 0) means the hat is centered.", "Returns the current position of a position hat. The position is given as two values representing the x and y position for the hat. (0, 0) means centered. A value of -1 means left/down and a value of 1 means right/up: so (-1, 0) means left; (1, 0) means right; (0, 1) means up; (1, 1) means upper-right; etc.", "This value is digital, i.e., each coordinate can be -1, 0 or 1 but never in-between.", "The hat number must be between 0 and get_numhats() - 1.", "Example code for joystick module.", "Common Controller Axis Mappings", "Controller mappings are drawn from the underlying SDL library which pygame uses and they differ between pygame 1 and pygame 2. Below are a couple of mappings for two popular game pads.", "Pygame 2", "Axis and hat mappings are listed from -1 to +1.", "X-Box 360 Controller (name: \"Xbox 360 Controller\")", "In pygame 2 the X360 controller mapping has 6 Axes, 11 buttons and 1 hat.", "Left Stick:", "Right Stick:", "Left Trigger:", "Right Trigger:", "Buttons:", "Hat/D-pad:", "Playstation 4 Controller (name: \"PS4 Controller\")", "In pygame 2 the PS4 controller mapping has 6 Axes and 16 buttons.", "Left Stick:", "Right Stick:", "Left Trigger:", "Right Trigger:", "Buttons:", "Pygame 1", "Axis and hat mappings are listed from -1 to +1.", "X-Box 360 Controller (name: \"Controller (XBOX 360 For Windows)\")", "In pygame 1 the X360 controller mapping has 5 Axes, 10 buttons and 1 hat.", "Left Stick:", "Right Stick:", "Left Trigger & Right Trigger:", "Buttons:", "Hat/D-pad:", "Playstation 4 Controller (name: \"Wireless Controller\")", "In pygame 1 the PS4 controller mapping has 6 Axes and 14 buttons and 1 hat.", "Left Stick:", "Right Stick:", "Left Trigger:", "Right Trigger:", "Buttons:", "Hat/D-pad:"]}, {"name": "joystick.get_count", "path": "ref/joystick#pygame.joystick.get_count", "type": "pygame.joystick", "text": ["Return the number of joystick devices on the system. The count will be 0 if there are no joysticks on the system.", "When you create Joystick objects using Joystick(id), you pass an integer that must be lower than this count."]}, {"name": "joystick.get_init", "path": "ref/joystick#pygame.joystick.get_init", "type": "pygame.joystick", "text": ["Test if the pygame.joystick.init() function has been called."]}, {"name": "joystick.init", "path": "ref/joystick#pygame.joystick.init", "type": "pygame.joystick", "text": ["This function is called automatically by pygame.init().", "It initializes the joystick module. The module must be initialized before any other functions will work.", "It is safe to call this function more than once."]}, {"name": "joystick.Joystick", "path": "ref/joystick#pygame.joystick.Joystick", "type": "pygame.joystick", "text": ["Create a new joystick to access a physical device. The id argument must be a value from 0 to pygame.joystick.get_count() - 1.", "Joysticks are initialised on creation and are shut down when deallocated. Once the device is initialized the pygame event queue will start receiving events about its input.", "Changed in pygame 2.0.0: Joystick objects are now opened immediately on creation.", "Initialize the joystick, if it has been closed. It is safe to call this even if the joystick is already initialized.", "Deprecated since pygame 2.0.0: In future it will not be possible to reinitialise a closed Joystick object. Will be removed in Pygame 2.1.", "Close a Joystick object. After this the pygame event queue will no longer receive events from the device.", "It is safe to call this more than once.", "Return True if the Joystick object is currently initialised.", "Returns the original device index for this device. This is the same value that was passed to the Joystick() constructor. This method can safely be called while the Joystick is not initialized.", "Deprecated since pygame 2.0.0: The original device index is not useful in pygame 2. Use get_instance_id() instead. Will be removed in Pygame 2.1.", "Get the joystick instance ID. This matches the instance_id field that is given in joystick events.", "New in pygame 2.0.0dev11.", "Get the GUID string. This identifies the exact hardware of the joystick device.", "New in pygame 2.0.0dev11.", "Get a string giving the power status of the device.", "One of: empty, low, medium, full, wired, max, or unknown.", "New in pygame 2.0.0dev11.", "Returns the system name for this joystick device. It is unknown what name the system will give to the Joystick, but it should be a unique name that identifies the device. This method can safely be called while the Joystick is not initialized.", "Returns the number of input axes are on a Joystick. There will usually be two for the position. Controls like rudders and throttles are treated as additional axes.", "The pygame.JOYAXISMOTION events will be in the range from -1.0 to 1.0. A value of 0.0 means the axis is centered. Gamepad devices will usually be -1, 0, or 1 with no values in between. Older analog joystick axes will not always use the full -1 to 1 range, and the centered value will be some area around 0.", "Analog joysticks usually have a bit of noise in their axis, which will generate a lot of rapid small motion events.", "Returns the current position of a joystick axis. The value will range from -1 to 1 with a value of 0 being centered. You may want to take into account some tolerance to handle jitter, and joystick drift may keep the joystick from centering at 0 or using the full range of position values.", "The axis number must be an integer from 0 to get_numaxes() - 1.", "When using gamepads both the control sticks and the analog triggers are usually reported as axes.", "Returns the number of trackball devices on a Joystick. These devices work similar to a mouse but they have no absolute position; they only have relative amounts of movement.", "The pygame.JOYBALLMOTION event will be sent when the trackball is rolled. It will report the amount of movement on the trackball.", "Returns the relative movement of a joystick button. The value is a x, y pair holding the relative movement since the last call to get_ball.", "The ball number must be an integer from 0 to get_numballs() - 1.", "Returns the number of pushable buttons on the joystick. These buttons have a boolean (on or off) state.", "Buttons generate a pygame.JOYBUTTONDOWN and pygame.JOYBUTTONUP event when they are pressed and released.", "Returns the current state of a joystick button.", "Returns the number of joystick hats on a Joystick. Hat devices are like miniature digital joysticks on a joystick. Each hat has two axes of input.", "The pygame.JOYHATMOTION event is generated when the hat changes position. The position attribute for the event contains a pair of values that are either -1, 0, or 1. A position of (0, 0) means the hat is centered.", "Returns the current position of a position hat. The position is given as two values representing the x and y position for the hat. (0, 0) means centered. A value of -1 means left/down and a value of 1 means right/up: so (-1, 0) means left; (1, 0) means right; (0, 1) means up; (1, 1) means upper-right; etc.", "This value is digital, i.e., each coordinate can be -1, 0 or 1 but never in-between.", "The hat number must be between 0 and get_numhats() - 1."]}, {"name": "joystick.Joystick.get_axis", "path": "ref/joystick#pygame.joystick.Joystick.get_axis", "type": "pygame.joystick", "text": ["Returns the current position of a joystick axis. The value will range from -1 to 1 with a value of 0 being centered. You may want to take into account some tolerance to handle jitter, and joystick drift may keep the joystick from centering at 0 or using the full range of position values.", "The axis number must be an integer from 0 to get_numaxes() - 1.", "When using gamepads both the control sticks and the analog triggers are usually reported as axes."]}, {"name": "joystick.Joystick.get_ball", "path": "ref/joystick#pygame.joystick.Joystick.get_ball", "type": "pygame.joystick", "text": ["Returns the relative movement of a joystick button. The value is a x, y pair holding the relative movement since the last call to get_ball.", "The ball number must be an integer from 0 to get_numballs() - 1."]}, {"name": "joystick.Joystick.get_button", "path": "ref/joystick#pygame.joystick.Joystick.get_button", "type": "pygame.joystick", "text": ["Returns the current state of a joystick button."]}, {"name": "joystick.Joystick.get_guid", "path": "ref/joystick#pygame.joystick.Joystick.get_guid", "type": "pygame.joystick", "text": ["Get the GUID string. This identifies the exact hardware of the joystick device.", "New in pygame 2.0.0dev11."]}, {"name": "joystick.Joystick.get_hat", "path": "ref/joystick#pygame.joystick.Joystick.get_hat", "type": "pygame.joystick", "text": ["Returns the current position of a position hat. The position is given as two values representing the x and y position for the hat. (0, 0) means centered. A value of -1 means left/down and a value of 1 means right/up: so (-1, 0) means left; (1, 0) means right; (0, 1) means up; (1, 1) means upper-right; etc.", "This value is digital, i.e., each coordinate can be -1, 0 or 1 but never in-between.", "The hat number must be between 0 and get_numhats() - 1."]}, {"name": "joystick.Joystick.get_id", "path": "ref/joystick#pygame.joystick.Joystick.get_id", "type": "pygame.joystick", "text": ["Returns the original device index for this device. This is the same value that was passed to the Joystick() constructor. This method can safely be called while the Joystick is not initialized.", "Deprecated since pygame 2.0.0: The original device index is not useful in pygame 2. Use get_instance_id() instead. Will be removed in Pygame 2.1."]}, {"name": "joystick.Joystick.get_init", "path": "ref/joystick#pygame.joystick.Joystick.get_init", "type": "pygame.joystick", "text": ["Return True if the Joystick object is currently initialised."]}, {"name": "joystick.Joystick.get_instance_id", "path": "ref/joystick#pygame.joystick.Joystick.get_instance_id", "type": "pygame.joystick", "text": ["Get the joystick instance ID. This matches the instance_id field that is given in joystick events.", "New in pygame 2.0.0dev11."]}, {"name": "joystick.Joystick.get_name", "path": "ref/joystick#pygame.joystick.Joystick.get_name", "type": "pygame.joystick", "text": ["Returns the system name for this joystick device. It is unknown what name the system will give to the Joystick, but it should be a unique name that identifies the device. This method can safely be called while the Joystick is not initialized."]}, {"name": "joystick.Joystick.get_numaxes", "path": "ref/joystick#pygame.joystick.Joystick.get_numaxes", "type": "pygame.joystick", "text": ["Returns the number of input axes are on a Joystick. There will usually be two for the position. Controls like rudders and throttles are treated as additional axes.", "The pygame.JOYAXISMOTION events will be in the range from -1.0 to 1.0. A value of 0.0 means the axis is centered. Gamepad devices will usually be -1, 0, or 1 with no values in between. Older analog joystick axes will not always use the full -1 to 1 range, and the centered value will be some area around 0.", "Analog joysticks usually have a bit of noise in their axis, which will generate a lot of rapid small motion events."]}, {"name": "joystick.Joystick.get_numballs", "path": "ref/joystick#pygame.joystick.Joystick.get_numballs", "type": "pygame.joystick", "text": ["Returns the number of trackball devices on a Joystick. These devices work similar to a mouse but they have no absolute position; they only have relative amounts of movement.", "The pygame.JOYBALLMOTION event will be sent when the trackball is rolled. It will report the amount of movement on the trackball."]}, {"name": "joystick.Joystick.get_numbuttons", "path": "ref/joystick#pygame.joystick.Joystick.get_numbuttons", "type": "pygame.joystick", "text": ["Returns the number of pushable buttons on the joystick. These buttons have a boolean (on or off) state.", "Buttons generate a pygame.JOYBUTTONDOWN and pygame.JOYBUTTONUP event when they are pressed and released."]}, {"name": "joystick.Joystick.get_numhats", "path": "ref/joystick#pygame.joystick.Joystick.get_numhats", "type": "pygame.joystick", "text": ["Returns the number of joystick hats on a Joystick. Hat devices are like miniature digital joysticks on a joystick. Each hat has two axes of input.", "The pygame.JOYHATMOTION event is generated when the hat changes position. The position attribute for the event contains a pair of values that are either -1, 0, or 1. A position of (0, 0) means the hat is centered."]}, {"name": "joystick.Joystick.get_power_level", "path": "ref/joystick#pygame.joystick.Joystick.get_power_level", "type": "pygame.joystick", "text": ["Get a string giving the power status of the device.", "One of: empty, low, medium, full, wired, max, or unknown.", "New in pygame 2.0.0dev11."]}, {"name": "joystick.Joystick.init", "path": "ref/joystick#pygame.joystick.Joystick.init", "type": "pygame.joystick", "text": ["Initialize the joystick, if it has been closed. It is safe to call this even if the joystick is already initialized.", "Deprecated since pygame 2.0.0: In future it will not be possible to reinitialise a closed Joystick object. Will be removed in Pygame 2.1."]}, {"name": "joystick.Joystick.quit", "path": "ref/joystick#pygame.joystick.Joystick.quit", "type": "pygame.joystick", "text": ["Close a Joystick object. After this the pygame event queue will no longer receive events from the device.", "It is safe to call this more than once."]}, {"name": "joystick.quit", "path": "ref/joystick#pygame.joystick.quit", "type": "pygame.joystick", "text": ["Uninitialize the joystick module. After you call this any existing joystick objects will no longer work.", "It is safe to call this function more than once."]}, {"name": "key", "path": "ref/key", "type": "pygame.key", "text": ["This module contains functions for dealing with the keyboard.", "The pygame.event queue gets pygame.KEYDOWN and pygame.KEYUP events when the keyboard buttons are pressed and released. Both events have key and mod attributes.", "The pygame.KEYDOWN event has the additional attributes unicode and scancode.", "New in pygame 2.0.0: The pygame.TEXTINPUT event is preferred to the unicode attribute of pygame.KEYDOWN. The attribute text contains the input.", "The following is a list of all the constants (from pygame.locals) used to represent keyboard keys.", "Portability note: The integers for key constants differ between pygame 1 and 2. Always use key constants (K_a) rather than integers directly (97) so that your key handling code works well on both pygame 1 and pygame 2.", "The keyboard also has a list of modifier states (from pygame.locals) that can be assembled by bitwise-ORing them together.", "The modifier information is contained in the mod attribute of the pygame.KEYDOWN and pygame.KEYUP events. The mod attribute is a bitmask of all the modifier keys that were in a pressed state when the event occurred. The modifier information can be decoded using a bitwise AND (except for KMOD_NONE, which should be compared using equals ==). For example:", "Returns True when the display window has keyboard focus from the system. If the display needs to ensure it does not lose keyboard focus, it can use pygame.event.set_grab() to grab all input.", "Returns a sequence of boolean values representing the state of every key on the keyboard. Use the key constant values to index the array. A True value means the that button is pressed.", "Note", "Getting the list of pushed buttons with this function is not the proper way to handle text entry from the user. There is no way to know the order of keys pressed, and rapidly pushed keys can be completely unnoticed between two calls to pygame.key.get_pressed(). There is also no way to translate these pushed keys into a fully translated character value. See the pygame.KEYDOWN events on the pygame.event queue for this functionality.", "Returns a single integer representing a bitmask of all the modifier keys being held. Using bitwise operators you can test if specific modifier keys are pressed.", "Create a bitmask of the modifier key constants you want to impose on your program.", "When the keyboard repeat is enabled, keys that are held down will generate multiple pygame.KEYDOWN events. The delay parameter is the number of milliseconds before the first repeated pygame.KEYDOWN event will be sent. After that, another pygame.KEYDOWN event will be sent every interval milliseconds. If a delay value is provided and an interval value is not provided or is 0, then the interval will be set to the same value as delay.", "To disable key repeat call this function with no arguments or with delay set to 0.", "When pygame is initialized the key repeat is disabled.", "Changed in pygame 2.0.0: A ValueError is now raised (instead of a pygame.error) if delay or interval is < 0.", "Get the delay and interval keyboard repeat values. Refer to pygame.key.set_repeat() for a description of these values.", "New in pygame 1.8.", "Get the descriptive name of the button from a keyboard button id constant.", "Get the key identifier code from the descriptive name of the key. This returns an integer matching one of the K_* keycodes. For example:", "New in pygame 2.0.0.", "Start receiving pygame.TEXTEDITING and pygame.TEXTINPUT events.", "A pygame.TEXTEDITING event is received when an IME composition is started or changed. It contains the composition text, length, and editing start position within the composition (attributes text, length, and start, respectively). When the composition is committed (or non-IME input is received), a pygame.TEXTINPUT event is generated.", "Text input events handling is on by default.", "New in pygame 2.0.0.", "Stop receiving pygame.TEXTEDITING and pygame.TEXTINPUT events.", "Text input events handling is on by default", "New in pygame 2.0.0.", "This sets the rectangle used for typing with an IME. It controls where the candidate list will open, if supported.", "New in pygame 2.0.0."]}, {"name": "key.get_focused", "path": "ref/key#pygame.key.get_focused", "type": "pygame.key", "text": ["Returns True when the display window has keyboard focus from the system. If the display needs to ensure it does not lose keyboard focus, it can use pygame.event.set_grab() to grab all input."]}, {"name": "key.get_mods", "path": "ref/key#pygame.key.get_mods", "type": "pygame.key", "text": ["Returns a single integer representing a bitmask of all the modifier keys being held. Using bitwise operators you can test if specific modifier keys are pressed."]}, {"name": "key.get_pressed", "path": "ref/key#pygame.key.get_pressed", "type": "pygame.key", "text": ["Returns a sequence of boolean values representing the state of every key on the keyboard. Use the key constant values to index the array. A True value means the that button is pressed.", "Note", "Getting the list of pushed buttons with this function is not the proper way to handle text entry from the user. There is no way to know the order of keys pressed, and rapidly pushed keys can be completely unnoticed between two calls to pygame.key.get_pressed(). There is also no way to translate these pushed keys into a fully translated character value. See the pygame.KEYDOWN events on the pygame.event queue for this functionality."]}, {"name": "key.get_repeat", "path": "ref/key#pygame.key.get_repeat", "type": "pygame.key", "text": ["Get the delay and interval keyboard repeat values. Refer to pygame.key.set_repeat() for a description of these values.", "New in pygame 1.8."]}, {"name": "key.key_code", "path": "ref/key#pygame.key.key_code", "type": "pygame.key", "text": ["Get the key identifier code from the descriptive name of the key. This returns an integer matching one of the K_* keycodes. For example:", "New in pygame 2.0.0."]}, {"name": "key.name", "path": "ref/key#pygame.key.name", "type": "pygame.key", "text": ["Get the descriptive name of the button from a keyboard button id constant."]}, {"name": "key.set_mods", "path": "ref/key#pygame.key.set_mods", "type": "pygame.key", "text": ["Create a bitmask of the modifier key constants you want to impose on your program."]}, {"name": "key.set_repeat", "path": "ref/key#pygame.key.set_repeat", "type": "pygame.key", "text": ["When the keyboard repeat is enabled, keys that are held down will generate multiple pygame.KEYDOWN events. The delay parameter is the number of milliseconds before the first repeated pygame.KEYDOWN event will be sent. After that, another pygame.KEYDOWN event will be sent every interval milliseconds. If a delay value is provided and an interval value is not provided or is 0, then the interval will be set to the same value as delay.", "To disable key repeat call this function with no arguments or with delay set to 0.", "When pygame is initialized the key repeat is disabled.", "Changed in pygame 2.0.0: A ValueError is now raised (instead of a pygame.error) if delay or interval is < 0."]}, {"name": "key.set_text_input_rect", "path": "ref/key#pygame.key.set_text_input_rect", "type": "pygame.key", "text": ["This sets the rectangle used for typing with an IME. It controls where the candidate list will open, if supported.", "New in pygame 2.0.0."]}, {"name": "key.start_text_input", "path": "ref/key#pygame.key.start_text_input", "type": "pygame.key", "text": ["Start receiving pygame.TEXTEDITING and pygame.TEXTINPUT events.", "A pygame.TEXTEDITING event is received when an IME composition is started or changed. It contains the composition text, length, and editing start position within the composition (attributes text, length, and start, respectively). When the composition is committed (or non-IME input is received), a pygame.TEXTINPUT event is generated.", "Text input events handling is on by default.", "New in pygame 2.0.0."]}, {"name": "key.stop_text_input", "path": "ref/key#pygame.key.stop_text_input", "type": "pygame.key", "text": ["Stop receiving pygame.TEXTEDITING and pygame.TEXTINPUT events.", "Text input events handling is on by default", "New in pygame 2.0.0."]}, {"name": "locals", "path": "ref/locals", "type": "pygame.locals", "text": ["This module contains various constants used by pygame. Its contents are automatically placed in the pygame module namespace. However, an application can use pygame.locals to include only the pygame constants with a from\npygame.locals import *.", "Detailed descriptions of the various constants can be found throughout the pygame documentation. Here are the locations of some of them."]}, {"name": "mask", "path": "ref/mask", "type": "pygame.mask", "text": ["Useful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel to store which parts collide.", "New in pygame 1.8.", "Creates a Mask object from the given surface by setting all the opaque pixels and not setting the transparent pixels.", "If the surface uses a color-key, then it is used to decide which bits in the resulting mask are set. All the pixels that are not equal to the color-key are set and the pixels equal to the color-key are not set.", "If a color-key is not used, then the alpha value of each pixel is used to decide which bits in the resulting mask are set. All the pixels that have an alpha value greater than the threshold parameter are set and the pixels with an alpha value less than or equal to the threshold are not set.", "a newly created Mask object from the given surface", "Mask", "Note", "This function is used to create the masks for pygame.sprite.collide_mask().", "This is a more featureful method of getting a Mask from a surface.", "If the optional othersurface is not used, all the pixels within the threshold of the color parameter are set in the resulting mask.", "If the optional othersurface is used, every pixel in the first surface that is within the threshold of the corresponding pixel in othersurface is set in the resulting mask.", "a newly created Mask object from the given surface", "Mask", "A Mask object is used to represent a 2D bitmask. Each bit in the mask represents a pixel. 1 is used to indicate a set bit and 0 is used to indicate an unset bit. Set bits in a mask can be used to detect collisions with other masks and their set bits.", "A filled mask has all of its bits set to 1, conversely an unfilled/cleared/empty mask has all of its bits set to 0. Masks can be created unfilled (default) or filled by using the fill parameter. Masks can also be cleared or filled using the pygame.mask.Mask.clear() and pygame.mask.Mask.fill() methods respectively.", "A mask's coordinates start in the top left corner at (0, 0) just like pygame.Surface. Individual bits can be accessed using the pygame.mask.Mask.get_at() and pygame.mask.Mask.set_at() methods.", "The methods overlap(), overlap_area(), overlap_mask(), draw(), erase(), and convolve() use an offset parameter to indicate the offset of another mask's top left corner from the calling mask's top left corner. The calling mask's top left corner is considered to be the origin (0, 0). Offsets are a tuple or list of 2 integer values (x_offset, y_offset). Positive and negative offset values are supported.", "a newly created Mask object", "Mask", "Changed in pygame 2.0.0: Shallow copy support added. The Mask class supports the special method __copy__() and shallow copying via copy.copy(mask).", "Changed in pygame 2.0.0: Subclassing support added. The Mask class can be used as a base class.", "Changed in pygame 1.9.5: Added support for keyword arguments.", "Changed in pygame 1.9.5: Added the optional keyword parameter fill.", "Changed in pygame 1.9.5: Added support for masks with a width and/or a height of 0.", "Note", "If a mask subclass needs to copy any instance specific attributes then it should override the __copy__() method. The overridden __copy__() method needs to call super().__copy__() and then copy the required data as in the following example code.", "New in pygame 2.0.0.", "Returns a new pygame.Rect() object based on the size of this mask. The rect's default position will be (0, 0) and its default width and height will be the same as this mask's. The rect's attributes can be altered via pygame.Rect() attribute keyword arguments/values passed into this method. As an example, a_mask.get_rect(center=(10, 5)) would create a pygame.Rect() based on the mask's size centered at the given position.", "New in pygame 2.0.0.", "None", "NoneType", "IndexError -- if the position is outside of the mask's bounds", "Returns the first point of intersection encountered between this mask and othermask. A point of intersection is 2 overlapping set bits.", "The current algorithm searches the overlapping area in sizeof(unsigned long int) * CHAR_BIT bit wide column blocks (the value of sizeof(unsigned long int) * CHAR_BIT is platform dependent, for clarity it will be referred to as W). Starting at the top left corner it checks bits 0 to W - 1 of the first row ((0, 0) to (W - 1, 0)) then continues to the next row ((0, 1) to (W - 1, 1)). Once this entire column block is checked, it continues to the next one (W to 2 * W - 1). This is repeated until it finds a point of intersection or the entire overlapping area is checked.", "point of intersection or None if no intersection", "tuple(int, int) or NoneType", "Returns the number of overlapping set bits between between this mask and othermask.", "This can be useful for collision detection. An approximate collision normal can be found by calculating the gradient of the overlapping area through the finite difference.", "the number of overlapping set bits", "int", "Returns a Mask, the same size as this mask, containing the overlapping set bits between this mask and othermask.", "a newly created Mask with the overlapping bits set", "Mask", "Sets all bits in the mask to 1.", "Sets all bits in the mask to 0.", "Flips all of the bits in the mask. All the set bits are cleared to 0 and all the unset bits are set to 1.", "Creates a new Mask of the requested size with its bits scaled from this mask.", "Performs a bitwise OR, drawing othermask onto this mask.", "None", "NoneType", "Erases (clears) all bits set in othermask from this mask.", "None", "NoneType", "Finds the centroid (the center mass of the set bits) for this mask.", "Finds the approximate orientation (from -90 to 90 degrees) of the set bits in the mask. This works best if performed on a mask with only one connected component.", "Note", "See connected_component() for details on how a connected component is calculated.", "Returns a list of points of the outline of the first connected component encountered in the mask. To find a connected component, the mask is searched per row (left to right) starting in the top left corner.", "The every optional parameter skips set bits in the outline. For example, setting it to 10 would return a list of every 10th set bit in the outline.", "Note", "See connected_component() for details on how a connected component is calculated.", "Convolve this mask with the given othermask.", "a Mask with the (i - offset[0], j - offset[1]) bit set, if shifting othermask (such that its bottom right corner is at (i, j)) causes it to overlap with this mask", "If an outputmask is specified, the output is drawn onto it and it is returned. Otherwise a mask of size (MAX(0, width + othermask's\nwidth - 1), MAX(0, height + othermask's height - 1)) is created and returned.", "Mask", "A connected component is a group (1 or more) of connected set bits (orthogonally and diagonally). The SAUF algorithm, which checks 8 point connectivity, is used to find a connected component in the mask.", "By default this method will return a Mask containing the largest connected component in the mask. Optionally, a bit coordinate can be specified and the connected component containing it will be returned. If the bit at the given location is not set, the returned Mask will be empty (no bits set).", "If the pos parameter is provided then the mask returned will have the connected component that contains this position. An empty mask will be returned if the pos parameter selects an unset bit.", "Provides a list containing a Mask object for each connected component.", "Note", "See connected_component() for details on how a connected component is calculated.", "Provides a list containing a bounding rect for each connected component.", "Note", "See connected_component() for details on how a connected component is calculated.", "Draws this mask on the given surface. Set bits (bits set to 1) and unset bits (bits set to 0) can be drawn onto a surface.", "the surface parameter (or a newly created surface if no surface parameter was provided) with this mask drawn on it", "Surface", "ValueError -- if the setsurface parameter or unsetsurface parameter does not have the same format (bytesize/bitsize/alpha) as the surface parameter", "Note", "To skip drawing the set bits, both setsurface and setcolor must be None. The setsurface parameter defaults to None, but setcolor defaults to a color value and therefore must be set to None.", "Note", "To skip drawing the unset bits, both unsetsurface and unsetcolor must be None. The unsetsurface parameter defaults to None, but unsetcolor defaults to a color value and therefore must be set to None.", "New in pygame 2.0.0."]}, {"name": "mask.from_surface", "path": "ref/mask#pygame.mask.from_surface", "type": "pygame.mask", "text": ["Creates a Mask object from the given surface by setting all the opaque pixels and not setting the transparent pixels.", "If the surface uses a color-key, then it is used to decide which bits in the resulting mask are set. All the pixels that are not equal to the color-key are set and the pixels equal to the color-key are not set.", "If a color-key is not used, then the alpha value of each pixel is used to decide which bits in the resulting mask are set. All the pixels that have an alpha value greater than the threshold parameter are set and the pixels with an alpha value less than or equal to the threshold are not set.", "a newly created Mask object from the given surface", "Mask", "Note", "This function is used to create the masks for pygame.sprite.collide_mask()."]}, {"name": "mask.from_threshold", "path": "ref/mask#pygame.mask.from_threshold", "type": "pygame.mask", "text": ["This is a more featureful method of getting a Mask from a surface.", "If the optional othersurface is not used, all the pixels within the threshold of the color parameter are set in the resulting mask.", "If the optional othersurface is used, every pixel in the first surface that is within the threshold of the corresponding pixel in othersurface is set in the resulting mask.", "a newly created Mask object from the given surface", "Mask"]}, {"name": "mask.Mask", "path": "ref/mask#pygame.mask.Mask", "type": "pygame.mask", "text": ["A Mask object is used to represent a 2D bitmask. Each bit in the mask represents a pixel. 1 is used to indicate a set bit and 0 is used to indicate an unset bit. Set bits in a mask can be used to detect collisions with other masks and their set bits.", "A filled mask has all of its bits set to 1, conversely an unfilled/cleared/empty mask has all of its bits set to 0. Masks can be created unfilled (default) or filled by using the fill parameter. Masks can also be cleared or filled using the pygame.mask.Mask.clear() and pygame.mask.Mask.fill() methods respectively.", "A mask's coordinates start in the top left corner at (0, 0) just like pygame.Surface. Individual bits can be accessed using the pygame.mask.Mask.get_at() and pygame.mask.Mask.set_at() methods.", "The methods overlap(), overlap_area(), overlap_mask(), draw(), erase(), and convolve() use an offset parameter to indicate the offset of another mask's top left corner from the calling mask's top left corner. The calling mask's top left corner is considered to be the origin (0, 0). Offsets are a tuple or list of 2 integer values (x_offset, y_offset). Positive and negative offset values are supported.", "a newly created Mask object", "Mask", "Changed in pygame 2.0.0: Shallow copy support added. The Mask class supports the special method __copy__() and shallow copying via copy.copy(mask).", "Changed in pygame 2.0.0: Subclassing support added. The Mask class can be used as a base class.", "Changed in pygame 1.9.5: Added support for keyword arguments.", "Changed in pygame 1.9.5: Added the optional keyword parameter fill.", "Changed in pygame 1.9.5: Added support for masks with a width and/or a height of 0.", "Note", "If a mask subclass needs to copy any instance specific attributes then it should override the __copy__() method. The overridden __copy__() method needs to call super().__copy__() and then copy the required data as in the following example code.", "New in pygame 2.0.0.", "Returns a new pygame.Rect() object based on the size of this mask. The rect's default position will be (0, 0) and its default width and height will be the same as this mask's. The rect's attributes can be altered via pygame.Rect() attribute keyword arguments/values passed into this method. As an example, a_mask.get_rect(center=(10, 5)) would create a pygame.Rect() based on the mask's size centered at the given position.", "New in pygame 2.0.0.", "None", "NoneType", "IndexError -- if the position is outside of the mask's bounds", "Returns the first point of intersection encountered between this mask and othermask. A point of intersection is 2 overlapping set bits.", "The current algorithm searches the overlapping area in sizeof(unsigned long int) * CHAR_BIT bit wide column blocks (the value of sizeof(unsigned long int) * CHAR_BIT is platform dependent, for clarity it will be referred to as W). Starting at the top left corner it checks bits 0 to W - 1 of the first row ((0, 0) to (W - 1, 0)) then continues to the next row ((0, 1) to (W - 1, 1)). Once this entire column block is checked, it continues to the next one (W to 2 * W - 1). This is repeated until it finds a point of intersection or the entire overlapping area is checked.", "point of intersection or None if no intersection", "tuple(int, int) or NoneType", "Returns the number of overlapping set bits between between this mask and othermask.", "This can be useful for collision detection. An approximate collision normal can be found by calculating the gradient of the overlapping area through the finite difference.", "the number of overlapping set bits", "int", "Returns a Mask, the same size as this mask, containing the overlapping set bits between this mask and othermask.", "a newly created Mask with the overlapping bits set", "Mask", "Sets all bits in the mask to 1.", "Sets all bits in the mask to 0.", "Flips all of the bits in the mask. All the set bits are cleared to 0 and all the unset bits are set to 1.", "Creates a new Mask of the requested size with its bits scaled from this mask.", "Performs a bitwise OR, drawing othermask onto this mask.", "None", "NoneType", "Erases (clears) all bits set in othermask from this mask.", "None", "NoneType", "Finds the centroid (the center mass of the set bits) for this mask.", "Finds the approximate orientation (from -90 to 90 degrees) of the set bits in the mask. This works best if performed on a mask with only one connected component.", "Note", "See connected_component() for details on how a connected component is calculated.", "Returns a list of points of the outline of the first connected component encountered in the mask. To find a connected component, the mask is searched per row (left to right) starting in the top left corner.", "The every optional parameter skips set bits in the outline. For example, setting it to 10 would return a list of every 10th set bit in the outline.", "Note", "See connected_component() for details on how a connected component is calculated.", "Convolve this mask with the given othermask.", "a Mask with the (i - offset[0], j - offset[1]) bit set, if shifting othermask (such that its bottom right corner is at (i, j)) causes it to overlap with this mask", "If an outputmask is specified, the output is drawn onto it and it is returned. Otherwise a mask of size (MAX(0, width + othermask's\nwidth - 1), MAX(0, height + othermask's height - 1)) is created and returned.", "Mask", "A connected component is a group (1 or more) of connected set bits (orthogonally and diagonally). The SAUF algorithm, which checks 8 point connectivity, is used to find a connected component in the mask.", "By default this method will return a Mask containing the largest connected component in the mask. Optionally, a bit coordinate can be specified and the connected component containing it will be returned. If the bit at the given location is not set, the returned Mask will be empty (no bits set).", "If the pos parameter is provided then the mask returned will have the connected component that contains this position. An empty mask will be returned if the pos parameter selects an unset bit.", "Provides a list containing a Mask object for each connected component.", "Note", "See connected_component() for details on how a connected component is calculated.", "Provides a list containing a bounding rect for each connected component.", "Note", "See connected_component() for details on how a connected component is calculated.", "Draws this mask on the given surface. Set bits (bits set to 1) and unset bits (bits set to 0) can be drawn onto a surface.", "the surface parameter (or a newly created surface if no surface parameter was provided) with this mask drawn on it", "Surface", "ValueError -- if the setsurface parameter or unsetsurface parameter does not have the same format (bytesize/bitsize/alpha) as the surface parameter", "Note", "To skip drawing the set bits, both setsurface and setcolor must be None. The setsurface parameter defaults to None, but setcolor defaults to a color value and therefore must be set to None.", "Note", "To skip drawing the unset bits, both unsetsurface and unsetcolor must be None. The unsetsurface parameter defaults to None, but unsetcolor defaults to a color value and therefore must be set to None.", "New in pygame 2.0.0."]}, {"name": "mask.Mask.angle", "path": "ref/mask#pygame.mask.Mask.angle", "type": "pygame.mask", "text": ["Finds the approximate orientation (from -90 to 90 degrees) of the set bits in the mask. This works best if performed on a mask with only one connected component.", "Note", "See connected_component() for details on how a connected component is calculated."]}, {"name": "mask.Mask.centroid", "path": "ref/mask#pygame.mask.Mask.centroid", "type": "pygame.mask", "text": ["Finds the centroid (the center mass of the set bits) for this mask."]}, {"name": "mask.Mask.clear", "path": "ref/mask#pygame.mask.Mask.clear", "type": "pygame.mask", "text": ["Sets all bits in the mask to 0."]}, {"name": "mask.Mask.connected_component", "path": "ref/mask#pygame.mask.Mask.connected_component", "type": "pygame.mask", "text": ["A connected component is a group (1 or more) of connected set bits (orthogonally and diagonally). The SAUF algorithm, which checks 8 point connectivity, is used to find a connected component in the mask.", "By default this method will return a Mask containing the largest connected component in the mask. Optionally, a bit coordinate can be specified and the connected component containing it will be returned. If the bit at the given location is not set, the returned Mask will be empty (no bits set).", "If the pos parameter is provided then the mask returned will have the connected component that contains this position. An empty mask will be returned if the pos parameter selects an unset bit."]}, {"name": "mask.Mask.connected_components", "path": "ref/mask#pygame.mask.Mask.connected_components", "type": "pygame.mask", "text": ["Provides a list containing a Mask object for each connected component.", "Note", "See connected_component() for details on how a connected component is calculated."]}, {"name": "mask.Mask.convolve", "path": "ref/mask#pygame.mask.Mask.convolve", "type": "pygame.mask", "text": ["Convolve this mask with the given othermask.", "a Mask with the (i - offset[0], j - offset[1]) bit set, if shifting othermask (such that its bottom right corner is at (i, j)) causes it to overlap with this mask", "If an outputmask is specified, the output is drawn onto it and it is returned. Otherwise a mask of size (MAX(0, width + othermask's\nwidth - 1), MAX(0, height + othermask's height - 1)) is created and returned.", "Mask"]}, {"name": "mask.Mask.copy", "path": "ref/mask#pygame.mask.Mask.copy", "type": "pygame.mask", "text": ["Note", "If a mask subclass needs to copy any instance specific attributes then it should override the __copy__() method. The overridden __copy__() method needs to call super().__copy__() and then copy the required data as in the following example code.", "New in pygame 2.0.0."]}, {"name": "mask.Mask.count", "path": "ref/mask#pygame.mask.Mask.count", "type": "pygame.mask", "text": []}, {"name": "mask.Mask.draw", "path": "ref/mask#pygame.mask.Mask.draw", "type": "pygame.mask", "text": ["Performs a bitwise OR, drawing othermask onto this mask.", "None", "NoneType"]}, {"name": "mask.Mask.erase", "path": "ref/mask#pygame.mask.Mask.erase", "type": "pygame.mask", "text": ["Erases (clears) all bits set in othermask from this mask.", "None", "NoneType"]}, {"name": "mask.Mask.fill", "path": "ref/mask#pygame.mask.Mask.fill", "type": "pygame.mask", "text": ["Sets all bits in the mask to 1."]}, {"name": "mask.Mask.get_at", "path": "ref/mask#pygame.mask.Mask.get_at", "type": "pygame.mask", "text": []}, {"name": "mask.Mask.get_bounding_rects", "path": "ref/mask#pygame.mask.Mask.get_bounding_rects", "type": "pygame.mask", "text": ["Provides a list containing a bounding rect for each connected component.", "Note", "See connected_component() for details on how a connected component is calculated."]}, {"name": "mask.Mask.get_rect", "path": "ref/mask#pygame.mask.Mask.get_rect", "type": "pygame.mask", "text": ["Returns a new pygame.Rect() object based on the size of this mask. The rect's default position will be (0, 0) and its default width and height will be the same as this mask's. The rect's attributes can be altered via pygame.Rect() attribute keyword arguments/values passed into this method. As an example, a_mask.get_rect(center=(10, 5)) would create a pygame.Rect() based on the mask's size centered at the given position.", "New in pygame 2.0.0."]}, {"name": "mask.Mask.get_size", "path": "ref/mask#pygame.mask.Mask.get_size", "type": "pygame.mask", "text": []}, {"name": "mask.Mask.invert", "path": "ref/mask#pygame.mask.Mask.invert", "type": "pygame.mask", "text": ["Flips all of the bits in the mask. All the set bits are cleared to 0 and all the unset bits are set to 1."]}, {"name": "mask.Mask.outline", "path": "ref/mask#pygame.mask.Mask.outline", "type": "pygame.mask", "text": ["Returns a list of points of the outline of the first connected component encountered in the mask. To find a connected component, the mask is searched per row (left to right) starting in the top left corner.", "The every optional parameter skips set bits in the outline. For example, setting it to 10 would return a list of every 10th set bit in the outline.", "Note", "See connected_component() for details on how a connected component is calculated."]}, {"name": "mask.Mask.overlap", "path": "ref/mask#pygame.mask.Mask.overlap", "type": "pygame.mask", "text": ["Returns the first point of intersection encountered between this mask and othermask. A point of intersection is 2 overlapping set bits.", "The current algorithm searches the overlapping area in sizeof(unsigned long int) * CHAR_BIT bit wide column blocks (the value of sizeof(unsigned long int) * CHAR_BIT is platform dependent, for clarity it will be referred to as W). Starting at the top left corner it checks bits 0 to W - 1 of the first row ((0, 0) to (W - 1, 0)) then continues to the next row ((0, 1) to (W - 1, 1)). Once this entire column block is checked, it continues to the next one (W to 2 * W - 1). This is repeated until it finds a point of intersection or the entire overlapping area is checked.", "point of intersection or None if no intersection", "tuple(int, int) or NoneType"]}, {"name": "mask.Mask.overlap_area", "path": "ref/mask#pygame.mask.Mask.overlap_area", "type": "pygame.mask", "text": ["Returns the number of overlapping set bits between between this mask and othermask.", "This can be useful for collision detection. An approximate collision normal can be found by calculating the gradient of the overlapping area through the finite difference.", "the number of overlapping set bits", "int"]}, {"name": "mask.Mask.overlap_mask", "path": "ref/mask#pygame.mask.Mask.overlap_mask", "type": "pygame.mask", "text": ["Returns a Mask, the same size as this mask, containing the overlapping set bits between this mask and othermask.", "a newly created Mask with the overlapping bits set", "Mask"]}, {"name": "mask.Mask.scale", "path": "ref/mask#pygame.mask.Mask.scale", "type": "pygame.mask", "text": ["Creates a new Mask of the requested size with its bits scaled from this mask."]}, {"name": "mask.Mask.set_at", "path": "ref/mask#pygame.mask.Mask.set_at", "type": "pygame.mask", "text": ["None", "NoneType", "IndexError -- if the position is outside of the mask's bounds"]}, {"name": "mask.Mask.to_surface", "path": "ref/mask#pygame.mask.Mask.to_surface", "type": "pygame.mask", "text": ["Draws this mask on the given surface. Set bits (bits set to 1) and unset bits (bits set to 0) can be drawn onto a surface.", "the surface parameter (or a newly created surface if no surface parameter was provided) with this mask drawn on it", "Surface", "ValueError -- if the setsurface parameter or unsetsurface parameter does not have the same format (bytesize/bitsize/alpha) as the surface parameter", "Note", "To skip drawing the set bits, both setsurface and setcolor must be None. The setsurface parameter defaults to None, but setcolor defaults to a color value and therefore must be set to None.", "Note", "To skip drawing the unset bits, both unsetsurface and unsetcolor must be None. The unsetsurface parameter defaults to None, but unsetcolor defaults to a color value and therefore must be set to None.", "New in pygame 2.0.0."]}, {"name": "math", "path": "ref/math", "type": "pygame.math", "text": ["The pygame math module currently provides Vector classes in two and three dimensions, Vector2 and Vector3 respectively.", "They support the following numerical operations: vec+vec, vec-vec, vec*number, number*vec, vec/number, vec//number, vec+=vec, vec-=vec, vec*=number, vec/=number, vec//=number.", "All these operations will be performed elementwise. In addition vec*vec will perform a scalar-product (a.k.a. dot-product). If you want to multiply every element from vector v with every element from vector w you can use the elementwise method: v.elementwise() * w", "The coordinates of a vector can be retrieved or set using attributes or subscripts", "Multiple coordinates can be set using slices or swizzling", "New in pygame 1.9.2pre.", "Changed in pygame 1.9.4: Removed experimental notice.", "Changed in pygame 1.9.4: Allow scalar construction like GLSL Vector2(2) == Vector2(2.0, 2.0)", "Changed in pygame 1.9.4: pygame.math required import. More convenient pygame.Vector2 and pygame.Vector3.", "Some general information about the Vector2 class.", "calculates the third component of the cross-product.", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude_squared() == vec.x**2 + vec.y**2. This is faster than vec.magnitude() because it avoids the square root.", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length() == math.sqrt(vec.x**2 + vec.y**2)", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length_squared() == vec.x**2 + vec.y**2. This is faster than vec.length() because it avoids the square root.", "Returns a new vector that has length equal to 1 and the same direction as self.", "Normalizes the vector so that it has length equal to 1. The direction of the vector is not changed.", "Returns True if the vector has length equal to 1. Otherwise it returns False.", "Scales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length 0. If the vector is the zero vector (i.e. has length 0 thus no direction) a ValueError is raised.", "Returns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.", "Changes the direction of self as if it would have been reflected of a surface with the given surface normal.", "Returns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self and other the result is going to be. It must be a value between 0 and 1 where 0 means self and 1 means other will be returned.", "Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range [-1, 1]. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.", "Applies the following operation to each element of the vector.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns the angle between self and the given vector.", "Returns a tuple (r, phi) where r is the radial distance, and phi is the azimuthal angle.", "Sets x and y from a tuple (r, phi) where r is the radial distance, and phi is the azimuthal angle.", "Sets coordinates x and y in place.", "New in pygame 1.9.5.", "Some general information about the Vector3 class.", "calculates the cross-product.", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2. This is faster than vec.magnitude() because it avoids the square root.", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2. This is faster than vec.length() because it avoids the square root.", "Returns a new vector that has length equal to 1 and the same direction as self.", "Normalizes the vector so that it has length equal to 1. The direction of the vector is not changed.", "Returns True if the vector has length equal to 1. Otherwise it returns False.", "Scales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length 0. If the vector is the zero vector (i.e. has length 0 thus no direction) a ValueError is raised.", "Returns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.", "Changes the direction of self as if it would have been reflected of a surface with the given surface normal.", "Returns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self an other the result is going to be. It must be a value between 0 and 1, where 0 means self and 1 means other will be returned.", "Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range [-1, 1]. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.", "Applies the following operation to each element of the vector.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees around the given axis.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians around the given axis.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the given axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the given axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the x-axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the x-axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the y-axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the y-axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the z-axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the z-axis by the given angle in radians. The length of the vector is not changed.", "Returns the angle between self and the given vector.", "Returns a tuple (r, theta, phi) where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.", "Sets x, y and z from a tuple (r, theta, phi) where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.", "Sets coordinates x, y, and z in place.", "New in pygame 1.9.5.", "DEPRECATED: Not needed anymore. Will be removed in a later version.", "Enables swizzling for all vectors until disable_swizzling() is called. By default swizzling is disabled.", "Lets you get or set multiple coordinates as one attribute, eg vec.xyz = 1, 2, 3.", "DEPRECATED: Not needed anymore. Will be removed in a later version.", "Disables swizzling for all vectors until enable_swizzling() is called. By default swizzling is disabled."]}, {"name": "math.disable_swizzling", "path": "ref/math#pygame.math.disable_swizzling", "type": "pygame.math", "text": ["DEPRECATED: Not needed anymore. Will be removed in a later version.", "Disables swizzling for all vectors until enable_swizzling() is called. By default swizzling is disabled."]}, {"name": "math.enable_swizzling", "path": "ref/math#pygame.math.enable_swizzling", "type": "pygame.math", "text": ["DEPRECATED: Not needed anymore. Will be removed in a later version.", "Enables swizzling for all vectors until disable_swizzling() is called. By default swizzling is disabled.", "Lets you get or set multiple coordinates as one attribute, eg vec.xyz = 1, 2, 3."]}, {"name": "math.Vector2", "path": "ref/math#pygame.math.Vector2", "type": "pygame.math", "text": ["Some general information about the Vector2 class.", "calculates the third component of the cross-product.", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude_squared() == vec.x**2 + vec.y**2. This is faster than vec.magnitude() because it avoids the square root.", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length() == math.sqrt(vec.x**2 + vec.y**2)", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length_squared() == vec.x**2 + vec.y**2. This is faster than vec.length() because it avoids the square root.", "Returns a new vector that has length equal to 1 and the same direction as self.", "Normalizes the vector so that it has length equal to 1. The direction of the vector is not changed.", "Returns True if the vector has length equal to 1. Otherwise it returns False.", "Scales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length 0. If the vector is the zero vector (i.e. has length 0 thus no direction) a ValueError is raised.", "Returns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.", "Changes the direction of self as if it would have been reflected of a surface with the given surface normal.", "Returns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self and other the result is going to be. It must be a value between 0 and 1 where 0 means self and 1 means other will be returned.", "Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range [-1, 1]. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.", "Applies the following operation to each element of the vector.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns the angle between self and the given vector.", "Returns a tuple (r, phi) where r is the radial distance, and phi is the azimuthal angle.", "Sets x and y from a tuple (r, phi) where r is the radial distance, and phi is the azimuthal angle.", "Sets coordinates x and y in place.", "New in pygame 1.9.5."]}, {"name": "math.Vector2.angle_to", "path": "ref/math#pygame.math.Vector2.angle_to", "type": "pygame.math", "text": ["Returns the angle between self and the given vector."]}, {"name": "math.Vector2.as_polar", "path": "ref/math#pygame.math.Vector2.as_polar", "type": "pygame.math", "text": ["Returns a tuple (r, phi) where r is the radial distance, and phi is the azimuthal angle."]}, {"name": "math.Vector2.cross", "path": "ref/math#pygame.math.Vector2.cross", "type": "pygame.math", "text": ["calculates the third component of the cross-product."]}, {"name": "math.Vector2.distance_squared_to", "path": "ref/math#pygame.math.Vector2.distance_squared_to", "type": "pygame.math", "text": []}, {"name": "math.Vector2.distance_to", "path": "ref/math#pygame.math.Vector2.distance_to", "type": "pygame.math", "text": []}, {"name": "math.Vector2.dot", "path": "ref/math#pygame.math.Vector2.dot", "type": "pygame.math", "text": []}, {"name": "math.Vector2.elementwise", "path": "ref/math#pygame.math.Vector2.elementwise", "type": "pygame.math", "text": ["Applies the following operation to each element of the vector."]}, {"name": "math.Vector2.from_polar", "path": "ref/math#pygame.math.Vector2.from_polar", "type": "pygame.math", "text": ["Sets x and y from a tuple (r, phi) where r is the radial distance, and phi is the azimuthal angle."]}, {"name": "math.Vector2.is_normalized", "path": "ref/math#pygame.math.Vector2.is_normalized", "type": "pygame.math", "text": ["Returns True if the vector has length equal to 1. Otherwise it returns False."]}, {"name": "math.Vector2.length", "path": "ref/math#pygame.math.Vector2.length", "type": "pygame.math", "text": ["calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length() == math.sqrt(vec.x**2 + vec.y**2)"]}, {"name": "math.Vector2.length_squared", "path": "ref/math#pygame.math.Vector2.length_squared", "type": "pygame.math", "text": ["calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length_squared() == vec.x**2 + vec.y**2. This is faster than vec.length() because it avoids the square root."]}, {"name": "math.Vector2.lerp", "path": "ref/math#pygame.math.Vector2.lerp", "type": "pygame.math", "text": ["Returns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self and other the result is going to be. It must be a value between 0 and 1 where 0 means self and 1 means other will be returned."]}, {"name": "math.Vector2.magnitude", "path": "ref/math#pygame.math.Vector2.magnitude", "type": "pygame.math", "text": ["calculates the magnitude of the vector which follows from the theorem: vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)"]}, {"name": "math.Vector2.magnitude_squared", "path": "ref/math#pygame.math.Vector2.magnitude_squared", "type": "pygame.math", "text": ["calculates the magnitude of the vector which follows from the theorem: vec.magnitude_squared() == vec.x**2 + vec.y**2. This is faster than vec.magnitude() because it avoids the square root."]}, {"name": "math.Vector2.normalize", "path": "ref/math#pygame.math.Vector2.normalize", "type": "pygame.math", "text": ["Returns a new vector that has length equal to 1 and the same direction as self."]}, {"name": "math.Vector2.normalize_ip", "path": "ref/math#pygame.math.Vector2.normalize_ip", "type": "pygame.math", "text": ["Normalizes the vector so that it has length equal to 1. The direction of the vector is not changed."]}, {"name": "math.Vector2.reflect", "path": "ref/math#pygame.math.Vector2.reflect", "type": "pygame.math", "text": ["Returns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's."]}, {"name": "math.Vector2.reflect_ip", "path": "ref/math#pygame.math.Vector2.reflect_ip", "type": "pygame.math", "text": ["Changes the direction of self as if it would have been reflected of a surface with the given surface normal."]}, {"name": "math.Vector2.rotate", "path": "ref/math#pygame.math.Vector2.rotate", "type": "pygame.math", "text": ["Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees."]}, {"name": "math.Vector2.rotate_ip", "path": "ref/math#pygame.math.Vector2.rotate_ip", "type": "pygame.math", "text": ["Rotates the vector counterclockwise by the given angle in degrees. The length of the vector is not changed."]}, {"name": "math.Vector2.rotate_ip_rad", "path": "ref/math#pygame.math.Vector2.rotate_ip_rad", "type": "pygame.math", "text": ["Rotates the vector counterclockwise by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0."]}, {"name": "math.Vector2.rotate_rad", "path": "ref/math#pygame.math.Vector2.rotate_rad", "type": "pygame.math", "text": ["Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians.", "New in pygame 2.0.0."]}, {"name": "math.Vector2.scale_to_length", "path": "ref/math#pygame.math.Vector2.scale_to_length", "type": "pygame.math", "text": ["Scales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length 0. If the vector is the zero vector (i.e. has length 0 thus no direction) a ValueError is raised."]}, {"name": "math.Vector2.slerp", "path": "ref/math#pygame.math.Vector2.slerp", "type": "pygame.math", "text": ["Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range [-1, 1]. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path."]}, {"name": "math.Vector2.update", "path": "ref/math#pygame.math.Vector2.update", "type": "pygame.math", "text": ["Sets coordinates x and y in place.", "New in pygame 1.9.5."]}, {"name": "math.Vector3", "path": "ref/math#pygame.math.Vector3", "type": "pygame.math", "text": ["Some general information about the Vector3 class.", "calculates the cross-product.", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2. This is faster than vec.magnitude() because it avoids the square root.", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2. This is faster than vec.length() because it avoids the square root.", "Returns a new vector that has length equal to 1 and the same direction as self.", "Normalizes the vector so that it has length equal to 1. The direction of the vector is not changed.", "Returns True if the vector has length equal to 1. Otherwise it returns False.", "Scales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length 0. If the vector is the zero vector (i.e. has length 0 thus no direction) a ValueError is raised.", "Returns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.", "Changes the direction of self as if it would have been reflected of a surface with the given surface normal.", "Returns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self an other the result is going to be. It must be a value between 0 and 1, where 0 means self and 1 means other will be returned.", "Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range [-1, 1]. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.", "Applies the following operation to each element of the vector.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees around the given axis.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians around the given axis.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the given axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the given axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the x-axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the x-axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the y-axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the y-axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the z-axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the z-axis by the given angle in radians. The length of the vector is not changed.", "Returns the angle between self and the given vector.", "Returns a tuple (r, theta, phi) where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.", "Sets x, y and z from a tuple (r, theta, phi) where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.", "Sets coordinates x, y, and z in place.", "New in pygame 1.9.5."]}, {"name": "math.Vector3.angle_to", "path": "ref/math#pygame.math.Vector3.angle_to", "type": "pygame.math", "text": ["Returns the angle between self and the given vector."]}, {"name": "math.Vector3.as_spherical", "path": "ref/math#pygame.math.Vector3.as_spherical", "type": "pygame.math", "text": ["Returns a tuple (r, theta, phi) where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle."]}, {"name": "math.Vector3.cross", "path": "ref/math#pygame.math.Vector3.cross", "type": "pygame.math", "text": ["calculates the cross-product."]}, {"name": "math.Vector3.distance_squared_to", "path": "ref/math#pygame.math.Vector3.distance_squared_to", "type": "pygame.math", "text": []}, {"name": "math.Vector3.distance_to", "path": "ref/math#pygame.math.Vector3.distance_to", "type": "pygame.math", "text": []}, {"name": "math.Vector3.dot", "path": "ref/math#pygame.math.Vector3.dot", "type": "pygame.math", "text": []}, {"name": "math.Vector3.elementwise", "path": "ref/math#pygame.math.Vector3.elementwise", "type": "pygame.math", "text": ["Applies the following operation to each element of the vector."]}, {"name": "math.Vector3.from_spherical", "path": "ref/math#pygame.math.Vector3.from_spherical", "type": "pygame.math", "text": ["Sets x, y and z from a tuple (r, theta, phi) where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle."]}, {"name": "math.Vector3.is_normalized", "path": "ref/math#pygame.math.Vector3.is_normalized", "type": "pygame.math", "text": ["Returns True if the vector has length equal to 1. Otherwise it returns False."]}, {"name": "math.Vector3.length", "path": "ref/math#pygame.math.Vector3.length", "type": "pygame.math", "text": ["calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)"]}, {"name": "math.Vector3.length_squared", "path": "ref/math#pygame.math.Vector3.length_squared", "type": "pygame.math", "text": ["calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2. This is faster than vec.length() because it avoids the square root."]}, {"name": "math.Vector3.lerp", "path": "ref/math#pygame.math.Vector3.lerp", "type": "pygame.math", "text": ["Returns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self an other the result is going to be. It must be a value between 0 and 1, where 0 means self and 1 means other will be returned."]}, {"name": "math.Vector3.magnitude", "path": "ref/math#pygame.math.Vector3.magnitude", "type": "pygame.math", "text": ["calculates the magnitude of the vector which follows from the theorem: vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)"]}, {"name": "math.Vector3.magnitude_squared", "path": "ref/math#pygame.math.Vector3.magnitude_squared", "type": "pygame.math", "text": ["calculates the magnitude of the vector which follows from the theorem: vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2. This is faster than vec.magnitude() because it avoids the square root."]}, {"name": "math.Vector3.normalize", "path": "ref/math#pygame.math.Vector3.normalize", "type": "pygame.math", "text": ["Returns a new vector that has length equal to 1 and the same direction as self."]}, {"name": "math.Vector3.normalize_ip", "path": "ref/math#pygame.math.Vector3.normalize_ip", "type": "pygame.math", "text": ["Normalizes the vector so that it has length equal to 1. The direction of the vector is not changed."]}, {"name": "math.Vector3.reflect", "path": "ref/math#pygame.math.Vector3.reflect", "type": "pygame.math", "text": ["Returns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's."]}, {"name": "math.Vector3.reflect_ip", "path": "ref/math#pygame.math.Vector3.reflect_ip", "type": "pygame.math", "text": ["Changes the direction of self as if it would have been reflected of a surface with the given surface normal."]}, {"name": "math.Vector3.rotate", "path": "ref/math#pygame.math.Vector3.rotate", "type": "pygame.math", "text": ["Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees around the given axis."]}, {"name": "math.Vector3.rotate_ip", "path": "ref/math#pygame.math.Vector3.rotate_ip", "type": "pygame.math", "text": ["Rotates the vector counterclockwise around the given axis by the given angle in degrees. The length of the vector is not changed."]}, {"name": "math.Vector3.rotate_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_ip_rad", "type": "pygame.math", "text": ["Rotates the vector counterclockwise around the given axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0."]}, {"name": "math.Vector3.rotate_rad", "path": "ref/math#pygame.math.Vector3.rotate_rad", "type": "pygame.math", "text": ["Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians around the given axis.", "New in pygame 2.0.0."]}, {"name": "math.Vector3.rotate_x", "path": "ref/math#pygame.math.Vector3.rotate_x", "type": "pygame.math", "text": ["Returns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in degrees."]}, {"name": "math.Vector3.rotate_x_ip", "path": "ref/math#pygame.math.Vector3.rotate_x_ip", "type": "pygame.math", "text": ["Rotates the vector counterclockwise around the x-axis by the given angle in degrees. The length of the vector is not changed."]}, {"name": "math.Vector3.rotate_x_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_x_ip_rad", "type": "pygame.math", "text": ["Rotates the vector counterclockwise around the x-axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0."]}, {"name": "math.Vector3.rotate_x_rad", "path": "ref/math#pygame.math.Vector3.rotate_x_rad", "type": "pygame.math", "text": ["Returns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in radians.", "New in pygame 2.0.0."]}, {"name": "math.Vector3.rotate_y", "path": "ref/math#pygame.math.Vector3.rotate_y", "type": "pygame.math", "text": ["Returns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in degrees."]}, {"name": "math.Vector3.rotate_y_ip", "path": "ref/math#pygame.math.Vector3.rotate_y_ip", "type": "pygame.math", "text": ["Rotates the vector counterclockwise around the y-axis by the given angle in degrees. The length of the vector is not changed."]}, {"name": "math.Vector3.rotate_y_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_y_ip_rad", "type": "pygame.math", "text": ["Rotates the vector counterclockwise around the y-axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0."]}, {"name": "math.Vector3.rotate_y_rad", "path": "ref/math#pygame.math.Vector3.rotate_y_rad", "type": "pygame.math", "text": ["Returns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in radians.", "New in pygame 2.0.0."]}, {"name": "math.Vector3.rotate_z", "path": "ref/math#pygame.math.Vector3.rotate_z", "type": "pygame.math", "text": ["Returns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in degrees."]}, {"name": "math.Vector3.rotate_z_ip", "path": "ref/math#pygame.math.Vector3.rotate_z_ip", "type": "pygame.math", "text": ["Rotates the vector counterclockwise around the z-axis by the given angle in degrees. The length of the vector is not changed."]}, {"name": "math.Vector3.rotate_z_ip_rad", "path": "ref/math#pygame.math.Vector3.rotate_z_ip_rad", "type": "pygame.math", "text": ["Rotates the vector counterclockwise around the z-axis by the given angle in radians. The length of the vector is not changed."]}, {"name": "math.Vector3.rotate_z_rad", "path": "ref/math#pygame.math.Vector3.rotate_z_rad", "type": "pygame.math", "text": ["Returns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in radians.", "New in pygame 2.0.0."]}, {"name": "math.Vector3.scale_to_length", "path": "ref/math#pygame.math.Vector3.scale_to_length", "type": "pygame.math", "text": ["Scales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length 0. If the vector is the zero vector (i.e. has length 0 thus no direction) a ValueError is raised."]}, {"name": "math.Vector3.slerp", "path": "ref/math#pygame.math.Vector3.slerp", "type": "pygame.math", "text": ["Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range [-1, 1]. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path."]}, {"name": "math.Vector3.update", "path": "ref/math#pygame.math.Vector3.update", "type": "pygame.math", "text": ["Sets coordinates x, y, and z in place.", "New in pygame 1.9.5."]}, {"name": "midi", "path": "ref/midi", "type": "pygame.midi", "text": ["New in pygame 1.9.0.", "The midi module can send output to midi devices and get input from midi devices. It can also list midi devices on the system.", "The midi module supports real and virtual midi devices.", "It uses the portmidi library. Is portable to which ever platforms portmidi supports (currently Windows, Mac OS X, and Linux).", "This uses pyportmidi for now, but may use its own bindings at some point in the future. The pyportmidi bindings are included with pygame.", "New in pygame 2.0.0.", "These are pygame events (pygame.event) reserved for midi use. The MIDIIN event is used by pygame.midi.midis2events() when converting midi events to pygame events.", "Initializes the pygame.midi module. Must be called before using the pygame.midi module.", "It is safe to call this more than once.", "Uninitializes the pygame.midi module. If pygame.midi.init() was called to initialize the pygame.midi module, then this function will be called automatically when your program exits.", "It is safe to call this function more than once.", "Gets the initialization state of the pygame.midi module.", "New in pygame 1.9.5.", "PortMidi attempts to close open streams when the application exits.", "Note", "This is particularly difficult under Windows.", "Used to indicate if any data exists.", "Reads from the input buffer and gives back midi events.", "The buffer_size specifies the number of output events to be buffered waiting for output. In some cases (see below) PortMidi does not buffer output at all and merely passes data to a lower-level API, in which case buffersize is ignored.", "latency is the delay in milliseconds applied to timestamps to determine when the output should actually occur. If latency is <<0, 0 is assumed.", "If latency is zero, timestamps are ignored and all output is delivered immediately. If latency is greater than zero, output is delayed until the message timestamp plus the latency. In some cases, PortMidi can obtain better timing than your application by passing timestamps along to the device driver or hardware. Latency may also help you to synchronize midi data to audio data by matching midi latency to the audio buffer latency.", "Note", "Time is measured relative to the time source indicated by time_proc. Timestamps are absolute, not relative delays or offsets.", "The caller should immediately close the output port; this call may result in transmission of a partial midi message. There is no abort for Midi input because the user can simply ignore messages in the buffer and close an input device at any time.", "PortMidi attempts to close open streams when the application exits.", "Note", "This is particularly difficult under Windows.", "Turn a note off in the output stream. The note must already be on for this to work correctly.", "Turn a note on in the output stream. The note must already be off for this to work correctly.", "Select an instrument.", "Adjust the pitch of a channel. The value is a signed integer from -8192 to +8191. For example, 0 means \"no change\", +4096 is typically a semitone higher, and -8192 is 1 whole tone lower (though the musical range corresponding to the pitch bend range can also be changed in some synthesizers).", "If no value is given, the pitch bend is returned to \"no change\".", "New in pygame 1.9.4.", "Writes series of MIDI information in the form of a list.", "Example:", "Note", "Output MIDI information of 3 bytes or less. The data fields are optional and assumed to be 0 if omitted.", "Examples of status byte values:", "Example:", "Writes a timestamped system-exclusive midi message.", "Example:", "Device ids range from 0 to get_count() - 1", "The following describes the usage details for this function and the get_default_output_id() function.", "Return the default device ID or -1 if there are no devices. The result can be passed to the Input/Output class.", "On a PC the user can specify a default device by setting an environment variable. To use device #1, for example:", "The user should first determine the available device ID by using the supplied application \"testin\" or \"testout\".", "In general, the registry is a better place for this kind of info. With USB devices that can come and go, using integers is not very reliable for device identification. Under Windows, if PM_RECOMMENDED_INPUT_DEVICE (or PM_RECOMMENDED_OUTPUT_DEVICE) is NOT found in the environment, then the default device is obtained by looking for a string in the registry under:", "The number of the first device with a substring that matches the string exactly is returned. For example, if the string in the registry is \"USB\" and device 1 is named \"In USB MidiSport 1x1\", then that will be the default input because it contains the string \"USB\".", "In addition to the name, get_device_info() returns \"interf\", which is the interface name. The \"interface\" is the underlying software system or API used by PortMidi to access devices. Supported interfaces:", "To specify both the interface and the device name in the registry, separate the two with a comma and a space. The string before the comma must be a substring of the \"interf\" string and the string after the space must be a substring of the \"name\" name string in order to match the device. e.g.:", "Note", "In the current release, the default is simply the first device (the input or output device with the lowest PmDeviceID).", "See get_default_input_id() for usage details.", "Gets the device info for a given id.", "Takes a sequence of midi events and returns list of pygame events.", "The midi_events data is expected to be a sequence of ((status, data1, data2, data3), timestamp) midi events (all values required).", "The time is reset to 0 when the pygame.midi module is initialized.", "example:", "New in pygame 1.9.5.", "example:", "New in pygame 1.9.5.", "example:", "New in pygame 1.9.5."]}, {"name": "midi.frequency_to_midi", "path": "ref/midi#pygame.midi.frequency_to_midi", "type": "pygame.midi", "text": ["example:", "New in pygame 1.9.5."]}, {"name": "midi.get_count", "path": "ref/midi#pygame.midi.get_count", "type": "pygame.midi", "text": ["Device ids range from 0 to get_count() - 1"]}, {"name": "midi.get_default_input_id", "path": "ref/midi#pygame.midi.get_default_input_id", "type": "pygame.midi", "text": ["The following describes the usage details for this function and the get_default_output_id() function.", "Return the default device ID or -1 if there are no devices. The result can be passed to the Input/Output class.", "On a PC the user can specify a default device by setting an environment variable. To use device #1, for example:", "The user should first determine the available device ID by using the supplied application \"testin\" or \"testout\".", "In general, the registry is a better place for this kind of info. With USB devices that can come and go, using integers is not very reliable for device identification. Under Windows, if PM_RECOMMENDED_INPUT_DEVICE (or PM_RECOMMENDED_OUTPUT_DEVICE) is NOT found in the environment, then the default device is obtained by looking for a string in the registry under:", "The number of the first device with a substring that matches the string exactly is returned. For example, if the string in the registry is \"USB\" and device 1 is named \"In USB MidiSport 1x1\", then that will be the default input because it contains the string \"USB\".", "In addition to the name, get_device_info() returns \"interf\", which is the interface name. The \"interface\" is the underlying software system or API used by PortMidi to access devices. Supported interfaces:", "To specify both the interface and the device name in the registry, separate the two with a comma and a space. The string before the comma must be a substring of the \"interf\" string and the string after the space must be a substring of the \"name\" name string in order to match the device. e.g.:", "Note", "In the current release, the default is simply the first device (the input or output device with the lowest PmDeviceID)."]}, {"name": "midi.get_default_output_id", "path": "ref/midi#pygame.midi.get_default_output_id", "type": "pygame.midi", "text": ["See get_default_input_id() for usage details."]}, {"name": "midi.get_device_info", "path": "ref/midi#pygame.midi.get_device_info", "type": "pygame.midi", "text": ["Gets the device info for a given id."]}, {"name": "midi.get_init", "path": "ref/midi#pygame.midi.get_init", "type": "pygame.midi", "text": ["Gets the initialization state of the pygame.midi module.", "New in pygame 1.9.5."]}, {"name": "midi.init", "path": "ref/midi#pygame.midi.init", "type": "pygame.midi", "text": ["Initializes the pygame.midi module. Must be called before using the pygame.midi module.", "It is safe to call this more than once."]}, {"name": "midi.Input", "path": "ref/midi#pygame.midi.Input", "type": "pygame.midi", "text": ["PortMidi attempts to close open streams when the application exits.", "Note", "This is particularly difficult under Windows.", "Used to indicate if any data exists.", "Reads from the input buffer and gives back midi events."]}, {"name": "midi.Input.close", "path": "ref/midi#pygame.midi.Input.close", "type": "pygame.midi", "text": ["PortMidi attempts to close open streams when the application exits.", "Note", "This is particularly difficult under Windows."]}, {"name": "midi.Input.poll", "path": "ref/midi#pygame.midi.Input.poll", "type": "pygame.midi", "text": ["Used to indicate if any data exists."]}, {"name": "midi.Input.read", "path": "ref/midi#pygame.midi.Input.read", "type": "pygame.midi", "text": ["Reads from the input buffer and gives back midi events."]}, {"name": "midi.midi_to_ansi_note", "path": "ref/midi#pygame.midi.midi_to_ansi_note", "type": "pygame.midi", "text": ["example:", "New in pygame 1.9.5."]}, {"name": "midi.midi_to_frequency", "path": "ref/midi#pygame.midi.midi_to_frequency", "type": "pygame.midi", "text": ["example:", "New in pygame 1.9.5."]}, {"name": "midi.MidiException", "path": "ref/midi#pygame.midi.MidiException", "type": "pygame.midi", "text": []}, {"name": "midi.midis2events", "path": "ref/midi#pygame.midi.midis2events", "type": "pygame.midi", "text": ["Takes a sequence of midi events and returns list of pygame events.", "The midi_events data is expected to be a sequence of ((status, data1, data2, data3), timestamp) midi events (all values required)."]}, {"name": "midi.Output", "path": "ref/midi#pygame.midi.Output", "type": "pygame.midi", "text": ["The buffer_size specifies the number of output events to be buffered waiting for output. In some cases (see below) PortMidi does not buffer output at all and merely passes data to a lower-level API, in which case buffersize is ignored.", "latency is the delay in milliseconds applied to timestamps to determine when the output should actually occur. If latency is <<0, 0 is assumed.", "If latency is zero, timestamps are ignored and all output is delivered immediately. If latency is greater than zero, output is delayed until the message timestamp plus the latency. In some cases, PortMidi can obtain better timing than your application by passing timestamps along to the device driver or hardware. Latency may also help you to synchronize midi data to audio data by matching midi latency to the audio buffer latency.", "Note", "Time is measured relative to the time source indicated by time_proc. Timestamps are absolute, not relative delays or offsets.", "The caller should immediately close the output port; this call may result in transmission of a partial midi message. There is no abort for Midi input because the user can simply ignore messages in the buffer and close an input device at any time.", "PortMidi attempts to close open streams when the application exits.", "Note", "This is particularly difficult under Windows.", "Turn a note off in the output stream. The note must already be on for this to work correctly.", "Turn a note on in the output stream. The note must already be off for this to work correctly.", "Select an instrument.", "Adjust the pitch of a channel. The value is a signed integer from -8192 to +8191. For example, 0 means \"no change\", +4096 is typically a semitone higher, and -8192 is 1 whole tone lower (though the musical range corresponding to the pitch bend range can also be changed in some synthesizers).", "If no value is given, the pitch bend is returned to \"no change\".", "New in pygame 1.9.4.", "Writes series of MIDI information in the form of a list.", "Example:", "Note", "Output MIDI information of 3 bytes or less. The data fields are optional and assumed to be 0 if omitted.", "Examples of status byte values:", "Example:", "Writes a timestamped system-exclusive midi message.", "Example:"]}, {"name": "midi.Output.abort", "path": "ref/midi#pygame.midi.Output.abort", "type": "pygame.midi", "text": ["The caller should immediately close the output port; this call may result in transmission of a partial midi message. There is no abort for Midi input because the user can simply ignore messages in the buffer and close an input device at any time."]}, {"name": "midi.Output.close", "path": "ref/midi#pygame.midi.Output.close", "type": "pygame.midi", "text": ["PortMidi attempts to close open streams when the application exits.", "Note", "This is particularly difficult under Windows."]}, {"name": "midi.Output.note_off", "path": "ref/midi#pygame.midi.Output.note_off", "type": "pygame.midi", "text": ["Turn a note off in the output stream. The note must already be on for this to work correctly."]}, {"name": "midi.Output.note_on", "path": "ref/midi#pygame.midi.Output.note_on", "type": "pygame.midi", "text": ["Turn a note on in the output stream. The note must already be off for this to work correctly."]}, {"name": "midi.Output.pitch_bend", "path": "ref/midi#pygame.midi.Output.pitch_bend", "type": "pygame.midi", "text": ["Adjust the pitch of a channel. The value is a signed integer from -8192 to +8191. For example, 0 means \"no change\", +4096 is typically a semitone higher, and -8192 is 1 whole tone lower (though the musical range corresponding to the pitch bend range can also be changed in some synthesizers).", "If no value is given, the pitch bend is returned to \"no change\".", "New in pygame 1.9.4."]}, {"name": "midi.Output.set_instrument", "path": "ref/midi#pygame.midi.Output.set_instrument", "type": "pygame.midi", "text": ["Select an instrument."]}, {"name": "midi.Output.write", "path": "ref/midi#pygame.midi.Output.write", "type": "pygame.midi", "text": ["Writes series of MIDI information in the form of a list.", "Example:", "Note"]}, {"name": "midi.Output.write_short", "path": "ref/midi#pygame.midi.Output.write_short", "type": "pygame.midi", "text": ["Output MIDI information of 3 bytes or less. The data fields are optional and assumed to be 0 if omitted.", "Examples of status byte values:", "Example:"]}, {"name": "midi.Output.write_sys_ex", "path": "ref/midi#pygame.midi.Output.write_sys_ex", "type": "pygame.midi", "text": ["Writes a timestamped system-exclusive midi message.", "Example:"]}, {"name": "midi.quit", "path": "ref/midi#pygame.midi.quit", "type": "pygame.midi", "text": ["Uninitializes the pygame.midi module. If pygame.midi.init() was called to initialize the pygame.midi module, then this function will be called automatically when your program exits.", "It is safe to call this function more than once."]}, {"name": "midi.time", "path": "ref/midi#pygame.midi.time", "type": "pygame.midi", "text": ["The time is reset to 0 when the pygame.midi module is initialized."]}, {"name": "mixer", "path": "ref/mixer", "type": "pygame.mixer", "text": ["This module contains classes for loading Sound objects and controlling playback. The mixer module is optional and depends on SDL_mixer. Your program should test that pygame.mixer is available and initialized before using it.", "The mixer module has a limited number of channels for playback of sounds. Usually programs tell pygame to start playing audio and it selects an available channel automatically. The default is 8 simultaneous channels, but complex programs can get more precise control over the number of channels and their use.", "All sound playback is mixed in background threads. When you begin to play a Sound object, it will return immediately while the sound continues to play. A single Sound object can also be actively played back multiple times.", "The mixer also has a special streaming channel. This is for music playback and is accessed through the pygame.mixer.music module.", "The mixer module must be initialized like other pygame modules, but it has some extra conditions. The pygame.mixer.init() function takes several optional arguments to control the playback rate and sample size. Pygame will default to reasonable values, but pygame cannot perform Sound resampling, so the mixer should be initialized to match the values of your audio resources.", "NOTE: For less laggy sound use a smaller buffer size. The default is set to reduce the chance of scratchy sounds on some computers. You can change the default buffer by calling pygame.mixer.pre_init() before pygame.mixer.init() or pygame.init() is called. For example: pygame.mixer.pre_init(44100,-16,2, 1024)", "Initialize the mixer module for Sound loading and playback. The default arguments can be overridden to provide specific audio mixing. Keyword arguments are accepted. For backward compatibility where an argument is set zero the default value is used (possible changed by a pre_init call).", "The size argument represents how many bits are used for each audio sample. If the value is negative then signed sample values will be used. Positive values mean unsigned audio samples will be used. An invalid value raises an exception.", "The channels argument is used to specify whether to use mono or stereo. 1 for mono and 2 for stereo.", "The buffer argument controls the number of internal samples used in the sound mixer. The default value should work for most cases. It can be lowered to reduce latency, but sound dropout may occur. It can be raised to larger values to ensure playback never skips, but it will impose latency on sound playback. The buffer size must be a power of two (if not it is rounded up to the next nearest power of 2).", "Some platforms require the pygame.mixer module to be initialized after the display modules have initialized. The top level pygame.init() takes care of this automatically, but cannot pass any arguments to the mixer init. To solve this, mixer has a function pygame.mixer.pre_init() to set the proper defaults before the toplevel init is used.", "When using allowedchanges=0 it will convert the samples at runtime to match what the hardware supports. For example a sound card may not support 16bit sound samples, so instead it will use 8bit samples internally. If AUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will change to the closest that SDL2 supports.", "Apart from 0, allowedchanged accepts the following constants ORed together:", "It is safe to call this more than once, but after the mixer is initialized you cannot change the playback arguments without first calling pygame.mixer.quit().", "Changed in pygame 1.8: The default buffersize was changed from 1024 to 3072.", "Changed in pygame 1.9.1: The default buffersize was changed from 3072 to 4096.", "Changed in pygame 2.0.0: The default buffersize was changed from 4096 to 512. The default frequency changed to 44100 from 22050.", "Changed in pygame 2.0.0: size can be 32 (32bit floats).", "Changed in pygame 2.0.0: channels can also be 4 or 6.", "New in pygame 2.0.0: allowedchanges argument added", "Call pre_init to change the defaults used when the real pygame.mixer.init() is called. Keyword arguments are accepted. The best way to set custom mixer playback values is to call pygame.mixer.pre_init() before calling the top level pygame.init(). For backward compatibility argument values of zero are replaced with the startup defaults.", "Changed in pygame 1.8: The default buffersize was changed from 1024 to 3072.", "Changed in pygame 1.9.1: The default buffersize was changed from 3072 to 4096.", "Changed in pygame 2.0.0: The default buffersize was changed from 4096 to 512. The default frequency changed to 44100 from 22050.", "This will uninitialize pygame.mixer. All playback will stop and any loaded Sound objects may not be compatible with the mixer if it is reinitialized later.", "If the mixer is initialized, this returns the playback arguments it is using. If the mixer has not been initialized this returns None.", "This will stop all playback of all active mixer channels.", "This will temporarily stop all playback on the active mixer channels. The playback can later be resumed with pygame.mixer.unpause()", "This will resume all active sound channels after they have been paused.", "This will fade out the volume on all active channels over the time argument in milliseconds. After the sound is muted the playback will stop.", "Sets the number of available channels for the mixer. The default value is 8. The value can be increased or decreased. If the value is decreased, sounds playing on the truncated channels are stopped.", "Returns the number of currently active playback channels.", "The mixer can reserve any number of channels that will not be automatically selected for playback by Sounds. If sounds are currently playing on the reserved channels they will not be stopped.", "This allows the application to reserve a specific number of channels for important sounds that must not be dropped or have a guaranteed channel to play on.", "This will find and return an inactive Channel object. If there are no inactive Channels this function will return None. If there are no inactive channels and the force argument is True, this will find the Channel with the longest running Sound and return it.", "If the mixer has reserved channels from pygame.mixer.set_reserved() then those channels will not be returned here.", "Returns True if the mixer is busy mixing any channels. If the mixer is idle then this return False.", "Note", "The linked and compile version numbers should be the same.", "New in pygame 2.0.0.", "Load a new sound buffer from a filename, a python file object or a readable buffer object. Limited resampling will be performed to help the sample match the initialize arguments for the mixer. A Unicode string can only be a file pathname. A Python 2.x string or a Python 3.x bytes object can be either a pathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may guess wrong. If the array keyword is used, the object is expected to export a version 3, C level array interface or, for Python 2.6 or later, a new buffer interface (The object is checked for a buffer interface first.)", "The Sound object represents actual sound sample data. Methods that change the state of the Sound object will the all instances of the Sound playback. A Sound object also exports an array interface, and, for Python 2.6 or later, a new buffer interface.", "The Sound can be loaded from an OGG audio file or from an uncompressed WAV.", "Note: The buffer will be copied internally, no data will be shared between it and the Sound object.", "For now buffer and array support is consistent with sndarray.make_sound for Numeric arrays, in that sample sign and byte order are ignored. This will change, either by correctly handling sign and byte order, or by raising an exception when different. Also, source samples are truncated to fit the audio sample size. This will not change.", "New in pygame 1.8: pygame.mixer.Sound(buffer)", "New in pygame 1.9.2: pygame.mixer.Sound keyword arguments and array interface support", "Begin playback of the Sound (i.e., on the computer's speakers) on an available Channel. This will forcibly select a Channel, so playback may cut off a currently playing sound if necessary.", "The loops argument controls how many times the sample will be repeated after being played the first time. A value of 5 means that the sound will be played once, then repeated five times, and so is played a total of six times. The default value (zero) means the Sound is not repeated, and so is only played once. If loops is set to -1 the Sound will loop indefinitely (though you can still call stop() to stop it).", "The maxtime argument can be used to stop playback after a given number of milliseconds.", "The fade_ms argument will make the sound start playing at 0 volume and fade up to full volume over the time given. The sample may end before the fade-in is complete.", "This returns the Channel object for the channel that was selected.", "This will stop the playback of this Sound on any active Channels.", "This will stop playback of the sound after fading it out over the time argument in milliseconds. The Sound will fade and stop on all actively playing channels.", "This will set the playback volume (loudness) for this Sound. This will immediately affect the Sound if it is playing. It will also affect any future playback of this Sound.", "volume in the range of 0.0 to 1.0 (inclusive)", "Return a value from 0.0 to 1.0 representing the volume for this Sound.", "Return the number of active channels this sound is playing on.", "Return the length of this Sound in seconds.", "Return a copy of the Sound object buffer as a bytes (for Python 3.x) or str (for Python 2.x) object.", "New in pygame 1.9.2.", "Return a Channel object for one of the current channels. The id must be a value from 0 to the value of pygame.mixer.get_num_channels().", "The Channel object can be used to get fine control over the playback of Sounds. A channel can only playback a single Sound at time. Using channels is entirely optional since pygame can manage them by default.", "This will begin playback of a Sound on a specific Channel. If the Channel is currently playing any other Sound it will be stopped.", "The loops argument has the same meaning as in Sound.play(): it is the number of times to repeat the sound after the first time. If it is 3, the sound will be played 4 times (the first time, then three more). If loops is -1 then the playback will repeat indefinitely.", "As in Sound.play(), the maxtime argument can be used to stop playback of the Sound after a given number of milliseconds.", "As in Sound.play(), the fade_ms argument can be used fade in the sound.", "Stop sound playback on a channel. After playback is stopped the channel becomes available for new Sounds to play on it.", "Temporarily stop the playback of sound on a channel. It can be resumed at a later time with Channel.unpause()", "Resume the playback on a paused channel.", "Stop playback of a channel after fading out the sound over the given time argument in milliseconds.", "Set the volume (loudness) of a playing sound. When a channel starts to play its volume value is reset. This only affects the current sound. The value argument is between 0.0 and 1.0.", "If one argument is passed, it will be the volume of both speakers. If two arguments are passed and the mixer is in stereo mode, the first argument will be the volume of the left speaker and the second will be the volume of the right speaker. (If the second argument is None, the first argument will be the volume of both speakers.)", "If the channel is playing a Sound on which set_volume() has also been called, both calls are taken into account. For example:", "Return the volume of the channel for the current playing sound. This does not take into account stereo separation used by Channel.set_volume(). The Sound object also has its own volume which is mixed with the channel.", "Returns True if the channel is actively mixing sound. If the channel is idle this returns False.", "Return the actual Sound object currently playing on this channel. If the channel is idle None is returned.", "When a Sound is queued on a Channel, it will begin playing immediately after the current Sound is finished. Each channel can only have a single Sound queued at a time. The queued Sound will only play if the current playback finished automatically. It is cleared on any other call to Channel.stop() or Channel.play().", "If there is no sound actively playing on the Channel then the Sound will begin playing immediately.", "If a Sound is already queued on this channel it will be returned. Once the queued sound begins playback it will no longer be on the queue.", "When an endevent is set for a channel, it will send an event to the pygame queue every time a sound finishes playing on that channel (not just the first time). Use pygame.event.get() to retrieve the endevent once it's sent.", "Note that if you called Sound.play(n) or Channel.play(sound,n), the end event is sent only once: after the sound has been played \"n+1\" times (see the documentation of Sound.play).", "If Channel.stop() or Channel.play() is called while the sound was still playing, the event will be posted immediately.", "The type argument will be the event id sent to the queue. This can be any valid event type, but a good choice would be a value between pygame.locals.USEREVENT and pygame.locals.NUMEVENTS. If no type argument is given then the Channel will stop sending endevents.", "Returns the event type to be sent every time the Channel finishes playback of a Sound. If there is no endevent the function returns pygame.NOEVENT."]}, {"name": "mixer.Channel", "path": "ref/mixer#pygame.mixer.Channel", "type": "pygame.mixer", "text": ["Return a Channel object for one of the current channels. The id must be a value from 0 to the value of pygame.mixer.get_num_channels().", "The Channel object can be used to get fine control over the playback of Sounds. A channel can only playback a single Sound at time. Using channels is entirely optional since pygame can manage them by default.", "This will begin playback of a Sound on a specific Channel. If the Channel is currently playing any other Sound it will be stopped.", "The loops argument has the same meaning as in Sound.play(): it is the number of times to repeat the sound after the first time. If it is 3, the sound will be played 4 times (the first time, then three more). If loops is -1 then the playback will repeat indefinitely.", "As in Sound.play(), the maxtime argument can be used to stop playback of the Sound after a given number of milliseconds.", "As in Sound.play(), the fade_ms argument can be used fade in the sound.", "Stop sound playback on a channel. After playback is stopped the channel becomes available for new Sounds to play on it.", "Temporarily stop the playback of sound on a channel. It can be resumed at a later time with Channel.unpause()", "Resume the playback on a paused channel.", "Stop playback of a channel after fading out the sound over the given time argument in milliseconds.", "Set the volume (loudness) of a playing sound. When a channel starts to play its volume value is reset. This only affects the current sound. The value argument is between 0.0 and 1.0.", "If one argument is passed, it will be the volume of both speakers. If two arguments are passed and the mixer is in stereo mode, the first argument will be the volume of the left speaker and the second will be the volume of the right speaker. (If the second argument is None, the first argument will be the volume of both speakers.)", "If the channel is playing a Sound on which set_volume() has also been called, both calls are taken into account. For example:", "Return the volume of the channel for the current playing sound. This does not take into account stereo separation used by Channel.set_volume(). The Sound object also has its own volume which is mixed with the channel.", "Returns True if the channel is actively mixing sound. If the channel is idle this returns False.", "Return the actual Sound object currently playing on this channel. If the channel is idle None is returned.", "When a Sound is queued on a Channel, it will begin playing immediately after the current Sound is finished. Each channel can only have a single Sound queued at a time. The queued Sound will only play if the current playback finished automatically. It is cleared on any other call to Channel.stop() or Channel.play().", "If there is no sound actively playing on the Channel then the Sound will begin playing immediately.", "If a Sound is already queued on this channel it will be returned. Once the queued sound begins playback it will no longer be on the queue.", "When an endevent is set for a channel, it will send an event to the pygame queue every time a sound finishes playing on that channel (not just the first time). Use pygame.event.get() to retrieve the endevent once it's sent.", "Note that if you called Sound.play(n) or Channel.play(sound,n), the end event is sent only once: after the sound has been played \"n+1\" times (see the documentation of Sound.play).", "If Channel.stop() or Channel.play() is called while the sound was still playing, the event will be posted immediately.", "The type argument will be the event id sent to the queue. This can be any valid event type, but a good choice would be a value between pygame.locals.USEREVENT and pygame.locals.NUMEVENTS. If no type argument is given then the Channel will stop sending endevents.", "Returns the event type to be sent every time the Channel finishes playback of a Sound. If there is no endevent the function returns pygame.NOEVENT."]}, {"name": "mixer.Channel.fadeout", "path": "ref/mixer#pygame.mixer.Channel.fadeout", "type": "pygame.mixer", "text": ["Stop playback of a channel after fading out the sound over the given time argument in milliseconds."]}, {"name": "mixer.Channel.get_busy", "path": "ref/mixer#pygame.mixer.Channel.get_busy", "type": "pygame.mixer", "text": ["Returns True if the channel is actively mixing sound. If the channel is idle this returns False."]}, {"name": "mixer.Channel.get_endevent", "path": "ref/mixer#pygame.mixer.Channel.get_endevent", "type": "pygame.mixer", "text": ["Returns the event type to be sent every time the Channel finishes playback of a Sound. If there is no endevent the function returns pygame.NOEVENT."]}, {"name": "mixer.Channel.get_queue", "path": "ref/mixer#pygame.mixer.Channel.get_queue", "type": "pygame.mixer", "text": ["If a Sound is already queued on this channel it will be returned. Once the queued sound begins playback it will no longer be on the queue."]}, {"name": "mixer.Channel.get_sound", "path": "ref/mixer#pygame.mixer.Channel.get_sound", "type": "pygame.mixer", "text": ["Return the actual Sound object currently playing on this channel. If the channel is idle None is returned."]}, {"name": "mixer.Channel.get_volume", "path": "ref/mixer#pygame.mixer.Channel.get_volume", "type": "pygame.mixer", "text": ["Return the volume of the channel for the current playing sound. This does not take into account stereo separation used by Channel.set_volume(). The Sound object also has its own volume which is mixed with the channel."]}, {"name": "mixer.Channel.pause", "path": "ref/mixer#pygame.mixer.Channel.pause", "type": "pygame.mixer", "text": ["Temporarily stop the playback of sound on a channel. It can be resumed at a later time with Channel.unpause()"]}, {"name": "mixer.Channel.play", "path": "ref/mixer#pygame.mixer.Channel.play", "type": "pygame.mixer", "text": ["This will begin playback of a Sound on a specific Channel. If the Channel is currently playing any other Sound it will be stopped.", "The loops argument has the same meaning as in Sound.play(): it is the number of times to repeat the sound after the first time. If it is 3, the sound will be played 4 times (the first time, then three more). If loops is -1 then the playback will repeat indefinitely.", "As in Sound.play(), the maxtime argument can be used to stop playback of the Sound after a given number of milliseconds.", "As in Sound.play(), the fade_ms argument can be used fade in the sound."]}, {"name": "mixer.Channel.queue", "path": "ref/mixer#pygame.mixer.Channel.queue", "type": "pygame.mixer", "text": ["When a Sound is queued on a Channel, it will begin playing immediately after the current Sound is finished. Each channel can only have a single Sound queued at a time. The queued Sound will only play if the current playback finished automatically. It is cleared on any other call to Channel.stop() or Channel.play().", "If there is no sound actively playing on the Channel then the Sound will begin playing immediately."]}, {"name": "mixer.Channel.set_endevent", "path": "ref/mixer#pygame.mixer.Channel.set_endevent", "type": "pygame.mixer", "text": ["When an endevent is set for a channel, it will send an event to the pygame queue every time a sound finishes playing on that channel (not just the first time). Use pygame.event.get() to retrieve the endevent once it's sent.", "Note that if you called Sound.play(n) or Channel.play(sound,n), the end event is sent only once: after the sound has been played \"n+1\" times (see the documentation of Sound.play).", "If Channel.stop() or Channel.play() is called while the sound was still playing, the event will be posted immediately.", "The type argument will be the event id sent to the queue. This can be any valid event type, but a good choice would be a value between pygame.locals.USEREVENT and pygame.locals.NUMEVENTS. If no type argument is given then the Channel will stop sending endevents."]}, {"name": "mixer.Channel.set_volume", "path": "ref/mixer#pygame.mixer.Channel.set_volume", "type": "pygame.mixer", "text": ["Set the volume (loudness) of a playing sound. When a channel starts to play its volume value is reset. This only affects the current sound. The value argument is between 0.0 and 1.0.", "If one argument is passed, it will be the volume of both speakers. If two arguments are passed and the mixer is in stereo mode, the first argument will be the volume of the left speaker and the second will be the volume of the right speaker. (If the second argument is None, the first argument will be the volume of both speakers.)", "If the channel is playing a Sound on which set_volume() has also been called, both calls are taken into account. For example:"]}, {"name": "mixer.Channel.stop", "path": "ref/mixer#pygame.mixer.Channel.stop", "type": "pygame.mixer", "text": ["Stop sound playback on a channel. After playback is stopped the channel becomes available for new Sounds to play on it."]}, {"name": "mixer.Channel.unpause", "path": "ref/mixer#pygame.mixer.Channel.unpause", "type": "pygame.mixer", "text": ["Resume the playback on a paused channel."]}, {"name": "mixer.fadeout", "path": "ref/mixer#pygame.mixer.fadeout", "type": "pygame.mixer", "text": ["This will fade out the volume on all active channels over the time argument in milliseconds. After the sound is muted the playback will stop."]}, {"name": "mixer.find_channel", "path": "ref/mixer#pygame.mixer.find_channel", "type": "pygame.mixer", "text": ["This will find and return an inactive Channel object. If there are no inactive Channels this function will return None. If there are no inactive channels and the force argument is True, this will find the Channel with the longest running Sound and return it.", "If the mixer has reserved channels from pygame.mixer.set_reserved() then those channels will not be returned here."]}, {"name": "mixer.get_busy", "path": "ref/mixer#pygame.mixer.get_busy", "type": "pygame.mixer", "text": ["Returns True if the mixer is busy mixing any channels. If the mixer is idle then this return False."]}, {"name": "mixer.get_init", "path": "ref/mixer#pygame.mixer.get_init", "type": "pygame.mixer", "text": ["If the mixer is initialized, this returns the playback arguments it is using. If the mixer has not been initialized this returns None."]}, {"name": "mixer.get_num_channels", "path": "ref/mixer#pygame.mixer.get_num_channels", "type": "pygame.mixer", "text": ["Returns the number of currently active playback channels."]}, {"name": "mixer.get_sdl_mixer_version", "path": "ref/mixer#pygame.mixer.get_sdl_mixer_version", "type": "pygame.mixer", "text": ["Note", "The linked and compile version numbers should be the same.", "New in pygame 2.0.0."]}, {"name": "mixer.init", "path": "ref/mixer#pygame.mixer.init", "type": "pygame.mixer", "text": ["Initialize the mixer module for Sound loading and playback. The default arguments can be overridden to provide specific audio mixing. Keyword arguments are accepted. For backward compatibility where an argument is set zero the default value is used (possible changed by a pre_init call).", "The size argument represents how many bits are used for each audio sample. If the value is negative then signed sample values will be used. Positive values mean unsigned audio samples will be used. An invalid value raises an exception.", "The channels argument is used to specify whether to use mono or stereo. 1 for mono and 2 for stereo.", "The buffer argument controls the number of internal samples used in the sound mixer. The default value should work for most cases. It can be lowered to reduce latency, but sound dropout may occur. It can be raised to larger values to ensure playback never skips, but it will impose latency on sound playback. The buffer size must be a power of two (if not it is rounded up to the next nearest power of 2).", "Some platforms require the pygame.mixer module to be initialized after the display modules have initialized. The top level pygame.init() takes care of this automatically, but cannot pass any arguments to the mixer init. To solve this, mixer has a function pygame.mixer.pre_init() to set the proper defaults before the toplevel init is used.", "When using allowedchanges=0 it will convert the samples at runtime to match what the hardware supports. For example a sound card may not support 16bit sound samples, so instead it will use 8bit samples internally. If AUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will change to the closest that SDL2 supports.", "Apart from 0, allowedchanged accepts the following constants ORed together:", "It is safe to call this more than once, but after the mixer is initialized you cannot change the playback arguments without first calling pygame.mixer.quit().", "Changed in pygame 1.8: The default buffersize was changed from 1024 to 3072.", "Changed in pygame 1.9.1: The default buffersize was changed from 3072 to 4096.", "Changed in pygame 2.0.0: The default buffersize was changed from 4096 to 512. The default frequency changed to 44100 from 22050.", "Changed in pygame 2.0.0: size can be 32 (32bit floats).", "Changed in pygame 2.0.0: channels can also be 4 or 6.", "New in pygame 2.0.0: allowedchanges argument added"]}, {"name": "mixer.music", "path": "ref/music", "type": "pygame.mixer.music", "text": ["The music module is closely tied to pygame.mixer. Use the music module to control the playback of music in the sound mixer.", "The difference between the music playback and regular Sound playback is that the music is streamed, and never actually loaded all at once. The mixer system only supports a single music stream at once.", "Be aware that MP3 support is limited. On some systems an unsupported format can crash the program, e.g. Debian Linux. Consider using OGG instead.", "This will load a music filename/file object and prepare it for playback. If a music stream is already playing it will be stopped. This does not start the music playing.", "This closes resources like files for any music that may be loaded.", "New in pygame 2.0.0.", "This will play the loaded music stream. If the music is already playing it will be restarted.", "loops is an optional integer argument, which is 0 by default, it tells how many times to repeat the music. The music repeats indefinately if this argument is set to -1.", "start is an optional float argument, which is 0.0 by default, which denotes the position in time, the music starts playing from. The starting position depends on the format of the music played. MP3 and OGG use the position as time in seconds. For mp3s the start time position selected may not be accurate as things like variable bit rate encoding and ID3 tags can throw off the timing calculations. For MOD music it is the pattern order number. Passing a start position will raise a NotImplementedError if the start position cannot be set.", "fade_ms is an optional integer argument, which is 0 by default, makes the music start playing at 0 volume and fade up to full volume over the given time. The sample may end before the fade-in is complete.", "Changed in pygame 2.0.0: Added optional fade_ms argument", "Resets playback of the current music to the beginning.", "Stops the music playback if it is currently playing. It Won't Unload the music.", "Temporarily stop playback of the music stream. It can be resumed with the pygame.mixer.music.unpause() function.", "This will resume the playback of a music stream after it has been paused.", "Fade out and stop the currently playing music.", "The time argument denotes the integer milliseconds for which the fading effect is generated.", "Note, that this function blocks until the music has faded out. Calls to fadeout() and set_volume() will have no effect during this time. If an event was set using set_endevent() it will be called after the music has faded.", "Set the volume of the music playback.", "The volume argument is a float between 0.0 and 1.0 that sets volume. When new music is loaded the volume is reset to full volume.", "Returns the current volume for the mixer. The value will be between 0.0 and 1.0.", "Returns True when the music stream is actively playing. When the music is idle this returns False. In pygame 2.0.1 and above this function returns False when the music is paused. In pygame 1 it returns True when the music is paused.", "Changed in pygame 2.0.1: Returns False when music paused.", "This sets the position in the music file where playback will start. The meaning of \"pos\", a float (or a number that can be converted to a float), depends on the music format.", "For MOD files, pos is the integer pattern number in the module. For OGG it is the absolute position, in seconds, from the beginning of the sound. For MP3 files, it is the relative position, in seconds, from the current position. For absolute positioning in an MP3 file, first call rewind().", "Other file formats are unsupported. Newer versions of SDL_mixer have better positioning support than earlier ones. An SDLError is raised if a particular format does not support positioning.", "Function set_pos() calls underlining SDL_mixer function Mix_SetMusicPosition.", "New in pygame 1.9.2.", "This gets the number of milliseconds that the music has been playing for. The returned time only represents how long the music has been playing; it does not take into account any starting position offsets.", "This will load a sound file and queue it. A queued sound file will begin as soon as the current sound naturally ends. Only one sound can be queued at a time. Queuing a new sound while another sound is queued will result in the new sound becoming the queued sound. Also, if the current sound is ever stopped or changed, the queued sound will be lost.", "The following example will play music by Bach six times, then play music by Mozart once:", "This causes pygame to signal (by means of the event queue) when the music is done playing. The argument determines the type of event that will be queued.", "The event will be queued every time the music finishes, not just the first time. To stop the event from being queued, call this method with no argument.", "Returns the event type to be sent every time the music finishes playback. If there is no endevent the function returns pygame.NOEVENT."]}, {"name": "mixer.music.fadeout", "path": "ref/music#pygame.mixer.music.fadeout", "type": "pygame.mixer.music", "text": ["Fade out and stop the currently playing music.", "The time argument denotes the integer milliseconds for which the fading effect is generated.", "Note, that this function blocks until the music has faded out. Calls to fadeout() and set_volume() will have no effect during this time. If an event was set using set_endevent() it will be called after the music has faded."]}, {"name": "mixer.music.get_busy", "path": "ref/music#pygame.mixer.music.get_busy", "type": "pygame.mixer.music", "text": ["Returns True when the music stream is actively playing. When the music is idle this returns False. In pygame 2.0.1 and above this function returns False when the music is paused. In pygame 1 it returns True when the music is paused.", "Changed in pygame 2.0.1: Returns False when music paused."]}, {"name": "mixer.music.get_endevent", "path": "ref/music#pygame.mixer.music.get_endevent", "type": "pygame.mixer.music", "text": ["Returns the event type to be sent every time the music finishes playback. If there is no endevent the function returns pygame.NOEVENT."]}, {"name": "mixer.music.get_pos", "path": "ref/music#pygame.mixer.music.get_pos", "type": "pygame.mixer.music", "text": ["This gets the number of milliseconds that the music has been playing for. The returned time only represents how long the music has been playing; it does not take into account any starting position offsets."]}, {"name": "mixer.music.get_volume", "path": "ref/music#pygame.mixer.music.get_volume", "type": "pygame.mixer.music", "text": ["Returns the current volume for the mixer. The value will be between 0.0 and 1.0."]}, {"name": "mixer.music.load", "path": "ref/music#pygame.mixer.music.load", "type": "pygame.mixer.music", "text": ["This will load a music filename/file object and prepare it for playback. If a music stream is already playing it will be stopped. This does not start the music playing."]}, {"name": "mixer.music.pause", "path": "ref/music#pygame.mixer.music.pause", "type": "pygame.mixer.music", "text": ["Temporarily stop playback of the music stream. It can be resumed with the pygame.mixer.music.unpause() function."]}, {"name": "mixer.music.play", "path": "ref/music#pygame.mixer.music.play", "type": "pygame.mixer.music", "text": ["This will play the loaded music stream. If the music is already playing it will be restarted.", "loops is an optional integer argument, which is 0 by default, it tells how many times to repeat the music. The music repeats indefinately if this argument is set to -1.", "start is an optional float argument, which is 0.0 by default, which denotes the position in time, the music starts playing from. The starting position depends on the format of the music played. MP3 and OGG use the position as time in seconds. For mp3s the start time position selected may not be accurate as things like variable bit rate encoding and ID3 tags can throw off the timing calculations. For MOD music it is the pattern order number. Passing a start position will raise a NotImplementedError if the start position cannot be set.", "fade_ms is an optional integer argument, which is 0 by default, makes the music start playing at 0 volume and fade up to full volume over the given time. The sample may end before the fade-in is complete.", "Changed in pygame 2.0.0: Added optional fade_ms argument"]}, {"name": "mixer.music.queue", "path": "ref/music#pygame.mixer.music.queue", "type": "pygame.mixer.music", "text": ["This will load a sound file and queue it. A queued sound file will begin as soon as the current sound naturally ends. Only one sound can be queued at a time. Queuing a new sound while another sound is queued will result in the new sound becoming the queued sound. Also, if the current sound is ever stopped or changed, the queued sound will be lost.", "The following example will play music by Bach six times, then play music by Mozart once:"]}, {"name": "mixer.music.rewind", "path": "ref/music#pygame.mixer.music.rewind", "type": "pygame.mixer.music", "text": ["Resets playback of the current music to the beginning."]}, {"name": "mixer.music.set_endevent", "path": "ref/music#pygame.mixer.music.set_endevent", "type": "pygame.mixer.music", "text": ["This causes pygame to signal (by means of the event queue) when the music is done playing. The argument determines the type of event that will be queued.", "The event will be queued every time the music finishes, not just the first time. To stop the event from being queued, call this method with no argument."]}, {"name": "mixer.music.set_pos", "path": "ref/music#pygame.mixer.music.set_pos", "type": "pygame.mixer.music", "text": ["This sets the position in the music file where playback will start. The meaning of \"pos\", a float (or a number that can be converted to a float), depends on the music format.", "For MOD files, pos is the integer pattern number in the module. For OGG it is the absolute position, in seconds, from the beginning of the sound. For MP3 files, it is the relative position, in seconds, from the current position. For absolute positioning in an MP3 file, first call rewind().", "Other file formats are unsupported. Newer versions of SDL_mixer have better positioning support than earlier ones. An SDLError is raised if a particular format does not support positioning.", "Function set_pos() calls underlining SDL_mixer function Mix_SetMusicPosition.", "New in pygame 1.9.2."]}, {"name": "mixer.music.set_volume", "path": "ref/music#pygame.mixer.music.set_volume", "type": "pygame.mixer.music", "text": ["Set the volume of the music playback.", "The volume argument is a float between 0.0 and 1.0 that sets volume. When new music is loaded the volume is reset to full volume."]}, {"name": "mixer.music.stop", "path": "ref/music#pygame.mixer.music.stop", "type": "pygame.mixer.music", "text": ["Stops the music playback if it is currently playing. It Won't Unload the music."]}, {"name": "mixer.music.unload", "path": "ref/music#pygame.mixer.music.unload", "type": "pygame.mixer.music", "text": ["This closes resources like files for any music that may be loaded.", "New in pygame 2.0.0."]}, {"name": "mixer.music.unpause", "path": "ref/music#pygame.mixer.music.unpause", "type": "pygame.mixer.music", "text": ["This will resume the playback of a music stream after it has been paused."]}, {"name": "mixer.pause", "path": "ref/mixer#pygame.mixer.pause", "type": "pygame.mixer", "text": ["This will temporarily stop all playback on the active mixer channels. The playback can later be resumed with pygame.mixer.unpause()"]}, {"name": "mixer.pre_init", "path": "ref/mixer#pygame.mixer.pre_init", "type": "pygame.mixer", "text": ["Call pre_init to change the defaults used when the real pygame.mixer.init() is called. Keyword arguments are accepted. The best way to set custom mixer playback values is to call pygame.mixer.pre_init() before calling the top level pygame.init(). For backward compatibility argument values of zero are replaced with the startup defaults.", "Changed in pygame 1.8: The default buffersize was changed from 1024 to 3072.", "Changed in pygame 1.9.1: The default buffersize was changed from 3072 to 4096.", "Changed in pygame 2.0.0: The default buffersize was changed from 4096 to 512. The default frequency changed to 44100 from 22050."]}, {"name": "mixer.quit", "path": "ref/mixer#pygame.mixer.quit", "type": "pygame.mixer", "text": ["This will uninitialize pygame.mixer. All playback will stop and any loaded Sound objects may not be compatible with the mixer if it is reinitialized later."]}, {"name": "mixer.set_num_channels", "path": "ref/mixer#pygame.mixer.set_num_channels", "type": "pygame.mixer", "text": ["Sets the number of available channels for the mixer. The default value is 8. The value can be increased or decreased. If the value is decreased, sounds playing on the truncated channels are stopped."]}, {"name": "mixer.set_reserved", "path": "ref/mixer#pygame.mixer.set_reserved", "type": "pygame.mixer", "text": ["The mixer can reserve any number of channels that will not be automatically selected for playback by Sounds. If sounds are currently playing on the reserved channels they will not be stopped.", "This allows the application to reserve a specific number of channels for important sounds that must not be dropped or have a guaranteed channel to play on."]}, {"name": "mixer.Sound", "path": "ref/mixer#pygame.mixer.Sound", "type": "pygame.mixer", "text": ["Load a new sound buffer from a filename, a python file object or a readable buffer object. Limited resampling will be performed to help the sample match the initialize arguments for the mixer. A Unicode string can only be a file pathname. A Python 2.x string or a Python 3.x bytes object can be either a pathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may guess wrong. If the array keyword is used, the object is expected to export a version 3, C level array interface or, for Python 2.6 or later, a new buffer interface (The object is checked for a buffer interface first.)", "The Sound object represents actual sound sample data. Methods that change the state of the Sound object will the all instances of the Sound playback. A Sound object also exports an array interface, and, for Python 2.6 or later, a new buffer interface.", "The Sound can be loaded from an OGG audio file or from an uncompressed WAV.", "Note: The buffer will be copied internally, no data will be shared between it and the Sound object.", "For now buffer and array support is consistent with sndarray.make_sound for Numeric arrays, in that sample sign and byte order are ignored. This will change, either by correctly handling sign and byte order, or by raising an exception when different. Also, source samples are truncated to fit the audio sample size. This will not change.", "New in pygame 1.8: pygame.mixer.Sound(buffer)", "New in pygame 1.9.2: pygame.mixer.Sound keyword arguments and array interface support", "Begin playback of the Sound (i.e., on the computer's speakers) on an available Channel. This will forcibly select a Channel, so playback may cut off a currently playing sound if necessary.", "The loops argument controls how many times the sample will be repeated after being played the first time. A value of 5 means that the sound will be played once, then repeated five times, and so is played a total of six times. The default value (zero) means the Sound is not repeated, and so is only played once. If loops is set to -1 the Sound will loop indefinitely (though you can still call stop() to stop it).", "The maxtime argument can be used to stop playback after a given number of milliseconds.", "The fade_ms argument will make the sound start playing at 0 volume and fade up to full volume over the time given. The sample may end before the fade-in is complete.", "This returns the Channel object for the channel that was selected.", "This will stop the playback of this Sound on any active Channels.", "This will stop playback of the sound after fading it out over the time argument in milliseconds. The Sound will fade and stop on all actively playing channels.", "This will set the playback volume (loudness) for this Sound. This will immediately affect the Sound if it is playing. It will also affect any future playback of this Sound.", "volume in the range of 0.0 to 1.0 (inclusive)", "Return a value from 0.0 to 1.0 representing the volume for this Sound.", "Return the number of active channels this sound is playing on.", "Return the length of this Sound in seconds.", "Return a copy of the Sound object buffer as a bytes (for Python 3.x) or str (for Python 2.x) object.", "New in pygame 1.9.2."]}, {"name": "mixer.Sound.fadeout", "path": "ref/mixer#pygame.mixer.Sound.fadeout", "type": "pygame.mixer", "text": ["This will stop playback of the sound after fading it out over the time argument in milliseconds. The Sound will fade and stop on all actively playing channels."]}, {"name": "mixer.Sound.get_length", "path": "ref/mixer#pygame.mixer.Sound.get_length", "type": "pygame.mixer", "text": ["Return the length of this Sound in seconds."]}, {"name": "mixer.Sound.get_num_channels", "path": "ref/mixer#pygame.mixer.Sound.get_num_channels", "type": "pygame.mixer", "text": ["Return the number of active channels this sound is playing on."]}, {"name": "mixer.Sound.get_raw", "path": "ref/mixer#pygame.mixer.Sound.get_raw", "type": "pygame.mixer", "text": ["Return a copy of the Sound object buffer as a bytes (for Python 3.x) or str (for Python 2.x) object.", "New in pygame 1.9.2."]}, {"name": "mixer.Sound.get_volume", "path": "ref/mixer#pygame.mixer.Sound.get_volume", "type": "pygame.mixer", "text": ["Return a value from 0.0 to 1.0 representing the volume for this Sound."]}, {"name": "mixer.Sound.play", "path": "ref/mixer#pygame.mixer.Sound.play", "type": "pygame.mixer", "text": ["Begin playback of the Sound (i.e., on the computer's speakers) on an available Channel. This will forcibly select a Channel, so playback may cut off a currently playing sound if necessary.", "The loops argument controls how many times the sample will be repeated after being played the first time. A value of 5 means that the sound will be played once, then repeated five times, and so is played a total of six times. The default value (zero) means the Sound is not repeated, and so is only played once. If loops is set to -1 the Sound will loop indefinitely (though you can still call stop() to stop it).", "The maxtime argument can be used to stop playback after a given number of milliseconds.", "The fade_ms argument will make the sound start playing at 0 volume and fade up to full volume over the time given. The sample may end before the fade-in is complete.", "This returns the Channel object for the channel that was selected."]}, {"name": "mixer.Sound.set_volume", "path": "ref/mixer#pygame.mixer.Sound.set_volume", "type": "pygame.mixer", "text": ["This will set the playback volume (loudness) for this Sound. This will immediately affect the Sound if it is playing. It will also affect any future playback of this Sound.", "volume in the range of 0.0 to 1.0 (inclusive)"]}, {"name": "mixer.Sound.stop", "path": "ref/mixer#pygame.mixer.Sound.stop", "type": "pygame.mixer", "text": ["This will stop the playback of this Sound on any active Channels."]}, {"name": "mixer.stop", "path": "ref/mixer#pygame.mixer.stop", "type": "pygame.mixer", "text": ["This will stop all playback of all active mixer channels."]}, {"name": "mixer.unpause", "path": "ref/mixer#pygame.mixer.unpause", "type": "pygame.mixer", "text": ["This will resume all active sound channels after they have been paused."]}, {"name": "module-_sdl2.touch", "path": "ref/touch", "type": "pygame._sdl2.touch", "text": ["New in pygame 2: This module requires SDL2.", "Return the number of available touch devices.", "Return an integer id associated with the given index.", "Return the number of fingers active for the touch device whose id is touchid.", "Return a dict for the finger index active on touchid. The dict contains these keys:"]}, {"name": "module-camera", "path": "ref/camera", "type": "pygame.camera", "text": ["Pygame currently supports only Linux and v4l2 cameras.", "EXPERIMENTAL!: This API may change or disappear in later pygame releases. If you use this, your code will very likely break with the next pygame release.", "The Bayer to RGB function is based on:", "New in pygame 1.9.0.", "Allows for conversion from \"RGB\" to a destination colorspace of \"HSV\" or \"YUV\". The source and destination surfaces must be the same size and pixel depth. This is useful for computer vision on devices with limited processing power. Capture as small of an image as possible, transform.scale() it even smaller, and then convert the colorspace to YUV or HSV before doing any processing on it.", "Checks the computer for available cameras and returns a list of strings of camera names, ready to be fed into pygame.camera.Camera.", "Loads a v4l2 camera. The device is typically something like \"/dev/video0\". Default width and height are 640 by 480. Format is the desired colorspace of the output. This is useful for computer vision purposes. The default is RGB. The following are supported:", "Opens the camera device, attempts to initialize it, and begins recording images to a buffer. The camera must be started before any of the below functions can be used.", "Stops recording, uninitializes the camera, and closes it. Once a camera is stopped, the below functions cannot be used until it is started again.", "If the camera supports it, get_controls will return the current settings for horizontal and vertical image flip as bools and brightness as an int. If unsupported, it will return the default values of (0, 0, 0). Note that the return values here may be different than those returned by set_controls, though these are more likely to be correct.", "Allows you to change camera settings if the camera supports it. The return values will be the input values if the camera claims it succeeded or the values previously in use if not. Each argument is optional, and the desired one can be chosen by supplying the keyword, like hflip. Note that the actual settings being used by the camera may not be the same as those returned by set_controls.", "Returns the current dimensions of the images being captured by the camera. This will return the actual size, which may be different than the one specified during initialization if the camera did not support that size.", "If an image is ready to get, it returns true. Otherwise it returns false. Note that some webcams will always return False and will only queue a frame when called with a blocking function like get_image(). This is useful to separate the framerate of the game from that of the camera without having to use threading.", "Pulls an image off of the buffer as an RGB Surface. It can optionally reuse an existing Surface to save time. The bit-depth of the surface is either 24 bits or the same as the optionally supplied Surface.", "Gets an image from a camera as a string in the native pixelformat of the camera. Useful for integration with other libraries."]}, {"name": "module-cdrom", "path": "ref/cdrom", "type": "pygame.cdrom", "text": ["The cdrom module manages the CD and DVD drives on a computer. It can also control the playback of audio CDs. This module needs to be initialized before it can do anything. Each CD object you create represents a cdrom drive and must also be initialized individually before it can do most things.", "Initialize the cdrom module. This will scan the system for all CD devices. The module must be initialized before any other functions will work. This automatically happens when you call pygame.init().", "It is safe to call this function more than once.", "Uninitialize the cdrom module. After you call this any existing CD objects will no longer work.", "It is safe to call this function more than once.", "Test if the cdrom module is initialized or not. This is different than the CD.init() since each drive must also be initialized individually.", "Return the number of cd drives on the system. When you create CD objects you need to pass an integer id that must be lower than this count. The count will be 0 if there are no drives on the system.", "You can create a CD object for each cdrom on the system. Use pygame.cdrom.get_count() to determine how many drives actually exist. The id argument is an integer of the drive, starting at zero.", "The CD object is not initialized, you can only call CD.get_id() and CD.get_name() on an uninitialized drive.", "It is safe to create multiple CD objects for the same drive, they will all cooperate normally.", "Initialize the cdrom drive for use. The drive must be initialized for most CD methods to work. Even if the rest of pygame has been initialized.", "There may be a brief pause while the drive is initialized. Avoid CD.init() if the program should not stop for a second or two.", "Uninitialize a drive for use. Call this when your program will not be accessing the drive for awhile.", "Test if this CDROM device is initialized. This is different than the pygame.cdrom.init() since each drive must also be initialized individually.", "Playback audio from an audio cdrom in the drive. Besides the track number argument, you can also pass a starting and ending time for playback. The start and end time are in seconds, and can limit the section of an audio track played.", "If you pass a start time but no end, the audio will play to the end of the track. If you pass a start time and 'None' for the end time, the audio will play to the end of the entire disc.", "See the CD.get_numtracks() and CD.get_track_audio() to find tracks to playback.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Stops playback of audio from the cdrom. This will also lose the current playback position. This method does nothing if the drive isn't already playing audio.", "Temporarily stop audio playback on the CD. The playback can be resumed at the same point with the CD.resume() method. If the CD is not playing this method does nothing.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Unpause a paused CD. If the CD is not paused or already playing, this method does nothing.", "This will open the cdrom drive and eject the cdrom. If the drive is playing or paused it will be stopped.", "Returns the integer id that was used to create the CD instance. This method can work on an uninitialized CD.", "Return the string name of the drive. This is the system name used to represent the drive. It is often the drive letter or device name. This method can work on an uninitialized CD.", "Returns True if the drive busy playing back audio.", "Returns True if the drive is currently paused.", "Returns both the current track and time of that track. This method works when the drive is either playing or paused.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Return False if there is a cdrom currently in the drive. If the drive is empty this will return True.", "Return the number of tracks on the cdrom in the drive. This will return zero of the drive is empty or has no tracks.", "Determine if a track on a cdrom contains audio data. You can also call CD.num_tracks() and CD.get_all() to determine more information about the cdrom.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Return a list with information for every track on the cdrom. The information consists of a tuple with four values. The audio value is True if the track contains audio data. The start, end, and length values are floating point numbers in seconds. Start and end represent absolute times on the entire disc.", "Return the absolute time in seconds where at start of the cdrom track.", "Note, track 0 is the first track on the CD. Track numbers start at zero.", "Return a floating point value in seconds of the length of the cdrom track.", "Note, track 0 is the first track on the CD. Track numbers start at zero."]}, {"name": "module-cursors", "path": "ref/cursors", "type": "pygame.cursors", "text": ["Pygame offers control over the system hardware cursor. Pygame only supports black and white cursors for the system. You control the cursor with functions inside pygame.mouse.", "This cursors module contains functions for loading and decoding various cursor formats. These allow you to easily store your cursors in external files or directly as encoded python strings.", "The module includes several standard cursors. The pygame.mouse.set_cursor() function takes several arguments. All those arguments have been stored in a single tuple you can call like this:", "The following variables can be passed to pygame.mouse.set_cursor function:", "This module also contains a few cursors as formatted strings. You'll need to pass these to pygame.cursors.compile() function before you can use them. The example call would look like this:", "The following strings can be converted into cursor bitmaps with pygame.cursors.compile() :", "A sequence of strings can be used to create binary cursor data for the system cursor. This returns the binary data in the form of two tuples. Those can be passed as the third and fourth arguments respectively of the pygame.mouse.set_cursor() function.", "If you are creating your own cursor strings, you can use any value represent the black and white pixels. Some system allow you to set a special toggle color for the system color, this is also called the xor color. If the system does not support xor cursors, that color will simply be black.", "The height must be divisible by 8. The width of the strings must all be equal and be divisible by 8. If these two conditions are not met, ValueError is raised. An example set of cursor strings looks like this", "This loads cursors for a simple subset of XBM files. XBM files are traditionally used to store cursors on UNIX systems, they are an ASCII format used to represent simple images.", "Sometimes the black and white color values will be split into two separate XBM files. You can pass a second maskfile argument to load the two images into a single cursor.", "The cursorfile and maskfile arguments can either be filenames or file-like object with the readlines method.", "The return value cursor_args can be passed directly to the pygame.mouse.set_cursor() function."]}, {"name": "module-display", "path": "ref/display", "type": "pygame.display", "text": ["This module offers control over the pygame display. Pygame has a single display Surface that is either contained in a window or runs full screen. Once you create the display you treat it as a regular Surface. Changes are not immediately visible onscreen; you must choose one of the two flipping functions to update the actual display.", "The origin of the display, where x = 0 and y = 0, is the top left of the screen. Both axes increase positively towards the bottom right of the screen.", "The pygame display can actually be initialized in one of several modes. By default, the display is a basic software driven framebuffer. You can request special modules like hardware acceleration and OpenGL support. These are controlled by flags passed to pygame.display.set_mode().", "Pygame can only have a single display active at any time. Creating a new one with pygame.display.set_mode() will close the previous display. If precise control is needed over the pixel format or display resolutions, use the functions pygame.display.mode_ok(), pygame.display.list_modes(), and pygame.display.Info() to query information about the display.", "Once the display Surface is created, the functions from this module affect the single existing display. The Surface becomes invalid if the module is uninitialized. If a new display mode is set, the existing Surface will automatically switch to operate on the new display.", "When the display mode is set, several events are placed on the pygame event queue. pygame.QUIT is sent when the user has requested the program to shut down. The window will receive pygame.ACTIVEEVENT events as the display gains and loses input focus. If the display is set with the pygame.RESIZABLE flag, pygame.VIDEORESIZE events will be sent when the user adjusts the window dimensions. Hardware displays that draw direct to the screen will get pygame.VIDEOEXPOSE events when portions of the window must be redrawn.", "In pygame 2, there is a new type of event called pygame.WINDOWEVENT that is meant to replace all window related events like pygame.VIDEORESIZE, pygame.VIDEOEXPOSE and pygame.ACTIVEEVENT.", "Note that the WINDOWEVENT API is considered experimental, and may change in future releases.", "The new events of type pygame.WINDOWEVENT have an event attribute that can take the following values.", "If SDL version used is less than 2.0.5, the last two values WINDOWEVENT_TAKE_FOCUS and WINDOWEVENT_HIT_TEST will not work. See the SDL implementation (in C programming) of the same over here.", "Some display environments have an option for automatically stretching all windows. When this option is enabled, this automatic stretching distorts the appearance of the pygame window. In the pygame examples directory, there is example code (prevent_display_stretching.py) which shows how to disable this automatic stretching of the pygame display on Microsoft Windows (Vista or newer required).", "Initializes the pygame display module. The display module cannot do anything until it is initialized. This is usually handled for you automatically when you call the higher level pygame.init().", "Pygame will select from one of several internal display backends when it is initialized. The display mode will be chosen depending on the platform and permissions of current user. Before the display module is initialized the environment variable SDL_VIDEODRIVER can be set to control which backend is used. The systems with multiple choices are listed here.", "On some platforms it is possible to embed the pygame display into an already existing window. To do this, the environment variable SDL_WINDOWID must be set to a string containing the window id or handle. The environment variable is checked when the pygame display is initialized. Be aware that there can be many strange side effects when running in an embedded display.", "It is harmless to call this more than once, repeated calls have no effect.", "This will shut down the entire display module. This means any active displays will be closed. This will also be handled automatically when the program exits.", "It is harmless to call this more than once, repeated calls have no effect.", "Returns True if the pygame.display module is currently initialized.", "This function will create a display Surface. The arguments passed in are requests for a display type. The actual created display will be the best possible match supported by the system.", "The size argument is a pair of numbers representing the width and height. The flags argument is a collection of additional options. The depth argument represents the number of bits to use for color.", "The Surface that gets returned can be drawn to like a regular Surface but changes will eventually be seen on the monitor.", "If no size is passed or is set to (0, 0) and pygame uses SDL version 1.2.10 or above, the created Surface will have the same size as the current screen resolution. If only the width or height are set to 0, the Surface will have the same width or height as the screen resolution. Using a SDL version prior to 1.2.10 will raise an exception.", "It is usually best to not pass the depth argument. It will default to the best and fastest color depth for the system. If your game requires a specific color format you can control the depth with this argument. Pygame will emulate an unavailable color depth which can be slow.", "When requesting fullscreen display modes, sometimes an exact match for the requested size cannot be made. In these situations pygame will select the closest compatible match. The returned surface will still always match the requested size.", "On high resolution displays(4k, 1080p) and tiny graphics games (640x480) show up very small so that they are unplayable. SCALED scales up the window for you. The game thinks it's a 640x480 window, but really it can be bigger. Mouse events are scaled for you, so your game doesn't need to do it. Note that SCALED is considered an experimental API and may change in future releases.", "The flags argument controls which type of display you want. There are several to choose from, and you can even combine multiple types using the bitwise or operator, (the pipe \"|\" character). If you pass 0 or no flags argument it will default to a software driven window. Here are the display flags you will want to choose from:", "Pygame 2 has the following additional flags available.", "New in pygame 2.0.0: SCALED, SHOWN and HIDDEN", "By setting the vsync parameter to 1, it is possible to get a display with vertical sync, but you are not guaranteed to get one. The request only works at all for calls to set_mode() with the pygame.OPENGL or pygame.SCALED flags set, and is still not guaranteed even with one of those set. What you get depends on the hardware and driver configuration of the system pygame is running on. Here is an example usage of a call to set_mode() that may give you a display with vsync:", "Vsync behaviour is considered experimental, and may change in future releases.", "New in pygame 2.0.0: vsync", "Basic example:", "The display index 0 means the default display is used.", "Changed in pygame 1.9.5: display argument added", "Return a reference to the currently set display Surface. If no display mode has been set this will return None.", "This will update the contents of the entire display. If your display mode is using the flags pygame.HWSURFACE and pygame.DOUBLEBUF, this will wait for a vertical retrace and swap the surfaces. If you are using a different type of display mode, it will simply update the entire contents of the surface.", "When using an pygame.OPENGL display mode this will perform a gl buffer swap.", "This function is like an optimized version of pygame.display.flip() for software displays. It allows only a portion of the screen to updated, instead of the entire area. If no argument is passed it updates the entire Surface area like pygame.display.flip().", "You can pass the function a single rectangle, or a sequence of rectangles. It is more efficient to pass many rectangles at once than to call update multiple times with single or a partial list of rectangles. If passing a sequence of rectangles it is safe to include None values in the list, which will be skipped.", "This call cannot be used on pygame.OPENGL displays and will generate an exception.", "Pygame chooses one of many available display backends when it is initialized. This returns the internal name used for the display backend. This can be used to provide limited information about what display capabilities might be accelerated. See the SDL_VIDEODRIVER flags in pygame.display.set_mode() to see some of the common options.", "Creates a simple object containing several attributes to describe the current graphics environment. If this is called before pygame.display.set_mode() some platforms can provide information about the default display mode. This can also be called after setting the display mode to verify specific display options were satisfied. The VidInfo object has several attributes:", "Creates a dictionary filled with string keys. The strings and values are arbitrarily created by the system. Some systems may have no information and an empty dictionary will be returned. Most platforms will return a \"window\" key with the value set to the system id for the current display.", "New in pygame 1.7.1.", "This function returns a list of possible sizes for a specified color depth. The return value will be an empty list if no display modes are available with the given arguments. A return value of -1 means that any requested size should work (this is likely the case for windowed modes). Mode sizes are sorted from biggest to smallest.", "If depth is 0, the current/best color depth for the display is used. The flags defaults to pygame.FULLSCREEN, but you may need to add additional flags for specific fullscreen modes.", "The display index 0 means the default display is used.", "Changed in pygame 1.9.5: display argument added", "This function uses the same arguments as pygame.display.set_mode(). It is used to determine if a requested display mode is available. It will return 0 if the display mode cannot be set. Otherwise it will return a pixel depth that best matches the display asked for.", "Usually the depth argument is not passed, but some platforms can support multiple display depths. If passed it will hint to which depth is a better match.", "The most useful flags to pass will be pygame.HWSURFACE, pygame.DOUBLEBUF, and maybe pygame.FULLSCREEN. The function will return 0 if these display flags cannot be set.", "The display index 0 means the default display is used.", "Changed in pygame 1.9.5: display argument added", "After calling pygame.display.set_mode() with the pygame.OPENGL flag, it is a good idea to check the value of any requested OpenGL attributes. See pygame.display.gl_set_attribute() for a list of valid flags.", "When calling pygame.display.set_mode() with the pygame.OPENGL flag, Pygame automatically handles setting the OpenGL attributes like color and double-buffering. OpenGL offers several other attributes you may want control over. Pass one of these attributes as the flag, and its appropriate value. This must be called before pygame.display.set_mode().", "Many settings are the requested minimum. Creating a window with an OpenGL context will fail if OpenGL cannot provide the requested attribute, but it may for example give you a stencil buffer even if you request none, or it may give you a larger one than requested.", "The OPENGL flags are:", "GL_MULTISAMPLEBUFFERS", "Whether to enable multisampling anti-aliasing. Defaults to 0 (disabled).", "Set GL_MULTISAMPLESAMPLES to a value above 0 to control the amount of anti-aliasing. A typical value is 2 or 3.", "GL_STENCIL_SIZE", "GL_DEPTH_SIZE", "GL_STEREO", "GL_BUFFER_SIZE", "New in pygame 2.0.0: Additional attributes:", "GL_CONTEXT_PROFILE_MASK", "Sets the OpenGL profile to one of these values:", "GL_ACCELERATED_VISUAL", "Returns True when the display Surface is considered actively renderable on the screen and may be visible to the user. This is the default state immediately after pygame.display.set_mode(). This method may return True even if the application is fully hidden behind another application window.", "This will return False if the display Surface has been iconified or minimized (either via pygame.display.iconify() or via an OS specific method such as the minimize-icon available on most desktops).", "The method can also return False for other reasons without the application being explicitly iconified or minimized by the user. A notable example being if the user has multiple virtual desktops and the display Surface is not on the active virtual desktop.", "Note", "This function returning True is unrelated to whether the application has input focus. Please see pygame.key.get_focused() and pygame.mouse.get_focused() for APIs related to input focus.", "Request the window for the display surface be iconified or hidden. Not all systems and displays support an iconified display. The function will return True if successful.", "When the display is iconified pygame.display.get_active() will return False. The event queue should receive an ACTIVEEVENT event when the window has been iconified. Additionally, the event queue also recieves a WINDOWEVENT_MINIMIZED event when the window has been iconified on pygame 2.", "Switches the display window between windowed and fullscreen modes. Display driver support is not great when using pygame 1, but with pygame 2 it is the most reliable method to switch to and from fullscreen.", "Supported display drivers in pygame 1:", "Supported display drivers in pygame 2:", "Set the red, green, and blue gamma values on the display hardware. If the green and blue arguments are not passed, they will both be the same as red. Not all systems and hardware support gamma ramps, if the function succeeds it will return True.", "A gamma value of 1.0 creates a linear color table. Lower values will darken the display and higher values will brighten.", "Set the red, green, and blue gamma ramps with an explicit lookup table. Each argument should be sequence of 256 integers. The integers should range between 0 and 0xffff. Not all systems and hardware support gamma ramps, if the function succeeds it will return True.", "Sets the runtime icon the system will use to represent the display window. All windows default to a simple pygame logo for the window icon.", "You can pass any surface, but most systems want a smaller image around 32x32. The image can have colorkey transparency which will be passed to the system.", "Some systems do not allow the window icon to change after it has been shown. This function can be called before pygame.display.set_mode() to create the icon before the display mode is set.", "If the display has a window title, this function will change the name on the window. Some systems support an alternate shorter title to be used for minimized displays.", "Returns the title and icontitle for the display Surface. These will often be the same value.", "This will change the video display color palette for 8-bit displays. This does not change the palette for the actual display Surface, only the palette that is used to display the Surface. If no palette argument is passed, the system default palette will be restored. The palette is a sequence of RGB triplets.", "Returns the number of available displays. This is always 1 if pygame.get_sdl_version() returns a major version number below 2.", "New in pygame 1.9.5.", "Returns the size of the window initialized with pygame.display.set_mode(). This may differ from the size of the display surface if SCALED is used.", "New in pygame 2.0.0.", "Return whether screensaver is allowed to run whilst the app is running. Default is False. By default pygame does not allow the screensaver during game play.", "Note", "Some platforms do not have a screensaver or support disabling the screensaver. Please see pygame.display.set_allow_screensaver() for caveats with screensaver support.", "New in pygame 2.0.0.", "Change whether screensavers should be allowed whilst the app is running. The default is False. By default pygame does not allow the screensaver during game play.", "If the screensaver has been disallowed due to this function, it will automatically be allowed to run when pygame.quit() is called.", "It is possible to influence the default value via the environment variable SDL_HINT_VIDEO_ALLOW_SCREENSAVER, which can be set to either 0 (disable) or 1 (enable).", "Note", "Disabling screensaver is subject to platform support. When platform support is absent, this function will silently appear to work even though the screensaver state is unchanged. The lack of feedback is due to SDL not providing any supported method for determining whether it supports changing the screensaver state. SDL_HINT_VIDEO_ALLOW_SCREENSAVER is available in SDL 2.0.2 or later. SDL1.2 does not implement this.", "New in pygame 2.0.0."]}, {"name": "module-draw", "path": "ref/draw", "type": "pygame.draw", "text": ["Draw several simple shapes to a surface. These functions will work for rendering to any format of surface. Rendering to hardware surfaces will be slower than regular software surfaces.", "Most of the functions take a width argument to represent the size of stroke (thickness) around the edge of the shape. If a width of 0 is passed the shape will be filled (solid).", "All the drawing functions respect the clip area for the surface and will be constrained to that area. The functions return a rectangle representing the bounding area of changed pixels. This bounding rectangle is the 'minimum' bounding box that encloses the affected area.", "All the drawing functions accept a color argument that can be one of the following formats:", "A color's alpha value will be written directly into the surface (if the surface contains pixel alphas), but the draw function will not draw transparently.", "These functions temporarily lock the surface they are operating on. Many sequential drawing calls can be sped up by locking and unlocking the surface object around the draw calls (see pygame.Surface.lock() and pygame.Surface.unlock()).", "Note", "See the pygame.gfxdraw module for alternative draw methods.", "Draws a rectangle on the given surface.", "(optional) used for line thickness or to indicate that the rectangle is to be filled (not to be confused with the width value of the rect parameter)", "Note", "When using width values > 1, the edge lines will grow outside the original boundary of the rect. For more details on how the thickness for edge lines grow, refer to the width notes of the pygame.draw.line() function.", "(optional) used for setting the value of bottom right border. If you don't set this value, it will use the border_radius value.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given rect parameter and its width and height will be 0", "Rect", "Note", "The pygame.Surface.fill() method works just as well for drawing filled rectangles and can be hardware accelerated on some platforms with both software and hardware display modes.", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Changed in pygame 2.0.0.dev8: Added support for border radius.", "Draws a polygon on the given surface.", "(optional) used for line thickness or to indicate that the polygon is to be filled", "Note", "When using width values > 1, the edge lines will grow outside the original boundary of the polygon. For more details on how the thickness for edge lines grow, refer to the width notes of the pygame.draw.line() function.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the points parameter (float values will be truncated) and its width and height will be 0", "Rect", "Note", "For an aapolygon, use aalines() with closed=True.", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws a circle on the given surface.", "(optional) used for line thickness or to indicate that the circle is to be filled", "Note", "When using width values > 1, the edge lines will only grow inward.", "(optional) if this is set to True then the bottom right corner of the circle will be drawn", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the center parameter value (float values will be truncated) and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments. Nothing is drawn when the radius is 0 (a pixel at the center coordinates used to be drawn when the radius equaled 0). Floats, and Vector2 are accepted for the center param. The drawing algorithm was improved to look more like a circle.", "Changed in pygame 2.0.0.dev8: Added support for drawing circle quadrants.", "Draws an ellipse on the given surface.", "(optional) used for line thickness or to indicate that the ellipse is to be filled (not to be confused with the width value of the rect parameter)", "Note", "When using width values > 1, the edge lines will only grow inward from the original boundary of the rect parameter.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given rect parameter and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws an elliptical arc on the given surface.", "The two angle arguments are given in radians and indicate the start and stop positions of the arc. The arc is drawn in a counterclockwise direction from the start_angle to the stop_angle.", "stop angle of the arc in radians", "(optional) used for line thickness (not to be confused with the width value of the rect parameter)", "Note", "When using width values > 1, the edge lines will only grow inward from the original boundary of the rect parameter.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given rect parameter and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws a straight line on the given surface. There are no endcaps. For thick lines the ends are squared off.", "(optional) used for line thickness", "Note", "When using width values > 1, lines will grow as follows.", "For odd width values, the thickness of each line grows with the original line being in the center.", "For even width values, the thickness of each line grows with the original line being offset from the center (as there is no exact center line drawn). As a result, lines with a slope < 1 (horizontal-ish) will have 1 more pixel of thickness below the original line (in the y direction). Lines with a slope >= 1 (vertical-ish) will have 1 more pixel of thickness to the right of the original line (in the x direction).", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the start_pos parameter value (float values will be truncated) and its width and height will be 0", "Rect", "TypeError -- if start_pos or end_pos is not a sequence of two numbers", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws a sequence of contiguous straight lines on the given surface. There are no endcaps or miter joints. For thick lines the ends are squared off. Drawing thick lines with sharp corners can have undesired looking results.", "(optional) used for line thickness", "Note", "When using width values > 1 refer to the width notes of line() for details on how thick lines grow.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the points parameter (float values will be truncated) and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws a straight antialiased line on the given surface.", "The line has a thickness of one pixel and the endpoints have a height and width of one pixel each.", "If both endpoints are equal, only a single pixel is drawn (after rounding floats to nearest integer).", "Otherwise if the line is not steep (i.e. if the length along the x-axis is greater than the height along the y-axis):", "For each endpoint:", "If x, the endpoint's x-coordinate, is a whole number find which pixels would be covered by it and draw them.", "Otherwise:", "Calculate the position of the nearest point with a whole number for it's x-coordinate, when extending the line past the endpoint.", "Find which pixels would be covered and how much by that point.", "If the endpoint is the left one, multiply the coverage by (1 - the decimal part of x).", "Otherwise multiply the coverage by the decimal part of x.", "Then draw those pixels.", "Then for each point between the endpoints, along the line, whose x-coordinate is a whole number:", "Find which pixels would be covered and how much by that point and draw them.", "Otherwise do the same for steep lines as for non-steep lines except along the y-axis instead of the x-axis (using y instead of x, top instead of left and bottom instead of right).", "Note", "Regarding float values for coordinates, a point with coordinate consisting of two whole numbers is considered being right in the center of said pixel (and having a height and width of 1 pixel would therefore completely cover it), while a point with coordinate where one (or both) of the numbers have non-zero decimal parts would be partially covering two (or four if both numbers have decimal parts) adjacent pixels, e.g. the point (1.4, 2) covers 60% of the pixel (1, 2) and 40% of the pixel (2,2).", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the start_pos parameter value (float values will be truncated) and its width and height will be 0", "Rect", "TypeError -- if start_pos or end_pos is not a sequence of two numbers", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Draws a sequence of contiguous straight antialiased lines on the given surface.", "a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the points parameter (float values will be truncated) and its width and height will be 0", "Rect", "Changed in pygame 2.0.0: Added support for keyword arguments.", "Example code for draw module."]}, {"name": "module-event", "path": "ref/event", "type": "pygame.event", "text": ["Pygame handles all its event messaging through an event queue. The routines in this module help you manage that event queue. The input queue is heavily dependent on the pygame.display module. If the display has not been initialized and a video mode not set, the event queue may not work properly. The event subsystem should be called from the main thread. If you want to post events into the queue from other threads, please use the pygame.fastevent module.", "The event queue has an upper limit on the number of events it can hold (128 for standard SDL 1.2). When the queue becomes full new events are quietly dropped. To prevent lost events, especially input events which signal a quit command, your program must handle events every frame (with pygame.event.get(), pygame.event.pump(), pygame.event.wait(), pygame.event.peek() or pygame.event.clear()) and process them. Not handling events may cause your system to decide your program has locked up. To speed up queue processing use pygame.event.set_blocked() to limit which events get queued.", "To get the state of various input devices, you can forego the event queue and access the input devices directly with their appropriate modules: pygame.mouse, pygame.key, and pygame.joystick. If you use this method, remember that pygame requires some form of communication with the system window manager and other parts of the platform. To keep pygame in sync with the system, you will need to call pygame.event.pump() to keep everything current. Usually, this should be called once per game loop. Note: Joysticks will not send any events until the device has been initialized.", "The event queue contains pygame.event.EventType event objects. There are a variety of ways to access the queued events, from simply checking for the existence of events, to grabbing them directly off the stack. The event queue also offers some simple filtering which can slightly help performance by blocking certain event types from the queue. Use pygame.event.set_allowed() and pygame.event.set_blocked() to change this filtering. By default, all event types can be placed on the queue.", "All pygame.event.EventType instances contain an event type identifier and attributes specific to that event type. The event type identifier is accessible as the pygame.event.EventType.type property. Any of the event specific attributes can be accessed through the pygame.event.EventType.__dict__ attribute or directly as an attribute of the event object (as member lookups are passed through to the object's dictionary values). The event object has no method functions. Users can create their own new events with the pygame.event.Event() function.", "The event type identifier is in between the values of NOEVENT and NUMEVENTS. User defined events should have a value in the inclusive range of USEREVENT to NUMEVENTS - 1. It is recommended all user events follow this system.", "Events support equality and inequality comparisons. Two events are equal if they are the same type and have identical attribute values.", "While debugging and experimenting, you can print an event object for a quick display of its type and members. The function pygame.event.event_name() can be used to get a string representing the name of the event type.", "Events that come from the system will have a guaranteed set of member attributes based on the type. The following is a list event types with their specific attributes.", "Changed in pygame 2.0.0: The joy attribute was deprecated, instance_id was added.", "You can also find a list of constants for keyboard keys here.", "On MacOSX when a file is opened using a pygame application, a USEREVENT with its code attribute set to pygame.USEREVENT_DROPFILE is generated. There is an additional attribute called filename where the name of the file being accessed is stored.", "New in pygame 1.9.2.", "When compiled with SDL2, pygame has these additional events and their attributes.", "New in pygame 1.9.5.", "pygame can recognize text or files dropped in its window. If a file is dropped, file will be its path. The DROPTEXT event is only supported on X11.", "New in pygame 2.0.0.", "Events reserved for pygame.midi use.", "New in pygame 2.0.0.", "SDL2 supports controller hotplugging:", "Also in this version, instance_id attributes were added to joystick events, and the joy attribute was deprecated.", "New in pygame 2.0.0.", "For each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system. If you are not using other event functions in your game, you should call pygame.event.pump() to allow pygame to handle internal actions.", "This function is not necessary if your program is consistently processing events on the queue through the other pygame.event functions.", "There are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.", "Caution", "This function should only be called in the thread that initialized pygame.display.", "This will get all the messages and remove them from the queue. If a type or sequence of types is given only those messages will be removed from the queue.", "If you are only taking specific events from the queue, be aware that the queue could eventually fill up with the events you are not interested.", "If pump is True (the default), then pygame.event.pump() will be called.", "Changed in pygame 1.9.5: Added pump argument", "Returns a single event from the queue. If the event queue is empty an event of type pygame.NOEVENT will be returned immediately. The returned event is removed from the queue.", "Caution", "This function should only be called in the thread that initialized pygame.display.", "Returns a single event from the queue. If the queue is empty this function will wait until one is created. From pygame 2.0.0, if a timeout argument is given, the function will return an event of type pygame.NOEVENT if no events enter the queue in timeout milliseconds. The event is removed from the queue once it has been returned. While the program is waiting it will sleep in an idle state. This is important for programs that want to share the system with other applications.", "Changed in pygame 2.0.0.dev13: Added timeout argument", "Caution", "This function should only be called in the thread that initialized pygame.display.", "Returns True if there are any events of the given type waiting on the queue. If a sequence of event types is passed, this will return True if any of those events are on the queue.", "If pump is True (the default), then pygame.event.pump() will be called.", "Changed in pygame 1.9.5: Added pump argument", "Removes all events from the queue. If eventtype is given, removes the given event or sequence of events. This has the same effect as pygame.event.get() except None is returned. It can be slightly more efficient when clearing a full event queue.", "If pump is True (the default), then pygame.event.pump() will be called.", "Changed in pygame 1.9.5: Added pump argument", "Returns a string representing the name (in CapWords style) of the given event type.", "\"UserEvent\" is returned for all values in the user event id range. \"Unknown\" is returned when the event type does not exist.", "The given event types are not allowed to appear on the event queue. By default all events can be placed on the queue. It is safe to disable an event type multiple times.", "If None is passed as the argument, ALL of the event types are blocked from being placed on the queue.", "The given event types are allowed to appear on the event queue. By default, all event types can be placed on the queue. It is safe to enable an event type multiple times.", "If None is passed as the argument, ALL of the event types are allowed to be placed on the queue.", "Returns True if the given event type is blocked from the queue. If a sequence of event types is passed, this will return True if any of those event types are blocked.", "When your program runs in a windowed environment, it will share the mouse and keyboard devices with other applications that have focus. If your program sets the event grab to True, it will lock all input into your program.", "It is best to not always grab the input, since it prevents the user from doing other things on their system.", "Returns True when the input events are grabbed for this application.", "Places the given event at the end of the event queue.", "This is usually used for placing pygame.USEREVENT events on the queue. Although any type of event can be placed, if using the system event types your program should be sure to create the standard attributes with appropriate values.", "If the event queue is full a pygame.error is raised.", "Caution: In pygame 2.0, calling this function with event types defined by pygame (such as pygame.KEYDOWN) may put events into the SDL2 event queue. In this case, an error may be raised if standard attributes of that event are missing or have incompatible values, and unexpected properties may be silently omitted. In order to avoid this behaviour, custom event properties should be used with custom event types. This behaviour is not guaranteed.", "Reserves a pygame.USEREVENT for a custom use.", "If too many events are made a pygame.error is raised.", "New in pygame 2.0.0.dev3.", "Creates a new event with the given type and attributes. The attributes can come from a dictionary argument with string keys or from keyword arguments.", "A pygame object that represents an event. User event instances are created with an pygame.event.Event() function call. The EventType type is not directly callable. EventType instances support attribute assignment and deletion.", "Read-only. The event type identifier. For user created event objects, this is the type argument passed to pygame.event.Event().", "For example, some predefined event identifiers are QUIT and MOUSEMOTION.", "Read-only. The event type specific attributes of an event. The dict attribute is a synonym for backward compatibility.", "For example, the attributes of a KEYDOWN event would be unicode, key, and mod", "New in pygame 1.9.2: Mutable attributes."]}, {"name": "module-examples", "path": "ref/examples", "type": "pygame.examples", "text": ["These examples should help get you started with pygame. Here is a brief rundown of what you get. The source code for these examples is in the public domain. Feel free to use for your own projects.", "There are several ways to run the examples. First they can be run as stand-alone programs. Second they can be imported and their main() methods called (see below). Finally, the easiest way is to use the python -m option:", "eg:", "Resources such as images and sounds for the examples are found in the pygame/examples/data subdirectory.", "You can find where the example files are installed by using the following commands inside the python interpreter.", "On each OS and version of Python the location will be slightly different. For example on Windows it might be in 'C:/Python26/Lib/site-packages/pygame/examples/' On Mac OS X it might be in '/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pygame/examples/'", "You can also run the examples in the python interpreter by calling each modules main() function.", "We're always on the lookout for more examples and/or example requests. Code like this is probably the best way to start getting involved with python gaming.", "examples as a package is new to pygame 1.9.0. But most of the examples came with pygame much earlier.", "This started off as a port of the SDL demonstration, Aliens. Now it has evolved into something sort of resembling fun. This demonstrates a lot of different uses of sprites and optimized blitting. Also transparency, colorkeys, fonts, sound, music, joystick, and more. (PS, my high score is 117! goodluck)", "This more closely resembles a port of the SDL Aliens demo. The code is a lot simpler, so it makes a better starting point for people looking at code for the first times. These blitting routines are not as optimized as they should/could be, but the code is easier to follow, and it plays quick enough.", "A simple starfield example. You can change the center of perspective by leftclicking the mouse on the screen.", "This simple example is derived from the line-by-line tutorial that comes with pygame. It is based on a 'popular' web banner. Note there are comments here, but for the full explanation, follow along in the tutorial.", "This is the full and final example from the Pygame Tutorial, \"How Do I Make It Move\". It creates 10 objects and animates them on the screen.", "Note it's a bit scant on error checking, but it's easy to read. :] Fortunately, this is python, and we needn't wrestle with a pile of error codes.", "Super quick, super simple application demonstrating the different ways to render fonts with the font module", "A showcase of rendering features the pygame.freetype.Font class provides in addition to those available with pygame.font.Font. It is a demonstration of direct to surface rendering, with vertical text and rotated text, opaque text and semi transparent text, horizontally stretched text and vertically stretched text.", "Demonstrates creating a vertical gradient with pixelcopy and NumPy python. The app will create a new gradient every half second and report the time needed to create and display the image. If you're not prepared to start working with the NumPy arrays, don't worry about the source for this one :]", "Eventlist is a sloppy style of pygame, but is a handy tool for learning about pygame events and input. At the top of the screen are the state of several device values, and a scrolling list of events are displayed on the bottom.", "This is not quality 'ui' code at all, but you can see how to implement very non-interactive status displays, or even a crude text output control.", "Another example filled with various surfarray effects. It requires the surfarray and image modules to be installed. This little demo can also make a good starting point for any of your own tests with surfarray", "The arraytype parameter is deprecated; passing any value besides 'numpy' will raise ValueError.", "Extremely basic testing of the mixer module. Load a sound and play it. All from the command shell, no graphics.", "If provided, use the audio file 'file_path', otherwise use a default file.", "sound.py optional command line argument: an audio file", "Uses sndarray and NumPy to create offset faded copies of the original sound. Currently it just uses hardcoded values for the number of echoes and the delay. Easy for you to recreate as needed.", "The arraytype parameter is deprecated; passing any value besides 'numpy' will raise ValueError.", "This example was created in a quick comparison with the BlitzBasic gaming language. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).", "Using PyOpenGL and pygame, this creates a spinning 3D multicolored cube.", "A simple demonstration example for the clipboard support.", "Positional arguments:", "This pygame.masks demo will display multiple moving sprites bouncing off each other. More than one sprite image can be provided.", "If run as a program then mask.py takes one or more image files as command line arguments.", "Optional keyword arguments:", "Like the testsprite.c that comes with SDL, this pygame version shows lots of sprites moving around.", "If run as a stand-alone program then no command line arguments are taken.", "arguments:", "How to use pygame with no windowing system, like on headless servers.", "Thumbnail generation with scaling is an example of what you can do with pygame.", "NOTE: the pygame scale function uses MMX/SSE if available, and can be run in multiple threads.", "If headless_no_windows_needed.py is run as a program it takes the following command line arguments:", "This is a stress test for the fastevents module.", "So far it looks like normal pygame.event is faster by up to two times. So maybe fastevent isn't fast at all.", "Tested on Windows XP SP2 Athlon, and FreeBSD.", "However... on my Debian Duron 850 machine fastevents is faster.", "Play the .pgm video file given by a path fname.", "If run as a program overlay.py takes the file name as a command line argument.", "A interactive demo that lets one choose which BLEND_xxx option to apply to a surface.", "Fake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat like blend_fill.", "Display an arrow or circle with crossbar cursor.", "Display various pixelarray generated effects.", "arguments:", "A smoothscale example that resized an image on the screen. Vertical and horizontal arrow keys are used to change the width and height of the displayed image. If the convert_alpha option is True then the source image is forced to have source alpha, whether or not the original images does. If run_speed_test is True then a background timing test is performed instead of the interactive scaler.", "If scaletest.py is run as a program then the command line options are:", "Arguments:", "The output example shows how to translate mouse clicks or computer keyboard events into midi notes. It implements a rudimentary button widget and state machine.", "The input example shows how to translate midi input to pygame events.", "With the use of a virtual midi patch cord the output and input examples can be run as separate processes and connected so the keyboard output is displayed on a console.", "new to pygame 1.9.0", "This example shows a scrollable image that has a zoom factor of eight. It uses the Surface.scroll() function to shift the image on the display surface. A clip rectangle protects a margin area. If called as a function, the example accepts an optional image file path. If run as a program it takes an optional file path command line argument. If no file is provided a default image file is used.", "When running click on a black triangle to move one pixel in the direction the triangle points. Or use the arrow keys. Close the window or press ESC to quit.", "A simple live video player, it uses the first available camera it finds on the system.", "A simple music player with window and keyboard playback control. Playback can be paused and rewound to the beginning."]}, {"name": "module-fastevent", "path": "ref/fastevent", "type": "pygame.fastevent", "text": ["pygame.fastevent is a wrapper for Bob Pendleton's fastevent library. It provides fast events for use in multithreaded environments. When using pygame.fastevent, you can not use any of the pump, wait, poll, post, get, peek, etc. functions from pygame.event, but you should use the Event objects.", "Initialize the pygame.fastevent module.", "Returns True if the pygame.fastevent module is currently initialized.", "For each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system.", "This function is not necessary if your program is consistently processing events on the queue through the other pygame.fastevent functions.", "There are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.", "Returns the current event on the queue. If there are no messages waiting on the queue, this will not return until one is available. Sometimes it is important to use this wait to get events from the queue, it will allow your application to idle when the user isn't doing anything with it.", "Returns next event on queue. If there is no event waiting on the queue, this will return an event with type NOEVENT.", "This will get all the messages and remove them from the queue.", "This will post your own event objects onto the event queue. You can post any event type you want, but some care must be taken. For example, if you post a MOUSEBUTTONDOWN event to the queue, it is likely any code receiving the event will expect the standard MOUSEBUTTONDOWN attributes to be available, like 'pos' and 'button'.", "Because pygame.fastevent.post() may have to wait for the queue to empty, you can get into a dead lock if you try to append an event on to a full queue from the thread that processes events. For that reason I do not recommend using this function in the main thread of an SDL program."]}, {"name": "module-font", "path": "ref/font", "type": "pygame.font", "text": ["The font module allows for rendering TrueType fonts into a new Surface object. It accepts any UCS-2 character ('u0001' to 'uFFFF'). This module is optional and requires SDL_ttf as a dependency. You should test that pygame.font is available and initialized before attempting to use the module.", "Most of the work done with fonts are done by using the actual Font objects. The module by itself only has routines to initialize the module and create Font objects with pygame.font.Font().", "You can load fonts from the system by using the pygame.font.SysFont() function. There are a few other functions to help lookup the system fonts.", "Pygame comes with a builtin default font. This can always be accessed by passing None as the font name.", "To use the pygame.freetype based pygame.ftfont as pygame.font define the environment variable PYGAME_FREETYPE before the first import of pygame. Module pygame.ftfont is a pygame.font compatible module that passes all but one of the font module unit tests: it does not have the UCS-2 limitation of the SDL_ttf based font module, so fails to raise an exception for a code point greater than 'uFFFF'. If pygame.freetype is unavailable then the SDL_ttf font module will be loaded instead.", "This method is called automatically by pygame.init(). It initializes the font module. The module must be initialized before any other functions will work.", "It is safe to call this function more than once.", "Manually uninitialize SDL_ttf's font system. This is called automatically by pygame.quit().", "It is safe to call this function even if font is currently not initialized.", "Test if the font module is initialized or not.", "Return the filename of the system font. This is not the full path to the file. This file can usually be found in the same directory as the font module, but it can also be bundled in separate archives.", "Returns a list of all the fonts available on the system. The names of the fonts will be set to lowercase with all spaces and punctuation removed. This works on most systems, but some will return an empty list if they cannot find fonts.", "Returns the full path to a font file on the system. If bold or italic are set to true, this will attempt to find the correct family of font.", "The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order. If none of the given names are found, None is returned.", "New in pygame 2.0.1: Accept an iterable of font names.", "Example:", "Return a new Font object that is loaded from the system fonts. The font will match the requested bold and italic flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.", "The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.", "New in pygame 2.0.1: Accept an iterable of font names.", "Load a new font from a given filename or a python file object. The size is the height of the font in pixels. If the filename is None the pygame default font will be loaded. If a font cannot be loaded from the arguments given an exception will be raised. Once the font is created the size cannot be changed.", "Font objects are mainly used to render text into new Surface objects. The render can emulate bold or italic features, but it is better to load from a font with actual italic or bold glyphs. The rendered text can be regular strings or unicode.", "Whether the font should be rendered in bold.", "When set to True, this enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic and underline modes.", "New in pygame 2.0.0.", "Whether the font should be rendered in italic.", "When set to True, this enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold and underline modes.", "New in pygame 2.0.0.", "Whether the font should be rendered in underline.", "When set to True, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold and italic modes.", "New in pygame 2.0.0.", "This creates a new Surface with the specified text rendered on it. pygame provides no way to directly draw text on an existing Surface: instead you must use Font.render() to create an image (Surface) of the text, then blit this image onto another Surface.", "The text can only be a single line: newline characters are not rendered. Null characters ('x00') raise a TypeError. Both Unicode and char (byte) strings are accepted. For Unicode strings only UCS-2 characters ('u0001' to 'uFFFF') are recognized. Anything greater raises a UnicodeError. For char strings a LATIN1 encoding is assumed. The antialias argument is a boolean: if true the characters will have smooth edges. The color argument is the color of the text [e.g.: (0,0,255) for blue]. The optional background argument is a color to use for the text background. If no background is passed the area outside the text will be transparent.", "The Surface returned will be of the dimensions required to hold the text. (the same as those returned by Font.size()). If an empty string is passed for the text, a blank surface will be returned that is zero pixel wide and the height of the font.", "Depending on the type of background and antialiasing used, this returns different types of Surfaces. For performance reasons, it is good to know what type of image will be used. If antialiasing is not used, the return image will always be an 8-bit image with a two-color palette. If the background is transparent a colorkey will be set. Antialiased images are rendered to 24-bit RGB images. If the background is transparent a pixel alpha will be included.", "Optimization: if you know that the final destination for the text (on the screen) will always have a solid background, and the text is antialiased, you can improve performance by specifying the background color. This will cause the resulting image to maintain transparency information by colorkey rather than (much less efficient) alpha values.", "If you render '\\n' an unknown char will be rendered. Usually a rectangle. Instead you need to handle new lines yourself.", "Font rendering is not thread safe: only a single thread can render text at any time.", "Returns the dimensions needed to render the text. This can be used to help determine the positioning needed for text before it is rendered. It can also be used for wordwrapping and other layout effects.", "Be aware that most fonts use kerning which adjusts the widths for specific letter pairs. For example, the width for \"ae\" will not always match the width for \"a\" + \"e\".", "When enabled, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold and italic modes.", "Note", "This is the same as the underline attribute.", "Return True when the font underline is enabled.", "Note", "This is the same as the underline attribute.", "Enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic and underline modes.", "Note", "This is the same as the bold attribute.", "Return True when the font bold rendering mode is enabled.", "Note", "This is the same as the bold attribute.", "Enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold and underline modes.", "Note", "This is the same as the italic attribute.", "The list contains tuples for each character, which contain the minimum X offset, the maximum X offset, the minimum Y offset, the maximum Y offset and the advance offset (bearing plus width) of the character. [(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy, advance), ...]. None is entered in the list for each unrecognized character.", "Return True when the font italic rendering mode is enabled.", "Note", "This is the same as the italic attribute.", "Return the height in pixels for a line of text with the font. When rendering multiple lines of text this is the recommended amount of space between lines.", "Return the height in pixels of the actual rendered text. This is the average size for each glyph in the font.", "Return the height in pixels for the font ascent. The ascent is the number of pixels from the font baseline to the top of the font.", "Return the height in pixels for the font descent. The descent is the number of pixels from the font baseline to the bottom of the font."]}, {"name": "module-freetype", "path": "ref/freetype", "type": "pygame.freetype", "text": ["The pygame.freetype module is a replacement for pygame.font. It has all of the functionality of the original, plus many new features. Yet is has absolutely no dependencies on the SDL_ttf library. It is implemented directly on the FreeType 2 library. The pygame.freetype module is not itself backward compatible with pygame.font. Instead, use the pygame.ftfont module as a drop-in replacement for pygame.font.", "All font file formats supported by FreeType can be rendered by pygame.freetype, namely TTF, Type1, CFF, OpenType, SFNT, PCF, FNT, BDF, PFR and Type42 fonts. All glyphs having UTF-32 code points are accessible (see Font.ucs4).", "Most work on fonts is done using Font instances. The module itself only has routines for initialization and creation of Font objects. You can load fonts from the system using the SysFont() function.", "Extra support of bitmap fonts is available. Available bitmap sizes can be listed (see Font.get_sizes()). For bitmap only fonts Font can set the size for you (see the Font.size property).", "For now undefined character codes are replaced with the .notdef (not defined) character. How undefined codes are handled may become configurable in a future release.", "Pygame comes with a built-in default font. This can always be accessed by passing None as the font name to the Font constructor.", "Extra rendering features available to pygame.freetype.Font are direct to surface rendering (see Font.render_to()), character kerning (see Font.kerning), vertical layout (see Font.vertical), rotation of rendered text (see Font.rotation), and the strong style (see Font.strong). Some properties are configurable, such as strong style strength (see Font.strength) and underline positioning (see Font.underline_adjustment). Text can be positioned by the upper right corner of the text box or by the text baseline (see Font.origin). Finally, a font's vertical and horizontal size can be adjusted separately (see Font.size). The pygame.examples.freetype_misc example shows these features in use.", "The pygame package does not import freetype automatically when loaded. This module must be imported explicitly to be used.", "New in pygame 1.9.2: freetype", "Return a description of the last error which occurred in the FreeType2 library, or None if no errors have occurred.", "Returns the version of the FreeType library in use by this module.", "Note that the freetype module depends on the FreeType 2 library. It will not compile with the original FreeType 1.0. Hence, the first element of the tuple will always be \"2\".", "This function initializes the underlying FreeType library and must be called before trying to use any of the functionality of the freetype module.", "However, pygame.init() will automatically call this function if the freetype module is already imported. It is safe to call this function more than once.", "Optionally, you may specify a default cache_size for the Glyph cache: the maximum number of glyphs that will be cached at any given time by the module. Exceedingly small values will be automatically tuned for performance. Also a default pixel resolution, in dots per inch, can be given to adjust font scaling.", "This function closes the freetype module. After calling this function, you should not invoke any class, method or function related to the freetype module as they are likely to fail or might give unpredictable results. It is safe to call this function even if the module hasn't been initialized yet.", "Returns True if the pygame.freetype module is currently initialized.", "New in pygame 1.9.5.", "DEPRECATED: Returns True if the pygame.freetype module is currently initialized. Use get_init() instead.", "See pygame.freetype.init().", "Returns the default pixel size, in dots per inch, for the module. The default is 72 DPI.", "Set the default pixel size, in dots per inch, for the module. If the optional argument is omitted or zero the resolution is reset to 72 DPI.", "Return a new Font object that is loaded from the system fonts. The font will match the requested bold and italic flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.", "The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.", "New in pygame 2.0.1: Accept an iterable of font names.", "Return the filename of the default pygame font. This is not the full path to the file. The file is usually in the same directory as the font module, but can also be bundled in a separate archive.", "Argument file can be either a string representing the font's filename, a file-like object containing the font, or None; if None, a default, Pygame, font is used.", "Optionally, a size argument may be specified to set the default size in points, which determines the size of the rendered characters. The size can also be passed explicitly to each method call. Because of the way the caching system works, specifying a default size on the constructor doesn't imply a performance gain over manually passing the size on each function call. If the font is bitmap and no size is given, the default size is set to the first available size for the font.", "If the font file has more than one font, the font to load can be chosen with the index argument. An exception is raised for an out-of-range font index value.", "The optional resolution argument sets the pixel size, in dots per inch, for use in scaling glyphs for this Font instance. If 0 then the default module value, set by init(), is used. The Font object's resolution can only be changed by re-initializing the Font instance.", "The optional ucs4 argument, an integer, sets the default text translation mode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True), to treat Unicode text as UCS-4, with no surrogate pairs. See Font.ucs4.", "Read only. Returns the real (long) name of the font, as recorded in the font file.", "Read only. Returns the path of the loaded font file", "Get or set the default size for text metrics and rendering. It can be a single point size, given as a Python int or float, or a font ppem (width, height) tuple. Size values are non-negative. A zero size or width represents an undefined size. In this case the size must be given as a method argument, or an exception is raised. A zero width but non-zero height is a ValueError.", "For a scalable font, a single number value is equivalent to a tuple with width equal height. A font can be stretched vertically with height set greater than width, or horizontally with width set greater than height. For embedded bitmaps, as listed by get_sizes(), use the nominal width and height to select an available size.", "Font size differs for a non-scalable, bitmap, font. During a method call it must match one of the available sizes returned by method get_sizes(). If not, an exception is raised. If the size is a single number, the size is first matched against the point size value. If no match, then the available size with the same nominal width and height is chosen.", "Gets the final dimensions and origin, in pixels, of text using the optional size in points, style, and rotation. For other relevant render properties, and for any optional argument not given, the default values set for the Font instance are used.", "Returns a Rect instance containing the width and height of the text's bounding box and the position of the text's origin. The origin is useful in aligning separately rendered pieces of text. It gives the baseline position and bearing at the start of the text. See the render_to() method for an example.", "If text is a char (byte) string, its encoding is assumed to be LATIN1.", "Optionally, text can be None, which will return the bounding rectangle for the text passed to a previous get_rect(), render(), render_to(), render_raw(), or render_raw_to() call. See render_to() for more details.", "Returns the glyph metrics for each character in text.", "The glyph metrics are returned as a list of tuples. Each tuple gives metrics of a single character glyph. The glyph metrics are:", "The bounding box min_x, max_x, min_y, and max_y values are returned as grid-fitted pixel coordinates of type int. The advance values are float values.", "The calculations are done using the font's default size in points. Optionally you may specify another point size with the size argument.", "The metrics are adjusted for the current rotation, strong, and oblique settings.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1.", "Read only. Gets the height of the font. This is the average value of all glyphs in the font.", "Read only. Return the number of units from the font's baseline to the top of the bounding box.", "Read only. Return the height in font units for the font descent. The descent is the number of units from the font's baseline to the bottom of the bounding box.", "Return the number of units from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.", "Return the number of pixels from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.", "Returns the height of the font. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.", "Return the glyph bounding box height of the font in pixels. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.", "Returns a list of tuple records, one for each point size supported. Each tuple containing the point size, the height in pixels, width in pixels, horizontal ppem (nominal width) in fractional pixels, and vertical ppem (nominal height) in fractional pixels.", "Returns a new Surface, with the text rendered to it in the color given by 'fgcolor'. If no foreground color is given, the default foreground color, fgcolor is used. If bgcolor is given, the surface will be filled with this color. When no background color is given, the surface background is transparent, zero alpha. Normally the returned surface has a 32 bit pixel size. However, if bgcolor is None and anti-aliasing is disabled a monochrome 8 bit colorkey surface, with colorkey set for the background color, is returned.", "The return value is a tuple: the new surface and the bounding rectangle giving the size and origin of the rendered text.", "If an empty string is passed for text then the returned Rect is zero width and the height of the font.", "Optional fgcolor, style, rotation, and size arguments override the default values set for the Font instance.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1.", "Optionally, text can be None, which will render the text passed to a previous get_rect(), render(), render_to(), render_raw(), or render_raw_to() call. See render_to() for details.", "Renders the string text to the pygame.Surface surf, at position dest, a (x, y) surface coordinate pair. If either x or y is not an integer it is converted to one if possible. Any sequence where the first two items are x and y positional elements is accepted, including a Rect instance. As with render(), optional fgcolor, style, rotation, and size argument are available.", "If a background color bgcolor is given, the text bounding box is first filled with that color. The text is blitted next. Both the background fill and text rendering involve full alpha blits. That is, the alpha values of the foreground, background, and destination target surface all affect the blit.", "The return value is a rectangle giving the size and position of the rendered text within the surface.", "If an empty string is passed for text then the returned Rect is zero width and the height of the font. The rect will test False.", "Optionally, text can be set None, which will re-render text passed to a previous render_to(), get_rect(), render(), render_raw(), or render_raw_to() call. Primarily, this feature is an aid to using render_to() in combination with get_rect(). An example:", "When render_to() is called with the same font properties \u2015 size, style, strength, wide, antialiased, vertical, rotation, kerning, and use_bitmap_strikes \u2015 as get_rect(), render_to() will use the layout calculated by get_rect(). Otherwise, render_to() will recalculate the layout if called with a text string or one of the above properties has changed after the get_rect() call.", "If text is a char (byte) string, then its encoding is assumed to be LATIN1.", "Like render() but with the pixels returned as a byte string of 8-bit gray-scale values. The foreground color is 255, the background 0, useful as an alpha mask for a foreground pattern.", "Render to an array object exposing an array struct interface. The array must be two dimensional with integer items. The default dest value, None, is equivalent to position (0, 0). See render_to(). As with the other render methods, text can be None to render a text string passed previously to another method.", "The return value is a pygame.Rect() giving the size and position of the rendered text.", "Gets or sets the default style of the Font. This default style will be used for all text rendering and size calculations unless overridden specifically a render or get_rect() call. The style value may be a bit-wise OR of one or more of the following constants:", "These constants may be found on the FreeType constants module. Optionally, the default style can be modified or obtained accessing the individual style attributes (underline, oblique, strong).", "The STYLE_OBLIQUE and STYLE_STRONG styles are for scalable fonts only. An attempt to set either for a bitmap font raises an AttributeError. An attempt to set either for an inactive font, as returned by Font.__new__(), raises a RuntimeError.", "Assigning STYLE_DEFAULT to the style property leaves the property unchanged, as this property defines the default. The style property will never return STYLE_DEFAULT.", "Gets or sets whether the font will be underlined when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the 'style' parameter.", "Gets or sets whether the font will be bold when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the 'style' parameter.", "Gets or sets whether the font will be rendered as oblique. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or get_rect() call, via the style parameter.", "The oblique style is only supported for scalable (outline) fonts. An attempt to set this style on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by Font.__new__(), setting this property raises a RuntimeError.", "Gets or sets whether the font will be stretched horizontally when drawing text. It produces a result similar to pygame.font.Font's bold. This style not available for rotated text.", "The amount by which a font glyph's size is enlarged for the strong or wide transformations, as a fraction of the untransformed size. For the wide style only the horizontal dimension is increased. For strong text both the horizontal and vertical dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is equivalent to the pygame.font.Font bold style. The default is 0.02778 ( 1/36 ).", "The strength style is only supported for scalable (outline) fonts. An attempt to set this property on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by Font.__new__(), assignment to this property raises a RuntimeError.", "Gets or sets a factor which, when positive, is multiplied with the font's underline offset to adjust the underline position. A negative value turns an underline into a strike-through or overline. It is multiplied with the ascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5 closely matches Tango underlining. A value of 1.0 mimics pygame.font.Font underlining.", "Read only. Returns True if the font contains fixed-width characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).", "Read only. Returns the number of point sizes for which the font contains bitmap character images. If zero then the font is not a bitmap font. A scalable font may contain pre-rendered point sizes as strikes.", "Read only. Returns True if the font contains outline glyphs. If so, the point size is not limited to available bitmap sizes.", "Some scalable fonts include embedded bitmaps for particular point sizes. This property controls whether or not those bitmap strikes are used. Set it False to disable the loading of any bitmap strike. Set it True, the default, to permit bitmap strikes for a non-rotated render with no style other than wide or underline. This property is ignored for bitmap fonts.", "See also fixed_sizes and get_sizes().", "Gets or sets the font's anti-aliasing mode. This defaults to True on all fonts, which are rendered with full 8 bit blending.", "Set to False to do monochrome rendering. This should provide a small speed gain and reduce cache memory size.", "Gets or sets the font's kerning mode. This defaults to False on all fonts, which will be rendered without kerning.", "Set to True to add kerning between character pairs, if supported by the font, when positioning glyphs.", "Gets or sets whether the characters are laid out vertically rather than horizontally. May be useful when rendering Kanji or some other vertical script.", "Set to True to switch to a vertical text layout. The default is False, place horizontally.", "Note that the Font class does not automatically determine script orientation. Vertical layout must be selected explicitly.", "Also note that several font formats (especially bitmap based ones) don't contain the necessary metrics to draw glyphs vertically, so drawing in those cases will give unspecified results.", "Gets or sets the baseline angle of the rendered text. The angle is represented as integer degrees. The default angle is 0, with horizontal text rendered along the X-axis, and vertical text along the Y-axis. A positive value rotates these axes counterclockwise that many degrees. A negative angle corresponds to a clockwise rotation. The rotation value is normalized to a value within the range 0 to 359 inclusive (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315, 720 -> 720 - (2 * 360) -> 0).", "Only scalable (outline) fonts can be rotated. An attempt to change the rotation of a bitmap font raises an AttributeError. An attempt to change the rotation of an inactive font instance, as returned by Font.__new__(), raises a RuntimeError.", "Gets or sets the default glyph rendering color. It is initially opaque black \u2015 (0, 0, 0, 255). Applies to render() and render_to().", "Gets or sets the default background rendering color. Initially it is unset and text will render with a transparent background by default. Applies to render() and render_to().", "New in pygame 2.0.0.", "If set True, render_to() and render_raw_to() will take the dest position to be that of the text origin, as opposed to the top-left corner of the bounding box. See get_rect() for details.", "If set True, then the text boundary rectangle will be inflated to match that of font.Font. Otherwise, the boundary rectangle is just large enough for the text.", "Gets or sets the decoding of Unicode text. By default, the freetype module performs UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit escape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their corresponding UTF-32 code points on Python interpreters built with a UCS-2 Unicode type (on Windows, for instance). It also means character values within the UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError. Setting ucs4 True turns surrogate pair decoding off, allowing access the full UCS-4 character range to a Python interpreter built with four-byte Unicode character support.", "Read only. Gets pixel size used in scaling font glyphs for this Font instance."]}, {"name": "module-gfxdraw", "path": "ref/gfxdraw", "type": "pygame.gfxdraw", "text": ["EXPERIMENTAL!: This API may change or disappear in later pygame releases. If you use this, your code may break with the next pygame release.", "The pygame package does not import gfxdraw automatically when loaded, so it must imported explicitly to be used.", "For all functions the arguments are strictly positional and integers are accepted for coordinates and radii. The color argument can be one of the following formats:", "The functions rectangle() and box() will accept any (x, y, w, h) sequence for their rect argument, though pygame.Rect instances are preferred.", "To draw a filled antialiased shape, first use the antialiased (aa*) version of the function, and then use the filled (filled_*) version. For example:", "Note", "For threading, each of the functions releases the GIL during the C part of the call.", "Note", "See the pygame.draw module for alternative draw methods. The pygame.gfxdraw module differs from the pygame.draw module in the API it uses and the different draw functions available. pygame.gfxdraw wraps the primitives from the library called SDL_gfx, rather than using modified versions.", "New in pygame 1.9.0.", "Draws a single pixel, at position (x ,y), on the given surface.", "None", "NoneType", "Draws a straight horizontal line ((x1, y) to (x2, y)) on the given surface. There are no endcaps.", "None", "NoneType", "Draws a straight vertical line ((x, y1) to (x, y2)) on the given surface. There are no endcaps.", "None", "NoneType", "Draws a straight line ((x1, y1) to (x2, y2)) on the given surface. There are no endcaps.", "None", "NoneType", "Draws an unfilled rectangle on the given surface. For a filled rectangle use box().", "None", "NoneType", "Note", "The rect.bottom and rect.right attributes of a pygame.Rect always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.", "Draws a filled rectangle on the given surface. For an unfilled rectangle use rectangle().", "None", "NoneType", "Note", "The rect.bottom and rect.right attributes of a pygame.Rect always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.", "Note", "The pygame.Surface.fill() method works just as well for drawing filled rectangles. In fact pygame.Surface.fill() can be hardware accelerated on some platforms with both software and hardware display modes.", "Draws an unfilled circle on the given surface. For a filled circle use filled_circle().", "None", "NoneType", "Draws an unfilled antialiased circle on the given surface.", "None", "NoneType", "Draws a filled circle on the given surface. For an unfilled circle use circle().", "None", "NoneType", "Draws an unfilled ellipse on the given surface. For a filled ellipse use filled_ellipse().", "None", "NoneType", "Draws an unfilled antialiased ellipse on the given surface.", "None", "NoneType", "Draws a filled ellipse on the given surface. For an unfilled ellipse use ellipse().", "None", "NoneType", "Draws an arc on the given surface. For an arc with its endpoints connected to its center use pie().", "The two angle arguments are given in degrees and indicate the start and stop positions of the arc. The arc is drawn in a clockwise direction from the start_angle to the stop_angle. If start_angle == stop_angle, nothing will be drawn", "None", "NoneType", "Note", "This function uses degrees while the pygame.draw.arc() function uses radians.", "Draws an unfilled pie on the given surface. A pie is an arc() with its endpoints connected to its center.", "The two angle arguments are given in degrees and indicate the start and stop positions of the pie. The pie is drawn in a clockwise direction from the start_angle to the stop_angle. If start_angle == stop_angle, a straight line will be drawn from the center position at the given angle, to a length of the radius.", "None", "NoneType", "Draws an unfilled trigon (triangle) on the given surface. For a filled trigon use filled_trigon().", "A trigon can also be drawn using polygon() e.g. polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)", "None", "NoneType", "Draws an unfilled antialiased trigon (triangle) on the given surface.", "An aatrigon can also be drawn using aapolygon() e.g. aapolygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)", "None", "NoneType", "Draws a filled trigon (triangle) on the given surface. For an unfilled trigon use trigon().", "A filled_trigon can also be drawn using filled_polygon() e.g. filled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)", "None", "NoneType", "Draws an unfilled polygon on the given surface. For a filled polygon use filled_polygon().", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType", "Draws an unfilled antialiased polygon on the given surface.", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType", "Draws a filled polygon on the given surface. For an unfilled polygon use polygon().", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType", "Draws a textured polygon on the given surface. For better performance, the surface and the texture should have the same format.", "A per-pixel alpha texture blit to a per-pixel alpha surface will differ from a pygame.Surface.blit() blit. Also, a per-pixel alpha texture cannot be used with an 8-bit per pixel destination.", "The adjacent coordinates in the points argument, as well as the first and last points, will be connected by line segments. e.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn from (x1, y1) to (x2, y2), from (x2, y2) to (x3, y3), and from (x3, y3) to (x1, y1).", "None", "NoneType", "Draws a B\u00e9zier curve on the given surface.", "None", "NoneType"]}, {"name": "module-image", "path": "ref/image", "type": "pygame.image", "text": ["The image module contains functions for loading and saving pictures, as well as transferring Surfaces to formats usable by other packages.", "Note that there is no Image class; an image is loaded as a Surface object. The Surface class allows manipulation (drawing lines, setting pixels, capturing regions, etc.).", "The image module is a required dependency of pygame, but it only optionally supports any extended file formats. By default it can only load uncompressed BMP images. When built with full image support, the pygame.image.load() function can support the following formats.", "Saving images only supports a limited set of formats. You can save to the following formats.", "JPEG and JPG refer to the same file format", "New in pygame 1.8: Saving PNG and JPEG files.", "Load an image from a file source. You can pass either a filename or a Python file-like object.", "This function only supports loading \"basic\" image format, ie BMP format. This function is always available, no matter how pygame was built.", "Load an image from a file source. You can pass either a filename or a Python file-like object.", "Pygame will automatically determine the image type (e.g., GIF or bitmap) and create a new Surface object from the data. In some cases it will need to know the file extension (e.g., GIF images should end in \".gif\"). If you pass a raw file-like object, you may also want to pass the original filename as the namehint argument.", "The returned Surface will contain the same color format, colorkey and alpha transparency as the file it came from. You will often want to call Surface.convert() with no arguments, to create a copy that will draw more quickly on the screen.", "For alpha transparency, like in .png images, use the convert_alpha() method after loading so that the image has per pixel transparency.", "pygame may not always be built to support all image formats. At minimum it will support uncompressed BMP. If pygame.image.get_extended() returns 'True', you should be able to load most images (including PNG, JPG and GIF).", "You should use os.path.join() for compatibility.", "This function is similar to pygame.image.load(), except that this function can only be used if pygame was built with extended image format support.", "From version 2.0.1, this function is always available, but raises an error if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.", "Changed in pygame 2.0.1.", "This will save your Surface as either a BMP, TGA, PNG, or JPEG image. If the filename extension is unrecognized it will default to TGA. Both TGA, and BMP file formats create uncompressed files. You can pass a filename or a Python file-like object. For file-like object, the image is saved to TGA format unless a namehint with a recognizable extension is passed in.", "Note", "To be able to save the JPEG file format to a file-like object, SDL2_Image version 2.0.2 or newer is needed.", "Note", "When saving to a file-like object, it seems that for most formats, the object needs to be flushed after saving to it to make loading from it possible.", "Changed in pygame 1.8: Saving PNG and JPEG files.", "Changed in pygame 2.0.0.dev11: The namehint parameter was added to make it possible to save other formats than TGA to a file-like object.", "This will save your Surface as either a PNG or JPEG image.", "Incase the image is being saved to a file-like object, this function uses the namehint argument to determine the format of the file being saved. Saves to JPEG incase the namehint was not specified while saving to file-like object.", "From version 2.0.1, this function is always available, but raises an error if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.", "Changed in pygame 2.0.1.", "If pygame is built with extended image formats, then this function will return the SDL_Image library's version number as a tuple of 3 integers (major, minor, patch). If not, then it will return None.", "New in pygame 2.0.0.dev11.", "If pygame is built with extended image formats this function will return True. It is still not possible to determine which formats will be available, but generally you will be able to load them all.", "Creates a string that can be transferred with the 'fromstring' method in other Python imaging packages. Some Python image packages prefer their images in bottom-to-top format (PyOpenGL for example). If you pass True for the flipped argument, the string buffer will be vertically flipped.", "The format argument is a string of one of the following values. Note that only 8-bit Surfaces can use the \"P\" format. The other formats will work for any Surface. Also note that other Python image packages support more formats than pygame.", "This function takes arguments similar to pygame.image.tostring(). The size argument is a pair of numbers representing the width and height. Once the new Surface is created you can destroy the string buffer.", "The size and format image must compute the exact same size as the passed string buffer. Otherwise an exception will be raised.", "See the pygame.image.frombuffer() method for a potentially faster way to transfer images into pygame.", "Create a new Surface that shares pixel data directly from a bytes buffer. This method takes similar arguments to pygame.image.fromstring(), but is unable to vertically flip the source data.", "This will run much faster than pygame.image.fromstring(), since no pixel data must be allocated and copied.", "It accepts the following 'format' arguments:"]}, {"name": "module-joystick", "path": "ref/joystick", "type": "pygame.joystick", "text": ["The joystick module manages the joystick devices on a computer. Joystick devices include trackballs and video-game-style gamepads, and the module allows the use of multiple buttons and \"hats\". Computers may manage multiple joysticks at a time.", "Each instance of the Joystick class represents one gaming device plugged into the computer. If a gaming pad has multiple joysticks on it, than the joystick object can actually represent multiple joysticks on that single game device.", "For a quick way to initialise the joystick module and get a list of Joystick instances use the following code:", "The following event types will be generated by the joysticks", "And in pygame 2, which supports hotplugging:", "Note that in pygame 2, joysticks events use a unique \"instance ID\". The device index passed in the constructor to a Joystick object is not unique after devices have been added and removed. You must call Joystick.get_instance_id() to find the instance ID that was assigned to a Joystick on opening.", "The event queue needs to be pumped frequently for some of the methods to work. So call one of pygame.event.get, pygame.event.wait, or pygame.event.pump regularly.", "This function is called automatically by pygame.init().", "It initializes the joystick module. The module must be initialized before any other functions will work.", "It is safe to call this function more than once.", "Uninitialize the joystick module. After you call this any existing joystick objects will no longer work.", "It is safe to call this function more than once.", "Test if the pygame.joystick.init() function has been called.", "Return the number of joystick devices on the system. The count will be 0 if there are no joysticks on the system.", "When you create Joystick objects using Joystick(id), you pass an integer that must be lower than this count.", "Create a new joystick to access a physical device. The id argument must be a value from 0 to pygame.joystick.get_count() - 1.", "Joysticks are initialised on creation and are shut down when deallocated. Once the device is initialized the pygame event queue will start receiving events about its input.", "Changed in pygame 2.0.0: Joystick objects are now opened immediately on creation.", "Initialize the joystick, if it has been closed. It is safe to call this even if the joystick is already initialized.", "Deprecated since pygame 2.0.0: In future it will not be possible to reinitialise a closed Joystick object. Will be removed in Pygame 2.1.", "Close a Joystick object. After this the pygame event queue will no longer receive events from the device.", "It is safe to call this more than once.", "Return True if the Joystick object is currently initialised.", "Returns the original device index for this device. This is the same value that was passed to the Joystick() constructor. This method can safely be called while the Joystick is not initialized.", "Deprecated since pygame 2.0.0: The original device index is not useful in pygame 2. Use get_instance_id() instead. Will be removed in Pygame 2.1.", "Get the joystick instance ID. This matches the instance_id field that is given in joystick events.", "New in pygame 2.0.0dev11.", "Get the GUID string. This identifies the exact hardware of the joystick device.", "New in pygame 2.0.0dev11.", "Get a string giving the power status of the device.", "One of: empty, low, medium, full, wired, max, or unknown.", "New in pygame 2.0.0dev11.", "Returns the system name for this joystick device. It is unknown what name the system will give to the Joystick, but it should be a unique name that identifies the device. This method can safely be called while the Joystick is not initialized.", "Returns the number of input axes are on a Joystick. There will usually be two for the position. Controls like rudders and throttles are treated as additional axes.", "The pygame.JOYAXISMOTION events will be in the range from -1.0 to 1.0. A value of 0.0 means the axis is centered. Gamepad devices will usually be -1, 0, or 1 with no values in between. Older analog joystick axes will not always use the full -1 to 1 range, and the centered value will be some area around 0.", "Analog joysticks usually have a bit of noise in their axis, which will generate a lot of rapid small motion events.", "Returns the current position of a joystick axis. The value will range from -1 to 1 with a value of 0 being centered. You may want to take into account some tolerance to handle jitter, and joystick drift may keep the joystick from centering at 0 or using the full range of position values.", "The axis number must be an integer from 0 to get_numaxes() - 1.", "When using gamepads both the control sticks and the analog triggers are usually reported as axes.", "Returns the number of trackball devices on a Joystick. These devices work similar to a mouse but they have no absolute position; they only have relative amounts of movement.", "The pygame.JOYBALLMOTION event will be sent when the trackball is rolled. It will report the amount of movement on the trackball.", "Returns the relative movement of a joystick button. The value is a x, y pair holding the relative movement since the last call to get_ball.", "The ball number must be an integer from 0 to get_numballs() - 1.", "Returns the number of pushable buttons on the joystick. These buttons have a boolean (on or off) state.", "Buttons generate a pygame.JOYBUTTONDOWN and pygame.JOYBUTTONUP event when they are pressed and released.", "Returns the current state of a joystick button.", "Returns the number of joystick hats on a Joystick. Hat devices are like miniature digital joysticks on a joystick. Each hat has two axes of input.", "The pygame.JOYHATMOTION event is generated when the hat changes position. The position attribute for the event contains a pair of values that are either -1, 0, or 1. A position of (0, 0) means the hat is centered.", "Returns the current position of a position hat. The position is given as two values representing the x and y position for the hat. (0, 0) means centered. A value of -1 means left/down and a value of 1 means right/up: so (-1, 0) means left; (1, 0) means right; (0, 1) means up; (1, 1) means upper-right; etc.", "This value is digital, i.e., each coordinate can be -1, 0 or 1 but never in-between.", "The hat number must be between 0 and get_numhats() - 1.", "Example code for joystick module.", "Common Controller Axis Mappings", "Controller mappings are drawn from the underlying SDL library which pygame uses and they differ between pygame 1 and pygame 2. Below are a couple of mappings for two popular game pads.", "Pygame 2", "Axis and hat mappings are listed from -1 to +1.", "X-Box 360 Controller (name: \"Xbox 360 Controller\")", "In pygame 2 the X360 controller mapping has 6 Axes, 11 buttons and 1 hat.", "Left Stick:", "Right Stick:", "Left Trigger:", "Right Trigger:", "Buttons:", "Hat/D-pad:", "Playstation 4 Controller (name: \"PS4 Controller\")", "In pygame 2 the PS4 controller mapping has 6 Axes and 16 buttons.", "Left Stick:", "Right Stick:", "Left Trigger:", "Right Trigger:", "Buttons:", "Pygame 1", "Axis and hat mappings are listed from -1 to +1.", "X-Box 360 Controller (name: \"Controller (XBOX 360 For Windows)\")", "In pygame 1 the X360 controller mapping has 5 Axes, 10 buttons and 1 hat.", "Left Stick:", "Right Stick:", "Left Trigger & Right Trigger:", "Buttons:", "Hat/D-pad:", "Playstation 4 Controller (name: \"Wireless Controller\")", "In pygame 1 the PS4 controller mapping has 6 Axes and 14 buttons and 1 hat.", "Left Stick:", "Right Stick:", "Left Trigger:", "Right Trigger:", "Buttons:", "Hat/D-pad:"]}, {"name": "module-key", "path": "ref/key", "type": "pygame.key", "text": ["This module contains functions for dealing with the keyboard.", "The pygame.event queue gets pygame.KEYDOWN and pygame.KEYUP events when the keyboard buttons are pressed and released. Both events have key and mod attributes.", "The pygame.KEYDOWN event has the additional attributes unicode and scancode.", "New in pygame 2.0.0: The pygame.TEXTINPUT event is preferred to the unicode attribute of pygame.KEYDOWN. The attribute text contains the input.", "The following is a list of all the constants (from pygame.locals) used to represent keyboard keys.", "Portability note: The integers for key constants differ between pygame 1 and 2. Always use key constants (K_a) rather than integers directly (97) so that your key handling code works well on both pygame 1 and pygame 2.", "The keyboard also has a list of modifier states (from pygame.locals) that can be assembled by bitwise-ORing them together.", "The modifier information is contained in the mod attribute of the pygame.KEYDOWN and pygame.KEYUP events. The mod attribute is a bitmask of all the modifier keys that were in a pressed state when the event occurred. The modifier information can be decoded using a bitwise AND (except for KMOD_NONE, which should be compared using equals ==). For example:", "Returns True when the display window has keyboard focus from the system. If the display needs to ensure it does not lose keyboard focus, it can use pygame.event.set_grab() to grab all input.", "Returns a sequence of boolean values representing the state of every key on the keyboard. Use the key constant values to index the array. A True value means the that button is pressed.", "Note", "Getting the list of pushed buttons with this function is not the proper way to handle text entry from the user. There is no way to know the order of keys pressed, and rapidly pushed keys can be completely unnoticed between two calls to pygame.key.get_pressed(). There is also no way to translate these pushed keys into a fully translated character value. See the pygame.KEYDOWN events on the pygame.event queue for this functionality.", "Returns a single integer representing a bitmask of all the modifier keys being held. Using bitwise operators you can test if specific modifier keys are pressed.", "Create a bitmask of the modifier key constants you want to impose on your program.", "When the keyboard repeat is enabled, keys that are held down will generate multiple pygame.KEYDOWN events. The delay parameter is the number of milliseconds before the first repeated pygame.KEYDOWN event will be sent. After that, another pygame.KEYDOWN event will be sent every interval milliseconds. If a delay value is provided and an interval value is not provided or is 0, then the interval will be set to the same value as delay.", "To disable key repeat call this function with no arguments or with delay set to 0.", "When pygame is initialized the key repeat is disabled.", "Changed in pygame 2.0.0: A ValueError is now raised (instead of a pygame.error) if delay or interval is < 0.", "Get the delay and interval keyboard repeat values. Refer to pygame.key.set_repeat() for a description of these values.", "New in pygame 1.8.", "Get the descriptive name of the button from a keyboard button id constant.", "Get the key identifier code from the descriptive name of the key. This returns an integer matching one of the K_* keycodes. For example:", "New in pygame 2.0.0.", "Start receiving pygame.TEXTEDITING and pygame.TEXTINPUT events.", "A pygame.TEXTEDITING event is received when an IME composition is started or changed. It contains the composition text, length, and editing start position within the composition (attributes text, length, and start, respectively). When the composition is committed (or non-IME input is received), a pygame.TEXTINPUT event is generated.", "Text input events handling is on by default.", "New in pygame 2.0.0.", "Stop receiving pygame.TEXTEDITING and pygame.TEXTINPUT events.", "Text input events handling is on by default", "New in pygame 2.0.0.", "This sets the rectangle used for typing with an IME. It controls where the candidate list will open, if supported.", "New in pygame 2.0.0."]}, {"name": "module-locals", "path": "ref/locals", "type": "pygame.locals", "text": ["This module contains various constants used by pygame. Its contents are automatically placed in the pygame module namespace. However, an application can use pygame.locals to include only the pygame constants with a from\npygame.locals import *.", "Detailed descriptions of the various constants can be found throughout the pygame documentation. Here are the locations of some of them."]}, {"name": "module-mask", "path": "ref/mask", "type": "pygame.mask", "text": ["Useful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel to store which parts collide.", "New in pygame 1.8.", "Creates a Mask object from the given surface by setting all the opaque pixels and not setting the transparent pixels.", "If the surface uses a color-key, then it is used to decide which bits in the resulting mask are set. All the pixels that are not equal to the color-key are set and the pixels equal to the color-key are not set.", "If a color-key is not used, then the alpha value of each pixel is used to decide which bits in the resulting mask are set. All the pixels that have an alpha value greater than the threshold parameter are set and the pixels with an alpha value less than or equal to the threshold are not set.", "a newly created Mask object from the given surface", "Mask", "Note", "This function is used to create the masks for pygame.sprite.collide_mask().", "This is a more featureful method of getting a Mask from a surface.", "If the optional othersurface is not used, all the pixels within the threshold of the color parameter are set in the resulting mask.", "If the optional othersurface is used, every pixel in the first surface that is within the threshold of the corresponding pixel in othersurface is set in the resulting mask.", "a newly created Mask object from the given surface", "Mask", "A Mask object is used to represent a 2D bitmask. Each bit in the mask represents a pixel. 1 is used to indicate a set bit and 0 is used to indicate an unset bit. Set bits in a mask can be used to detect collisions with other masks and their set bits.", "A filled mask has all of its bits set to 1, conversely an unfilled/cleared/empty mask has all of its bits set to 0. Masks can be created unfilled (default) or filled by using the fill parameter. Masks can also be cleared or filled using the pygame.mask.Mask.clear() and pygame.mask.Mask.fill() methods respectively.", "A mask's coordinates start in the top left corner at (0, 0) just like pygame.Surface. Individual bits can be accessed using the pygame.mask.Mask.get_at() and pygame.mask.Mask.set_at() methods.", "The methods overlap(), overlap_area(), overlap_mask(), draw(), erase(), and convolve() use an offset parameter to indicate the offset of another mask's top left corner from the calling mask's top left corner. The calling mask's top left corner is considered to be the origin (0, 0). Offsets are a tuple or list of 2 integer values (x_offset, y_offset). Positive and negative offset values are supported.", "a newly created Mask object", "Mask", "Changed in pygame 2.0.0: Shallow copy support added. The Mask class supports the special method __copy__() and shallow copying via copy.copy(mask).", "Changed in pygame 2.0.0: Subclassing support added. The Mask class can be used as a base class.", "Changed in pygame 1.9.5: Added support for keyword arguments.", "Changed in pygame 1.9.5: Added the optional keyword parameter fill.", "Changed in pygame 1.9.5: Added support for masks with a width and/or a height of 0.", "Note", "If a mask subclass needs to copy any instance specific attributes then it should override the __copy__() method. The overridden __copy__() method needs to call super().__copy__() and then copy the required data as in the following example code.", "New in pygame 2.0.0.", "Returns a new pygame.Rect() object based on the size of this mask. The rect's default position will be (0, 0) and its default width and height will be the same as this mask's. The rect's attributes can be altered via pygame.Rect() attribute keyword arguments/values passed into this method. As an example, a_mask.get_rect(center=(10, 5)) would create a pygame.Rect() based on the mask's size centered at the given position.", "New in pygame 2.0.0.", "None", "NoneType", "IndexError -- if the position is outside of the mask's bounds", "Returns the first point of intersection encountered between this mask and othermask. A point of intersection is 2 overlapping set bits.", "The current algorithm searches the overlapping area in sizeof(unsigned long int) * CHAR_BIT bit wide column blocks (the value of sizeof(unsigned long int) * CHAR_BIT is platform dependent, for clarity it will be referred to as W). Starting at the top left corner it checks bits 0 to W - 1 of the first row ((0, 0) to (W - 1, 0)) then continues to the next row ((0, 1) to (W - 1, 1)). Once this entire column block is checked, it continues to the next one (W to 2 * W - 1). This is repeated until it finds a point of intersection or the entire overlapping area is checked.", "point of intersection or None if no intersection", "tuple(int, int) or NoneType", "Returns the number of overlapping set bits between between this mask and othermask.", "This can be useful for collision detection. An approximate collision normal can be found by calculating the gradient of the overlapping area through the finite difference.", "the number of overlapping set bits", "int", "Returns a Mask, the same size as this mask, containing the overlapping set bits between this mask and othermask.", "a newly created Mask with the overlapping bits set", "Mask", "Sets all bits in the mask to 1.", "Sets all bits in the mask to 0.", "Flips all of the bits in the mask. All the set bits are cleared to 0 and all the unset bits are set to 1.", "Creates a new Mask of the requested size with its bits scaled from this mask.", "Performs a bitwise OR, drawing othermask onto this mask.", "None", "NoneType", "Erases (clears) all bits set in othermask from this mask.", "None", "NoneType", "Finds the centroid (the center mass of the set bits) for this mask.", "Finds the approximate orientation (from -90 to 90 degrees) of the set bits in the mask. This works best if performed on a mask with only one connected component.", "Note", "See connected_component() for details on how a connected component is calculated.", "Returns a list of points of the outline of the first connected component encountered in the mask. To find a connected component, the mask is searched per row (left to right) starting in the top left corner.", "The every optional parameter skips set bits in the outline. For example, setting it to 10 would return a list of every 10th set bit in the outline.", "Note", "See connected_component() for details on how a connected component is calculated.", "Convolve this mask with the given othermask.", "a Mask with the (i - offset[0], j - offset[1]) bit set, if shifting othermask (such that its bottom right corner is at (i, j)) causes it to overlap with this mask", "If an outputmask is specified, the output is drawn onto it and it is returned. Otherwise a mask of size (MAX(0, width + othermask's\nwidth - 1), MAX(0, height + othermask's height - 1)) is created and returned.", "Mask", "A connected component is a group (1 or more) of connected set bits (orthogonally and diagonally). The SAUF algorithm, which checks 8 point connectivity, is used to find a connected component in the mask.", "By default this method will return a Mask containing the largest connected component in the mask. Optionally, a bit coordinate can be specified and the connected component containing it will be returned. If the bit at the given location is not set, the returned Mask will be empty (no bits set).", "If the pos parameter is provided then the mask returned will have the connected component that contains this position. An empty mask will be returned if the pos parameter selects an unset bit.", "Provides a list containing a Mask object for each connected component.", "Note", "See connected_component() for details on how a connected component is calculated.", "Provides a list containing a bounding rect for each connected component.", "Note", "See connected_component() for details on how a connected component is calculated.", "Draws this mask on the given surface. Set bits (bits set to 1) and unset bits (bits set to 0) can be drawn onto a surface.", "the surface parameter (or a newly created surface if no surface parameter was provided) with this mask drawn on it", "Surface", "ValueError -- if the setsurface parameter or unsetsurface parameter does not have the same format (bytesize/bitsize/alpha) as the surface parameter", "Note", "To skip drawing the set bits, both setsurface and setcolor must be None. The setsurface parameter defaults to None, but setcolor defaults to a color value and therefore must be set to None.", "Note", "To skip drawing the unset bits, both unsetsurface and unsetcolor must be None. The unsetsurface parameter defaults to None, but unsetcolor defaults to a color value and therefore must be set to None.", "New in pygame 2.0.0."]}, {"name": "module-math", "path": "ref/math", "type": "pygame.math", "text": ["The pygame math module currently provides Vector classes in two and three dimensions, Vector2 and Vector3 respectively.", "They support the following numerical operations: vec+vec, vec-vec, vec*number, number*vec, vec/number, vec//number, vec+=vec, vec-=vec, vec*=number, vec/=number, vec//=number.", "All these operations will be performed elementwise. In addition vec*vec will perform a scalar-product (a.k.a. dot-product). If you want to multiply every element from vector v with every element from vector w you can use the elementwise method: v.elementwise() * w", "The coordinates of a vector can be retrieved or set using attributes or subscripts", "Multiple coordinates can be set using slices or swizzling", "New in pygame 1.9.2pre.", "Changed in pygame 1.9.4: Removed experimental notice.", "Changed in pygame 1.9.4: Allow scalar construction like GLSL Vector2(2) == Vector2(2.0, 2.0)", "Changed in pygame 1.9.4: pygame.math required import. More convenient pygame.Vector2 and pygame.Vector3.", "Some general information about the Vector2 class.", "calculates the third component of the cross-product.", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude_squared() == vec.x**2 + vec.y**2. This is faster than vec.magnitude() because it avoids the square root.", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length() == math.sqrt(vec.x**2 + vec.y**2)", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length_squared() == vec.x**2 + vec.y**2. This is faster than vec.length() because it avoids the square root.", "Returns a new vector that has length equal to 1 and the same direction as self.", "Normalizes the vector so that it has length equal to 1. The direction of the vector is not changed.", "Returns True if the vector has length equal to 1. Otherwise it returns False.", "Scales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length 0. If the vector is the zero vector (i.e. has length 0 thus no direction) a ValueError is raised.", "Returns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.", "Changes the direction of self as if it would have been reflected of a surface with the given surface normal.", "Returns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self and other the result is going to be. It must be a value between 0 and 1 where 0 means self and 1 means other will be returned.", "Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range [-1, 1]. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.", "Applies the following operation to each element of the vector.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns the angle between self and the given vector.", "Returns a tuple (r, phi) where r is the radial distance, and phi is the azimuthal angle.", "Sets x and y from a tuple (r, phi) where r is the radial distance, and phi is the azimuthal angle.", "Sets coordinates x and y in place.", "New in pygame 1.9.5.", "Some general information about the Vector3 class.", "calculates the cross-product.", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)", "calculates the magnitude of the vector which follows from the theorem: vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2. This is faster than vec.magnitude() because it avoids the square root.", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)", "calculates the Euclidean length of the vector which follows from the Pythagorean theorem: vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2. This is faster than vec.length() because it avoids the square root.", "Returns a new vector that has length equal to 1 and the same direction as self.", "Normalizes the vector so that it has length equal to 1. The direction of the vector is not changed.", "Returns True if the vector has length equal to 1. Otherwise it returns False.", "Scales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length 0. If the vector is the zero vector (i.e. has length 0 thus no direction) a ValueError is raised.", "Returns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.", "Changes the direction of self as if it would have been reflected of a surface with the given surface normal.", "Returns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self an other the result is going to be. It must be a value between 0 and 1, where 0 means self and 1 means other will be returned.", "Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range [-1, 1]. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.", "Applies the following operation to each element of the vector.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees around the given axis.", "Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians around the given axis.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the given axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the given axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the x-axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the x-axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the y-axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the y-axis by the given angle in radians. The length of the vector is not changed.", "New in pygame 2.0.0.", "Returns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in degrees.", "Returns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in radians.", "New in pygame 2.0.0.", "Rotates the vector counterclockwise around the z-axis by the given angle in degrees. The length of the vector is not changed.", "Rotates the vector counterclockwise around the z-axis by the given angle in radians. The length of the vector is not changed.", "Returns the angle between self and the given vector.", "Returns a tuple (r, theta, phi) where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.", "Sets x, y and z from a tuple (r, theta, phi) where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.", "Sets coordinates x, y, and z in place.", "New in pygame 1.9.5.", "DEPRECATED: Not needed anymore. Will be removed in a later version.", "Enables swizzling for all vectors until disable_swizzling() is called. By default swizzling is disabled.", "Lets you get or set multiple coordinates as one attribute, eg vec.xyz = 1, 2, 3.", "DEPRECATED: Not needed anymore. Will be removed in a later version.", "Disables swizzling for all vectors until enable_swizzling() is called. By default swizzling is disabled."]}, {"name": "module-midi", "path": "ref/midi", "type": "pygame.midi", "text": ["New in pygame 1.9.0.", "The midi module can send output to midi devices and get input from midi devices. It can also list midi devices on the system.", "The midi module supports real and virtual midi devices.", "It uses the portmidi library. Is portable to which ever platforms portmidi supports (currently Windows, Mac OS X, and Linux).", "This uses pyportmidi for now, but may use its own bindings at some point in the future. The pyportmidi bindings are included with pygame.", "New in pygame 2.0.0.", "These are pygame events (pygame.event) reserved for midi use. The MIDIIN event is used by pygame.midi.midis2events() when converting midi events to pygame events.", "Initializes the pygame.midi module. Must be called before using the pygame.midi module.", "It is safe to call this more than once.", "Uninitializes the pygame.midi module. If pygame.midi.init() was called to initialize the pygame.midi module, then this function will be called automatically when your program exits.", "It is safe to call this function more than once.", "Gets the initialization state of the pygame.midi module.", "New in pygame 1.9.5.", "PortMidi attempts to close open streams when the application exits.", "Note", "This is particularly difficult under Windows.", "Used to indicate if any data exists.", "Reads from the input buffer and gives back midi events.", "The buffer_size specifies the number of output events to be buffered waiting for output. In some cases (see below) PortMidi does not buffer output at all and merely passes data to a lower-level API, in which case buffersize is ignored.", "latency is the delay in milliseconds applied to timestamps to determine when the output should actually occur. If latency is <<0, 0 is assumed.", "If latency is zero, timestamps are ignored and all output is delivered immediately. If latency is greater than zero, output is delayed until the message timestamp plus the latency. In some cases, PortMidi can obtain better timing than your application by passing timestamps along to the device driver or hardware. Latency may also help you to synchronize midi data to audio data by matching midi latency to the audio buffer latency.", "Note", "Time is measured relative to the time source indicated by time_proc. Timestamps are absolute, not relative delays or offsets.", "The caller should immediately close the output port; this call may result in transmission of a partial midi message. There is no abort for Midi input because the user can simply ignore messages in the buffer and close an input device at any time.", "PortMidi attempts to close open streams when the application exits.", "Note", "This is particularly difficult under Windows.", "Turn a note off in the output stream. The note must already be on for this to work correctly.", "Turn a note on in the output stream. The note must already be off for this to work correctly.", "Select an instrument.", "Adjust the pitch of a channel. The value is a signed integer from -8192 to +8191. For example, 0 means \"no change\", +4096 is typically a semitone higher, and -8192 is 1 whole tone lower (though the musical range corresponding to the pitch bend range can also be changed in some synthesizers).", "If no value is given, the pitch bend is returned to \"no change\".", "New in pygame 1.9.4.", "Writes series of MIDI information in the form of a list.", "Example:", "Note", "Output MIDI information of 3 bytes or less. The data fields are optional and assumed to be 0 if omitted.", "Examples of status byte values:", "Example:", "Writes a timestamped system-exclusive midi message.", "Example:", "Device ids range from 0 to get_count() - 1", "The following describes the usage details for this function and the get_default_output_id() function.", "Return the default device ID or -1 if there are no devices. The result can be passed to the Input/Output class.", "On a PC the user can specify a default device by setting an environment variable. To use device #1, for example:", "The user should first determine the available device ID by using the supplied application \"testin\" or \"testout\".", "In general, the registry is a better place for this kind of info. With USB devices that can come and go, using integers is not very reliable for device identification. Under Windows, if PM_RECOMMENDED_INPUT_DEVICE (or PM_RECOMMENDED_OUTPUT_DEVICE) is NOT found in the environment, then the default device is obtained by looking for a string in the registry under:", "The number of the first device with a substring that matches the string exactly is returned. For example, if the string in the registry is \"USB\" and device 1 is named \"In USB MidiSport 1x1\", then that will be the default input because it contains the string \"USB\".", "In addition to the name, get_device_info() returns \"interf\", which is the interface name. The \"interface\" is the underlying software system or API used by PortMidi to access devices. Supported interfaces:", "To specify both the interface and the device name in the registry, separate the two with a comma and a space. The string before the comma must be a substring of the \"interf\" string and the string after the space must be a substring of the \"name\" name string in order to match the device. e.g.:", "Note", "In the current release, the default is simply the first device (the input or output device with the lowest PmDeviceID).", "See get_default_input_id() for usage details.", "Gets the device info for a given id.", "Takes a sequence of midi events and returns list of pygame events.", "The midi_events data is expected to be a sequence of ((status, data1, data2, data3), timestamp) midi events (all values required).", "The time is reset to 0 when the pygame.midi module is initialized.", "example:", "New in pygame 1.9.5.", "example:", "New in pygame 1.9.5.", "example:", "New in pygame 1.9.5."]}, {"name": "module-mixer", "path": "ref/mixer", "type": "pygame.mixer", "text": ["This module contains classes for loading Sound objects and controlling playback. The mixer module is optional and depends on SDL_mixer. Your program should test that pygame.mixer is available and initialized before using it.", "The mixer module has a limited number of channels for playback of sounds. Usually programs tell pygame to start playing audio and it selects an available channel automatically. The default is 8 simultaneous channels, but complex programs can get more precise control over the number of channels and their use.", "All sound playback is mixed in background threads. When you begin to play a Sound object, it will return immediately while the sound continues to play. A single Sound object can also be actively played back multiple times.", "The mixer also has a special streaming channel. This is for music playback and is accessed through the pygame.mixer.music module.", "The mixer module must be initialized like other pygame modules, but it has some extra conditions. The pygame.mixer.init() function takes several optional arguments to control the playback rate and sample size. Pygame will default to reasonable values, but pygame cannot perform Sound resampling, so the mixer should be initialized to match the values of your audio resources.", "NOTE: For less laggy sound use a smaller buffer size. The default is set to reduce the chance of scratchy sounds on some computers. You can change the default buffer by calling pygame.mixer.pre_init() before pygame.mixer.init() or pygame.init() is called. For example: pygame.mixer.pre_init(44100,-16,2, 1024)", "Initialize the mixer module for Sound loading and playback. The default arguments can be overridden to provide specific audio mixing. Keyword arguments are accepted. For backward compatibility where an argument is set zero the default value is used (possible changed by a pre_init call).", "The size argument represents how many bits are used for each audio sample. If the value is negative then signed sample values will be used. Positive values mean unsigned audio samples will be used. An invalid value raises an exception.", "The channels argument is used to specify whether to use mono or stereo. 1 for mono and 2 for stereo.", "The buffer argument controls the number of internal samples used in the sound mixer. The default value should work for most cases. It can be lowered to reduce latency, but sound dropout may occur. It can be raised to larger values to ensure playback never skips, but it will impose latency on sound playback. The buffer size must be a power of two (if not it is rounded up to the next nearest power of 2).", "Some platforms require the pygame.mixer module to be initialized after the display modules have initialized. The top level pygame.init() takes care of this automatically, but cannot pass any arguments to the mixer init. To solve this, mixer has a function pygame.mixer.pre_init() to set the proper defaults before the toplevel init is used.", "When using allowedchanges=0 it will convert the samples at runtime to match what the hardware supports. For example a sound card may not support 16bit sound samples, so instead it will use 8bit samples internally. If AUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will change to the closest that SDL2 supports.", "Apart from 0, allowedchanged accepts the following constants ORed together:", "It is safe to call this more than once, but after the mixer is initialized you cannot change the playback arguments without first calling pygame.mixer.quit().", "Changed in pygame 1.8: The default buffersize was changed from 1024 to 3072.", "Changed in pygame 1.9.1: The default buffersize was changed from 3072 to 4096.", "Changed in pygame 2.0.0: The default buffersize was changed from 4096 to 512. The default frequency changed to 44100 from 22050.", "Changed in pygame 2.0.0: size can be 32 (32bit floats).", "Changed in pygame 2.0.0: channels can also be 4 or 6.", "New in pygame 2.0.0: allowedchanges argument added", "Call pre_init to change the defaults used when the real pygame.mixer.init() is called. Keyword arguments are accepted. The best way to set custom mixer playback values is to call pygame.mixer.pre_init() before calling the top level pygame.init(). For backward compatibility argument values of zero are replaced with the startup defaults.", "Changed in pygame 1.8: The default buffersize was changed from 1024 to 3072.", "Changed in pygame 1.9.1: The default buffersize was changed from 3072 to 4096.", "Changed in pygame 2.0.0: The default buffersize was changed from 4096 to 512. The default frequency changed to 44100 from 22050.", "This will uninitialize pygame.mixer. All playback will stop and any loaded Sound objects may not be compatible with the mixer if it is reinitialized later.", "If the mixer is initialized, this returns the playback arguments it is using. If the mixer has not been initialized this returns None.", "This will stop all playback of all active mixer channels.", "This will temporarily stop all playback on the active mixer channels. The playback can later be resumed with pygame.mixer.unpause()", "This will resume all active sound channels after they have been paused.", "This will fade out the volume on all active channels over the time argument in milliseconds. After the sound is muted the playback will stop.", "Sets the number of available channels for the mixer. The default value is 8. The value can be increased or decreased. If the value is decreased, sounds playing on the truncated channels are stopped.", "Returns the number of currently active playback channels.", "The mixer can reserve any number of channels that will not be automatically selected for playback by Sounds. If sounds are currently playing on the reserved channels they will not be stopped.", "This allows the application to reserve a specific number of channels for important sounds that must not be dropped or have a guaranteed channel to play on.", "This will find and return an inactive Channel object. If there are no inactive Channels this function will return None. If there are no inactive channels and the force argument is True, this will find the Channel with the longest running Sound and return it.", "If the mixer has reserved channels from pygame.mixer.set_reserved() then those channels will not be returned here.", "Returns True if the mixer is busy mixing any channels. If the mixer is idle then this return False.", "Note", "The linked and compile version numbers should be the same.", "New in pygame 2.0.0.", "Load a new sound buffer from a filename, a python file object or a readable buffer object. Limited resampling will be performed to help the sample match the initialize arguments for the mixer. A Unicode string can only be a file pathname. A Python 2.x string or a Python 3.x bytes object can be either a pathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may guess wrong. If the array keyword is used, the object is expected to export a version 3, C level array interface or, for Python 2.6 or later, a new buffer interface (The object is checked for a buffer interface first.)", "The Sound object represents actual sound sample data. Methods that change the state of the Sound object will the all instances of the Sound playback. A Sound object also exports an array interface, and, for Python 2.6 or later, a new buffer interface.", "The Sound can be loaded from an OGG audio file or from an uncompressed WAV.", "Note: The buffer will be copied internally, no data will be shared between it and the Sound object.", "For now buffer and array support is consistent with sndarray.make_sound for Numeric arrays, in that sample sign and byte order are ignored. This will change, either by correctly handling sign and byte order, or by raising an exception when different. Also, source samples are truncated to fit the audio sample size. This will not change.", "New in pygame 1.8: pygame.mixer.Sound(buffer)", "New in pygame 1.9.2: pygame.mixer.Sound keyword arguments and array interface support", "Begin playback of the Sound (i.e., on the computer's speakers) on an available Channel. This will forcibly select a Channel, so playback may cut off a currently playing sound if necessary.", "The loops argument controls how many times the sample will be repeated after being played the first time. A value of 5 means that the sound will be played once, then repeated five times, and so is played a total of six times. The default value (zero) means the Sound is not repeated, and so is only played once. If loops is set to -1 the Sound will loop indefinitely (though you can still call stop() to stop it).", "The maxtime argument can be used to stop playback after a given number of milliseconds.", "The fade_ms argument will make the sound start playing at 0 volume and fade up to full volume over the time given. The sample may end before the fade-in is complete.", "This returns the Channel object for the channel that was selected.", "This will stop the playback of this Sound on any active Channels.", "This will stop playback of the sound after fading it out over the time argument in milliseconds. The Sound will fade and stop on all actively playing channels.", "This will set the playback volume (loudness) for this Sound. This will immediately affect the Sound if it is playing. It will also affect any future playback of this Sound.", "volume in the range of 0.0 to 1.0 (inclusive)", "Return a value from 0.0 to 1.0 representing the volume for this Sound.", "Return the number of active channels this sound is playing on.", "Return the length of this Sound in seconds.", "Return a copy of the Sound object buffer as a bytes (for Python 3.x) or str (for Python 2.x) object.", "New in pygame 1.9.2.", "Return a Channel object for one of the current channels. The id must be a value from 0 to the value of pygame.mixer.get_num_channels().", "The Channel object can be used to get fine control over the playback of Sounds. A channel can only playback a single Sound at time. Using channels is entirely optional since pygame can manage them by default.", "This will begin playback of a Sound on a specific Channel. If the Channel is currently playing any other Sound it will be stopped.", "The loops argument has the same meaning as in Sound.play(): it is the number of times to repeat the sound after the first time. If it is 3, the sound will be played 4 times (the first time, then three more). If loops is -1 then the playback will repeat indefinitely.", "As in Sound.play(), the maxtime argument can be used to stop playback of the Sound after a given number of milliseconds.", "As in Sound.play(), the fade_ms argument can be used fade in the sound.", "Stop sound playback on a channel. After playback is stopped the channel becomes available for new Sounds to play on it.", "Temporarily stop the playback of sound on a channel. It can be resumed at a later time with Channel.unpause()", "Resume the playback on a paused channel.", "Stop playback of a channel after fading out the sound over the given time argument in milliseconds.", "Set the volume (loudness) of a playing sound. When a channel starts to play its volume value is reset. This only affects the current sound. The value argument is between 0.0 and 1.0.", "If one argument is passed, it will be the volume of both speakers. If two arguments are passed and the mixer is in stereo mode, the first argument will be the volume of the left speaker and the second will be the volume of the right speaker. (If the second argument is None, the first argument will be the volume of both speakers.)", "If the channel is playing a Sound on which set_volume() has also been called, both calls are taken into account. For example:", "Return the volume of the channel for the current playing sound. This does not take into account stereo separation used by Channel.set_volume(). The Sound object also has its own volume which is mixed with the channel.", "Returns True if the channel is actively mixing sound. If the channel is idle this returns False.", "Return the actual Sound object currently playing on this channel. If the channel is idle None is returned.", "When a Sound is queued on a Channel, it will begin playing immediately after the current Sound is finished. Each channel can only have a single Sound queued at a time. The queued Sound will only play if the current playback finished automatically. It is cleared on any other call to Channel.stop() or Channel.play().", "If there is no sound actively playing on the Channel then the Sound will begin playing immediately.", "If a Sound is already queued on this channel it will be returned. Once the queued sound begins playback it will no longer be on the queue.", "When an endevent is set for a channel, it will send an event to the pygame queue every time a sound finishes playing on that channel (not just the first time). Use pygame.event.get() to retrieve the endevent once it's sent.", "Note that if you called Sound.play(n) or Channel.play(sound,n), the end event is sent only once: after the sound has been played \"n+1\" times (see the documentation of Sound.play).", "If Channel.stop() or Channel.play() is called while the sound was still playing, the event will be posted immediately.", "The type argument will be the event id sent to the queue. This can be any valid event type, but a good choice would be a value between pygame.locals.USEREVENT and pygame.locals.NUMEVENTS. If no type argument is given then the Channel will stop sending endevents.", "Returns the event type to be sent every time the Channel finishes playback of a Sound. If there is no endevent the function returns pygame.NOEVENT."]}, {"name": "module-mixer.music", "path": "ref/music", "type": "pygame.mixer.music", "text": ["The music module is closely tied to pygame.mixer. Use the music module to control the playback of music in the sound mixer.", "The difference between the music playback and regular Sound playback is that the music is streamed, and never actually loaded all at once. The mixer system only supports a single music stream at once.", "Be aware that MP3 support is limited. On some systems an unsupported format can crash the program, e.g. Debian Linux. Consider using OGG instead.", "This will load a music filename/file object and prepare it for playback. If a music stream is already playing it will be stopped. This does not start the music playing.", "This closes resources like files for any music that may be loaded.", "New in pygame 2.0.0.", "This will play the loaded music stream. If the music is already playing it will be restarted.", "loops is an optional integer argument, which is 0 by default, it tells how many times to repeat the music. The music repeats indefinately if this argument is set to -1.", "start is an optional float argument, which is 0.0 by default, which denotes the position in time, the music starts playing from. The starting position depends on the format of the music played. MP3 and OGG use the position as time in seconds. For mp3s the start time position selected may not be accurate as things like variable bit rate encoding and ID3 tags can throw off the timing calculations. For MOD music it is the pattern order number. Passing a start position will raise a NotImplementedError if the start position cannot be set.", "fade_ms is an optional integer argument, which is 0 by default, makes the music start playing at 0 volume and fade up to full volume over the given time. The sample may end before the fade-in is complete.", "Changed in pygame 2.0.0: Added optional fade_ms argument", "Resets playback of the current music to the beginning.", "Stops the music playback if it is currently playing. It Won't Unload the music.", "Temporarily stop playback of the music stream. It can be resumed with the pygame.mixer.music.unpause() function.", "This will resume the playback of a music stream after it has been paused.", "Fade out and stop the currently playing music.", "The time argument denotes the integer milliseconds for which the fading effect is generated.", "Note, that this function blocks until the music has faded out. Calls to fadeout() and set_volume() will have no effect during this time. If an event was set using set_endevent() it will be called after the music has faded.", "Set the volume of the music playback.", "The volume argument is a float between 0.0 and 1.0 that sets volume. When new music is loaded the volume is reset to full volume.", "Returns the current volume for the mixer. The value will be between 0.0 and 1.0.", "Returns True when the music stream is actively playing. When the music is idle this returns False. In pygame 2.0.1 and above this function returns False when the music is paused. In pygame 1 it returns True when the music is paused.", "Changed in pygame 2.0.1: Returns False when music paused.", "This sets the position in the music file where playback will start. The meaning of \"pos\", a float (or a number that can be converted to a float), depends on the music format.", "For MOD files, pos is the integer pattern number in the module. For OGG it is the absolute position, in seconds, from the beginning of the sound. For MP3 files, it is the relative position, in seconds, from the current position. For absolute positioning in an MP3 file, first call rewind().", "Other file formats are unsupported. Newer versions of SDL_mixer have better positioning support than earlier ones. An SDLError is raised if a particular format does not support positioning.", "Function set_pos() calls underlining SDL_mixer function Mix_SetMusicPosition.", "New in pygame 1.9.2.", "This gets the number of milliseconds that the music has been playing for. The returned time only represents how long the music has been playing; it does not take into account any starting position offsets.", "This will load a sound file and queue it. A queued sound file will begin as soon as the current sound naturally ends. Only one sound can be queued at a time. Queuing a new sound while another sound is queued will result in the new sound becoming the queued sound. Also, if the current sound is ever stopped or changed, the queued sound will be lost.", "The following example will play music by Bach six times, then play music by Mozart once:", "This causes pygame to signal (by means of the event queue) when the music is done playing. The argument determines the type of event that will be queued.", "The event will be queued every time the music finishes, not just the first time. To stop the event from being queued, call this method with no argument.", "Returns the event type to be sent every time the music finishes playback. If there is no endevent the function returns pygame.NOEVENT."]}, {"name": "module-mouse", "path": "ref/mouse", "type": "pygame.mouse", "text": ["The mouse functions can be used to get the current state of the mouse device. These functions can also alter the system cursor for the mouse.", "When the display mode is set, the event queue will start receiving mouse events. The mouse buttons generate pygame.MOUSEBUTTONDOWN and pygame.MOUSEBUTTONUP events when they are pressed and released. These events contain a button attribute representing which button was pressed. The mouse wheel will generate pygame.MOUSEBUTTONDOWN and pygame.MOUSEBUTTONUP events when rolled. The button will be set to 4 when the wheel is rolled up, and to button 5 when the wheel is rolled down. Whenever the mouse is moved it generates a pygame.MOUSEMOTION event. The mouse movement is broken into small and accurate motion events. As the mouse is moving many motion events will be placed on the queue. Mouse motion events that are not properly cleaned from the event queue are the primary reason the event queue fills up.", "If the mouse cursor is hidden, and input is grabbed to the current display the mouse will enter a virtual input mode, where the relative movements of the mouse will never be stopped by the borders of the screen. See the functions pygame.mouse.set_visible() and pygame.event.set_grab() to get this configured.", "Mouse Wheel Behavior in pygame 2", "There is proper functionality for mouse wheel behaviour with pygame 2 supporting pygame.MOUSEWHEEL events. The new events support horizontal and vertical scroll movements, with signed integer values representing the amount scrolled (x and y), as well as flipped direction (the set positive and negative values for each axis is flipped). Read more about SDL2 input-related changes here https://wiki.libsdl.org/MigrationGuide#Input", "In pygame 2, the mouse wheel functionality can be used by listening for the pygame.MOUSEWHEEL type of an event. When this event is triggered, a developer can access the appropriate Event object with pygame.event.get(). The object can be used to access data about the mouse scroll, such as which (it will tell you what exact mouse device trigger the event).", "Returns a sequence of booleans representing the state of all the mouse buttons. A true value means the mouse is currently being pressed at the time of the call.", "Note, to get all of the mouse events it is better to use either pygame.event.wait() or pygame.event.get() and check all of those events to see if they are MOUSEBUTTONDOWN, MOUSEBUTTONUP, or MOUSEMOTION.", "Note, that on X11 some X servers use middle button emulation. When you click both buttons 1 and 3 at the same time a 2 button event can be emitted.", "Note, remember to call pygame.event.get() before this function. Otherwise it will not work as expected.", "To support five button mice, an optional parameter num_buttons has been added in pygame 2. When this is set to 5, button4 and button5 are added to the returned tuple. Only 3 and 5 are valid values for this parameter.", "Changed in pygame 2.0.0: num_buttons argument added", "Returns the x and y position of the mouse cursor. The position is relative to the top-left corner of the display. The cursor position can be located outside of the display window, but is always constrained to the screen.", "Returns the amount of movement in x and y since the previous call to this function. The relative movement of the mouse cursor is constrained to the edges of the screen, but see the virtual input mouse mode for a way around this. Virtual input mode is described at the top of the page.", "Set the current mouse position to arguments given. If the mouse cursor is visible it will jump to the new coordinates. Moving the mouse will generate a new pygame.MOUSEMOTION event.", "If the bool argument is true, the mouse cursor will be visible. This will return the previous visible state of the cursor.", "Get the current visibility state of the mouse cursor. True if the mouse is visible, False otherwise.", "New in pygame 2.0.0.", "Returns true when pygame is receiving mouse input events (or, in windowing terminology, is \"active\" or has the \"focus\").", "This method is most useful when working in a window. By contrast, in full-screen mode, this method always returns true.", "Note: under MS Windows, the window that has the mouse focus also has the keyboard focus. But under X-Windows, one window can receive mouse events and another receive keyboard events. pygame.mouse.get_focused() indicates whether the pygame window receives mouse events.", "When the mouse cursor is visible, it will be displayed as a black and white bitmap using the given bitmask arrays. The size is a sequence containing the cursor width and height. hotspot is a sequence containing the cursor hotspot position.", "A cursor has a width and height, but a mouse position is represented by a set of point coordinates. So the value passed into the cursor hotspot variable helps pygame to actually determine at what exact point the cursor is at.", "xormasks is a sequence of bytes containing the cursor xor data masks. Lastly andmasks, a sequence of bytes containing the cursor bitmask data. To create these variables, we can make use of the pygame.cursors.compile() function.", "Width and height must be a multiple of 8, and the mask arrays must be the correct size for the given width and height. Otherwise an exception is raised.", "See the pygame.cursor module for help creating default and custom masks for the mouse cursor and also for more examples related to cursors.", "When the mouse cursor is visible, it will displayed as a operating system specific variant of the options below.", "New in pygame 2.0.0.", "Get the information about the mouse system cursor. The return value is the same data as the arguments passed into pygame.mouse.set_cursor().", "Note", "This method is unavailable with pygame 2, as SDL2 does not provide the underlying code to implement this method."]}, {"name": "module-pixelcopy", "path": "ref/pixelcopy", "type": "pygame.pixelcopy", "text": ["The pygame.pixelcopy module contains functions for copying between surfaces and objects exporting an array structure interface. It is a backend for pygame.surfarray, adding NumPy support. But pixelcopy is more general, and intended for direct use.", "The array struct interface exposes an array's data in a standard way. It was introduced in NumPy. In Python 2.7 and above it is replaced by the new buffer protocol, though the buffer protocol is still a work in progress. The array struct interface, on the other hand, is stable and works with earlier Python versions. So for now the array struct interface is the predominate way pygame handles array introspection.", "New in pygame 1.9.2.", "The surface_to_array function copies pixels from a Surface object to a 2D or 3D array. Depending on argument kind and the target array dimension, a copy may be raw pixel value, RGB, a color component slice, or colorkey alpha transparency value. Recognized kind values are the single character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case insensitive, so 'p' is equivalent to 'P'. The first two dimensions of the target must be the surface size (w, h).", "The default 'P' kind code does a direct raw integer pixel (mapped) value copy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array having shape (w, h, 3). For an 8 bit colormap surface this means the table index is copied to a 2D array, not the table value itself. A 2D array's item size must be at least as large as the surface's pixel byte size. The item size of a 3D array must be at least one byte.", "For the 'R', 'G', 'B', and 'A' copy kinds a single color component of the unmapped surface pixels are copied to the target 2D array. For kind 'A' and surfaces with source alpha (the surface was created with the SRCALPHA flag), has a colorkey (set with Surface.set_colorkey()), or has a blanket alpha (set with Surface.set_alpha()) then the alpha values are those expected for a SDL surface. If a surface has no explicit alpha value, then the target array is filled with the value of the optional opaque surface_to_array argument (default 255: not transparent).", "Copy kind 'C' is a special case for alpha copy of a source surface with colorkey. Unlike the 'A' color component copy, the clear argument value is used for colorkey matches, opaque otherwise. By default, a match has alpha 0 (totally transparent), while everything else is alpha 255 (totally opaque). It is a more general implementation of pygame.surfarray.array_colorkey().", "Specific to surface_to_array, a ValueError is raised for target arrays with incorrect shape or item size. A TypeError is raised for an incorrect kind code. Surface specific problems, such as locking, raise a pygame.error.", "See pygame.surfarray.blit_array().", "Map an array of color element values - (w, h, ..., 3) - to an array of pixels - (w, h) according to the format of <surface>.", "Create a new Surface that best resembles the data and format of the array. The array can be 2D or 3D with any sized integer values."]}, {"name": "module-pygame", "path": "ref/pygame", "type": "pygame", "text": ["The pygame package represents the top-level package for others to use. Pygame itself is broken into many submodules, but this does not affect programs that use pygame.", "As a convenience, most of the top-level variables in pygame have been placed inside a module named pygame.locals. This is meant to be used with from pygame.locals import *, in addition to import pygame.", "When you import pygame all available pygame submodules are automatically imported. Be aware that some of the pygame modules are considered optional, and may not be available. In that case, pygame will provide a placeholder object instead of the module, which can be used to test for availability.", "Initialize all imported pygame modules. No exceptions will be raised if a module fails, but the total number if successful and failed inits will be returned as a tuple. You can always initialize individual modules manually, but pygame.init() is a convenient way to get everything started. The init() functions for individual modules will raise exceptions when they fail.", "You may want to initialize the different modules separately to speed up your program or to not use modules your game does not require.", "It is safe to call this init() more than once as repeated calls will have no effect. This is true even if you have pygame.quit() all the modules.", "Uninitialize all pygame modules that have previously been initialized. When the Python interpreter shuts down, this method is called regardless, so your program should not need it, except when it wants to terminate its pygame resources and continue. It is safe to call this function more than once as repeated calls have no effect.", "Note", "Calling pygame.quit() will not exit your program. Consider letting your program end in the same way a normal Python program will end.", "Returns True if pygame is currently initialized.", "New in pygame 1.9.5.", "This exception is raised whenever a pygame or SDL operation fails. You can catch any anticipated problems and deal with the error. The exception is always raised with a descriptive message about the problem.", "Derived from the RuntimeError exception, which can also be used to catch these raised errors.", "SDL maintains an internal error message. This message will usually be given to you when pygame.error() is raised, so this function will rarely be needed.", "SDL maintains an internal error message. This message will usually be given to you when pygame.error() is raised, so this function will rarely be needed.", "Returns the three version numbers of the SDL library. This version is built at compile time. It can be used to detect which features may or may not be available through pygame.", "New in pygame 1.7.0.", "Returns the byte order of the SDL library. It returns 1234 for little endian byte order and 4321 for big endian byte order.", "New in pygame 1.8.", "When pygame.quit() is called, all registered quit functions are called. Pygame modules do this automatically when they are initializing, so this function will rarely be needed.", "obj: If Unicode, encode; if bytes, return unaltered; if anything else, return None; if not given, raise SyntaxError.", "encoding (string): If present, encoding to use. The default is 'unicode_escape'.", "errors (string): If given, how to handle unencodable characters. The default is 'backslashreplace'.", "etype (exception type): If given, the exception type to raise for an encoding error. The default is UnicodeEncodeError, as returned by PyUnicode_AsEncodedString(). For the default encoding and errors values there should be no encoding errors.", "This function is used in encoding file paths. Keyword arguments are supported.", "New in pygame 1.9.2: (primarily for use in unit tests)", "obj: If Unicode, encode; if bytes, return unaltered; if anything else, return None; if not given, raise SyntaxError.", "etype (exception type): If given, the exception type to raise for an encoding error. The default is UnicodeEncodeError, as returned by PyUnicode_AsEncodedString().", "This function is used to encode file paths in pygame. Encoding is to the codec as returned by sys.getfilesystemencoding(). Keyword arguments are supported.", "New in pygame 1.9.2: (primarily for use in unit tests)", "This module is automatically imported into the pygame package and can be used to check which version of pygame has been imported.", "This is the version represented as a string. It can contain a micro release number as well, e.g. '1.5.2'", "This version information can easily be compared with other version numbers of the same format. An example of checking pygame version numbers would look like this:", "New in pygame 1.9.6: Attributes major, minor, and patch.", "Changed in pygame 1.9.6: str(pygame.version.vernum) returns a string like \"2.0.0\" instead of \"(2, 0, 0)\".", "Changed in pygame 1.9.6: repr(pygame.version.vernum) returns a string like \"PygameVersion(major=2, minor=0, patch=0)\" instead of \"(2, 0, 0)\".", "The Mercurial node identifier of the repository checkout from which this package was built. If the identifier ends with a plus sign '+' then the package contains uncommitted changes. Please include this revision number in bug reports, especially for non-release pygame builds.", "Important note: pygame development has moved to github, this variable is obsolete now. As soon as development shifted to github, this variable started returning an empty string \"\". It has always been returning an empty string since v1.9.5.", "Changed in pygame 1.9.5: Always returns an empty string \"\".", "This is the SDL library version represented as an extended tuple. It also has attributes 'major', 'minor' & 'patch' that can be accessed like this:", "printing the whole thing returns a string like this:", "New in pygame 2.0.0.", "Setting Environment Variables", "Some aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide range of the library's functionality. Some of the variables are from pygame itself, while others come from the underlying C SDL library that pygame uses.", "In python, environment variables are usually set in code like this:", "Or to preserve users ability to override the variable:", "If the variable is more useful for users of an app to set than the developer then they can set it like this:", "Windows:", "Linux/Mac:", "For some variables they need to be set before initialising pygame, some must be set before even importing pygame, and others can simply be set right before the area of code they control is run.", "Below is a list of environment variables, their settable values, and a brief description of what they do.", "Pygame Environment Variables", "These variables are defined by pygame itself.", "This sets the display where pygame will open its window or screen. The value set here will be used if set before calling pygame.display.set_mode(), and as long as no 'display' parameter is passed into pygame.display.set_mode().", "This forces set_mode() to use the SCALED display mode and, if \"photo\" is set, makes the scaling use the slowest, but highest quality anisotropic scaling algorithm, if it is available. Must be set before calling pygame.display.set_mode().", "This makes pygame use the SDL2 blitter for all alpha blending. The SDL2 blitter is sometimes faster than the default blitter but uses a different formula so the final colours may differ. Must be set before pygame.init() is called.", "This stops the welcome message popping up in the console that tells you which version of python, pygame & SDL you are using. Must be set before importing pygame.", "This switches the pygame.font module to a pure freetype implementation that bypasses SDL_ttf. See the font module for why you might want to do this. Must be set before importing pygame.", "Forces the library backend used in the camera module, overriding the platform defaults. Must be set before calling pygame.camera.init().", "SDL Environment Variables", "These variables are defined by SDL.", "For documentation on the environment variables available in pygame 1 try here. For Pygame 2, some selected environment variables are listed below.", "This will make the pygame window open in the centre of the display. Must be set before calling pygame.display.set_mode().", "This allows control over the placement of the pygame window within the display. Must be set before calling pygame.display.set_mode().", "On some platforms there are multiple video drivers available and this allows users to pick between them. More information is available here. Must be set before calling pygame.init() or pygame.display.init().", "On some platforms there are multiple audio drivers available and this allows users to pick between them. More information is available here. Must be set before calling pygame.init() or pygame.mixer.init().", "By default pygame apps disable screensavers while they are running. Setting this environment variable allows users or developers to change that and make screensavers run again.", "By default SDL tries to disable the X11 compositor for all pygame apps. This is usually a good thing as it's faster, however if you have an app which doesn't update every frame and are using linux you may want to disable this bypass. The bypass has reported problems on KDE linux. This variable is only used on x11/linux platforms."]}, {"name": "module-scrap", "path": "ref/scrap", "type": "pygame.scrap", "text": ["EXPERIMENTAL!: This API may change or disappear in later pygame releases. If you use this, your code may break with the next pygame release.", "The scrap module is for transferring data to/from the clipboard. This allows for cutting and pasting data between pygame and other applications. Some basic data (MIME) types are defined and registered:", "pygame.SCRAP_PPM, pygame.SCRAP_PBM and pygame.SCRAP_BMP are suitable for surface buffers to be shared with other applications. pygame.SCRAP_TEXT is an alias for the plain text clipboard type.", "Depending on the platform, additional types are automatically registered when data is placed into the clipboard to guarantee a consistent sharing behaviour with other applications. The following listed types can be used as strings to be passed to the respective pygame.scrap module functions.", "For Windows platforms, these additional types are supported automatically and resolve to their internal definitions:", "For X11 platforms, these additional types are supported automatically and resolve to their internal definitions:", "User defined types can be used, but the data might not be accessible by other applications unless they know what data type to look for. Example: Data placed into the clipboard by pygame.scrap.put(\"my_data_type\", byte_data) can only be accessed by applications which query the clipboard for the \"my_data_type\" data type.", "For an example of how the scrap module works refer to the examples page (pygame.examples.scrap_clipboard.main()) or the code directly in GitHub (pygame/examples/scrap_clipboard.py).", "New in pygame 1.8.", "Note", "The scrap module is currently only supported for Windows, X11 and Mac OS X. On Mac OS X only text works at the moment - other types may be supported in future releases.", "Initialize the scrap module.", "Note", "The scrap module requires pygame.display.set_mode() be called before being initialized.", "Gets the scrap module's initialization state.", "New in pygame 1.9.5.", "Retrieves the data for the specified type from the clipboard. In python 3 the data is returned as a byte string and might need further processing (such as decoding to Unicode).", "Gets a list of data type string identifiers for the data currently available on the clipboard. Each identifier can be used in the pygame.scrap.get() method to get the clipboard content of the specific type.", "Places data for a given clipboard type into the clipboard. The data must be a string buffer. The type is a string identifying the type of data to be placed into the clipboard. This can be one of the predefined pygame.SCRAP_PBM, pygame.SCRAP_PPM, pygame.SCRAP_BMP or pygame.SCRAP_TEXT values or a user defined string identifier.", "pygame.error -- if unable to put the data into the clipboard", "Checks whether data for the given type is currently available in the clipboard.", "Indicates if the clipboard ownership has been lost by the pygame application.", "Sets the access mode for the clipboard. This is only of interest for X11 environments where clipboard modes pygame.SCRAP_SELECTION (for mouse selections) and pygame.SCRAP_CLIPBOARD (for the clipboard) are available. Setting the mode to pygame.SCRAP_SELECTION in other environments will not change the mode from pygame.SCRAP_CLIPBOARD."]}, {"name": "module-sndarray", "path": "ref/sndarray", "type": "pygame.sndarray", "text": ["Functions to convert between NumPy arrays and Sound objects. This module will only be available when pygame can use the external NumPy package.", "Sound data is made of thousands of samples per second, and each sample is the amplitude of the wave at a particular moment in time. For example, in 22-kHz format, element number 5 of the array is the amplitude of the wave after 5/22000 seconds.", "Each sample is an 8-bit or 16-bit integer, depending on the data format. A stereo sound file has two values per sample, while a mono sound file only has one.", "Creates a new array for the sound data and copies the samples. The array will always be in the format returned from pygame.mixer.get_init().", "Creates a new array that directly references the samples in a Sound object. Modifying the array will change the Sound. The array will always be in the format returned from pygame.mixer.get_init().", "Create a new playable Sound object from an array. The mixer module must be initialized and the array format must be similar to the mixer audio format.", "DEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is 'numpy'. Other values will raise ValueError.", "DEPRECATED: Returns the currently active array type. This will be a value of the get_arraytypes() tuple and indicates which type of array module is used for the array creation.", "New in pygame 1.8.", "DEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the pygame.sndarray.use_arraytype() () method. If no supported array system could be found, None will be returned.", "New in pygame 1.8."]}, {"name": "module-sprite", "path": "ref/sprite", "type": "pygame.sprite", "text": ["This module contains several simple classes to be used within games. There is the main Sprite class and several Group classes that contain Sprites. The use of these classes is entirely optional when using pygame. The classes are fairly lightweight and only provide a starting place for the code that is common to most games.", "The Sprite class is intended to be used as a base class for the different types of objects in the game. There is also a base Group class that simply stores sprites. A game could create new types of Group classes that operate on specially customized Sprite instances they contain.", "The basic Sprite class can draw the Sprites it contains to a Surface. The Group.draw() method requires that each Sprite have a Surface.image attribute and a Surface.rect. The Group.clear() method requires these same attributes, and can be used to erase all the Sprites with background. There are also more advanced Groups: pygame.sprite.RenderUpdates() and pygame.sprite.OrderedUpdates().", "Lastly, this module contains several collision functions. These help find sprites inside multiple groups that have intersecting bounding rectangles. To find the collisions, the Sprites are required to have a Surface.rect attribute assigned.", "The groups are designed for high efficiency in removing and adding Sprites to them. They also allow cheap testing to see if a Sprite already exists in a Group. A given Sprite can exist in any number of groups. A game could use some groups to control object rendering, and a completely separate set of groups to control interaction or player movement. Instead of adding type attributes or bools to a derived Sprite class, consider keeping the Sprites inside organized Groups. This will allow for easier lookup later in the game.", "Sprites and Groups manage their relationships with the add() and remove() methods. These methods can accept a single or multiple targets for membership. The default initializers for these classes also takes a single or list of targets for initial membership. It is safe to repeatedly add and remove the same Sprite from a Group.", "While it is possible to design sprite and group classes that don't derive from the Sprite and AbstractGroup classes below, it is strongly recommended that you extend those when you add a Sprite or Group class.", "Sprites are not thread safe. So lock them yourself if using threads.", "The base class for visible game objects. Derived classes will want to override the Sprite.update() and assign a Sprite.image and Sprite.rect attributes. The initializer can accept any number of Group instances to be added to.", "When subclassing the Sprite, be sure to call the base initializer before adding the Sprite to Groups. For example:", "The default implementation of this method does nothing; it's just a convenient \"hook\" that you can override. This method is called by Group.update() with whatever arguments you give it.", "There is no need to use this method if not using the convenience method by the same name in the Group class.", "Any number of Group instances can be passed as arguments. The Sprite will be added to the Groups it is not already a member of.", "Any number of Group instances can be passed as arguments. The Sprite will be removed from the Groups it is currently a member of.", "The Sprite is removed from all the Groups that contain it. This won't change anything about the state of the Sprite. It is possible to continue to use the Sprite after this method has been called, including adding it to Groups.", "Returns True when the Sprite belongs to one or more Groups.", "Return a list of all the Groups that contain this Sprite.", "Extra DirtySprite attributes with their default values:", "dirty = 1", "blendmode = 0", "source_rect = None", "visible = 1", "layer = 0", "A simple container for Sprite objects. This class can be inherited to create containers with more specific behaviors. The constructor takes any number of Sprite arguments to add to the Group. The group supports the following standard Python operations:", "The Sprites in the Group are not ordered, so drawing and iterating the Sprites is in no particular order.", "Return a list of all the Sprites this group contains. You can also get an iterator from the group, but you cannot iterate over a Group while modifying it.", "Creates a new Group with all the same Sprites as the original. If you have subclassed Group, the new object will have the same (sub-)class as the original. This only works if the derived class's constructor takes the same arguments as the Group class's.", "Add any number of Sprites to this Group. This will only add Sprites that are not already members of the Group.", "Each sprite argument can also be a iterator containing Sprites.", "Remove any number of Sprites from the Group. This will only remove Sprites that are already members of the Group.", "Each sprite argument can also be a iterator containing Sprites.", "Return True if the Group contains all of the given sprites. This is similar to using the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests if a single Sprite belongs to a Group.", "Each sprite argument can also be a iterator containing Sprites.", "Calls the update() method on all Sprites in the Group. The base Sprite class has an update method that takes any number of arguments and does nothing. The arguments passed to Group.update() will be passed to each Sprite.", "There is no way to get the return value from the Sprite.update() methods.", "Draws the contained Sprites to the Surface argument. This uses the Sprite.image attribute for the source surface, and Sprite.rect for the position.", "The Group does not keep sprites in any order, so the draw order is arbitrary.", "Erases the Sprites used in the last Group.draw() call. The destination Surface is cleared by filling the drawn Sprite positions with the background.", "The background is usually a Surface image the same dimensions as the destination Surface. However, it can also be a callback function that takes two arguments; the destination Surface and an area to clear. The background callback function will be called several times each clear.", "Here is an example callback that will clear the Sprites with solid red:", "Removes all Sprites from this Group.", "This class is an alias to pygame.sprite.Group(). It has no additional functionality.", "This class is an alias to pygame.sprite.Group(). It has no additional functionality.", "This class is derived from pygame.sprite.Group(). It has an extended draw() method that tracks the changed areas of the screen.", "Draws all the Sprites to the surface, the same as Group.draw(). This method also returns a list of Rectangular areas on the screen that have been changed. The returned changes include areas of the screen that have been affected by previous Group.clear() calls.", "The returned Rect list should be passed to pygame.display.update(). This will help performance on software driven display modes. This type of updating is usually only helpful on destinations with non-animating backgrounds.", "This class derives from pygame.sprite.RenderUpdates(). It maintains the order in which the Sprites were added to the Group for rendering. This makes adding and removing Sprites from the Group a little slower than regular Groups.", "This group is fully compatible with pygame.sprite.Sprite.", "You can set the default layer through kwargs using 'default_layer' and an integer for the layer. The default layer is 0.", "If the sprite you add has an attribute _layer then that layer will be used. If the **kwarg contains 'layer' then the sprites passed will be added to that layer (overriding the sprite.layer attribute). If neither sprite has attribute layer nor **kwarg then the default layer is used to add the sprites.", "New in pygame 1.8.", "If the sprite(s) have an attribute layer then that is used for the layer. If **kwargs contains 'layer' then the sprite(s) will be added to that argument (overriding the sprite layer attribute). If neither is passed then the sprite(s) will be added to the default layer.", "Bottom sprites first, top last.", "Raises IndexOutOfBounds if the idx is not within range.", "sprite must have been added to the renderer. It is not checked.", "If the sprite is not found then it will return the default layer.", "Brings the sprite to front, changing sprite layer to topmost layer (added at the end of that layer).", "Moves the sprite to the bottom layer, moving it behind all other layers and adding one additional layer.", "Returns all sprites from a layer, ordered by how they where added. It uses linear search and the sprites are not removed from layer.", "The layers number must exist, it is not checked.", "This group requires pygame.sprite.DirtySprite or any sprite that has the following attributes:", "It uses the dirty flag technique and is therefore faster than the pygame.sprite.RenderUpdates if you have many static sprites. It also switches automatically between dirty rect update and full screen drawing, so you do no have to worry what would be faster.", "Same as for the pygame.sprite.Group. You can specify some additional attributes through kwargs:", "New in pygame 1.8.", "You can pass the background too. If a background is already set, then the bgd argument has no effect.", "screen_rect is in screen coordinates.", "sprite must have been added to the renderer. It is not checked.", "Default is 1000./80 where 80 is the fps I want to switch to full screen mode. This method's name is a typo and should be fixed.", "The GroupSingle container only holds a single Sprite. When a new Sprite is added, the old one is removed.", "There is a special property, GroupSingle.sprite, that accesses the Sprite that this Group contains. It can be None when the Group is empty. The property can also be assigned to add a Sprite into the GroupSingle container.", "Return a list containing all Sprites in a Group that intersect with another Sprite. Intersection is determined by comparing the Sprite.rect attribute of each Sprite.", "The dokill argument is a bool. If set to True, all Sprites that collide will be removed from the Group.", "The collided argument is a callback function used to calculate if two sprites are colliding. it should take two sprites as values, and return a bool value indicating if they are colliding. If collided is not passed, all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.", "collided callables:", "Example:", "Tests for collision between two sprites. Uses the pygame rect colliderect function to calculate the collision. Intended to be passed as a collided callback function to the *collide functions. Sprites must have a \"rect\" attributes.", "New in pygame 1.8.", "A callable class that checks for collisions between two sprites, using a scaled version of the sprites rects.", "Is created with a ratio, the instance is then intended to be passed as a collided callback function to the *collide functions.", "A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.", "New in pygame 1.8.1.", "Tests for collision between two sprites, by testing to see if two circles centered on the sprites overlap. If the sprites have a \"radius\" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the \"rect\" attribute. Intended to be passed as a collided callback function to the *collide functions. Sprites must have a \"rect\" and an optional \"radius\" attribute.", "New in pygame 1.8.1.", "A callable class that checks for collisions between two sprites, using a scaled version of the sprites radius.", "Is created with a floating point ratio, the instance is then intended to be passed as a collided callback function to the *collide functions.", "A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.", "The created callable tests for collision between two sprites, by testing to see if two circles centered on the sprites overlap, after scaling the circles radius by the stored ratio. If the sprites have a \"radius\" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the \"rect\" attribute. Intended to be passed as a collided callback function to the *collide functions. Sprites must have a \"rect\" and an optional \"radius\" attribute.", "New in pygame 1.8.1.", "Tests for collision between two sprites, by testing if their bitmasks overlap (uses pygame.mask.Mask.overlap()). If the sprites have a mask attribute, it is used as the mask, otherwise a mask is created from the sprite's image (uses pygame.mask.from_surface()). Sprites must have a rect attribute; the mask attribute is optional.", "The first point of collision between the masks is returned. The collision point is offset from sprite1's mask's topleft corner (which is always (0, 0)). The collision point is a position within the mask and is not related to the actual screen position of sprite1.", "This function is intended to be passed as a collided callback function to the group collide functions (see spritecollide(), groupcollide(), spritecollideany()).", "Note", "To increase performance, create and set a mask attibute for all sprites that will use this function to check for collisions. Otherwise, each time this function is called it will create new masks.", "Note", "A new mask needs to be recreated each time a sprite's image is changed (e.g. if a new image is used or the existing image is rotated).", "New in pygame 1.8.0.", "This will find collisions between all the Sprites in two groups. Collision is determined by comparing the Sprite.rect attribute of each Sprite or by using the collided function if it is not None.", "Every Sprite inside group1 is added to the return dictionary. The value for each item is the list of Sprites in group2 that intersect.", "If either dokill argument is True, the colliding Sprites will be removed from their respective Group.", "The collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.", "If the sprite collides with any single sprite in the group, a single sprite from the group is returned. On no collision None is returned.", "If you don't need all the features of the pygame.sprite.spritecollide() function, this function will be a bit quicker.", "The collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision."]}, {"name": "module-surfarray", "path": "ref/surfarray", "type": "pygame.surfarray", "text": ["Functions to convert pixel data between pygame Surfaces and arrays. This module will only be functional when pygame can use the external NumPy package.", "Every pixel is stored as a single integer value to represent the red, green, and blue colors. The 8-bit images use a value that looks into a colormap. Pixels with higher depth use a bit packing process to place three or four values into a single number.", "The arrays are indexed by the X axis first, followed by the Y axis. Arrays that treat the pixels as a single integer are referred to as 2D arrays. This module can also separate the red, green, and blue color values into separate indices. These types of arrays are referred to as 3D arrays, and the last index is 0 for red, 1 for green, and 2 for blue.", "Copy the mapped (raw) pixels from a Surface into a 2D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.", "This function will temporarily lock the Surface as pixels are copied (see the pygame.Surface.lock() - lock the Surface memory for pixel access method).", "Create a new 2D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "Pixels from a 24-bit Surface cannot be referenced, but all other Surface bit depths can.", "The Surface this references will remain locked for the lifetime of the array (see the pygame.Surface.lock() - lock the Surface memory for pixel access method).", "Copy the pixels from a Surface into a 3D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.", "This function will temporarily lock the Surface as pixels are copied (see the pygame.Surface.lock() - lock the Surface memory for pixel access method).", "Create a new 3D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This will only work on Surfaces that have 24-bit or 32-bit formats. Lower pixel formats cannot be referenced.", "The Surface this references will remain locked for the lifetime of the array (see the pygame.Surface.lock() - lock the Surface memory for pixel access method).", "Copy the pixel alpha values (degree of transparency) from a Surface into a 2D array. This will work for any type of Surface format. Surfaces without a pixel alpha will return an array with all opaque values.", "This function will temporarily lock the Surface as pixels are copied (see the pygame.Surface.lock() - lock the Surface memory for pixel access method).", "Create a new 2D array that directly references the alpha values (degree of transparency) in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 32-bit Surfaces with a per-pixel alpha value.", "The Surface this array references will remain locked for the lifetime of the array.", "Create a new 2D array that directly references the red values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 24-bit or 32-bit Surfaces.", "The Surface this array references will remain locked for the lifetime of the array.", "Create a new 2D array that directly references the green values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 24-bit or 32-bit Surfaces.", "The Surface this array references will remain locked for the lifetime of the array.", "Create a new 2D array that directly references the blue values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 24-bit or 32-bit Surfaces.", "The Surface this array references will remain locked for the lifetime of the array.", "Create a new array with the colorkey transparency value from each pixel. If the pixel matches the colorkey it will be fully transparent; otherwise it will be fully opaque.", "This will work on any type of Surface format. If the image has no colorkey a solid opaque array will be returned.", "This function will temporarily lock the Surface as pixels are copied.", "Create a new Surface that best resembles the data and format on the array. The array can be 2D or 3D with any sized integer values. Function make_surface uses the array struct interface to acquire array properties, so is not limited to just NumPy arrays. See pygame.pixelcopy.", "New in pygame 1.9.2: array struct interface support.", "Directly copy values from an array into a Surface. This is faster than converting the array into a Surface and blitting. The array must be the same dimensions as the Surface and will completely replace all pixel values. Only integer, ASCII character and record arrays are accepted.", "This function will temporarily lock the Surface as the new values are copied.", "Convert a 3D array into a 2D array. This will use the given Surface format to control the conversion. Palette surface formats are supported for NumPy arrays.", "DEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is 'numpy'. Other values will raise ValueError.", "DEPRECATED: Returns the currently active array type. This will be a value of the get_arraytypes() tuple and indicates which type of array module is used for the array creation.", "New in pygame 1.8.", "DEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the pygame.surfarray.use_arraytype() () method. If no supported array system could be found, None will be returned.", "New in pygame 1.8."]}, {"name": "module-tests", "path": "ref/tests", "type": "pygame.tests", "text": ["A quick way to run the test suite package from the command line is to import the go submodule with the Python -m option:", "Command line option --help displays a usage message. Available options correspond to the pygame.tests.run() arguments.", "The xxxx_test submodules of the tests package are unit test suites for individual parts of pygame. Each can also be run as a main program. This is useful if the test, such as cdrom_test, is interactive.", "For pygame development the test suite can be run from a pygame distribution root directory. Program run_tests.py is provided for convenience, though test/go.py can be run directly.", "Module level tags control which modules are included in a unit test run. Tags are assigned to a unit test module with a corresponding <name>_tags.py module. The tags module has the global __tags__, a list of tag names. For example, cdrom_test.py has a tag file cdrom_tags.py containing a tags list that has the 'interactive' string. The 'interactive' tag indicates cdrom_test.py expects user input. It is excluded from a run_tests.py or pygame.tests.go run. Two other tags that are excluded are 'ignore' and 'subprocess_ignore'. These two tags indicate unit tests that will not run on a particular platform, or for which no corresponding pygame module is available. The test runner will list each excluded module along with the tag responsible.", "Positional arguments (optional):", "Keyword arguments:", "Return value:", "By default individual test modules are run in separate subprocesses. This recreates normal pygame usage where pygame.init() and pygame.quit() are called only once per program execution, and avoids unfortunate interactions between test modules. Also, a time limit is placed on test execution, so frozen tests are killed when there time allotment expired. Use the single process option if threading is not working properly or if tests are taking too long. It is not guaranteed that all tests will pass in single process mode.", "Tests are run in a randomized order if the randomize argument is True or a seed argument is provided. If no seed integer is provided then the system time is used.", "Individual test modules may have a __tags__ attribute, a list of tag strings used to selectively omit modules from a run. By default only 'interactive' modules such as cdrom_test are ignored. An interactive module must be run from the console as a Python program.", "This function can only be called once per Python session. It is not reentrant."]}, {"name": "module-time", "path": "ref/time", "type": "pygame.time", "text": ["Times in pygame are represented in milliseconds (1/1000 seconds). Most platforms have a limited time resolution of around 10 milliseconds. This resolution, in milliseconds, is given in the TIMER_RESOLUTION constant.", "Return the number of milliseconds since pygame.init() was called. Before pygame is initialized this will always be 0.", "Will pause for a given number of milliseconds. This function sleeps the process to share the processor with other programs. A program that waits for even a few milliseconds will consume very little processor time. It is slightly less accurate than the pygame.time.delay() function.", "This returns the actual number of milliseconds used.", "Will pause for a given number of milliseconds. This function will use the processor (rather than sleeping) in order to make the delay more accurate than pygame.time.wait().", "This returns the actual number of milliseconds used.", "Set an event type to appear on the event queue every given number of milliseconds. The first event will not appear until the amount of time has passed.", "Every event type can have a separate timer attached to it. It is best to use the value between pygame.USEREVENT and pygame.NUMEVENTS.", "To disable the timer for an event, set the milliseconds argument to 0.", "If the once argument is True, then only send the timer once.", "New in pygame 2.0.0.dev3: once argument added.", "Creates a new Clock object that can be used to track an amount of time. The clock also provides several functions to help control a game's framerate.", "This method should be called once per frame. It will compute how many milliseconds have passed since the previous call.", "If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling Clock.tick(40) once per frame, the program will never run at more than 40 frames per second.", "Note that this function uses SDL_Delay function which is not accurate on every platform, but does not use much CPU. Use tick_busy_loop if you want an accurate timer, and don't mind chewing CPU.", "This method should be called once per frame. It will compute how many milliseconds have passed since the previous call.", "If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling Clock.tick_busy_loop(40) once per frame, the program will never run at more than 40 frames per second.", "Note that this function uses pygame.time.delay(), which uses lots of CPU in a busy loop to make sure that timing is more accurate.", "New in pygame 1.8.", "The number of milliseconds that passed between the previous two calls to Clock.tick().", "Similar to Clock.get_time(), but does not include any time used while Clock.tick() was delaying to limit the framerate.", "Compute your game's framerate (in frames per second). It is computed by averaging the last ten calls to Clock.tick()."]}, {"name": "module-transform", "path": "ref/transform", "type": "pygame.transform", "text": ["A Surface transform is an operation that moves or resizes the pixels. All these functions take a Surface to operate on and return a new Surface with the results.", "Some of the transforms are considered destructive. These means every time they are performed they lose pixel data. Common examples of this are resizing and rotating. For this reason, it is better to re-transform the original surface than to keep transforming an image multiple times. (For example, suppose you are animating a bouncing spring which expands and contracts. If you applied the size changes incrementally to the previous images, you would lose detail. Instead, always begin with the original image and scale to the desired size.)", "This can flip a Surface either vertically, horizontally, or both. Flipping a Surface is non-destructive and returns a new Surface with the same dimensions.", "Resizes the Surface to a new resolution. This is a fast scale operation that does not sample the results.", "An optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be the same size as the (width, height) passed in. Also the destination surface must be the same format.", "Unfiltered counterclockwise rotation. The angle argument represents degrees and can be any floating point value. Negative angle amounts will rotate clockwise.", "Unless rotating by 90 degree increments, the image will be padded larger to hold the new size. If the image has pixel alphas, the padded area will be transparent. Otherwise pygame will pick a color that matches the Surface colorkey or the topleft pixel value.", "This is a combined scale and rotation transform. The resulting Surface will be a filtered 32-bit Surface. The scale argument is a floating point value that will be multiplied by the current resolution. The angle argument is a floating point value that represents the counterclockwise degrees to rotate. A negative rotation angle will rotate clockwise.", "This will return a new image that is double the size of the original. It uses the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap graphics.", "This really only has an effect on simple images with solid colors. On photographic and antialiased images it will look like a regular unfiltered scale.", "An optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be twice the size of the source surface passed in. Also the destination surface must be the same format.", "Uses one of two different algorithms for scaling each dimension of the input surface as required. For shrinkage, the output pixels are area averages of the colors they cover. For expansion, a bilinear filter is used. For the x86-64 and i686 architectures, optimized MMX routines are included and will run much faster than other machine types. The size is a 2 number sequence for (width, height). This function only works for 24-bit or 32-bit surfaces. An exception will be thrown if the input surface bit depth is less than 24.", "New in pygame 1.8.", "Shows whether or not smoothscale is using MMX or SSE acceleration. If no acceleration is available then \"GENERIC\" is returned. For a x86 processor the level of acceleration to use is determined at runtime.", "This function is provided for pygame testing and debugging.", "Sets smoothscale acceleration. Takes a string argument. A value of 'GENERIC' turns off acceleration. 'MMX' uses MMX instructions only. 'SSE' allows SSE extensions as well. A value error is raised if type is not recognized or not supported by the current processor.", "This function is provided for pygame testing and debugging. If smoothscale causes an invalid instruction error then it is a pygame/SDL bug that should be reported. Use this function as a temporary fix only.", "Extracts a portion of an image. All vertical and horizontal pixels surrounding the given rectangle area are removed. The corner areas (diagonal to the rect) are then brought together. (The original image is not altered by this operation.)", "NOTE: If you want a \"crop\" that returns the part of an image within a rect, you can blit with a rect to a new surface or copy a subsurface.", "Finds the edges in a surface using the laplacian algorithm.", "New in pygame 1.8.", "Takes a sequence of surfaces and returns a surface with average colors from each of the surfaces.", "palette_colors - if true we average the colors in palette, otherwise we average the pixel values. This is useful if the surface is actually greyscale colors, and not palette colors.", "Note, this function currently does not handle palette using surfaces correctly.", "New in pygame 1.8.", "New in pygame 1.9: palette_colors argument", "Finds the average color of a Surface or a region of a surface specified by a Rect, and returns it as a Color.", "This versatile function can be used for find colors in a 'surf' close to a 'search_color' or close to colors in a separate 'search_surf'.", "It can also be used to transfer pixels into a 'dest_surf' that match or don't match.", "By default it sets pixels in the 'dest_surf' where all of the pixels NOT within the threshold are changed to set_color. If inverse_set is optionally set to True, the pixels that ARE within the threshold are changed to set_color.", "If the optional 'search_surf' surface is given, it is used to threshold against rather than the specified 'set_color'. That is, it will find each pixel in the 'surf' that is within the 'threshold' of the pixel at the same coordinates of the 'search_surf'.", "int", "The number of pixels that are within the 'threshold' in 'surf' compared to either 'search_color' or search_surf.", "See the threshold tests for a full of examples: https://github.com/pygame/pygame/blob/master/test/transform_test.py", "New in pygame 1.8.", "Changed in pygame 1.9.4: Fixed a lot of bugs and added keyword arguments. Test your code."]}, {"name": "module-version", "path": "ref/pygame", "type": "pygame", "text": ["The pygame package represents the top-level package for others to use. Pygame itself is broken into many submodules, but this does not affect programs that use pygame.", "As a convenience, most of the top-level variables in pygame have been placed inside a module named pygame.locals. This is meant to be used with from pygame.locals import *, in addition to import pygame.", "When you import pygame all available pygame submodules are automatically imported. Be aware that some of the pygame modules are considered optional, and may not be available. In that case, pygame will provide a placeholder object instead of the module, which can be used to test for availability.", "Initialize all imported pygame modules. No exceptions will be raised if a module fails, but the total number if successful and failed inits will be returned as a tuple. You can always initialize individual modules manually, but pygame.init() is a convenient way to get everything started. The init() functions for individual modules will raise exceptions when they fail.", "You may want to initialize the different modules separately to speed up your program or to not use modules your game does not require.", "It is safe to call this init() more than once as repeated calls will have no effect. This is true even if you have pygame.quit() all the modules.", "Uninitialize all pygame modules that have previously been initialized. When the Python interpreter shuts down, this method is called regardless, so your program should not need it, except when it wants to terminate its pygame resources and continue. It is safe to call this function more than once as repeated calls have no effect.", "Note", "Calling pygame.quit() will not exit your program. Consider letting your program end in the same way a normal Python program will end.", "Returns True if pygame is currently initialized.", "New in pygame 1.9.5.", "This exception is raised whenever a pygame or SDL operation fails. You can catch any anticipated problems and deal with the error. The exception is always raised with a descriptive message about the problem.", "Derived from the RuntimeError exception, which can also be used to catch these raised errors.", "SDL maintains an internal error message. This message will usually be given to you when pygame.error() is raised, so this function will rarely be needed.", "SDL maintains an internal error message. This message will usually be given to you when pygame.error() is raised, so this function will rarely be needed.", "Returns the three version numbers of the SDL library. This version is built at compile time. It can be used to detect which features may or may not be available through pygame.", "New in pygame 1.7.0.", "Returns the byte order of the SDL library. It returns 1234 for little endian byte order and 4321 for big endian byte order.", "New in pygame 1.8.", "When pygame.quit() is called, all registered quit functions are called. Pygame modules do this automatically when they are initializing, so this function will rarely be needed.", "obj: If Unicode, encode; if bytes, return unaltered; if anything else, return None; if not given, raise SyntaxError.", "encoding (string): If present, encoding to use. The default is 'unicode_escape'.", "errors (string): If given, how to handle unencodable characters. The default is 'backslashreplace'.", "etype (exception type): If given, the exception type to raise for an encoding error. The default is UnicodeEncodeError, as returned by PyUnicode_AsEncodedString(). For the default encoding and errors values there should be no encoding errors.", "This function is used in encoding file paths. Keyword arguments are supported.", "New in pygame 1.9.2: (primarily for use in unit tests)", "obj: If Unicode, encode; if bytes, return unaltered; if anything else, return None; if not given, raise SyntaxError.", "etype (exception type): If given, the exception type to raise for an encoding error. The default is UnicodeEncodeError, as returned by PyUnicode_AsEncodedString().", "This function is used to encode file paths in pygame. Encoding is to the codec as returned by sys.getfilesystemencoding(). Keyword arguments are supported.", "New in pygame 1.9.2: (primarily for use in unit tests)", "This module is automatically imported into the pygame package and can be used to check which version of pygame has been imported.", "This is the version represented as a string. It can contain a micro release number as well, e.g. '1.5.2'", "This version information can easily be compared with other version numbers of the same format. An example of checking pygame version numbers would look like this:", "New in pygame 1.9.6: Attributes major, minor, and patch.", "Changed in pygame 1.9.6: str(pygame.version.vernum) returns a string like \"2.0.0\" instead of \"(2, 0, 0)\".", "Changed in pygame 1.9.6: repr(pygame.version.vernum) returns a string like \"PygameVersion(major=2, minor=0, patch=0)\" instead of \"(2, 0, 0)\".", "The Mercurial node identifier of the repository checkout from which this package was built. If the identifier ends with a plus sign '+' then the package contains uncommitted changes. Please include this revision number in bug reports, especially for non-release pygame builds.", "Important note: pygame development has moved to github, this variable is obsolete now. As soon as development shifted to github, this variable started returning an empty string \"\". It has always been returning an empty string since v1.9.5.", "Changed in pygame 1.9.5: Always returns an empty string \"\".", "This is the SDL library version represented as an extended tuple. It also has attributes 'major', 'minor' & 'patch' that can be accessed like this:", "printing the whole thing returns a string like this:", "New in pygame 2.0.0.", "Setting Environment Variables", "Some aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide range of the library's functionality. Some of the variables are from pygame itself, while others come from the underlying C SDL library that pygame uses.", "In python, environment variables are usually set in code like this:", "Or to preserve users ability to override the variable:", "If the variable is more useful for users of an app to set than the developer then they can set it like this:", "Windows:", "Linux/Mac:", "For some variables they need to be set before initialising pygame, some must be set before even importing pygame, and others can simply be set right before the area of code they control is run.", "Below is a list of environment variables, their settable values, and a brief description of what they do.", "Pygame Environment Variables", "These variables are defined by pygame itself.", "This sets the display where pygame will open its window or screen. The value set here will be used if set before calling pygame.display.set_mode(), and as long as no 'display' parameter is passed into pygame.display.set_mode().", "This forces set_mode() to use the SCALED display mode and, if \"photo\" is set, makes the scaling use the slowest, but highest quality anisotropic scaling algorithm, if it is available. Must be set before calling pygame.display.set_mode().", "This makes pygame use the SDL2 blitter for all alpha blending. The SDL2 blitter is sometimes faster than the default blitter but uses a different formula so the final colours may differ. Must be set before pygame.init() is called.", "This stops the welcome message popping up in the console that tells you which version of python, pygame & SDL you are using. Must be set before importing pygame.", "This switches the pygame.font module to a pure freetype implementation that bypasses SDL_ttf. See the font module for why you might want to do this. Must be set before importing pygame.", "Forces the library backend used in the camera module, overriding the platform defaults. Must be set before calling pygame.camera.init().", "SDL Environment Variables", "These variables are defined by SDL.", "For documentation on the environment variables available in pygame 1 try here. For Pygame 2, some selected environment variables are listed below.", "This will make the pygame window open in the centre of the display. Must be set before calling pygame.display.set_mode().", "This allows control over the placement of the pygame window within the display. Must be set before calling pygame.display.set_mode().", "On some platforms there are multiple video drivers available and this allows users to pick between them. More information is available here. Must be set before calling pygame.init() or pygame.display.init().", "On some platforms there are multiple audio drivers available and this allows users to pick between them. More information is available here. Must be set before calling pygame.init() or pygame.mixer.init().", "By default pygame apps disable screensavers while they are running. Setting this environment variable allows users or developers to change that and make screensavers run again.", "By default SDL tries to disable the X11 compositor for all pygame apps. This is usually a good thing as it's faster, however if you have an app which doesn't update every frame and are using linux you may want to disable this bypass. The bypass has reported problems on KDE linux. This variable is only used on x11/linux platforms."]}, {"name": "mouse", "path": "ref/mouse", "type": "pygame.mouse", "text": ["The mouse functions can be used to get the current state of the mouse device. These functions can also alter the system cursor for the mouse.", "When the display mode is set, the event queue will start receiving mouse events. The mouse buttons generate pygame.MOUSEBUTTONDOWN and pygame.MOUSEBUTTONUP events when they are pressed and released. These events contain a button attribute representing which button was pressed. The mouse wheel will generate pygame.MOUSEBUTTONDOWN and pygame.MOUSEBUTTONUP events when rolled. The button will be set to 4 when the wheel is rolled up, and to button 5 when the wheel is rolled down. Whenever the mouse is moved it generates a pygame.MOUSEMOTION event. The mouse movement is broken into small and accurate motion events. As the mouse is moving many motion events will be placed on the queue. Mouse motion events that are not properly cleaned from the event queue are the primary reason the event queue fills up.", "If the mouse cursor is hidden, and input is grabbed to the current display the mouse will enter a virtual input mode, where the relative movements of the mouse will never be stopped by the borders of the screen. See the functions pygame.mouse.set_visible() and pygame.event.set_grab() to get this configured.", "Mouse Wheel Behavior in pygame 2", "There is proper functionality for mouse wheel behaviour with pygame 2 supporting pygame.MOUSEWHEEL events. The new events support horizontal and vertical scroll movements, with signed integer values representing the amount scrolled (x and y), as well as flipped direction (the set positive and negative values for each axis is flipped). Read more about SDL2 input-related changes here https://wiki.libsdl.org/MigrationGuide#Input", "In pygame 2, the mouse wheel functionality can be used by listening for the pygame.MOUSEWHEEL type of an event. When this event is triggered, a developer can access the appropriate Event object with pygame.event.get(). The object can be used to access data about the mouse scroll, such as which (it will tell you what exact mouse device trigger the event).", "Returns a sequence of booleans representing the state of all the mouse buttons. A true value means the mouse is currently being pressed at the time of the call.", "Note, to get all of the mouse events it is better to use either pygame.event.wait() or pygame.event.get() and check all of those events to see if they are MOUSEBUTTONDOWN, MOUSEBUTTONUP, or MOUSEMOTION.", "Note, that on X11 some X servers use middle button emulation. When you click both buttons 1 and 3 at the same time a 2 button event can be emitted.", "Note, remember to call pygame.event.get() before this function. Otherwise it will not work as expected.", "To support five button mice, an optional parameter num_buttons has been added in pygame 2. When this is set to 5, button4 and button5 are added to the returned tuple. Only 3 and 5 are valid values for this parameter.", "Changed in pygame 2.0.0: num_buttons argument added", "Returns the x and y position of the mouse cursor. The position is relative to the top-left corner of the display. The cursor position can be located outside of the display window, but is always constrained to the screen.", "Returns the amount of movement in x and y since the previous call to this function. The relative movement of the mouse cursor is constrained to the edges of the screen, but see the virtual input mouse mode for a way around this. Virtual input mode is described at the top of the page.", "Set the current mouse position to arguments given. If the mouse cursor is visible it will jump to the new coordinates. Moving the mouse will generate a new pygame.MOUSEMOTION event.", "If the bool argument is true, the mouse cursor will be visible. This will return the previous visible state of the cursor.", "Get the current visibility state of the mouse cursor. True if the mouse is visible, False otherwise.", "New in pygame 2.0.0.", "Returns true when pygame is receiving mouse input events (or, in windowing terminology, is \"active\" or has the \"focus\").", "This method is most useful when working in a window. By contrast, in full-screen mode, this method always returns true.", "Note: under MS Windows, the window that has the mouse focus also has the keyboard focus. But under X-Windows, one window can receive mouse events and another receive keyboard events. pygame.mouse.get_focused() indicates whether the pygame window receives mouse events.", "When the mouse cursor is visible, it will be displayed as a black and white bitmap using the given bitmask arrays. The size is a sequence containing the cursor width and height. hotspot is a sequence containing the cursor hotspot position.", "A cursor has a width and height, but a mouse position is represented by a set of point coordinates. So the value passed into the cursor hotspot variable helps pygame to actually determine at what exact point the cursor is at.", "xormasks is a sequence of bytes containing the cursor xor data masks. Lastly andmasks, a sequence of bytes containing the cursor bitmask data. To create these variables, we can make use of the pygame.cursors.compile() function.", "Width and height must be a multiple of 8, and the mask arrays must be the correct size for the given width and height. Otherwise an exception is raised.", "See the pygame.cursor module for help creating default and custom masks for the mouse cursor and also for more examples related to cursors.", "When the mouse cursor is visible, it will displayed as a operating system specific variant of the options below.", "New in pygame 2.0.0.", "Get the information about the mouse system cursor. The return value is the same data as the arguments passed into pygame.mouse.set_cursor().", "Note", "This method is unavailable with pygame 2, as SDL2 does not provide the underlying code to implement this method."]}, {"name": "mouse.get_cursor", "path": "ref/mouse#pygame.mouse.get_cursor", "type": "pygame.mouse", "text": ["Get the information about the mouse system cursor. The return value is the same data as the arguments passed into pygame.mouse.set_cursor().", "Note", "This method is unavailable with pygame 2, as SDL2 does not provide the underlying code to implement this method."]}, {"name": "mouse.get_focused", "path": "ref/mouse#pygame.mouse.get_focused", "type": "pygame.mouse", "text": ["Returns true when pygame is receiving mouse input events (or, in windowing terminology, is \"active\" or has the \"focus\").", "This method is most useful when working in a window. By contrast, in full-screen mode, this method always returns true.", "Note: under MS Windows, the window that has the mouse focus also has the keyboard focus. But under X-Windows, one window can receive mouse events and another receive keyboard events. pygame.mouse.get_focused() indicates whether the pygame window receives mouse events."]}, {"name": "mouse.get_pos", "path": "ref/mouse#pygame.mouse.get_pos", "type": "pygame.mouse", "text": ["Returns the x and y position of the mouse cursor. The position is relative to the top-left corner of the display. The cursor position can be located outside of the display window, but is always constrained to the screen."]}, {"name": "mouse.get_pressed", "path": "ref/mouse#pygame.mouse.get_pressed", "type": "pygame.mouse", "text": ["Returns a sequence of booleans representing the state of all the mouse buttons. A true value means the mouse is currently being pressed at the time of the call.", "Note, to get all of the mouse events it is better to use either pygame.event.wait() or pygame.event.get() and check all of those events to see if they are MOUSEBUTTONDOWN, MOUSEBUTTONUP, or MOUSEMOTION.", "Note, that on X11 some X servers use middle button emulation. When you click both buttons 1 and 3 at the same time a 2 button event can be emitted.", "Note, remember to call pygame.event.get() before this function. Otherwise it will not work as expected.", "To support five button mice, an optional parameter num_buttons has been added in pygame 2. When this is set to 5, button4 and button5 are added to the returned tuple. Only 3 and 5 are valid values for this parameter.", "Changed in pygame 2.0.0: num_buttons argument added"]}, {"name": "mouse.get_rel", "path": "ref/mouse#pygame.mouse.get_rel", "type": "pygame.mouse", "text": ["Returns the amount of movement in x and y since the previous call to this function. The relative movement of the mouse cursor is constrained to the edges of the screen, but see the virtual input mouse mode for a way around this. Virtual input mode is described at the top of the page."]}, {"name": "mouse.get_visible", "path": "ref/mouse#pygame.mouse.get_visible", "type": "pygame.mouse", "text": ["Get the current visibility state of the mouse cursor. True if the mouse is visible, False otherwise.", "New in pygame 2.0.0."]}, {"name": "mouse.set_cursor", "path": "ref/mouse#pygame.mouse.set_cursor", "type": "pygame.mouse", "text": ["When the mouse cursor is visible, it will be displayed as a black and white bitmap using the given bitmask arrays. The size is a sequence containing the cursor width and height. hotspot is a sequence containing the cursor hotspot position.", "A cursor has a width and height, but a mouse position is represented by a set of point coordinates. So the value passed into the cursor hotspot variable helps pygame to actually determine at what exact point the cursor is at.", "xormasks is a sequence of bytes containing the cursor xor data masks. Lastly andmasks, a sequence of bytes containing the cursor bitmask data. To create these variables, we can make use of the pygame.cursors.compile() function.", "Width and height must be a multiple of 8, and the mask arrays must be the correct size for the given width and height. Otherwise an exception is raised.", "See the pygame.cursor module for help creating default and custom masks for the mouse cursor and also for more examples related to cursors."]}, {"name": "mouse.set_pos", "path": "ref/mouse#pygame.mouse.set_pos", "type": "pygame.mouse", "text": ["Set the current mouse position to arguments given. If the mouse cursor is visible it will jump to the new coordinates. Moving the mouse will generate a new pygame.MOUSEMOTION event."]}, {"name": "mouse.set_system_cursor", "path": "ref/mouse#pygame.mouse.set_system_cursor", "type": "pygame.mouse", "text": ["When the mouse cursor is visible, it will displayed as a operating system specific variant of the options below.", "New in pygame 2.0.0."]}, {"name": "mouse.set_visible", "path": "ref/mouse#pygame.mouse.set_visible", "type": "pygame.mouse", "text": ["If the bool argument is true, the mouse cursor will be visible. This will return the previous visible state of the cursor."]}, {"name": "Overlay", "path": "ref/overlay", "type": "pygame.Overlay", "text": ["The Overlay objects provide support for accessing hardware video overlays. Video overlays do not use standard RGB pixel formats, and can use multiple resolutions of data to create a single image.", "The Overlay objects represent lower level access to the display hardware. To use the object you must understand the technical details of video overlays.", "The Overlay format determines the type of pixel data used. Not all hardware will support all types of overlay formats. Here is a list of available format types:", "The width and height arguments control the size for the overlay image data. The overlay image can be displayed at any size, not just the resolution of the overlay.", "The overlay objects are always visible, and always show above the regular display contents.", "Display the YUV data in SDL's overlay planes. The y, u, and v arguments are strings of binary data. The data must be in the correct format used to create the Overlay.", "If no argument is passed in, the Overlay will simply be redrawn with the current data. This can be useful when the Overlay is not really hardware accelerated.", "The strings are not validated, and improperly sized strings could crash the program.", "Set the location for the overlay. The overlay will always be shown relative to the main display Surface. This does not actually redraw the overlay, it will be updated on the next call to Overlay.display().", "Returns a True value when the Overlay is hardware accelerated. If the platform does not support acceleration, software rendering is used."]}, {"name": "Overlay.display", "path": "ref/overlay#pygame.Overlay.display", "type": "pygame.Overlay", "text": ["Display the YUV data in SDL's overlay planes. The y, u, and v arguments are strings of binary data. The data must be in the correct format used to create the Overlay.", "If no argument is passed in, the Overlay will simply be redrawn with the current data. This can be useful when the Overlay is not really hardware accelerated.", "The strings are not validated, and improperly sized strings could crash the program."]}, {"name": "Overlay.get_hardware", "path": "ref/overlay#pygame.Overlay.get_hardware", "type": "pygame.Overlay", "text": ["Returns a True value when the Overlay is hardware accelerated. If the platform does not support acceleration, software rendering is used."]}, {"name": "Overlay.set_location", "path": "ref/overlay#pygame.Overlay.set_location", "type": "pygame.Overlay", "text": ["Set the location for the overlay. The overlay will always be shown relative to the main display Surface. This does not actually redraw the overlay, it will be updated on the next call to Overlay.display()."]}, {"name": "PixelArray", "path": "ref/pixelarray", "type": "pygame.PixelArray", "text": ["The PixelArray wraps a Surface and provides direct access to the surface's pixels. A pixel array can be one or two dimensional. A two dimensional array, like its surface, is indexed [column, row]. Pixel arrays support slicing, both for returning a subarray or for assignment. A pixel array sliced on a single column or row returns a one dimensional pixel array. Arithmetic and other operations are not supported. A pixel array can be safely assigned to itself. Finally, pixel arrays export an array struct interface, allowing them to interact with pygame.pixelcopy methods and NumPy arrays.", "A PixelArray pixel item can be assigned a raw integer values, a pygame.Color instance, or a (r, g, b[, a]) tuple.", "However, only a pixel's integer value is returned. So, to compare a pixel to a particular color the color needs to be first mapped using the Surface.map_rgb() method of the Surface object for which the PixelArray was created.", "When assigning to a range of of pixels, a non tuple sequence of colors or a PixelArray can be used as the value. For a sequence, the length must match the PixelArray width.", "For PixelArray assignment, if the right hand side array has a row length of 1, then the column is broadcast over the target array's rows. An array of height 1 is broadcast over the target's columns, and is equivalent to assigning a 1D PixelArray.", "Subscript slices can also be used to assign to a rectangular subview of the target PixelArray.", "Subscript slices can also be used to do fast rectangular pixel manipulations instead of iterating over the x or y axis. The", "During its lifetime, the PixelArray locks the surface, thus you explicitly have to close() it once its not used any more and the surface should perform operations in the same scope. It is best to use it as a context manager using the with PixelArray(surf) as pixel_array: style. So it works on pypy too.", "A simple : slice index for the column can be omitted.", "A note about PixelArray to PixelArray assignment, for arrays with an item size of 3 (created from 24 bit surfaces) pixel values are translated from the source to the destinations format. The red, green, and blue color elements of each pixel are shifted to match the format of the target surface. For all other pixel sizes no such remapping occurs. This should change in later pygame releases, where format conversions are performed for all pixel sizes. To avoid code breakage when full mapped copying is implemented it is suggested PixelArray to PixelArray copies be only between surfaces of identical format.", "close() method was added. For explicitly cleaning up.", "being able to use PixelArray as a context manager for cleanup.", "both of these are useful for when working without reference counting (pypy).", "array struct interface", "transpose method", "broadcasting for a length 1 dimension", "A 2D PixelArray can have a length 1 dimension. Only an integer index on a 2D PixelArray returns a 1D array.", "For assignment, a tuple can only be a color. Any other sequence type is a sequence of colors.", "The Surface the PixelArray was created for.", "This is the same as Surface.get_bytesize() for the pixel array's surface.", "New in pygame 1.9.2.", "A pixel array can be 1 or 2 dimensional.", "New in pygame 1.9.2.", "A tuple or length ndim giving the length of each dimension. Analogous to Surface.get_size().", "New in pygame 1.9.2.", "A tuple or length ndim byte counts. When a stride is multiplied by the corresponding index it gives the offset of that index from the start of the array. A stride is negative for an array that has is inverted (has a negative step).", "New in pygame 1.9.2.", "Creates a new Surface from the current PixelArray. Depending on the current PixelArray the size, pixel order etc. will be different from the original Surface.", "New in pygame 1.8.1.", "Replaces the pixels with the passed color in the PixelArray by changing them them to the passed replacement color.", "It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the replacement to take pixels with a similar, but not exactly identical color, into account as well.", "This is an in place operation that directly affects the pixels of the PixelArray.", "New in pygame 1.8.1.", "Extracts the passed color by changing all matching pixels to white, while non-matching pixels are changed to black. This returns a new PixelArray with the black/white color mask.", "It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the extraction to take pixels with a similar, but not exactly identical color, into account as well.", "New in pygame 1.8.1.", "Compares the contents of the PixelArray with those from the passed in PixelArray. It returns a new PixelArray with a black/white color mask that indicates the differences (black) of both arrays. Both PixelArray objects must have identical bit depths and dimensions.", "It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as a threshold for the color detection. This causes the comparison to mark pixels with a similar, but not exactly identical color, as white.", "New in pygame 1.8.1.", "This method returns a new view of the pixel array with the rows and columns swapped. So for a (w, h) sized array a (h, w) slice is returned. If an array is one dimensional, then a length 1 x dimension is added, resulting in a 2D pixel array.", "New in pygame 1.9.2.", "This method is for explicitly closing the PixelArray, and releasing a lock on the Suface.", "New in pygame 1.9.4."]}, {"name": "PixelArray.close", "path": "ref/pixelarray#pygame.PixelArray.close", "type": "pygame.PixelArray", "text": ["This method is for explicitly closing the PixelArray, and releasing a lock on the Suface.", "New in pygame 1.9.4."]}, {"name": "PixelArray.compare", "path": "ref/pixelarray#pygame.PixelArray.compare", "type": "pygame.PixelArray", "text": ["Compares the contents of the PixelArray with those from the passed in PixelArray. It returns a new PixelArray with a black/white color mask that indicates the differences (black) of both arrays. Both PixelArray objects must have identical bit depths and dimensions.", "It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as a threshold for the color detection. This causes the comparison to mark pixels with a similar, but not exactly identical color, as white.", "New in pygame 1.8.1."]}, {"name": "PixelArray.extract", "path": "ref/pixelarray#pygame.PixelArray.extract", "type": "pygame.PixelArray", "text": ["Extracts the passed color by changing all matching pixels to white, while non-matching pixels are changed to black. This returns a new PixelArray with the black/white color mask.", "It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the extraction to take pixels with a similar, but not exactly identical color, into account as well.", "New in pygame 1.8.1."]}, {"name": "PixelArray.itemsize", "path": "ref/pixelarray#pygame.PixelArray.itemsize", "type": "pygame.PixelArray", "text": ["This is the same as Surface.get_bytesize() for the pixel array's surface.", "New in pygame 1.9.2."]}, {"name": "PixelArray.make_surface", "path": "ref/pixelarray#pygame.PixelArray.make_surface", "type": "pygame.PixelArray", "text": ["Creates a new Surface from the current PixelArray. Depending on the current PixelArray the size, pixel order etc. will be different from the original Surface.", "New in pygame 1.8.1."]}, {"name": "PixelArray.ndim", "path": "ref/pixelarray#pygame.PixelArray.ndim", "type": "pygame.PixelArray", "text": ["A pixel array can be 1 or 2 dimensional.", "New in pygame 1.9.2."]}, {"name": "PixelArray.replace", "path": "ref/pixelarray#pygame.PixelArray.replace", "type": "pygame.PixelArray", "text": ["Replaces the pixels with the passed color in the PixelArray by changing them them to the passed replacement color.", "It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the replacement to take pixels with a similar, but not exactly identical color, into account as well.", "This is an in place operation that directly affects the pixels of the PixelArray.", "New in pygame 1.8.1."]}, {"name": "PixelArray.shape", "path": "ref/pixelarray#pygame.PixelArray.shape", "type": "pygame.PixelArray", "text": ["A tuple or length ndim giving the length of each dimension. Analogous to Surface.get_size().", "New in pygame 1.9.2."]}, {"name": "PixelArray.strides", "path": "ref/pixelarray#pygame.PixelArray.strides", "type": "pygame.PixelArray", "text": ["A tuple or length ndim byte counts. When a stride is multiplied by the corresponding index it gives the offset of that index from the start of the array. A stride is negative for an array that has is inverted (has a negative step).", "New in pygame 1.9.2."]}, {"name": "PixelArray.surface", "path": "ref/pixelarray#pygame.PixelArray.surface", "type": "pygame.PixelArray", "text": ["The Surface the PixelArray was created for."]}, {"name": "PixelArray.transpose", "path": "ref/pixelarray#pygame.PixelArray.transpose", "type": "pygame.PixelArray", "text": ["This method returns a new view of the pixel array with the rows and columns swapped. So for a (w, h) sized array a (h, w) slice is returned. If an array is one dimensional, then a length 1 x dimension is added, resulting in a 2D pixel array.", "New in pygame 1.9.2."]}, {"name": "pixelcopy", "path": "ref/pixelcopy", "type": "pygame.pixelcopy", "text": ["The pygame.pixelcopy module contains functions for copying between surfaces and objects exporting an array structure interface. It is a backend for pygame.surfarray, adding NumPy support. But pixelcopy is more general, and intended for direct use.", "The array struct interface exposes an array's data in a standard way. It was introduced in NumPy. In Python 2.7 and above it is replaced by the new buffer protocol, though the buffer protocol is still a work in progress. The array struct interface, on the other hand, is stable and works with earlier Python versions. So for now the array struct interface is the predominate way pygame handles array introspection.", "New in pygame 1.9.2.", "The surface_to_array function copies pixels from a Surface object to a 2D or 3D array. Depending on argument kind and the target array dimension, a copy may be raw pixel value, RGB, a color component slice, or colorkey alpha transparency value. Recognized kind values are the single character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case insensitive, so 'p' is equivalent to 'P'. The first two dimensions of the target must be the surface size (w, h).", "The default 'P' kind code does a direct raw integer pixel (mapped) value copy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array having shape (w, h, 3). For an 8 bit colormap surface this means the table index is copied to a 2D array, not the table value itself. A 2D array's item size must be at least as large as the surface's pixel byte size. The item size of a 3D array must be at least one byte.", "For the 'R', 'G', 'B', and 'A' copy kinds a single color component of the unmapped surface pixels are copied to the target 2D array. For kind 'A' and surfaces with source alpha (the surface was created with the SRCALPHA flag), has a colorkey (set with Surface.set_colorkey()), or has a blanket alpha (set with Surface.set_alpha()) then the alpha values are those expected for a SDL surface. If a surface has no explicit alpha value, then the target array is filled with the value of the optional opaque surface_to_array argument (default 255: not transparent).", "Copy kind 'C' is a special case for alpha copy of a source surface with colorkey. Unlike the 'A' color component copy, the clear argument value is used for colorkey matches, opaque otherwise. By default, a match has alpha 0 (totally transparent), while everything else is alpha 255 (totally opaque). It is a more general implementation of pygame.surfarray.array_colorkey().", "Specific to surface_to_array, a ValueError is raised for target arrays with incorrect shape or item size. A TypeError is raised for an incorrect kind code. Surface specific problems, such as locking, raise a pygame.error.", "See pygame.surfarray.blit_array().", "Map an array of color element values - (w, h, ..., 3) - to an array of pixels - (w, h) according to the format of <surface>.", "Create a new Surface that best resembles the data and format of the array. The array can be 2D or 3D with any sized integer values."]}, {"name": "pixelcopy.array_to_surface", "path": "ref/pixelcopy#pygame.pixelcopy.array_to_surface", "type": "pygame.pixelcopy", "text": ["See pygame.surfarray.blit_array()."]}, {"name": "pixelcopy.make_surface", "path": "ref/pixelcopy#pygame.pixelcopy.make_surface", "type": "pygame.pixelcopy", "text": ["Create a new Surface that best resembles the data and format of the array. The array can be 2D or 3D with any sized integer values."]}, {"name": "pixelcopy.map_array", "path": "ref/pixelcopy#pygame.pixelcopy.map_array", "type": "pygame.pixelcopy", "text": ["Map an array of color element values - (w, h, ..., 3) - to an array of pixels - (w, h) according to the format of <surface>."]}, {"name": "pixelcopy.surface_to_array", "path": "ref/pixelcopy#pygame.pixelcopy.surface_to_array", "type": "pygame.pixelcopy", "text": ["The surface_to_array function copies pixels from a Surface object to a 2D or 3D array. Depending on argument kind and the target array dimension, a copy may be raw pixel value, RGB, a color component slice, or colorkey alpha transparency value. Recognized kind values are the single character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case insensitive, so 'p' is equivalent to 'P'. The first two dimensions of the target must be the surface size (w, h).", "The default 'P' kind code does a direct raw integer pixel (mapped) value copy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array having shape (w, h, 3). For an 8 bit colormap surface this means the table index is copied to a 2D array, not the table value itself. A 2D array's item size must be at least as large as the surface's pixel byte size. The item size of a 3D array must be at least one byte.", "For the 'R', 'G', 'B', and 'A' copy kinds a single color component of the unmapped surface pixels are copied to the target 2D array. For kind 'A' and surfaces with source alpha (the surface was created with the SRCALPHA flag), has a colorkey (set with Surface.set_colorkey()), or has a blanket alpha (set with Surface.set_alpha()) then the alpha values are those expected for a SDL surface. If a surface has no explicit alpha value, then the target array is filled with the value of the optional opaque surface_to_array argument (default 255: not transparent).", "Copy kind 'C' is a special case for alpha copy of a source surface with colorkey. Unlike the 'A' color component copy, the clear argument value is used for colorkey matches, opaque otherwise. By default, a match has alpha 0 (totally transparent), while everything else is alpha 255 (totally opaque). It is a more general implementation of pygame.surfarray.array_colorkey().", "Specific to surface_to_array, a ValueError is raised for target arrays with incorrect shape or item size. A TypeError is raised for an incorrect kind code. Surface specific problems, such as locking, raise a pygame.error."]}, {"name": "pygame", "path": "ref/pygame", "type": "pygame", "text": ["The pygame package represents the top-level package for others to use. Pygame itself is broken into many submodules, but this does not affect programs that use pygame.", "As a convenience, most of the top-level variables in pygame have been placed inside a module named pygame.locals. This is meant to be used with from pygame.locals import *, in addition to import pygame.", "When you import pygame all available pygame submodules are automatically imported. Be aware that some of the pygame modules are considered optional, and may not be available. In that case, pygame will provide a placeholder object instead of the module, which can be used to test for availability.", "Initialize all imported pygame modules. No exceptions will be raised if a module fails, but the total number if successful and failed inits will be returned as a tuple. You can always initialize individual modules manually, but pygame.init() is a convenient way to get everything started. The init() functions for individual modules will raise exceptions when they fail.", "You may want to initialize the different modules separately to speed up your program or to not use modules your game does not require.", "It is safe to call this init() more than once as repeated calls will have no effect. This is true even if you have pygame.quit() all the modules.", "Uninitialize all pygame modules that have previously been initialized. When the Python interpreter shuts down, this method is called regardless, so your program should not need it, except when it wants to terminate its pygame resources and continue. It is safe to call this function more than once as repeated calls have no effect.", "Note", "Calling pygame.quit() will not exit your program. Consider letting your program end in the same way a normal Python program will end.", "Returns True if pygame is currently initialized.", "New in pygame 1.9.5.", "This exception is raised whenever a pygame or SDL operation fails. You can catch any anticipated problems and deal with the error. The exception is always raised with a descriptive message about the problem.", "Derived from the RuntimeError exception, which can also be used to catch these raised errors.", "SDL maintains an internal error message. This message will usually be given to you when pygame.error() is raised, so this function will rarely be needed.", "SDL maintains an internal error message. This message will usually be given to you when pygame.error() is raised, so this function will rarely be needed.", "Returns the three version numbers of the SDL library. This version is built at compile time. It can be used to detect which features may or may not be available through pygame.", "New in pygame 1.7.0.", "Returns the byte order of the SDL library. It returns 1234 for little endian byte order and 4321 for big endian byte order.", "New in pygame 1.8.", "When pygame.quit() is called, all registered quit functions are called. Pygame modules do this automatically when they are initializing, so this function will rarely be needed.", "obj: If Unicode, encode; if bytes, return unaltered; if anything else, return None; if not given, raise SyntaxError.", "encoding (string): If present, encoding to use. The default is 'unicode_escape'.", "errors (string): If given, how to handle unencodable characters. The default is 'backslashreplace'.", "etype (exception type): If given, the exception type to raise for an encoding error. The default is UnicodeEncodeError, as returned by PyUnicode_AsEncodedString(). For the default encoding and errors values there should be no encoding errors.", "This function is used in encoding file paths. Keyword arguments are supported.", "New in pygame 1.9.2: (primarily for use in unit tests)", "obj: If Unicode, encode; if bytes, return unaltered; if anything else, return None; if not given, raise SyntaxError.", "etype (exception type): If given, the exception type to raise for an encoding error. The default is UnicodeEncodeError, as returned by PyUnicode_AsEncodedString().", "This function is used to encode file paths in pygame. Encoding is to the codec as returned by sys.getfilesystemencoding(). Keyword arguments are supported.", "New in pygame 1.9.2: (primarily for use in unit tests)", "This module is automatically imported into the pygame package and can be used to check which version of pygame has been imported.", "This is the version represented as a string. It can contain a micro release number as well, e.g. '1.5.2'", "This version information can easily be compared with other version numbers of the same format. An example of checking pygame version numbers would look like this:", "New in pygame 1.9.6: Attributes major, minor, and patch.", "Changed in pygame 1.9.6: str(pygame.version.vernum) returns a string like \"2.0.0\" instead of \"(2, 0, 0)\".", "Changed in pygame 1.9.6: repr(pygame.version.vernum) returns a string like \"PygameVersion(major=2, minor=0, patch=0)\" instead of \"(2, 0, 0)\".", "The Mercurial node identifier of the repository checkout from which this package was built. If the identifier ends with a plus sign '+' then the package contains uncommitted changes. Please include this revision number in bug reports, especially for non-release pygame builds.", "Important note: pygame development has moved to github, this variable is obsolete now. As soon as development shifted to github, this variable started returning an empty string \"\". It has always been returning an empty string since v1.9.5.", "Changed in pygame 1.9.5: Always returns an empty string \"\".", "This is the SDL library version represented as an extended tuple. It also has attributes 'major', 'minor' & 'patch' that can be accessed like this:", "printing the whole thing returns a string like this:", "New in pygame 2.0.0.", "Setting Environment Variables", "Some aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide range of the library's functionality. Some of the variables are from pygame itself, while others come from the underlying C SDL library that pygame uses.", "In python, environment variables are usually set in code like this:", "Or to preserve users ability to override the variable:", "If the variable is more useful for users of an app to set than the developer then they can set it like this:", "Windows:", "Linux/Mac:", "For some variables they need to be set before initialising pygame, some must be set before even importing pygame, and others can simply be set right before the area of code they control is run.", "Below is a list of environment variables, their settable values, and a brief description of what they do.", "Pygame Environment Variables", "These variables are defined by pygame itself.", "This sets the display where pygame will open its window or screen. The value set here will be used if set before calling pygame.display.set_mode(), and as long as no 'display' parameter is passed into pygame.display.set_mode().", "This forces set_mode() to use the SCALED display mode and, if \"photo\" is set, makes the scaling use the slowest, but highest quality anisotropic scaling algorithm, if it is available. Must be set before calling pygame.display.set_mode().", "This makes pygame use the SDL2 blitter for all alpha blending. The SDL2 blitter is sometimes faster than the default blitter but uses a different formula so the final colours may differ. Must be set before pygame.init() is called.", "This stops the welcome message popping up in the console that tells you which version of python, pygame & SDL you are using. Must be set before importing pygame.", "This switches the pygame.font module to a pure freetype implementation that bypasses SDL_ttf. See the font module for why you might want to do this. Must be set before importing pygame.", "Forces the library backend used in the camera module, overriding the platform defaults. Must be set before calling pygame.camera.init().", "SDL Environment Variables", "These variables are defined by SDL.", "For documentation on the environment variables available in pygame 1 try here. For Pygame 2, some selected environment variables are listed below.", "This will make the pygame window open in the centre of the display. Must be set before calling pygame.display.set_mode().", "This allows control over the placement of the pygame window within the display. Must be set before calling pygame.display.set_mode().", "On some platforms there are multiple video drivers available and this allows users to pick between them. More information is available here. Must be set before calling pygame.init() or pygame.display.init().", "On some platforms there are multiple audio drivers available and this allows users to pick between them. More information is available here. Must be set before calling pygame.init() or pygame.mixer.init().", "By default pygame apps disable screensavers while they are running. Setting this environment variable allows users or developers to change that and make screensavers run again.", "By default SDL tries to disable the X11 compositor for all pygame apps. This is usually a good thing as it's faster, however if you have an app which doesn't update every frame and are using linux you may want to disable this bypass. The bypass has reported problems on KDE linux. This variable is only used on x11/linux platforms."]}, {"name": "quit", "path": "ref/pygame#pygame.quit", "type": "pygame", "text": ["Uninitialize all pygame modules that have previously been initialized. When the Python interpreter shuts down, this method is called regardless, so your program should not need it, except when it wants to terminate its pygame resources and continue. It is safe to call this function more than once as repeated calls have no effect.", "Note", "Calling pygame.quit() will not exit your program. Consider letting your program end in the same way a normal Python program will end."]}, {"name": "Rect", "path": "ref/rect", "type": "pygame.Rect", "text": ["Pygame uses Rect objects to store and manipulate rectangular areas. A Rect can be created from a combination of left, top, width, and height values. Rects can also be created from python objects that are already a Rect or have an attribute named \"rect\".", "Any pygame function that requires a Rect argument also accepts any of these values to construct a Rect. This makes it easier to create Rects on the fly as arguments to functions.", "The Rect functions that change the position or size of a Rect return a new copy of the Rect with the affected changes. The original Rect is not modified. Some methods have an alternate \"in-place\" version that returns None but affects the original Rect. These \"in-place\" methods are denoted with the \"ip\" suffix.", "The Rect object has several virtual attributes which can be used to move and align the Rect:", "All of these attributes can be assigned to:", "Assigning to size, width or height changes the dimensions of the rectangle; all other assignments move the rectangle without resizing it. Notice that some attributes are integers and others are pairs of integers.", "If a Rect has a nonzero width or height, it will return True for a nonzero test. Some methods return a Rect with 0 size to represent an invalid rectangle. A Rect with a 0 size will not collide when using collision detection methods (e.g. collidepoint(), colliderect(), etc.).", "The coordinates for Rect objects are all integers. The size values can be programmed to have negative values, but these are considered illegal Rects for most operations.", "There are several collision tests between other rectangles. Most python containers can be searched for collisions against a single Rect.", "The area covered by a Rect does not include the right- and bottom-most edge of pixels. If one Rect's bottom border is another Rect's top border (i.e., rect1.bottom=rect2.top), the two meet exactly on the screen but do not overlap, and rect1.colliderect(rect2) returns false.", "New in pygame 1.9.2: The Rect class can be subclassed. Methods such as copy() and move() will recognize this and return instances of the subclass. However, the subclass's __init__() method is not called, and __new__() is assumed to take no arguments. So these methods should be overridden if any extra attributes need to be copied.", "Returns a new rectangle having the same position and size as the original.", "New in pygame 1.9", "Returns a new rectangle that is moved by the given offset. The x and y arguments can be any integer value, positive or negative.", "Same as the Rect.move() method, but operates in place.", "Returns a new rectangle with the size changed by the given offset. The rectangle remains centered around its current center. Negative values will shrink the rectangle. Note, uses integers, if the offset given is too small(< 2 > -2), center will be off.", "Same as the Rect.inflate() method, but operates in place.", "Sets the position and size of the rectangle, in place. See parameters for pygame.Rect() for the parameters of this function.", "New in pygame 2.0.1.", "Returns a new rectangle that is moved to be completely inside the argument Rect. If the rectangle is too large to fit inside, it is centered inside the argument Rect, but its size is not changed.", "Same as the Rect.clamp() method, but operates in place.", "Returns a new rectangle that is cropped to be completely inside the argument Rect. If the two rectangles do not overlap to begin with, a Rect with 0 size is returned.", "Returns the coordinates of a line that is cropped to be completely inside the rectangle. If the line does not overlap the rectangle, then an empty tuple is returned.", "The line to crop can be any of the following formats (floats can be used in place of ints, but they will be truncated):", "Note", "This method can be used for collision detection between a rect and a line. See example code below.", "Note", "The rect.bottom and rect.right attributes of a pygame.Rect always lie one pixel outside of its actual border.", "New in pygame 2.0.0.", "Returns a new rectangle that completely covers the area of the two provided rectangles. There may be area inside the new Rect that is not covered by the originals.", "Same as the Rect.union() method, but operates in place.", "Returns the union of one rectangle with a sequence of many rectangles.", "The same as the Rect.unionall() method, but operates in place.", "Returns a new rectangle that is moved and resized to fit another. The aspect ratio of the original Rect is preserved, so the new rectangle may be smaller than the target in either width or height.", "This will flip the width or height of a rectangle if it has a negative size. The rectangle will remain in the same place, with only the sides swapped.", "Returns true when the argument is completely inside the Rect.", "Returns true if the given point is inside the rectangle. A point along the right or bottom edge is not considered to be inside the rectangle.", "Note", "For collision detection between a rect and a line the clipline() method can be used.", "Returns true if any portion of either rectangle overlap (except the top+bottom or left+right edges).", "Note", "For collision detection between a rect and a line the clipline() method can be used.", "Test whether the rectangle collides with any in a sequence of rectangles. The index of the first collision found is returned. If no collisions are found an index of -1 is returned.", "Returns a list of all the indices that contain rectangles that collide with the Rect. If no intersecting rectangles are found, an empty list is returned.", "Returns the first key and value pair that intersects with the calling Rect object. If no collisions are found, None is returned. If use_values is 0 (default) then the dict's keys will be used in the collision detection, otherwise the dict's values will be used.", "Note", "Rect objects cannot be used as keys in a dictionary (they are not hashable), so they must be converted to a tuple/list. e.g. rect.collidedict({tuple(key_rect) : value})", "Returns a list of all the key and value pairs that intersect with the calling Rect object. If no collisions are found an empty list is returned. If use_values is 0 (default) then the dict's keys will be used in the collision detection, otherwise the dict's values will be used.", "Note", "Rect objects cannot be used as keys in a dictionary (they are not hashable), so they must be converted to a tuple/list. e.g. rect.collidedictall({tuple(key_rect) : value})"]}, {"name": "Rect.clamp", "path": "ref/rect#pygame.Rect.clamp", "type": "pygame.Rect", "text": ["Returns a new rectangle that is moved to be completely inside the argument Rect. If the rectangle is too large to fit inside, it is centered inside the argument Rect, but its size is not changed."]}, {"name": "Rect.clamp_ip", "path": "ref/rect#pygame.Rect.clamp_ip", "type": "pygame.Rect", "text": ["Same as the Rect.clamp() method, but operates in place."]}, {"name": "Rect.clip", "path": "ref/rect#pygame.Rect.clip", "type": "pygame.Rect", "text": ["Returns a new rectangle that is cropped to be completely inside the argument Rect. If the two rectangles do not overlap to begin with, a Rect with 0 size is returned."]}, {"name": "Rect.clipline", "path": "ref/rect#pygame.Rect.clipline", "type": "pygame.Rect", "text": ["Returns the coordinates of a line that is cropped to be completely inside the rectangle. If the line does not overlap the rectangle, then an empty tuple is returned.", "The line to crop can be any of the following formats (floats can be used in place of ints, but they will be truncated):", "Note", "This method can be used for collision detection between a rect and a line. See example code below.", "Note", "The rect.bottom and rect.right attributes of a pygame.Rect always lie one pixel outside of its actual border.", "New in pygame 2.0.0."]}, {"name": "Rect.collidedict", "path": "ref/rect#pygame.Rect.collidedict", "type": "pygame.Rect", "text": ["Returns the first key and value pair that intersects with the calling Rect object. If no collisions are found, None is returned. If use_values is 0 (default) then the dict's keys will be used in the collision detection, otherwise the dict's values will be used.", "Note", "Rect objects cannot be used as keys in a dictionary (they are not hashable), so they must be converted to a tuple/list. e.g. rect.collidedict({tuple(key_rect) : value})"]}, {"name": "Rect.collidedictall", "path": "ref/rect#pygame.Rect.collidedictall", "type": "pygame.Rect", "text": ["Returns a list of all the key and value pairs that intersect with the calling Rect object. If no collisions are found an empty list is returned. If use_values is 0 (default) then the dict's keys will be used in the collision detection, otherwise the dict's values will be used.", "Note", "Rect objects cannot be used as keys in a dictionary (they are not hashable), so they must be converted to a tuple/list. e.g. rect.collidedictall({tuple(key_rect) : value})"]}, {"name": "Rect.collidelist", "path": "ref/rect#pygame.Rect.collidelist", "type": "pygame.Rect", "text": ["Test whether the rectangle collides with any in a sequence of rectangles. The index of the first collision found is returned. If no collisions are found an index of -1 is returned."]}, {"name": "Rect.collidelistall", "path": "ref/rect#pygame.Rect.collidelistall", "type": "pygame.Rect", "text": ["Returns a list of all the indices that contain rectangles that collide with the Rect. If no intersecting rectangles are found, an empty list is returned."]}, {"name": "Rect.collidepoint", "path": "ref/rect#pygame.Rect.collidepoint", "type": "pygame.Rect", "text": ["Returns true if the given point is inside the rectangle. A point along the right or bottom edge is not considered to be inside the rectangle.", "Note", "For collision detection between a rect and a line the clipline() method can be used."]}, {"name": "Rect.colliderect", "path": "ref/rect#pygame.Rect.colliderect", "type": "pygame.Rect", "text": ["Returns true if any portion of either rectangle overlap (except the top+bottom or left+right edges).", "Note", "For collision detection between a rect and a line the clipline() method can be used."]}, {"name": "Rect.contains", "path": "ref/rect#pygame.Rect.contains", "type": "pygame.Rect", "text": ["Returns true when the argument is completely inside the Rect."]}, {"name": "Rect.copy", "path": "ref/rect#pygame.Rect.copy", "type": "pygame.Rect", "text": ["Returns a new rectangle having the same position and size as the original.", "New in pygame 1.9"]}, {"name": "Rect.fit", "path": "ref/rect#pygame.Rect.fit", "type": "pygame.Rect", "text": ["Returns a new rectangle that is moved and resized to fit another. The aspect ratio of the original Rect is preserved, so the new rectangle may be smaller than the target in either width or height."]}, {"name": "Rect.inflate", "path": "ref/rect#pygame.Rect.inflate", "type": "pygame.Rect", "text": ["Returns a new rectangle with the size changed by the given offset. The rectangle remains centered around its current center. Negative values will shrink the rectangle. Note, uses integers, if the offset given is too small(< 2 > -2), center will be off."]}, {"name": "Rect.inflate_ip", "path": "ref/rect#pygame.Rect.inflate_ip", "type": "pygame.Rect", "text": ["Same as the Rect.inflate() method, but operates in place."]}, {"name": "Rect.move", "path": "ref/rect#pygame.Rect.move", "type": "pygame.Rect", "text": ["Returns a new rectangle that is moved by the given offset. The x and y arguments can be any integer value, positive or negative."]}, {"name": "Rect.move_ip", "path": "ref/rect#pygame.Rect.move_ip", "type": "pygame.Rect", "text": ["Same as the Rect.move() method, but operates in place."]}, {"name": "Rect.normalize", "path": "ref/rect#pygame.Rect.normalize", "type": "pygame.Rect", "text": ["This will flip the width or height of a rectangle if it has a negative size. The rectangle will remain in the same place, with only the sides swapped."]}, {"name": "Rect.union", "path": "ref/rect#pygame.Rect.union", "type": "pygame.Rect", "text": ["Returns a new rectangle that completely covers the area of the two provided rectangles. There may be area inside the new Rect that is not covered by the originals."]}, {"name": "Rect.union_ip", "path": "ref/rect#pygame.Rect.union_ip", "type": "pygame.Rect", "text": ["Same as the Rect.union() method, but operates in place."]}, {"name": "Rect.unionall", "path": "ref/rect#pygame.Rect.unionall", "type": "pygame.Rect", "text": ["Returns the union of one rectangle with a sequence of many rectangles."]}, {"name": "Rect.unionall_ip", "path": "ref/rect#pygame.Rect.unionall_ip", "type": "pygame.Rect", "text": ["The same as the Rect.unionall() method, but operates in place."]}, {"name": "Rect.update", "path": "ref/rect#pygame.Rect.update", "type": "pygame.Rect", "text": ["Sets the position and size of the rectangle, in place. See parameters for pygame.Rect() for the parameters of this function.", "New in pygame 2.0.1."]}, {"name": "register_quit", "path": "ref/pygame#pygame.register_quit", "type": "pygame", "text": ["When pygame.quit() is called, all registered quit functions are called. Pygame modules do this automatically when they are initializing, so this function will rarely be needed."]}, {"name": "scrap", "path": "ref/scrap", "type": "pygame.scrap", "text": ["EXPERIMENTAL!: This API may change or disappear in later pygame releases. If you use this, your code may break with the next pygame release.", "The scrap module is for transferring data to/from the clipboard. This allows for cutting and pasting data between pygame and other applications. Some basic data (MIME) types are defined and registered:", "pygame.SCRAP_PPM, pygame.SCRAP_PBM and pygame.SCRAP_BMP are suitable for surface buffers to be shared with other applications. pygame.SCRAP_TEXT is an alias for the plain text clipboard type.", "Depending on the platform, additional types are automatically registered when data is placed into the clipboard to guarantee a consistent sharing behaviour with other applications. The following listed types can be used as strings to be passed to the respective pygame.scrap module functions.", "For Windows platforms, these additional types are supported automatically and resolve to their internal definitions:", "For X11 platforms, these additional types are supported automatically and resolve to their internal definitions:", "User defined types can be used, but the data might not be accessible by other applications unless they know what data type to look for. Example: Data placed into the clipboard by pygame.scrap.put(\"my_data_type\", byte_data) can only be accessed by applications which query the clipboard for the \"my_data_type\" data type.", "For an example of how the scrap module works refer to the examples page (pygame.examples.scrap_clipboard.main()) or the code directly in GitHub (pygame/examples/scrap_clipboard.py).", "New in pygame 1.8.", "Note", "The scrap module is currently only supported for Windows, X11 and Mac OS X. On Mac OS X only text works at the moment - other types may be supported in future releases.", "Initialize the scrap module.", "Note", "The scrap module requires pygame.display.set_mode() be called before being initialized.", "Gets the scrap module's initialization state.", "New in pygame 1.9.5.", "Retrieves the data for the specified type from the clipboard. In python 3 the data is returned as a byte string and might need further processing (such as decoding to Unicode).", "Gets a list of data type string identifiers for the data currently available on the clipboard. Each identifier can be used in the pygame.scrap.get() method to get the clipboard content of the specific type.", "Places data for a given clipboard type into the clipboard. The data must be a string buffer. The type is a string identifying the type of data to be placed into the clipboard. This can be one of the predefined pygame.SCRAP_PBM, pygame.SCRAP_PPM, pygame.SCRAP_BMP or pygame.SCRAP_TEXT values or a user defined string identifier.", "pygame.error -- if unable to put the data into the clipboard", "Checks whether data for the given type is currently available in the clipboard.", "Indicates if the clipboard ownership has been lost by the pygame application.", "Sets the access mode for the clipboard. This is only of interest for X11 environments where clipboard modes pygame.SCRAP_SELECTION (for mouse selections) and pygame.SCRAP_CLIPBOARD (for the clipboard) are available. Setting the mode to pygame.SCRAP_SELECTION in other environments will not change the mode from pygame.SCRAP_CLIPBOARD."]}, {"name": "scrap.contains", "path": "ref/scrap#pygame.scrap.contains", "type": "pygame.scrap", "text": ["Checks whether data for the given type is currently available in the clipboard."]}, {"name": "scrap.get", "path": "ref/scrap#pygame.scrap.get", "type": "pygame.scrap", "text": ["Retrieves the data for the specified type from the clipboard. In python 3 the data is returned as a byte string and might need further processing (such as decoding to Unicode)."]}, {"name": "scrap.get_init", "path": "ref/scrap#pygame.scrap.get_init", "type": "pygame.scrap", "text": ["Gets the scrap module's initialization state.", "New in pygame 1.9.5."]}, {"name": "scrap.get_types", "path": "ref/scrap#pygame.scrap.get_types", "type": "pygame.scrap", "text": ["Gets a list of data type string identifiers for the data currently available on the clipboard. Each identifier can be used in the pygame.scrap.get() method to get the clipboard content of the specific type."]}, {"name": "scrap.init", "path": "ref/scrap#pygame.scrap.init", "type": "pygame.scrap", "text": ["Initialize the scrap module.", "Note", "The scrap module requires pygame.display.set_mode() be called before being initialized."]}, {"name": "scrap.lost", "path": "ref/scrap#pygame.scrap.lost", "type": "pygame.scrap", "text": ["Indicates if the clipboard ownership has been lost by the pygame application."]}, {"name": "scrap.put", "path": "ref/scrap#pygame.scrap.put", "type": "pygame.scrap", "text": ["Places data for a given clipboard type into the clipboard. The data must be a string buffer. The type is a string identifying the type of data to be placed into the clipboard. This can be one of the predefined pygame.SCRAP_PBM, pygame.SCRAP_PPM, pygame.SCRAP_BMP or pygame.SCRAP_TEXT values or a user defined string identifier.", "pygame.error -- if unable to put the data into the clipboard"]}, {"name": "scrap.set_mode", "path": "ref/scrap#pygame.scrap.set_mode", "type": "pygame.scrap", "text": ["Sets the access mode for the clipboard. This is only of interest for X11 environments where clipboard modes pygame.SCRAP_SELECTION (for mouse selections) and pygame.SCRAP_CLIPBOARD (for the clipboard) are available. Setting the mode to pygame.SCRAP_SELECTION in other environments will not change the mode from pygame.SCRAP_CLIPBOARD."]}, {"name": "set_error", "path": "ref/pygame#pygame.set_error", "type": "pygame", "text": ["SDL maintains an internal error message. This message will usually be given to you when pygame.error() is raised, so this function will rarely be needed."]}, {"name": "sndarray", "path": "ref/sndarray", "type": "pygame.sndarray", "text": ["Functions to convert between NumPy arrays and Sound objects. This module will only be available when pygame can use the external NumPy package.", "Sound data is made of thousands of samples per second, and each sample is the amplitude of the wave at a particular moment in time. For example, in 22-kHz format, element number 5 of the array is the amplitude of the wave after 5/22000 seconds.", "Each sample is an 8-bit or 16-bit integer, depending on the data format. A stereo sound file has two values per sample, while a mono sound file only has one.", "Creates a new array for the sound data and copies the samples. The array will always be in the format returned from pygame.mixer.get_init().", "Creates a new array that directly references the samples in a Sound object. Modifying the array will change the Sound. The array will always be in the format returned from pygame.mixer.get_init().", "Create a new playable Sound object from an array. The mixer module must be initialized and the array format must be similar to the mixer audio format.", "DEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is 'numpy'. Other values will raise ValueError.", "DEPRECATED: Returns the currently active array type. This will be a value of the get_arraytypes() tuple and indicates which type of array module is used for the array creation.", "New in pygame 1.8.", "DEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the pygame.sndarray.use_arraytype() () method. If no supported array system could be found, None will be returned.", "New in pygame 1.8."]}, {"name": "sndarray.array", "path": "ref/sndarray#pygame.sndarray.array", "type": "pygame.sndarray", "text": ["Creates a new array for the sound data and copies the samples. The array will always be in the format returned from pygame.mixer.get_init()."]}, {"name": "sndarray.get_arraytype", "path": "ref/sndarray#pygame.sndarray.get_arraytype", "type": "pygame.sndarray", "text": ["DEPRECATED: Returns the currently active array type. This will be a value of the get_arraytypes() tuple and indicates which type of array module is used for the array creation.", "New in pygame 1.8."]}, {"name": "sndarray.get_arraytypes", "path": "ref/sndarray#pygame.sndarray.get_arraytypes", "type": "pygame.sndarray", "text": ["DEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the pygame.sndarray.use_arraytype() () method. If no supported array system could be found, None will be returned.", "New in pygame 1.8."]}, {"name": "sndarray.make_sound", "path": "ref/sndarray#pygame.sndarray.make_sound", "type": "pygame.sndarray", "text": ["Create a new playable Sound object from an array. The mixer module must be initialized and the array format must be similar to the mixer audio format."]}, {"name": "sndarray.samples", "path": "ref/sndarray#pygame.sndarray.samples", "type": "pygame.sndarray", "text": ["Creates a new array that directly references the samples in a Sound object. Modifying the array will change the Sound. The array will always be in the format returned from pygame.mixer.get_init()."]}, {"name": "sndarray.use_arraytype", "path": "ref/sndarray#pygame.sndarray.use_arraytype", "type": "pygame.sndarray", "text": ["DEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is 'numpy'. Other values will raise ValueError."]}, {"name": "sprite", "path": "ref/sprite", "type": "pygame.sprite", "text": ["This module contains several simple classes to be used within games. There is the main Sprite class and several Group classes that contain Sprites. The use of these classes is entirely optional when using pygame. The classes are fairly lightweight and only provide a starting place for the code that is common to most games.", "The Sprite class is intended to be used as a base class for the different types of objects in the game. There is also a base Group class that simply stores sprites. A game could create new types of Group classes that operate on specially customized Sprite instances they contain.", "The basic Sprite class can draw the Sprites it contains to a Surface. The Group.draw() method requires that each Sprite have a Surface.image attribute and a Surface.rect. The Group.clear() method requires these same attributes, and can be used to erase all the Sprites with background. There are also more advanced Groups: pygame.sprite.RenderUpdates() and pygame.sprite.OrderedUpdates().", "Lastly, this module contains several collision functions. These help find sprites inside multiple groups that have intersecting bounding rectangles. To find the collisions, the Sprites are required to have a Surface.rect attribute assigned.", "The groups are designed for high efficiency in removing and adding Sprites to them. They also allow cheap testing to see if a Sprite already exists in a Group. A given Sprite can exist in any number of groups. A game could use some groups to control object rendering, and a completely separate set of groups to control interaction or player movement. Instead of adding type attributes or bools to a derived Sprite class, consider keeping the Sprites inside organized Groups. This will allow for easier lookup later in the game.", "Sprites and Groups manage their relationships with the add() and remove() methods. These methods can accept a single or multiple targets for membership. The default initializers for these classes also takes a single or list of targets for initial membership. It is safe to repeatedly add and remove the same Sprite from a Group.", "While it is possible to design sprite and group classes that don't derive from the Sprite and AbstractGroup classes below, it is strongly recommended that you extend those when you add a Sprite or Group class.", "Sprites are not thread safe. So lock them yourself if using threads.", "The base class for visible game objects. Derived classes will want to override the Sprite.update() and assign a Sprite.image and Sprite.rect attributes. The initializer can accept any number of Group instances to be added to.", "When subclassing the Sprite, be sure to call the base initializer before adding the Sprite to Groups. For example:", "The default implementation of this method does nothing; it's just a convenient \"hook\" that you can override. This method is called by Group.update() with whatever arguments you give it.", "There is no need to use this method if not using the convenience method by the same name in the Group class.", "Any number of Group instances can be passed as arguments. The Sprite will be added to the Groups it is not already a member of.", "Any number of Group instances can be passed as arguments. The Sprite will be removed from the Groups it is currently a member of.", "The Sprite is removed from all the Groups that contain it. This won't change anything about the state of the Sprite. It is possible to continue to use the Sprite after this method has been called, including adding it to Groups.", "Returns True when the Sprite belongs to one or more Groups.", "Return a list of all the Groups that contain this Sprite.", "Extra DirtySprite attributes with their default values:", "dirty = 1", "blendmode = 0", "source_rect = None", "visible = 1", "layer = 0", "A simple container for Sprite objects. This class can be inherited to create containers with more specific behaviors. The constructor takes any number of Sprite arguments to add to the Group. The group supports the following standard Python operations:", "The Sprites in the Group are not ordered, so drawing and iterating the Sprites is in no particular order.", "Return a list of all the Sprites this group contains. You can also get an iterator from the group, but you cannot iterate over a Group while modifying it.", "Creates a new Group with all the same Sprites as the original. If you have subclassed Group, the new object will have the same (sub-)class as the original. This only works if the derived class's constructor takes the same arguments as the Group class's.", "Add any number of Sprites to this Group. This will only add Sprites that are not already members of the Group.", "Each sprite argument can also be a iterator containing Sprites.", "Remove any number of Sprites from the Group. This will only remove Sprites that are already members of the Group.", "Each sprite argument can also be a iterator containing Sprites.", "Return True if the Group contains all of the given sprites. This is similar to using the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests if a single Sprite belongs to a Group.", "Each sprite argument can also be a iterator containing Sprites.", "Calls the update() method on all Sprites in the Group. The base Sprite class has an update method that takes any number of arguments and does nothing. The arguments passed to Group.update() will be passed to each Sprite.", "There is no way to get the return value from the Sprite.update() methods.", "Draws the contained Sprites to the Surface argument. This uses the Sprite.image attribute for the source surface, and Sprite.rect for the position.", "The Group does not keep sprites in any order, so the draw order is arbitrary.", "Erases the Sprites used in the last Group.draw() call. The destination Surface is cleared by filling the drawn Sprite positions with the background.", "The background is usually a Surface image the same dimensions as the destination Surface. However, it can also be a callback function that takes two arguments; the destination Surface and an area to clear. The background callback function will be called several times each clear.", "Here is an example callback that will clear the Sprites with solid red:", "Removes all Sprites from this Group.", "This class is an alias to pygame.sprite.Group(). It has no additional functionality.", "This class is an alias to pygame.sprite.Group(). It has no additional functionality.", "This class is derived from pygame.sprite.Group(). It has an extended draw() method that tracks the changed areas of the screen.", "Draws all the Sprites to the surface, the same as Group.draw(). This method also returns a list of Rectangular areas on the screen that have been changed. The returned changes include areas of the screen that have been affected by previous Group.clear() calls.", "The returned Rect list should be passed to pygame.display.update(). This will help performance on software driven display modes. This type of updating is usually only helpful on destinations with non-animating backgrounds.", "This class derives from pygame.sprite.RenderUpdates(). It maintains the order in which the Sprites were added to the Group for rendering. This makes adding and removing Sprites from the Group a little slower than regular Groups.", "This group is fully compatible with pygame.sprite.Sprite.", "You can set the default layer through kwargs using 'default_layer' and an integer for the layer. The default layer is 0.", "If the sprite you add has an attribute _layer then that layer will be used. If the **kwarg contains 'layer' then the sprites passed will be added to that layer (overriding the sprite.layer attribute). If neither sprite has attribute layer nor **kwarg then the default layer is used to add the sprites.", "New in pygame 1.8.", "If the sprite(s) have an attribute layer then that is used for the layer. If **kwargs contains 'layer' then the sprite(s) will be added to that argument (overriding the sprite layer attribute). If neither is passed then the sprite(s) will be added to the default layer.", "Bottom sprites first, top last.", "Raises IndexOutOfBounds if the idx is not within range.", "sprite must have been added to the renderer. It is not checked.", "If the sprite is not found then it will return the default layer.", "Brings the sprite to front, changing sprite layer to topmost layer (added at the end of that layer).", "Moves the sprite to the bottom layer, moving it behind all other layers and adding one additional layer.", "Returns all sprites from a layer, ordered by how they where added. It uses linear search and the sprites are not removed from layer.", "The layers number must exist, it is not checked.", "This group requires pygame.sprite.DirtySprite or any sprite that has the following attributes:", "It uses the dirty flag technique and is therefore faster than the pygame.sprite.RenderUpdates if you have many static sprites. It also switches automatically between dirty rect update and full screen drawing, so you do no have to worry what would be faster.", "Same as for the pygame.sprite.Group. You can specify some additional attributes through kwargs:", "New in pygame 1.8.", "You can pass the background too. If a background is already set, then the bgd argument has no effect.", "screen_rect is in screen coordinates.", "sprite must have been added to the renderer. It is not checked.", "Default is 1000./80 where 80 is the fps I want to switch to full screen mode. This method's name is a typo and should be fixed.", "The GroupSingle container only holds a single Sprite. When a new Sprite is added, the old one is removed.", "There is a special property, GroupSingle.sprite, that accesses the Sprite that this Group contains. It can be None when the Group is empty. The property can also be assigned to add a Sprite into the GroupSingle container.", "Return a list containing all Sprites in a Group that intersect with another Sprite. Intersection is determined by comparing the Sprite.rect attribute of each Sprite.", "The dokill argument is a bool. If set to True, all Sprites that collide will be removed from the Group.", "The collided argument is a callback function used to calculate if two sprites are colliding. it should take two sprites as values, and return a bool value indicating if they are colliding. If collided is not passed, all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.", "collided callables:", "Example:", "Tests for collision between two sprites. Uses the pygame rect colliderect function to calculate the collision. Intended to be passed as a collided callback function to the *collide functions. Sprites must have a \"rect\" attributes.", "New in pygame 1.8.", "A callable class that checks for collisions between two sprites, using a scaled version of the sprites rects.", "Is created with a ratio, the instance is then intended to be passed as a collided callback function to the *collide functions.", "A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.", "New in pygame 1.8.1.", "Tests for collision between two sprites, by testing to see if two circles centered on the sprites overlap. If the sprites have a \"radius\" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the \"rect\" attribute. Intended to be passed as a collided callback function to the *collide functions. Sprites must have a \"rect\" and an optional \"radius\" attribute.", "New in pygame 1.8.1.", "A callable class that checks for collisions between two sprites, using a scaled version of the sprites radius.", "Is created with a floating point ratio, the instance is then intended to be passed as a collided callback function to the *collide functions.", "A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.", "The created callable tests for collision between two sprites, by testing to see if two circles centered on the sprites overlap, after scaling the circles radius by the stored ratio. If the sprites have a \"radius\" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the \"rect\" attribute. Intended to be passed as a collided callback function to the *collide functions. Sprites must have a \"rect\" and an optional \"radius\" attribute.", "New in pygame 1.8.1.", "Tests for collision between two sprites, by testing if their bitmasks overlap (uses pygame.mask.Mask.overlap()). If the sprites have a mask attribute, it is used as the mask, otherwise a mask is created from the sprite's image (uses pygame.mask.from_surface()). Sprites must have a rect attribute; the mask attribute is optional.", "The first point of collision between the masks is returned. The collision point is offset from sprite1's mask's topleft corner (which is always (0, 0)). The collision point is a position within the mask and is not related to the actual screen position of sprite1.", "This function is intended to be passed as a collided callback function to the group collide functions (see spritecollide(), groupcollide(), spritecollideany()).", "Note", "To increase performance, create and set a mask attibute for all sprites that will use this function to check for collisions. Otherwise, each time this function is called it will create new masks.", "Note", "A new mask needs to be recreated each time a sprite's image is changed (e.g. if a new image is used or the existing image is rotated).", "New in pygame 1.8.0.", "This will find collisions between all the Sprites in two groups. Collision is determined by comparing the Sprite.rect attribute of each Sprite or by using the collided function if it is not None.", "Every Sprite inside group1 is added to the return dictionary. The value for each item is the list of Sprites in group2 that intersect.", "If either dokill argument is True, the colliding Sprites will be removed from their respective Group.", "The collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.", "If the sprite collides with any single sprite in the group, a single sprite from the group is returned. On no collision None is returned.", "If you don't need all the features of the pygame.sprite.spritecollide() function, this function will be a bit quicker.", "The collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision."]}, {"name": "sprite.collide_circle", "path": "ref/sprite#pygame.sprite.collide_circle", "type": "pygame.sprite", "text": ["Tests for collision between two sprites, by testing to see if two circles centered on the sprites overlap. If the sprites have a \"radius\" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the \"rect\" attribute. Intended to be passed as a collided callback function to the *collide functions. Sprites must have a \"rect\" and an optional \"radius\" attribute.", "New in pygame 1.8.1."]}, {"name": "sprite.collide_circle_ratio", "path": "ref/sprite#pygame.sprite.collide_circle_ratio", "type": "pygame.sprite", "text": ["A callable class that checks for collisions between two sprites, using a scaled version of the sprites radius.", "Is created with a floating point ratio, the instance is then intended to be passed as a collided callback function to the *collide functions.", "A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.", "The created callable tests for collision between two sprites, by testing to see if two circles centered on the sprites overlap, after scaling the circles radius by the stored ratio. If the sprites have a \"radius\" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the \"rect\" attribute. Intended to be passed as a collided callback function to the *collide functions. Sprites must have a \"rect\" and an optional \"radius\" attribute.", "New in pygame 1.8.1."]}, {"name": "sprite.collide_mask", "path": "ref/sprite#pygame.sprite.collide_mask", "type": "pygame.sprite", "text": ["Tests for collision between two sprites, by testing if their bitmasks overlap (uses pygame.mask.Mask.overlap()). If the sprites have a mask attribute, it is used as the mask, otherwise a mask is created from the sprite's image (uses pygame.mask.from_surface()). Sprites must have a rect attribute; the mask attribute is optional.", "The first point of collision between the masks is returned. The collision point is offset from sprite1's mask's topleft corner (which is always (0, 0)). The collision point is a position within the mask and is not related to the actual screen position of sprite1.", "This function is intended to be passed as a collided callback function to the group collide functions (see spritecollide(), groupcollide(), spritecollideany()).", "Note", "To increase performance, create and set a mask attibute for all sprites that will use this function to check for collisions. Otherwise, each time this function is called it will create new masks.", "Note", "A new mask needs to be recreated each time a sprite's image is changed (e.g. if a new image is used or the existing image is rotated).", "New in pygame 1.8.0."]}, {"name": "sprite.collide_rect", "path": "ref/sprite#pygame.sprite.collide_rect", "type": "pygame.sprite", "text": ["Tests for collision between two sprites. Uses the pygame rect colliderect function to calculate the collision. Intended to be passed as a collided callback function to the *collide functions. Sprites must have a \"rect\" attributes.", "New in pygame 1.8."]}, {"name": "sprite.collide_rect_ratio", "path": "ref/sprite#pygame.sprite.collide_rect_ratio", "type": "pygame.sprite", "text": ["A callable class that checks for collisions between two sprites, using a scaled version of the sprites rects.", "Is created with a ratio, the instance is then intended to be passed as a collided callback function to the *collide functions.", "A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.", "New in pygame 1.8.1."]}, {"name": "sprite.DirtySprite", "path": "ref/sprite#pygame.sprite.DirtySprite", "type": "pygame.sprite", "text": ["Extra DirtySprite attributes with their default values:", "dirty = 1", "blendmode = 0", "source_rect = None", "visible = 1", "layer = 0"]}, {"name": "sprite.Group", "path": "ref/sprite#pygame.sprite.Group", "type": "pygame.sprite", "text": ["A simple container for Sprite objects. This class can be inherited to create containers with more specific behaviors. The constructor takes any number of Sprite arguments to add to the Group. The group supports the following standard Python operations:", "The Sprites in the Group are not ordered, so drawing and iterating the Sprites is in no particular order.", "Return a list of all the Sprites this group contains. You can also get an iterator from the group, but you cannot iterate over a Group while modifying it.", "Creates a new Group with all the same Sprites as the original. If you have subclassed Group, the new object will have the same (sub-)class as the original. This only works if the derived class's constructor takes the same arguments as the Group class's.", "Add any number of Sprites to this Group. This will only add Sprites that are not already members of the Group.", "Each sprite argument can also be a iterator containing Sprites.", "Remove any number of Sprites from the Group. This will only remove Sprites that are already members of the Group.", "Each sprite argument can also be a iterator containing Sprites.", "Return True if the Group contains all of the given sprites. This is similar to using the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests if a single Sprite belongs to a Group.", "Each sprite argument can also be a iterator containing Sprites.", "Calls the update() method on all Sprites in the Group. The base Sprite class has an update method that takes any number of arguments and does nothing. The arguments passed to Group.update() will be passed to each Sprite.", "There is no way to get the return value from the Sprite.update() methods.", "Draws the contained Sprites to the Surface argument. This uses the Sprite.image attribute for the source surface, and Sprite.rect for the position.", "The Group does not keep sprites in any order, so the draw order is arbitrary.", "Erases the Sprites used in the last Group.draw() call. The destination Surface is cleared by filling the drawn Sprite positions with the background.", "The background is usually a Surface image the same dimensions as the destination Surface. However, it can also be a callback function that takes two arguments; the destination Surface and an area to clear. The background callback function will be called several times each clear.", "Here is an example callback that will clear the Sprites with solid red:", "Removes all Sprites from this Group."]}, {"name": "sprite.Group.add", "path": "ref/sprite#pygame.sprite.Group.add", "type": "pygame.sprite", "text": ["Add any number of Sprites to this Group. This will only add Sprites that are not already members of the Group.", "Each sprite argument can also be a iterator containing Sprites."]}, {"name": "sprite.Group.clear", "path": "ref/sprite#pygame.sprite.Group.clear", "type": "pygame.sprite", "text": ["Erases the Sprites used in the last Group.draw() call. The destination Surface is cleared by filling the drawn Sprite positions with the background.", "The background is usually a Surface image the same dimensions as the destination Surface. However, it can also be a callback function that takes two arguments; the destination Surface and an area to clear. The background callback function will be called several times each clear.", "Here is an example callback that will clear the Sprites with solid red:"]}, {"name": "sprite.Group.copy", "path": "ref/sprite#pygame.sprite.Group.copy", "type": "pygame.sprite", "text": ["Creates a new Group with all the same Sprites as the original. If you have subclassed Group, the new object will have the same (sub-)class as the original. This only works if the derived class's constructor takes the same arguments as the Group class's."]}, {"name": "sprite.Group.draw", "path": "ref/sprite#pygame.sprite.Group.draw", "type": "pygame.sprite", "text": ["Draws the contained Sprites to the Surface argument. This uses the Sprite.image attribute for the source surface, and Sprite.rect for the position.", "The Group does not keep sprites in any order, so the draw order is arbitrary."]}, {"name": "sprite.Group.empty", "path": "ref/sprite#pygame.sprite.Group.empty", "type": "pygame.sprite", "text": ["Removes all Sprites from this Group."]}, {"name": "sprite.Group.has", "path": "ref/sprite#pygame.sprite.Group.has", "type": "pygame.sprite", "text": ["Return True if the Group contains all of the given sprites. This is similar to using the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests if a single Sprite belongs to a Group.", "Each sprite argument can also be a iterator containing Sprites."]}, {"name": "sprite.Group.remove", "path": "ref/sprite#pygame.sprite.Group.remove", "type": "pygame.sprite", "text": ["Remove any number of Sprites from the Group. This will only remove Sprites that are already members of the Group.", "Each sprite argument can also be a iterator containing Sprites."]}, {"name": "sprite.Group.sprites", "path": "ref/sprite#pygame.sprite.Group.sprites", "type": "pygame.sprite", "text": ["Return a list of all the Sprites this group contains. You can also get an iterator from the group, but you cannot iterate over a Group while modifying it."]}, {"name": "sprite.Group.update", "path": "ref/sprite#pygame.sprite.Group.update", "type": "pygame.sprite", "text": ["Calls the update() method on all Sprites in the Group. The base Sprite class has an update method that takes any number of arguments and does nothing. The arguments passed to Group.update() will be passed to each Sprite.", "There is no way to get the return value from the Sprite.update() methods."]}, {"name": "sprite.groupcollide", "path": "ref/sprite#pygame.sprite.groupcollide", "type": "pygame.sprite", "text": ["This will find collisions between all the Sprites in two groups. Collision is determined by comparing the Sprite.rect attribute of each Sprite or by using the collided function if it is not None.", "Every Sprite inside group1 is added to the return dictionary. The value for each item is the list of Sprites in group2 that intersect.", "If either dokill argument is True, the colliding Sprites will be removed from their respective Group.", "The collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision."]}, {"name": "sprite.GroupSingle", "path": "ref/sprite#pygame.sprite.GroupSingle", "type": "pygame.sprite", "text": ["The GroupSingle container only holds a single Sprite. When a new Sprite is added, the old one is removed.", "There is a special property, GroupSingle.sprite, that accesses the Sprite that this Group contains. It can be None when the Group is empty. The property can also be assigned to add a Sprite into the GroupSingle container."]}, {"name": "sprite.LayeredDirty", "path": "ref/sprite#pygame.sprite.LayeredDirty", "type": "pygame.sprite", "text": ["This group requires pygame.sprite.DirtySprite or any sprite that has the following attributes:", "It uses the dirty flag technique and is therefore faster than the pygame.sprite.RenderUpdates if you have many static sprites. It also switches automatically between dirty rect update and full screen drawing, so you do no have to worry what would be faster.", "Same as for the pygame.sprite.Group. You can specify some additional attributes through kwargs:", "New in pygame 1.8.", "You can pass the background too. If a background is already set, then the bgd argument has no effect.", "screen_rect is in screen coordinates.", "sprite must have been added to the renderer. It is not checked.", "Default is 1000./80 where 80 is the fps I want to switch to full screen mode. This method's name is a typo and should be fixed."]}, {"name": "sprite.LayeredDirty.change_layer", "path": "ref/sprite#pygame.sprite.LayeredDirty.change_layer", "type": "pygame.sprite", "text": ["sprite must have been added to the renderer. It is not checked."]}, {"name": "sprite.LayeredDirty.clear", "path": "ref/sprite#pygame.sprite.LayeredDirty.clear", "type": "pygame.sprite", "text": []}, {"name": "sprite.LayeredDirty.draw", "path": "ref/sprite#pygame.sprite.LayeredDirty.draw", "type": "pygame.sprite", "text": ["You can pass the background too. If a background is already set, then the bgd argument has no effect."]}, {"name": "sprite.LayeredDirty.get_clip", "path": "ref/sprite#pygame.sprite.LayeredDirty.get_clip", "type": "pygame.sprite", "text": []}, {"name": "sprite.LayeredDirty.repaint_rect", "path": "ref/sprite#pygame.sprite.LayeredDirty.repaint_rect", "type": "pygame.sprite", "text": ["screen_rect is in screen coordinates."]}, {"name": "sprite.LayeredDirty.set_clip", "path": "ref/sprite#pygame.sprite.LayeredDirty.set_clip", "type": "pygame.sprite", "text": []}, {"name": "sprite.LayeredDirty.set_timing_treshold", "path": "ref/sprite#pygame.sprite.LayeredDirty.set_timing_treshold", "type": "pygame.sprite", "text": ["Default is 1000./80 where 80 is the fps I want to switch to full screen mode. This method's name is a typo and should be fixed."]}, {"name": "sprite.LayeredUpdates", "path": "ref/sprite#pygame.sprite.LayeredUpdates", "type": "pygame.sprite", "text": ["This group is fully compatible with pygame.sprite.Sprite.", "You can set the default layer through kwargs using 'default_layer' and an integer for the layer. The default layer is 0.", "If the sprite you add has an attribute _layer then that layer will be used. If the **kwarg contains 'layer' then the sprites passed will be added to that layer (overriding the sprite.layer attribute). If neither sprite has attribute layer nor **kwarg then the default layer is used to add the sprites.", "New in pygame 1.8.", "If the sprite(s) have an attribute layer then that is used for the layer. If **kwargs contains 'layer' then the sprite(s) will be added to that argument (overriding the sprite layer attribute). If neither is passed then the sprite(s) will be added to the default layer.", "Bottom sprites first, top last.", "Raises IndexOutOfBounds if the idx is not within range.", "sprite must have been added to the renderer. It is not checked.", "If the sprite is not found then it will return the default layer.", "Brings the sprite to front, changing sprite layer to topmost layer (added at the end of that layer).", "Moves the sprite to the bottom layer, moving it behind all other layers and adding one additional layer.", "Returns all sprites from a layer, ordered by how they where added. It uses linear search and the sprites are not removed from layer.", "The layers number must exist, it is not checked."]}, {"name": "sprite.LayeredUpdates.add", "path": "ref/sprite#pygame.sprite.LayeredUpdates.add", "type": "pygame.sprite", "text": ["If the sprite(s) have an attribute layer then that is used for the layer. If **kwargs contains 'layer' then the sprite(s) will be added to that argument (overriding the sprite layer attribute). If neither is passed then the sprite(s) will be added to the default layer."]}, {"name": "sprite.LayeredUpdates.change_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.change_layer", "type": "pygame.sprite", "text": ["sprite must have been added to the renderer. It is not checked."]}, {"name": "sprite.LayeredUpdates.draw", "path": "ref/sprite#pygame.sprite.LayeredUpdates.draw", "type": "pygame.sprite", "text": []}, {"name": "sprite.LayeredUpdates.get_bottom_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_bottom_layer", "type": "pygame.sprite", "text": []}, {"name": "sprite.LayeredUpdates.get_layer_of_sprite", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_layer_of_sprite", "type": "pygame.sprite", "text": ["If the sprite is not found then it will return the default layer."]}, {"name": "sprite.LayeredUpdates.get_sprite", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_sprite", "type": "pygame.sprite", "text": ["Raises IndexOutOfBounds if the idx is not within range."]}, {"name": "sprite.LayeredUpdates.get_sprites_at", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_sprites_at", "type": "pygame.sprite", "text": ["Bottom sprites first, top last."]}, {"name": "sprite.LayeredUpdates.get_sprites_from_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_sprites_from_layer", "type": "pygame.sprite", "text": ["Returns all sprites from a layer, ordered by how they where added. It uses linear search and the sprites are not removed from layer."]}, {"name": "sprite.LayeredUpdates.get_top_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_top_layer", "type": "pygame.sprite", "text": []}, {"name": "sprite.LayeredUpdates.get_top_sprite", "path": "ref/sprite#pygame.sprite.LayeredUpdates.get_top_sprite", "type": "pygame.sprite", "text": []}, {"name": "sprite.LayeredUpdates.layers", "path": "ref/sprite#pygame.sprite.LayeredUpdates.layers", "type": "pygame.sprite", "text": []}, {"name": "sprite.LayeredUpdates.move_to_back", "path": "ref/sprite#pygame.sprite.LayeredUpdates.move_to_back", "type": "pygame.sprite", "text": ["Moves the sprite to the bottom layer, moving it behind all other layers and adding one additional layer."]}, {"name": "sprite.LayeredUpdates.move_to_front", "path": "ref/sprite#pygame.sprite.LayeredUpdates.move_to_front", "type": "pygame.sprite", "text": ["Brings the sprite to front, changing sprite layer to topmost layer (added at the end of that layer)."]}, {"name": "sprite.LayeredUpdates.remove_sprites_of_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.remove_sprites_of_layer", "type": "pygame.sprite", "text": []}, {"name": "sprite.LayeredUpdates.sprites", "path": "ref/sprite#pygame.sprite.LayeredUpdates.sprites", "type": "pygame.sprite", "text": []}, {"name": "sprite.LayeredUpdates.switch_layer", "path": "ref/sprite#pygame.sprite.LayeredUpdates.switch_layer", "type": "pygame.sprite", "text": ["The layers number must exist, it is not checked."]}, {"name": "sprite.OrderedUpdates", "path": "ref/sprite#pygame.sprite.OrderedUpdates", "type": "pygame.sprite", "text": ["This class derives from pygame.sprite.RenderUpdates(). It maintains the order in which the Sprites were added to the Group for rendering. This makes adding and removing Sprites from the Group a little slower than regular Groups."]}, {"name": "sprite.RenderClear", "path": "ref/sprite#pygame.sprite.RenderClear", "type": "pygame.sprite", "text": ["This class is an alias to pygame.sprite.Group(). It has no additional functionality."]}, {"name": "sprite.RenderPlain", "path": "ref/sprite#pygame.sprite.RenderPlain", "type": "pygame.sprite", "text": ["This class is an alias to pygame.sprite.Group(). It has no additional functionality."]}, {"name": "sprite.RenderUpdates", "path": "ref/sprite#pygame.sprite.RenderUpdates", "type": "pygame.sprite", "text": ["This class is derived from pygame.sprite.Group(). It has an extended draw() method that tracks the changed areas of the screen.", "Draws all the Sprites to the surface, the same as Group.draw(). This method also returns a list of Rectangular areas on the screen that have been changed. The returned changes include areas of the screen that have been affected by previous Group.clear() calls.", "The returned Rect list should be passed to pygame.display.update(). This will help performance on software driven display modes. This type of updating is usually only helpful on destinations with non-animating backgrounds."]}, {"name": "sprite.RenderUpdates.draw", "path": "ref/sprite#pygame.sprite.RenderUpdates.draw", "type": "pygame.sprite", "text": ["Draws all the Sprites to the surface, the same as Group.draw(). This method also returns a list of Rectangular areas on the screen that have been changed. The returned changes include areas of the screen that have been affected by previous Group.clear() calls.", "The returned Rect list should be passed to pygame.display.update(). This will help performance on software driven display modes. This type of updating is usually only helpful on destinations with non-animating backgrounds."]}, {"name": "sprite.Sprite", "path": "ref/sprite#pygame.sprite.Sprite", "type": "pygame.sprite", "text": ["The base class for visible game objects. Derived classes will want to override the Sprite.update() and assign a Sprite.image and Sprite.rect attributes. The initializer can accept any number of Group instances to be added to.", "When subclassing the Sprite, be sure to call the base initializer before adding the Sprite to Groups. For example:", "The default implementation of this method does nothing; it's just a convenient \"hook\" that you can override. This method is called by Group.update() with whatever arguments you give it.", "There is no need to use this method if not using the convenience method by the same name in the Group class.", "Any number of Group instances can be passed as arguments. The Sprite will be added to the Groups it is not already a member of.", "Any number of Group instances can be passed as arguments. The Sprite will be removed from the Groups it is currently a member of.", "The Sprite is removed from all the Groups that contain it. This won't change anything about the state of the Sprite. It is possible to continue to use the Sprite after this method has been called, including adding it to Groups.", "Returns True when the Sprite belongs to one or more Groups.", "Return a list of all the Groups that contain this Sprite."]}, {"name": "sprite.Sprite.add", "path": "ref/sprite#pygame.sprite.Sprite.add", "type": "pygame.sprite", "text": ["Any number of Group instances can be passed as arguments. The Sprite will be added to the Groups it is not already a member of."]}, {"name": "sprite.Sprite.alive", "path": "ref/sprite#pygame.sprite.Sprite.alive", "type": "pygame.sprite", "text": ["Returns True when the Sprite belongs to one or more Groups."]}, {"name": "sprite.Sprite.groups", "path": "ref/sprite#pygame.sprite.Sprite.groups", "type": "pygame.sprite", "text": ["Return a list of all the Groups that contain this Sprite."]}, {"name": "sprite.Sprite.kill", "path": "ref/sprite#pygame.sprite.Sprite.kill", "type": "pygame.sprite", "text": ["The Sprite is removed from all the Groups that contain it. This won't change anything about the state of the Sprite. It is possible to continue to use the Sprite after this method has been called, including adding it to Groups."]}, {"name": "sprite.Sprite.remove", "path": "ref/sprite#pygame.sprite.Sprite.remove", "type": "pygame.sprite", "text": ["Any number of Group instances can be passed as arguments. The Sprite will be removed from the Groups it is currently a member of."]}, {"name": "sprite.Sprite.update", "path": "ref/sprite#pygame.sprite.Sprite.update", "type": "pygame.sprite", "text": ["The default implementation of this method does nothing; it's just a convenient \"hook\" that you can override. This method is called by Group.update() with whatever arguments you give it.", "There is no need to use this method if not using the convenience method by the same name in the Group class."]}, {"name": "sprite.spritecollide", "path": "ref/sprite#pygame.sprite.spritecollide", "type": "pygame.sprite", "text": ["Return a list containing all Sprites in a Group that intersect with another Sprite. Intersection is determined by comparing the Sprite.rect attribute of each Sprite.", "The dokill argument is a bool. If set to True, all Sprites that collide will be removed from the Group.", "The collided argument is a callback function used to calculate if two sprites are colliding. it should take two sprites as values, and return a bool value indicating if they are colliding. If collided is not passed, all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.", "collided callables:", "Example:"]}, {"name": "sprite.spritecollideany", "path": "ref/sprite#pygame.sprite.spritecollideany", "type": "pygame.sprite", "text": ["If the sprite collides with any single sprite in the group, a single sprite from the group is returned. On no collision None is returned.", "If you don't need all the features of the pygame.sprite.spritecollide() function, this function will be a bit quicker.", "The collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision."]}, {"name": "Surface", "path": "ref/surface", "type": "pygame.Surface", "text": ["A pygame Surface is used to represent any image. The Surface has a fixed resolution and pixel format. Surfaces with 8-bit pixels use a color palette to map to 24-bit color.", "Call pygame.Surface() to create a new image object. The Surface will be cleared to all black. The only required arguments are the sizes. With no additional arguments, the Surface will be created in a format that best matches the display Surface.", "The pixel format can be controlled by passing the bit depth or an existing Surface. The flags argument is a bitmask of additional features for the surface. You can pass any combination of these flags:", "Both flags are only a request, and may not be possible for all displays and formats.", "Advance users can combine a set of bitmasks with a depth value. The masks are a set of 4 integers representing which bits in a pixel will represent each color. Normal Surfaces should not require the masks argument.", "Surfaces can have many extra attributes like alpha planes, colorkeys, source rectangle clipping. These functions mainly effect how the Surface is blitted to other Surfaces. The blit routines will attempt to use hardware acceleration when possible, otherwise they will use highly optimized software blitting methods.", "There are three types of transparency supported in pygame: colorkeys, surface alphas, and pixel alphas. Surface alphas can be mixed with colorkeys, but an image with per pixel alphas cannot use the other modes. Colorkey transparency makes a single color value transparent. Any pixels matching the colorkey will not be drawn. The surface alpha value is a single value that changes the transparency for the entire image. A surface alpha of 255 is opaque, and a value of 0 is completely transparent.", "Per pixel alphas are different because they store a transparency value for every pixel. This allows for the most precise transparency effects, but it also the slowest. Per pixel alphas cannot be mixed with surface alpha and colorkeys.", "There is support for pixel access for the Surfaces. Pixel access on hardware surfaces is slow and not recommended. Pixels can be accessed using the get_at() and set_at() functions. These methods are fine for simple access, but will be considerably slow when doing of pixel work with them. If you plan on doing a lot of pixel level work, it is recommended to use a pygame.PixelArray, which gives an array like view of the surface. For involved mathematical manipulations try the pygame.surfarray module (It's quite quick, but requires NumPy.)", "Any functions that directly access a surface's pixel data will need that surface to be lock()'ed. These functions can lock() and unlock() the surfaces themselves without assistance. But, if a function will be called many times, there will be a lot of overhead for multiple locking and unlocking of the surface. It is best to lock the surface manually before making the function call many times, and then unlocking when you are finished. All functions that need a locked surface will say so in their docs. Remember to leave the Surface locked only while necessary.", "Surface pixels are stored internally as a single number that has all the colors encoded into it. Use the map_rgb() and unmap_rgb() to convert between individual red, green, and blue values into a packed integer for that Surface.", "Surfaces can also reference sections of other Surfaces. These are created with the subsurface() method. Any change to either Surface will effect the other.", "Each Surface contains a clipping area. By default the clip area covers the entire Surface. If it is changed, all drawing operations will only effect the smaller area.", "Draws a source Surface onto this Surface. The draw can be positioned with the dest argument. The dest argument can either be a pair of coordinates representing the position of the upper left corner of the blit or a Rect, where the upper left corner of the rectangle will be used as the position for the blit. The size of the destination rectangle does not effect the blit.", "An optional area rectangle can be passed as well. This represents a smaller portion of the source Surface to draw.", "New in pygame 1.8: Optional special_flags: BLEND_ADD, BLEND_SUB, BLEND_MULT, BLEND_MIN, BLEND_MAX.", "New in pygame 1.8.1: Optional special_flags: BLEND_RGBA_ADD, BLEND_RGBA_SUB, BLEND_RGBA_MULT, BLEND_RGBA_MIN, BLEND_RGBA_MAX BLEND_RGB_ADD, BLEND_RGB_SUB, BLEND_RGB_MULT, BLEND_RGB_MIN, BLEND_RGB_MAX.", "New in pygame 1.9.2: Optional special_flags: BLEND_PREMULTIPLIED", "New in pygame 2.0.0: Optional special_flags: BLEND_ALPHA_SDL2 - Uses the SDL2 blitter for alpha blending, this gives different results than the default blitter, which is modelled after SDL1, due to different approximations used for the alpha blending formula. The SDL2 blitter also supports RLE on alpha blended surfaces which the pygame one does not.", "The return rectangle is the area of the affected pixels, excluding any pixels outside the destination Surface, or outside the clipping area.", "Pixel alphas will be ignored when blitting to an 8 bit Surface.", "For a surface with colorkey or blanket alpha, a blit to self may give slightly different colors than a non self-blit.", "Draws many surfaces onto this Surface. It takes a sequence as input, with each of the elements corresponding to the ones of blit(). It needs at minimum a sequence of (source, dest).", "a list of rects of the areas changed if doreturn is True, otherwise None", "list or None", "New in pygame 1.9.4.", "Creates a new copy of the Surface with the pixel format changed. The new pixel format can be determined from another existing Surface. Otherwise depth, flags, and masks arguments can be used, similar to the pygame.Surface() call.", "If no arguments are passed the new Surface will have the same pixel format as the display Surface. This is always the fastest format for blitting. It is a good idea to convert all Surfaces before they are blitted many times.", "The converted Surface will have no pixel alphas. They will be stripped if the original had them. See convert_alpha() for preserving or creating per-pixel alphas.", "The new copy will have the same class as the copied surface. This lets as Surface subclass inherit this method without the need to override, unless subclass specific instance attributes also need copying.", "Creates a new copy of the surface with the desired pixel format. The new surface will be in a format suited for quick blitting to the given format with per pixel alpha. If no surface is given, the new surface will be optimized for blitting to the current display.", "Unlike the convert() method, the pixel format for the new image will not be exactly the same as the requested source, but it will be optimized for fast alpha blitting to the destination.", "As with convert() the returned surface has the same class as the converted surface.", "Makes a duplicate copy of a Surface. The new surface will have the same pixel formats, color palettes, transparency settings, and class as the original. If a Surface subclass also needs to copy any instance specific attributes then it should override copy().", "Fill the Surface with a solid color. If no rect argument is given the entire Surface will be filled. The rect argument will limit the fill to a specific area. The fill will also be contained by the Surface clip area.", "The color argument can be either a RGB sequence, a RGBA sequence or a mapped color index. If using RGBA, the Alpha (A part of RGBA) is ignored unless the surface uses per pixel alpha (Surface has the SRCALPHA flag).", "New in pygame 1.8: Optional special_flags: BLEND_ADD, BLEND_SUB, BLEND_MULT, BLEND_MIN, BLEND_MAX.", "New in pygame 1.8.1: Optional special_flags: BLEND_RGBA_ADD, BLEND_RGBA_SUB, BLEND_RGBA_MULT, BLEND_RGBA_MIN, BLEND_RGBA_MAX BLEND_RGB_ADD, BLEND_RGB_SUB, BLEND_RGB_MULT, BLEND_RGB_MIN, BLEND_RGB_MAX.", "This will return the affected Surface area.", "Move the image by dx pixels right and dy pixels down. dx and dy may be negative for left and up scrolls respectively. Areas of the surface that are not overwritten retain their original pixel values. Scrolling is contained by the Surface clip area. It is safe to have dx and dy values that exceed the surface size.", "New in pygame 1.9.", "Set the current color key for the Surface. When blitting this Surface onto a destination, any pixels that have the same color as the colorkey will be transparent. The color can be an RGB color or a mapped color integer. If None is passed, the colorkey will be unset.", "The colorkey will be ignored if the Surface is formatted to use per pixel alpha values. The colorkey can be mixed with the full Surface alpha value.", "The optional flags argument can be set to pygame.RLEACCEL to provide better performance on non accelerated displays. An RLEACCEL Surface will be slower to modify, but quicker to blit as a source.", "Return the current colorkey value for the Surface. If the colorkey is not set then None is returned.", "Set the current alpha value for the Surface. When blitting this Surface onto a destination, the pixels will be drawn slightly transparent. The alpha value is an integer from 0 to 255, 0 is fully transparent and 255 is fully opaque. If None is passed for the alpha value, then alpha blending will be disabled, including per-pixel alpha.", "This value is different than the per pixel Surface alpha. For a surface with per pixel alpha, blanket alpha is ignored and None is returned.", "Changed in pygame 2.0: per-surface alpha can be combined with per-pixel alpha.", "The optional flags argument can be set to pygame.RLEACCEL to provide better performance on non accelerated displays. An RLEACCEL Surface will be slower to modify, but quicker to blit as a source.", "Return the current alpha value for the Surface.", "Lock the pixel data of a Surface for access. On accelerated Surfaces, the pixel data may be stored in volatile video memory or nonlinear compressed forms. When a Surface is locked the pixel memory becomes available to access by regular software. Code that reads or writes pixel values will need the Surface to be locked.", "Surfaces should not remain locked for more than necessary. A locked Surface can often not be displayed or managed by pygame.", "Not all Surfaces require locking. The mustlock() method can determine if it is actually required. There is no performance penalty for locking and unlocking a Surface that does not need it.", "All pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.", "It is safe to nest locking and unlocking calls. The surface will only be unlocked after the final lock is released.", "Unlock the Surface pixel data after it has been locked. The unlocked Surface can once again be drawn and managed by pygame. See the lock() documentation for more details.", "All pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.", "It is safe to nest locking and unlocking calls. The surface will only be unlocked after the final lock is released.", "Returns True if the Surface is required to be locked to access pixel data. Usually pure software Surfaces do not require locking. This method is rarely needed, since it is safe and quickest to just lock all Surfaces as needed.", "All pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.", "Returns True when the Surface is locked. It doesn't matter how many times the Surface is locked.", "Returns the currently existing locks for the Surface.", "Return a copy of the RGBA Color value at the given pixel. If the Surface has no per pixel alpha, then the alpha value will always be 255 (opaque). If the pixel position is outside the area of the Surface an IndexError exception will be raised.", "Getting and setting pixels one at a time is generally too slow to be used in a game or realtime situation. It is better to use methods which operate on many pixels at a time like with the blit, fill and draw methods - or by using pygame.surfarray/pygame.PixelArray.", "This function will temporarily lock and unlock the Surface as needed.", "New in pygame 1.9: Returning a Color instead of tuple. Use tuple(surf.get_at((x,y))) if you want a tuple, and not a Color. This should only matter if you want to use the color as a key in a dict.", "Set the RGBA or mapped integer color value for a single pixel. If the Surface does not have per pixel alphas, the alpha value is ignored. Setting pixels outside the Surface area or outside the Surface clipping will have no effect.", "Getting and setting pixels one at a time is generally too slow to be used in a game or realtime situation.", "This function will temporarily lock and unlock the Surface as needed.", "Return the integer value of the given pixel. If the pixel position is outside the area of the Surface an IndexError exception will be raised.", "This method is intended for pygame unit testing. It unlikely has any use in an application.", "This function will temporarily lock and unlock the Surface as needed.", "New in pygame 1.9.2.", "Return a list of up to 256 color elements that represent the indexed colors used in an 8-bit Surface. The returned list is a copy of the palette, and changes will have no effect on the Surface.", "Returning a list of Color(with length 3) instances instead of tuples.", "New in pygame 1.9.", "Returns the red, green, and blue color values for a single index in a Surface palette. The index should be a value from 0 to 255.", "New in pygame 1.9: Returning Color(with length 3) instance instead of a tuple.", "Set the full palette for an 8-bit Surface. This will replace the colors in the existing palette. A partial palette can be passed and only the first colors in the original palette will be changed.", "This function has no effect on a Surface with more than 8-bits per pixel.", "Set the palette value for a single entry in a Surface palette. The index should be a value from 0 to 255.", "This function has no effect on a Surface with more than 8-bits per pixel.", "Convert an RGBA color into the mapped integer value for this Surface. The returned integer will contain no more bits than the bit depth of the Surface. Mapped color values are not often used inside pygame, but can be passed to most functions that require a Surface and a color.", "See the Surface object documentation for more information about colors and pixel formats.", "Convert an mapped integer color into the RGB color components for this Surface. Mapped color values are not often used inside pygame, but can be passed to most functions that require a Surface and a color.", "See the Surface object documentation for more information about colors and pixel formats.", "Each Surface has an active clipping area. This is a rectangle that represents the only pixels on the Surface that can be modified. If None is passed for the rectangle the full Surface will be available for changes.", "The clipping area is always restricted to the area of the Surface itself. If the clip rectangle is too large it will be shrunk to fit inside the Surface.", "Return a rectangle of the current clipping area. The Surface will always return a valid rectangle that will never be outside the bounds of the image. If the Surface has had None set for the clipping area, the Surface will return a rectangle with the full area of the Surface.", "Returns a new Surface that shares its pixels with its new parent. The new Surface is considered a child of the original. Modifications to either Surface pixels will effect each other. Surface information like clipping area and color keys are unique to each Surface.", "The new Surface will inherit the palette, color key, and alpha settings from its parent.", "It is possible to have any number of subsurfaces and subsubsurfaces on the parent. It is also possible to subsurface the display Surface if the display mode is not hardware accelerated.", "See get_offset() and get_parent() to learn more about the state of a subsurface.", "A subsurface will have the same class as the parent surface.", "Returns the parent Surface of a subsurface. If this is not a subsurface then None will be returned.", "Returns the parent Surface of a subsurface. If this is not a subsurface then this surface will be returned.", "Get the offset position of a child subsurface inside of a parent. If the Surface is not a subsurface this will return (0, 0).", "Get the offset position of a child subsurface inside of its top level parent Surface. If the Surface is not a subsurface this will return (0, 0).", "Return the width and height of the Surface in pixels.", "Return the width of the Surface in pixels.", "Return the height of the Surface in pixels.", "Returns a new rectangle covering the entire surface. This rectangle will always start at (0, 0) with a width and height the same size as the image.", "You can pass keyword argument values to this function. These named values will be applied to the attributes of the Rect before it is returned. An example would be mysurf.get_rect(center=(100, 100)) to create a rectangle for the Surface centered at a given position.", "Returns the number of bits used to represent each pixel. This value may not exactly fill the number of bytes used per pixel. For example a 15 bit Surface still requires a full 2 bytes.", "Return the number of bytes used per pixel.", "Returns a set of current Surface features. Each feature is a bit in the flags bitmask. Typical flags are HWSURFACE, RLEACCEL, SRCALPHA, and SRCCOLORKEY.", "Here is a more complete list of flags. A full list can be found in SDL_video.h", "Available for pygame.display.set_mode()", "Used internally (read-only)", "Return the number of bytes separating each row in the Surface. Surfaces in video memory are not always linearly packed. Subsurfaces will also have a larger pitch than their real width.", "This value is not needed for normal pygame usage.", "Returns the bitmasks used to isolate each color in a mapped integer.", "This value is not needed for normal pygame usage.", "This is not needed for normal pygame usage.", "Note", "In SDL2, the masks are read-only and accordingly this method will raise an AttributeError if called.", "New in pygame 1.8.1.", "Returns the pixel shifts need to convert between each color and a mapped integer.", "This value is not needed for normal pygame usage.", "This is not needed for normal pygame usage.", "Note", "In SDL2, the shifts are read-only and accordingly this method will raise an AttributeError if called.", "New in pygame 1.8.1.", "Return the least significant number of bits stripped from each color in a mapped integer.", "This value is not needed for normal pygame usage.", "Returns the smallest rectangular region that contains all the pixels in the surface that have an alpha value greater than or equal to the minimum alpha value.", "This function will temporarily lock and unlock the Surface as needed.", "New in pygame 1.8.", "Return an object which exports a surface's internal pixel buffer as a C level array struct, Python level array interface or a C level buffer interface. The pixel buffer is writeable. The new buffer protocol is supported for Python 2.6 and up in CPython. The old buffer protocol is also supported for Python 2.x. The old buffer data is in one segment for kind '0', multi-segment for other buffer view kinds.", "The kind argument is the length 1 string '0', '1', '2', '3', 'r', 'g', 'b', or 'a'. The letters are case insensitive; 'A' will work as well. The argument can be either a Unicode or byte (char) string. The default is '2'.", "'0' returns a contiguous unstructured bytes view. No surface shape information is given. A ValueError is raised if the surface's pixels are discontinuous.", "'1' returns a (surface-width * surface-height) array of continuous pixels. A ValueError is raised if the surface pixels are discontinuous.", "'2' returns a (surface-width, surface-height) array of raw pixels. The pixels are surface-bytesize-d unsigned integers. The pixel format is surface specific. The 3 byte unsigned integers of 24 bit surfaces are unlikely accepted by anything other than other pygame functions.", "'3' returns a (surface-width, surface-height, 3) array of RGB color components. Each of the red, green, and blue components are unsigned bytes. Only 24-bit and 32-bit surfaces are supported. The color components must be in either RGB or BGR order within the pixel.", "'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a (surface-width, surface-height) view of a single color component within a surface: a color plane. Color components are unsigned bytes. Both 24-bit and 32-bit surfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with SRCALPHA support 'a'.", "The surface is locked only when an exposed interface is accessed. For new buffer interface accesses, the surface is unlocked once the last buffer view is released. For array interface and old buffer interface accesses, the surface remains locked until the BufferProxy object is released.", "New in pygame 1.9.2.", "Return a buffer object for the pixels of the Surface. The buffer can be used for direct pixel access and manipulation. Surface pixel data is represented as an unstructured block of memory, with a start address and length in bytes. The data need not be contiguous. Any gaps are included in the length, but otherwise ignored.", "This method implicitly locks the Surface. The lock will be released when the returned pygame.BufferProxy object is garbage collected.", "New in pygame 1.8.", "The starting address of the surface's raw pixel bytes.", "New in pygame 1.9.2."]}, {"name": "Surface._pixels_address", "path": "ref/surface#pygame.Surface._pixels_address", "type": "pygame.Surface", "text": ["The starting address of the surface's raw pixel bytes.", "New in pygame 1.9.2."]}, {"name": "Surface.blit", "path": "ref/surface#pygame.Surface.blit", "type": "pygame.Surface", "text": ["Draws a source Surface onto this Surface. The draw can be positioned with the dest argument. The dest argument can either be a pair of coordinates representing the position of the upper left corner of the blit or a Rect, where the upper left corner of the rectangle will be used as the position for the blit. The size of the destination rectangle does not effect the blit.", "An optional area rectangle can be passed as well. This represents a smaller portion of the source Surface to draw.", "New in pygame 1.8: Optional special_flags: BLEND_ADD, BLEND_SUB, BLEND_MULT, BLEND_MIN, BLEND_MAX.", "New in pygame 1.8.1: Optional special_flags: BLEND_RGBA_ADD, BLEND_RGBA_SUB, BLEND_RGBA_MULT, BLEND_RGBA_MIN, BLEND_RGBA_MAX BLEND_RGB_ADD, BLEND_RGB_SUB, BLEND_RGB_MULT, BLEND_RGB_MIN, BLEND_RGB_MAX.", "New in pygame 1.9.2: Optional special_flags: BLEND_PREMULTIPLIED", "New in pygame 2.0.0: Optional special_flags: BLEND_ALPHA_SDL2 - Uses the SDL2 blitter for alpha blending, this gives different results than the default blitter, which is modelled after SDL1, due to different approximations used for the alpha blending formula. The SDL2 blitter also supports RLE on alpha blended surfaces which the pygame one does not.", "The return rectangle is the area of the affected pixels, excluding any pixels outside the destination Surface, or outside the clipping area.", "Pixel alphas will be ignored when blitting to an 8 bit Surface.", "For a surface with colorkey or blanket alpha, a blit to self may give slightly different colors than a non self-blit."]}, {"name": "Surface.blits", "path": "ref/surface#pygame.Surface.blits", "type": "pygame.Surface", "text": ["Draws many surfaces onto this Surface. It takes a sequence as input, with each of the elements corresponding to the ones of blit(). It needs at minimum a sequence of (source, dest).", "a list of rects of the areas changed if doreturn is True, otherwise None", "list or None", "New in pygame 1.9.4."]}, {"name": "Surface.convert", "path": "ref/surface#pygame.Surface.convert", "type": "pygame.Surface", "text": ["Creates a new copy of the Surface with the pixel format changed. The new pixel format can be determined from another existing Surface. Otherwise depth, flags, and masks arguments can be used, similar to the pygame.Surface() call.", "If no arguments are passed the new Surface will have the same pixel format as the display Surface. This is always the fastest format for blitting. It is a good idea to convert all Surfaces before they are blitted many times.", "The converted Surface will have no pixel alphas. They will be stripped if the original had them. See convert_alpha() for preserving or creating per-pixel alphas.", "The new copy will have the same class as the copied surface. This lets as Surface subclass inherit this method without the need to override, unless subclass specific instance attributes also need copying."]}, {"name": "Surface.convert_alpha", "path": "ref/surface#pygame.Surface.convert_alpha", "type": "pygame.Surface", "text": ["Creates a new copy of the surface with the desired pixel format. The new surface will be in a format suited for quick blitting to the given format with per pixel alpha. If no surface is given, the new surface will be optimized for blitting to the current display.", "Unlike the convert() method, the pixel format for the new image will not be exactly the same as the requested source, but it will be optimized for fast alpha blitting to the destination.", "As with convert() the returned surface has the same class as the converted surface."]}, {"name": "Surface.copy", "path": "ref/surface#pygame.Surface.copy", "type": "pygame.Surface", "text": ["Makes a duplicate copy of a Surface. The new surface will have the same pixel formats, color palettes, transparency settings, and class as the original. If a Surface subclass also needs to copy any instance specific attributes then it should override copy()."]}, {"name": "Surface.fill", "path": "ref/surface#pygame.Surface.fill", "type": "pygame.Surface", "text": ["Fill the Surface with a solid color. If no rect argument is given the entire Surface will be filled. The rect argument will limit the fill to a specific area. The fill will also be contained by the Surface clip area.", "The color argument can be either a RGB sequence, a RGBA sequence or a mapped color index. If using RGBA, the Alpha (A part of RGBA) is ignored unless the surface uses per pixel alpha (Surface has the SRCALPHA flag).", "New in pygame 1.8: Optional special_flags: BLEND_ADD, BLEND_SUB, BLEND_MULT, BLEND_MIN, BLEND_MAX.", "New in pygame 1.8.1: Optional special_flags: BLEND_RGBA_ADD, BLEND_RGBA_SUB, BLEND_RGBA_MULT, BLEND_RGBA_MIN, BLEND_RGBA_MAX BLEND_RGB_ADD, BLEND_RGB_SUB, BLEND_RGB_MULT, BLEND_RGB_MIN, BLEND_RGB_MAX.", "This will return the affected Surface area."]}, {"name": "Surface.get_abs_offset", "path": "ref/surface#pygame.Surface.get_abs_offset", "type": "pygame.Surface", "text": ["Get the offset position of a child subsurface inside of its top level parent Surface. If the Surface is not a subsurface this will return (0, 0)."]}, {"name": "Surface.get_abs_parent", "path": "ref/surface#pygame.Surface.get_abs_parent", "type": "pygame.Surface", "text": ["Returns the parent Surface of a subsurface. If this is not a subsurface then this surface will be returned."]}, {"name": "Surface.get_alpha", "path": "ref/surface#pygame.Surface.get_alpha", "type": "pygame.Surface", "text": ["Return the current alpha value for the Surface."]}, {"name": "Surface.get_at", "path": "ref/surface#pygame.Surface.get_at", "type": "pygame.Surface", "text": ["Return a copy of the RGBA Color value at the given pixel. If the Surface has no per pixel alpha, then the alpha value will always be 255 (opaque). If the pixel position is outside the area of the Surface an IndexError exception will be raised.", "Getting and setting pixels one at a time is generally too slow to be used in a game or realtime situation. It is better to use methods which operate on many pixels at a time like with the blit, fill and draw methods - or by using pygame.surfarray/pygame.PixelArray.", "This function will temporarily lock and unlock the Surface as needed.", "New in pygame 1.9: Returning a Color instead of tuple. Use tuple(surf.get_at((x,y))) if you want a tuple, and not a Color. This should only matter if you want to use the color as a key in a dict."]}, {"name": "Surface.get_at_mapped", "path": "ref/surface#pygame.Surface.get_at_mapped", "type": "pygame.Surface", "text": ["Return the integer value of the given pixel. If the pixel position is outside the area of the Surface an IndexError exception will be raised.", "This method is intended for pygame unit testing. It unlikely has any use in an application.", "This function will temporarily lock and unlock the Surface as needed.", "New in pygame 1.9.2."]}, {"name": "Surface.get_bitsize", "path": "ref/surface#pygame.Surface.get_bitsize", "type": "pygame.Surface", "text": ["Returns the number of bits used to represent each pixel. This value may not exactly fill the number of bytes used per pixel. For example a 15 bit Surface still requires a full 2 bytes."]}, {"name": "Surface.get_bounding_rect", "path": "ref/surface#pygame.Surface.get_bounding_rect", "type": "pygame.Surface", "text": ["Returns the smallest rectangular region that contains all the pixels in the surface that have an alpha value greater than or equal to the minimum alpha value.", "This function will temporarily lock and unlock the Surface as needed.", "New in pygame 1.8."]}, {"name": "Surface.get_buffer", "path": "ref/surface#pygame.Surface.get_buffer", "type": "pygame.Surface", "text": ["Return a buffer object for the pixels of the Surface. The buffer can be used for direct pixel access and manipulation. Surface pixel data is represented as an unstructured block of memory, with a start address and length in bytes. The data need not be contiguous. Any gaps are included in the length, but otherwise ignored.", "This method implicitly locks the Surface. The lock will be released when the returned pygame.BufferProxy object is garbage collected.", "New in pygame 1.8."]}, {"name": "Surface.get_bytesize", "path": "ref/surface#pygame.Surface.get_bytesize", "type": "pygame.Surface", "text": ["Return the number of bytes used per pixel."]}, {"name": "Surface.get_clip", "path": "ref/surface#pygame.Surface.get_clip", "type": "pygame.Surface", "text": ["Return a rectangle of the current clipping area. The Surface will always return a valid rectangle that will never be outside the bounds of the image. If the Surface has had None set for the clipping area, the Surface will return a rectangle with the full area of the Surface."]}, {"name": "Surface.get_colorkey", "path": "ref/surface#pygame.Surface.get_colorkey", "type": "pygame.Surface", "text": ["Return the current colorkey value for the Surface. If the colorkey is not set then None is returned."]}, {"name": "Surface.get_flags", "path": "ref/surface#pygame.Surface.get_flags", "type": "pygame.Surface", "text": ["Returns a set of current Surface features. Each feature is a bit in the flags bitmask. Typical flags are HWSURFACE, RLEACCEL, SRCALPHA, and SRCCOLORKEY.", "Here is a more complete list of flags. A full list can be found in SDL_video.h", "Available for pygame.display.set_mode()", "Used internally (read-only)"]}, {"name": "Surface.get_height", "path": "ref/surface#pygame.Surface.get_height", "type": "pygame.Surface", "text": ["Return the height of the Surface in pixels."]}, {"name": "Surface.get_locked", "path": "ref/surface#pygame.Surface.get_locked", "type": "pygame.Surface", "text": ["Returns True when the Surface is locked. It doesn't matter how many times the Surface is locked."]}, {"name": "Surface.get_locks", "path": "ref/surface#pygame.Surface.get_locks", "type": "pygame.Surface", "text": ["Returns the currently existing locks for the Surface."]}, {"name": "Surface.get_losses", "path": "ref/surface#pygame.Surface.get_losses", "type": "pygame.Surface", "text": ["Return the least significant number of bits stripped from each color in a mapped integer.", "This value is not needed for normal pygame usage."]}, {"name": "Surface.get_masks", "path": "ref/surface#pygame.Surface.get_masks", "type": "pygame.Surface", "text": ["Returns the bitmasks used to isolate each color in a mapped integer.", "This value is not needed for normal pygame usage."]}, {"name": "Surface.get_offset", "path": "ref/surface#pygame.Surface.get_offset", "type": "pygame.Surface", "text": ["Get the offset position of a child subsurface inside of a parent. If the Surface is not a subsurface this will return (0, 0)."]}, {"name": "Surface.get_palette", "path": "ref/surface#pygame.Surface.get_palette", "type": "pygame.Surface", "text": ["Return a list of up to 256 color elements that represent the indexed colors used in an 8-bit Surface. The returned list is a copy of the palette, and changes will have no effect on the Surface.", "Returning a list of Color(with length 3) instances instead of tuples.", "New in pygame 1.9."]}, {"name": "Surface.get_palette_at", "path": "ref/surface#pygame.Surface.get_palette_at", "type": "pygame.Surface", "text": ["Returns the red, green, and blue color values for a single index in a Surface palette. The index should be a value from 0 to 255.", "New in pygame 1.9: Returning Color(with length 3) instance instead of a tuple."]}, {"name": "Surface.get_parent", "path": "ref/surface#pygame.Surface.get_parent", "type": "pygame.Surface", "text": ["Returns the parent Surface of a subsurface. If this is not a subsurface then None will be returned."]}, {"name": "Surface.get_pitch", "path": "ref/surface#pygame.Surface.get_pitch", "type": "pygame.Surface", "text": ["Return the number of bytes separating each row in the Surface. Surfaces in video memory are not always linearly packed. Subsurfaces will also have a larger pitch than their real width.", "This value is not needed for normal pygame usage."]}, {"name": "Surface.get_rect", "path": "ref/surface#pygame.Surface.get_rect", "type": "pygame.Surface", "text": ["Returns a new rectangle covering the entire surface. This rectangle will always start at (0, 0) with a width and height the same size as the image.", "You can pass keyword argument values to this function. These named values will be applied to the attributes of the Rect before it is returned. An example would be mysurf.get_rect(center=(100, 100)) to create a rectangle for the Surface centered at a given position."]}, {"name": "Surface.get_shifts", "path": "ref/surface#pygame.Surface.get_shifts", "type": "pygame.Surface", "text": ["Returns the pixel shifts need to convert between each color and a mapped integer.", "This value is not needed for normal pygame usage."]}, {"name": "Surface.get_size", "path": "ref/surface#pygame.Surface.get_size", "type": "pygame.Surface", "text": ["Return the width and height of the Surface in pixels."]}, {"name": "Surface.get_view", "path": "ref/surface#pygame.Surface.get_view", "type": "pygame.Surface", "text": ["Return an object which exports a surface's internal pixel buffer as a C level array struct, Python level array interface or a C level buffer interface. The pixel buffer is writeable. The new buffer protocol is supported for Python 2.6 and up in CPython. The old buffer protocol is also supported for Python 2.x. The old buffer data is in one segment for kind '0', multi-segment for other buffer view kinds.", "The kind argument is the length 1 string '0', '1', '2', '3', 'r', 'g', 'b', or 'a'. The letters are case insensitive; 'A' will work as well. The argument can be either a Unicode or byte (char) string. The default is '2'.", "'0' returns a contiguous unstructured bytes view. No surface shape information is given. A ValueError is raised if the surface's pixels are discontinuous.", "'1' returns a (surface-width * surface-height) array of continuous pixels. A ValueError is raised if the surface pixels are discontinuous.", "'2' returns a (surface-width, surface-height) array of raw pixels. The pixels are surface-bytesize-d unsigned integers. The pixel format is surface specific. The 3 byte unsigned integers of 24 bit surfaces are unlikely accepted by anything other than other pygame functions.", "'3' returns a (surface-width, surface-height, 3) array of RGB color components. Each of the red, green, and blue components are unsigned bytes. Only 24-bit and 32-bit surfaces are supported. The color components must be in either RGB or BGR order within the pixel.", "'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a (surface-width, surface-height) view of a single color component within a surface: a color plane. Color components are unsigned bytes. Both 24-bit and 32-bit surfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with SRCALPHA support 'a'.", "The surface is locked only when an exposed interface is accessed. For new buffer interface accesses, the surface is unlocked once the last buffer view is released. For array interface and old buffer interface accesses, the surface remains locked until the BufferProxy object is released.", "New in pygame 1.9.2."]}, {"name": "Surface.get_width", "path": "ref/surface#pygame.Surface.get_width", "type": "pygame.Surface", "text": ["Return the width of the Surface in pixels."]}, {"name": "Surface.lock", "path": "ref/surface#pygame.Surface.lock", "type": "pygame.Surface", "text": ["Lock the pixel data of a Surface for access. On accelerated Surfaces, the pixel data may be stored in volatile video memory or nonlinear compressed forms. When a Surface is locked the pixel memory becomes available to access by regular software. Code that reads or writes pixel values will need the Surface to be locked.", "Surfaces should not remain locked for more than necessary. A locked Surface can often not be displayed or managed by pygame.", "Not all Surfaces require locking. The mustlock() method can determine if it is actually required. There is no performance penalty for locking and unlocking a Surface that does not need it.", "All pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.", "It is safe to nest locking and unlocking calls. The surface will only be unlocked after the final lock is released."]}, {"name": "Surface.map_rgb", "path": "ref/surface#pygame.Surface.map_rgb", "type": "pygame.Surface", "text": ["Convert an RGBA color into the mapped integer value for this Surface. The returned integer will contain no more bits than the bit depth of the Surface. Mapped color values are not often used inside pygame, but can be passed to most functions that require a Surface and a color.", "See the Surface object documentation for more information about colors and pixel formats."]}, {"name": "Surface.mustlock", "path": "ref/surface#pygame.Surface.mustlock", "type": "pygame.Surface", "text": ["Returns True if the Surface is required to be locked to access pixel data. Usually pure software Surfaces do not require locking. This method is rarely needed, since it is safe and quickest to just lock all Surfaces as needed.", "All pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair."]}, {"name": "Surface.scroll", "path": "ref/surface#pygame.Surface.scroll", "type": "pygame.Surface", "text": ["Move the image by dx pixels right and dy pixels down. dx and dy may be negative for left and up scrolls respectively. Areas of the surface that are not overwritten retain their original pixel values. Scrolling is contained by the Surface clip area. It is safe to have dx and dy values that exceed the surface size.", "New in pygame 1.9."]}, {"name": "Surface.set_alpha", "path": "ref/surface#pygame.Surface.set_alpha", "type": "pygame.Surface", "text": ["Set the current alpha value for the Surface. When blitting this Surface onto a destination, the pixels will be drawn slightly transparent. The alpha value is an integer from 0 to 255, 0 is fully transparent and 255 is fully opaque. If None is passed for the alpha value, then alpha blending will be disabled, including per-pixel alpha.", "This value is different than the per pixel Surface alpha. For a surface with per pixel alpha, blanket alpha is ignored and None is returned.", "Changed in pygame 2.0: per-surface alpha can be combined with per-pixel alpha.", "The optional flags argument can be set to pygame.RLEACCEL to provide better performance on non accelerated displays. An RLEACCEL Surface will be slower to modify, but quicker to blit as a source."]}, {"name": "Surface.set_at", "path": "ref/surface#pygame.Surface.set_at", "type": "pygame.Surface", "text": ["Set the RGBA or mapped integer color value for a single pixel. If the Surface does not have per pixel alphas, the alpha value is ignored. Setting pixels outside the Surface area or outside the Surface clipping will have no effect.", "Getting and setting pixels one at a time is generally too slow to be used in a game or realtime situation.", "This function will temporarily lock and unlock the Surface as needed."]}, {"name": "Surface.set_clip", "path": "ref/surface#pygame.Surface.set_clip", "type": "pygame.Surface", "text": ["Each Surface has an active clipping area. This is a rectangle that represents the only pixels on the Surface that can be modified. If None is passed for the rectangle the full Surface will be available for changes.", "The clipping area is always restricted to the area of the Surface itself. If the clip rectangle is too large it will be shrunk to fit inside the Surface."]}, {"name": "Surface.set_colorkey", "path": "ref/surface#pygame.Surface.set_colorkey", "type": "pygame.Surface", "text": ["Set the current color key for the Surface. When blitting this Surface onto a destination, any pixels that have the same color as the colorkey will be transparent. The color can be an RGB color or a mapped color integer. If None is passed, the colorkey will be unset.", "The colorkey will be ignored if the Surface is formatted to use per pixel alpha values. The colorkey can be mixed with the full Surface alpha value.", "The optional flags argument can be set to pygame.RLEACCEL to provide better performance on non accelerated displays. An RLEACCEL Surface will be slower to modify, but quicker to blit as a source."]}, {"name": "Surface.set_masks", "path": "ref/surface#pygame.Surface.set_masks", "type": "pygame.Surface", "text": ["This is not needed for normal pygame usage.", "Note", "In SDL2, the masks are read-only and accordingly this method will raise an AttributeError if called.", "New in pygame 1.8.1."]}, {"name": "Surface.set_palette", "path": "ref/surface#pygame.Surface.set_palette", "type": "pygame.Surface", "text": ["Set the full palette for an 8-bit Surface. This will replace the colors in the existing palette. A partial palette can be passed and only the first colors in the original palette will be changed.", "This function has no effect on a Surface with more than 8-bits per pixel."]}, {"name": "Surface.set_palette_at", "path": "ref/surface#pygame.Surface.set_palette_at", "type": "pygame.Surface", "text": ["Set the palette value for a single entry in a Surface palette. The index should be a value from 0 to 255.", "This function has no effect on a Surface with more than 8-bits per pixel."]}, {"name": "Surface.set_shifts", "path": "ref/surface#pygame.Surface.set_shifts", "type": "pygame.Surface", "text": ["This is not needed for normal pygame usage.", "Note", "In SDL2, the shifts are read-only and accordingly this method will raise an AttributeError if called.", "New in pygame 1.8.1."]}, {"name": "Surface.subsurface", "path": "ref/surface#pygame.Surface.subsurface", "type": "pygame.Surface", "text": ["Returns a new Surface that shares its pixels with its new parent. The new Surface is considered a child of the original. Modifications to either Surface pixels will effect each other. Surface information like clipping area and color keys are unique to each Surface.", "The new Surface will inherit the palette, color key, and alpha settings from its parent.", "It is possible to have any number of subsurfaces and subsubsurfaces on the parent. It is also possible to subsurface the display Surface if the display mode is not hardware accelerated.", "See get_offset() and get_parent() to learn more about the state of a subsurface.", "A subsurface will have the same class as the parent surface."]}, {"name": "Surface.unlock", "path": "ref/surface#pygame.Surface.unlock", "type": "pygame.Surface", "text": ["Unlock the Surface pixel data after it has been locked. The unlocked Surface can once again be drawn and managed by pygame. See the lock() documentation for more details.", "All pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.", "It is safe to nest locking and unlocking calls. The surface will only be unlocked after the final lock is released."]}, {"name": "Surface.unmap_rgb", "path": "ref/surface#pygame.Surface.unmap_rgb", "type": "pygame.Surface", "text": ["Convert an mapped integer color into the RGB color components for this Surface. Mapped color values are not often used inside pygame, but can be passed to most functions that require a Surface and a color.", "See the Surface object documentation for more information about colors and pixel formats."]}, {"name": "surfarray", "path": "ref/surfarray", "type": "pygame.surfarray", "text": ["Functions to convert pixel data between pygame Surfaces and arrays. This module will only be functional when pygame can use the external NumPy package.", "Every pixel is stored as a single integer value to represent the red, green, and blue colors. The 8-bit images use a value that looks into a colormap. Pixels with higher depth use a bit packing process to place three or four values into a single number.", "The arrays are indexed by the X axis first, followed by the Y axis. Arrays that treat the pixels as a single integer are referred to as 2D arrays. This module can also separate the red, green, and blue color values into separate indices. These types of arrays are referred to as 3D arrays, and the last index is 0 for red, 1 for green, and 2 for blue.", "Copy the mapped (raw) pixels from a Surface into a 2D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.", "This function will temporarily lock the Surface as pixels are copied (see the pygame.Surface.lock() - lock the Surface memory for pixel access method).", "Create a new 2D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "Pixels from a 24-bit Surface cannot be referenced, but all other Surface bit depths can.", "The Surface this references will remain locked for the lifetime of the array (see the pygame.Surface.lock() - lock the Surface memory for pixel access method).", "Copy the pixels from a Surface into a 3D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.", "This function will temporarily lock the Surface as pixels are copied (see the pygame.Surface.lock() - lock the Surface memory for pixel access method).", "Create a new 3D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This will only work on Surfaces that have 24-bit or 32-bit formats. Lower pixel formats cannot be referenced.", "The Surface this references will remain locked for the lifetime of the array (see the pygame.Surface.lock() - lock the Surface memory for pixel access method).", "Copy the pixel alpha values (degree of transparency) from a Surface into a 2D array. This will work for any type of Surface format. Surfaces without a pixel alpha will return an array with all opaque values.", "This function will temporarily lock the Surface as pixels are copied (see the pygame.Surface.lock() - lock the Surface memory for pixel access method).", "Create a new 2D array that directly references the alpha values (degree of transparency) in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 32-bit Surfaces with a per-pixel alpha value.", "The Surface this array references will remain locked for the lifetime of the array.", "Create a new 2D array that directly references the red values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 24-bit or 32-bit Surfaces.", "The Surface this array references will remain locked for the lifetime of the array.", "Create a new 2D array that directly references the green values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 24-bit or 32-bit Surfaces.", "The Surface this array references will remain locked for the lifetime of the array.", "Create a new 2D array that directly references the blue values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 24-bit or 32-bit Surfaces.", "The Surface this array references will remain locked for the lifetime of the array.", "Create a new array with the colorkey transparency value from each pixel. If the pixel matches the colorkey it will be fully transparent; otherwise it will be fully opaque.", "This will work on any type of Surface format. If the image has no colorkey a solid opaque array will be returned.", "This function will temporarily lock the Surface as pixels are copied.", "Create a new Surface that best resembles the data and format on the array. The array can be 2D or 3D with any sized integer values. Function make_surface uses the array struct interface to acquire array properties, so is not limited to just NumPy arrays. See pygame.pixelcopy.", "New in pygame 1.9.2: array struct interface support.", "Directly copy values from an array into a Surface. This is faster than converting the array into a Surface and blitting. The array must be the same dimensions as the Surface and will completely replace all pixel values. Only integer, ASCII character and record arrays are accepted.", "This function will temporarily lock the Surface as the new values are copied.", "Convert a 3D array into a 2D array. This will use the given Surface format to control the conversion. Palette surface formats are supported for NumPy arrays.", "DEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is 'numpy'. Other values will raise ValueError.", "DEPRECATED: Returns the currently active array type. This will be a value of the get_arraytypes() tuple and indicates which type of array module is used for the array creation.", "New in pygame 1.8.", "DEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the pygame.surfarray.use_arraytype() () method. If no supported array system could be found, None will be returned.", "New in pygame 1.8."]}, {"name": "surfarray.array2d", "path": "ref/surfarray#pygame.surfarray.array2d", "type": "pygame.surfarray", "text": ["Copy the mapped (raw) pixels from a Surface into a 2D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.", "This function will temporarily lock the Surface as pixels are copied (see the pygame.Surface.lock() - lock the Surface memory for pixel access method)."]}, {"name": "surfarray.array3d", "path": "ref/surfarray#pygame.surfarray.array3d", "type": "pygame.surfarray", "text": ["Copy the pixels from a Surface into a 3D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.", "This function will temporarily lock the Surface as pixels are copied (see the pygame.Surface.lock() - lock the Surface memory for pixel access method)."]}, {"name": "surfarray.array_alpha", "path": "ref/surfarray#pygame.surfarray.array_alpha", "type": "pygame.surfarray", "text": ["Copy the pixel alpha values (degree of transparency) from a Surface into a 2D array. This will work for any type of Surface format. Surfaces without a pixel alpha will return an array with all opaque values.", "This function will temporarily lock the Surface as pixels are copied (see the pygame.Surface.lock() - lock the Surface memory for pixel access method)."]}, {"name": "surfarray.array_colorkey", "path": "ref/surfarray#pygame.surfarray.array_colorkey", "type": "pygame.surfarray", "text": ["Create a new array with the colorkey transparency value from each pixel. If the pixel matches the colorkey it will be fully transparent; otherwise it will be fully opaque.", "This will work on any type of Surface format. If the image has no colorkey a solid opaque array will be returned.", "This function will temporarily lock the Surface as pixels are copied."]}, {"name": "surfarray.blit_array", "path": "ref/surfarray#pygame.surfarray.blit_array", "type": "pygame.surfarray", "text": ["Directly copy values from an array into a Surface. This is faster than converting the array into a Surface and blitting. The array must be the same dimensions as the Surface and will completely replace all pixel values. Only integer, ASCII character and record arrays are accepted.", "This function will temporarily lock the Surface as the new values are copied."]}, {"name": "surfarray.get_arraytype", "path": "ref/surfarray#pygame.surfarray.get_arraytype", "type": "pygame.surfarray", "text": ["DEPRECATED: Returns the currently active array type. This will be a value of the get_arraytypes() tuple and indicates which type of array module is used for the array creation.", "New in pygame 1.8."]}, {"name": "surfarray.get_arraytypes", "path": "ref/surfarray#pygame.surfarray.get_arraytypes", "type": "pygame.surfarray", "text": ["DEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the pygame.surfarray.use_arraytype() () method. If no supported array system could be found, None will be returned.", "New in pygame 1.8."]}, {"name": "surfarray.make_surface", "path": "ref/surfarray#pygame.surfarray.make_surface", "type": "pygame.surfarray", "text": ["Create a new Surface that best resembles the data and format on the array. The array can be 2D or 3D with any sized integer values. Function make_surface uses the array struct interface to acquire array properties, so is not limited to just NumPy arrays. See pygame.pixelcopy.", "New in pygame 1.9.2: array struct interface support."]}, {"name": "surfarray.map_array", "path": "ref/surfarray#pygame.surfarray.map_array", "type": "pygame.surfarray", "text": ["Convert a 3D array into a 2D array. This will use the given Surface format to control the conversion. Palette surface formats are supported for NumPy arrays."]}, {"name": "surfarray.pixels2d", "path": "ref/surfarray#pygame.surfarray.pixels2d", "type": "pygame.surfarray", "text": ["Create a new 2D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "Pixels from a 24-bit Surface cannot be referenced, but all other Surface bit depths can.", "The Surface this references will remain locked for the lifetime of the array (see the pygame.Surface.lock() - lock the Surface memory for pixel access method)."]}, {"name": "surfarray.pixels3d", "path": "ref/surfarray#pygame.surfarray.pixels3d", "type": "pygame.surfarray", "text": ["Create a new 3D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This will only work on Surfaces that have 24-bit or 32-bit formats. Lower pixel formats cannot be referenced.", "The Surface this references will remain locked for the lifetime of the array (see the pygame.Surface.lock() - lock the Surface memory for pixel access method)."]}, {"name": "surfarray.pixels_alpha", "path": "ref/surfarray#pygame.surfarray.pixels_alpha", "type": "pygame.surfarray", "text": ["Create a new 2D array that directly references the alpha values (degree of transparency) in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 32-bit Surfaces with a per-pixel alpha value.", "The Surface this array references will remain locked for the lifetime of the array."]}, {"name": "surfarray.pixels_blue", "path": "ref/surfarray#pygame.surfarray.pixels_blue", "type": "pygame.surfarray", "text": ["Create a new 2D array that directly references the blue values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 24-bit or 32-bit Surfaces.", "The Surface this array references will remain locked for the lifetime of the array."]}, {"name": "surfarray.pixels_green", "path": "ref/surfarray#pygame.surfarray.pixels_green", "type": "pygame.surfarray", "text": ["Create a new 2D array that directly references the green values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 24-bit or 32-bit Surfaces.", "The Surface this array references will remain locked for the lifetime of the array."]}, {"name": "surfarray.pixels_red", "path": "ref/surfarray#pygame.surfarray.pixels_red", "type": "pygame.surfarray", "text": ["Create a new 2D array that directly references the red values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.", "This can only work on 24-bit or 32-bit Surfaces.", "The Surface this array references will remain locked for the lifetime of the array."]}, {"name": "surfarray.use_arraytype", "path": "ref/surfarray#pygame.surfarray.use_arraytype", "type": "pygame.surfarray", "text": ["DEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is 'numpy'. Other values will raise ValueError."]}, {"name": "tests", "path": "ref/tests", "type": "pygame.tests", "text": ["A quick way to run the test suite package from the command line is to import the go submodule with the Python -m option:", "Command line option --help displays a usage message. Available options correspond to the pygame.tests.run() arguments.", "The xxxx_test submodules of the tests package are unit test suites for individual parts of pygame. Each can also be run as a main program. This is useful if the test, such as cdrom_test, is interactive.", "For pygame development the test suite can be run from a pygame distribution root directory. Program run_tests.py is provided for convenience, though test/go.py can be run directly.", "Module level tags control which modules are included in a unit test run. Tags are assigned to a unit test module with a corresponding <name>_tags.py module. The tags module has the global __tags__, a list of tag names. For example, cdrom_test.py has a tag file cdrom_tags.py containing a tags list that has the 'interactive' string. The 'interactive' tag indicates cdrom_test.py expects user input. It is excluded from a run_tests.py or pygame.tests.go run. Two other tags that are excluded are 'ignore' and 'subprocess_ignore'. These two tags indicate unit tests that will not run on a particular platform, or for which no corresponding pygame module is available. The test runner will list each excluded module along with the tag responsible.", "Positional arguments (optional):", "Keyword arguments:", "Return value:", "By default individual test modules are run in separate subprocesses. This recreates normal pygame usage where pygame.init() and pygame.quit() are called only once per program execution, and avoids unfortunate interactions between test modules. Also, a time limit is placed on test execution, so frozen tests are killed when there time allotment expired. Use the single process option if threading is not working properly or if tests are taking too long. It is not guaranteed that all tests will pass in single process mode.", "Tests are run in a randomized order if the randomize argument is True or a seed argument is provided. If no seed integer is provided then the system time is used.", "Individual test modules may have a __tags__ attribute, a list of tag strings used to selectively omit modules from a run. By default only 'interactive' modules such as cdrom_test are ignored. An interactive module must be run from the console as a Python program.", "This function can only be called once per Python session. It is not reentrant."]}, {"name": "tests.run", "path": "ref/tests#pygame.tests.run", "type": "pygame.tests", "text": ["Positional arguments (optional):", "Keyword arguments:", "Return value:", "By default individual test modules are run in separate subprocesses. This recreates normal pygame usage where pygame.init() and pygame.quit() are called only once per program execution, and avoids unfortunate interactions between test modules. Also, a time limit is placed on test execution, so frozen tests are killed when there time allotment expired. Use the single process option if threading is not working properly or if tests are taking too long. It is not guaranteed that all tests will pass in single process mode.", "Tests are run in a randomized order if the randomize argument is True or a seed argument is provided. If no seed integer is provided then the system time is used.", "Individual test modules may have a __tags__ attribute, a list of tag strings used to selectively omit modules from a run. By default only 'interactive' modules such as cdrom_test are ignored. An interactive module must be run from the console as a Python program.", "This function can only be called once per Python session. It is not reentrant."]}, {"name": "time", "path": "ref/time", "type": "pygame.time", "text": ["Times in pygame are represented in milliseconds (1/1000 seconds). Most platforms have a limited time resolution of around 10 milliseconds. This resolution, in milliseconds, is given in the TIMER_RESOLUTION constant.", "Return the number of milliseconds since pygame.init() was called. Before pygame is initialized this will always be 0.", "Will pause for a given number of milliseconds. This function sleeps the process to share the processor with other programs. A program that waits for even a few milliseconds will consume very little processor time. It is slightly less accurate than the pygame.time.delay() function.", "This returns the actual number of milliseconds used.", "Will pause for a given number of milliseconds. This function will use the processor (rather than sleeping) in order to make the delay more accurate than pygame.time.wait().", "This returns the actual number of milliseconds used.", "Set an event type to appear on the event queue every given number of milliseconds. The first event will not appear until the amount of time has passed.", "Every event type can have a separate timer attached to it. It is best to use the value between pygame.USEREVENT and pygame.NUMEVENTS.", "To disable the timer for an event, set the milliseconds argument to 0.", "If the once argument is True, then only send the timer once.", "New in pygame 2.0.0.dev3: once argument added.", "Creates a new Clock object that can be used to track an amount of time. The clock also provides several functions to help control a game's framerate.", "This method should be called once per frame. It will compute how many milliseconds have passed since the previous call.", "If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling Clock.tick(40) once per frame, the program will never run at more than 40 frames per second.", "Note that this function uses SDL_Delay function which is not accurate on every platform, but does not use much CPU. Use tick_busy_loop if you want an accurate timer, and don't mind chewing CPU.", "This method should be called once per frame. It will compute how many milliseconds have passed since the previous call.", "If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling Clock.tick_busy_loop(40) once per frame, the program will never run at more than 40 frames per second.", "Note that this function uses pygame.time.delay(), which uses lots of CPU in a busy loop to make sure that timing is more accurate.", "New in pygame 1.8.", "The number of milliseconds that passed between the previous two calls to Clock.tick().", "Similar to Clock.get_time(), but does not include any time used while Clock.tick() was delaying to limit the framerate.", "Compute your game's framerate (in frames per second). It is computed by averaging the last ten calls to Clock.tick()."]}, {"name": "time.Clock", "path": "ref/time#pygame.time.Clock", "type": "pygame.time", "text": ["Creates a new Clock object that can be used to track an amount of time. The clock also provides several functions to help control a game's framerate.", "This method should be called once per frame. It will compute how many milliseconds have passed since the previous call.", "If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling Clock.tick(40) once per frame, the program will never run at more than 40 frames per second.", "Note that this function uses SDL_Delay function which is not accurate on every platform, but does not use much CPU. Use tick_busy_loop if you want an accurate timer, and don't mind chewing CPU.", "This method should be called once per frame. It will compute how many milliseconds have passed since the previous call.", "If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling Clock.tick_busy_loop(40) once per frame, the program will never run at more than 40 frames per second.", "Note that this function uses pygame.time.delay(), which uses lots of CPU in a busy loop to make sure that timing is more accurate.", "New in pygame 1.8.", "The number of milliseconds that passed between the previous two calls to Clock.tick().", "Similar to Clock.get_time(), but does not include any time used while Clock.tick() was delaying to limit the framerate.", "Compute your game's framerate (in frames per second). It is computed by averaging the last ten calls to Clock.tick()."]}, {"name": "time.Clock.get_fps", "path": "ref/time#pygame.time.Clock.get_fps", "type": "pygame.time", "text": ["Compute your game's framerate (in frames per second). It is computed by averaging the last ten calls to Clock.tick()."]}, {"name": "time.Clock.get_rawtime", "path": "ref/time#pygame.time.Clock.get_rawtime", "type": "pygame.time", "text": ["Similar to Clock.get_time(), but does not include any time used while Clock.tick() was delaying to limit the framerate."]}, {"name": "time.Clock.get_time", "path": "ref/time#pygame.time.Clock.get_time", "type": "pygame.time", "text": ["The number of milliseconds that passed between the previous two calls to Clock.tick()."]}, {"name": "time.Clock.tick", "path": "ref/time#pygame.time.Clock.tick", "type": "pygame.time", "text": ["This method should be called once per frame. It will compute how many milliseconds have passed since the previous call.", "If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling Clock.tick(40) once per frame, the program will never run at more than 40 frames per second.", "Note that this function uses SDL_Delay function which is not accurate on every platform, but does not use much CPU. Use tick_busy_loop if you want an accurate timer, and don't mind chewing CPU."]}, {"name": "time.Clock.tick_busy_loop", "path": "ref/time#pygame.time.Clock.tick_busy_loop", "type": "pygame.time", "text": ["This method should be called once per frame. It will compute how many milliseconds have passed since the previous call.", "If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling Clock.tick_busy_loop(40) once per frame, the program will never run at more than 40 frames per second.", "Note that this function uses pygame.time.delay(), which uses lots of CPU in a busy loop to make sure that timing is more accurate.", "New in pygame 1.8."]}, {"name": "time.delay", "path": "ref/time#pygame.time.delay", "type": "pygame.time", "text": ["Will pause for a given number of milliseconds. This function will use the processor (rather than sleeping) in order to make the delay more accurate than pygame.time.wait().", "This returns the actual number of milliseconds used."]}, {"name": "time.get_ticks", "path": "ref/time#pygame.time.get_ticks", "type": "pygame.time", "text": ["Return the number of milliseconds since pygame.init() was called. Before pygame is initialized this will always be 0."]}, {"name": "time.set_timer", "path": "ref/time#pygame.time.set_timer", "type": "pygame.time", "text": ["Set an event type to appear on the event queue every given number of milliseconds. The first event will not appear until the amount of time has passed.", "Every event type can have a separate timer attached to it. It is best to use the value between pygame.USEREVENT and pygame.NUMEVENTS.", "To disable the timer for an event, set the milliseconds argument to 0.", "If the once argument is True, then only send the timer once.", "New in pygame 2.0.0.dev3: once argument added."]}, {"name": "time.wait", "path": "ref/time#pygame.time.wait", "type": "pygame.time", "text": ["Will pause for a given number of milliseconds. This function sleeps the process to share the processor with other programs. A program that waits for even a few milliseconds will consume very little processor time. It is slightly less accurate than the pygame.time.delay() function.", "This returns the actual number of milliseconds used."]}, {"name": "transform", "path": "ref/transform", "type": "pygame.transform", "text": ["A Surface transform is an operation that moves or resizes the pixels. All these functions take a Surface to operate on and return a new Surface with the results.", "Some of the transforms are considered destructive. These means every time they are performed they lose pixel data. Common examples of this are resizing and rotating. For this reason, it is better to re-transform the original surface than to keep transforming an image multiple times. (For example, suppose you are animating a bouncing spring which expands and contracts. If you applied the size changes incrementally to the previous images, you would lose detail. Instead, always begin with the original image and scale to the desired size.)", "This can flip a Surface either vertically, horizontally, or both. Flipping a Surface is non-destructive and returns a new Surface with the same dimensions.", "Resizes the Surface to a new resolution. This is a fast scale operation that does not sample the results.", "An optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be the same size as the (width, height) passed in. Also the destination surface must be the same format.", "Unfiltered counterclockwise rotation. The angle argument represents degrees and can be any floating point value. Negative angle amounts will rotate clockwise.", "Unless rotating by 90 degree increments, the image will be padded larger to hold the new size. If the image has pixel alphas, the padded area will be transparent. Otherwise pygame will pick a color that matches the Surface colorkey or the topleft pixel value.", "This is a combined scale and rotation transform. The resulting Surface will be a filtered 32-bit Surface. The scale argument is a floating point value that will be multiplied by the current resolution. The angle argument is a floating point value that represents the counterclockwise degrees to rotate. A negative rotation angle will rotate clockwise.", "This will return a new image that is double the size of the original. It uses the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap graphics.", "This really only has an effect on simple images with solid colors. On photographic and antialiased images it will look like a regular unfiltered scale.", "An optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be twice the size of the source surface passed in. Also the destination surface must be the same format.", "Uses one of two different algorithms for scaling each dimension of the input surface as required. For shrinkage, the output pixels are area averages of the colors they cover. For expansion, a bilinear filter is used. For the x86-64 and i686 architectures, optimized MMX routines are included and will run much faster than other machine types. The size is a 2 number sequence for (width, height). This function only works for 24-bit or 32-bit surfaces. An exception will be thrown if the input surface bit depth is less than 24.", "New in pygame 1.8.", "Shows whether or not smoothscale is using MMX or SSE acceleration. If no acceleration is available then \"GENERIC\" is returned. For a x86 processor the level of acceleration to use is determined at runtime.", "This function is provided for pygame testing and debugging.", "Sets smoothscale acceleration. Takes a string argument. A value of 'GENERIC' turns off acceleration. 'MMX' uses MMX instructions only. 'SSE' allows SSE extensions as well. A value error is raised if type is not recognized or not supported by the current processor.", "This function is provided for pygame testing and debugging. If smoothscale causes an invalid instruction error then it is a pygame/SDL bug that should be reported. Use this function as a temporary fix only.", "Extracts a portion of an image. All vertical and horizontal pixels surrounding the given rectangle area are removed. The corner areas (diagonal to the rect) are then brought together. (The original image is not altered by this operation.)", "NOTE: If you want a \"crop\" that returns the part of an image within a rect, you can blit with a rect to a new surface or copy a subsurface.", "Finds the edges in a surface using the laplacian algorithm.", "New in pygame 1.8.", "Takes a sequence of surfaces and returns a surface with average colors from each of the surfaces.", "palette_colors - if true we average the colors in palette, otherwise we average the pixel values. This is useful if the surface is actually greyscale colors, and not palette colors.", "Note, this function currently does not handle palette using surfaces correctly.", "New in pygame 1.8.", "New in pygame 1.9: palette_colors argument", "Finds the average color of a Surface or a region of a surface specified by a Rect, and returns it as a Color.", "This versatile function can be used for find colors in a 'surf' close to a 'search_color' or close to colors in a separate 'search_surf'.", "It can also be used to transfer pixels into a 'dest_surf' that match or don't match.", "By default it sets pixels in the 'dest_surf' where all of the pixels NOT within the threshold are changed to set_color. If inverse_set is optionally set to True, the pixels that ARE within the threshold are changed to set_color.", "If the optional 'search_surf' surface is given, it is used to threshold against rather than the specified 'set_color'. That is, it will find each pixel in the 'surf' that is within the 'threshold' of the pixel at the same coordinates of the 'search_surf'.", "int", "The number of pixels that are within the 'threshold' in 'surf' compared to either 'search_color' or search_surf.", "See the threshold tests for a full of examples: https://github.com/pygame/pygame/blob/master/test/transform_test.py", "New in pygame 1.8.", "Changed in pygame 1.9.4: Fixed a lot of bugs and added keyword arguments. Test your code."]}, {"name": "transform.average_color", "path": "ref/transform#pygame.transform.average_color", "type": "pygame.transform", "text": ["Finds the average color of a Surface or a region of a surface specified by a Rect, and returns it as a Color."]}, {"name": "transform.average_surfaces", "path": "ref/transform#pygame.transform.average_surfaces", "type": "pygame.transform", "text": ["Takes a sequence of surfaces and returns a surface with average colors from each of the surfaces.", "palette_colors - if true we average the colors in palette, otherwise we average the pixel values. This is useful if the surface is actually greyscale colors, and not palette colors.", "Note, this function currently does not handle palette using surfaces correctly.", "New in pygame 1.8.", "New in pygame 1.9: palette_colors argument"]}, {"name": "transform.chop", "path": "ref/transform#pygame.transform.chop", "type": "pygame.transform", "text": ["Extracts a portion of an image. All vertical and horizontal pixels surrounding the given rectangle area are removed. The corner areas (diagonal to the rect) are then brought together. (The original image is not altered by this operation.)", "NOTE: If you want a \"crop\" that returns the part of an image within a rect, you can blit with a rect to a new surface or copy a subsurface."]}, {"name": "transform.flip", "path": "ref/transform#pygame.transform.flip", "type": "pygame.transform", "text": ["This can flip a Surface either vertically, horizontally, or both. Flipping a Surface is non-destructive and returns a new Surface with the same dimensions."]}, {"name": "transform.get_smoothscale_backend", "path": "ref/transform#pygame.transform.get_smoothscale_backend", "type": "pygame.transform", "text": ["Shows whether or not smoothscale is using MMX or SSE acceleration. If no acceleration is available then \"GENERIC\" is returned. For a x86 processor the level of acceleration to use is determined at runtime.", "This function is provided for pygame testing and debugging."]}, {"name": "transform.laplacian", "path": "ref/transform#pygame.transform.laplacian", "type": "pygame.transform", "text": ["Finds the edges in a surface using the laplacian algorithm.", "New in pygame 1.8."]}, {"name": "transform.rotate", "path": "ref/transform#pygame.transform.rotate", "type": "pygame.transform", "text": ["Unfiltered counterclockwise rotation. The angle argument represents degrees and can be any floating point value. Negative angle amounts will rotate clockwise.", "Unless rotating by 90 degree increments, the image will be padded larger to hold the new size. If the image has pixel alphas, the padded area will be transparent. Otherwise pygame will pick a color that matches the Surface colorkey or the topleft pixel value."]}, {"name": "transform.rotozoom", "path": "ref/transform#pygame.transform.rotozoom", "type": "pygame.transform", "text": ["This is a combined scale and rotation transform. The resulting Surface will be a filtered 32-bit Surface. The scale argument is a floating point value that will be multiplied by the current resolution. The angle argument is a floating point value that represents the counterclockwise degrees to rotate. A negative rotation angle will rotate clockwise."]}, {"name": "transform.scale", "path": "ref/transform#pygame.transform.scale", "type": "pygame.transform", "text": ["Resizes the Surface to a new resolution. This is a fast scale operation that does not sample the results.", "An optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be the same size as the (width, height) passed in. Also the destination surface must be the same format."]}, {"name": "transform.scale2x", "path": "ref/transform#pygame.transform.scale2x", "type": "pygame.transform", "text": ["This will return a new image that is double the size of the original. It uses the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap graphics.", "This really only has an effect on simple images with solid colors. On photographic and antialiased images it will look like a regular unfiltered scale.", "An optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be twice the size of the source surface passed in. Also the destination surface must be the same format."]}, {"name": "transform.set_smoothscale_backend", "path": "ref/transform#pygame.transform.set_smoothscale_backend", "type": "pygame.transform", "text": ["Sets smoothscale acceleration. Takes a string argument. A value of 'GENERIC' turns off acceleration. 'MMX' uses MMX instructions only. 'SSE' allows SSE extensions as well. A value error is raised if type is not recognized or not supported by the current processor.", "This function is provided for pygame testing and debugging. If smoothscale causes an invalid instruction error then it is a pygame/SDL bug that should be reported. Use this function as a temporary fix only."]}, {"name": "transform.smoothscale", "path": "ref/transform#pygame.transform.smoothscale", "type": "pygame.transform", "text": ["Uses one of two different algorithms for scaling each dimension of the input surface as required. For shrinkage, the output pixels are area averages of the colors they cover. For expansion, a bilinear filter is used. For the x86-64 and i686 architectures, optimized MMX routines are included and will run much faster than other machine types. The size is a 2 number sequence for (width, height). This function only works for 24-bit or 32-bit surfaces. An exception will be thrown if the input surface bit depth is less than 24.", "New in pygame 1.8."]}, {"name": "transform.threshold", "path": "ref/transform#pygame.transform.threshold", "type": "pygame.transform", "text": ["This versatile function can be used for find colors in a 'surf' close to a 'search_color' or close to colors in a separate 'search_surf'.", "It can also be used to transfer pixels into a 'dest_surf' that match or don't match.", "By default it sets pixels in the 'dest_surf' where all of the pixels NOT within the threshold are changed to set_color. If inverse_set is optionally set to True, the pixels that ARE within the threshold are changed to set_color.", "If the optional 'search_surf' surface is given, it is used to threshold against rather than the specified 'set_color'. That is, it will find each pixel in the 'surf' that is within the 'threshold' of the pixel at the same coordinates of the 'search_surf'.", "int", "The number of pixels that are within the 'threshold' in 'surf' compared to either 'search_color' or search_surf.", "See the threshold tests for a full of examples: https://github.com/pygame/pygame/blob/master/test/transform_test.py", "New in pygame 1.8.", "Changed in pygame 1.9.4: Fixed a lot of bugs and added keyword arguments. Test your code."]}, {"name": "version.rev", "path": "ref/pygame#pygame.version.rev", "type": "pygame", "text": ["The Mercurial node identifier of the repository checkout from which this package was built. If the identifier ends with a plus sign '+' then the package contains uncommitted changes. Please include this revision number in bug reports, especially for non-release pygame builds.", "Important note: pygame development has moved to github, this variable is obsolete now. As soon as development shifted to github, this variable started returning an empty string \"\". It has always been returning an empty string since v1.9.5.", "Changed in pygame 1.9.5: Always returns an empty string \"\"."]}, {"name": "version.SDL", "path": "ref/pygame#pygame.version.SDL", "type": "pygame", "text": ["This is the SDL library version represented as an extended tuple. It also has attributes 'major', 'minor' & 'patch' that can be accessed like this:", "printing the whole thing returns a string like this:", "New in pygame 2.0.0."]}, {"name": "version.ver", "path": "ref/pygame#pygame.version.ver", "type": "pygame", "text": ["This is the version represented as a string. It can contain a micro release number as well, e.g. '1.5.2'"]}, {"name": "version.vernum", "path": "ref/pygame#pygame.version.vernum", "type": "pygame", "text": ["This version information can easily be compared with other version numbers of the same format. An example of checking pygame version numbers would look like this:", "New in pygame 1.9.6: Attributes major, minor, and patch.", "Changed in pygame 1.9.6: str(pygame.version.vernum) returns a string like \"2.0.0\" instead of \"(2, 0, 0)\".", "Changed in pygame 1.9.6: repr(pygame.version.vernum) returns a string like \"PygameVersion(major=2, minor=0, patch=0)\" instead of \"(2, 0, 0)\"."]}]