[{"name": "1.1. Linear Models", "path": "modules/linear_model", "type": "Guide", "text": "\nThe following are a set of methods intended for regression in which the target\nvalue is expected to be a linear combination of the features. In mathematical\nnotation, if \\\\(\\hat{y}\\\\) is the predicted value.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.2. Linear and Quadratic Discriminant Analysis", "path": "modules/lda_qda", "type": "Guide", "text": "\nLinear Discriminant Analysis (`LinearDiscriminantAnalysis`) and Quadratic\nDiscriminant Analysis (`QuadraticDiscriminantAnalysis`) are two classic\nclassifiers, with, as their names suggest, a linear and a quadratic decision\nsurface, respectively.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.3. Kernel ridge regression", "path": "modules/kernel_ridge", "type": "Guide", "text": "\nKernel ridge regression (KRR) [M2012] combines Ridge regression and\nclassification (linear least squares with l2-norm regularization) with the\nkernel trick. It thus learns a linear function in the space induced by the\nrespective kernel and the data. For non-linear kernels, this corresponds to a\nnon-linear function in the original space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.4. Support Vector Machines", "path": "modules/svm", "type": "Guide", "text": "\nSupport vector machines (SVMs) are a set of supervised learning methods used\nfor classification, regression and outliers detection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.5. Stochastic Gradient Descent", "path": "modules/sgd", "type": "Guide", "text": "\nStochastic Gradient Descent (SGD) is a simple yet very efficient approach to\nfitting linear classifiers and regressors under convex loss functions such as\n(linear) Support Vector Machines and Logistic Regression. Even though SGD has\nbeen around in the machine learning community for a long time, it has received\na considerable amount of attention just recently in the context of large-scale\nlearning.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.6. Nearest Neighbors", "path": "modules/neighbors", "type": "Guide", "text": "\n`sklearn.neighbors` provides functionality for unsupervised and supervised\nneighbors-based learning methods. Unsupervised nearest neighbors is the\nfoundation of many other learning methods, notably manifold learning and\nspectral clustering. Supervised neighbors-based learning comes in two flavors:\nclassification for data with discrete labels, and regression for data with\ncontinuous labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.7. Gaussian Processes", "path": "modules/gaussian_process", "type": "Guide", "text": "\nGaussian Processes (GP) are a generic supervised learning method designed to\nsolve regression and probabilistic classification problems.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.8. Cross decomposition", "path": "modules/cross_decomposition", "type": "Guide", "text": "\nThe cross decomposition module contains supervised estimators for\ndimensionality reduction and regression, belonging to the \u201cPartial Least\nSquares\u201d family.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.9. Naive Bayes", "path": "modules/naive_bayes", "type": "Guide", "text": "\nNaive Bayes methods are a set of supervised learning algorithms based on\napplying Bayes\u2019 theorem with the \u201cnaive\u201d assumption of conditional\nindependence between every pair of features given the value of the class\nvariable. Bayes\u2019 theorem states the following relationship, given class\nvariable \\\\(y\\\\) and dependent feature vector \\\\(x_1\\\\) through \\\\(x_n\\\\), :\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.10. Decision Trees", "path": "modules/tree", "type": "Guide", "text": "\nDecision Trees (DTs) are a non-parametric supervised learning method used for\nclassification and regression. The goal is to create a model that predicts the\nvalue of a target variable by learning simple decision rules inferred from the\ndata features. A tree can be seen as a piecewise constant approximation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.11. Ensemble methods", "path": "modules/ensemble", "type": "Guide", "text": "\nThe goal of ensemble methods is to combine the predictions of several base\nestimators built with a given learning algorithm in order to improve\ngeneralizability / robustness over a single estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.12. Multiclass and multioutput algorithms", "path": "modules/multiclass", "type": "Guide", "text": "\nThis section of the user guide covers functionality related to multi-learning\nproblems, including multiclass, multilabel, and multioutput classification and\nregression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.13. Feature selection", "path": "modules/feature_selection", "type": "Guide", "text": "\nThe classes in the `sklearn.feature_selection` module can be used for feature\nselection/dimensionality reduction on sample sets, either to improve\nestimators\u2019 accuracy scores or to boost their performance on very high-\ndimensional datasets.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.14. Semi-supervised learning", "path": "modules/semi_supervised", "type": "Guide", "text": "\nSemi-supervised learning is a situation in which in your training data some of\nthe samples are not labeled. The semi-supervised estimators in\n`sklearn.semi_supervised` are able to make use of this additional unlabeled\ndata to better capture the shape of the underlying data distribution and\ngeneralize better to new samples. These algorithms can perform well when we\nhave a very small amount of labeled points and a large amount of unlabeled\npoints.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.15. Isotonic regression", "path": "modules/isotonic", "type": "Guide", "text": "\nThe class `IsotonicRegression` fits a non-decreasing real function to\n1-dimensional data. It solves the following problem:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.16. Probability calibration", "path": "modules/calibration", "type": "Guide", "text": "\nWhen performing classification you often want not only to predict the class\nlabel, but also obtain a probability of the respective label. This probability\ngives you some kind of confidence on the prediction. Some models can give you\npoor estimates of the class probabilities and some even do not support\nprobability prediction (e.g., some instances of `SGDClassifier`). The\ncalibration module allows you to better calibrate the probabilities of a given\nmodel, or to add support for probability prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "1.17. Neural network models", "path": "modules/neural_networks_supervised", "type": "Guide", "text": "\nWarning\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "2.1. Gaussian mixture models", "path": "modules/mixture", "type": "Guide", "text": "\n`sklearn.mixture` is a package which enables one to learn Gaussian Mixture\nModels (diagonal, spherical, tied and full covariance matrices supported),\nsample them, and estimate them from data. Facilities to help determine the\nappropriate number of components are also provided.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "2.2. Manifold learning", "path": "modules/manifold", "type": "Guide", "text": "\nManifold learning is an approach to non-linear dimensionality reduction.\nAlgorithms for this task are based on the idea that the dimensionality of many\ndata sets is only artificially high.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "2.3. Clustering", "path": "modules/clustering", "type": "Guide", "text": "\nClustering of unlabeled data can be performed with the module\n`sklearn.cluster`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "2.4. Biclustering", "path": "modules/biclustering", "type": "Guide", "text": "\nBiclustering can be performed with the module `sklearn.cluster.bicluster`.\nBiclustering algorithms simultaneously cluster rows and columns of a data\nmatrix. These clusters of rows and columns are known as biclusters. Each\ndetermines a submatrix of the original data matrix with some desired\nproperties.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "2.5. Decomposing signals in components", "path": "modules/decomposition", "type": "Guide", "text": "\nPCA is used to decompose a multivariate dataset in a set of successive\northogonal components that explain a maximum amount of the variance. In\nscikit-learn, `PCA` is implemented as a transformer object that learns \\\\(n\\\\)\ncomponents in its `fit` method, and can be used on new data to project it on\nthese components.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "2.6. Covariance estimation", "path": "modules/covariance", "type": "Guide", "text": "\nMany statistical problems require the estimation of a population\u2019s covariance\nmatrix, which can be seen as an estimation of data set scatter plot shape.\nMost of the time, such an estimation has to be done on a sample whose\nproperties (size, structure, homogeneity) have a large influence on the\nestimation\u2019s quality. The `sklearn.covariance` package provides tools for\naccurately estimating a population\u2019s covariance matrix under various settings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "2.7. Novelty and Outlier Detection", "path": "modules/outlier_detection", "type": "Guide", "text": "\nMany applications require being able to decide whether a new observation\nbelongs to the same distribution as existing observations (it is an inlier),\nor should be considered as different (it is an outlier). Often, this ability\nis used to clean real data sets. Two important distinctions must be made:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "2.8. Density Estimation", "path": "modules/density", "type": "Guide", "text": "\nDensity estimation walks the line between unsupervised learning, feature\nengineering, and data modeling. Some of the most popular and useful density\nestimation techniques are mixture models such as Gaussian Mixtures\n(`GaussianMixture`), and neighbor-based approaches such as the kernel density\nestimate (`KernelDensity`). Gaussian Mixtures are discussed more fully in the\ncontext of clustering, because the technique is also useful as an unsupervised\nclustering scheme.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "2.9. Neural network models", "path": "modules/neural_networks_unsupervised", "type": "Guide", "text": "\nRestricted Boltzmann machines (RBM) are unsupervised nonlinear feature\nlearners based on a probabilistic model. The features extracted by an RBM or a\nhierarchy of RBMs often give good results when fed into a linear classifier\nsuch as a linear SVM or a perceptron.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "3.1. Cross-validation", "path": "modules/cross_validation", "type": "Guide", "text": "\nLearning the parameters of a prediction function and testing it on the same\ndata is a methodological mistake: a model that would just repeat the labels of\nthe samples that it has just seen would have a perfect score but would fail to\npredict anything useful on yet-unseen data. This situation is called\noverfitting. To avoid it, it is common practice when performing a (supervised)\nmachine learning experiment to hold out part of the available data as a test\nset `X_test, y_test`. Note that the word \u201cexperiment\u201d is not intended to\ndenote academic use only, because even in commercial settings machine learning\nusually starts out experimentally. Here is a flowchart of typical cross\nvalidation workflow in model training. The best parameters can be determined\nby grid search techniques.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "3.2. Tuning the hyper-parameters of an estimator", "path": "modules/grid_search", "type": "Guide", "text": "\nHyper-parameters are parameters that are not directly learnt within\nestimators. In scikit-learn they are passed as arguments to the constructor of\nthe estimator classes. Typical examples include `C`, `kernel` and `gamma` for\nSupport Vector Classifier, `alpha` for Lasso, etc.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "3.3. Metrics and scoring", "path": "modules/model_evaluation", "type": "Guide", "text": "\nThere are 3 different APIs for evaluating the quality of a model\u2019s\npredictions:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "3.4. Validation curves", "path": "modules/learning_curve", "type": "Guide", "text": "\nEvery estimator has its advantages and drawbacks. Its generalization error can\nbe decomposed in terms of bias, variance and noise. The bias of an estimator\nis its average error for different training sets. The variance of an estimator\nindicates how sensitive it is to varying training sets. Noise is a property of\nthe data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "4.1. Partial Dependence and Individual Conditional Expectation plots", "path": "modules/partial_dependence", "type": "Guide", "text": "\nPartial dependence plots (PDP) and individual conditional expectation (ICE)\nplots can be used to visualize and analyze interaction between the target\nresponse 1 and a set of input features of interest.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "4.2. Permutation feature importance", "path": "modules/permutation_importance", "type": "Guide", "text": "\nPermutation feature importance is a model inspection technique that can be\nused for any fitted estimator when the data is tabular. This is especially\nuseful for non-linear or opaque estimators. The permutation feature importance\nis defined to be the decrease in a model score when a single feature value is\nrandomly shuffled 1. This procedure breaks the relationship between the\nfeature and the target, thus the drop in the model score is indicative of how\nmuch the model depends on the feature. This technique benefits from being\nmodel agnostic and can be calculated many times with different permutations of\nthe feature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "6.1. Pipelines and composite estimators", "path": "modules/compose", "type": "Guide", "text": "\nTransformers are usually combined with classifiers, regressors or other\nestimators to build a composite estimator. The most common tool is a Pipeline.\nPipeline is often used in combination with FeatureUnion which concatenates the\noutput of transformers into a composite feature space.\nTransformedTargetRegressor deals with transforming the target (i.e. log-\ntransform y). In contrast, Pipelines only transform the observed data (X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "6.2. Feature extraction", "path": "modules/feature_extraction", "type": "Guide", "text": "\nThe `sklearn.feature_extraction` module can be used to extract features in a\nformat supported by machine learning algorithms from datasets consisting of\nformats such as text and image.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "6.3. Preprocessing data", "path": "modules/preprocessing", "type": "Guide", "text": "\nThe `sklearn.preprocessing` package provides several common utility functions\nand transformer classes to change raw feature vectors into a representation\nthat is more suitable for the downstream estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "6.4. Imputation of missing values", "path": "modules/impute", "type": "Guide", "text": "\nFor various reasons, many real world datasets contain missing values, often\nencoded as blanks, NaNs or other placeholders. Such datasets however are\nincompatible with scikit-learn estimators which assume that all values in an\narray are numerical, and that all have and hold meaning. A basic strategy to\nuse incomplete datasets is to discard entire rows and/or columns containing\nmissing values. However, this comes at the price of losing data which may be\nvaluable (even though incomplete). A better strategy is to impute the missing\nvalues, i.e., to infer them from the known part of the data. See the Glossary\nof Common Terms and API Elements entry on imputation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "6.5. Unsupervised dimensionality reduction", "path": "modules/unsupervised_reduction", "type": "Guide", "text": "\nIf your number of features is high, it may be useful to reduce it with an\nunsupervised step prior to supervised steps. Many of the Unsupervised learning\nmethods implement a `transform` method that can be used to reduce the\ndimensionality. Below we discuss two specific example of this pattern that are\nheavily used.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "6.6. Random Projection", "path": "modules/random_projection", "type": "Guide", "text": "\nThe `sklearn.random_projection` module implements a simple and computationally\nefficient way to reduce the dimensionality of the data by trading a controlled\namount of accuracy (as additional variance) for faster processing times and\nsmaller model sizes. This module implements two types of unstructured random\nmatrix: Gaussian random matrix and sparse random matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "6.7. Kernel Approximation", "path": "modules/kernel_approximation", "type": "Guide", "text": "\nThis submodule contains functions that approximate the feature mappings that\ncorrespond to certain kernels, as they are used for example in support vector\nmachines (see Support Vector Machines). The following feature functions\nperform non-linear transformations of the input, which can serve as a basis\nfor linear classification or other algorithms.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "6.8. Pairwise metrics, Affinities and Kernels", "path": "modules/metrics", "type": "Guide", "text": "\nThe `sklearn.metrics.pairwise` submodule implements utilities to evaluate\npairwise distances or affinity of sets of samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "6.9. Transforming the prediction target", "path": "modules/preprocessing_targets", "type": "Guide", "text": "\nThese are transformers that are not intended to be used on features, only on\nsupervised learning targets. See also Transforming target in regression if you\nwant to transform the prediction target for learning, but evaluate the model\nin the original (untransformed) space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "7. Dataset loading utilities", "path": "datasets", "type": "Guide", "text": "\nThe `sklearn.datasets` package embeds some small toy datasets as introduced in\nthe Getting Started section.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "API Reference", "path": "modules/classes", "type": "Guide", "text": "\nThis is the class and function reference of scikit-learn. Please refer to the\nfull user guide for further details, as the class and function raw\nspecifications may not be enough to give full guidelines on their uses. For\nreference on concepts repeated across the API, see Glossary of Common Terms\nand API Elements.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.BaseEstimator", "path": "modules/generated/sklearn.base.baseestimator", "type": "base", "text": "\nBase class for all estimators in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.BaseEstimator", "path": "modules/generated/sklearn.base.baseestimator#sklearn.base.BaseEstimator", "type": "base", "text": "\nBase class for all estimators in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.BaseEstimator.get_params()", "path": "modules/generated/sklearn.base.baseestimator#sklearn.base.BaseEstimator.get_params", "type": "base", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.BaseEstimator.set_params()", "path": "modules/generated/sklearn.base.baseestimator#sklearn.base.BaseEstimator.set_params", "type": "base", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.BiclusterMixin", "path": "modules/generated/sklearn.base.biclustermixin", "type": "base", "text": "\nMixin class for all bicluster estimators in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.BiclusterMixin", "path": "modules/generated/sklearn.base.biclustermixin#sklearn.base.BiclusterMixin", "type": "base", "text": "\nMixin class for all bicluster estimators in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.BiclusterMixin.biclusters_()", "path": "modules/generated/sklearn.base.biclustermixin#sklearn.base.BiclusterMixin.biclusters_", "type": "base", "text": "\nConvenient way to get row and column indicators together.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.BiclusterMixin.get_indices()", "path": "modules/generated/sklearn.base.biclustermixin#sklearn.base.BiclusterMixin.get_indices", "type": "base", "text": "\nRow and column indices of the `i`\u2019th bicluster.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.BiclusterMixin.get_shape()", "path": "modules/generated/sklearn.base.biclustermixin#sklearn.base.BiclusterMixin.get_shape", "type": "base", "text": "\nShape of the `i`\u2019th bicluster.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.BiclusterMixin.get_submatrix()", "path": "modules/generated/sklearn.base.biclustermixin#sklearn.base.BiclusterMixin.get_submatrix", "type": "base", "text": "\nReturn the submatrix corresponding to bicluster `i`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.ClassifierMixin", "path": "modules/generated/sklearn.base.classifiermixin", "type": "base", "text": "\nMixin class for all classifiers in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.ClassifierMixin", "path": "modules/generated/sklearn.base.classifiermixin#sklearn.base.ClassifierMixin", "type": "base", "text": "\nMixin class for all classifiers in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.ClassifierMixin.score()", "path": "modules/generated/sklearn.base.classifiermixin#sklearn.base.ClassifierMixin.score", "type": "base", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.clone()", "path": "modules/generated/sklearn.base.clone#sklearn.base.clone", "type": "base", "text": "\nConstructs a new unfitted estimator with the same parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.ClusterMixin", "path": "modules/generated/sklearn.base.clustermixin", "type": "base", "text": "\nMixin class for all cluster estimators in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.ClusterMixin", "path": "modules/generated/sklearn.base.clustermixin#sklearn.base.ClusterMixin", "type": "base", "text": "\nMixin class for all cluster estimators in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.ClusterMixin.fit_predict()", "path": "modules/generated/sklearn.base.clustermixin#sklearn.base.ClusterMixin.fit_predict", "type": "base", "text": "\nPerform clustering on `X` and returns cluster labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.DensityMixin", "path": "modules/generated/sklearn.base.densitymixin", "type": "base", "text": "\nMixin class for all density estimators in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.DensityMixin", "path": "modules/generated/sklearn.base.densitymixin#sklearn.base.DensityMixin", "type": "base", "text": "\nMixin class for all density estimators in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.DensityMixin.score()", "path": "modules/generated/sklearn.base.densitymixin#sklearn.base.DensityMixin.score", "type": "base", "text": "\nReturn the score of the model on the data `X`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.is_classifier()", "path": "modules/generated/sklearn.base.is_classifier#sklearn.base.is_classifier", "type": "base", "text": "\nReturn True if the given estimator is (probably) a classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.is_regressor()", "path": "modules/generated/sklearn.base.is_regressor#sklearn.base.is_regressor", "type": "base", "text": "\nReturn True if the given estimator is (probably) a regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.RegressorMixin", "path": "modules/generated/sklearn.base.regressormixin#sklearn.base.RegressorMixin", "type": "base", "text": "\nMixin class for all regression estimators in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.RegressorMixin", "path": "modules/generated/sklearn.base.regressormixin", "type": "base", "text": "\nMixin class for all regression estimators in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.RegressorMixin.score()", "path": "modules/generated/sklearn.base.regressormixin#sklearn.base.RegressorMixin.score", "type": "base", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.TransformerMixin", "path": "modules/generated/sklearn.base.transformermixin", "type": "base", "text": "\nMixin class for all transformers in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.TransformerMixin", "path": "modules/generated/sklearn.base.transformermixin#sklearn.base.TransformerMixin", "type": "base", "text": "\nMixin class for all transformers in scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "base.TransformerMixin.fit_transform()", "path": "modules/generated/sklearn.base.transformermixin#sklearn.base.TransformerMixin.fit_transform", "type": "base", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "calibration.CalibratedClassifierCV", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV", "type": "calibration", "text": "\nProbability calibration with isotonic regression or logistic regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "calibration.CalibratedClassifierCV()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv", "type": "calibration", "text": "\nProbability calibration with isotonic regression or logistic regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "calibration.CalibratedClassifierCV.fit()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.fit", "type": "calibration", "text": "\nFit the calibrated model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "calibration.CalibratedClassifierCV.get_params()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.get_params", "type": "calibration", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "calibration.CalibratedClassifierCV.predict()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.predict", "type": "calibration", "text": "\nPredict the target of new samples. The predicted class is the class that has\nthe highest probability, and can thus be different from the prediction of the\nuncalibrated classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "calibration.CalibratedClassifierCV.predict_proba()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.predict_proba", "type": "calibration", "text": "\nCalibrated probabilities of classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "calibration.CalibratedClassifierCV.score()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.score", "type": "calibration", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "calibration.CalibratedClassifierCV.set_params()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.set_params", "type": "calibration", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "calibration.calibration_curve()", "path": "modules/generated/sklearn.calibration.calibration_curve#sklearn.calibration.calibration_curve", "type": "calibration", "text": "\nCompute true and predicted probabilities for a calibration curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AffinityPropagation", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation", "type": "cluster", "text": "\nPerform Affinity Propagation Clustering of data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AffinityPropagation()", "path": "modules/generated/sklearn.cluster.affinitypropagation", "type": "cluster", "text": "\nPerform Affinity Propagation Clustering of data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AffinityPropagation.fit()", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation.fit", "type": "cluster", "text": "\nFit the clustering from features, or affinity matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AffinityPropagation.fit_predict()", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation.fit_predict", "type": "cluster", "text": "\nFit the clustering from features or affinity matrix, and return cluster\nlabels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AffinityPropagation.get_params()", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AffinityPropagation.predict()", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation.predict", "type": "cluster", "text": "\nPredict the closest cluster each sample in X belongs to.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AffinityPropagation.set_params()", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.affinity_propagation()", "path": "modules/generated/sklearn.cluster.affinity_propagation#sklearn.cluster.affinity_propagation", "type": "cluster", "text": "\nPerform Affinity Propagation Clustering of data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AgglomerativeClustering", "path": "modules/generated/sklearn.cluster.agglomerativeclustering#sklearn.cluster.AgglomerativeClustering", "type": "cluster", "text": "\nAgglomerative Clustering\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AgglomerativeClustering()", "path": "modules/generated/sklearn.cluster.agglomerativeclustering", "type": "cluster", "text": "\nAgglomerative Clustering\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AgglomerativeClustering.fit()", "path": "modules/generated/sklearn.cluster.agglomerativeclustering#sklearn.cluster.AgglomerativeClustering.fit", "type": "cluster", "text": "\nFit the hierarchical clustering from features, or distance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AgglomerativeClustering.fit_predict()", "path": "modules/generated/sklearn.cluster.agglomerativeclustering#sklearn.cluster.AgglomerativeClustering.fit_predict", "type": "cluster", "text": "\nFit the hierarchical clustering from features or distance matrix, and return\ncluster labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AgglomerativeClustering.get_params()", "path": "modules/generated/sklearn.cluster.agglomerativeclustering#sklearn.cluster.AgglomerativeClustering.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.AgglomerativeClustering.set_params()", "path": "modules/generated/sklearn.cluster.agglomerativeclustering#sklearn.cluster.AgglomerativeClustering.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.Birch", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch", "type": "cluster", "text": "\nImplements the Birch clustering algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.Birch()", "path": "modules/generated/sklearn.cluster.birch", "type": "cluster", "text": "\nImplements the Birch clustering algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.Birch.fit()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.fit", "type": "cluster", "text": "\nBuild a CF Tree for the input data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.Birch.fit_predict()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.fit_predict", "type": "cluster", "text": "\nPerform clustering on `X` and returns cluster labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.Birch.fit_transform()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.fit_transform", "type": "cluster", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.Birch.get_params()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.Birch.partial_fit()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.partial_fit", "type": "cluster", "text": "\nOnline learning. Prevents rebuilding of CFTree from scratch.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.Birch.predict()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.predict", "type": "cluster", "text": "\nPredict data using the `centroids_` of subclusters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.Birch.set_params()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.Birch.transform()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.transform", "type": "cluster", "text": "\nTransform X into subcluster centroids dimension.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.cluster_optics_dbscan()", "path": "modules/generated/sklearn.cluster.cluster_optics_dbscan#sklearn.cluster.cluster_optics_dbscan", "type": "cluster", "text": "\nPerforms DBSCAN extraction for an arbitrary epsilon.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.cluster_optics_xi()", "path": "modules/generated/sklearn.cluster.cluster_optics_xi#sklearn.cluster.cluster_optics_xi", "type": "cluster", "text": "\nAutomatically extract clusters according to the Xi-steep method.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.compute_optics_graph()", "path": "modules/generated/sklearn.cluster.compute_optics_graph#sklearn.cluster.compute_optics_graph", "type": "cluster", "text": "\nComputes the OPTICS reachability graph.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.DBSCAN", "path": "modules/generated/sklearn.cluster.dbscan#sklearn.cluster.DBSCAN", "type": "cluster", "text": "\nPerform DBSCAN clustering from vector array or distance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.DBSCAN()", "path": "modules/generated/sklearn.cluster.dbscan", "type": "cluster", "text": "\nPerform DBSCAN clustering from vector array or distance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.dbscan()", "path": "modules/generated/dbscan-function#sklearn.cluster.dbscan", "type": "cluster", "text": "\nPerform DBSCAN clustering from vector array or distance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.DBSCAN.fit()", "path": "modules/generated/sklearn.cluster.dbscan#sklearn.cluster.DBSCAN.fit", "type": "cluster", "text": "\nPerform DBSCAN clustering from features, or distance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.DBSCAN.fit_predict()", "path": "modules/generated/sklearn.cluster.dbscan#sklearn.cluster.DBSCAN.fit_predict", "type": "cluster", "text": "\nPerform DBSCAN clustering from features or distance matrix, and return cluster\nlabels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.DBSCAN.get_params()", "path": "modules/generated/sklearn.cluster.dbscan#sklearn.cluster.DBSCAN.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.DBSCAN.set_params()", "path": "modules/generated/sklearn.cluster.dbscan#sklearn.cluster.DBSCAN.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.estimate_bandwidth()", "path": "modules/generated/sklearn.cluster.estimate_bandwidth#sklearn.cluster.estimate_bandwidth", "type": "cluster", "text": "\nEstimate the bandwidth to use with the mean-shift algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.FeatureAgglomeration", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration", "type": "cluster", "text": "\nAgglomerate features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.FeatureAgglomeration()", "path": "modules/generated/sklearn.cluster.featureagglomeration", "type": "cluster", "text": "\nAgglomerate features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.FeatureAgglomeration.fit()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.fit", "type": "cluster", "text": "\nFit the hierarchical clustering on the data\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.FeatureAgglomeration.fit_predict()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.fit_predict", "type": "cluster", "text": "\nFit the hierarchical clustering from features or distance matrix, and return\ncluster labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.FeatureAgglomeration.fit_transform()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.fit_transform", "type": "cluster", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.FeatureAgglomeration.get_params()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.FeatureAgglomeration.inverse_transform()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.inverse_transform", "type": "cluster", "text": "\nInverse the transformation. Return a vector of size nb_features with the\nvalues of Xred assigned to each group of features\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.FeatureAgglomeration.set_params()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.FeatureAgglomeration.transform()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.transform", "type": "cluster", "text": "\nTransform a new matrix using the built clustering\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.KMeans", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans", "type": "cluster", "text": "\nK-Means clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.KMeans()", "path": "modules/generated/sklearn.cluster.kmeans", "type": "cluster", "text": "\nK-Means clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.KMeans.fit()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.fit", "type": "cluster", "text": "\nCompute k-means clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.KMeans.fit_predict()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.fit_predict", "type": "cluster", "text": "\nCompute cluster centers and predict cluster index for each sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.KMeans.fit_transform()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.fit_transform", "type": "cluster", "text": "\nCompute clustering and transform X to cluster-distance space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.KMeans.get_params()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.KMeans.predict()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.predict", "type": "cluster", "text": "\nPredict the closest cluster each sample in X belongs to.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.KMeans.score()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.score", "type": "cluster", "text": "\nOpposite of the value of X on the K-means objective.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.KMeans.set_params()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.KMeans.transform()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.transform", "type": "cluster", "text": "\nTransform X to a cluster-distance space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.kmeans_plusplus()", "path": "modules/generated/sklearn.cluster.kmeans_plusplus#sklearn.cluster.kmeans_plusplus", "type": "cluster", "text": "\nInit n_clusters seeds according to k-means++\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.k_means()", "path": "modules/generated/sklearn.cluster.k_means#sklearn.cluster.k_means", "type": "cluster", "text": "\nK-means clustering algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MeanShift", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift", "type": "cluster", "text": "\nMean shift clustering using a flat kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MeanShift()", "path": "modules/generated/sklearn.cluster.meanshift", "type": "cluster", "text": "\nMean shift clustering using a flat kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MeanShift.fit()", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift.fit", "type": "cluster", "text": "\nPerform clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MeanShift.fit_predict()", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift.fit_predict", "type": "cluster", "text": "\nPerform clustering on `X` and returns cluster labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MeanShift.get_params()", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MeanShift.predict()", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift.predict", "type": "cluster", "text": "\nPredict the closest cluster each sample in X belongs to.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MeanShift.set_params()", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.mean_shift()", "path": "modules/generated/sklearn.cluster.mean_shift#sklearn.cluster.mean_shift", "type": "cluster", "text": "\nPerform mean shift clustering of data using a flat kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans", "type": "cluster", "text": "\nMini-Batch K-Means clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans()", "path": "modules/generated/sklearn.cluster.minibatchkmeans", "type": "cluster", "text": "\nMini-Batch K-Means clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans.fit()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.fit", "type": "cluster", "text": "\nCompute the centroids on X by chunking it into mini-batches.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans.fit_predict()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.fit_predict", "type": "cluster", "text": "\nCompute cluster centers and predict cluster index for each sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans.fit_transform()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.fit_transform", "type": "cluster", "text": "\nCompute clustering and transform X to cluster-distance space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans.get_params()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans.partial_fit()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.partial_fit", "type": "cluster", "text": "\nUpdate k means estimate on a single mini-batch X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans.predict()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.predict", "type": "cluster", "text": "\nPredict the closest cluster each sample in X belongs to.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans.score()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.score", "type": "cluster", "text": "\nOpposite of the value of X on the K-means objective.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans.set_params()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.MiniBatchKMeans.transform()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.transform", "type": "cluster", "text": "\nTransform X to a cluster-distance space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.OPTICS", "path": "modules/generated/sklearn.cluster.optics#sklearn.cluster.OPTICS", "type": "cluster", "text": "\nEstimate clustering structure from vector array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.OPTICS()", "path": "modules/generated/sklearn.cluster.optics", "type": "cluster", "text": "\nEstimate clustering structure from vector array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.OPTICS.fit()", "path": "modules/generated/sklearn.cluster.optics#sklearn.cluster.OPTICS.fit", "type": "cluster", "text": "\nPerform OPTICS clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.OPTICS.fit_predict()", "path": "modules/generated/sklearn.cluster.optics#sklearn.cluster.OPTICS.fit_predict", "type": "cluster", "text": "\nPerform clustering on `X` and returns cluster labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.OPTICS.get_params()", "path": "modules/generated/sklearn.cluster.optics#sklearn.cluster.OPTICS.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.OPTICS.set_params()", "path": "modules/generated/sklearn.cluster.optics#sklearn.cluster.OPTICS.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralBiclustering", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering", "type": "cluster", "text": "\nSpectral biclustering (Kluger, 2003).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralBiclustering()", "path": "modules/generated/sklearn.cluster.spectralbiclustering", "type": "cluster", "text": "\nSpectral biclustering (Kluger, 2003).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralBiclustering.biclusters_()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.biclusters_", "type": "cluster", "text": "\nConvenient way to get row and column indicators together.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralBiclustering.fit()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.fit", "type": "cluster", "text": "\nCreates a biclustering for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralBiclustering.get_indices()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.get_indices", "type": "cluster", "text": "\nRow and column indices of the `i`\u2019th bicluster.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralBiclustering.get_params()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralBiclustering.get_shape()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.get_shape", "type": "cluster", "text": "\nShape of the `i`\u2019th bicluster.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralBiclustering.get_submatrix()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.get_submatrix", "type": "cluster", "text": "\nReturn the submatrix corresponding to bicluster `i`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralBiclustering.set_params()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralClustering", "path": "modules/generated/sklearn.cluster.spectralclustering#sklearn.cluster.SpectralClustering", "type": "cluster", "text": "\nApply clustering to a projection of the normalized Laplacian.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralClustering()", "path": "modules/generated/sklearn.cluster.spectralclustering", "type": "cluster", "text": "\nApply clustering to a projection of the normalized Laplacian.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralClustering.fit()", "path": "modules/generated/sklearn.cluster.spectralclustering#sklearn.cluster.SpectralClustering.fit", "type": "cluster", "text": "\nPerform spectral clustering from features, or affinity matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralClustering.fit_predict()", "path": "modules/generated/sklearn.cluster.spectralclustering#sklearn.cluster.SpectralClustering.fit_predict", "type": "cluster", "text": "\nPerform spectral clustering from features, or affinity matrix, and return\ncluster labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralClustering.get_params()", "path": "modules/generated/sklearn.cluster.spectralclustering#sklearn.cluster.SpectralClustering.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralClustering.set_params()", "path": "modules/generated/sklearn.cluster.spectralclustering#sklearn.cluster.SpectralClustering.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralCoclustering", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering", "type": "cluster", "text": "\nSpectral Co-Clustering algorithm (Dhillon, 2001).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralCoclustering()", "path": "modules/generated/sklearn.cluster.spectralcoclustering", "type": "cluster", "text": "\nSpectral Co-Clustering algorithm (Dhillon, 2001).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralCoclustering.biclusters_()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.biclusters_", "type": "cluster", "text": "\nConvenient way to get row and column indicators together.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralCoclustering.fit()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.fit", "type": "cluster", "text": "\nCreates a biclustering for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralCoclustering.get_indices()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.get_indices", "type": "cluster", "text": "\nRow and column indices of the `i`\u2019th bicluster.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralCoclustering.get_params()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.get_params", "type": "cluster", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralCoclustering.get_shape()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.get_shape", "type": "cluster", "text": "\nShape of the `i`\u2019th bicluster.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralCoclustering.get_submatrix()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.get_submatrix", "type": "cluster", "text": "\nReturn the submatrix corresponding to bicluster `i`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.SpectralCoclustering.set_params()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.set_params", "type": "cluster", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.spectral_clustering()", "path": "modules/generated/sklearn.cluster.spectral_clustering#sklearn.cluster.spectral_clustering", "type": "cluster", "text": "\nApply clustering to a projection of the normalized Laplacian.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cluster.ward_tree()", "path": "modules/generated/sklearn.cluster.ward_tree#sklearn.cluster.ward_tree", "type": "cluster", "text": "\nWard clustering based on a Feature matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.ColumnTransformer", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer", "type": "compose", "text": "\nApplies transformers to columns of an array or pandas DataFrame.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.ColumnTransformer()", "path": "modules/generated/sklearn.compose.columntransformer", "type": "compose", "text": "\nApplies transformers to columns of an array or pandas DataFrame.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.ColumnTransformer.fit()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.fit", "type": "compose", "text": "\nFit all transformers using X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.ColumnTransformer.fit_transform()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.fit_transform", "type": "compose", "text": "\nFit all transformers, transform the data and concatenate results.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.ColumnTransformer.get_feature_names()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.get_feature_names", "type": "compose", "text": "\nGet feature names from all transformers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.ColumnTransformer.get_params()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.get_params", "type": "compose", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.ColumnTransformer.named_transformers_()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.named_transformers_", "type": "compose", "text": "\nAccess the fitted transformer by name.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.ColumnTransformer.set_params()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.set_params", "type": "compose", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.ColumnTransformer.transform()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.transform", "type": "compose", "text": "\nTransform X separately by each transformer, concatenate results.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.make_column_selector()", "path": "modules/generated/sklearn.compose.make_column_selector#sklearn.compose.make_column_selector", "type": "compose", "text": "\nCreate a callable to select columns to be used with `ColumnTransformer`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.make_column_transformer()", "path": "modules/generated/sklearn.compose.make_column_transformer#sklearn.compose.make_column_transformer", "type": "compose", "text": "\nConstruct a ColumnTransformer from the given transformers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.TransformedTargetRegressor", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor", "type": "compose", "text": "\nMeta-estimator to regress on a transformed target.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.TransformedTargetRegressor()", "path": "modules/generated/sklearn.compose.transformedtargetregressor", "type": "compose", "text": "\nMeta-estimator to regress on a transformed target.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.TransformedTargetRegressor.fit()", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor.fit", "type": "compose", "text": "\nFit the model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.TransformedTargetRegressor.get_params()", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor.get_params", "type": "compose", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.TransformedTargetRegressor.predict()", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor.predict", "type": "compose", "text": "\nPredict using the base regressor, applying inverse.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.TransformedTargetRegressor.score()", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor.score", "type": "compose", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "compose.TransformedTargetRegressor.set_params()", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor.set_params", "type": "compose", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "config_context()", "path": "modules/generated/sklearn.config_context#sklearn.config_context", "type": "sklearn", "text": "\nContext manager for global scikit-learn configuration\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope", "type": "covariance", "text": "\nAn object for detecting outliers in a Gaussian distributed dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope()", "path": "modules/generated/sklearn.covariance.ellipticenvelope", "type": "covariance", "text": "\nAn object for detecting outliers in a Gaussian distributed dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.correct_covariance()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.correct_covariance", "type": "covariance", "text": "\nApply a correction to raw Minimum Covariance Determinant estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.decision_function()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.decision_function", "type": "covariance", "text": "\nCompute the decision function of the given observations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.error_norm()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.error_norm", "type": "covariance", "text": "\nComputes the Mean Squared Error between two covariance estimators. (In the\nsense of the Frobenius norm).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.fit()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.fit", "type": "covariance", "text": "\nFit the EllipticEnvelope model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.fit_predict()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.fit_predict", "type": "covariance", "text": "\nPerform fit on X and returns labels for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.get_params()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.get_params", "type": "covariance", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.get_precision()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.get_precision", "type": "covariance", "text": "\nGetter for the precision matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.mahalanobis()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.mahalanobis", "type": "covariance", "text": "\nComputes the squared Mahalanobis distances of given observations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.predict()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.predict", "type": "covariance", "text": "\nPredict the labels (1 inlier, -1 outlier) of X according to the fitted model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.reweight_covariance()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.reweight_covariance", "type": "covariance", "text": "\nRe-weight raw Minimum Covariance Determinant estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.score()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.score", "type": "covariance", "text": "\nReturns the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.score_samples()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.score_samples", "type": "covariance", "text": "\nCompute the negative Mahalanobis distances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EllipticEnvelope.set_params()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.set_params", "type": "covariance", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EmpiricalCovariance", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance", "type": "covariance", "text": "\nMaximum likelihood covariance estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EmpiricalCovariance()", "path": "modules/generated/sklearn.covariance.empiricalcovariance", "type": "covariance", "text": "\nMaximum likelihood covariance estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EmpiricalCovariance.error_norm()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.error_norm", "type": "covariance", "text": "\nComputes the Mean Squared Error between two covariance estimators. (In the\nsense of the Frobenius norm).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EmpiricalCovariance.fit()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.fit", "type": "covariance", "text": "\nFits the Maximum Likelihood Estimator covariance model according to the given\ntraining data and parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EmpiricalCovariance.get_params()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.get_params", "type": "covariance", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EmpiricalCovariance.get_precision()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.get_precision", "type": "covariance", "text": "\nGetter for the precision matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EmpiricalCovariance.mahalanobis()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.mahalanobis", "type": "covariance", "text": "\nComputes the squared Mahalanobis distances of given observations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EmpiricalCovariance.score()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.score", "type": "covariance", "text": "\nComputes the log-likelihood of a Gaussian data set with `self.covariance_` as\nan estimator of its covariance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.EmpiricalCovariance.set_params()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.set_params", "type": "covariance", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.empirical_covariance()", "path": "modules/generated/sklearn.covariance.empirical_covariance#sklearn.covariance.empirical_covariance", "type": "covariance", "text": "\nComputes the Maximum likelihood covariance estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLasso", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso", "type": "covariance", "text": "\nSparse inverse covariance estimation with an l1-penalized estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLasso()", "path": "modules/generated/sklearn.covariance.graphicallasso", "type": "covariance", "text": "\nSparse inverse covariance estimation with an l1-penalized estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLasso.error_norm()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.error_norm", "type": "covariance", "text": "\nComputes the Mean Squared Error between two covariance estimators. (In the\nsense of the Frobenius norm).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLasso.fit()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.fit", "type": "covariance", "text": "\nFits the GraphicalLasso model to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLasso.get_params()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.get_params", "type": "covariance", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLasso.get_precision()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.get_precision", "type": "covariance", "text": "\nGetter for the precision matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLasso.mahalanobis()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.mahalanobis", "type": "covariance", "text": "\nComputes the squared Mahalanobis distances of given observations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLasso.score()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.score", "type": "covariance", "text": "\nComputes the log-likelihood of a Gaussian data set with `self.covariance_` as\nan estimator of its covariance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLasso.set_params()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.set_params", "type": "covariance", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLassoCV", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV", "type": "covariance", "text": "\nSparse inverse covariance w/ cross-validated choice of the l1 penalty.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLassoCV()", "path": "modules/generated/sklearn.covariance.graphicallassocv", "type": "covariance", "text": "\nSparse inverse covariance w/ cross-validated choice of the l1 penalty.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLassoCV.error_norm()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.error_norm", "type": "covariance", "text": "\nComputes the Mean Squared Error between two covariance estimators. (In the\nsense of the Frobenius norm).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLassoCV.fit()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.fit", "type": "covariance", "text": "\nFits the GraphicalLasso covariance model to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLassoCV.get_params()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.get_params", "type": "covariance", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLassoCV.get_precision()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.get_precision", "type": "covariance", "text": "\nGetter for the precision matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLassoCV.mahalanobis()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.mahalanobis", "type": "covariance", "text": "\nComputes the squared Mahalanobis distances of given observations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLassoCV.score()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.score", "type": "covariance", "text": "\nComputes the log-likelihood of a Gaussian data set with `self.covariance_` as\nan estimator of its covariance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.GraphicalLassoCV.set_params()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.set_params", "type": "covariance", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.graphical_lasso()", "path": "modules/generated/sklearn.covariance.graphical_lasso#sklearn.covariance.graphical_lasso", "type": "covariance", "text": "\nl1-penalized covariance estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.LedoitWolf", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf", "type": "covariance", "text": "\nLedoitWolf Estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.LedoitWolf()", "path": "modules/generated/sklearn.covariance.ledoitwolf", "type": "covariance", "text": "\nLedoitWolf Estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.LedoitWolf.error_norm()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.error_norm", "type": "covariance", "text": "\nComputes the Mean Squared Error between two covariance estimators. (In the\nsense of the Frobenius norm).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.LedoitWolf.fit()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.fit", "type": "covariance", "text": "\nFit the Ledoit-Wolf shrunk covariance model according to the given training\ndata and parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.LedoitWolf.get_params()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.get_params", "type": "covariance", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.LedoitWolf.get_precision()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.get_precision", "type": "covariance", "text": "\nGetter for the precision matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.LedoitWolf.mahalanobis()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.mahalanobis", "type": "covariance", "text": "\nComputes the squared Mahalanobis distances of given observations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.LedoitWolf.score()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.score", "type": "covariance", "text": "\nComputes the log-likelihood of a Gaussian data set with `self.covariance_` as\nan estimator of its covariance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.LedoitWolf.set_params()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.set_params", "type": "covariance", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.ledoit_wolf()", "path": "modules/generated/sklearn.covariance.ledoit_wolf#sklearn.covariance.ledoit_wolf", "type": "covariance", "text": "\nEstimates the shrunk Ledoit-Wolf covariance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet", "type": "covariance", "text": "\nMinimum Covariance Determinant (MCD): robust estimator of covariance.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet()", "path": "modules/generated/sklearn.covariance.mincovdet", "type": "covariance", "text": "\nMinimum Covariance Determinant (MCD): robust estimator of covariance.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet.correct_covariance()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.correct_covariance", "type": "covariance", "text": "\nApply a correction to raw Minimum Covariance Determinant estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet.error_norm()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.error_norm", "type": "covariance", "text": "\nComputes the Mean Squared Error between two covariance estimators. (In the\nsense of the Frobenius norm).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet.fit()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.fit", "type": "covariance", "text": "\nFits a Minimum Covariance Determinant with the FastMCD algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet.get_params()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.get_params", "type": "covariance", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet.get_precision()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.get_precision", "type": "covariance", "text": "\nGetter for the precision matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet.mahalanobis()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.mahalanobis", "type": "covariance", "text": "\nComputes the squared Mahalanobis distances of given observations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet.reweight_covariance()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.reweight_covariance", "type": "covariance", "text": "\nRe-weight raw Minimum Covariance Determinant estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet.score()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.score", "type": "covariance", "text": "\nComputes the log-likelihood of a Gaussian data set with `self.covariance_` as\nan estimator of its covariance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.MinCovDet.set_params()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.set_params", "type": "covariance", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.OAS", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS", "type": "covariance", "text": "\nOracle Approximating Shrinkage Estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.oas()", "path": "modules/generated/oas-function#sklearn.covariance.oas", "type": "covariance", "text": "\nEstimate covariance with the Oracle Approximating Shrinkage algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.OAS()", "path": "modules/generated/sklearn.covariance.oas", "type": "covariance", "text": "\nOracle Approximating Shrinkage Estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.OAS.error_norm()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.error_norm", "type": "covariance", "text": "\nComputes the Mean Squared Error between two covariance estimators. (In the\nsense of the Frobenius norm).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.OAS.fit()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.fit", "type": "covariance", "text": "\nFit the Oracle Approximating Shrinkage covariance model according to the given\ntraining data and parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.OAS.get_params()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.get_params", "type": "covariance", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.OAS.get_precision()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.get_precision", "type": "covariance", "text": "\nGetter for the precision matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.OAS.mahalanobis()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.mahalanobis", "type": "covariance", "text": "\nComputes the squared Mahalanobis distances of given observations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.OAS.score()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.score", "type": "covariance", "text": "\nComputes the log-likelihood of a Gaussian data set with `self.covariance_` as\nan estimator of its covariance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.OAS.set_params()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.set_params", "type": "covariance", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.ShrunkCovariance", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance", "type": "covariance", "text": "\nCovariance estimator with shrinkage\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.ShrunkCovariance()", "path": "modules/generated/sklearn.covariance.shrunkcovariance", "type": "covariance", "text": "\nCovariance estimator with shrinkage\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.ShrunkCovariance.error_norm()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.error_norm", "type": "covariance", "text": "\nComputes the Mean Squared Error between two covariance estimators. (In the\nsense of the Frobenius norm).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.ShrunkCovariance.fit()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.fit", "type": "covariance", "text": "\nFit the shrunk covariance model according to the given training data and\nparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.ShrunkCovariance.get_params()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.get_params", "type": "covariance", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.ShrunkCovariance.get_precision()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.get_precision", "type": "covariance", "text": "\nGetter for the precision matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.ShrunkCovariance.mahalanobis()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.mahalanobis", "type": "covariance", "text": "\nComputes the squared Mahalanobis distances of given observations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.ShrunkCovariance.score()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.score", "type": "covariance", "text": "\nComputes the log-likelihood of a Gaussian data set with `self.covariance_` as\nan estimator of its covariance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.ShrunkCovariance.set_params()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.set_params", "type": "covariance", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "covariance.shrunk_covariance()", "path": "modules/generated/sklearn.covariance.shrunk_covariance#sklearn.covariance.shrunk_covariance", "type": "covariance", "text": "\nCalculates a covariance matrix shrunk on the diagonal\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.CCA", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA", "type": "cross_decomposition", "text": "\nCanonical Correlation Analysis, also known as \u201cMode B\u201d PLS.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.CCA()", "path": "modules/generated/sklearn.cross_decomposition.cca", "type": "cross_decomposition", "text": "\nCanonical Correlation Analysis, also known as \u201cMode B\u201d PLS.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.CCA.fit()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.fit", "type": "cross_decomposition", "text": "\nFit model to data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.CCA.fit_transform()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.fit_transform", "type": "cross_decomposition", "text": "\nLearn and apply the dimension reduction on the train data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.CCA.get_params()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.get_params", "type": "cross_decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.CCA.inverse_transform()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.inverse_transform", "type": "cross_decomposition", "text": "\nTransform data back to its original space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.CCA.predict()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.predict", "type": "cross_decomposition", "text": "\nPredict targets of given samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.CCA.score()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.score", "type": "cross_decomposition", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.CCA.set_params()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.set_params", "type": "cross_decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.CCA.transform()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.transform", "type": "cross_decomposition", "text": "\nApply the dimension reduction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSCanonical", "path": "modules/generated/sklearn.cross_decomposition.plscanonical#sklearn.cross_decomposition.PLSCanonical", "type": "cross_decomposition", "text": "\nPartial Least Squares transformer and regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSCanonical()", "path": "modules/generated/sklearn.cross_decomposition.plscanonical", "type": "cross_decomposition", "text": "\nPartial Least Squares transformer and regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSCanonical.fit()", "path": "modules/generated/sklearn.cross_decomposition.plscanonical#sklearn.cross_decomposition.PLSCanonical.fit", "type": "cross_decomposition", "text": "\nFit model to data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSCanonical.fit_transform()", "path": "modules/generated/sklearn.cross_decomposition.plscanonical#sklearn.cross_decomposition.PLSCanonical.fit_transform", "type": "cross_decomposition", "text": "\nLearn and apply the dimension reduction on the train data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSCanonical.get_params()", "path": "modules/generated/sklearn.cross_decomposition.plscanonical#sklearn.cross_decomposition.PLSCanonical.get_params", "type": "cross_decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSCanonical.inverse_transform()", "path": "modules/generated/sklearn.cross_decomposition.plscanonical#sklearn.cross_decomposition.PLSCanonical.inverse_transform", "type": "cross_decomposition", "text": "\nTransform data back to its original space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSCanonical.predict()", "path": "modules/generated/sklearn.cross_decomposition.plscanonical#sklearn.cross_decomposition.PLSCanonical.predict", "type": "cross_decomposition", "text": "\nPredict targets of given samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSCanonical.score()", "path": "modules/generated/sklearn.cross_decomposition.plscanonical#sklearn.cross_decomposition.PLSCanonical.score", "type": "cross_decomposition", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSCanonical.set_params()", "path": "modules/generated/sklearn.cross_decomposition.plscanonical#sklearn.cross_decomposition.PLSCanonical.set_params", "type": "cross_decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSCanonical.transform()", "path": "modules/generated/sklearn.cross_decomposition.plscanonical#sklearn.cross_decomposition.PLSCanonical.transform", "type": "cross_decomposition", "text": "\nApply the dimension reduction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSRegression", "path": "modules/generated/sklearn.cross_decomposition.plsregression#sklearn.cross_decomposition.PLSRegression", "type": "cross_decomposition", "text": "\nPLS regression\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSRegression()", "path": "modules/generated/sklearn.cross_decomposition.plsregression", "type": "cross_decomposition", "text": "\nPLS regression\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSRegression.fit()", "path": "modules/generated/sklearn.cross_decomposition.plsregression#sklearn.cross_decomposition.PLSRegression.fit", "type": "cross_decomposition", "text": "\nFit model to data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSRegression.fit_transform()", "path": "modules/generated/sklearn.cross_decomposition.plsregression#sklearn.cross_decomposition.PLSRegression.fit_transform", "type": "cross_decomposition", "text": "\nLearn and apply the dimension reduction on the train data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSRegression.get_params()", "path": "modules/generated/sklearn.cross_decomposition.plsregression#sklearn.cross_decomposition.PLSRegression.get_params", "type": "cross_decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSRegression.inverse_transform()", "path": "modules/generated/sklearn.cross_decomposition.plsregression#sklearn.cross_decomposition.PLSRegression.inverse_transform", "type": "cross_decomposition", "text": "\nTransform data back to its original space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSRegression.predict()", "path": "modules/generated/sklearn.cross_decomposition.plsregression#sklearn.cross_decomposition.PLSRegression.predict", "type": "cross_decomposition", "text": "\nPredict targets of given samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSRegression.score()", "path": "modules/generated/sklearn.cross_decomposition.plsregression#sklearn.cross_decomposition.PLSRegression.score", "type": "cross_decomposition", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSRegression.set_params()", "path": "modules/generated/sklearn.cross_decomposition.plsregression#sklearn.cross_decomposition.PLSRegression.set_params", "type": "cross_decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSRegression.transform()", "path": "modules/generated/sklearn.cross_decomposition.plsregression#sklearn.cross_decomposition.PLSRegression.transform", "type": "cross_decomposition", "text": "\nApply the dimension reduction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSSVD", "path": "modules/generated/sklearn.cross_decomposition.plssvd#sklearn.cross_decomposition.PLSSVD", "type": "cross_decomposition", "text": "\nPartial Least Square SVD.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSSVD()", "path": "modules/generated/sklearn.cross_decomposition.plssvd", "type": "cross_decomposition", "text": "\nPartial Least Square SVD.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSSVD.fit()", "path": "modules/generated/sklearn.cross_decomposition.plssvd#sklearn.cross_decomposition.PLSSVD.fit", "type": "cross_decomposition", "text": "\nFit model to data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSSVD.fit_transform()", "path": "modules/generated/sklearn.cross_decomposition.plssvd#sklearn.cross_decomposition.PLSSVD.fit_transform", "type": "cross_decomposition", "text": "\nLearn and apply the dimensionality reduction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSSVD.get_params()", "path": "modules/generated/sklearn.cross_decomposition.plssvd#sklearn.cross_decomposition.PLSSVD.get_params", "type": "cross_decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSSVD.set_params()", "path": "modules/generated/sklearn.cross_decomposition.plssvd#sklearn.cross_decomposition.PLSSVD.set_params", "type": "cross_decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "cross_decomposition.PLSSVD.transform()", "path": "modules/generated/sklearn.cross_decomposition.plssvd#sklearn.cross_decomposition.PLSSVD.transform", "type": "cross_decomposition", "text": "\nApply the dimensionality reduction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.clear_data_home()", "path": "modules/generated/sklearn.datasets.clear_data_home#sklearn.datasets.clear_data_home", "type": "datasets", "text": "\nDelete all the content of the data home cache.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.dump_svmlight_file()", "path": "modules/generated/sklearn.datasets.dump_svmlight_file#sklearn.datasets.dump_svmlight_file", "type": "datasets", "text": "\nDump the dataset in svmlight / libsvm file format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_20newsgroups()", "path": "modules/generated/sklearn.datasets.fetch_20newsgroups#sklearn.datasets.fetch_20newsgroups", "type": "datasets", "text": "\nLoad the filenames and data from the 20 newsgroups dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_20newsgroups_vectorized()", "path": "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized#sklearn.datasets.fetch_20newsgroups_vectorized", "type": "datasets", "text": "\nLoad and vectorize the 20 newsgroups dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_california_housing()", "path": "modules/generated/sklearn.datasets.fetch_california_housing#sklearn.datasets.fetch_california_housing", "type": "datasets", "text": "\nLoad the California housing dataset (regression).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_covtype()", "path": "modules/generated/sklearn.datasets.fetch_covtype#sklearn.datasets.fetch_covtype", "type": "datasets", "text": "\nLoad the covertype dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_kddcup99()", "path": "modules/generated/sklearn.datasets.fetch_kddcup99#sklearn.datasets.fetch_kddcup99", "type": "datasets", "text": "\nLoad the kddcup99 dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_lfw_pairs()", "path": "modules/generated/sklearn.datasets.fetch_lfw_pairs#sklearn.datasets.fetch_lfw_pairs", "type": "datasets", "text": "\nLoad the Labeled Faces in the Wild (LFW) pairs dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_lfw_people()", "path": "modules/generated/sklearn.datasets.fetch_lfw_people#sklearn.datasets.fetch_lfw_people", "type": "datasets", "text": "\nLoad the Labeled Faces in the Wild (LFW) people dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_olivetti_faces()", "path": "modules/generated/sklearn.datasets.fetch_olivetti_faces#sklearn.datasets.fetch_olivetti_faces", "type": "datasets", "text": "\nLoad the Olivetti faces data-set from AT&T (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_openml()", "path": "modules/generated/sklearn.datasets.fetch_openml#sklearn.datasets.fetch_openml", "type": "datasets", "text": "\nFetch dataset from openml by name or dataset id.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_rcv1()", "path": "modules/generated/sklearn.datasets.fetch_rcv1#sklearn.datasets.fetch_rcv1", "type": "datasets", "text": "\nLoad the RCV1 multilabel dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.fetch_species_distributions()", "path": "modules/generated/sklearn.datasets.fetch_species_distributions#sklearn.datasets.fetch_species_distributions", "type": "datasets", "text": "\nLoader for species distribution dataset from Phillips et. al. (2006)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.get_data_home()", "path": "modules/generated/sklearn.datasets.get_data_home#sklearn.datasets.get_data_home", "type": "datasets", "text": "\nReturn the path of the scikit-learn data dir.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_boston()", "path": "modules/generated/sklearn.datasets.load_boston#sklearn.datasets.load_boston", "type": "datasets", "text": "\nLoad and return the boston house-prices dataset (regression).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_breast_cancer()", "path": "modules/generated/sklearn.datasets.load_breast_cancer#sklearn.datasets.load_breast_cancer", "type": "datasets", "text": "\nLoad and return the breast cancer wisconsin dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_diabetes()", "path": "modules/generated/sklearn.datasets.load_diabetes#sklearn.datasets.load_diabetes", "type": "datasets", "text": "\nLoad and return the diabetes dataset (regression).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_digits()", "path": "modules/generated/sklearn.datasets.load_digits#sklearn.datasets.load_digits", "type": "datasets", "text": "\nLoad and return the digits dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_files()", "path": "modules/generated/sklearn.datasets.load_files#sklearn.datasets.load_files", "type": "datasets", "text": "\nLoad text files with categories as subfolder names.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_iris()", "path": "modules/generated/sklearn.datasets.load_iris#sklearn.datasets.load_iris", "type": "datasets", "text": "\nLoad and return the iris dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_linnerud()", "path": "modules/generated/sklearn.datasets.load_linnerud#sklearn.datasets.load_linnerud", "type": "datasets", "text": "\nLoad and return the physical excercise linnerud dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_sample_image()", "path": "modules/generated/sklearn.datasets.load_sample_image#sklearn.datasets.load_sample_image", "type": "datasets", "text": "\nLoad the numpy array of a single sample image\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_sample_images()", "path": "modules/generated/sklearn.datasets.load_sample_images#sklearn.datasets.load_sample_images", "type": "datasets", "text": "\nLoad sample images for image manipulation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_svmlight_file()", "path": "modules/generated/sklearn.datasets.load_svmlight_file#sklearn.datasets.load_svmlight_file", "type": "datasets", "text": "\nLoad datasets in the svmlight / libsvm format into sparse CSR matrix\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_svmlight_files()", "path": "modules/generated/sklearn.datasets.load_svmlight_files#sklearn.datasets.load_svmlight_files", "type": "datasets", "text": "\nLoad dataset from multiple files in SVMlight format\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.load_wine()", "path": "modules/generated/sklearn.datasets.load_wine#sklearn.datasets.load_wine", "type": "datasets", "text": "\nLoad and return the wine dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_biclusters()", "path": "modules/generated/sklearn.datasets.make_biclusters#sklearn.datasets.make_biclusters", "type": "datasets", "text": "\nGenerate an array with constant block diagonal structure for biclustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_blobs()", "path": "modules/generated/sklearn.datasets.make_blobs#sklearn.datasets.make_blobs", "type": "datasets", "text": "\nGenerate isotropic Gaussian blobs for clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_checkerboard()", "path": "modules/generated/sklearn.datasets.make_checkerboard#sklearn.datasets.make_checkerboard", "type": "datasets", "text": "\nGenerate an array with block checkerboard structure for biclustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_circles()", "path": "modules/generated/sklearn.datasets.make_circles#sklearn.datasets.make_circles", "type": "datasets", "text": "\nMake a large circle containing a smaller circle in 2d.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_classification()", "path": "modules/generated/sklearn.datasets.make_classification#sklearn.datasets.make_classification", "type": "datasets", "text": "\nGenerate a random n-class classification problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_friedman1()", "path": "modules/generated/sklearn.datasets.make_friedman1#sklearn.datasets.make_friedman1", "type": "datasets", "text": "\nGenerate the \u201cFriedman #1\u201d regression problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_friedman2()", "path": "modules/generated/sklearn.datasets.make_friedman2#sklearn.datasets.make_friedman2", "type": "datasets", "text": "\nGenerate the \u201cFriedman #2\u201d regression problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_friedman3()", "path": "modules/generated/sklearn.datasets.make_friedman3#sklearn.datasets.make_friedman3", "type": "datasets", "text": "\nGenerate the \u201cFriedman #3\u201d regression problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_gaussian_quantiles()", "path": "modules/generated/sklearn.datasets.make_gaussian_quantiles#sklearn.datasets.make_gaussian_quantiles", "type": "datasets", "text": "\nGenerate isotropic Gaussian and label samples by quantile.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_hastie_10_2()", "path": "modules/generated/sklearn.datasets.make_hastie_10_2#sklearn.datasets.make_hastie_10_2", "type": "datasets", "text": "\nGenerates data for binary classification used in Hastie et al. 2009, Example\n10.2.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_low_rank_matrix()", "path": "modules/generated/sklearn.datasets.make_low_rank_matrix#sklearn.datasets.make_low_rank_matrix", "type": "datasets", "text": "\nGenerate a mostly low rank matrix with bell-shaped singular values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_moons()", "path": "modules/generated/sklearn.datasets.make_moons#sklearn.datasets.make_moons", "type": "datasets", "text": "\nMake two interleaving half circles.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_multilabel_classification()", "path": "modules/generated/sklearn.datasets.make_multilabel_classification#sklearn.datasets.make_multilabel_classification", "type": "datasets", "text": "\nGenerate a random multilabel classification problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_regression()", "path": "modules/generated/sklearn.datasets.make_regression#sklearn.datasets.make_regression", "type": "datasets", "text": "\nGenerate a random regression problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_sparse_coded_signal()", "path": "modules/generated/sklearn.datasets.make_sparse_coded_signal#sklearn.datasets.make_sparse_coded_signal", "type": "datasets", "text": "\nGenerate a signal as a sparse combination of dictionary elements.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_sparse_spd_matrix()", "path": "modules/generated/sklearn.datasets.make_sparse_spd_matrix#sklearn.datasets.make_sparse_spd_matrix", "type": "datasets", "text": "\nGenerate a sparse symmetric definite positive matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_sparse_uncorrelated()", "path": "modules/generated/sklearn.datasets.make_sparse_uncorrelated#sklearn.datasets.make_sparse_uncorrelated", "type": "datasets", "text": "\nGenerate a random regression problem with sparse uncorrelated design.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_spd_matrix()", "path": "modules/generated/sklearn.datasets.make_spd_matrix#sklearn.datasets.make_spd_matrix", "type": "datasets", "text": "\nGenerate a random symmetric, positive-definite matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_swiss_roll()", "path": "modules/generated/sklearn.datasets.make_swiss_roll#sklearn.datasets.make_swiss_roll", "type": "datasets", "text": "\nGenerate a swiss roll dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "datasets.make_s_curve()", "path": "modules/generated/sklearn.datasets.make_s_curve#sklearn.datasets.make_s_curve", "type": "datasets", "text": "\nGenerate an S curve dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.DictionaryLearning", "path": "modules/generated/sklearn.decomposition.dictionarylearning#sklearn.decomposition.DictionaryLearning", "type": "decomposition", "text": "\nDictionary learning\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.DictionaryLearning()", "path": "modules/generated/sklearn.decomposition.dictionarylearning", "type": "decomposition", "text": "\nDictionary learning\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.DictionaryLearning.fit()", "path": "modules/generated/sklearn.decomposition.dictionarylearning#sklearn.decomposition.DictionaryLearning.fit", "type": "decomposition", "text": "\nFit the model from data in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.DictionaryLearning.fit_transform()", "path": "modules/generated/sklearn.decomposition.dictionarylearning#sklearn.decomposition.DictionaryLearning.fit_transform", "type": "decomposition", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.DictionaryLearning.get_params()", "path": "modules/generated/sklearn.decomposition.dictionarylearning#sklearn.decomposition.DictionaryLearning.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.DictionaryLearning.set_params()", "path": "modules/generated/sklearn.decomposition.dictionarylearning#sklearn.decomposition.DictionaryLearning.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.DictionaryLearning.transform()", "path": "modules/generated/sklearn.decomposition.dictionarylearning#sklearn.decomposition.DictionaryLearning.transform", "type": "decomposition", "text": "\nEncode the data as a sparse combination of the dictionary atoms.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.dict_learning()", "path": "modules/generated/sklearn.decomposition.dict_learning#sklearn.decomposition.dict_learning", "type": "decomposition", "text": "\nSolves a dictionary learning matrix factorization problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.dict_learning_online()", "path": "modules/generated/sklearn.decomposition.dict_learning_online#sklearn.decomposition.dict_learning_online", "type": "decomposition", "text": "\nSolves a dictionary learning matrix factorization problem online.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis", "path": "modules/generated/sklearn.decomposition.factoranalysis#sklearn.decomposition.FactorAnalysis", "type": "decomposition", "text": "\nFactor Analysis (FA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis()", "path": "modules/generated/sklearn.decomposition.factoranalysis", "type": "decomposition", "text": "\nFactor Analysis (FA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis.fit()", "path": "modules/generated/sklearn.decomposition.factoranalysis#sklearn.decomposition.FactorAnalysis.fit", "type": "decomposition", "text": "\nFit the FactorAnalysis model to X using SVD based approach\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis.fit_transform()", "path": "modules/generated/sklearn.decomposition.factoranalysis#sklearn.decomposition.FactorAnalysis.fit_transform", "type": "decomposition", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis.get_covariance()", "path": "modules/generated/sklearn.decomposition.factoranalysis#sklearn.decomposition.FactorAnalysis.get_covariance", "type": "decomposition", "text": "\nCompute data covariance with the FactorAnalysis model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis.get_params()", "path": "modules/generated/sklearn.decomposition.factoranalysis#sklearn.decomposition.FactorAnalysis.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis.get_precision()", "path": "modules/generated/sklearn.decomposition.factoranalysis#sklearn.decomposition.FactorAnalysis.get_precision", "type": "decomposition", "text": "\nCompute data precision matrix with the FactorAnalysis model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis.score()", "path": "modules/generated/sklearn.decomposition.factoranalysis#sklearn.decomposition.FactorAnalysis.score", "type": "decomposition", "text": "\nCompute the average log-likelihood of the samples\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis.score_samples()", "path": "modules/generated/sklearn.decomposition.factoranalysis#sklearn.decomposition.FactorAnalysis.score_samples", "type": "decomposition", "text": "\nCompute the log-likelihood of each sample\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis.set_params()", "path": "modules/generated/sklearn.decomposition.factoranalysis#sklearn.decomposition.FactorAnalysis.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FactorAnalysis.transform()", "path": "modules/generated/sklearn.decomposition.factoranalysis#sklearn.decomposition.FactorAnalysis.transform", "type": "decomposition", "text": "\nApply dimensionality reduction to X using the model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FastICA", "path": "modules/generated/sklearn.decomposition.fastica#sklearn.decomposition.FastICA", "type": "decomposition", "text": "\nFastICA: a fast algorithm for Independent Component Analysis.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.fastica()", "path": "modules/generated/fastica-function#sklearn.decomposition.fastica", "type": "decomposition", "text": "\nPerform Fast Independent Component Analysis.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FastICA()", "path": "modules/generated/sklearn.decomposition.fastica", "type": "decomposition", "text": "\nFastICA: a fast algorithm for Independent Component Analysis.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FastICA.fit()", "path": "modules/generated/sklearn.decomposition.fastica#sklearn.decomposition.FastICA.fit", "type": "decomposition", "text": "\nFit the model to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FastICA.fit_transform()", "path": "modules/generated/sklearn.decomposition.fastica#sklearn.decomposition.FastICA.fit_transform", "type": "decomposition", "text": "\nFit the model and recover the sources from X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FastICA.get_params()", "path": "modules/generated/sklearn.decomposition.fastica#sklearn.decomposition.FastICA.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FastICA.inverse_transform()", "path": "modules/generated/sklearn.decomposition.fastica#sklearn.decomposition.FastICA.inverse_transform", "type": "decomposition", "text": "\nTransform the sources back to the mixed data (apply mixing matrix).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FastICA.set_params()", "path": "modules/generated/sklearn.decomposition.fastica#sklearn.decomposition.FastICA.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.FastICA.transform()", "path": "modules/generated/sklearn.decomposition.fastica#sklearn.decomposition.FastICA.transform", "type": "decomposition", "text": "\nRecover the sources from X (apply the unmixing matrix).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA", "path": "modules/generated/sklearn.decomposition.incrementalpca#sklearn.decomposition.IncrementalPCA", "type": "decomposition", "text": "\nIncremental principal components analysis (IPCA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA()", "path": "modules/generated/sklearn.decomposition.incrementalpca", "type": "decomposition", "text": "\nIncremental principal components analysis (IPCA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA.fit()", "path": "modules/generated/sklearn.decomposition.incrementalpca#sklearn.decomposition.IncrementalPCA.fit", "type": "decomposition", "text": "\nFit the model with X, using minibatches of size batch_size.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA.fit_transform()", "path": "modules/generated/sklearn.decomposition.incrementalpca#sklearn.decomposition.IncrementalPCA.fit_transform", "type": "decomposition", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA.get_covariance()", "path": "modules/generated/sklearn.decomposition.incrementalpca#sklearn.decomposition.IncrementalPCA.get_covariance", "type": "decomposition", "text": "\nCompute data covariance with the generative model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA.get_params()", "path": "modules/generated/sklearn.decomposition.incrementalpca#sklearn.decomposition.IncrementalPCA.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA.get_precision()", "path": "modules/generated/sklearn.decomposition.incrementalpca#sklearn.decomposition.IncrementalPCA.get_precision", "type": "decomposition", "text": "\nCompute data precision matrix with the generative model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA.inverse_transform()", "path": "modules/generated/sklearn.decomposition.incrementalpca#sklearn.decomposition.IncrementalPCA.inverse_transform", "type": "decomposition", "text": "\nTransform data back to its original space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA.partial_fit()", "path": "modules/generated/sklearn.decomposition.incrementalpca#sklearn.decomposition.IncrementalPCA.partial_fit", "type": "decomposition", "text": "\nIncremental fit with X. All of X is processed as a single batch.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA.set_params()", "path": "modules/generated/sklearn.decomposition.incrementalpca#sklearn.decomposition.IncrementalPCA.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.IncrementalPCA.transform()", "path": "modules/generated/sklearn.decomposition.incrementalpca#sklearn.decomposition.IncrementalPCA.transform", "type": "decomposition", "text": "\nApply dimensionality reduction to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.KernelPCA", "path": "modules/generated/sklearn.decomposition.kernelpca#sklearn.decomposition.KernelPCA", "type": "decomposition", "text": "\nKernel Principal component analysis (KPCA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.KernelPCA()", "path": "modules/generated/sklearn.decomposition.kernelpca", "type": "decomposition", "text": "\nKernel Principal component analysis (KPCA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.KernelPCA.fit()", "path": "modules/generated/sklearn.decomposition.kernelpca#sklearn.decomposition.KernelPCA.fit", "type": "decomposition", "text": "\nFit the model from data in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.KernelPCA.fit_transform()", "path": "modules/generated/sklearn.decomposition.kernelpca#sklearn.decomposition.KernelPCA.fit_transform", "type": "decomposition", "text": "\nFit the model from data in X and transform X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.KernelPCA.get_params()", "path": "modules/generated/sklearn.decomposition.kernelpca#sklearn.decomposition.KernelPCA.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.KernelPCA.inverse_transform()", "path": "modules/generated/sklearn.decomposition.kernelpca#sklearn.decomposition.KernelPCA.inverse_transform", "type": "decomposition", "text": "\nTransform X back to original space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.KernelPCA.set_params()", "path": "modules/generated/sklearn.decomposition.kernelpca#sklearn.decomposition.KernelPCA.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.KernelPCA.transform()", "path": "modules/generated/sklearn.decomposition.kernelpca#sklearn.decomposition.KernelPCA.transform", "type": "decomposition", "text": "\nTransform X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.LatentDirichletAllocation", "path": "modules/generated/sklearn.decomposition.latentdirichletallocation#sklearn.decomposition.LatentDirichletAllocation", "type": "decomposition", "text": "\nLatent Dirichlet Allocation with online variational Bayes algorithm\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.LatentDirichletAllocation()", "path": "modules/generated/sklearn.decomposition.latentdirichletallocation", "type": "decomposition", "text": "\nLatent Dirichlet Allocation with online variational Bayes algorithm\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.LatentDirichletAllocation.fit()", "path": "modules/generated/sklearn.decomposition.latentdirichletallocation#sklearn.decomposition.LatentDirichletAllocation.fit", "type": "decomposition", "text": "\nLearn model for the data X with variational Bayes method.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.LatentDirichletAllocation.fit_transform()", "path": "modules/generated/sklearn.decomposition.latentdirichletallocation#sklearn.decomposition.LatentDirichletAllocation.fit_transform", "type": "decomposition", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.LatentDirichletAllocation.get_params()", "path": "modules/generated/sklearn.decomposition.latentdirichletallocation#sklearn.decomposition.LatentDirichletAllocation.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.LatentDirichletAllocation.partial_fit()", "path": "modules/generated/sklearn.decomposition.latentdirichletallocation#sklearn.decomposition.LatentDirichletAllocation.partial_fit", "type": "decomposition", "text": "\nOnline VB with Mini-Batch update.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.LatentDirichletAllocation.perplexity()", "path": "modules/generated/sklearn.decomposition.latentdirichletallocation#sklearn.decomposition.LatentDirichletAllocation.perplexity", "type": "decomposition", "text": "\nCalculate approximate perplexity for data X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.LatentDirichletAllocation.score()", "path": "modules/generated/sklearn.decomposition.latentdirichletallocation#sklearn.decomposition.LatentDirichletAllocation.score", "type": "decomposition", "text": "\nCalculate approximate log-likelihood as score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.LatentDirichletAllocation.set_params()", "path": "modules/generated/sklearn.decomposition.latentdirichletallocation#sklearn.decomposition.LatentDirichletAllocation.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.LatentDirichletAllocation.transform()", "path": "modules/generated/sklearn.decomposition.latentdirichletallocation#sklearn.decomposition.LatentDirichletAllocation.transform", "type": "decomposition", "text": "\nTransform data X according to the fitted model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchDictionaryLearning", "path": "modules/generated/sklearn.decomposition.minibatchdictionarylearning#sklearn.decomposition.MiniBatchDictionaryLearning", "type": "decomposition", "text": "\nMini-batch dictionary learning\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchDictionaryLearning()", "path": "modules/generated/sklearn.decomposition.minibatchdictionarylearning", "type": "decomposition", "text": "\nMini-batch dictionary learning\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchDictionaryLearning.fit()", "path": "modules/generated/sklearn.decomposition.minibatchdictionarylearning#sklearn.decomposition.MiniBatchDictionaryLearning.fit", "type": "decomposition", "text": "\nFit the model from data in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchDictionaryLearning.fit_transform()", "path": "modules/generated/sklearn.decomposition.minibatchdictionarylearning#sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", "type": "decomposition", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchDictionaryLearning.get_params()", "path": "modules/generated/sklearn.decomposition.minibatchdictionarylearning#sklearn.decomposition.MiniBatchDictionaryLearning.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchDictionaryLearning.partial_fit()", "path": "modules/generated/sklearn.decomposition.minibatchdictionarylearning#sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", "type": "decomposition", "text": "\nUpdates the model using the data in X as a mini-batch.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchDictionaryLearning.set_params()", "path": "modules/generated/sklearn.decomposition.minibatchdictionarylearning#sklearn.decomposition.MiniBatchDictionaryLearning.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchDictionaryLearning.transform()", "path": "modules/generated/sklearn.decomposition.minibatchdictionarylearning#sklearn.decomposition.MiniBatchDictionaryLearning.transform", "type": "decomposition", "text": "\nEncode the data as a sparse combination of the dictionary atoms.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchSparsePCA", "path": "modules/generated/sklearn.decomposition.minibatchsparsepca#sklearn.decomposition.MiniBatchSparsePCA", "type": "decomposition", "text": "\nMini-batch Sparse Principal Components Analysis\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchSparsePCA()", "path": "modules/generated/sklearn.decomposition.minibatchsparsepca", "type": "decomposition", "text": "\nMini-batch Sparse Principal Components Analysis\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchSparsePCA.fit()", "path": "modules/generated/sklearn.decomposition.minibatchsparsepca#sklearn.decomposition.MiniBatchSparsePCA.fit", "type": "decomposition", "text": "\nFit the model from data in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchSparsePCA.fit_transform()", "path": "modules/generated/sklearn.decomposition.minibatchsparsepca#sklearn.decomposition.MiniBatchSparsePCA.fit_transform", "type": "decomposition", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchSparsePCA.get_params()", "path": "modules/generated/sklearn.decomposition.minibatchsparsepca#sklearn.decomposition.MiniBatchSparsePCA.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchSparsePCA.set_params()", "path": "modules/generated/sklearn.decomposition.minibatchsparsepca#sklearn.decomposition.MiniBatchSparsePCA.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.MiniBatchSparsePCA.transform()", "path": "modules/generated/sklearn.decomposition.minibatchsparsepca#sklearn.decomposition.MiniBatchSparsePCA.transform", "type": "decomposition", "text": "\nLeast Squares projection of the data onto the sparse components.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.NMF", "path": "modules/generated/sklearn.decomposition.nmf#sklearn.decomposition.NMF", "type": "decomposition", "text": "\nNon-Negative Matrix Factorization (NMF).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.NMF()", "path": "modules/generated/sklearn.decomposition.nmf", "type": "decomposition", "text": "\nNon-Negative Matrix Factorization (NMF).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.NMF.fit()", "path": "modules/generated/sklearn.decomposition.nmf#sklearn.decomposition.NMF.fit", "type": "decomposition", "text": "\nLearn a NMF model for the data X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.NMF.fit_transform()", "path": "modules/generated/sklearn.decomposition.nmf#sklearn.decomposition.NMF.fit_transform", "type": "decomposition", "text": "\nLearn a NMF model for the data X and returns the transformed data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.NMF.get_params()", "path": "modules/generated/sklearn.decomposition.nmf#sklearn.decomposition.NMF.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.NMF.inverse_transform()", "path": "modules/generated/sklearn.decomposition.nmf#sklearn.decomposition.NMF.inverse_transform", "type": "decomposition", "text": "\nTransform data back to its original space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.NMF.set_params()", "path": "modules/generated/sklearn.decomposition.nmf#sklearn.decomposition.NMF.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.NMF.transform()", "path": "modules/generated/sklearn.decomposition.nmf#sklearn.decomposition.NMF.transform", "type": "decomposition", "text": "\nTransform the data X according to the fitted NMF model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.non_negative_factorization()", "path": "modules/generated/sklearn.decomposition.non_negative_factorization#sklearn.decomposition.non_negative_factorization", "type": "decomposition", "text": "\nCompute Non-negative Matrix Factorization (NMF).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA", "type": "decomposition", "text": "\nPrincipal component analysis (PCA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA()", "path": "modules/generated/sklearn.decomposition.pca", "type": "decomposition", "text": "\nPrincipal component analysis (PCA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA.fit()", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA.fit", "type": "decomposition", "text": "\nFit the model with X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA.fit_transform()", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA.fit_transform", "type": "decomposition", "text": "\nFit the model with X and apply the dimensionality reduction on X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA.get_covariance()", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA.get_covariance", "type": "decomposition", "text": "\nCompute data covariance with the generative model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA.get_params()", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA.get_precision()", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA.get_precision", "type": "decomposition", "text": "\nCompute data precision matrix with the generative model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA.inverse_transform()", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA.inverse_transform", "type": "decomposition", "text": "\nTransform data back to its original space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA.score()", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA.score", "type": "decomposition", "text": "\nReturn the average log-likelihood of all samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA.score_samples()", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA.score_samples", "type": "decomposition", "text": "\nReturn the log-likelihood of each sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA.set_params()", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.PCA.transform()", "path": "modules/generated/sklearn.decomposition.pca#sklearn.decomposition.PCA.transform", "type": "decomposition", "text": "\nApply dimensionality reduction to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparseCoder", "path": "modules/generated/sklearn.decomposition.sparsecoder#sklearn.decomposition.SparseCoder", "type": "decomposition", "text": "\nSparse coding\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparseCoder()", "path": "modules/generated/sklearn.decomposition.sparsecoder", "type": "decomposition", "text": "\nSparse coding\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparseCoder.fit()", "path": "modules/generated/sklearn.decomposition.sparsecoder#sklearn.decomposition.SparseCoder.fit", "type": "decomposition", "text": "\nDo nothing and return the estimator unchanged.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparseCoder.fit_transform()", "path": "modules/generated/sklearn.decomposition.sparsecoder#sklearn.decomposition.SparseCoder.fit_transform", "type": "decomposition", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparseCoder.get_params()", "path": "modules/generated/sklearn.decomposition.sparsecoder#sklearn.decomposition.SparseCoder.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparseCoder.set_params()", "path": "modules/generated/sklearn.decomposition.sparsecoder#sklearn.decomposition.SparseCoder.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparseCoder.transform()", "path": "modules/generated/sklearn.decomposition.sparsecoder#sklearn.decomposition.SparseCoder.transform", "type": "decomposition", "text": "\nEncode the data as a sparse combination of the dictionary atoms.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparsePCA", "path": "modules/generated/sklearn.decomposition.sparsepca#sklearn.decomposition.SparsePCA", "type": "decomposition", "text": "\nSparse Principal Components Analysis (SparsePCA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparsePCA()", "path": "modules/generated/sklearn.decomposition.sparsepca", "type": "decomposition", "text": "\nSparse Principal Components Analysis (SparsePCA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparsePCA.fit()", "path": "modules/generated/sklearn.decomposition.sparsepca#sklearn.decomposition.SparsePCA.fit", "type": "decomposition", "text": "\nFit the model from data in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparsePCA.fit_transform()", "path": "modules/generated/sklearn.decomposition.sparsepca#sklearn.decomposition.SparsePCA.fit_transform", "type": "decomposition", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparsePCA.get_params()", "path": "modules/generated/sklearn.decomposition.sparsepca#sklearn.decomposition.SparsePCA.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparsePCA.set_params()", "path": "modules/generated/sklearn.decomposition.sparsepca#sklearn.decomposition.SparsePCA.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.SparsePCA.transform()", "path": "modules/generated/sklearn.decomposition.sparsepca#sklearn.decomposition.SparsePCA.transform", "type": "decomposition", "text": "\nLeast Squares projection of the data onto the sparse components.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.sparse_encode()", "path": "modules/generated/sklearn.decomposition.sparse_encode#sklearn.decomposition.sparse_encode", "type": "decomposition", "text": "\nSparse coding\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.TruncatedSVD", "path": "modules/generated/sklearn.decomposition.truncatedsvd#sklearn.decomposition.TruncatedSVD", "type": "decomposition", "text": "\nDimensionality reduction using truncated SVD (aka LSA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.TruncatedSVD()", "path": "modules/generated/sklearn.decomposition.truncatedsvd", "type": "decomposition", "text": "\nDimensionality reduction using truncated SVD (aka LSA).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.TruncatedSVD.fit()", "path": "modules/generated/sklearn.decomposition.truncatedsvd#sklearn.decomposition.TruncatedSVD.fit", "type": "decomposition", "text": "\nFit model on training data X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.TruncatedSVD.fit_transform()", "path": "modules/generated/sklearn.decomposition.truncatedsvd#sklearn.decomposition.TruncatedSVD.fit_transform", "type": "decomposition", "text": "\nFit model to X and perform dimensionality reduction on X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.TruncatedSVD.get_params()", "path": "modules/generated/sklearn.decomposition.truncatedsvd#sklearn.decomposition.TruncatedSVD.get_params", "type": "decomposition", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.TruncatedSVD.inverse_transform()", "path": "modules/generated/sklearn.decomposition.truncatedsvd#sklearn.decomposition.TruncatedSVD.inverse_transform", "type": "decomposition", "text": "\nTransform X back to its original space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.TruncatedSVD.set_params()", "path": "modules/generated/sklearn.decomposition.truncatedsvd#sklearn.decomposition.TruncatedSVD.set_params", "type": "decomposition", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "decomposition.TruncatedSVD.transform()", "path": "modules/generated/sklearn.decomposition.truncatedsvd#sklearn.decomposition.TruncatedSVD.transform", "type": "decomposition", "text": "\nPerform dimensionality reduction on X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "type": "discriminant_analysis", "text": "\nLinear Discriminant Analysis\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis", "type": "discriminant_analysis", "text": "\nLinear Discriminant Analysis\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis.decision_function()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", "type": "discriminant_analysis", "text": "\nApply decision function to an array of samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis.fit()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", "type": "discriminant_analysis", "text": "\ntraining data and parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis.fit_transform()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", "type": "discriminant_analysis", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis.get_params()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", "type": "discriminant_analysis", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis.predict()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", "type": "discriminant_analysis", "text": "\nPredict class labels for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", "type": "discriminant_analysis", "text": "\nEstimate log probability.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis.predict_proba()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", "type": "discriminant_analysis", "text": "\nEstimate probability.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis.score()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", "type": "discriminant_analysis", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis.set_params()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", "type": "discriminant_analysis", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.LinearDiscriminantAnalysis.transform()", "path": "modules/generated/sklearn.discriminant_analysis.lineardiscriminantanalysis#sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", "type": "discriminant_analysis", "text": "\nProject data to maximize class separation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.QuadraticDiscriminantAnalysis", "path": "modules/generated/sklearn.discriminant_analysis.quadraticdiscriminantanalysis#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "type": "discriminant_analysis", "text": "\nQuadratic Discriminant Analysis\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.QuadraticDiscriminantAnalysis()", "path": "modules/generated/sklearn.discriminant_analysis.quadraticdiscriminantanalysis", "type": "discriminant_analysis", "text": "\nQuadratic Discriminant Analysis\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function()", "path": "modules/generated/sklearn.discriminant_analysis.quadraticdiscriminantanalysis#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", "type": "discriminant_analysis", "text": "\nApply decision function to an array of samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.QuadraticDiscriminantAnalysis.fit()", "path": "modules/generated/sklearn.discriminant_analysis.quadraticdiscriminantanalysis#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", "type": "discriminant_analysis", "text": "\nFit the model according to the given training data and parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.QuadraticDiscriminantAnalysis.get_params()", "path": "modules/generated/sklearn.discriminant_analysis.quadraticdiscriminantanalysis#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", "type": "discriminant_analysis", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.QuadraticDiscriminantAnalysis.predict()", "path": "modules/generated/sklearn.discriminant_analysis.quadraticdiscriminantanalysis#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", "type": "discriminant_analysis", "text": "\nPerform classification on an array of test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba()", "path": "modules/generated/sklearn.discriminant_analysis.quadraticdiscriminantanalysis#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", "type": "discriminant_analysis", "text": "\nReturn log of posterior probabilities of classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba()", "path": "modules/generated/sklearn.discriminant_analysis.quadraticdiscriminantanalysis#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", "type": "discriminant_analysis", "text": "\nReturn posterior probabilities of classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.QuadraticDiscriminantAnalysis.score()", "path": "modules/generated/sklearn.discriminant_analysis.quadraticdiscriminantanalysis#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", "type": "discriminant_analysis", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "discriminant_analysis.QuadraticDiscriminantAnalysis.set_params()", "path": "modules/generated/sklearn.discriminant_analysis.quadraticdiscriminantanalysis#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", "type": "discriminant_analysis", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyClassifier", "path": "modules/generated/sklearn.dummy.dummyclassifier#sklearn.dummy.DummyClassifier", "type": "dummy", "text": "\nDummyClassifier is a classifier that makes predictions using simple rules.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyClassifier()", "path": "modules/generated/sklearn.dummy.dummyclassifier", "type": "dummy", "text": "\nDummyClassifier is a classifier that makes predictions using simple rules.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyClassifier.fit()", "path": "modules/generated/sklearn.dummy.dummyclassifier#sklearn.dummy.DummyClassifier.fit", "type": "dummy", "text": "\nFit the random classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyClassifier.get_params()", "path": "modules/generated/sklearn.dummy.dummyclassifier#sklearn.dummy.DummyClassifier.get_params", "type": "dummy", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyClassifier.predict()", "path": "modules/generated/sklearn.dummy.dummyclassifier#sklearn.dummy.DummyClassifier.predict", "type": "dummy", "text": "\nPerform classification on test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyClassifier.predict_log_proba()", "path": "modules/generated/sklearn.dummy.dummyclassifier#sklearn.dummy.DummyClassifier.predict_log_proba", "type": "dummy", "text": "\nReturn log probability estimates for the test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyClassifier.predict_proba()", "path": "modules/generated/sklearn.dummy.dummyclassifier#sklearn.dummy.DummyClassifier.predict_proba", "type": "dummy", "text": "\nReturn probability estimates for the test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyClassifier.score()", "path": "modules/generated/sklearn.dummy.dummyclassifier#sklearn.dummy.DummyClassifier.score", "type": "dummy", "text": "\nReturns the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyClassifier.set_params()", "path": "modules/generated/sklearn.dummy.dummyclassifier#sklearn.dummy.DummyClassifier.set_params", "type": "dummy", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyRegressor", "path": "modules/generated/sklearn.dummy.dummyregressor#sklearn.dummy.DummyRegressor", "type": "dummy", "text": "\nDummyRegressor is a regressor that makes predictions using simple rules.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyRegressor()", "path": "modules/generated/sklearn.dummy.dummyregressor", "type": "dummy", "text": "\nDummyRegressor is a regressor that makes predictions using simple rules.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyRegressor.fit()", "path": "modules/generated/sklearn.dummy.dummyregressor#sklearn.dummy.DummyRegressor.fit", "type": "dummy", "text": "\nFit the random regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyRegressor.get_params()", "path": "modules/generated/sklearn.dummy.dummyregressor#sklearn.dummy.DummyRegressor.get_params", "type": "dummy", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyRegressor.predict()", "path": "modules/generated/sklearn.dummy.dummyregressor#sklearn.dummy.DummyRegressor.predict", "type": "dummy", "text": "\nPerform classification on test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyRegressor.score()", "path": "modules/generated/sklearn.dummy.dummyregressor#sklearn.dummy.DummyRegressor.score", "type": "dummy", "text": "\nReturns the coefficient of determination R^2 of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "dummy.DummyRegressor.set_params()", "path": "modules/generated/sklearn.dummy.dummyregressor#sklearn.dummy.DummyRegressor.set_params", "type": "dummy", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier", "type": "ensemble", "text": "\nAn AdaBoost classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier", "type": "ensemble", "text": "\nAn AdaBoost classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.decision_function()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.decision_function", "type": "ensemble", "text": "\nCompute the decision function of `X`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.feature_importances_()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.feature_importances_", "type": "ensemble", "text": "\nThe impurity-based feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.fit()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.fit", "type": "ensemble", "text": "\nBuild a boosted classifier from the training set (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.get_params()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.predict()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.predict", "type": "ensemble", "text": "\nPredict classes for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.predict_log_proba()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.predict_log_proba", "type": "ensemble", "text": "\nPredict class log-probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.predict_proba()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.predict_proba", "type": "ensemble", "text": "\nPredict class probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.score()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.score", "type": "ensemble", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.set_params()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.staged_decision_function()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.staged_decision_function", "type": "ensemble", "text": "\nCompute decision function of `X` for each boosting iteration.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.staged_predict()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.staged_predict", "type": "ensemble", "text": "\nReturn staged predictions for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.staged_predict_proba()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", "type": "ensemble", "text": "\nPredict class probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostClassifier.staged_score()", "path": "modules/generated/sklearn.ensemble.adaboostclassifier#sklearn.ensemble.AdaBoostClassifier.staged_score", "type": "ensemble", "text": "\nReturn staged scores for X, y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostRegressor", "path": "modules/generated/sklearn.ensemble.adaboostregressor#sklearn.ensemble.AdaBoostRegressor", "type": "ensemble", "text": "\nAn AdaBoost regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostRegressor()", "path": "modules/generated/sklearn.ensemble.adaboostregressor", "type": "ensemble", "text": "\nAn AdaBoost regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostRegressor.feature_importances_()", "path": "modules/generated/sklearn.ensemble.adaboostregressor#sklearn.ensemble.AdaBoostRegressor.feature_importances_", "type": "ensemble", "text": "\nThe impurity-based feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostRegressor.fit()", "path": "modules/generated/sklearn.ensemble.adaboostregressor#sklearn.ensemble.AdaBoostRegressor.fit", "type": "ensemble", "text": "\nBuild a boosted regressor from the training set (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostRegressor.get_params()", "path": "modules/generated/sklearn.ensemble.adaboostregressor#sklearn.ensemble.AdaBoostRegressor.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostRegressor.predict()", "path": "modules/generated/sklearn.ensemble.adaboostregressor#sklearn.ensemble.AdaBoostRegressor.predict", "type": "ensemble", "text": "\nPredict regression value for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostRegressor.score()", "path": "modules/generated/sklearn.ensemble.adaboostregressor#sklearn.ensemble.AdaBoostRegressor.score", "type": "ensemble", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostRegressor.set_params()", "path": "modules/generated/sklearn.ensemble.adaboostregressor#sklearn.ensemble.AdaBoostRegressor.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostRegressor.staged_predict()", "path": "modules/generated/sklearn.ensemble.adaboostregressor#sklearn.ensemble.AdaBoostRegressor.staged_predict", "type": "ensemble", "text": "\nReturn staged predictions for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.AdaBoostRegressor.staged_score()", "path": "modules/generated/sklearn.ensemble.adaboostregressor#sklearn.ensemble.AdaBoostRegressor.staged_score", "type": "ensemble", "text": "\nReturn staged scores for X, y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier", "path": "modules/generated/sklearn.ensemble.baggingclassifier#sklearn.ensemble.BaggingClassifier", "type": "ensemble", "text": "\nA Bagging classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier()", "path": "modules/generated/sklearn.ensemble.baggingclassifier", "type": "ensemble", "text": "\nA Bagging classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier.decision_function()", "path": "modules/generated/sklearn.ensemble.baggingclassifier#sklearn.ensemble.BaggingClassifier.decision_function", "type": "ensemble", "text": "\nAverage of the decision functions of the base classifiers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier.estimators_samples_()", "path": "modules/generated/sklearn.ensemble.baggingclassifier#sklearn.ensemble.BaggingClassifier.estimators_samples_", "type": "ensemble", "text": "\nThe subset of drawn samples for each base estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier.fit()", "path": "modules/generated/sklearn.ensemble.baggingclassifier#sklearn.ensemble.BaggingClassifier.fit", "type": "ensemble", "text": "\nset (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier.get_params()", "path": "modules/generated/sklearn.ensemble.baggingclassifier#sklearn.ensemble.BaggingClassifier.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier.predict()", "path": "modules/generated/sklearn.ensemble.baggingclassifier#sklearn.ensemble.BaggingClassifier.predict", "type": "ensemble", "text": "\nPredict class for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier.predict_log_proba()", "path": "modules/generated/sklearn.ensemble.baggingclassifier#sklearn.ensemble.BaggingClassifier.predict_log_proba", "type": "ensemble", "text": "\nPredict class log-probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier.predict_proba()", "path": "modules/generated/sklearn.ensemble.baggingclassifier#sklearn.ensemble.BaggingClassifier.predict_proba", "type": "ensemble", "text": "\nPredict class probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier.score()", "path": "modules/generated/sklearn.ensemble.baggingclassifier#sklearn.ensemble.BaggingClassifier.score", "type": "ensemble", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingClassifier.set_params()", "path": "modules/generated/sklearn.ensemble.baggingclassifier#sklearn.ensemble.BaggingClassifier.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingRegressor", "path": "modules/generated/sklearn.ensemble.baggingregressor#sklearn.ensemble.BaggingRegressor", "type": "ensemble", "text": "\nA Bagging regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingRegressor()", "path": "modules/generated/sklearn.ensemble.baggingregressor", "type": "ensemble", "text": "\nA Bagging regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingRegressor.estimators_samples_()", "path": "modules/generated/sklearn.ensemble.baggingregressor#sklearn.ensemble.BaggingRegressor.estimators_samples_", "type": "ensemble", "text": "\nThe subset of drawn samples for each base estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingRegressor.fit()", "path": "modules/generated/sklearn.ensemble.baggingregressor#sklearn.ensemble.BaggingRegressor.fit", "type": "ensemble", "text": "\nset (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingRegressor.get_params()", "path": "modules/generated/sklearn.ensemble.baggingregressor#sklearn.ensemble.BaggingRegressor.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingRegressor.predict()", "path": "modules/generated/sklearn.ensemble.baggingregressor#sklearn.ensemble.BaggingRegressor.predict", "type": "ensemble", "text": "\nPredict regression target for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingRegressor.score()", "path": "modules/generated/sklearn.ensemble.baggingregressor#sklearn.ensemble.BaggingRegressor.score", "type": "ensemble", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.BaggingRegressor.set_params()", "path": "modules/generated/sklearn.ensemble.baggingregressor#sklearn.ensemble.BaggingRegressor.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier", "type": "ensemble", "text": "\nAn extra-trees classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier", "type": "ensemble", "text": "\nAn extra-trees classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier.apply()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier.apply", "type": "ensemble", "text": "\nApply trees in the forest to X, return leaf indices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier.decision_path()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier.decision_path", "type": "ensemble", "text": "\nReturn the decision path in the forest.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier.feature_importances_()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier.feature_importances_", "type": "ensemble", "text": "\nThe impurity-based feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier.fit()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier.fit", "type": "ensemble", "text": "\nBuild a forest of trees from the training set (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier.get_params()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier.predict()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier.predict", "type": "ensemble", "text": "\nPredict class for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier.predict_log_proba()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", "type": "ensemble", "text": "\nPredict class log-probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier.predict_proba()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier.predict_proba", "type": "ensemble", "text": "\nPredict class probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier.score()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier.score", "type": "ensemble", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesClassifier.set_params()", "path": "modules/generated/sklearn.ensemble.extratreesclassifier#sklearn.ensemble.ExtraTreesClassifier.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesRegressor", "path": "modules/generated/sklearn.ensemble.extratreesregressor#sklearn.ensemble.ExtraTreesRegressor", "type": "ensemble", "text": "\nAn extra-trees regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesRegressor()", "path": "modules/generated/sklearn.ensemble.extratreesregressor", "type": "ensemble", "text": "\nAn extra-trees regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesRegressor.apply()", "path": "modules/generated/sklearn.ensemble.extratreesregressor#sklearn.ensemble.ExtraTreesRegressor.apply", "type": "ensemble", "text": "\nApply trees in the forest to X, return leaf indices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesRegressor.decision_path()", "path": "modules/generated/sklearn.ensemble.extratreesregressor#sklearn.ensemble.ExtraTreesRegressor.decision_path", "type": "ensemble", "text": "\nReturn the decision path in the forest.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesRegressor.feature_importances_()", "path": "modules/generated/sklearn.ensemble.extratreesregressor#sklearn.ensemble.ExtraTreesRegressor.feature_importances_", "type": "ensemble", "text": "\nThe impurity-based feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesRegressor.fit()", "path": "modules/generated/sklearn.ensemble.extratreesregressor#sklearn.ensemble.ExtraTreesRegressor.fit", "type": "ensemble", "text": "\nBuild a forest of trees from the training set (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesRegressor.get_params()", "path": "modules/generated/sklearn.ensemble.extratreesregressor#sklearn.ensemble.ExtraTreesRegressor.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesRegressor.predict()", "path": "modules/generated/sklearn.ensemble.extratreesregressor#sklearn.ensemble.ExtraTreesRegressor.predict", "type": "ensemble", "text": "\nPredict regression target for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesRegressor.score()", "path": "modules/generated/sklearn.ensemble.extratreesregressor#sklearn.ensemble.ExtraTreesRegressor.score", "type": "ensemble", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.ExtraTreesRegressor.set_params()", "path": "modules/generated/sklearn.ensemble.extratreesregressor#sklearn.ensemble.ExtraTreesRegressor.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier", "type": "ensemble", "text": "\nGradient Boosting for classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier", "type": "ensemble", "text": "\nGradient Boosting for classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.apply()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.apply", "type": "ensemble", "text": "\nApply trees in the ensemble to X, return leaf indices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.decision_function()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.decision_function", "type": "ensemble", "text": "\nCompute the decision function of `X`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.feature_importances_()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.feature_importances_", "type": "ensemble", "text": "\nThe impurity-based feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.fit()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.fit", "type": "ensemble", "text": "\nFit the gradient boosting model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.get_params()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.predict()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.predict", "type": "ensemble", "text": "\nPredict class for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.predict_log_proba()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", "type": "ensemble", "text": "\nPredict class log-probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.predict_proba()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.predict_proba", "type": "ensemble", "text": "\nPredict class probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.score()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.score", "type": "ensemble", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.set_params()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.staged_decision_function()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", "type": "ensemble", "text": "\nCompute decision function of `X` for each iteration.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.staged_predict()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.staged_predict", "type": "ensemble", "text": "\nPredict class at each stage for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingClassifier.staged_predict_proba()", "path": "modules/generated/sklearn.ensemble.gradientboostingclassifier#sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", "type": "ensemble", "text": "\nPredict class probabilities at each stage for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingRegressor", "path": "modules/generated/sklearn.ensemble.gradientboostingregressor#sklearn.ensemble.GradientBoostingRegressor", "type": "ensemble", "text": "\nGradient Boosting for regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingRegressor()", "path": "modules/generated/sklearn.ensemble.gradientboostingregressor", "type": "ensemble", "text": "\nGradient Boosting for regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingRegressor.apply()", "path": "modules/generated/sklearn.ensemble.gradientboostingregressor#sklearn.ensemble.GradientBoostingRegressor.apply", "type": "ensemble", "text": "\nApply trees in the ensemble to X, return leaf indices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingRegressor.feature_importances_()", "path": "modules/generated/sklearn.ensemble.gradientboostingregressor#sklearn.ensemble.GradientBoostingRegressor.feature_importances_", "type": "ensemble", "text": "\nThe impurity-based feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingRegressor.fit()", "path": "modules/generated/sklearn.ensemble.gradientboostingregressor#sklearn.ensemble.GradientBoostingRegressor.fit", "type": "ensemble", "text": "\nFit the gradient boosting model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingRegressor.get_params()", "path": "modules/generated/sklearn.ensemble.gradientboostingregressor#sklearn.ensemble.GradientBoostingRegressor.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingRegressor.predict()", "path": "modules/generated/sklearn.ensemble.gradientboostingregressor#sklearn.ensemble.GradientBoostingRegressor.predict", "type": "ensemble", "text": "\nPredict regression target for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingRegressor.score()", "path": "modules/generated/sklearn.ensemble.gradientboostingregressor#sklearn.ensemble.GradientBoostingRegressor.score", "type": "ensemble", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingRegressor.set_params()", "path": "modules/generated/sklearn.ensemble.gradientboostingregressor#sklearn.ensemble.GradientBoostingRegressor.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.GradientBoostingRegressor.staged_predict()", "path": "modules/generated/sklearn.ensemble.gradientboostingregressor#sklearn.ensemble.GradientBoostingRegressor.staged_predict", "type": "ensemble", "text": "\nPredict regression target at each stage for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier", "type": "ensemble", "text": "\nHistogram-based Gradient Boosting Classification Tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier", "type": "ensemble", "text": "\nHistogram-based Gradient Boosting Classification Tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier.decision_function()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier.decision_function", "type": "ensemble", "text": "\nCompute the decision function of `X`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier.fit()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier.fit", "type": "ensemble", "text": "\nFit the gradient boosting model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier.get_params()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier.predict()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier.predict", "type": "ensemble", "text": "\nPredict classes for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier.predict_proba()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", "type": "ensemble", "text": "\nPredict class probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier.score()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier.score", "type": "ensemble", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier.set_params()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier.staged_decision_function()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", "type": "ensemble", "text": "\nCompute decision function of `X` for each iteration.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier.staged_predict()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", "type": "ensemble", "text": "\nPredict classes at each iteration.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingClassifier.staged_predict_proba()", "path": "modules/generated/sklearn.ensemble.histgradientboostingclassifier#sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", "type": "ensemble", "text": "\nPredict class probabilities at each iteration.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingRegressor", "path": "modules/generated/sklearn.ensemble.histgradientboostingregressor#sklearn.ensemble.HistGradientBoostingRegressor", "type": "ensemble", "text": "\nHistogram-based Gradient Boosting Regression Tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingRegressor()", "path": "modules/generated/sklearn.ensemble.histgradientboostingregressor", "type": "ensemble", "text": "\nHistogram-based Gradient Boosting Regression Tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingRegressor.fit()", "path": "modules/generated/sklearn.ensemble.histgradientboostingregressor#sklearn.ensemble.HistGradientBoostingRegressor.fit", "type": "ensemble", "text": "\nFit the gradient boosting model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingRegressor.get_params()", "path": "modules/generated/sklearn.ensemble.histgradientboostingregressor#sklearn.ensemble.HistGradientBoostingRegressor.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingRegressor.predict()", "path": "modules/generated/sklearn.ensemble.histgradientboostingregressor#sklearn.ensemble.HistGradientBoostingRegressor.predict", "type": "ensemble", "text": "\nPredict values for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingRegressor.score()", "path": "modules/generated/sklearn.ensemble.histgradientboostingregressor#sklearn.ensemble.HistGradientBoostingRegressor.score", "type": "ensemble", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingRegressor.set_params()", "path": "modules/generated/sklearn.ensemble.histgradientboostingregressor#sklearn.ensemble.HistGradientBoostingRegressor.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.HistGradientBoostingRegressor.staged_predict()", "path": "modules/generated/sklearn.ensemble.histgradientboostingregressor#sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", "type": "ensemble", "text": "\nPredict regression target for each iteration\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.IsolationForest", "path": "modules/generated/sklearn.ensemble.isolationforest#sklearn.ensemble.IsolationForest", "type": "ensemble", "text": "\nIsolation Forest Algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.IsolationForest()", "path": "modules/generated/sklearn.ensemble.isolationforest", "type": "ensemble", "text": "\nIsolation Forest Algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.IsolationForest.decision_function()", "path": "modules/generated/sklearn.ensemble.isolationforest#sklearn.ensemble.IsolationForest.decision_function", "type": "ensemble", "text": "\nAverage anomaly score of X of the base classifiers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.IsolationForest.estimators_samples_()", "path": "modules/generated/sklearn.ensemble.isolationforest#sklearn.ensemble.IsolationForest.estimators_samples_", "type": "ensemble", "text": "\nThe subset of drawn samples for each base estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.IsolationForest.fit()", "path": "modules/generated/sklearn.ensemble.isolationforest#sklearn.ensemble.IsolationForest.fit", "type": "ensemble", "text": "\nFit estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.IsolationForest.fit_predict()", "path": "modules/generated/sklearn.ensemble.isolationforest#sklearn.ensemble.IsolationForest.fit_predict", "type": "ensemble", "text": "\nPerform fit on X and returns labels for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.IsolationForest.get_params()", "path": "modules/generated/sklearn.ensemble.isolationforest#sklearn.ensemble.IsolationForest.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.IsolationForest.predict()", "path": "modules/generated/sklearn.ensemble.isolationforest#sklearn.ensemble.IsolationForest.predict", "type": "ensemble", "text": "\nPredict if a particular sample is an outlier or not.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.IsolationForest.score_samples()", "path": "modules/generated/sklearn.ensemble.isolationforest#sklearn.ensemble.IsolationForest.score_samples", "type": "ensemble", "text": "\nOpposite of the anomaly score defined in the original paper.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.IsolationForest.set_params()", "path": "modules/generated/sklearn.ensemble.isolationforest#sklearn.ensemble.IsolationForest.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier", "type": "ensemble", "text": "\nA random forest classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier", "type": "ensemble", "text": "\nA random forest classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier.apply()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier.apply", "type": "ensemble", "text": "\nApply trees in the forest to X, return leaf indices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier.decision_path()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier.decision_path", "type": "ensemble", "text": "\nReturn the decision path in the forest.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier.feature_importances_()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier.feature_importances_", "type": "ensemble", "text": "\nThe impurity-based feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier.fit()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier.fit", "type": "ensemble", "text": "\nBuild a forest of trees from the training set (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier.get_params()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier.predict()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier.predict", "type": "ensemble", "text": "\nPredict class for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier.predict_log_proba()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier.predict_log_proba", "type": "ensemble", "text": "\nPredict class log-probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier.predict_proba()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier.predict_proba", "type": "ensemble", "text": "\nPredict class probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier.score()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier.score", "type": "ensemble", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestClassifier.set_params()", "path": "modules/generated/sklearn.ensemble.randomforestclassifier#sklearn.ensemble.RandomForestClassifier.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestRegressor", "path": "modules/generated/sklearn.ensemble.randomforestregressor#sklearn.ensemble.RandomForestRegressor", "type": "ensemble", "text": "\nA random forest regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestRegressor()", "path": "modules/generated/sklearn.ensemble.randomforestregressor", "type": "ensemble", "text": "\nA random forest regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestRegressor.apply()", "path": "modules/generated/sklearn.ensemble.randomforestregressor#sklearn.ensemble.RandomForestRegressor.apply", "type": "ensemble", "text": "\nApply trees in the forest to X, return leaf indices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestRegressor.decision_path()", "path": "modules/generated/sklearn.ensemble.randomforestregressor#sklearn.ensemble.RandomForestRegressor.decision_path", "type": "ensemble", "text": "\nReturn the decision path in the forest.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestRegressor.feature_importances_()", "path": "modules/generated/sklearn.ensemble.randomforestregressor#sklearn.ensemble.RandomForestRegressor.feature_importances_", "type": "ensemble", "text": "\nThe impurity-based feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestRegressor.fit()", "path": "modules/generated/sklearn.ensemble.randomforestregressor#sklearn.ensemble.RandomForestRegressor.fit", "type": "ensemble", "text": "\nBuild a forest of trees from the training set (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestRegressor.get_params()", "path": "modules/generated/sklearn.ensemble.randomforestregressor#sklearn.ensemble.RandomForestRegressor.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestRegressor.predict()", "path": "modules/generated/sklearn.ensemble.randomforestregressor#sklearn.ensemble.RandomForestRegressor.predict", "type": "ensemble", "text": "\nPredict regression target for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestRegressor.score()", "path": "modules/generated/sklearn.ensemble.randomforestregressor#sklearn.ensemble.RandomForestRegressor.score", "type": "ensemble", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomForestRegressor.set_params()", "path": "modules/generated/sklearn.ensemble.randomforestregressor#sklearn.ensemble.RandomForestRegressor.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomTreesEmbedding", "path": "modules/generated/sklearn.ensemble.randomtreesembedding#sklearn.ensemble.RandomTreesEmbedding", "type": "ensemble", "text": "\nAn ensemble of totally random trees.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomTreesEmbedding()", "path": "modules/generated/sklearn.ensemble.randomtreesembedding", "type": "ensemble", "text": "\nAn ensemble of totally random trees.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomTreesEmbedding.apply()", "path": "modules/generated/sklearn.ensemble.randomtreesembedding#sklearn.ensemble.RandomTreesEmbedding.apply", "type": "ensemble", "text": "\nApply trees in the forest to X, return leaf indices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomTreesEmbedding.decision_path()", "path": "modules/generated/sklearn.ensemble.randomtreesembedding#sklearn.ensemble.RandomTreesEmbedding.decision_path", "type": "ensemble", "text": "\nReturn the decision path in the forest.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomTreesEmbedding.feature_importances_()", "path": "modules/generated/sklearn.ensemble.randomtreesembedding#sklearn.ensemble.RandomTreesEmbedding.feature_importances_", "type": "ensemble", "text": "\nThe impurity-based feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomTreesEmbedding.fit()", "path": "modules/generated/sklearn.ensemble.randomtreesembedding#sklearn.ensemble.RandomTreesEmbedding.fit", "type": "ensemble", "text": "\nFit estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomTreesEmbedding.fit_transform()", "path": "modules/generated/sklearn.ensemble.randomtreesembedding#sklearn.ensemble.RandomTreesEmbedding.fit_transform", "type": "ensemble", "text": "\nFit estimator and transform dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomTreesEmbedding.get_params()", "path": "modules/generated/sklearn.ensemble.randomtreesembedding#sklearn.ensemble.RandomTreesEmbedding.get_params", "type": "ensemble", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomTreesEmbedding.set_params()", "path": "modules/generated/sklearn.ensemble.randomtreesembedding#sklearn.ensemble.RandomTreesEmbedding.set_params", "type": "ensemble", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.RandomTreesEmbedding.transform()", "path": "modules/generated/sklearn.ensemble.randomtreesembedding#sklearn.ensemble.RandomTreesEmbedding.transform", "type": "ensemble", "text": "\nTransform dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier", "type": "ensemble", "text": "\nStack of estimators with a final classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier()", "path": "modules/generated/sklearn.ensemble.stackingclassifier", "type": "ensemble", "text": "\nStack of estimators with a final classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier.decision_function()", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier.decision_function", "type": "ensemble", "text": "\nPredict decision function for samples in X using\n`final_estimator_.decision_function`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier.fit()", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier.fit", "type": "ensemble", "text": "\nFit the estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier.fit_transform()", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier.fit_transform", "type": "ensemble", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier.get_params()", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier.get_params", "type": "ensemble", "text": "\nGet the parameters of an estimator from the ensemble.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier.n_features_in_()", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier.n_features_in_", "type": "ensemble", "text": "\nNumber of features seen during fit.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier.predict()", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier.predict", "type": "ensemble", "text": "\nPredict target for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier.predict_proba()", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier.predict_proba", "type": "ensemble", "text": "\nPredict class probabilities for X using `final_estimator_.predict_proba`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier.score()", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier.score", "type": "ensemble", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier.set_params()", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier.set_params", "type": "ensemble", "text": "\nSet the parameters of an estimator from the ensemble.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingClassifier.transform()", "path": "modules/generated/sklearn.ensemble.stackingclassifier#sklearn.ensemble.StackingClassifier.transform", "type": "ensemble", "text": "\nReturn class labels or probabilities for X for each estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingRegressor", "path": "modules/generated/sklearn.ensemble.stackingregressor#sklearn.ensemble.StackingRegressor", "type": "ensemble", "text": "\nStack of estimators with a final regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingRegressor()", "path": "modules/generated/sklearn.ensemble.stackingregressor", "type": "ensemble", "text": "\nStack of estimators with a final regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingRegressor.fit()", "path": "modules/generated/sklearn.ensemble.stackingregressor#sklearn.ensemble.StackingRegressor.fit", "type": "ensemble", "text": "\nFit the estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingRegressor.fit_transform()", "path": "modules/generated/sklearn.ensemble.stackingregressor#sklearn.ensemble.StackingRegressor.fit_transform", "type": "ensemble", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingRegressor.get_params()", "path": "modules/generated/sklearn.ensemble.stackingregressor#sklearn.ensemble.StackingRegressor.get_params", "type": "ensemble", "text": "\nGet the parameters of an estimator from the ensemble.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingRegressor.n_features_in_()", "path": "modules/generated/sklearn.ensemble.stackingregressor#sklearn.ensemble.StackingRegressor.n_features_in_", "type": "ensemble", "text": "\nNumber of features seen during fit.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingRegressor.predict()", "path": "modules/generated/sklearn.ensemble.stackingregressor#sklearn.ensemble.StackingRegressor.predict", "type": "ensemble", "text": "\nPredict target for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingRegressor.score()", "path": "modules/generated/sklearn.ensemble.stackingregressor#sklearn.ensemble.StackingRegressor.score", "type": "ensemble", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingRegressor.set_params()", "path": "modules/generated/sklearn.ensemble.stackingregressor#sklearn.ensemble.StackingRegressor.set_params", "type": "ensemble", "text": "\nSet the parameters of an estimator from the ensemble.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.StackingRegressor.transform()", "path": "modules/generated/sklearn.ensemble.stackingregressor#sklearn.ensemble.StackingRegressor.transform", "type": "ensemble", "text": "\nReturn the predictions for X for each estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingClassifier", "path": "modules/generated/sklearn.ensemble.votingclassifier#sklearn.ensemble.VotingClassifier", "type": "ensemble", "text": "\nSoft Voting/Majority Rule classifier for unfitted estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingClassifier()", "path": "modules/generated/sklearn.ensemble.votingclassifier", "type": "ensemble", "text": "\nSoft Voting/Majority Rule classifier for unfitted estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingClassifier.fit()", "path": "modules/generated/sklearn.ensemble.votingclassifier#sklearn.ensemble.VotingClassifier.fit", "type": "ensemble", "text": "\nFit the estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingClassifier.fit_transform()", "path": "modules/generated/sklearn.ensemble.votingclassifier#sklearn.ensemble.VotingClassifier.fit_transform", "type": "ensemble", "text": "\nReturn class labels or probabilities for each estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingClassifier.get_params()", "path": "modules/generated/sklearn.ensemble.votingclassifier#sklearn.ensemble.VotingClassifier.get_params", "type": "ensemble", "text": "\nGet the parameters of an estimator from the ensemble.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingClassifier.predict()", "path": "modules/generated/sklearn.ensemble.votingclassifier#sklearn.ensemble.VotingClassifier.predict", "type": "ensemble", "text": "\nPredict class labels for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingClassifier.predict_proba()", "path": "modules/generated/sklearn.ensemble.votingclassifier#sklearn.ensemble.VotingClassifier.predict_proba", "type": "ensemble", "text": "\nCompute probabilities of possible outcomes for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingClassifier.score()", "path": "modules/generated/sklearn.ensemble.votingclassifier#sklearn.ensemble.VotingClassifier.score", "type": "ensemble", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingClassifier.set_params()", "path": "modules/generated/sklearn.ensemble.votingclassifier#sklearn.ensemble.VotingClassifier.set_params", "type": "ensemble", "text": "\nSet the parameters of an estimator from the ensemble.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingClassifier.transform()", "path": "modules/generated/sklearn.ensemble.votingclassifier#sklearn.ensemble.VotingClassifier.transform", "type": "ensemble", "text": "\nReturn class labels or probabilities for X for each estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingRegressor", "path": "modules/generated/sklearn.ensemble.votingregressor#sklearn.ensemble.VotingRegressor", "type": "ensemble", "text": "\nPrediction voting regressor for unfitted estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingRegressor()", "path": "modules/generated/sklearn.ensemble.votingregressor", "type": "ensemble", "text": "\nPrediction voting regressor for unfitted estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingRegressor.fit()", "path": "modules/generated/sklearn.ensemble.votingregressor#sklearn.ensemble.VotingRegressor.fit", "type": "ensemble", "text": "\nFit the estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingRegressor.fit_transform()", "path": "modules/generated/sklearn.ensemble.votingregressor#sklearn.ensemble.VotingRegressor.fit_transform", "type": "ensemble", "text": "\nReturn class labels or probabilities for each estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingRegressor.get_params()", "path": "modules/generated/sklearn.ensemble.votingregressor#sklearn.ensemble.VotingRegressor.get_params", "type": "ensemble", "text": "\nGet the parameters of an estimator from the ensemble.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingRegressor.predict()", "path": "modules/generated/sklearn.ensemble.votingregressor#sklearn.ensemble.VotingRegressor.predict", "type": "ensemble", "text": "\nPredict regression target for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingRegressor.score()", "path": "modules/generated/sklearn.ensemble.votingregressor#sklearn.ensemble.VotingRegressor.score", "type": "ensemble", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingRegressor.set_params()", "path": "modules/generated/sklearn.ensemble.votingregressor#sklearn.ensemble.VotingRegressor.set_params", "type": "ensemble", "text": "\nSet the parameters of an estimator from the ensemble.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "ensemble.VotingRegressor.transform()", "path": "modules/generated/sklearn.ensemble.votingregressor#sklearn.ensemble.VotingRegressor.transform", "type": "ensemble", "text": "\nReturn predictions for X for each estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: A demo of K-Means clustering on the handwritten digits data", "path": "auto_examples/cluster/plot_kmeans_digits", "type": "Examples", "text": "\nIn this example we compare the various initialization strategies for K-means\nin terms of runtime and quality of the results.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: A demo of structured Ward hierarchical clustering on an image of coins", "path": "auto_examples/cluster/plot_coin_ward_segmentation", "type": "Examples", "text": "\nCompute the segmentation of a 2D image with Ward hierarchical clustering. The\nclustering is spatially constrained in order for each segmented region to be\nin one piece.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: A demo of the mean-shift clustering algorithm", "path": "auto_examples/cluster/plot_mean_shift", "type": "Examples", "text": "\nReference:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: A demo of the Spectral Biclustering algorithm", "path": "auto_examples/bicluster/plot_spectral_biclustering", "type": "Examples", "text": "\nThis example demonstrates how to generate a checkerboard dataset and bicluster\nit using the Spectral Biclustering algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: A demo of the Spectral Co-Clustering algorithm", "path": "auto_examples/bicluster/plot_spectral_coclustering", "type": "Examples", "text": "\nThis example demonstrates how to generate a dataset and bicluster it using the\nSpectral Co-Clustering algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Adjustment for chance in clustering performance evaluation", "path": "auto_examples/cluster/plot_adjusted_for_chance_measures", "type": "Examples", "text": "\nThe following plots demonstrate the impact of the number of clusters and\nnumber of samples on various clustering performance evaluation metrics.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Advanced Plotting With Partial Dependence", "path": "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "type": "Examples", "text": "\nThe `plot_partial_dependence` function returns a `PartialDependenceDisplay`\nobject that can be used for plotting without needing to recalculate the\npartial dependence. In this example, we show how to plot partial dependence\nplots and how to quickly customize the plot with the visualization API.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Agglomerative clustering with and without structure", "path": "auto_examples/cluster/plot_agglomerative_clustering", "type": "Examples", "text": "\nThis example shows the effect of imposing a connectivity graph to capture\nlocal structure in the data. The graph is simply the graph of 20 nearest\nneighbors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Agglomerative clustering with different metrics", "path": "auto_examples/cluster/plot_agglomerative_clustering_metrics", "type": "Examples", "text": "\nDemonstrates the effect of different metrics on the hierarchical clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: An example of K-Means++ initialization", "path": "auto_examples/cluster/plot_kmeans_plusplus", "type": "Examples", "text": "\nAn example to show the output of the `sklearn.cluster.kmeans_plusplus`\nfunction for generating initial seeds for clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Approximate nearest neighbors in TSNE", "path": "auto_examples/neighbors/approximate_nearest_neighbors", "type": "Examples", "text": "\nThis example presents how to chain KNeighborsTransformer and TSNE in a\npipeline. It also shows how to wrap the packages `annoy` and `nmslib` to\nreplace KNeighborsTransformer and perform approximate nearest neighbors. These\npackages can be installed with `pip install annoy nmslib`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Automatic Relevance Determination Regression", "path": "auto_examples/linear_model/plot_ard", "type": "Examples", "text": "\nFit regression model with Bayesian Ridge Regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Balance model complexity and cross-validated score", "path": "auto_examples/model_selection/plot_grid_search_refit_callable", "type": "Examples", "text": "\nThis example balances model complexity and cross-validated score by finding a\ndecent accuracy within 1 standard deviation of the best accuracy score while\nminimising the number of PCA components [1].\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Bayesian Ridge Regression", "path": "auto_examples/linear_model/plot_bayesian_ridge", "type": "Examples", "text": "\nComputes a Bayesian Ridge Regression on a synthetic dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Beta-divergence loss functions", "path": "auto_examples/decomposition/plot_beta_divergence", "type": "Examples", "text": "\nA plot that compares the various Beta-divergence loss functions supported by\nthe Multiplicative-Update (\u2018mu\u2019) solver in `NMF`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Biclustering documents with the Spectral Co-clustering algorithm", "path": "auto_examples/bicluster/plot_bicluster_newsgroups", "type": "Examples", "text": "\nThis example demonstrates the Spectral Co-clustering algorithm on the twenty\nnewsgroups dataset. The \u2018comp.os.ms-windows.misc\u2019 category is excluded because\nit contains many posts containing nothing but data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Blind source separation using FastICA", "path": "auto_examples/decomposition/plot_ica_blind_source_separation", "type": "Examples", "text": "\nAn example of estimating sources from noisy data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Caching nearest neighbors", "path": "auto_examples/neighbors/plot_caching_nearest_neighbors", "type": "Examples", "text": "\nThis examples demonstrates how to precompute the k nearest neighbors before\nusing them in KNeighborsClassifier. KNeighborsClassifier can compute the\nnearest neighbors internally, but precomputing them can have several benefits,\nsuch as finer parameter control, caching for multiple use, or custom\nimplementations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Categorical Feature Support in Gradient Boosting", "path": "auto_examples/ensemble/plot_gradient_boosting_categorical", "type": "Examples", "text": "\nIn this example, we will compare the training times and prediction\nperformances of `HistGradientBoostingRegressor` with different encoding\nstrategies for categorical features. In particular, we will evaluate:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Classification of text documents using sparse features", "path": "auto_examples/text/plot_document_classification_20newsgroups", "type": "Examples", "text": "\nThis is an example showing how scikit-learn can be used to classify documents\nby topics using a bag-of-words approach. This example uses a scipy.sparse\nmatrix to store the features and demonstrates various classifiers that can\nefficiently handle sparse matrices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Classifier Chain", "path": "auto_examples/multioutput/plot_classifier_chain_yeast", "type": "Examples", "text": "\nExample of using classifier chain on a multilabel dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Classifier comparison", "path": "auto_examples/classification/plot_classifier_comparison", "type": "Examples", "text": "\nA comparison of a several classifiers in scikit-learn on synthetic datasets.\nThe point of this example is to illustrate the nature of decision boundaries\nof different classifiers. This should be taken with a grain of salt, as the\nintuition conveyed by these examples does not necessarily carry over to real\ndatasets.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Clustering text documents using k-means", "path": "auto_examples/text/plot_document_clustering", "type": "Examples", "text": "\nThis is an example showing how the scikit-learn can be used to cluster\ndocuments by topics using a bag-of-words approach. This example uses a\nscipy.sparse matrix to store the features instead of standard numpy arrays.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Color Quantization using K-Means", "path": "auto_examples/cluster/plot_color_quantization", "type": "Examples", "text": "\nPerforms a pixel-wise Vector Quantization (VQ) of an image of the summer\npalace (China), reducing the number of colors required to show the image from\n96,615 unique colors to 64, while preserving the overall appearance quality.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Column Transformer with Heterogeneous Data Sources", "path": "auto_examples/compose/plot_column_transformer", "type": "Examples", "text": "\nDatasets can often contain components that require different feature\nextraction and processing pipelines. This scenario might occur when:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Column Transformer with Mixed Types", "path": "auto_examples/compose/plot_column_transformer_mixed_types", "type": "Examples", "text": "\nThis example illustrates how to apply different preprocessing and feature\nextraction pipelines to different subsets of features, using\n`ColumnTransformer`. This is particularly handy for the case of datasets that\ncontain heterogeneous data types, since we may want to scale the numeric\nfeatures and one-hot encode the categorical ones.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Combine predictors using stacking", "path": "auto_examples/ensemble/plot_stack_predictors", "type": "Examples", "text": "\nStacking refers to a method to blend estimators. In this strategy, some\nestimators are individually fitted on some training data while a final\nestimator is trained using the stacked predictions of these base estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Common pitfalls in interpretation of coefficients of linear models", "path": "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "type": "Examples", "text": "\nIn linear models, the target value is modeled as a linear combination of the\nfeatures (see the Linear Models User Guide section for a description of a set\nof linear models available in scikit-learn). Coefficients in multiple linear\nmodels represent the relationship between the given feature, \\\\(X_i\\\\) and the\ntarget, \\\\(y\\\\), assuming that all the other features remain constant\n(conditional dependence). This is different from plotting \\\\(X_i\\\\) versus\n\\\\(y\\\\) and fitting a linear relationship: in that case all possible values of\nthe other features are taken into account in the estimation (marginal\ndependence).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Compact estimator representations", "path": "auto_examples/miscellaneous/plot_changed_only_pprint_parameter", "type": "Examples", "text": "\nThis example illustrates the use of the print_changed_only global parameter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Compare BIRCH and MiniBatchKMeans", "path": "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "type": "Examples", "text": "\nThis example compares the timing of Birch (with and without the global\nclustering step) and MiniBatchKMeans on a synthetic dataset having 100,000\nsamples and 2 features generated using make_blobs.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Compare cross decomposition methods", "path": "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "type": "Examples", "text": "\nSimple usage of various cross decomposition algorithms: - PLSCanonical -\nPLSRegression, with multivariate response, a.k.a. PLS2 - PLSRegression, with\nunivariate response, a.k.a. PLS1 - CCA\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Compare Stochastic learning strategies for MLPClassifier", "path": "auto_examples/neural_networks/plot_mlp_training_curves", "type": "Examples", "text": "\nThis example visualizes some training loss curves for different stochastic\nlearning strategies, including SGD and Adam. Because of time-constraints, we\nuse several small datasets, for which L-BFGS might be more suitable. The\ngeneral trend shown in these examples seems to carry over to larger datasets,\nhowever.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Compare the effect of different scalers on data with outliers", "path": "auto_examples/preprocessing/plot_all_scaling", "type": "Examples", "text": "\nFeature 0 (median income in a block) and feature 5 (number of households) of\nthe California Housing dataset have very different scales and contain some\nvery large outliers. These two characteristics lead to difficulties to\nvisualize the data and, more importantly, they can degrade the predictive\nperformance of many machine learning algorithms. Unscaled data can also slow\ndown or even prevent the convergence of many gradient-based estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparing anomaly detection algorithms for outlier detection on toy datasets", "path": "auto_examples/miscellaneous/plot_anomaly_comparison", "type": "Examples", "text": "\nThis example shows characteristics of different anomaly detection algorithms\non 2D datasets. Datasets contain one or two modes (regions of high density) to\nillustrate the ability of algorithms to cope with multimodal data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparing different clustering algorithms on toy datasets", "path": "auto_examples/cluster/plot_cluster_comparison", "type": "Examples", "text": "\nThis example shows characteristics of different clustering algorithms on\ndatasets that are \u201cinteresting\u201d but still in 2D. With the exception of the\nlast dataset, the parameters of each of these dataset-algorithm pairs has been\ntuned to produce good clustering results. Some algorithms are more sensitive\nto parameter values than others.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparing different hierarchical linkage methods on toy datasets", "path": "auto_examples/cluster/plot_linkage_comparison", "type": "Examples", "text": "\nThis example shows characteristics of different linkage methods for\nhierarchical clustering on datasets that are \u201cinteresting\u201d but still in 2D.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "path": "auto_examples/neighbors/plot_nca_classification", "type": "Examples", "text": "\nAn example comparing nearest neighbors classification with and without\nNeighborhood Components Analysis.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparing random forests and the multi-output meta estimator", "path": "auto_examples/ensemble/plot_random_forest_regression_multioutput", "type": "Examples", "text": "\nAn example to compare multi-output regression with random forest and the\nmultioutput.MultiOutputRegressor meta-estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparing randomized search and grid search for hyperparameter estimation", "path": "auto_examples/model_selection/plot_randomized_search", "type": "Examples", "text": "\nCompare randomized search and grid search for optimizing hyperparameters of a\nlinear SVM with SGD training. All parameters that influence the learning are\nsearched simultaneously (except for the number of estimators, which poses a\ntime / quality tradeoff).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparing various online solvers", "path": "auto_examples/linear_model/plot_sgd_comparison", "type": "Examples", "text": "\nAn example showing how different online solvers perform on the hand-written\ndigits dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparison between grid search and successive halving", "path": "auto_examples/model_selection/plot_successive_halving_heatmap", "type": "Examples", "text": "\nThis example compares the parameter search performed by `HalvingGridSearchCV`\nand `GridSearchCV`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparison of Calibration of Classifiers", "path": "auto_examples/calibration/plot_compare_calibration", "type": "Examples", "text": "\nWell calibrated classifiers are probabilistic classifiers for which the output\nof the predict_proba method can be directly interpreted as a confidence level.\nFor instance a well calibrated (binary) classifier should classify the samples\nsuch that among the samples to which it gave a predict_proba value close to\n0.8, approx. 80% actually belong to the positive class.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparison of F-test and mutual information", "path": "auto_examples/feature_selection/plot_f_test_vs_mi", "type": "Examples", "text": "\nThis example illustrates the differences between univariate F-test statistics\nand mutual information.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparison of kernel ridge and Gaussian process regression", "path": "auto_examples/gaussian_process/plot_compare_gpr_krr", "type": "Examples", "text": "\nBoth kernel ridge regression (KRR) and Gaussian process regression (GPR) learn\na target function by employing internally the \u201ckernel trick\u201d. KRR learns a\nlinear function in the space induced by the respective kernel which\ncorresponds to a non-linear function in the original space. The linear\nfunction in the kernel space is chosen based on the mean-squared error loss\nwith ridge regularization. GPR uses the kernel to define the covariance of a\nprior distribution over the target functions and uses the observed training\ndata to define a likelihood function. Based on Bayes theorem, a (Gaussian)\nposterior distribution over target functions is defined, whose mean is used\nfor prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparison of kernel ridge regression and SVR", "path": "auto_examples/miscellaneous/plot_kernel_ridge_regression", "type": "Examples", "text": "\nBoth kernel ridge regression (KRR) and SVR learn a non-linear function by\nemploying the kernel trick, i.e., they learn a linear function in the space\ninduced by the respective kernel which corresponds to a non-linear function in\nthe original space. They differ in the loss functions (ridge versus epsilon-\ninsensitive loss). In contrast to SVR, fitting a KRR can be done in closed-\nform and is typically faster for medium-sized datasets. On the other hand, the\nlearned model is non-sparse and thus slower than SVR at prediction-time.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparison of LDA and PCA 2D projection of Iris dataset", "path": "auto_examples/decomposition/plot_pca_vs_lda", "type": "Examples", "text": "\nThe Iris dataset represents 3 kind of Iris flowers (Setosa, Versicolour and\nVirginica) with 4 attributes: sepal length, sepal width, petal length and\npetal width.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparison of Manifold Learning methods", "path": "auto_examples/manifold/plot_compare_methods", "type": "Examples", "text": "\nAn illustration of dimensionality reduction on the S-curve dataset with\nvarious manifold learning methods.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "path": "auto_examples/cluster/plot_mini_batch_kmeans", "type": "Examples", "text": "\nWe want to compare the performance of the MiniBatchKMeans and KMeans: the\nMiniBatchKMeans is faster, but gives slightly different results (see Mini\nBatch K-Means).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Compressive sensing", "path": "auto_examples/applications/plot_tomography_l1_reconstruction", "type": "Examples", "text": "\nThis example shows the reconstruction of an image from a set of parallel\nprojections, acquired along different angles. Such a dataset is acquired in\ncomputed tomography (CT).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Concatenating multiple feature extraction methods", "path": "auto_examples/compose/plot_feature_union", "type": "Examples", "text": "\nIn many real-world examples, there are many ways to extract features from a\ndataset. Often it is beneficial to combine several methods to obtain good\nperformance. This example shows how to use `FeatureUnion` to combine features\nobtained by PCA and univariate selection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "path": "auto_examples/mixture/plot_concentration_prior", "type": "Examples", "text": "\nThis example plots the ellipsoids obtained from a toy dataset (mixture of\nthree Gaussians) fitted by the `BayesianGaussianMixture` class models with a\nDirichlet distribution prior\n(`weight_concentration_prior_type='dirichlet_distribution'`) and a Dirichlet\nprocess prior (`weight_concentration_prior_type='dirichlet_process'`). On each\nfigure, we plot the results for three different values of the weight\nconcentration prior.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Confusion matrix", "path": "auto_examples/model_selection/plot_confusion_matrix", "type": "Examples", "text": "\nExample of confusion matrix usage to evaluate the quality of the output of a\nclassifier on the iris data set. The diagonal elements represent the number of\npoints for which the predicted label is equal to the true label, while off-\ndiagonal elements are those that are mislabeled by the classifier. The higher\nthe diagonal values of the confusion matrix the better, indicating many\ncorrect predictions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Cross-validation on diabetes Dataset Exercise", "path": "auto_examples/exercises/plot_cv_diabetes", "type": "Examples", "text": "\nA tutorial exercise which uses cross-validation with linear models.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Cross-validation on Digits Dataset Exercise", "path": "auto_examples/exercises/plot_cv_digits", "type": "Examples", "text": "\nA tutorial exercise using Cross-validation with an SVM on the Digits dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Curve Fitting with Bayesian Ridge Regression", "path": "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "type": "Examples", "text": "\nComputes a Bayesian Ridge Regression of Sinusoids.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "path": "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "type": "Examples", "text": "\nA comparison for the decision boundaries generated on the iris dataset by\nLabel Spreading, Self-training and SVM.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Decision Tree Regression", "path": "auto_examples/tree/plot_tree_regression", "type": "Examples", "text": "\nA 1D regression with decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Decision Tree Regression with AdaBoost", "path": "auto_examples/ensemble/plot_adaboost_regression", "type": "Examples", "text": "\nA decision tree is boosted using the AdaBoost.R2 1 algorithm on a 1D\nsinusoidal dataset with a small amount of Gaussian noise. 299 boosts (300\ndecision trees) is compared with a single decision tree regressor. As the\nnumber of boosts is increased the regressor can fit more detail.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Demo of affinity propagation clustering algorithm", "path": "auto_examples/cluster/plot_affinity_propagation", "type": "Examples", "text": "\nReference: Brendan J. Frey and Delbert Dueck, \u201cClustering by Passing Messages\nBetween Data Points\u201d, Science Feb. 2007\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Demo of DBSCAN clustering algorithm", "path": "auto_examples/cluster/plot_dbscan", "type": "Examples", "text": "\nFinds core samples of high density and expands clusters from them.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Demo of OPTICS clustering algorithm", "path": "auto_examples/cluster/plot_optics", "type": "Examples", "text": "\nFinds core samples of high density and expands clusters from them. This\nexample uses data that is generated so that the clusters have different\ndensities. The `OPTICS` is first used with its Xi cluster detection method,\nand then setting specific thresholds on the reachability, which corresponds to\n`DBSCAN`. We can see that the different clusters of OPTICS\u2019s Xi method can be\nrecovered with different choices of thresholds in DBSCAN.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Demonstrating the different strategies of KBinsDiscretizer", "path": "auto_examples/preprocessing/plot_discretization_strategies", "type": "Examples", "text": "\nThis example presents the different strategies implemented in\nKBinsDiscretizer:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Demonstration of k-means assumptions", "path": "auto_examples/cluster/plot_kmeans_assumptions", "type": "Examples", "text": "\nThis example is meant to illustrate situations where k-means will produce\nunintuitive and possibly unexpected clusters. In the first three plots, the\ninput data does not conform to some implicit assumption that k-means makes and\nundesirable clusters are produced as a result. In the last plot, k-means\nreturns intuitive clusters despite unevenly sized blobs.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "path": "auto_examples/model_selection/plot_multi_metric_evaluation", "type": "Examples", "text": "\nMultiple metric parameter search can be done by setting the `scoring`\nparameter to a list of metric scorer names or a dict mapping the scorer names\nto the scorer callables.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Density Estimation for a Gaussian mixture", "path": "auto_examples/mixture/plot_gmm_pdf", "type": "Examples", "text": "\nPlot the density estimation of a mixture of two Gaussians. Data is generated\nfrom two Gaussians with different centers and covariance matrices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Detection error tradeoff  curve", "path": "auto_examples/model_selection/plot_det", "type": "Examples", "text": "\nIn this example, we compare receiver operating characteristic (ROC) and\ndetection error tradeoff (DET) curves for different classification algorithms\nfor the same classification task.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Digits Classification Exercise", "path": "auto_examples/exercises/plot_digits_classification_exercise", "type": "Examples", "text": "\nA tutorial exercise regarding the use of classification techniques on the\nDigits dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Dimensionality Reduction with Neighborhood Components Analysis", "path": "auto_examples/neighbors/plot_nca_dim_reduction", "type": "Examples", "text": "\nSample usage of Neighborhood Components Analysis for dimensionality reduction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Discrete versus Real AdaBoost", "path": "auto_examples/ensemble/plot_adaboost_hastie_10_2", "type": "Examples", "text": "\nThis example is based on Figure 10.2 from Hastie et al 2009 1 and illustrates\nthe difference in performance between the discrete SAMME 2 boosting algorithm\nand real SAMME.R boosting algorithm. Both algorithms are evaluated on a binary\nclassification task where the target Y is a non-linear function of 10 input\nfeatures.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Early stopping of Gradient Boosting", "path": "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "type": "Examples", "text": "\nGradient boosting is an ensembling technique where several weak learners\n(regression trees) are combined to yield a powerful single model, in an\niterative fashion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Early stopping of Stochastic Gradient Descent", "path": "auto_examples/linear_model/plot_sgd_early_stopping", "type": "Examples", "text": "\nStochastic Gradient Descent is an optimization technique which minimizes a\nloss function in a stochastic fashion, performing a gradient descent step\nsample by sample. In particular, it is a very efficient method to fit linear\nmodels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Effect of transforming the targets in regression model", "path": "auto_examples/compose/plot_transformed_target", "type": "Examples", "text": "\nIn this example, we give an overview of `TransformedTargetRegressor`. We use\ntwo examples to illustrate the benefit of transforming the targets before\nlearning a linear regression model. The first example uses synthetic data\nwhile the second example is based on the Ames housing data set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Effect of varying threshold for self-training", "path": "auto_examples/semi_supervised/plot_self_training_varying_threshold", "type": "Examples", "text": "\nThis example illustrates the effect of a varying threshold on self-training.\nThe `breast_cancer` dataset is loaded, and labels are deleted such that only\n50 out of 569 samples have labels. A `SelfTrainingClassifier` is fitted on\nthis dataset, with varying thresholds.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Empirical evaluation of the impact of k-means initialization", "path": "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "type": "Examples", "text": "\nEvaluate the ability of k-means initializations strategies to make the\nalgorithm convergence robust as measured by the relative standard deviation of\nthe inertia of the clustering (i.e. the sum of squared distances to the\nnearest cluster center).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Examples", "path": "auto_examples/index", "type": "Examples", "text": "\nThese examples illustrate the main features of the releases of scikit-learn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Explicit feature map approximation for RBF kernels", "path": "auto_examples/miscellaneous/plot_kernel_approximation", "type": "Examples", "text": "\nAn example illustrating the approximation of the feature map of an RBF kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Face completion with a multi-output estimators", "path": "auto_examples/miscellaneous/plot_multioutput_face_completion", "type": "Examples", "text": "\nThis example shows the use of multi-output estimator to complete images. The\ngoal is to predict the lower half of a face given its upper half.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Faces dataset decompositions", "path": "auto_examples/decomposition/plot_faces_decomposition", "type": "Examples", "text": "\nThis example applies to The Olivetti faces dataset different unsupervised\nmatrix decomposition (dimension reduction) methods from the module\n`sklearn.decomposition` (see the documentation chapter Decomposing signals in\ncomponents (matrix factorization problems)) .\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Faces recognition example using eigenfaces and SVMs", "path": "auto_examples/applications/plot_face_recognition", "type": "Examples", "text": "\nThe dataset used in this example is a preprocessed excerpt of the \u201cLabeled\nFaces in the Wild\u201d, aka LFW:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Factor Analysis  to visualize patterns", "path": "auto_examples/decomposition/plot_varimax_fa", "type": "Examples", "text": "\nInvestigating the Iris dataset, we see that sepal length, petal length and\npetal width are highly correlated. Sepal width is less redundant. Matrix\ndecomposition techniques can uncover these latent patterns. Applying rotations\nto the resulting components does not inherently improve the predictve value of\nthe derived latent space, but can help visualise their structure; here, for\nexample, the varimax rotation, which is found by maximizing the squared\nvariances of the weights, finds a structure where the second component only\nloads positively on sepal width.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: FastICA on 2D point clouds", "path": "auto_examples/decomposition/plot_ica_vs_pca", "type": "Examples", "text": "\nThis example illustrates visually in the feature space a comparison by results\nusing two different component analysis techniques.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Feature agglomeration", "path": "auto_examples/cluster/plot_digits_agglomeration", "type": "Examples", "text": "\nThese images how similar features are merged together using feature\nagglomeration.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Feature agglomeration vs. univariate selection", "path": "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "type": "Examples", "text": "\nThis example compares 2 dimensionality reduction strategies:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Feature discretization", "path": "auto_examples/preprocessing/plot_discretization_classification", "type": "Examples", "text": "\nA demonstration of feature discretization on synthetic classification\ndatasets. Feature discretization decomposes each feature into a set of bins,\nhere equally distributed in width. The discrete values are then one-hot\nencoded, and given to a linear classifier. This preprocessing enables a non-\nlinear behavior even though the classifier is linear.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Feature importances with forests of trees", "path": "auto_examples/ensemble/plot_forest_importances", "type": "Examples", "text": "\nThis examples shows the use of forests of trees to evaluate the importance of\nfeatures on an artificial classification task. The red bars are the impurity-\nbased feature importances of the forest, along with their inter-trees\nvariability.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Feature transformations with ensembles of trees", "path": "auto_examples/ensemble/plot_feature_transformation", "type": "Examples", "text": "\nTransform your features into a higher dimensional, sparse space. Then train a\nlinear model on these features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: FeatureHasher and DictVectorizer Comparison", "path": "auto_examples/text/plot_hashing_vs_dict_vectorizer", "type": "Examples", "text": "\nCompares FeatureHasher and DictVectorizer by using both to vectorize text\ndocuments.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gaussian Mixture Model Ellipsoids", "path": "auto_examples/mixture/plot_gmm", "type": "Examples", "text": "\nPlot the confidence ellipsoids of a mixture of two Gaussians obtained with\nExpectation Maximisation (`GaussianMixture` class) and Variational Inference\n(`BayesianGaussianMixture` class models with a Dirichlet process prior).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gaussian Mixture Model Selection", "path": "auto_examples/mixture/plot_gmm_selection", "type": "Examples", "text": "\nThis example shows that model selection can be performed with Gaussian Mixture\nModels using information-theoretic criteria (BIC). Model selection concerns\nboth the covariance type and the number of components in the model. In that\ncase, AIC also provides the right result (not shown to save time), but BIC is\nbetter suited if the problem is to identify the right model. Unlike Bayesian\nprocedures, such inferences are prior-free.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gaussian Mixture Model Sine Curve", "path": "auto_examples/mixture/plot_gmm_sin", "type": "Examples", "text": "\nThis example demonstrates the behavior of Gaussian mixture models fit on data\nthat was not sampled from a mixture of Gaussian random variables. The dataset\nis formed by 100 points loosely spaced following a noisy sine curve. There is\ntherefore no ground truth value for the number of Gaussian components.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gaussian process classification  on iris dataset", "path": "auto_examples/gaussian_process/plot_gpc_iris", "type": "Examples", "text": "\nThis example illustrates the predicted probability of GPC for an isotropic and\nanisotropic RBF kernel on a two-dimensional version for the iris-dataset. The\nanisotropic RBF kernel obtains slightly higher log-marginal-likelihood by\nassigning different length-scales to the two feature dimensions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gaussian process regression  on Mauna Loa CO2 data.", "path": "auto_examples/gaussian_process/plot_gpr_co2", "type": "Examples", "text": "\nThis example is based on Section 5.4.3 of \u201cGaussian Processes for Machine\nLearning\u201d [RW2006]. It illustrates an example of complex kernel engineering\nand hyperparameter optimization using gradient ascent on the log-marginal-\nlikelihood. The data consists of the monthly average atmospheric CO2\nconcentrations (in parts per million by volume (ppmv)) collected at the Mauna\nLoa Observatory in Hawaii, between 1958 and 2001. The objective is to model\nthe CO2 concentration as a function of the time t.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gaussian process regression  with noise-level estimation", "path": "auto_examples/gaussian_process/plot_gpr_noisy", "type": "Examples", "text": "\nThis example illustrates that GPR with a sum-kernel including a WhiteKernel\ncan estimate the noise level of data. An illustration of the log-marginal-\nlikelihood (LML) landscape shows that there exist two local maxima of LML. The\nfirst corresponds to a model with a high noise level and a large length scale,\nwhich explains all variations in the data by noise. The second one has a\nsmaller noise level and shorter length scale, which explains most of the\nvariation by the noise-free functional relationship. The second model has a\nhigher likelihood; however, depending on the initial value for the\nhyperparameters, the gradient-based optimization might also converge to the\nhigh-noise solution. It is thus important to repeat the optimization several\ntimes for different initializations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gaussian processes on discrete data structures", "path": "auto_examples/gaussian_process/plot_gpr_on_structured_data", "type": "Examples", "text": "\nThis example illustrates the use of Gaussian processes for regression and\nclassification tasks on data that are not in fixed-length feature vector form.\nThis is achieved through the use of kernel functions that operates directly on\ndiscrete structures such as variable-length sequences, trees, and graphs.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gaussian Processes regression", "path": "auto_examples/gaussian_process/plot_gpr_noisy_targets", "type": "Examples", "text": "\nA simple one-dimensional regression example computed in two different ways:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: GMM covariances", "path": "auto_examples/mixture/plot_gmm_covariances", "type": "Examples", "text": "\nDemonstration of several covariances types for Gaussian mixture models.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gradient Boosting Out-of-Bag estimates", "path": "auto_examples/ensemble/plot_gradient_boosting_oob", "type": "Examples", "text": "\nOut-of-bag (OOB) estimates can be a useful heuristic to estimate the \u201coptimal\u201d\nnumber of boosting iterations. OOB estimates are almost identical to cross-\nvalidation estimates but they can be computed on-the-fly without the need for\nrepeated model fitting. OOB estimates are only available for Stochastic\nGradient Boosting (i.e. `subsample < 1.0`), the estimates are derived from the\nimprovement in loss based on the examples not included in the bootstrap sample\n(the so-called out-of-bag examples). The OOB estimator is a pessimistic\nestimator of the true test loss, but remains a fairly good approximation for a\nsmall number of trees.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gradient Boosting regression", "path": "auto_examples/ensemble/plot_gradient_boosting_regression", "type": "Examples", "text": "\nThis example demonstrates Gradient Boosting to produce a predictive model from\nan ensemble of weak predictive models. Gradient boosting can be used for\nregression and classification problems. Here, we will train a model to tackle\na diabetes regression task. We will obtain the results from\n`GradientBoostingRegressor` with least squares loss and 500 regression trees\nof depth 4.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Gradient Boosting regularization", "path": "auto_examples/ensemble/plot_gradient_boosting_regularization", "type": "Examples", "text": "\nIllustration of the effect of different regularization strategies for Gradient\nBoosting. The example is taken from Hastie et al 2009 1.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Hashing feature transformation using Totally Random Trees", "path": "auto_examples/ensemble/plot_random_forest_embedding", "type": "Examples", "text": "\nRandomTreesEmbedding provides a way to map data to a very high-dimensional,\nsparse representation, which might be beneficial for classification. The\nmapping is completely unsupervised and very efficient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Hierarchical clustering", "path": "auto_examples/cluster/plot_ward_structured_vs_unstructured", "type": "Examples", "text": "\nExample builds a swiss roll dataset and runs hierarchical clustering on their\nposition.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: HuberRegressor vs Ridge on dataset with strong outliers", "path": "auto_examples/linear_model/plot_huber_vs_ridge", "type": "Examples", "text": "\nFit Ridge and HuberRegressor on a dataset with outliers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Illustration of Gaussian process classification  on the XOR dataset", "path": "auto_examples/gaussian_process/plot_gpc_xor", "type": "Examples", "text": "\nThis example illustrates GPC on XOR data. Compared are a stationary, isotropic\nkernel (RBF) and a non-stationary kernel (DotProduct). On this particular\ndataset, the DotProduct kernel obtains considerably better results because the\nclass-boundaries are linear and coincide with the coordinate axes. In general,\nstationary kernels often obtain better results.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Illustration of prior and posterior Gaussian process for different kernels", "path": "auto_examples/gaussian_process/plot_gpr_prior_posterior", "type": "Examples", "text": "\nThis example illustrates the prior and posterior of a GPR with different\nkernels. Mean, standard deviation, and 10 samples are shown for both prior and\nposterior.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Image denoising using dictionary learning", "path": "auto_examples/decomposition/plot_image_denoising", "type": "Examples", "text": "\nAn example comparing the effect of reconstructing noisy fragments of a raccoon\nface image using firstly online Dictionary Learning and various transform\nmethods.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Importance of Feature Scaling", "path": "auto_examples/preprocessing/plot_scaling_importance", "type": "Examples", "text": "\nFeature scaling through standardization (or Z-score normalization) can be an\nimportant preprocessing step for many machine learning algorithms.\nStandardization involves rescaling the features such that they have the\nproperties of a standard normal distribution with a mean of zero and a\nstandard deviation of one.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Imputing missing values before building an estimator", "path": "auto_examples/impute/plot_missing_values", "type": "Examples", "text": "\nMissing values can be replaced by the mean, the median or the most frequent\nvalue using the basic `SimpleImputer`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Imputing missing values with variants of IterativeImputer", "path": "auto_examples/impute/plot_iterative_imputer_variants_comparison", "type": "Examples", "text": "\nThe `IterativeImputer` class is very flexible - it can be used with a variety\nof estimators to do round-robin regression, treating every variable as an\noutput in turn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Incremental PCA", "path": "auto_examples/decomposition/plot_incremental_pca", "type": "Examples", "text": "\nIncremental principal component analysis (IPCA) is typically used as a\nreplacement for principal component analysis (PCA) when the dataset to be\ndecomposed is too large to fit in memory. IPCA builds a low-rank approximation\nfor the input data using an amount of memory which is independent of the\nnumber of input data samples. It is still dependent on the input data\nfeatures, but changing the batch size allows for control of memory usage.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Inductive Clustering", "path": "auto_examples/cluster/plot_inductive_clustering", "type": "Examples", "text": "\nClustering can be expensive, especially when our dataset contains millions of\ndatapoints. Many clustering algorithms are not inductive and so cannot be\ndirectly applied to new data samples without recomputing the clustering, which\nmay be intractable. Instead, we can use clustering to then learn an inductive\nmodel with a classifier, which has several benefits:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Iso-probability lines for Gaussian Processes classification", "path": "auto_examples/gaussian_process/plot_gpc_isoprobability", "type": "Examples", "text": "\nA two-dimensional classification example showing iso-probability lines for the\npredicted probabilities.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: IsolationForest example", "path": "auto_examples/ensemble/plot_isolation_forest", "type": "Examples", "text": "\nAn example using `IsolationForest` for anomaly detection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Isotonic Regression", "path": "auto_examples/miscellaneous/plot_isotonic_regression", "type": "Examples", "text": "\nAn illustration of the isotonic regression on generated data (non-linear\nmonotonic trend with homoscedastic uniform noise).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Joint feature selection with multi-task Lasso", "path": "auto_examples/linear_model/plot_multi_task_lasso_support", "type": "Examples", "text": "\nThe multi-task lasso allows to fit multiple regression problems jointly\nenforcing the selected features to be the same across tasks. This example\nsimulates sequential measurements, each task is a time instant, and the\nrelevant features vary in amplitude over time while being the same. The multi-\ntask lasso imposes that features that are selected at one time point are\nselect for all time point. This makes feature selection by the Lasso more\nstable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: K-means Clustering", "path": "auto_examples/cluster/plot_cluster_iris", "type": "Examples", "text": "\nThe plots display firstly what a K-means algorithm would yield using three\nclusters. It is then shown what the effect of a bad initialization is on the\nclassification process: By setting n_init to only 1 (default is 10), the\namount of times that the algorithm will be run with different centroid seeds\nis reduced. The next plot displays what using eight clusters would deliver and\nfinally the ground truth.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Kernel Density Estimate of Species Distributions", "path": "auto_examples/neighbors/plot_species_kde", "type": "Examples", "text": "\nThis shows an example of a neighbors-based query (in particular a kernel\ndensity estimate) on geospatial data, using a Ball Tree built upon the\nHaversine distance metric \u2013 i.e. distances over points in latitude/longitude.\nThe dataset is provided by Phillips et. al. (2006). If available, the example\nuses basemap to plot the coast lines and national boundaries of South America.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Kernel Density Estimation", "path": "auto_examples/neighbors/plot_digits_kde_sampling", "type": "Examples", "text": "\nThis example shows how kernel density estimation (KDE), a powerful non-\nparametric density estimation technique, can be used to learn a generative\nmodel for a dataset. With this generative model in place, new samples can be\ndrawn. These new samples reflect the underlying model of the data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Kernel PCA", "path": "auto_examples/decomposition/plot_kernel_pca", "type": "Examples", "text": "\nThis example shows that Kernel PCA is able to find a projection of the data\nthat makes data linearly separable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: L1 Penalty and Sparsity in Logistic Regression", "path": "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "type": "Examples", "text": "\nComparison of the sparsity (percentage of zero coefficients) of solutions when\nL1, L2 and Elastic-Net penalty are used for different values of C. We can see\nthat large values of C give more freedom to the model. Conversely, smaller\nvalues of C constrain the model more. In the L1 penalty case, this leads to\nsparser solutions. As expected, the Elastic-Net penalty sparsity is between\nthat of L1 and L2.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Label Propagation digits", "path": "auto_examples/semi_supervised/plot_label_propagation_digits", "type": "Examples", "text": "\nThis example demonstrates the power of semisupervised learning by training a\nLabel Spreading model to classify handwritten digits with sets of very few\nlabels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Label Propagation digits active learning", "path": "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "type": "Examples", "text": "\nDemonstrates an active learning technique to learn handwritten digits using\nlabel propagation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Label Propagation learning a complex structure", "path": "auto_examples/semi_supervised/plot_label_propagation_structure", "type": "Examples", "text": "\nExample of LabelPropagation learning a complex internal structure to\ndemonstrate \u201cmanifold learning\u201d. The outer circle should be labeled \u201cred\u201d and\nthe inner circle \u201cblue\u201d. Because both label groups lie inside their own\ndistinct shape, we can see that the labels propagate correctly around the\ncircle.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Lasso and Elastic Net", "path": "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "type": "Examples", "text": "\nLasso and elastic net (L1 and L2 penalisation) implemented using a coordinate\ndescent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Lasso and Elastic Net for Sparse Signals", "path": "auto_examples/linear_model/plot_lasso_and_elasticnet", "type": "Examples", "text": "\nEstimates Lasso and Elastic-Net regression models on a manually generated\nsparse signal corrupted with an additive noise. Estimated coefficients are\ncompared with the ground-truth.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Lasso model selection", "path": "auto_examples/linear_model/plot_lasso_model_selection", "type": "Examples", "text": "\nUse the Akaike information criterion (AIC), the Bayes Information criterion\n(BIC) and cross-validation to select an optimal value of the regularization\nparameter alpha of the Lasso estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Lasso on dense and sparse data", "path": "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "type": "Examples", "text": "\nWe show that linear_model.Lasso provides the same results for dense and sparse\ndata and that in the case of sparse data the speed is improved.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Lasso path using LARS", "path": "auto_examples/linear_model/plot_lasso_lars", "type": "Examples", "text": "\nComputes Lasso Path along the regularization parameter using the LARS\nalgorithm on the diabetes dataset. Each color represents a different feature\nof the coefficient vector, and this is displayed as a function of the\nregularization parameter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Ledoit-Wolf vs OAS estimation", "path": "auto_examples/covariance/plot_lw_vs_oas", "type": "Examples", "text": "\nThe usual covariance maximum likelihood estimate can be regularized using\nshrinkage. Ledoit and Wolf proposed a close formula to compute the\nasymptotically optimal shrinkage parameter (minimizing a MSE criterion),\nyielding the Ledoit-Wolf covariance estimate.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Libsvm GUI", "path": "auto_examples/applications/svm_gui", "type": "Examples", "text": "\nA simple graphical frontend for Libsvm mainly intended for didactic purposes.\nYou can create data points by point and click and visualize the decision\nregion induced by different kernels and parameter settings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "path": "auto_examples/classification/plot_lda_qda", "type": "Examples", "text": "\nThis example plots the covariance ellipsoids of each class and decision\nboundary learned by LDA and QDA. The ellipsoids display the double standard\ndeviation for each class. With LDA, the standard deviation is the same for all\nthe classes, while each class has its own standard deviation with QDA.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Linear Regression Example", "path": "auto_examples/linear_model/plot_ols", "type": "Examples", "text": "\nThe example below uses only the first feature of the `diabetes` dataset, in\norder to illustrate the data points within the two-dimensional plot. The\nstraight line can be seen in the plot, showing how linear regression attempts\nto draw a straight line that will best minimize the residual sum of squares\nbetween the observed responses in the dataset, and the responses predicted by\nthe linear approximation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Logistic function", "path": "auto_examples/linear_model/plot_logistic", "type": "Examples", "text": "\nShown in the plot is how the logistic regression would, in this synthetic\ndataset, classify values as either 0 or 1, i.e. class one or two, using the\nlogistic curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Logistic Regression 3-class Classifier", "path": "auto_examples/linear_model/plot_iris_logistic", "type": "Examples", "text": "\nShow below is a logistic-regression classifiers decision boundaries on the\nfirst two dimensions (sepal length and width) of the iris dataset. The\ndatapoints are colored according to their labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Manifold Learning methods on a severed sphere", "path": "auto_examples/manifold/plot_manifold_sphere", "type": "Examples", "text": "\nAn application of the different Manifold learning techniques on a spherical\ndata-set. Here one can see the use of dimensionality reduction in order to\ngain some intuition regarding the manifold learning methods. Regarding the\ndataset, the poles are cut from the sphere, as well as a thin slice down its\nside. This enables the manifold learning techniques to \u2018spread it open\u2019 whilst\nprojecting it onto two dimensions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Manifold learning on handwritten digits", "path": "auto_examples/manifold/plot_lle_digits", "type": "Examples", "text": "\nAn illustration of various embeddings on the digits dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Map data to a normal distribution", "path": "auto_examples/preprocessing/plot_map_data_to_normal", "type": "Examples", "text": "\nThis example demonstrates the use of the Box-Cox and Yeo-Johnson transforms\nthrough `PowerTransformer` to map data from various distributions to a normal\ndistribution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: MNIST classification using multinomial logistic + L1", "path": "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "type": "Examples", "text": "\nHere we fit a multinomial logistic regression with L1 penalty on a subset of\nthe MNIST digits classification task. We use the SAGA algorithm for this\npurpose: this a solver that is fast when the number of samples is\nsignificantly larger than the number of features and is able to finely\noptimize non-smooth objective functions which is the case with the l1-penalty.\nTest accuracy reaches > 0.8, while weight vectors remains sparse and therefore\nmore easily interpretable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Model Complexity Influence", "path": "auto_examples/applications/plot_model_complexity_influence", "type": "Examples", "text": "\nDemonstrate how model complexity influences both prediction accuracy and\ncomputational performance.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Model selection with Probabilistic PCA and Factor Analysis", "path": "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "type": "Examples", "text": "\nProbabilistic PCA and Factor Analysis are probabilistic models. The\nconsequence is that the likelihood of new data can be used for model selection\nand covariance estimation. Here we compare PCA and FA with cross-validation on\nlow rank data corrupted with homoscedastic noise (noise variance is the same\nfor each feature) or heteroscedastic noise (noise variance is the different\nfor each feature). In a second step we compare the model likelihood to the\nlikelihoods obtained from shrinkage covariance estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Model-based and sequential feature selection", "path": "auto_examples/feature_selection/plot_select_from_model_diabetes", "type": "Examples", "text": "\nThis example illustrates and compares two approaches for feature selection:\n`SelectFromModel` which is based on feature importance, and\n`SequentialFeatureSelection` which relies on a greedy approach.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Monotonic Constraints", "path": "auto_examples/ensemble/plot_monotonic_constraints", "type": "Examples", "text": "\nThis example illustrates the effect of monotonic constraints on a gradient\nboosting estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Multi-class AdaBoosted Decision Trees", "path": "auto_examples/ensemble/plot_adaboost_multiclass", "type": "Examples", "text": "\nThis example reproduces Figure 1 of Zhu et al 1 and shows how boosting can\nimprove prediction accuracy on a multi-class problem. The classification\ndataset is constructed by taking a ten-dimensional standard normal\ndistribution and defining three classes separated by nested concentric ten-\ndimensional spheres such that roughly equal numbers of samples are in each\nclass (quantiles of the \\\\(\\chi^2\\\\) distribution).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Multi-dimensional scaling", "path": "auto_examples/manifold/plot_mds", "type": "Examples", "text": "\nAn illustration of the metric and non-metric MDS on generated noisy data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Multi-output Decision Tree Regression", "path": "auto_examples/tree/plot_tree_regression_multioutput", "type": "Examples", "text": "\nAn example to illustrate multi-output regression with decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Multiclass sparse logistic regression on 20newgroups", "path": "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "type": "Examples", "text": "\nComparison of multinomial logistic L1 vs one-versus-rest L1 logistic\nregression to classify documents from the newgroups20 dataset. Multinomial\nlogistic regression yields more accurate results and is faster to train on the\nlarger scale dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Multilabel classification", "path": "auto_examples/miscellaneous/plot_multilabel", "type": "Examples", "text": "\nThis example simulates a multi-label document classification problem. The\ndataset is generated randomly based on the following process:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Nearest Centroid Classification", "path": "auto_examples/neighbors/plot_nearest_centroid", "type": "Examples", "text": "\nSample usage of Nearest Centroid classification. It will plot the decision\nboundaries for each class.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Nearest Neighbors Classification", "path": "auto_examples/neighbors/plot_classification", "type": "Examples", "text": "\nSample usage of Nearest Neighbors classification. It will plot the decision\nboundaries for each class.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Nearest Neighbors regression", "path": "auto_examples/neighbors/plot_regression", "type": "Examples", "text": "\nDemonstrate the resolution of a regression problem using a k-Nearest Neighbor\nand the interpolation of the target using both barycenter and constant\nweights.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Neighborhood Components Analysis Illustration", "path": "auto_examples/neighbors/plot_nca_illustration", "type": "Examples", "text": "\nThis example illustrates a learned distance metric that maximizes the nearest\nneighbors classification accuracy. It provides a visual representation of this\nmetric compared to the original point space. Please refer to the User Guide\nfor more information.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Nested versus non-nested cross-validation", "path": "auto_examples/model_selection/plot_nested_cross_validation_iris", "type": "Examples", "text": "\nThis example compares non-nested and nested cross-validation strategies on a\nclassifier of the iris data set. Nested cross-validation (CV) is often used to\ntrain a model in which hyperparameters also need to be optimized. Nested CV\nestimates the generalization error of the underlying model and its\n(hyper)parameter search. Choosing the parameters that maximize non-nested CV\nbiases the model to the dataset, yielding an overly-optimistic score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Non-linear SVM", "path": "auto_examples/svm/plot_svm_nonlinear", "type": "Examples", "text": "\nPerform binary classification using non-linear SVC with RBF kernel. The target\nto predict is a XOR of the inputs.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Non-negative least squares", "path": "auto_examples/linear_model/plot_nnls", "type": "Examples", "text": "\nIn this example, we fit a linear model with positive constraints on the\nregression coefficients and compare the estimated coefficients to a classic\nlinear regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "path": "auto_examples/classification/plot_lda", "type": "Examples", "text": "\nThis example illustrates how the Ledoit-Wolf and Oracle Shrinkage\nApproximating (OAS) estimators of covariance can improve classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Novelty detection with Local Outlier Factor", "path": "auto_examples/neighbors/plot_lof_novelty_detection", "type": "Examples", "text": "\nThe Local Outlier Factor (LOF) algorithm is an unsupervised anomaly detection\nmethod which computes the local density deviation of a given data point with\nrespect to its neighbors. It considers as outliers the samples that have a\nsubstantially lower density than their neighbors. This example shows how to\nuse LOF for novelty detection. Note that when LOF is used for novelty\ndetection you MUST not use predict, decision_function and score_samples on the\ntraining set as this would lead to wrong results. You must only use these\nmethods on new unseen data (which are not in the training set). See User\nGuide: for details on the difference between outlier detection and novelty\ndetection and how to use LOF for outlier detection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: One-class SVM with non-linear kernel", "path": "auto_examples/svm/plot_oneclass", "type": "Examples", "text": "\nAn example using a one-class SVM for novelty detection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Online learning of a dictionary of parts of faces", "path": "auto_examples/cluster/plot_dict_face_patches", "type": "Examples", "text": "\nThis example uses a large dataset of faces to learn a set of 20 x 20 images\npatches that constitute faces.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: OOB Errors for Random Forests", "path": "auto_examples/ensemble/plot_ensemble_oob", "type": "Examples", "text": "\nThe `RandomForestClassifier` is trained using bootstrap aggregation, where\neach new tree is fit from a bootstrap sample of the training observations\n\\\\(z_i = (x_i, y_i)\\\\). The out-of-bag (OOB) error is the average error for\neach \\\\(z_i\\\\) calculated using predictions from the trees that do not contain\n\\\\(z_i\\\\) in their respective bootstrap sample. This allows the\n`RandomForestClassifier` to be fit and validated whilst being trained 1.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Ordinary Least Squares and Ridge Regression Variance", "path": "auto_examples/linear_model/plot_ols_ridge_variance", "type": "Examples", "text": "\nDue to the few points in each dimension and the straight line that linear\nregression uses to follow these points as well as it can, noise on the\nobservations will cause great variance as shown in the first plot. Every\nline\u2019s slope can vary quite a bit for each prediction due to the noise induced\nin the observations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Orthogonal Matching Pursuit", "path": "auto_examples/linear_model/plot_omp", "type": "Examples", "text": "\nUsing orthogonal matching pursuit for recovering a sparse signal from a noisy\nmeasurement encoded with a dictionary\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Out-of-core classification of text documents", "path": "auto_examples/applications/plot_out_of_core_classification", "type": "Examples", "text": "\nThis is an example showing how scikit-learn can be used for classification\nusing an out-of-core approach: learning from data that doesn\u2019t fit into main\nmemory. We make use of an online classifier, i.e., one that supports the\npartial_fit method, that will be fed with batches of examples. To guarantee\nthat the features space remains the same over time we leverage a\nHashingVectorizer that will project each example into the same feature space.\nThis is especially useful in the case of text classification where new\nfeatures (words) may appear in each batch.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Outlier detection on a real data set", "path": "auto_examples/applications/plot_outlier_detection_wine", "type": "Examples", "text": "\nThis example illustrates the need for robust covariance estimation on a real\ndata set. It is useful both for outlier detection and for a better\nunderstanding of the data structure.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Outlier detection with Local Outlier Factor", "path": "auto_examples/neighbors/plot_lof_outlier_detection", "type": "Examples", "text": "\nThe Local Outlier Factor (LOF) algorithm is an unsupervised anomaly detection\nmethod which computes the local density deviation of a given data point with\nrespect to its neighbors. It considers as outliers the samples that have a\nsubstantially lower density than their neighbors. This example shows how to\nuse LOF for outlier detection which is the default use case of this estimator\nin scikit-learn. Note that when LOF is used for outlier detection it has no\npredict, decision_function and score_samples methods. See User Guide: for\ndetails on the difference between outlier detection and novelty detection and\nhow to use LOF for novelty detection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Parameter estimation using grid search with cross-validation", "path": "auto_examples/model_selection/plot_grid_search_digits", "type": "Examples", "text": "\nThis examples shows how a classifier is optimized by cross-validation, which\nis done using the `GridSearchCV` object on a development set that comprises\nonly half of the available labeled data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Partial Dependence and Individual Conditional Expectation Plots", "path": "auto_examples/inspection/plot_partial_dependence", "type": "Examples", "text": "\nPartial dependence plots show the dependence between the target function 2 and\na set of features of interest, marginalizing over the values of all other\nfeatures (the complement features). Due to the limits of human perception, the\nsize of the set of features of interest must be small (usually, one or two)\nthus they are usually chosen among the most important features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: PCA example with Iris Data-set", "path": "auto_examples/decomposition/plot_pca_iris", "type": "Examples", "text": "\nPrincipal Component Analysis applied to the Iris dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Permutation Importance vs Random Forest Feature Importance", "path": "auto_examples/inspection/plot_permutation_importance", "type": "Examples", "text": "\nIn this example, we will compare the impurity-based feature importance of\n`RandomForestClassifier` with the permutation importance on the titanic\ndataset using `permutation_importance`. We will show that the impurity-based\nfeature importance can inflate the importance of numerical features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Permutation Importance with Multicollinear or Correlated Features", "path": "auto_examples/inspection/plot_permutation_importance_multicollinear", "type": "Examples", "text": "\nIn this example, we compute the permutation importance on the Wisconsin breast\ncancer dataset using `permutation_importance`. The `RandomForestClassifier`\ncan easily get about 97% accuracy on a test dataset. Because this dataset\ncontains multicollinear features, the permutation importance will show that\nnone of the features are important. One approach to handling multicollinearity\nis by performing hierarchical clustering on the features\u2019 Spearman rank-order\ncorrelations, picking a threshold, and keeping a single feature from each\ncluster.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Pipeline Anova SVM", "path": "auto_examples/feature_selection/plot_feature_selection_pipeline", "type": "Examples", "text": "\nSimple usage of Pipeline that runs successively a univariate feature selection\nwith anova and then a SVM of the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Pipelining", "path": "auto_examples/compose/plot_digits_pipe", "type": "Examples", "text": "\nThe PCA does an unsupervised dimensionality reduction, while the logistic\nregression does the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Pixel importances with a parallel forest of trees", "path": "auto_examples/ensemble/plot_forest_importances_faces", "type": "Examples", "text": "\nThis example shows the use of forests of trees to evaluate the impurity-based\nimportance of the pixels in an image classification task (faces). The hotter\nthe pixel, the more important.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot class probabilities calculated by the VotingClassifier", "path": "auto_examples/ensemble/plot_voting_probas", "type": "Examples", "text": "\nPlot the class probabilities of the first sample in a toy dataset predicted by\nthree different classifiers and averaged by the `VotingClassifier`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot classification probability", "path": "auto_examples/classification/plot_classification_probability", "type": "Examples", "text": "\nPlot the classification probability for different classifiers. We use a 3\nclass dataset, and we classify it with a Support Vector classifier, L1 and L2\npenalized logistic regression with either a One-Vs-Rest or multinomial\nsetting, and Gaussian process classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot different SVM classifiers in the iris dataset", "path": "auto_examples/svm/plot_iris_svc", "type": "Examples", "text": "\nComparison of different linear SVM classifiers on a 2D projection of the iris\ndataset. We only consider the first 2 features of this dataset:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot Hierarchical Clustering Dendrogram", "path": "auto_examples/cluster/plot_agglomerative_dendrogram", "type": "Examples", "text": "\nThis example plots the corresponding dendrogram of a hierarchical clustering\nusing AgglomerativeClustering and the dendrogram method available in scipy.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot individual and voting regression predictions", "path": "auto_examples/ensemble/plot_voting_regressor", "type": "Examples", "text": "\nA voting regressor is an ensemble meta-estimator that fits several base\nregressors, each on the whole dataset. Then it averages the individual\npredictions to form a final prediction. We will use three different regressors\nto predict the data: `GradientBoostingRegressor`, `RandomForestRegressor`, and\n`LinearRegression`). Then the above 3 regressors will be used for the\n`VotingRegressor`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot multi-class SGD on the iris dataset", "path": "auto_examples/linear_model/plot_sgd_iris", "type": "Examples", "text": "\nPlot decision surface of multi-class SGD on iris dataset. The hyperplanes\ncorresponding to the three one-versus-all (OVA) classifiers are represented by\nthe dashed lines.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot multinomial and One-vs-Rest Logistic Regression", "path": "auto_examples/linear_model/plot_logistic_multinomial", "type": "Examples", "text": "\nPlot decision surface of multinomial and One-vs-Rest Logistic Regression. The\nhyperplanes corresponding to the three One-vs-Rest (OVR) classifiers are\nrepresented by the dashed lines.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot randomly generated classification dataset", "path": "auto_examples/datasets/plot_random_dataset", "type": "Examples", "text": "\nThis example plots several randomly generated classification datasets. For\neasy visualization, all datasets have 2 features, plotted on the x and y axis.\nThe color of each point represents its class label.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot randomly generated multilabel dataset", "path": "auto_examples/datasets/plot_random_multilabel_dataset", "type": "Examples", "text": "\nThis illustrates the `make_multilabel_classification` dataset generator. Each\nsample consists of counts of two features (up to 50 in total), which are\ndifferently distributed in each of two classes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot Ridge coefficients as a function of the L2 regularization", "path": "auto_examples/linear_model/plot_ridge_coeffs", "type": "Examples", "text": "\n`Ridge` Regression is the estimator used in this example. Each color in the\nleft plot represents one different dimension of the coefficient vector, and\nthis is displayed as a function of the regularization parameter. The right\nplot shows how exact the solution is. This example illustrates how a well\ndefined solution is found by Ridge regression and how regularization affects\nthe coefficients and their values. The plot on the right shows how the\ndifference of the coefficients from the estimator changes as a function of\nregularization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot Ridge coefficients as a function of the regularization", "path": "auto_examples/linear_model/plot_ridge_path", "type": "Examples", "text": "\nShows the effect of collinearity in the coefficients of an estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot the decision boundaries of a VotingClassifier", "path": "auto_examples/ensemble/plot_voting_decision_regions", "type": "Examples", "text": "\nPlot the decision boundaries of a `VotingClassifier` for two features of the\nIris dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot the decision surface of a decision tree on the iris dataset", "path": "auto_examples/tree/plot_iris_dtc", "type": "Examples", "text": "\nPlot the decision surface of a decision tree trained on pairs of features of\nthe iris dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot the decision surfaces of ensembles of trees on the iris dataset", "path": "auto_examples/ensemble/plot_forest_iris", "type": "Examples", "text": "\nPlot the decision surfaces of forests of randomized trees trained on pairs of\nfeatures of the iris dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plot the support vectors in LinearSVC", "path": "auto_examples/svm/plot_linearsvc_support_vectors", "type": "Examples", "text": "\nUnlike SVC (based on LIBSVM), LinearSVC (based on LIBLINEAR) does not provide\nthe support vectors. This example demonstrates how to obtain the support\nvectors in LinearSVC.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plotting Cross-Validated Predictions", "path": "auto_examples/model_selection/plot_cv_predict", "type": "Examples", "text": "\nThis example shows how to use `cross_val_predict` to visualize prediction\nerrors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plotting Learning Curves", "path": "auto_examples/model_selection/plot_learning_curve", "type": "Examples", "text": "\nIn the first column, first row the learning curve of a naive Bayes classifier\nis shown for the digits dataset. Note that the training score and the cross-\nvalidation score are both not very good at the end. However, the shape of the\ncurve can be found in more complex datasets very often: the training score is\nvery high at the beginning and decreases and the cross-validation score is\nvery low at the beginning and increases. In the second column, first row we\nsee the learning curve of an SVM with RBF kernel. We can see clearly that the\ntraining score is still around the maximum and the validation score could be\nincreased with more training samples. The plots in the second row show the\ntimes required by the models to train with various sizes of training dataset.\nThe plots in the third row show how much time was required to train the models\nfor each training sizes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Plotting Validation Curves", "path": "auto_examples/model_selection/plot_validation_curve", "type": "Examples", "text": "\nIn this plot you can see the training scores and validation scores of an SVM\nfor different values of the kernel parameter gamma. For very low values of\ngamma, you can see that both the training score and the validation score are\nlow. This is called underfitting. Medium values of gamma will result in high\nvalues for both scores, i.e. the classifier is performing fairly well. If\ngamma is too high, the classifier will overfit, which means that the training\nscore is good but the validation score is poor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Poisson regression and non-normal loss", "path": "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "type": "Examples", "text": "\nThis example illustrates the use of log-linear Poisson regression on the\nFrench Motor Third-Party Liability Claims dataset from 1 and compares it with\na linear model fitted with the usual least squared error and a non-linear GBRT\nmodel fitted with the Poisson loss (and a log-link).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Polynomial interpolation", "path": "auto_examples/linear_model/plot_polynomial_interpolation", "type": "Examples", "text": "\nThis example demonstrates how to approximate a function with a polynomial of\ndegree n_degree by using ridge regression. Concretely, from n_samples 1d\npoints, it suffices to build the Vandermonde matrix, which is n_samples x\nn_degree+1 and has the following form:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Post pruning decision trees with cost complexity pruning", "path": "auto_examples/tree/plot_cost_complexity_pruning", "type": "Examples", "text": "\nThe `DecisionTreeClassifier` provides parameters such as `min_samples_leaf`\nand `max_depth` to prevent a tree from overfiting. Cost complexity pruning\nprovides another option to control the size of a tree. In\n`DecisionTreeClassifier`, this pruning technique is parameterized by the cost\ncomplexity parameter, `ccp_alpha`. Greater values of `ccp_alpha` increase the\nnumber of nodes pruned. Here we only show the effect of `ccp_alpha` on\nregularizing the trees and how to choose a `ccp_alpha` based on validation\nscores.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Precision-Recall", "path": "auto_examples/model_selection/plot_precision_recall", "type": "Examples", "text": "\nExample of Precision-Recall metric to evaluate classifier output quality.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Prediction Intervals for Gradient Boosting Regression", "path": "auto_examples/ensemble/plot_gradient_boosting_quantile", "type": "Examples", "text": "\nThis example shows how quantile regression can be used to create prediction\nintervals.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Prediction Latency", "path": "auto_examples/applications/plot_prediction_latency", "type": "Examples", "text": "\nThis is an example showing the prediction latency of various scikit-learn\nestimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Principal Component Regression vs Partial Least Squares Regression", "path": "auto_examples/cross_decomposition/plot_pcr_vs_pls", "type": "Examples", "text": "\nThis example compares Principal Component Regression (PCR) and Partial Least\nSquares Regression (PLS) on a toy dataset. Our goal is to illustrate how PLS\ncan outperform PCR when the target is strongly correlated with some directions\nin the data that have a low variance.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Principal components analysis", "path": "auto_examples/decomposition/plot_pca_3d", "type": "Examples", "text": "\nThese figures aid in illustrating how a point cloud can be very flat in one\ndirection\u2013which is where PCA comes in to choose a direction that is not flat.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Probabilistic predictions with Gaussian process classification", "path": "auto_examples/gaussian_process/plot_gpc", "type": "Examples", "text": "\nThis example illustrates the predicted probability of GPC for an RBF kernel\nwith different choices of the hyperparameters. The first figure shows the\npredicted probability of GPC with arbitrarily chosen hyperparameters and with\nthe hyperparameters corresponding to the maximum log-marginal-likelihood\n(LML).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Probability Calibration curves", "path": "auto_examples/calibration/plot_calibration_curve", "type": "Examples", "text": "\nWhen performing classification one often wants to predict not only the class\nlabel, but also the associated probability. This probability gives some kind\nof confidence on the prediction. This example demonstrates how to display how\nwell calibrated the predicted probabilities are and how to calibrate an\nuncalibrated classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Probability Calibration for 3-class classification", "path": "auto_examples/calibration/plot_calibration_multiclass", "type": "Examples", "text": "\nThis example illustrates how sigmoid calibration changes predicted\nprobabilities for a 3-class classification problem. Illustrated is the\nstandard 2-simplex, where the three corners correspond to the three classes.\nArrows point from the probability vectors predicted by an uncalibrated\nclassifier to the probability vectors predicted by the same classifier after\nsigmoid calibration on a hold-out validation set. Colors indicate the true\nclass of an instance (red: class 1, green: class 2, blue: class 3).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Probability calibration of classifiers", "path": "auto_examples/calibration/plot_calibration", "type": "Examples", "text": "\nWhen performing classification you often want to predict not only the class\nlabel, but also the associated probability. This probability gives you some\nkind of confidence on the prediction. However, not all classifiers provide\nwell-calibrated probabilities, some being over-confident while others being\nunder-confident. Thus, a separate calibration of predicted probabilities is\noften desirable as a postprocessing. This example illustrates two different\nmethods for this calibration and evaluates the quality of the returned\nprobabilities using Brier\u2019s score (see\nhttps://en.wikipedia.org/wiki/Brier_score).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: RBF SVM parameters", "path": "auto_examples/svm/plot_rbf_parameters", "type": "Examples", "text": "\nThis example illustrates the effect of the parameters `gamma` and `C` of the\nRadial Basis Function (RBF) kernel SVM.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Receiver Operating Characteristic", "path": "auto_examples/model_selection/plot_roc", "type": "Examples", "text": "\nExample of Receiver Operating Characteristic (ROC) metric to evaluate\nclassifier output quality.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Receiver Operating Characteristic  with cross validation", "path": "auto_examples/model_selection/plot_roc_crossval", "type": "Examples", "text": "\nExample of Receiver Operating Characteristic (ROC) metric to evaluate\nclassifier output quality using cross-validation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Recognizing hand-written digits", "path": "auto_examples/classification/plot_digits_classification", "type": "Examples", "text": "\nThis example shows how scikit-learn can be used to recognize images of hand-\nwritten digits, from 0-9.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Recursive feature elimination", "path": "auto_examples/feature_selection/plot_rfe_digits", "type": "Examples", "text": "\nA recursive feature elimination example showing the relevance of pixels in a\ndigit classification task.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Recursive feature elimination with cross-validation", "path": "auto_examples/feature_selection/plot_rfe_with_cross_validation", "type": "Examples", "text": "\nA recursive feature elimination example with automatic tuning of the number of\nfeatures selected with cross-validation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Regularization path of L1- Logistic Regression", "path": "auto_examples/linear_model/plot_logistic_path", "type": "Examples", "text": "\nTrain l1-penalized logistic regression models on a binary classification\nproblem derived from the Iris dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Release Highlights for scikit-learn 0.22", "path": "auto_examples/release_highlights/plot_release_highlights_0_22_0", "type": "Examples", "text": "\nWe are pleased to announce the release of scikit-learn 0.22, which comes with\nmany bug fixes and new features! We detail below a few of the major features\nof this release. For an exhaustive list of all the changes, please refer to\nthe release notes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Release Highlights for scikit-learn 0.23", "path": "auto_examples/release_highlights/plot_release_highlights_0_23_0", "type": "Examples", "text": "\nWe are pleased to announce the release of scikit-learn 0.23! Many bug fixes\nand improvements were added, as well as some new key features. We detail below\na few of the major features of this release. For an exhaustive list of all the\nchanges, please refer to the release notes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Release Highlights for scikit-learn 0.24", "path": "auto_examples/release_highlights/plot_release_highlights_0_24_0", "type": "Examples", "text": "\nWe are pleased to announce the release of scikit-learn 0.24! Many bug fixes\nand improvements were added, as well as some new key features. We detail below\na few of the major features of this release. For an exhaustive list of all the\nchanges, please refer to the release notes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Restricted Boltzmann Machine features for digit classification", "path": "auto_examples/neural_networks/plot_rbm_logistic_classification", "type": "Examples", "text": "\nFor greyscale image data where pixel values can be interpreted as degrees of\nblackness on a white background, like handwritten digit recognition, the\nBernoulli Restricted Boltzmann machine model (`BernoulliRBM`) can perform\neffective non-linear feature extraction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Robust covariance estimation and Mahalanobis distances relevance", "path": "auto_examples/covariance/plot_mahalanobis_distances", "type": "Examples", "text": "\nThis example shows covariance estimation with Mahalanobis distances on\nGaussian distributed data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Robust linear estimator fitting", "path": "auto_examples/linear_model/plot_robust_fit", "type": "Examples", "text": "\nHere a sine function is fit with a polynomial of order 3, for values close to\nzero.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Robust linear model estimation using RANSAC", "path": "auto_examples/linear_model/plot_ransac", "type": "Examples", "text": "\nIn this example we see how to robustly fit a linear model to faulty data using\nthe RANSAC algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Robust vs Empirical covariance estimate", "path": "auto_examples/covariance/plot_robust_vs_empirical_covariance", "type": "Examples", "text": "\nThe usual covariance maximum likelihood estimate is very sensitive to the\npresence of outliers in the data set. In such a case, it would be better to\nuse a robust estimator of covariance to guarantee that the estimation is\nresistant to \u201cerroneous\u201d observations in the data set. 1, 2\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: ROC Curve with Visualization API", "path": "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "type": "Examples", "text": "\nScikit-learn defines a simple API for creating visualizations for machine\nlearning. The key features of this API is to allow for quick plotting and\nvisual adjustments without recalculation. In this example, we will demonstrate\nhow to use the visualization API by comparing ROC curves.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Sample pipeline for text feature extraction and evaluation", "path": "auto_examples/model_selection/grid_search_text_feature_extraction", "type": "Examples", "text": "\nThe dataset used in this example is the 20 newsgroups dataset which will be\nautomatically downloaded and then cached and reused for the document\nclassification example.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Scalable learning with polynomial kernel aproximation", "path": "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "type": "Examples", "text": "\nThis example illustrates the use of `PolynomialCountSketch` to efficiently\ngenerate polynomial kernel feature-space approximations. This is used to train\nlinear classifiers that approximate the accuracy of kernelized ones.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Scaling the regularization parameter for SVCs", "path": "auto_examples/svm/plot_svm_scale_c", "type": "Examples", "text": "\nThe following example illustrates the effect of scaling the regularization\nparameter when using Support Vector Machines for classification. For SVC\nclassification, we are interested in a risk minimization for the equation:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Segmenting the picture of greek coins in regions", "path": "auto_examples/cluster/plot_coin_segmentation", "type": "Examples", "text": "\nThis example uses Spectral clustering on a graph created from voxel-to-voxel\ndifference on an image to break this image into multiple partly-homogeneous\nregions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Selecting dimensionality reduction with Pipeline and GridSearchCV", "path": "auto_examples/compose/plot_compare_reduction", "type": "Examples", "text": "\nThis example constructs a pipeline that does dimensionality reduction followed\nby prediction with a support vector classifier. It demonstrates the use of\n`GridSearchCV` and `Pipeline` to optimize over different classes of estimators\nin a single CV run \u2013 unsupervised `PCA` and `NMF` dimensionality reductions\nare compared to univariate feature selection during the grid search.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Selecting the number of clusters with silhouette analysis on KMeans clustering", "path": "auto_examples/cluster/plot_kmeans_silhouette_analysis", "type": "Examples", "text": "\nSilhouette analysis can be used to study the separation distance between the\nresulting clusters. The silhouette plot displays a measure of how close each\npoint in one cluster is to points in the neighboring clusters and thus\nprovides a way to assess parameters like number of clusters visually. This\nmeasure has a range of [-1, 1].\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Semi-supervised Classification on a Text Dataset", "path": "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "type": "Examples", "text": "\nIn this example, semi-supervised classifiers are trained on the 20 newsgroups\ndataset (which will be automatically downloaded).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SGD: convex loss functions", "path": "auto_examples/linear_model/plot_sgd_loss_functions", "type": "Examples", "text": "\nA plot that compares the various convex loss functions supported by\n`SGDClassifier` .\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SGD: Maximum margin separating hyperplane", "path": "auto_examples/linear_model/plot_sgd_separating_hyperplane", "type": "Examples", "text": "\nPlot the maximum margin separating hyperplane within a two-class separable\ndataset using a linear Support Vector Machines classifier trained using SGD.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SGD: Penalties", "path": "auto_examples/linear_model/plot_sgd_penalties", "type": "Examples", "text": "\nContours of where the penalty is equal to 1 for the three penalties L1, L2 and\nelastic-net.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SGD: Weighted samples", "path": "auto_examples/linear_model/plot_sgd_weighted_samples", "type": "Examples", "text": "\nPlot decision function of a weighted dataset, where the size of points is\nproportional to its weight.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Shrinkage covariance estimation", "path": "auto_examples/covariance/plot_covariance_estimation", "type": "Examples", "text": "\nWhen working with covariance estimation, the usual approach is to use a\nmaximum likelihood estimator, such as the `EmpiricalCovariance`. It is\nunbiased, i.e. it converges to the true (population) covariance when given\nmany observations. However, it can also be beneficial to regularize it, in\norder to reduce its variance; this, in turn, introduces some bias. This\nexample illustrates the simple regularization used in Shrunk Covariance\nestimators. In particular, it focuses on how to set the amount of\nregularization, i.e. how to choose the bias-variance trade-off.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Simple 1D Kernel Density Estimation", "path": "auto_examples/neighbors/plot_kde_1d", "type": "Examples", "text": "\nThis example uses the `KernelDensity` class to demonstrate the principles of\nKernel Density Estimation in one dimension.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Single estimator versus bagging", "path": "auto_examples/ensemble/plot_bias_variance", "type": "Examples", "text": "\nThis example illustrates and compares the bias-variance decomposition of the\nexpected mean squared error of a single estimator against a bagging ensemble.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Sparse coding with a precomputed dictionary", "path": "auto_examples/decomposition/plot_sparse_coding", "type": "Examples", "text": "\nTransform a signal as a sparse combination of Ricker wavelets. This example\nvisually compares different sparse coding methods using the `SparseCoder`\nestimator. The Ricker (also known as Mexican hat or the second derivative of a\nGaussian) is not a particularly good kernel to represent piecewise constant\nsignals like this one. It can therefore be seen how much adding different\nwidths of atoms matters and it therefore motivates learning the dictionary to\nbest fit your type of signals.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Sparse inverse covariance estimation", "path": "auto_examples/covariance/plot_sparse_cov", "type": "Examples", "text": "\nUsing the GraphicalLasso estimator to learn a covariance and sparse precision\nfrom a small number of samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Sparsity Example", "path": "auto_examples/linear_model/plot_ols_3d", "type": "Examples", "text": "\nFeatures 1 and 2 of the diabetes-dataset are fitted and plotted below. It\nillustrates that although feature 2 has a strong coefficient on the full\nmodel, it does not give us much regarding `y` when compared to just feature 1\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Species distribution modeling", "path": "auto_examples/applications/plot_species_distribution_modeling", "type": "Examples", "text": "\nModeling species\u2019 geographic distributions is an important problem in\nconservation biology. In this example we model the geographic distribution of\ntwo south american mammals given past observations and 14 environmental\nvariables. Since we have only positive examples (there are no unsuccessful\nobservations), we cast this problem as a density estimation problem and use\nthe `OneClassSVM` as our modeling tool. The dataset is provided by Phillips\net. al. (2006). If available, the example uses basemap to plot the coast lines\nand national boundaries of South America.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Spectral clustering for image segmentation", "path": "auto_examples/cluster/plot_segmentation_toy", "type": "Examples", "text": "\nIn this example, an image with connected circles is generated and spectral\nclustering is used to separate the circles.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Statistical comparison of models using grid search", "path": "auto_examples/model_selection/plot_grid_search_stats", "type": "Examples", "text": "\nThis example illustrates how to statistically compare the performance of\nmodels trained and evaluated using `GridSearchCV`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Successive Halving Iterations", "path": "auto_examples/model_selection/plot_successive_halving_iterations", "type": "Examples", "text": "\nThis example illustrates how a successive halving search\n(`HalvingGridSearchCV` and `HalvingRandomSearchCV`) iteratively chooses the\nbest parameter combination out of multiple candidates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Support Vector Regression  using linear and non-linear kernels", "path": "auto_examples/svm/plot_svm_regression", "type": "Examples", "text": "\nToy example of 1D regression using linear, polynomial and RBF kernels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SVM Exercise", "path": "auto_examples/exercises/plot_iris_exercise", "type": "Examples", "text": "\nA tutorial exercise for using different SVM kernels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SVM Margins Example", "path": "auto_examples/svm/plot_svm_margin", "type": "Examples", "text": "\nThe plots below illustrate the effect the parameter `C` has on the separation\nline. A large value of `C` basically tells our model that we do not have that\nmuch faith in our data\u2019s distribution, and will only consider points close to\nline of separation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SVM Tie Breaking Example", "path": "auto_examples/svm/plot_svm_tie_breaking", "type": "Examples", "text": "\nTie breaking is costly if `decision_function_shape='ovr'`, and therefore it is\nnot enabled by default. This example illustrates the effect of the\n`break_ties` parameter for a multiclass classification problem and\n`decision_function_shape='ovr'`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SVM with custom kernel", "path": "auto_examples/svm/plot_custom_kernel", "type": "Examples", "text": "\nSimple usage of Support Vector Machines to classify a sample. It will plot the\ndecision surface and the support vectors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SVM-Anova", "path": "auto_examples/svm/plot_svm_anova", "type": "Examples", "text": "\nThis example shows how to perform univariate feature selection before running\na SVC (support vector classifier) to improve the classification scores. We use\nthe iris dataset (4 features) and add 36 non-informative features. We can find\nthat our model achieves best performance when we select around 10% of\nfeatures.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SVM-Kernels", "path": "auto_examples/svm/plot_svm_kernels", "type": "Examples", "text": "\nThree different types of SVM-Kernels are displayed below. The polynomial and\nRBF are especially useful when the data-points are not linearly separable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SVM: Maximum margin separating hyperplane", "path": "auto_examples/svm/plot_separating_hyperplane", "type": "Examples", "text": "\nPlot the maximum margin separating hyperplane within a two-class separable\ndataset using a Support Vector Machine classifier with linear kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SVM: Separating hyperplane for unbalanced classes", "path": "auto_examples/svm/plot_separating_hyperplane_unbalanced", "type": "Examples", "text": "\nFind the optimal separating hyperplane using an SVC for classes that are\nunbalanced.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: SVM: Weighted samples", "path": "auto_examples/svm/plot_weighted_samples", "type": "Examples", "text": "\nPlot decision function of a weighted dataset, where the size of points is\nproportional to its weight.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Swiss Roll reduction with LLE", "path": "auto_examples/manifold/plot_swissroll", "type": "Examples", "text": "\nAn illustration of Swiss Roll reduction with locally linear embedding\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: t-SNE: The effect of various perplexity values on the shape", "path": "auto_examples/manifold/plot_t_sne_perplexity", "type": "Examples", "text": "\nAn illustration of t-SNE on the two concentric circles and the S-curve\ndatasets for different perplexity values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Test with permutations the significance of a classification score", "path": "auto_examples/feature_selection/plot_permutation_test_for_classification", "type": "Examples", "text": "\nThis example demonstrates the use of `permutation_test_score` to evaluate the\nsignificance of a cross-valdiated score using permutations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: The Digit Dataset", "path": "auto_examples/datasets/plot_digits_last_image", "type": "Examples", "text": "\nThis dataset is made up of 1797 8x8 images. Each image, like the one shown\nbelow, is of a hand-written digit. In order to utilize an 8x8 figure like\nthis, we\u2019d have to first transform it into a feature vector with length 64.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: The Iris Dataset", "path": "auto_examples/datasets/plot_iris_dataset", "type": "Examples", "text": "\nThis data sets consists of 3 different types of irises\u2019 (Setosa, Versicolour,\nand Virginica) petal and sepal length, stored in a 150x4 numpy.ndarray\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: The Johnson-Lindenstrauss bound for embedding with random projections", "path": "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "type": "Examples", "text": "\nThe Johnson-Lindenstrauss lemma states that any high dimensional dataset can\nbe randomly projected into a lower dimensional Euclidean space while\ncontrolling the distortion in the pairwise distances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Theil-Sen Regression", "path": "auto_examples/linear_model/plot_theilsen", "type": "Examples", "text": "\nComputes a Theil-Sen Regression on a synthetic dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "path": "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "type": "Examples", "text": "\nThis is an example of applying `NMF` and `LatentDirichletAllocation` on a\ncorpus of documents and extract additive models of the topic structure of the\ncorpus. The output is a plot of topics, each represented as bar plot using top\nfew words based on weights.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Train error vs Test error", "path": "auto_examples/model_selection/plot_train_error_vs_test_error", "type": "Examples", "text": "\nIllustration of how the performance of an estimator on unseen data (test data)\nis not the same as the performance on training data. As the regularization\nincreases the performance on train decreases while the performance on test is\noptimal within a range of values of the regularization parameter. The example\nwith an Elastic-Net regression model and the performance is measured using the\nexplained variance a.k.a. R^2.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Tweedie regression on insurance claims", "path": "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "type": "Examples", "text": "\nThis example illustrates the use of Poisson, Gamma and Tweedie regression on\nthe French Motor Third-Party Liability Claims dataset, and is inspired by an R\ntutorial 1.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Two-class AdaBoost", "path": "auto_examples/ensemble/plot_adaboost_twoclass", "type": "Examples", "text": "\nThis example fits an AdaBoosted decision stump on a non-linearly separable\nclassification dataset composed of two \u201cGaussian quantiles\u201d clusters (see\n`sklearn.datasets.make_gaussian_quantiles`) and plots the decision boundary\nand decision scores. The distributions of decision scores are shown separately\nfor samples of class A and B. The predicted class label for each sample is\ndetermined by the sign of the decision score. Samples with decision scores\ngreater than zero are classified as B, and are otherwise classified as A. The\nmagnitude of a decision score determines the degree of likeness with the\npredicted class label. Additionally, a new dataset could be constructed\ncontaining a desired purity of class B, for example, by only selecting samples\nwith a decision score above some value.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Underfitting vs. Overfitting", "path": "auto_examples/model_selection/plot_underfitting_overfitting", "type": "Examples", "text": "\nThis example demonstrates the problems of underfitting and overfitting and how\nwe can use linear regression with polynomial features to approximate nonlinear\nfunctions. The plot shows the function that we want to approximate, which is a\npart of the cosine function. In addition, the samples from the real function\nand the approximations of different models are displayed. The models have\npolynomial features of different degrees. We can see that a linear function\n(polynomial with degree 1) is not sufficient to fit the training samples. This\nis called underfitting. A polynomial of degree 4 approximates the true\nfunction almost perfectly. However, for higher degrees the model will overfit\nthe training data, i.e. it learns the noise of the training data. We evaluate\nquantitatively overfitting / underfitting by using cross-validation. We\ncalculate the mean squared error (MSE) on the validation set, the higher, the\nless likely the model generalizes correctly from the training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Understanding the decision tree structure", "path": "auto_examples/tree/plot_unveil_tree_structure", "type": "Examples", "text": "\nThe decision tree structure can be analysed to gain further insight on the\nrelation between the features and the target to predict. In this example, we\nshow how to retrieve:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Univariate Feature Selection", "path": "auto_examples/feature_selection/plot_feature_selection", "type": "Examples", "text": "\nAn example showing univariate feature selection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Using KBinsDiscretizer to discretize continuous features", "path": "auto_examples/preprocessing/plot_discretization", "type": "Examples", "text": "\nThe example compares prediction result of linear regression (linear model) and\ndecision tree (tree based model) with and without discretization of real-\nvalued features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Various Agglomerative Clustering on a 2D embedding of digits", "path": "auto_examples/cluster/plot_digits_linkage", "type": "Examples", "text": "\nAn illustration of various linkage option for agglomerative clustering on a 2D\nembedding of the digits dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Varying regularization in Multi-layer Perceptron", "path": "auto_examples/neural_networks/plot_mlp_alpha", "type": "Examples", "text": "\nA comparison of different values for regularization parameter \u2018alpha\u2019 on\nsynthetic datasets. The plot shows that different alphas yield different\ndecision functions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Vector Quantization Example", "path": "auto_examples/cluster/plot_face_compress", "type": "Examples", "text": "\nFace, a 1024 x 768 size image of a raccoon face, is used here to illustrate\nhow `k`-means is used for vector quantization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Visualization of MLP weights on MNIST", "path": "auto_examples/neural_networks/plot_mnist_filters", "type": "Examples", "text": "\nSometimes looking at the learned coefficients of a neural network can provide\ninsight into the learning behavior. For example if weights look unstructured,\nmaybe some were not used at all, or if very large coefficients exist, maybe\nregularization was too low or the learning rate too high.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Visualizations with Display Objects", "path": "auto_examples/miscellaneous/plot_display_object_visualization", "type": "Examples", "text": "\nIn this example, we will construct display objects, `ConfusionMatrixDisplay`,\n`RocCurveDisplay`, and `PrecisionRecallDisplay` directly from their respective\nmetrics. This is an alternative to using their corresponding plot functions\nwhen a model\u2019s predictions are already computed or expensive to compute. Note\nthat this is advanced usage, and in general we recommend using their\nrespective plot functions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Visualizing cross-validation behavior in scikit-learn", "path": "auto_examples/model_selection/plot_cv_indices", "type": "Examples", "text": "\nChoosing the right cross-validation object is a crucial part of fitting a\nmodel properly. There are many ways to split data into training and test sets\nin order to avoid model overfitting, to standardize the number of groups in\ntest sets, etc.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Visualizing the stock market structure", "path": "auto_examples/applications/plot_stock_market", "type": "Examples", "text": "\nThis example employs several unsupervised learning techniques to extract the\nstock market structure from variations in historical quotes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Example: Wikipedia principal eigenvector", "path": "auto_examples/applications/wikipedia_principal_eigenvector", "type": "Examples", "text": "\nA classical way to assert the relative importance of vertices in a graph is to\ncompute the principal eigenvector of the adjacency matrix so as to assign to\neach vertex the values of the components of the first eigenvector as a\ncentrality score:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.ConvergenceWarning", "path": "modules/generated/sklearn.exceptions.convergencewarning#sklearn.exceptions.ConvergenceWarning", "type": "exceptions", "text": "\nCustom warning to capture convergence problems\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.ConvergenceWarning", "path": "modules/generated/sklearn.exceptions.convergencewarning", "type": "exceptions", "text": "\nCustom warning to capture convergence problems\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.ConvergenceWarning.with_traceback()", "path": "modules/generated/sklearn.exceptions.convergencewarning#sklearn.exceptions.ConvergenceWarning.with_traceback", "type": "exceptions", "text": "\nException.with_traceback(tb) \u2013 set self.__traceback__ to tb and return self.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.DataConversionWarning", "path": "modules/generated/sklearn.exceptions.dataconversionwarning", "type": "exceptions", "text": "\nWarning used to notify implicit data conversions happening in the code.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.DataConversionWarning", "path": "modules/generated/sklearn.exceptions.dataconversionwarning#sklearn.exceptions.DataConversionWarning", "type": "exceptions", "text": "\nWarning used to notify implicit data conversions happening in the code.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.DataConversionWarning.with_traceback()", "path": "modules/generated/sklearn.exceptions.dataconversionwarning#sklearn.exceptions.DataConversionWarning.with_traceback", "type": "exceptions", "text": "\nException.with_traceback(tb) \u2013 set self.__traceback__ to tb and return self.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.DataDimensionalityWarning", "path": "modules/generated/sklearn.exceptions.datadimensionalitywarning", "type": "exceptions", "text": "\nCustom warning to notify potential issues with data dimensionality.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.DataDimensionalityWarning", "path": "modules/generated/sklearn.exceptions.datadimensionalitywarning#sklearn.exceptions.DataDimensionalityWarning", "type": "exceptions", "text": "\nCustom warning to notify potential issues with data dimensionality.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.DataDimensionalityWarning.with_traceback()", "path": "modules/generated/sklearn.exceptions.datadimensionalitywarning#sklearn.exceptions.DataDimensionalityWarning.with_traceback", "type": "exceptions", "text": "\nException.with_traceback(tb) \u2013 set self.__traceback__ to tb and return self.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.EfficiencyWarning", "path": "modules/generated/sklearn.exceptions.efficiencywarning#sklearn.exceptions.EfficiencyWarning", "type": "exceptions", "text": "\nWarning used to notify the user of inefficient computation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.EfficiencyWarning", "path": "modules/generated/sklearn.exceptions.efficiencywarning", "type": "exceptions", "text": "\nWarning used to notify the user of inefficient computation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.EfficiencyWarning.with_traceback()", "path": "modules/generated/sklearn.exceptions.efficiencywarning#sklearn.exceptions.EfficiencyWarning.with_traceback", "type": "exceptions", "text": "\nException.with_traceback(tb) \u2013 set self.__traceback__ to tb and return self.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.FitFailedWarning", "path": "modules/generated/sklearn.exceptions.fitfailedwarning#sklearn.exceptions.FitFailedWarning", "type": "exceptions", "text": "\nWarning class used if there is an error while fitting the estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.FitFailedWarning", "path": "modules/generated/sklearn.exceptions.fitfailedwarning", "type": "exceptions", "text": "\nWarning class used if there is an error while fitting the estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.FitFailedWarning.with_traceback()", "path": "modules/generated/sklearn.exceptions.fitfailedwarning#sklearn.exceptions.FitFailedWarning.with_traceback", "type": "exceptions", "text": "\nException.with_traceback(tb) \u2013 set self.__traceback__ to tb and return self.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.NotFittedError", "path": "modules/generated/sklearn.exceptions.notfittederror", "type": "exceptions", "text": "\nException class to raise if estimator is used before fitting.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.NotFittedError", "path": "modules/generated/sklearn.exceptions.notfittederror#sklearn.exceptions.NotFittedError", "type": "exceptions", "text": "\nException class to raise if estimator is used before fitting.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.NotFittedError.with_traceback()", "path": "modules/generated/sklearn.exceptions.notfittederror#sklearn.exceptions.NotFittedError.with_traceback", "type": "exceptions", "text": "\nException.with_traceback(tb) \u2013 set self.__traceback__ to tb and return self.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.UndefinedMetricWarning", "path": "modules/generated/sklearn.exceptions.undefinedmetricwarning#sklearn.exceptions.UndefinedMetricWarning", "type": "exceptions", "text": "\nWarning used when the metric is invalid\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.UndefinedMetricWarning", "path": "modules/generated/sklearn.exceptions.undefinedmetricwarning", "type": "exceptions", "text": "\nWarning used when the metric is invalid\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "exceptions.UndefinedMetricWarning.with_traceback()", "path": "modules/generated/sklearn.exceptions.undefinedmetricwarning#sklearn.exceptions.UndefinedMetricWarning.with_traceback", "type": "exceptions", "text": "\nException.with_traceback(tb) \u2013 set self.__traceback__ to tb and return self.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.DictVectorizer", "path": "modules/generated/sklearn.feature_extraction.dictvectorizer#sklearn.feature_extraction.DictVectorizer", "type": "feature_extraction", "text": "\nTransforms lists of feature-value mappings to vectors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.DictVectorizer()", "path": "modules/generated/sklearn.feature_extraction.dictvectorizer", "type": "feature_extraction", "text": "\nTransforms lists of feature-value mappings to vectors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.DictVectorizer.fit()", "path": "modules/generated/sklearn.feature_extraction.dictvectorizer#sklearn.feature_extraction.DictVectorizer.fit", "type": "feature_extraction", "text": "\nLearn a list of feature name -> indices mappings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.DictVectorizer.fit_transform()", "path": "modules/generated/sklearn.feature_extraction.dictvectorizer#sklearn.feature_extraction.DictVectorizer.fit_transform", "type": "feature_extraction", "text": "\nLearn a list of feature name -> indices mappings and transform X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.DictVectorizer.get_feature_names()", "path": "modules/generated/sklearn.feature_extraction.dictvectorizer#sklearn.feature_extraction.DictVectorizer.get_feature_names", "type": "feature_extraction", "text": "\nReturns a list of feature names, ordered by their indices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.DictVectorizer.get_params()", "path": "modules/generated/sklearn.feature_extraction.dictvectorizer#sklearn.feature_extraction.DictVectorizer.get_params", "type": "feature_extraction", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.DictVectorizer.inverse_transform()", "path": "modules/generated/sklearn.feature_extraction.dictvectorizer#sklearn.feature_extraction.DictVectorizer.inverse_transform", "type": "feature_extraction", "text": "\nTransform array or sparse matrix X back to feature mappings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.DictVectorizer.restrict()", "path": "modules/generated/sklearn.feature_extraction.dictvectorizer#sklearn.feature_extraction.DictVectorizer.restrict", "type": "feature_extraction", "text": "\nRestrict the features to those in support using feature selection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.DictVectorizer.set_params()", "path": "modules/generated/sklearn.feature_extraction.dictvectorizer#sklearn.feature_extraction.DictVectorizer.set_params", "type": "feature_extraction", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.DictVectorizer.transform()", "path": "modules/generated/sklearn.feature_extraction.dictvectorizer#sklearn.feature_extraction.DictVectorizer.transform", "type": "feature_extraction", "text": "\nTransform feature->value dicts to array or sparse matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.FeatureHasher", "path": "modules/generated/sklearn.feature_extraction.featurehasher#sklearn.feature_extraction.FeatureHasher", "type": "feature_extraction", "text": "\nImplements feature hashing, aka the hashing trick.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.FeatureHasher()", "path": "modules/generated/sklearn.feature_extraction.featurehasher", "type": "feature_extraction", "text": "\nImplements feature hashing, aka the hashing trick.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.FeatureHasher.fit()", "path": "modules/generated/sklearn.feature_extraction.featurehasher#sklearn.feature_extraction.FeatureHasher.fit", "type": "feature_extraction", "text": "\nNo-op.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.FeatureHasher.fit_transform()", "path": "modules/generated/sklearn.feature_extraction.featurehasher#sklearn.feature_extraction.FeatureHasher.fit_transform", "type": "feature_extraction", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.FeatureHasher.get_params()", "path": "modules/generated/sklearn.feature_extraction.featurehasher#sklearn.feature_extraction.FeatureHasher.get_params", "type": "feature_extraction", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.FeatureHasher.set_params()", "path": "modules/generated/sklearn.feature_extraction.featurehasher#sklearn.feature_extraction.FeatureHasher.set_params", "type": "feature_extraction", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.FeatureHasher.transform()", "path": "modules/generated/sklearn.feature_extraction.featurehasher#sklearn.feature_extraction.FeatureHasher.transform", "type": "feature_extraction", "text": "\nTransform a sequence of instances to a scipy.sparse matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.image.extract_patches_2d()", "path": "modules/generated/sklearn.feature_extraction.image.extract_patches_2d#sklearn.feature_extraction.image.extract_patches_2d", "type": "feature_extraction.image", "text": "\nReshape a 2D image into a collection of patches\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.image.grid_to_graph()", "path": "modules/generated/sklearn.feature_extraction.image.grid_to_graph#sklearn.feature_extraction.image.grid_to_graph", "type": "feature_extraction.image", "text": "\nGraph of the pixel-to-pixel connections\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.image.img_to_graph()", "path": "modules/generated/sklearn.feature_extraction.image.img_to_graph#sklearn.feature_extraction.image.img_to_graph", "type": "feature_extraction.image", "text": "\nGraph of the pixel-to-pixel gradient connections\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.image.PatchExtractor", "path": "modules/generated/sklearn.feature_extraction.image.patchextractor#sklearn.feature_extraction.image.PatchExtractor", "type": "feature_extraction.image", "text": "\nExtracts patches from a collection of images\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.image.PatchExtractor()", "path": "modules/generated/sklearn.feature_extraction.image.patchextractor", "type": "feature_extraction.image", "text": "\nExtracts patches from a collection of images\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.image.PatchExtractor.fit()", "path": "modules/generated/sklearn.feature_extraction.image.patchextractor#sklearn.feature_extraction.image.PatchExtractor.fit", "type": "feature_extraction.image", "text": "\nDo nothing and return the estimator unchanged.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.image.PatchExtractor.get_params()", "path": "modules/generated/sklearn.feature_extraction.image.patchextractor#sklearn.feature_extraction.image.PatchExtractor.get_params", "type": "feature_extraction.image", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.image.PatchExtractor.set_params()", "path": "modules/generated/sklearn.feature_extraction.image.patchextractor#sklearn.feature_extraction.image.PatchExtractor.set_params", "type": "feature_extraction.image", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.image.PatchExtractor.transform()", "path": "modules/generated/sklearn.feature_extraction.image.patchextractor#sklearn.feature_extraction.image.PatchExtractor.transform", "type": "feature_extraction.image", "text": "\nTransforms the image samples in X into a matrix of patch data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.image.reconstruct_from_patches_2d()", "path": "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d#sklearn.feature_extraction.image.reconstruct_from_patches_2d", "type": "feature_extraction.image", "text": "\nReconstruct the image from all of its patches.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer", "type": "feature_extraction.text", "text": "\nConvert a collection of text documents to a matrix of token counts\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer", "type": "feature_extraction.text", "text": "\nConvert a collection of text documents to a matrix of token counts\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.build_analyzer()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.build_analyzer", "type": "feature_extraction.text", "text": "\nReturn a callable that handles preprocessing, tokenization and n-grams\ngeneration.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.build_preprocessor()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", "type": "feature_extraction.text", "text": "\nReturn a function to preprocess the text before tokenization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.build_tokenizer()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", "type": "feature_extraction.text", "text": "\nReturn a function that splits a string into a sequence of tokens.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.decode()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.decode", "type": "feature_extraction.text", "text": "\nDecode the input into a string of unicode symbols.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.fit()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.fit", "type": "feature_extraction.text", "text": "\nLearn a vocabulary dictionary of all tokens in the raw documents.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.fit_transform()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.fit_transform", "type": "feature_extraction.text", "text": "\nLearn the vocabulary dictionary and return document-term matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.get_feature_names()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.get_feature_names", "type": "feature_extraction.text", "text": "\nArray mapping from feature integer indices to feature name.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.get_params()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.get_params", "type": "feature_extraction.text", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.get_stop_words()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.get_stop_words", "type": "feature_extraction.text", "text": "\nBuild or fetch the effective stop words list.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.inverse_transform()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.inverse_transform", "type": "feature_extraction.text", "text": "\nReturn terms per document with nonzero entries in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.set_params()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.set_params", "type": "feature_extraction.text", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.CountVectorizer.transform()", "path": "modules/generated/sklearn.feature_extraction.text.countvectorizer#sklearn.feature_extraction.text.CountVectorizer.transform", "type": "feature_extraction.text", "text": "\nTransform documents to document-term matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer", "type": "feature_extraction.text", "text": "\nConvert a collection of text documents to a matrix of token occurrences\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer", "type": "feature_extraction.text", "text": "\nConvert a collection of text documents to a matrix of token occurrences\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.build_analyzer()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", "type": "feature_extraction.text", "text": "\nReturn a callable that handles preprocessing, tokenization and n-grams\ngeneration.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.build_preprocessor()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", "type": "feature_extraction.text", "text": "\nReturn a function to preprocess the text before tokenization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.build_tokenizer()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", "type": "feature_extraction.text", "text": "\nReturn a function that splits a string into a sequence of tokens.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.decode()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.decode", "type": "feature_extraction.text", "text": "\nDecode the input into a string of unicode symbols.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.fit()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.fit", "type": "feature_extraction.text", "text": "\nDoes nothing: this transformer is stateless.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.fit_transform()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.fit_transform", "type": "feature_extraction.text", "text": "\nTransform a sequence of documents to a document-term matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.get_params()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.get_params", "type": "feature_extraction.text", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.get_stop_words()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", "type": "feature_extraction.text", "text": "\nBuild or fetch the effective stop words list.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.partial_fit()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.partial_fit", "type": "feature_extraction.text", "text": "\nDoes nothing: this transformer is stateless.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.set_params()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.set_params", "type": "feature_extraction.text", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.HashingVectorizer.transform()", "path": "modules/generated/sklearn.feature_extraction.text.hashingvectorizer#sklearn.feature_extraction.text.HashingVectorizer.transform", "type": "feature_extraction.text", "text": "\nTransform a sequence of documents to a document-term matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfTransformer", "path": "modules/generated/sklearn.feature_extraction.text.tfidftransformer#sklearn.feature_extraction.text.TfidfTransformer", "type": "feature_extraction.text", "text": "\nTransform a count matrix to a normalized tf or tf-idf representation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfTransformer()", "path": "modules/generated/sklearn.feature_extraction.text.tfidftransformer", "type": "feature_extraction.text", "text": "\nTransform a count matrix to a normalized tf or tf-idf representation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfTransformer.fit()", "path": "modules/generated/sklearn.feature_extraction.text.tfidftransformer#sklearn.feature_extraction.text.TfidfTransformer.fit", "type": "feature_extraction.text", "text": "\nLearn the idf vector (global term weights).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfTransformer.fit_transform()", "path": "modules/generated/sklearn.feature_extraction.text.tfidftransformer#sklearn.feature_extraction.text.TfidfTransformer.fit_transform", "type": "feature_extraction.text", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfTransformer.get_params()", "path": "modules/generated/sklearn.feature_extraction.text.tfidftransformer#sklearn.feature_extraction.text.TfidfTransformer.get_params", "type": "feature_extraction.text", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfTransformer.set_params()", "path": "modules/generated/sklearn.feature_extraction.text.tfidftransformer#sklearn.feature_extraction.text.TfidfTransformer.set_params", "type": "feature_extraction.text", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfTransformer.transform()", "path": "modules/generated/sklearn.feature_extraction.text.tfidftransformer#sklearn.feature_extraction.text.TfidfTransformer.transform", "type": "feature_extraction.text", "text": "\nTransform a count matrix to a tf or tf-idf representation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer", "type": "feature_extraction.text", "text": "\nConvert a collection of raw documents to a matrix of TF-IDF features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer", "type": "feature_extraction.text", "text": "\nConvert a collection of raw documents to a matrix of TF-IDF features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.build_analyzer()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", "type": "feature_extraction.text", "text": "\nReturn a callable that handles preprocessing, tokenization and n-grams\ngeneration.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.build_preprocessor()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", "type": "feature_extraction.text", "text": "\nReturn a function to preprocess the text before tokenization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.build_tokenizer()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", "type": "feature_extraction.text", "text": "\nReturn a function that splits a string into a sequence of tokens.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.decode()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.decode", "type": "feature_extraction.text", "text": "\nDecode the input into a string of unicode symbols.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.fit()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.fit", "type": "feature_extraction.text", "text": "\nLearn vocabulary and idf from training set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.fit_transform()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", "type": "feature_extraction.text", "text": "\nLearn vocabulary and idf, return document-term matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.get_feature_names()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names", "type": "feature_extraction.text", "text": "\nArray mapping from feature integer indices to feature name.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.get_params()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.get_params", "type": "feature_extraction.text", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.get_stop_words()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", "type": "feature_extraction.text", "text": "\nBuild or fetch the effective stop words list.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.inverse_transform()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", "type": "feature_extraction.text", "text": "\nReturn terms per document with nonzero entries in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.set_params()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.set_params", "type": "feature_extraction.text", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_extraction.text.TfidfVectorizer.transform()", "path": "modules/generated/sklearn.feature_extraction.text.tfidfvectorizer#sklearn.feature_extraction.text.TfidfVectorizer.transform", "type": "feature_extraction.text", "text": "\nTransform documents to document-term matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.chi2()", "path": "modules/generated/sklearn.feature_selection.chi2#sklearn.feature_selection.chi2", "type": "feature_selection", "text": "\nCompute chi-squared stats between each non-negative feature and class.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.f_classif()", "path": "modules/generated/sklearn.feature_selection.f_classif#sklearn.feature_selection.f_classif", "type": "feature_selection", "text": "\nCompute the ANOVA F-value for the provided sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.f_regression()", "path": "modules/generated/sklearn.feature_selection.f_regression#sklearn.feature_selection.f_regression", "type": "feature_selection", "text": "\nUnivariate linear regression tests.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.GenericUnivariateSelect", "path": "modules/generated/sklearn.feature_selection.genericunivariateselect#sklearn.feature_selection.GenericUnivariateSelect", "type": "feature_selection", "text": "\nUnivariate feature selector with configurable strategy.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.GenericUnivariateSelect()", "path": "modules/generated/sklearn.feature_selection.genericunivariateselect", "type": "feature_selection", "text": "\nUnivariate feature selector with configurable strategy.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.GenericUnivariateSelect.fit()", "path": "modules/generated/sklearn.feature_selection.genericunivariateselect#sklearn.feature_selection.GenericUnivariateSelect.fit", "type": "feature_selection", "text": "\nRun score function on (X, y) and get the appropriate features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.GenericUnivariateSelect.fit_transform()", "path": "modules/generated/sklearn.feature_selection.genericunivariateselect#sklearn.feature_selection.GenericUnivariateSelect.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.GenericUnivariateSelect.get_params()", "path": "modules/generated/sklearn.feature_selection.genericunivariateselect#sklearn.feature_selection.GenericUnivariateSelect.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.GenericUnivariateSelect.get_support()", "path": "modules/generated/sklearn.feature_selection.genericunivariateselect#sklearn.feature_selection.GenericUnivariateSelect.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.GenericUnivariateSelect.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.genericunivariateselect#sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.GenericUnivariateSelect.set_params()", "path": "modules/generated/sklearn.feature_selection.genericunivariateselect#sklearn.feature_selection.GenericUnivariateSelect.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.GenericUnivariateSelect.transform()", "path": "modules/generated/sklearn.feature_selection.genericunivariateselect#sklearn.feature_selection.GenericUnivariateSelect.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.mutual_info_classif()", "path": "modules/generated/sklearn.feature_selection.mutual_info_classif#sklearn.feature_selection.mutual_info_classif", "type": "feature_selection", "text": "\nEstimate mutual information for a discrete target variable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.mutual_info_regression()", "path": "modules/generated/sklearn.feature_selection.mutual_info_regression#sklearn.feature_selection.mutual_info_regression", "type": "feature_selection", "text": "\nEstimate mutual information for a continuous target variable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE", "type": "feature_selection", "text": "\nFeature ranking with recursive feature elimination.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE()", "path": "modules/generated/sklearn.feature_selection.rfe", "type": "feature_selection", "text": "\nFeature ranking with recursive feature elimination.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.decision_function()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.decision_function", "type": "feature_selection", "text": "\nCompute the decision function of `X`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.fit()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.fit", "type": "feature_selection", "text": "\nfeatures.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.fit_transform()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.get_params()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.get_support()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.predict()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.predict", "type": "feature_selection", "text": "\nunderlying estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.predict_log_proba()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.predict_log_proba", "type": "feature_selection", "text": "\nPredict class log-probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.predict_proba()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.predict_proba", "type": "feature_selection", "text": "\nPredict class probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.score()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.score", "type": "feature_selection", "text": "\nunderlying estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.set_params()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFE.transform()", "path": "modules/generated/sklearn.feature_selection.rfe#sklearn.feature_selection.RFE.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV", "type": "feature_selection", "text": "\nFeature ranking with recursive feature elimination and cross-validated\nselection of the best number of features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV()", "path": "modules/generated/sklearn.feature_selection.rfecv", "type": "feature_selection", "text": "\nFeature ranking with recursive feature elimination and cross-validated\nselection of the best number of features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.decision_function()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.decision_function", "type": "feature_selection", "text": "\nCompute the decision function of `X`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.fit()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.fit", "type": "feature_selection", "text": "\nfeatures.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.fit_transform()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.get_params()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.get_support()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.predict()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.predict", "type": "feature_selection", "text": "\nunderlying estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.predict_log_proba()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.predict_log_proba", "type": "feature_selection", "text": "\nPredict class log-probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.predict_proba()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.predict_proba", "type": "feature_selection", "text": "\nPredict class probabilities for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.score()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.score", "type": "feature_selection", "text": "\nunderlying estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.set_params()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.RFECV.transform()", "path": "modules/generated/sklearn.feature_selection.rfecv#sklearn.feature_selection.RFECV.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFdr", "path": "modules/generated/sklearn.feature_selection.selectfdr#sklearn.feature_selection.SelectFdr", "type": "feature_selection", "text": "\nFilter: Select the p-values for an estimated false discovery rate\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFdr()", "path": "modules/generated/sklearn.feature_selection.selectfdr", "type": "feature_selection", "text": "\nFilter: Select the p-values for an estimated false discovery rate\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFdr.fit()", "path": "modules/generated/sklearn.feature_selection.selectfdr#sklearn.feature_selection.SelectFdr.fit", "type": "feature_selection", "text": "\nRun score function on (X, y) and get the appropriate features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFdr.fit_transform()", "path": "modules/generated/sklearn.feature_selection.selectfdr#sklearn.feature_selection.SelectFdr.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFdr.get_params()", "path": "modules/generated/sklearn.feature_selection.selectfdr#sklearn.feature_selection.SelectFdr.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFdr.get_support()", "path": "modules/generated/sklearn.feature_selection.selectfdr#sklearn.feature_selection.SelectFdr.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFdr.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.selectfdr#sklearn.feature_selection.SelectFdr.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFdr.set_params()", "path": "modules/generated/sklearn.feature_selection.selectfdr#sklearn.feature_selection.SelectFdr.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFdr.transform()", "path": "modules/generated/sklearn.feature_selection.selectfdr#sklearn.feature_selection.SelectFdr.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFpr", "path": "modules/generated/sklearn.feature_selection.selectfpr#sklearn.feature_selection.SelectFpr", "type": "feature_selection", "text": "\nFilter: Select the pvalues below alpha based on a FPR test.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFpr()", "path": "modules/generated/sklearn.feature_selection.selectfpr", "type": "feature_selection", "text": "\nFilter: Select the pvalues below alpha based on a FPR test.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFpr.fit()", "path": "modules/generated/sklearn.feature_selection.selectfpr#sklearn.feature_selection.SelectFpr.fit", "type": "feature_selection", "text": "\nRun score function on (X, y) and get the appropriate features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFpr.fit_transform()", "path": "modules/generated/sklearn.feature_selection.selectfpr#sklearn.feature_selection.SelectFpr.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFpr.get_params()", "path": "modules/generated/sklearn.feature_selection.selectfpr#sklearn.feature_selection.SelectFpr.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFpr.get_support()", "path": "modules/generated/sklearn.feature_selection.selectfpr#sklearn.feature_selection.SelectFpr.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFpr.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.selectfpr#sklearn.feature_selection.SelectFpr.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFpr.set_params()", "path": "modules/generated/sklearn.feature_selection.selectfpr#sklearn.feature_selection.SelectFpr.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFpr.transform()", "path": "modules/generated/sklearn.feature_selection.selectfpr#sklearn.feature_selection.SelectFpr.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFromModel", "path": "modules/generated/sklearn.feature_selection.selectfrommodel#sklearn.feature_selection.SelectFromModel", "type": "feature_selection", "text": "\nMeta-transformer for selecting features based on importance weights.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFromModel()", "path": "modules/generated/sklearn.feature_selection.selectfrommodel", "type": "feature_selection", "text": "\nMeta-transformer for selecting features based on importance weights.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFromModel.fit()", "path": "modules/generated/sklearn.feature_selection.selectfrommodel#sklearn.feature_selection.SelectFromModel.fit", "type": "feature_selection", "text": "\nFit the SelectFromModel meta-transformer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFromModel.fit_transform()", "path": "modules/generated/sklearn.feature_selection.selectfrommodel#sklearn.feature_selection.SelectFromModel.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFromModel.get_params()", "path": "modules/generated/sklearn.feature_selection.selectfrommodel#sklearn.feature_selection.SelectFromModel.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFromModel.get_support()", "path": "modules/generated/sklearn.feature_selection.selectfrommodel#sklearn.feature_selection.SelectFromModel.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFromModel.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.selectfrommodel#sklearn.feature_selection.SelectFromModel.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFromModel.partial_fit()", "path": "modules/generated/sklearn.feature_selection.selectfrommodel#sklearn.feature_selection.SelectFromModel.partial_fit", "type": "feature_selection", "text": "\nFit the SelectFromModel meta-transformer only once.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFromModel.set_params()", "path": "modules/generated/sklearn.feature_selection.selectfrommodel#sklearn.feature_selection.SelectFromModel.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFromModel.transform()", "path": "modules/generated/sklearn.feature_selection.selectfrommodel#sklearn.feature_selection.SelectFromModel.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFwe", "path": "modules/generated/sklearn.feature_selection.selectfwe#sklearn.feature_selection.SelectFwe", "type": "feature_selection", "text": "\nFilter: Select the p-values corresponding to Family-wise error rate\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFwe()", "path": "modules/generated/sklearn.feature_selection.selectfwe", "type": "feature_selection", "text": "\nFilter: Select the p-values corresponding to Family-wise error rate\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFwe.fit()", "path": "modules/generated/sklearn.feature_selection.selectfwe#sklearn.feature_selection.SelectFwe.fit", "type": "feature_selection", "text": "\nRun score function on (X, y) and get the appropriate features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFwe.fit_transform()", "path": "modules/generated/sklearn.feature_selection.selectfwe#sklearn.feature_selection.SelectFwe.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFwe.get_params()", "path": "modules/generated/sklearn.feature_selection.selectfwe#sklearn.feature_selection.SelectFwe.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFwe.get_support()", "path": "modules/generated/sklearn.feature_selection.selectfwe#sklearn.feature_selection.SelectFwe.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFwe.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.selectfwe#sklearn.feature_selection.SelectFwe.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFwe.set_params()", "path": "modules/generated/sklearn.feature_selection.selectfwe#sklearn.feature_selection.SelectFwe.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectFwe.transform()", "path": "modules/generated/sklearn.feature_selection.selectfwe#sklearn.feature_selection.SelectFwe.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectKBest", "path": "modules/generated/sklearn.feature_selection.selectkbest#sklearn.feature_selection.SelectKBest", "type": "feature_selection", "text": "\nSelect features according to the k highest scores.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectKBest()", "path": "modules/generated/sklearn.feature_selection.selectkbest", "type": "feature_selection", "text": "\nSelect features according to the k highest scores.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectKBest.fit()", "path": "modules/generated/sklearn.feature_selection.selectkbest#sklearn.feature_selection.SelectKBest.fit", "type": "feature_selection", "text": "\nRun score function on (X, y) and get the appropriate features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectKBest.fit_transform()", "path": "modules/generated/sklearn.feature_selection.selectkbest#sklearn.feature_selection.SelectKBest.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectKBest.get_params()", "path": "modules/generated/sklearn.feature_selection.selectkbest#sklearn.feature_selection.SelectKBest.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectKBest.get_support()", "path": "modules/generated/sklearn.feature_selection.selectkbest#sklearn.feature_selection.SelectKBest.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectKBest.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.selectkbest#sklearn.feature_selection.SelectKBest.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectKBest.set_params()", "path": "modules/generated/sklearn.feature_selection.selectkbest#sklearn.feature_selection.SelectKBest.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectKBest.transform()", "path": "modules/generated/sklearn.feature_selection.selectkbest#sklearn.feature_selection.SelectKBest.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectorMixin", "path": "modules/generated/sklearn.feature_selection.selectormixin#sklearn.feature_selection.SelectorMixin", "type": "feature_selection", "text": "\nTransformer mixin that performs feature selection given a support mask\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectorMixin", "path": "modules/generated/sklearn.feature_selection.selectormixin", "type": "feature_selection", "text": "\nTransformer mixin that performs feature selection given a support mask\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectorMixin.fit_transform()", "path": "modules/generated/sklearn.feature_selection.selectormixin#sklearn.feature_selection.SelectorMixin.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectorMixin.get_support()", "path": "modules/generated/sklearn.feature_selection.selectormixin#sklearn.feature_selection.SelectorMixin.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectorMixin.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.selectormixin#sklearn.feature_selection.SelectorMixin.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectorMixin.transform()", "path": "modules/generated/sklearn.feature_selection.selectormixin#sklearn.feature_selection.SelectorMixin.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectPercentile", "path": "modules/generated/sklearn.feature_selection.selectpercentile#sklearn.feature_selection.SelectPercentile", "type": "feature_selection", "text": "\nSelect features according to a percentile of the highest scores.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectPercentile()", "path": "modules/generated/sklearn.feature_selection.selectpercentile", "type": "feature_selection", "text": "\nSelect features according to a percentile of the highest scores.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectPercentile.fit()", "path": "modules/generated/sklearn.feature_selection.selectpercentile#sklearn.feature_selection.SelectPercentile.fit", "type": "feature_selection", "text": "\nRun score function on (X, y) and get the appropriate features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectPercentile.fit_transform()", "path": "modules/generated/sklearn.feature_selection.selectpercentile#sklearn.feature_selection.SelectPercentile.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectPercentile.get_params()", "path": "modules/generated/sklearn.feature_selection.selectpercentile#sklearn.feature_selection.SelectPercentile.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectPercentile.get_support()", "path": "modules/generated/sklearn.feature_selection.selectpercentile#sklearn.feature_selection.SelectPercentile.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectPercentile.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.selectpercentile#sklearn.feature_selection.SelectPercentile.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectPercentile.set_params()", "path": "modules/generated/sklearn.feature_selection.selectpercentile#sklearn.feature_selection.SelectPercentile.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SelectPercentile.transform()", "path": "modules/generated/sklearn.feature_selection.selectpercentile#sklearn.feature_selection.SelectPercentile.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SequentialFeatureSelector", "path": "modules/generated/sklearn.feature_selection.sequentialfeatureselector#sklearn.feature_selection.SequentialFeatureSelector", "type": "feature_selection", "text": "\nTransformer that performs Sequential Feature Selection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SequentialFeatureSelector()", "path": "modules/generated/sklearn.feature_selection.sequentialfeatureselector", "type": "feature_selection", "text": "\nTransformer that performs Sequential Feature Selection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SequentialFeatureSelector.fit()", "path": "modules/generated/sklearn.feature_selection.sequentialfeatureselector#sklearn.feature_selection.SequentialFeatureSelector.fit", "type": "feature_selection", "text": "\nLearn the features to select.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SequentialFeatureSelector.fit_transform()", "path": "modules/generated/sklearn.feature_selection.sequentialfeatureselector#sklearn.feature_selection.SequentialFeatureSelector.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SequentialFeatureSelector.get_params()", "path": "modules/generated/sklearn.feature_selection.sequentialfeatureselector#sklearn.feature_selection.SequentialFeatureSelector.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SequentialFeatureSelector.get_support()", "path": "modules/generated/sklearn.feature_selection.sequentialfeatureselector#sklearn.feature_selection.SequentialFeatureSelector.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SequentialFeatureSelector.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.sequentialfeatureselector#sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SequentialFeatureSelector.set_params()", "path": "modules/generated/sklearn.feature_selection.sequentialfeatureselector#sklearn.feature_selection.SequentialFeatureSelector.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.SequentialFeatureSelector.transform()", "path": "modules/generated/sklearn.feature_selection.sequentialfeatureselector#sklearn.feature_selection.SequentialFeatureSelector.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.VarianceThreshold", "path": "modules/generated/sklearn.feature_selection.variancethreshold#sklearn.feature_selection.VarianceThreshold", "type": "feature_selection", "text": "\nFeature selector that removes all low-variance features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.VarianceThreshold()", "path": "modules/generated/sklearn.feature_selection.variancethreshold", "type": "feature_selection", "text": "\nFeature selector that removes all low-variance features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.VarianceThreshold.fit()", "path": "modules/generated/sklearn.feature_selection.variancethreshold#sklearn.feature_selection.VarianceThreshold.fit", "type": "feature_selection", "text": "\nLearn empirical variances from X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.VarianceThreshold.fit_transform()", "path": "modules/generated/sklearn.feature_selection.variancethreshold#sklearn.feature_selection.VarianceThreshold.fit_transform", "type": "feature_selection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.VarianceThreshold.get_params()", "path": "modules/generated/sklearn.feature_selection.variancethreshold#sklearn.feature_selection.VarianceThreshold.get_params", "type": "feature_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.VarianceThreshold.get_support()", "path": "modules/generated/sklearn.feature_selection.variancethreshold#sklearn.feature_selection.VarianceThreshold.get_support", "type": "feature_selection", "text": "\nGet a mask, or integer index, of the features selected\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.VarianceThreshold.inverse_transform()", "path": "modules/generated/sklearn.feature_selection.variancethreshold#sklearn.feature_selection.VarianceThreshold.inverse_transform", "type": "feature_selection", "text": "\nReverse the transformation operation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.VarianceThreshold.set_params()", "path": "modules/generated/sklearn.feature_selection.variancethreshold#sklearn.feature_selection.VarianceThreshold.set_params", "type": "feature_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "feature_selection.VarianceThreshold.transform()", "path": "modules/generated/sklearn.feature_selection.variancethreshold#sklearn.feature_selection.VarianceThreshold.transform", "type": "feature_selection", "text": "\nReduce X to the selected features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessClassifier", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessclassifier#sklearn.gaussian_process.GaussianProcessClassifier", "type": "gaussian_process", "text": "\nGaussian process classification (GPC) based on Laplace approximation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessClassifier()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessclassifier", "type": "gaussian_process", "text": "\nGaussian process classification (GPC) based on Laplace approximation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessClassifier.fit()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessclassifier#sklearn.gaussian_process.GaussianProcessClassifier.fit", "type": "gaussian_process", "text": "\nFit Gaussian process classification model\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessClassifier.get_params()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessclassifier#sklearn.gaussian_process.GaussianProcessClassifier.get_params", "type": "gaussian_process", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessClassifier.log_marginal_likelihood()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessclassifier#sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", "type": "gaussian_process", "text": "\nReturns log-marginal likelihood of theta for training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessClassifier.predict()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessclassifier#sklearn.gaussian_process.GaussianProcessClassifier.predict", "type": "gaussian_process", "text": "\nPerform classification on an array of test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessClassifier.predict_proba()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessclassifier#sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", "type": "gaussian_process", "text": "\nReturn probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessClassifier.score()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessclassifier#sklearn.gaussian_process.GaussianProcessClassifier.score", "type": "gaussian_process", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessClassifier.set_params()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessclassifier#sklearn.gaussian_process.GaussianProcessClassifier.set_params", "type": "gaussian_process", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessRegressor", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessregressor#sklearn.gaussian_process.GaussianProcessRegressor", "type": "gaussian_process", "text": "\nGaussian process regression (GPR).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessRegressor()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessregressor", "type": "gaussian_process", "text": "\nGaussian process regression (GPR).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessRegressor.fit()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessregressor#sklearn.gaussian_process.GaussianProcessRegressor.fit", "type": "gaussian_process", "text": "\nFit Gaussian process regression model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessRegressor.get_params()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessregressor#sklearn.gaussian_process.GaussianProcessRegressor.get_params", "type": "gaussian_process", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessRegressor.log_marginal_likelihood()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessregressor#sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", "type": "gaussian_process", "text": "\nReturns log-marginal likelihood of theta for training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessRegressor.predict()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessregressor#sklearn.gaussian_process.GaussianProcessRegressor.predict", "type": "gaussian_process", "text": "\nPredict using the Gaussian process regression model\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessRegressor.sample_y()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessregressor#sklearn.gaussian_process.GaussianProcessRegressor.sample_y", "type": "gaussian_process", "text": "\nDraw samples from Gaussian process and evaluate at X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessRegressor.score()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessregressor#sklearn.gaussian_process.GaussianProcessRegressor.score", "type": "gaussian_process", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.GaussianProcessRegressor.set_params()", "path": "modules/generated/sklearn.gaussian_process.gaussianprocessregressor#sklearn.gaussian_process.GaussianProcessRegressor.set_params", "type": "gaussian_process", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel", "type": "gaussian_process.kernels", "text": "\nKernel which is composed of a set of other kernels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel", "type": "gaussian_process.kernels", "text": "\nKernel which is composed of a set of other kernels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter specifications.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is defined on discrete structures.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.CompoundKernel.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.compoundkernel#sklearn.gaussian_process.kernels.CompoundKernel.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel", "type": "gaussian_process.kernels", "text": "\nConstant kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel", "type": "gaussian_process.kernels", "text": "\nConstant kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter specifications.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nWhether the kernel works only on fixed-length feature vectors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ConstantKernel.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.constantkernel#sklearn.gaussian_process.kernels.ConstantKernel.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct", "type": "gaussian_process.kernels", "text": "\nDot-Product kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct", "type": "gaussian_process.kernels", "text": "\nDot-Product kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter specifications.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is defined on fixed-length feature vectors or\ngeneric objects. Defaults to True for backward compatibility.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.DotProduct.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.dotproduct#sklearn.gaussian_process.kernels.DotProduct.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation", "type": "gaussian_process.kernels", "text": "\nThe Exponentiation kernel takes one base kernel and a scalar parameter \\\\(p\\\\)\nand combines them via\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation", "type": "gaussian_process.kernels", "text": "\nThe Exponentiation kernel takes one base kernel and a scalar parameter \\\\(p\\\\)\nand combines them via\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is defined on discrete structures.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Exponentiation.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.exponentiation#sklearn.gaussian_process.kernels.Exponentiation.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared", "type": "gaussian_process.kernels", "text": "\nExp-Sine-Squared kernel (aka periodic kernel).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared", "type": "gaussian_process.kernels", "text": "\nExp-Sine-Squared kernel (aka periodic kernel).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter specifications.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", "type": "gaussian_process.kernels", "text": "\nReturns the length scale\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is defined on fixed-length feature vectors or\ngeneric objects. Defaults to True for backward compatibility.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.ExpSineSquared.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.expsinesquared#sklearn.gaussian_process.kernels.ExpSineSquared.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Hyperparameter", "path": "modules/generated/sklearn.gaussian_process.kernels.hyperparameter#sklearn.gaussian_process.kernels.Hyperparameter", "type": "gaussian_process.kernels", "text": "\nA kernel hyperparameter\u2019s specification in form of a namedtuple.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Hyperparameter()", "path": "modules/generated/sklearn.gaussian_process.kernels.hyperparameter", "type": "gaussian_process.kernels", "text": "\nA kernel hyperparameter\u2019s specification in form of a namedtuple.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Hyperparameter.bounds", "path": "modules/generated/sklearn.gaussian_process.kernels.hyperparameter#sklearn.gaussian_process.kernels.Hyperparameter.bounds", "type": "gaussian_process.kernels", "text": "\nAlias for field number 2\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Hyperparameter.count()", "path": "modules/generated/sklearn.gaussian_process.kernels.hyperparameter#sklearn.gaussian_process.kernels.Hyperparameter.count", "type": "gaussian_process.kernels", "text": "\nReturn number of occurrences of value.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Hyperparameter.fixed", "path": "modules/generated/sklearn.gaussian_process.kernels.hyperparameter#sklearn.gaussian_process.kernels.Hyperparameter.fixed", "type": "gaussian_process.kernels", "text": "\nAlias for field number 4\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Hyperparameter.index()", "path": "modules/generated/sklearn.gaussian_process.kernels.hyperparameter#sklearn.gaussian_process.kernels.Hyperparameter.index", "type": "gaussian_process.kernels", "text": "\nReturn first index of value.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Hyperparameter.name", "path": "modules/generated/sklearn.gaussian_process.kernels.hyperparameter#sklearn.gaussian_process.kernels.Hyperparameter.name", "type": "gaussian_process.kernels", "text": "\nAlias for field number 0\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Hyperparameter.n_elements", "path": "modules/generated/sklearn.gaussian_process.kernels.hyperparameter#sklearn.gaussian_process.kernels.Hyperparameter.n_elements", "type": "gaussian_process.kernels", "text": "\nAlias for field number 3\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Hyperparameter.value_type", "path": "modules/generated/sklearn.gaussian_process.kernels.hyperparameter#sklearn.gaussian_process.kernels.Hyperparameter.value_type", "type": "gaussian_process.kernels", "text": "\nAlias for field number 1\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Hyperparameter.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.hyperparameter#sklearn.gaussian_process.kernels.Hyperparameter.__call__", "type": "gaussian_process.kernels", "text": "\nCall self as a function.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel", "type": "gaussian_process.kernels", "text": "\nBase class for all kernels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel", "type": "gaussian_process.kernels", "text": "\nBase class for all kernels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter specifications.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is defined on fixed-length feature vectors or\ngeneric objects. Defaults to True for backward compatibility.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Kernel.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.kernel#sklearn.gaussian_process.kernels.Kernel.__call__", "type": "gaussian_process.kernels", "text": "\nEvaluate the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern", "type": "gaussian_process.kernels", "text": "\nMatern kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern", "type": "gaussian_process.kernels", "text": "\nMatern kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter specifications.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is defined on fixed-length feature vectors or\ngeneric objects. Defaults to True for backward compatibility.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Matern.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.matern#sklearn.gaussian_process.kernels.Matern.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel", "type": "gaussian_process.kernels", "text": "\nWrapper for kernels in sklearn.metrics.pairwise.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel", "type": "gaussian_process.kernels", "text": "\nWrapper for kernels in sklearn.metrics.pairwise.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter specifications.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is defined on fixed-length feature vectors or\ngeneric objects. Defaults to True for backward compatibility.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.PairwiseKernel.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.pairwisekernel#sklearn.gaussian_process.kernels.PairwiseKernel.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product", "type": "gaussian_process.kernels", "text": "\nThe `Product` kernel takes two kernels \\\\(k_1\\\\) and \\\\(k_2\\\\) and combines\nthem via\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product()", "path": "modules/generated/sklearn.gaussian_process.kernels.product", "type": "gaussian_process.kernels", "text": "\nThe `Product` kernel takes two kernels \\\\(k_1\\\\) and \\\\(k_2\\\\) and combines\nthem via\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Product.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.product#sklearn.gaussian_process.kernels.Product.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic", "type": "gaussian_process.kernels", "text": "\nRational Quadratic kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic", "type": "gaussian_process.kernels", "text": "\nRational Quadratic kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter specifications.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is defined on fixed-length feature vectors or\ngeneric objects. Defaults to True for backward compatibility.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RationalQuadratic.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.rationalquadratic#sklearn.gaussian_process.kernels.RationalQuadratic.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF", "type": "gaussian_process.kernels", "text": "\nRadial-basis function kernel (aka squared-exponential kernel).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf", "type": "gaussian_process.kernels", "text": "\nRadial-basis function kernel (aka squared-exponential kernel).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter specifications.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is defined on fixed-length feature vectors or\ngeneric objects. Defaults to True for backward compatibility.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.RBF.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.rbf#sklearn.gaussian_process.kernels.RBF.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum", "type": "gaussian_process.kernels", "text": "\nThe `Sum` kernel takes two kernels \\\\(k_1\\\\) and \\\\(k_2\\\\) and combines them\nvia\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum", "type": "gaussian_process.kernels", "text": "\nThe `Sum` kernel takes two kernels \\\\(k_1\\\\) and \\\\(k_2\\\\) and combines them\nvia\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.Sum.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.sum#sklearn.gaussian_process.kernels.Sum.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel", "type": "gaussian_process.kernels", "text": "\nWhite kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel", "type": "gaussian_process.kernels", "text": "\nWhite kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.bounds()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.bounds", "type": "gaussian_process.kernels", "text": "\nReturns the log-transformed bounds on the theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.clone_with_theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", "type": "gaussian_process.kernels", "text": "\nReturns a clone of self with given hyperparameters theta.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.diag()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.diag", "type": "gaussian_process.kernels", "text": "\nReturns the diagonal of the kernel k(X, X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.get_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.get_params", "type": "gaussian_process.kernels", "text": "\nGet parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.hyperparameters()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", "type": "gaussian_process.kernels", "text": "\nReturns a list of all hyperparameter specifications.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.is_stationary()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", "type": "gaussian_process.kernels", "text": "\nReturns whether the kernel is stationary.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.n_dims()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.n_dims", "type": "gaussian_process.kernels", "text": "\nReturns the number of non-fixed hyperparameters of the kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.requires_vector_input()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", "type": "gaussian_process.kernels", "text": "\nWhether the kernel works only on fixed-length feature vectors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.set_params()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.set_params", "type": "gaussian_process.kernels", "text": "\nSet the parameters of this kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.theta()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.theta", "type": "gaussian_process.kernels", "text": "\nReturns the (flattened, log-transformed) non-fixed hyperparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "gaussian_process.kernels.WhiteKernel.__call__()", "path": "modules/generated/sklearn.gaussian_process.kernels.whitekernel#sklearn.gaussian_process.kernels.WhiteKernel.__call__", "type": "gaussian_process.kernels", "text": "\nReturn the kernel k(X, Y) and optionally its gradient.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "get_config()", "path": "modules/generated/sklearn.get_config#sklearn.get_config", "type": "sklearn", "text": "\nRetrieve current values for configuration set by `set_config`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.IterativeImputer", "path": "modules/generated/sklearn.impute.iterativeimputer#sklearn.impute.IterativeImputer", "type": "impute", "text": "\nMultivariate imputer that estimates each feature from all the others.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.IterativeImputer()", "path": "modules/generated/sklearn.impute.iterativeimputer", "type": "impute", "text": "\nMultivariate imputer that estimates each feature from all the others.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.IterativeImputer.fit()", "path": "modules/generated/sklearn.impute.iterativeimputer#sklearn.impute.IterativeImputer.fit", "type": "impute", "text": "\nFits the imputer on X and return self.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.IterativeImputer.fit_transform()", "path": "modules/generated/sklearn.impute.iterativeimputer#sklearn.impute.IterativeImputer.fit_transform", "type": "impute", "text": "\nFits the imputer on X and return the transformed X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.IterativeImputer.get_params()", "path": "modules/generated/sklearn.impute.iterativeimputer#sklearn.impute.IterativeImputer.get_params", "type": "impute", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.IterativeImputer.set_params()", "path": "modules/generated/sklearn.impute.iterativeimputer#sklearn.impute.IterativeImputer.set_params", "type": "impute", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.IterativeImputer.transform()", "path": "modules/generated/sklearn.impute.iterativeimputer#sklearn.impute.IterativeImputer.transform", "type": "impute", "text": "\nImputes all missing values in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.KNNImputer", "path": "modules/generated/sklearn.impute.knnimputer#sklearn.impute.KNNImputer", "type": "impute", "text": "\nImputation for completing missing values using k-Nearest Neighbors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.KNNImputer()", "path": "modules/generated/sklearn.impute.knnimputer", "type": "impute", "text": "\nImputation for completing missing values using k-Nearest Neighbors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.KNNImputer.fit()", "path": "modules/generated/sklearn.impute.knnimputer#sklearn.impute.KNNImputer.fit", "type": "impute", "text": "\nFit the imputer on X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.KNNImputer.fit_transform()", "path": "modules/generated/sklearn.impute.knnimputer#sklearn.impute.KNNImputer.fit_transform", "type": "impute", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.KNNImputer.get_params()", "path": "modules/generated/sklearn.impute.knnimputer#sklearn.impute.KNNImputer.get_params", "type": "impute", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.KNNImputer.set_params()", "path": "modules/generated/sklearn.impute.knnimputer#sklearn.impute.KNNImputer.set_params", "type": "impute", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.KNNImputer.transform()", "path": "modules/generated/sklearn.impute.knnimputer#sklearn.impute.KNNImputer.transform", "type": "impute", "text": "\nImpute all missing values in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.MissingIndicator", "path": "modules/generated/sklearn.impute.missingindicator#sklearn.impute.MissingIndicator", "type": "impute", "text": "\nBinary indicators for missing values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.MissingIndicator()", "path": "modules/generated/sklearn.impute.missingindicator", "type": "impute", "text": "\nBinary indicators for missing values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.MissingIndicator.fit()", "path": "modules/generated/sklearn.impute.missingindicator#sklearn.impute.MissingIndicator.fit", "type": "impute", "text": "\nFit the transformer on X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.MissingIndicator.fit_transform()", "path": "modules/generated/sklearn.impute.missingindicator#sklearn.impute.MissingIndicator.fit_transform", "type": "impute", "text": "\nGenerate missing values indicator for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.MissingIndicator.get_params()", "path": "modules/generated/sklearn.impute.missingindicator#sklearn.impute.MissingIndicator.get_params", "type": "impute", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.MissingIndicator.set_params()", "path": "modules/generated/sklearn.impute.missingindicator#sklearn.impute.MissingIndicator.set_params", "type": "impute", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.MissingIndicator.transform()", "path": "modules/generated/sklearn.impute.missingindicator#sklearn.impute.MissingIndicator.transform", "type": "impute", "text": "\nGenerate missing values indicator for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.SimpleImputer", "path": "modules/generated/sklearn.impute.simpleimputer#sklearn.impute.SimpleImputer", "type": "impute", "text": "\nImputation transformer for completing missing values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.SimpleImputer()", "path": "modules/generated/sklearn.impute.simpleimputer", "type": "impute", "text": "\nImputation transformer for completing missing values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.SimpleImputer.fit()", "path": "modules/generated/sklearn.impute.simpleimputer#sklearn.impute.SimpleImputer.fit", "type": "impute", "text": "\nFit the imputer on X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.SimpleImputer.fit_transform()", "path": "modules/generated/sklearn.impute.simpleimputer#sklearn.impute.SimpleImputer.fit_transform", "type": "impute", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.SimpleImputer.get_params()", "path": "modules/generated/sklearn.impute.simpleimputer#sklearn.impute.SimpleImputer.get_params", "type": "impute", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.SimpleImputer.inverse_transform()", "path": "modules/generated/sklearn.impute.simpleimputer#sklearn.impute.SimpleImputer.inverse_transform", "type": "impute", "text": "\nConvert the data back to the original representation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.SimpleImputer.set_params()", "path": "modules/generated/sklearn.impute.simpleimputer#sklearn.impute.SimpleImputer.set_params", "type": "impute", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "impute.SimpleImputer.transform()", "path": "modules/generated/sklearn.impute.simpleimputer#sklearn.impute.SimpleImputer.transform", "type": "impute", "text": "\nImpute all missing values in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "inspection.PartialDependenceDisplay", "path": "modules/generated/sklearn.inspection.partialdependencedisplay#sklearn.inspection.PartialDependenceDisplay", "type": "inspection", "text": "\nPartial Dependence Plot (PDP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "inspection.PartialDependenceDisplay()", "path": "modules/generated/sklearn.inspection.partialdependencedisplay", "type": "inspection", "text": "\nPartial Dependence Plot (PDP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "inspection.PartialDependenceDisplay.plot()", "path": "modules/generated/sklearn.inspection.partialdependencedisplay#sklearn.inspection.PartialDependenceDisplay.plot", "type": "inspection", "text": "\nPlot partial dependence plots.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "inspection.partial_dependence()", "path": "modules/generated/sklearn.inspection.partial_dependence#sklearn.inspection.partial_dependence", "type": "inspection", "text": "\nPartial dependence of `features`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "inspection.permutation_importance()", "path": "modules/generated/sklearn.inspection.permutation_importance#sklearn.inspection.permutation_importance", "type": "inspection", "text": "\nPermutation importance for feature evaluation [BRE].\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "inspection.plot_partial_dependence()", "path": "modules/generated/sklearn.inspection.plot_partial_dependence#sklearn.inspection.plot_partial_dependence", "type": "inspection", "text": "\nPartial dependence (PD) and individual conditional expectation (ICE) plots.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.check_increasing()", "path": "modules/generated/sklearn.isotonic.check_increasing#sklearn.isotonic.check_increasing", "type": "isotonic", "text": "\nDetermine whether y is monotonically correlated with x.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.IsotonicRegression", "path": "modules/generated/sklearn.isotonic.isotonicregression#sklearn.isotonic.IsotonicRegression", "type": "isotonic", "text": "\nIsotonic regression model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.IsotonicRegression()", "path": "modules/generated/sklearn.isotonic.isotonicregression", "type": "isotonic", "text": "\nIsotonic regression model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.IsotonicRegression.fit()", "path": "modules/generated/sklearn.isotonic.isotonicregression#sklearn.isotonic.IsotonicRegression.fit", "type": "isotonic", "text": "\nFit the model using X, y as training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.IsotonicRegression.fit_transform()", "path": "modules/generated/sklearn.isotonic.isotonicregression#sklearn.isotonic.IsotonicRegression.fit_transform", "type": "isotonic", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.IsotonicRegression.get_params()", "path": "modules/generated/sklearn.isotonic.isotonicregression#sklearn.isotonic.IsotonicRegression.get_params", "type": "isotonic", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.IsotonicRegression.predict()", "path": "modules/generated/sklearn.isotonic.isotonicregression#sklearn.isotonic.IsotonicRegression.predict", "type": "isotonic", "text": "\nPredict new data by linear interpolation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.IsotonicRegression.score()", "path": "modules/generated/sklearn.isotonic.isotonicregression#sklearn.isotonic.IsotonicRegression.score", "type": "isotonic", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.IsotonicRegression.set_params()", "path": "modules/generated/sklearn.isotonic.isotonicregression#sklearn.isotonic.IsotonicRegression.set_params", "type": "isotonic", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.IsotonicRegression.transform()", "path": "modules/generated/sklearn.isotonic.isotonicregression#sklearn.isotonic.IsotonicRegression.transform", "type": "isotonic", "text": "\nTransform new data by linear interpolation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "isotonic.isotonic_regression()", "path": "modules/generated/sklearn.isotonic.isotonic_regression#sklearn.isotonic.isotonic_regression", "type": "isotonic", "text": "\nSolve the isotonic regression model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.AdditiveChi2Sampler", "path": "modules/generated/sklearn.kernel_approximation.additivechi2sampler#sklearn.kernel_approximation.AdditiveChi2Sampler", "type": "kernel_approximation", "text": "\nApproximate feature map for additive chi2 kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.AdditiveChi2Sampler()", "path": "modules/generated/sklearn.kernel_approximation.additivechi2sampler", "type": "kernel_approximation", "text": "\nApproximate feature map for additive chi2 kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.AdditiveChi2Sampler.fit()", "path": "modules/generated/sklearn.kernel_approximation.additivechi2sampler#sklearn.kernel_approximation.AdditiveChi2Sampler.fit", "type": "kernel_approximation", "text": "\nSet the parameters\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.AdditiveChi2Sampler.fit_transform()", "path": "modules/generated/sklearn.kernel_approximation.additivechi2sampler#sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", "type": "kernel_approximation", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.AdditiveChi2Sampler.get_params()", "path": "modules/generated/sklearn.kernel_approximation.additivechi2sampler#sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", "type": "kernel_approximation", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.AdditiveChi2Sampler.set_params()", "path": "modules/generated/sklearn.kernel_approximation.additivechi2sampler#sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", "type": "kernel_approximation", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.AdditiveChi2Sampler.transform()", "path": "modules/generated/sklearn.kernel_approximation.additivechi2sampler#sklearn.kernel_approximation.AdditiveChi2Sampler.transform", "type": "kernel_approximation", "text": "\nApply approximate feature map to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.Nystroem", "path": "modules/generated/sklearn.kernel_approximation.nystroem#sklearn.kernel_approximation.Nystroem", "type": "kernel_approximation", "text": "\nApproximate a kernel map using a subset of the training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.Nystroem()", "path": "modules/generated/sklearn.kernel_approximation.nystroem", "type": "kernel_approximation", "text": "\nApproximate a kernel map using a subset of the training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.Nystroem.fit()", "path": "modules/generated/sklearn.kernel_approximation.nystroem#sklearn.kernel_approximation.Nystroem.fit", "type": "kernel_approximation", "text": "\nFit estimator to data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.Nystroem.fit_transform()", "path": "modules/generated/sklearn.kernel_approximation.nystroem#sklearn.kernel_approximation.Nystroem.fit_transform", "type": "kernel_approximation", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.Nystroem.get_params()", "path": "modules/generated/sklearn.kernel_approximation.nystroem#sklearn.kernel_approximation.Nystroem.get_params", "type": "kernel_approximation", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.Nystroem.set_params()", "path": "modules/generated/sklearn.kernel_approximation.nystroem#sklearn.kernel_approximation.Nystroem.set_params", "type": "kernel_approximation", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.Nystroem.transform()", "path": "modules/generated/sklearn.kernel_approximation.nystroem#sklearn.kernel_approximation.Nystroem.transform", "type": "kernel_approximation", "text": "\nApply feature map to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.PolynomialCountSketch", "path": "modules/generated/sklearn.kernel_approximation.polynomialcountsketch#sklearn.kernel_approximation.PolynomialCountSketch", "type": "kernel_approximation", "text": "\nPolynomial kernel approximation via Tensor Sketch.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.PolynomialCountSketch()", "path": "modules/generated/sklearn.kernel_approximation.polynomialcountsketch", "type": "kernel_approximation", "text": "\nPolynomial kernel approximation via Tensor Sketch.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.PolynomialCountSketch.fit()", "path": "modules/generated/sklearn.kernel_approximation.polynomialcountsketch#sklearn.kernel_approximation.PolynomialCountSketch.fit", "type": "kernel_approximation", "text": "\nFit the model with X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.PolynomialCountSketch.fit_transform()", "path": "modules/generated/sklearn.kernel_approximation.polynomialcountsketch#sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", "type": "kernel_approximation", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.PolynomialCountSketch.get_params()", "path": "modules/generated/sklearn.kernel_approximation.polynomialcountsketch#sklearn.kernel_approximation.PolynomialCountSketch.get_params", "type": "kernel_approximation", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.PolynomialCountSketch.set_params()", "path": "modules/generated/sklearn.kernel_approximation.polynomialcountsketch#sklearn.kernel_approximation.PolynomialCountSketch.set_params", "type": "kernel_approximation", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.PolynomialCountSketch.transform()", "path": "modules/generated/sklearn.kernel_approximation.polynomialcountsketch#sklearn.kernel_approximation.PolynomialCountSketch.transform", "type": "kernel_approximation", "text": "\nGenerate the feature map approximation for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.RBFSampler", "path": "modules/generated/sklearn.kernel_approximation.rbfsampler#sklearn.kernel_approximation.RBFSampler", "type": "kernel_approximation", "text": "\nApproximates feature map of an RBF kernel by Monte Carlo approximation of its\nFourier transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.RBFSampler()", "path": "modules/generated/sklearn.kernel_approximation.rbfsampler", "type": "kernel_approximation", "text": "\nApproximates feature map of an RBF kernel by Monte Carlo approximation of its\nFourier transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.RBFSampler.fit()", "path": "modules/generated/sklearn.kernel_approximation.rbfsampler#sklearn.kernel_approximation.RBFSampler.fit", "type": "kernel_approximation", "text": "\nFit the model with X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.RBFSampler.fit_transform()", "path": "modules/generated/sklearn.kernel_approximation.rbfsampler#sklearn.kernel_approximation.RBFSampler.fit_transform", "type": "kernel_approximation", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.RBFSampler.get_params()", "path": "modules/generated/sklearn.kernel_approximation.rbfsampler#sklearn.kernel_approximation.RBFSampler.get_params", "type": "kernel_approximation", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.RBFSampler.set_params()", "path": "modules/generated/sklearn.kernel_approximation.rbfsampler#sklearn.kernel_approximation.RBFSampler.set_params", "type": "kernel_approximation", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.RBFSampler.transform()", "path": "modules/generated/sklearn.kernel_approximation.rbfsampler#sklearn.kernel_approximation.RBFSampler.transform", "type": "kernel_approximation", "text": "\nApply the approximate feature map to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.SkewedChi2Sampler", "path": "modules/generated/sklearn.kernel_approximation.skewedchi2sampler#sklearn.kernel_approximation.SkewedChi2Sampler", "type": "kernel_approximation", "text": "\nApproximates feature map of the \u201cskewed chi-squared\u201d kernel by Monte Carlo\napproximation of its Fourier transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.SkewedChi2Sampler()", "path": "modules/generated/sklearn.kernel_approximation.skewedchi2sampler", "type": "kernel_approximation", "text": "\nApproximates feature map of the \u201cskewed chi-squared\u201d kernel by Monte Carlo\napproximation of its Fourier transform.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.SkewedChi2Sampler.fit()", "path": "modules/generated/sklearn.kernel_approximation.skewedchi2sampler#sklearn.kernel_approximation.SkewedChi2Sampler.fit", "type": "kernel_approximation", "text": "\nFit the model with X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.SkewedChi2Sampler.fit_transform()", "path": "modules/generated/sklearn.kernel_approximation.skewedchi2sampler#sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", "type": "kernel_approximation", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.SkewedChi2Sampler.get_params()", "path": "modules/generated/sklearn.kernel_approximation.skewedchi2sampler#sklearn.kernel_approximation.SkewedChi2Sampler.get_params", "type": "kernel_approximation", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.SkewedChi2Sampler.set_params()", "path": "modules/generated/sklearn.kernel_approximation.skewedchi2sampler#sklearn.kernel_approximation.SkewedChi2Sampler.set_params", "type": "kernel_approximation", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_approximation.SkewedChi2Sampler.transform()", "path": "modules/generated/sklearn.kernel_approximation.skewedchi2sampler#sklearn.kernel_approximation.SkewedChi2Sampler.transform", "type": "kernel_approximation", "text": "\nApply the approximate feature map to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_ridge.KernelRidge", "path": "modules/generated/sklearn.kernel_ridge.kernelridge#sklearn.kernel_ridge.KernelRidge", "type": "kernel_ridge", "text": "\nKernel ridge regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_ridge.KernelRidge()", "path": "modules/generated/sklearn.kernel_ridge.kernelridge", "type": "kernel_ridge", "text": "\nKernel ridge regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_ridge.KernelRidge.fit()", "path": "modules/generated/sklearn.kernel_ridge.kernelridge#sklearn.kernel_ridge.KernelRidge.fit", "type": "kernel_ridge", "text": "\nFit Kernel Ridge regression model\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_ridge.KernelRidge.get_params()", "path": "modules/generated/sklearn.kernel_ridge.kernelridge#sklearn.kernel_ridge.KernelRidge.get_params", "type": "kernel_ridge", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_ridge.KernelRidge.predict()", "path": "modules/generated/sklearn.kernel_ridge.kernelridge#sklearn.kernel_ridge.KernelRidge.predict", "type": "kernel_ridge", "text": "\nPredict using the kernel ridge model\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_ridge.KernelRidge.score()", "path": "modules/generated/sklearn.kernel_ridge.kernelridge#sklearn.kernel_ridge.KernelRidge.score", "type": "kernel_ridge", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "kernel_ridge.KernelRidge.set_params()", "path": "modules/generated/sklearn.kernel_ridge.kernelridge#sklearn.kernel_ridge.KernelRidge.set_params", "type": "kernel_ridge", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ARDRegression", "path": "modules/generated/sklearn.linear_model.ardregression#sklearn.linear_model.ARDRegression", "type": "linear_model", "text": "\nBayesian ARD regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ARDRegression()", "path": "modules/generated/sklearn.linear_model.ardregression", "type": "linear_model", "text": "\nBayesian ARD regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ARDRegression.fit()", "path": "modules/generated/sklearn.linear_model.ardregression#sklearn.linear_model.ARDRegression.fit", "type": "linear_model", "text": "\nFit the ARDRegression model according to the given training data and\nparameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ARDRegression.get_params()", "path": "modules/generated/sklearn.linear_model.ardregression#sklearn.linear_model.ARDRegression.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ARDRegression.predict()", "path": "modules/generated/sklearn.linear_model.ardregression#sklearn.linear_model.ARDRegression.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ARDRegression.score()", "path": "modules/generated/sklearn.linear_model.ardregression#sklearn.linear_model.ARDRegression.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ARDRegression.set_params()", "path": "modules/generated/sklearn.linear_model.ardregression#sklearn.linear_model.ARDRegression.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.BayesianRidge", "path": "modules/generated/sklearn.linear_model.bayesianridge#sklearn.linear_model.BayesianRidge", "type": "linear_model", "text": "\nBayesian ridge regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.BayesianRidge()", "path": "modules/generated/sklearn.linear_model.bayesianridge", "type": "linear_model", "text": "\nBayesian ridge regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.BayesianRidge.fit()", "path": "modules/generated/sklearn.linear_model.bayesianridge#sklearn.linear_model.BayesianRidge.fit", "type": "linear_model", "text": "\nFit the model\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.BayesianRidge.get_params()", "path": "modules/generated/sklearn.linear_model.bayesianridge#sklearn.linear_model.BayesianRidge.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.BayesianRidge.predict()", "path": "modules/generated/sklearn.linear_model.bayesianridge#sklearn.linear_model.BayesianRidge.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.BayesianRidge.score()", "path": "modules/generated/sklearn.linear_model.bayesianridge#sklearn.linear_model.BayesianRidge.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.BayesianRidge.set_params()", "path": "modules/generated/sklearn.linear_model.bayesianridge#sklearn.linear_model.BayesianRidge.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNet", "path": "modules/generated/sklearn.linear_model.elasticnet#sklearn.linear_model.ElasticNet", "type": "linear_model", "text": "\nLinear regression with combined L1 and L2 priors as regularizer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNet()", "path": "modules/generated/sklearn.linear_model.elasticnet", "type": "linear_model", "text": "\nLinear regression with combined L1 and L2 priors as regularizer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNet.fit()", "path": "modules/generated/sklearn.linear_model.elasticnet#sklearn.linear_model.ElasticNet.fit", "type": "linear_model", "text": "\nFit model with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNet.get_params()", "path": "modules/generated/sklearn.linear_model.elasticnet#sklearn.linear_model.ElasticNet.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNet.path()", "path": "modules/generated/sklearn.linear_model.elasticnet#sklearn.linear_model.ElasticNet.path", "type": "linear_model", "text": "\nCompute elastic net path with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNet.predict()", "path": "modules/generated/sklearn.linear_model.elasticnet#sklearn.linear_model.ElasticNet.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNet.score()", "path": "modules/generated/sklearn.linear_model.elasticnet#sklearn.linear_model.ElasticNet.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNet.set_params()", "path": "modules/generated/sklearn.linear_model.elasticnet#sklearn.linear_model.ElasticNet.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNet.sparse_coef_()", "path": "modules/generated/sklearn.linear_model.elasticnet#sklearn.linear_model.ElasticNet.sparse_coef_", "type": "linear_model", "text": "\nSparse representation of the fitted `coef_`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNetCV", "path": "modules/generated/sklearn.linear_model.elasticnetcv#sklearn.linear_model.ElasticNetCV", "type": "linear_model", "text": "\nElastic Net model with iterative fitting along a regularization path.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNetCV()", "path": "modules/generated/sklearn.linear_model.elasticnetcv", "type": "linear_model", "text": "\nElastic Net model with iterative fitting along a regularization path.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNetCV.fit()", "path": "modules/generated/sklearn.linear_model.elasticnetcv#sklearn.linear_model.ElasticNetCV.fit", "type": "linear_model", "text": "\nFit linear model with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNetCV.get_params()", "path": "modules/generated/sklearn.linear_model.elasticnetcv#sklearn.linear_model.ElasticNetCV.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNetCV.path()", "path": "modules/generated/sklearn.linear_model.elasticnetcv#sklearn.linear_model.ElasticNetCV.path", "type": "linear_model", "text": "\nCompute elastic net path with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNetCV.predict()", "path": "modules/generated/sklearn.linear_model.elasticnetcv#sklearn.linear_model.ElasticNetCV.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNetCV.score()", "path": "modules/generated/sklearn.linear_model.elasticnetcv#sklearn.linear_model.ElasticNetCV.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ElasticNetCV.set_params()", "path": "modules/generated/sklearn.linear_model.elasticnetcv#sklearn.linear_model.ElasticNetCV.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.enet_path()", "path": "modules/generated/sklearn.linear_model.enet_path#sklearn.linear_model.enet_path", "type": "linear_model", "text": "\nCompute elastic net path with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.GammaRegressor", "path": "modules/generated/sklearn.linear_model.gammaregressor#sklearn.linear_model.GammaRegressor", "type": "linear_model", "text": "\nGeneralized Linear Model with a Gamma distribution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.GammaRegressor()", "path": "modules/generated/sklearn.linear_model.gammaregressor", "type": "linear_model", "text": "\nGeneralized Linear Model with a Gamma distribution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.GammaRegressor.fit()", "path": "modules/generated/sklearn.linear_model.gammaregressor#sklearn.linear_model.GammaRegressor.fit", "type": "linear_model", "text": "\nFit a Generalized Linear Model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.GammaRegressor.get_params()", "path": "modules/generated/sklearn.linear_model.gammaregressor#sklearn.linear_model.GammaRegressor.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.GammaRegressor.predict()", "path": "modules/generated/sklearn.linear_model.gammaregressor#sklearn.linear_model.GammaRegressor.predict", "type": "linear_model", "text": "\nPredict using GLM with feature matrix X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.GammaRegressor.score()", "path": "modules/generated/sklearn.linear_model.gammaregressor#sklearn.linear_model.GammaRegressor.score", "type": "linear_model", "text": "\nCompute D^2, the percentage of deviance explained.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.GammaRegressor.set_params()", "path": "modules/generated/sklearn.linear_model.gammaregressor#sklearn.linear_model.GammaRegressor.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.HuberRegressor", "path": "modules/generated/sklearn.linear_model.huberregressor#sklearn.linear_model.HuberRegressor", "type": "linear_model", "text": "\nLinear regression model that is robust to outliers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.HuberRegressor()", "path": "modules/generated/sklearn.linear_model.huberregressor", "type": "linear_model", "text": "\nLinear regression model that is robust to outliers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.HuberRegressor.fit()", "path": "modules/generated/sklearn.linear_model.huberregressor#sklearn.linear_model.HuberRegressor.fit", "type": "linear_model", "text": "\nFit the model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.HuberRegressor.get_params()", "path": "modules/generated/sklearn.linear_model.huberregressor#sklearn.linear_model.HuberRegressor.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.HuberRegressor.predict()", "path": "modules/generated/sklearn.linear_model.huberregressor#sklearn.linear_model.HuberRegressor.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.HuberRegressor.score()", "path": "modules/generated/sklearn.linear_model.huberregressor#sklearn.linear_model.HuberRegressor.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.HuberRegressor.set_params()", "path": "modules/generated/sklearn.linear_model.huberregressor#sklearn.linear_model.HuberRegressor.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lars", "path": "modules/generated/sklearn.linear_model.lars#sklearn.linear_model.Lars", "type": "linear_model", "text": "\nLeast Angle Regression model a.k.a. LAR\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lars()", "path": "modules/generated/sklearn.linear_model.lars", "type": "linear_model", "text": "\nLeast Angle Regression model a.k.a. LAR\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lars.fit()", "path": "modules/generated/sklearn.linear_model.lars#sklearn.linear_model.Lars.fit", "type": "linear_model", "text": "\nFit the model using X, y as training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lars.get_params()", "path": "modules/generated/sklearn.linear_model.lars#sklearn.linear_model.Lars.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lars.predict()", "path": "modules/generated/sklearn.linear_model.lars#sklearn.linear_model.Lars.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lars.score()", "path": "modules/generated/sklearn.linear_model.lars#sklearn.linear_model.Lars.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lars.set_params()", "path": "modules/generated/sklearn.linear_model.lars#sklearn.linear_model.Lars.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LarsCV", "path": "modules/generated/sklearn.linear_model.larscv#sklearn.linear_model.LarsCV", "type": "linear_model", "text": "\nCross-validated Least Angle Regression model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LarsCV()", "path": "modules/generated/sklearn.linear_model.larscv", "type": "linear_model", "text": "\nCross-validated Least Angle Regression model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LarsCV.fit()", "path": "modules/generated/sklearn.linear_model.larscv#sklearn.linear_model.LarsCV.fit", "type": "linear_model", "text": "\nFit the model using X, y as training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LarsCV.get_params()", "path": "modules/generated/sklearn.linear_model.larscv#sklearn.linear_model.LarsCV.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LarsCV.predict()", "path": "modules/generated/sklearn.linear_model.larscv#sklearn.linear_model.LarsCV.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LarsCV.score()", "path": "modules/generated/sklearn.linear_model.larscv#sklearn.linear_model.LarsCV.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LarsCV.set_params()", "path": "modules/generated/sklearn.linear_model.larscv#sklearn.linear_model.LarsCV.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.lars_path()", "path": "modules/generated/sklearn.linear_model.lars_path#sklearn.linear_model.lars_path", "type": "linear_model", "text": "\nCompute Least Angle Regression or Lasso path using LARS algorithm [1]\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.lars_path_gram()", "path": "modules/generated/sklearn.linear_model.lars_path_gram#sklearn.linear_model.lars_path_gram", "type": "linear_model", "text": "\nlars_path in the sufficient stats mode [1]\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lasso", "path": "modules/generated/sklearn.linear_model.lasso#sklearn.linear_model.Lasso", "type": "linear_model", "text": "\nLinear Model trained with L1 prior as regularizer (aka the Lasso)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lasso()", "path": "modules/generated/sklearn.linear_model.lasso", "type": "linear_model", "text": "\nLinear Model trained with L1 prior as regularizer (aka the Lasso)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lasso.fit()", "path": "modules/generated/sklearn.linear_model.lasso#sklearn.linear_model.Lasso.fit", "type": "linear_model", "text": "\nFit model with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lasso.get_params()", "path": "modules/generated/sklearn.linear_model.lasso#sklearn.linear_model.Lasso.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lasso.path()", "path": "modules/generated/sklearn.linear_model.lasso#sklearn.linear_model.Lasso.path", "type": "linear_model", "text": "\nCompute elastic net path with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lasso.predict()", "path": "modules/generated/sklearn.linear_model.lasso#sklearn.linear_model.Lasso.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lasso.score()", "path": "modules/generated/sklearn.linear_model.lasso#sklearn.linear_model.Lasso.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lasso.set_params()", "path": "modules/generated/sklearn.linear_model.lasso#sklearn.linear_model.Lasso.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Lasso.sparse_coef_()", "path": "modules/generated/sklearn.linear_model.lasso#sklearn.linear_model.Lasso.sparse_coef_", "type": "linear_model", "text": "\nSparse representation of the fitted `coef_`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoCV", "path": "modules/generated/sklearn.linear_model.lassocv#sklearn.linear_model.LassoCV", "type": "linear_model", "text": "\nLasso linear model with iterative fitting along a regularization path.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoCV()", "path": "modules/generated/sklearn.linear_model.lassocv", "type": "linear_model", "text": "\nLasso linear model with iterative fitting along a regularization path.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoCV.fit()", "path": "modules/generated/sklearn.linear_model.lassocv#sklearn.linear_model.LassoCV.fit", "type": "linear_model", "text": "\nFit linear model with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoCV.get_params()", "path": "modules/generated/sklearn.linear_model.lassocv#sklearn.linear_model.LassoCV.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoCV.path()", "path": "modules/generated/sklearn.linear_model.lassocv#sklearn.linear_model.LassoCV.path", "type": "linear_model", "text": "\nCompute Lasso path with coordinate descent\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoCV.predict()", "path": "modules/generated/sklearn.linear_model.lassocv#sklearn.linear_model.LassoCV.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoCV.score()", "path": "modules/generated/sklearn.linear_model.lassocv#sklearn.linear_model.LassoCV.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoCV.set_params()", "path": "modules/generated/sklearn.linear_model.lassocv#sklearn.linear_model.LassoCV.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLars", "path": "modules/generated/sklearn.linear_model.lassolars#sklearn.linear_model.LassoLars", "type": "linear_model", "text": "\nLasso model fit with Least Angle Regression a.k.a. Lars\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLars()", "path": "modules/generated/sklearn.linear_model.lassolars", "type": "linear_model", "text": "\nLasso model fit with Least Angle Regression a.k.a. Lars\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLars.fit()", "path": "modules/generated/sklearn.linear_model.lassolars#sklearn.linear_model.LassoLars.fit", "type": "linear_model", "text": "\nFit the model using X, y as training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLars.get_params()", "path": "modules/generated/sklearn.linear_model.lassolars#sklearn.linear_model.LassoLars.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLars.predict()", "path": "modules/generated/sklearn.linear_model.lassolars#sklearn.linear_model.LassoLars.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLars.score()", "path": "modules/generated/sklearn.linear_model.lassolars#sklearn.linear_model.LassoLars.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLars.set_params()", "path": "modules/generated/sklearn.linear_model.lassolars#sklearn.linear_model.LassoLars.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsCV", "path": "modules/generated/sklearn.linear_model.lassolarscv#sklearn.linear_model.LassoLarsCV", "type": "linear_model", "text": "\nCross-validated Lasso, using the LARS algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsCV()", "path": "modules/generated/sklearn.linear_model.lassolarscv", "type": "linear_model", "text": "\nCross-validated Lasso, using the LARS algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsCV.fit()", "path": "modules/generated/sklearn.linear_model.lassolarscv#sklearn.linear_model.LassoLarsCV.fit", "type": "linear_model", "text": "\nFit the model using X, y as training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsCV.get_params()", "path": "modules/generated/sklearn.linear_model.lassolarscv#sklearn.linear_model.LassoLarsCV.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsCV.predict()", "path": "modules/generated/sklearn.linear_model.lassolarscv#sklearn.linear_model.LassoLarsCV.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsCV.score()", "path": "modules/generated/sklearn.linear_model.lassolarscv#sklearn.linear_model.LassoLarsCV.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsCV.set_params()", "path": "modules/generated/sklearn.linear_model.lassolarscv#sklearn.linear_model.LassoLarsCV.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsIC", "path": "modules/generated/sklearn.linear_model.lassolarsic#sklearn.linear_model.LassoLarsIC", "type": "linear_model", "text": "\nLasso model fit with Lars using BIC or AIC for model selection\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsIC()", "path": "modules/generated/sklearn.linear_model.lassolarsic", "type": "linear_model", "text": "\nLasso model fit with Lars using BIC or AIC for model selection\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsIC.fit()", "path": "modules/generated/sklearn.linear_model.lassolarsic#sklearn.linear_model.LassoLarsIC.fit", "type": "linear_model", "text": "\nFit the model using X, y as training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsIC.get_params()", "path": "modules/generated/sklearn.linear_model.lassolarsic#sklearn.linear_model.LassoLarsIC.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsIC.predict()", "path": "modules/generated/sklearn.linear_model.lassolarsic#sklearn.linear_model.LassoLarsIC.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsIC.score()", "path": "modules/generated/sklearn.linear_model.lassolarsic#sklearn.linear_model.LassoLarsIC.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LassoLarsIC.set_params()", "path": "modules/generated/sklearn.linear_model.lassolarsic#sklearn.linear_model.LassoLarsIC.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.lasso_path()", "path": "modules/generated/sklearn.linear_model.lasso_path#sklearn.linear_model.lasso_path", "type": "linear_model", "text": "\nCompute Lasso path with coordinate descent\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LinearRegression", "path": "modules/generated/sklearn.linear_model.linearregression#sklearn.linear_model.LinearRegression", "type": "linear_model", "text": "\nOrdinary least squares Linear Regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LinearRegression()", "path": "modules/generated/sklearn.linear_model.linearregression", "type": "linear_model", "text": "\nOrdinary least squares Linear Regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LinearRegression.fit()", "path": "modules/generated/sklearn.linear_model.linearregression#sklearn.linear_model.LinearRegression.fit", "type": "linear_model", "text": "\nFit linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LinearRegression.get_params()", "path": "modules/generated/sklearn.linear_model.linearregression#sklearn.linear_model.LinearRegression.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LinearRegression.predict()", "path": "modules/generated/sklearn.linear_model.linearregression#sklearn.linear_model.LinearRegression.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LinearRegression.score()", "path": "modules/generated/sklearn.linear_model.linearregression#sklearn.linear_model.LinearRegression.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LinearRegression.set_params()", "path": "modules/generated/sklearn.linear_model.linearregression#sklearn.linear_model.LinearRegression.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression", "type": "linear_model", "text": "\nLogistic Regression (aka logit, MaxEnt) classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression()", "path": "modules/generated/sklearn.linear_model.logisticregression", "type": "linear_model", "text": "\nLogistic Regression (aka logit, MaxEnt) classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression.decision_function()", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression.decision_function", "type": "linear_model", "text": "\nPredict confidence scores for samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression.densify()", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression.densify", "type": "linear_model", "text": "\nConvert coefficient matrix to dense array format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression.fit()", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression.fit", "type": "linear_model", "text": "\nFit the model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression.get_params()", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression.predict()", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression.predict", "type": "linear_model", "text": "\nPredict class labels for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression.predict_log_proba()", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression.predict_log_proba", "type": "linear_model", "text": "\nPredict logarithm of probability estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression.predict_proba()", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression.predict_proba", "type": "linear_model", "text": "\nProbability estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression.score()", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression.score", "type": "linear_model", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression.set_params()", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegression.sparsify()", "path": "modules/generated/sklearn.linear_model.logisticregression#sklearn.linear_model.LogisticRegression.sparsify", "type": "linear_model", "text": "\nConvert coefficient matrix to sparse format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV", "type": "linear_model", "text": "\nLogistic Regression CV (aka logit, MaxEnt) classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv", "type": "linear_model", "text": "\nLogistic Regression CV (aka logit, MaxEnt) classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV.decision_function()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV.decision_function", "type": "linear_model", "text": "\nPredict confidence scores for samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV.densify()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV.densify", "type": "linear_model", "text": "\nConvert coefficient matrix to dense array format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV.fit()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV.fit", "type": "linear_model", "text": "\nFit the model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV.get_params()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV.predict()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV.predict", "type": "linear_model", "text": "\nPredict class labels for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV.predict_log_proba()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV.predict_log_proba", "type": "linear_model", "text": "\nPredict logarithm of probability estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV.predict_proba()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV.predict_proba", "type": "linear_model", "text": "\nProbability estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV.score()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV.score", "type": "linear_model", "text": "\nReturns the score using the `scoring` option on the given test data and\nlabels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV.set_params()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.LogisticRegressionCV.sparsify()", "path": "modules/generated/sklearn.linear_model.logisticregressioncv#sklearn.linear_model.LogisticRegressionCV.sparsify", "type": "linear_model", "text": "\nConvert coefficient matrix to sparse format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNet", "path": "modules/generated/sklearn.linear_model.multitaskelasticnet#sklearn.linear_model.MultiTaskElasticNet", "type": "linear_model", "text": "\nMulti-task ElasticNet model trained with L1/L2 mixed-norm as regularizer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNet()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnet", "type": "linear_model", "text": "\nMulti-task ElasticNet model trained with L1/L2 mixed-norm as regularizer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNet.fit()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnet#sklearn.linear_model.MultiTaskElasticNet.fit", "type": "linear_model", "text": "\nFit MultiTaskElasticNet model with coordinate descent\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNet.get_params()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnet#sklearn.linear_model.MultiTaskElasticNet.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNet.path()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnet#sklearn.linear_model.MultiTaskElasticNet.path", "type": "linear_model", "text": "\nCompute elastic net path with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNet.predict()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnet#sklearn.linear_model.MultiTaskElasticNet.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNet.score()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnet#sklearn.linear_model.MultiTaskElasticNet.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNet.set_params()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnet#sklearn.linear_model.MultiTaskElasticNet.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNet.sparse_coef_()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnet#sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", "type": "linear_model", "text": "\nSparse representation of the fitted `coef_`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNetCV", "path": "modules/generated/sklearn.linear_model.multitaskelasticnetcv#sklearn.linear_model.MultiTaskElasticNetCV", "type": "linear_model", "text": "\nMulti-task L1/L2 ElasticNet with built-in cross-validation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNetCV()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnetcv", "type": "linear_model", "text": "\nMulti-task L1/L2 ElasticNet with built-in cross-validation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNetCV.fit()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnetcv#sklearn.linear_model.MultiTaskElasticNetCV.fit", "type": "linear_model", "text": "\nFit linear model with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNetCV.get_params()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnetcv#sklearn.linear_model.MultiTaskElasticNetCV.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNetCV.path()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnetcv#sklearn.linear_model.MultiTaskElasticNetCV.path", "type": "linear_model", "text": "\nCompute elastic net path with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNetCV.predict()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnetcv#sklearn.linear_model.MultiTaskElasticNetCV.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNetCV.score()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnetcv#sklearn.linear_model.MultiTaskElasticNetCV.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskElasticNetCV.set_params()", "path": "modules/generated/sklearn.linear_model.multitaskelasticnetcv#sklearn.linear_model.MultiTaskElasticNetCV.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLasso", "path": "modules/generated/sklearn.linear_model.multitasklasso#sklearn.linear_model.MultiTaskLasso", "type": "linear_model", "text": "\nMulti-task Lasso model trained with L1/L2 mixed-norm as regularizer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLasso()", "path": "modules/generated/sklearn.linear_model.multitasklasso", "type": "linear_model", "text": "\nMulti-task Lasso model trained with L1/L2 mixed-norm as regularizer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLasso.fit()", "path": "modules/generated/sklearn.linear_model.multitasklasso#sklearn.linear_model.MultiTaskLasso.fit", "type": "linear_model", "text": "\nFit MultiTaskElasticNet model with coordinate descent\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLasso.get_params()", "path": "modules/generated/sklearn.linear_model.multitasklasso#sklearn.linear_model.MultiTaskLasso.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLasso.path()", "path": "modules/generated/sklearn.linear_model.multitasklasso#sklearn.linear_model.MultiTaskLasso.path", "type": "linear_model", "text": "\nCompute elastic net path with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLasso.predict()", "path": "modules/generated/sklearn.linear_model.multitasklasso#sklearn.linear_model.MultiTaskLasso.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLasso.score()", "path": "modules/generated/sklearn.linear_model.multitasklasso#sklearn.linear_model.MultiTaskLasso.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLasso.set_params()", "path": "modules/generated/sklearn.linear_model.multitasklasso#sklearn.linear_model.MultiTaskLasso.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLasso.sparse_coef_()", "path": "modules/generated/sklearn.linear_model.multitasklasso#sklearn.linear_model.MultiTaskLasso.sparse_coef_", "type": "linear_model", "text": "\nSparse representation of the fitted `coef_`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLassoCV", "path": "modules/generated/sklearn.linear_model.multitasklassocv#sklearn.linear_model.MultiTaskLassoCV", "type": "linear_model", "text": "\nMulti-task Lasso model trained with L1/L2 mixed-norm as regularizer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLassoCV()", "path": "modules/generated/sklearn.linear_model.multitasklassocv", "type": "linear_model", "text": "\nMulti-task Lasso model trained with L1/L2 mixed-norm as regularizer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLassoCV.fit()", "path": "modules/generated/sklearn.linear_model.multitasklassocv#sklearn.linear_model.MultiTaskLassoCV.fit", "type": "linear_model", "text": "\nFit linear model with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLassoCV.get_params()", "path": "modules/generated/sklearn.linear_model.multitasklassocv#sklearn.linear_model.MultiTaskLassoCV.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLassoCV.path()", "path": "modules/generated/sklearn.linear_model.multitasklassocv#sklearn.linear_model.MultiTaskLassoCV.path", "type": "linear_model", "text": "\nCompute Lasso path with coordinate descent\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLassoCV.predict()", "path": "modules/generated/sklearn.linear_model.multitasklassocv#sklearn.linear_model.MultiTaskLassoCV.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLassoCV.score()", "path": "modules/generated/sklearn.linear_model.multitasklassocv#sklearn.linear_model.MultiTaskLassoCV.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.MultiTaskLassoCV.set_params()", "path": "modules/generated/sklearn.linear_model.multitasklassocv#sklearn.linear_model.MultiTaskLassoCV.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuit", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuit#sklearn.linear_model.OrthogonalMatchingPursuit", "type": "linear_model", "text": "\nOrthogonal Matching Pursuit model (OMP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuit()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuit", "type": "linear_model", "text": "\nOrthogonal Matching Pursuit model (OMP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuit.fit()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuit#sklearn.linear_model.OrthogonalMatchingPursuit.fit", "type": "linear_model", "text": "\nFit the model using X, y as training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuit.get_params()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuit#sklearn.linear_model.OrthogonalMatchingPursuit.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuit.predict()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuit#sklearn.linear_model.OrthogonalMatchingPursuit.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuit.score()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuit#sklearn.linear_model.OrthogonalMatchingPursuit.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuit.set_params()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuit#sklearn.linear_model.OrthogonalMatchingPursuit.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuitCV", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuitcv#sklearn.linear_model.OrthogonalMatchingPursuitCV", "type": "linear_model", "text": "\nCross-validated Orthogonal Matching Pursuit model (OMP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuitCV()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuitcv", "type": "linear_model", "text": "\nCross-validated Orthogonal Matching Pursuit model (OMP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuitCV.fit()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuitcv#sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", "type": "linear_model", "text": "\nFit the model using X, y as training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuitCV.get_params()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuitcv#sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuitCV.predict()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuitcv#sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuitCV.score()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuitcv#sklearn.linear_model.OrthogonalMatchingPursuitCV.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.OrthogonalMatchingPursuitCV.set_params()", "path": "modules/generated/sklearn.linear_model.orthogonalmatchingpursuitcv#sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.orthogonal_mp()", "path": "modules/generated/sklearn.linear_model.orthogonal_mp#sklearn.linear_model.orthogonal_mp", "type": "linear_model", "text": "\nOrthogonal Matching Pursuit (OMP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.orthogonal_mp_gram()", "path": "modules/generated/sklearn.linear_model.orthogonal_mp_gram#sklearn.linear_model.orthogonal_mp_gram", "type": "linear_model", "text": "\nGram Orthogonal Matching Pursuit (OMP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier#sklearn.linear_model.PassiveAggressiveClassifier", "type": "linear_model", "text": "\nPassive Aggressive Classifier\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier", "type": "linear_model", "text": "\nPassive Aggressive Classifier\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier.decision_function()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier#sklearn.linear_model.PassiveAggressiveClassifier.decision_function", "type": "linear_model", "text": "\nPredict confidence scores for samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier.densify()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier#sklearn.linear_model.PassiveAggressiveClassifier.densify", "type": "linear_model", "text": "\nConvert coefficient matrix to dense array format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier.fit()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier#sklearn.linear_model.PassiveAggressiveClassifier.fit", "type": "linear_model", "text": "\nFit linear model with Passive Aggressive algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier.get_params()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier#sklearn.linear_model.PassiveAggressiveClassifier.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier.partial_fit()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier#sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", "type": "linear_model", "text": "\nFit linear model with Passive Aggressive algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier.predict()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier#sklearn.linear_model.PassiveAggressiveClassifier.predict", "type": "linear_model", "text": "\nPredict class labels for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier.score()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier#sklearn.linear_model.PassiveAggressiveClassifier.score", "type": "linear_model", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier.set_params()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier#sklearn.linear_model.PassiveAggressiveClassifier.set_params", "type": "linear_model", "text": "\nSet and validate the parameters of estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveClassifier.sparsify()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveclassifier#sklearn.linear_model.PassiveAggressiveClassifier.sparsify", "type": "linear_model", "text": "\nConvert coefficient matrix to sparse format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PassiveAggressiveRegressor()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveregressor#sklearn.linear_model.PassiveAggressiveRegressor", "type": "linear_model", "text": "\nPassive Aggressive Regressor\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron", "path": "modules/generated/sklearn.linear_model.perceptron#sklearn.linear_model.Perceptron", "type": "linear_model", "text": "\nRead more in the User Guide.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron()", "path": "modules/generated/sklearn.linear_model.perceptron", "type": "linear_model", "text": "\nRead more in the User Guide.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron.decision_function()", "path": "modules/generated/sklearn.linear_model.perceptron#sklearn.linear_model.Perceptron.decision_function", "type": "linear_model", "text": "\nPredict confidence scores for samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron.densify()", "path": "modules/generated/sklearn.linear_model.perceptron#sklearn.linear_model.Perceptron.densify", "type": "linear_model", "text": "\nConvert coefficient matrix to dense array format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron.fit()", "path": "modules/generated/sklearn.linear_model.perceptron#sklearn.linear_model.Perceptron.fit", "type": "linear_model", "text": "\nFit linear model with Stochastic Gradient Descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron.get_params()", "path": "modules/generated/sklearn.linear_model.perceptron#sklearn.linear_model.Perceptron.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron.partial_fit()", "path": "modules/generated/sklearn.linear_model.perceptron#sklearn.linear_model.Perceptron.partial_fit", "type": "linear_model", "text": "\nPerform one epoch of stochastic gradient descent on given samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron.predict()", "path": "modules/generated/sklearn.linear_model.perceptron#sklearn.linear_model.Perceptron.predict", "type": "linear_model", "text": "\nPredict class labels for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron.score()", "path": "modules/generated/sklearn.linear_model.perceptron#sklearn.linear_model.Perceptron.score", "type": "linear_model", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron.set_params()", "path": "modules/generated/sklearn.linear_model.perceptron#sklearn.linear_model.Perceptron.set_params", "type": "linear_model", "text": "\nSet and validate the parameters of estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Perceptron.sparsify()", "path": "modules/generated/sklearn.linear_model.perceptron#sklearn.linear_model.Perceptron.sparsify", "type": "linear_model", "text": "\nConvert coefficient matrix to sparse format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PoissonRegressor", "path": "modules/generated/sklearn.linear_model.poissonregressor#sklearn.linear_model.PoissonRegressor", "type": "linear_model", "text": "\nGeneralized Linear Model with a Poisson distribution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PoissonRegressor()", "path": "modules/generated/sklearn.linear_model.poissonregressor", "type": "linear_model", "text": "\nGeneralized Linear Model with a Poisson distribution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PoissonRegressor.fit()", "path": "modules/generated/sklearn.linear_model.poissonregressor#sklearn.linear_model.PoissonRegressor.fit", "type": "linear_model", "text": "\nFit a Generalized Linear Model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PoissonRegressor.get_params()", "path": "modules/generated/sklearn.linear_model.poissonregressor#sklearn.linear_model.PoissonRegressor.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PoissonRegressor.predict()", "path": "modules/generated/sklearn.linear_model.poissonregressor#sklearn.linear_model.PoissonRegressor.predict", "type": "linear_model", "text": "\nPredict using GLM with feature matrix X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PoissonRegressor.score()", "path": "modules/generated/sklearn.linear_model.poissonregressor#sklearn.linear_model.PoissonRegressor.score", "type": "linear_model", "text": "\nCompute D^2, the percentage of deviance explained.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.PoissonRegressor.set_params()", "path": "modules/generated/sklearn.linear_model.poissonregressor#sklearn.linear_model.PoissonRegressor.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RANSACRegressor", "path": "modules/generated/sklearn.linear_model.ransacregressor#sklearn.linear_model.RANSACRegressor", "type": "linear_model", "text": "\nRANSAC (RANdom SAmple Consensus) algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RANSACRegressor()", "path": "modules/generated/sklearn.linear_model.ransacregressor", "type": "linear_model", "text": "\nRANSAC (RANdom SAmple Consensus) algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RANSACRegressor.fit()", "path": "modules/generated/sklearn.linear_model.ransacregressor#sklearn.linear_model.RANSACRegressor.fit", "type": "linear_model", "text": "\nFit estimator using RANSAC algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RANSACRegressor.get_params()", "path": "modules/generated/sklearn.linear_model.ransacregressor#sklearn.linear_model.RANSACRegressor.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RANSACRegressor.predict()", "path": "modules/generated/sklearn.linear_model.ransacregressor#sklearn.linear_model.RANSACRegressor.predict", "type": "linear_model", "text": "\nPredict using the estimated model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RANSACRegressor.score()", "path": "modules/generated/sklearn.linear_model.ransacregressor#sklearn.linear_model.RANSACRegressor.score", "type": "linear_model", "text": "\nReturns the score of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RANSACRegressor.set_params()", "path": "modules/generated/sklearn.linear_model.ransacregressor#sklearn.linear_model.RANSACRegressor.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Ridge", "path": "modules/generated/sklearn.linear_model.ridge#sklearn.linear_model.Ridge", "type": "linear_model", "text": "\nLinear least squares with l2 regularization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Ridge()", "path": "modules/generated/sklearn.linear_model.ridge", "type": "linear_model", "text": "\nLinear least squares with l2 regularization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Ridge.fit()", "path": "modules/generated/sklearn.linear_model.ridge#sklearn.linear_model.Ridge.fit", "type": "linear_model", "text": "\nFit Ridge regression model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Ridge.get_params()", "path": "modules/generated/sklearn.linear_model.ridge#sklearn.linear_model.Ridge.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Ridge.predict()", "path": "modules/generated/sklearn.linear_model.ridge#sklearn.linear_model.Ridge.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Ridge.score()", "path": "modules/generated/sklearn.linear_model.ridge#sklearn.linear_model.Ridge.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.Ridge.set_params()", "path": "modules/generated/sklearn.linear_model.ridge#sklearn.linear_model.Ridge.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifier", "path": "modules/generated/sklearn.linear_model.ridgeclassifier#sklearn.linear_model.RidgeClassifier", "type": "linear_model", "text": "\nClassifier using Ridge regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifier()", "path": "modules/generated/sklearn.linear_model.ridgeclassifier", "type": "linear_model", "text": "\nClassifier using Ridge regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifier.decision_function()", "path": "modules/generated/sklearn.linear_model.ridgeclassifier#sklearn.linear_model.RidgeClassifier.decision_function", "type": "linear_model", "text": "\nPredict confidence scores for samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifier.fit()", "path": "modules/generated/sklearn.linear_model.ridgeclassifier#sklearn.linear_model.RidgeClassifier.fit", "type": "linear_model", "text": "\nFit Ridge classifier model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifier.get_params()", "path": "modules/generated/sklearn.linear_model.ridgeclassifier#sklearn.linear_model.RidgeClassifier.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifier.predict()", "path": "modules/generated/sklearn.linear_model.ridgeclassifier#sklearn.linear_model.RidgeClassifier.predict", "type": "linear_model", "text": "\nPredict class labels for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifier.score()", "path": "modules/generated/sklearn.linear_model.ridgeclassifier#sklearn.linear_model.RidgeClassifier.score", "type": "linear_model", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifier.set_params()", "path": "modules/generated/sklearn.linear_model.ridgeclassifier#sklearn.linear_model.RidgeClassifier.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifierCV", "path": "modules/generated/sklearn.linear_model.ridgeclassifiercv#sklearn.linear_model.RidgeClassifierCV", "type": "linear_model", "text": "\nRidge classifier with built-in cross-validation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifierCV()", "path": "modules/generated/sklearn.linear_model.ridgeclassifiercv", "type": "linear_model", "text": "\nRidge classifier with built-in cross-validation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifierCV.decision_function()", "path": "modules/generated/sklearn.linear_model.ridgeclassifiercv#sklearn.linear_model.RidgeClassifierCV.decision_function", "type": "linear_model", "text": "\nPredict confidence scores for samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifierCV.fit()", "path": "modules/generated/sklearn.linear_model.ridgeclassifiercv#sklearn.linear_model.RidgeClassifierCV.fit", "type": "linear_model", "text": "\nFit Ridge classifier with cv.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifierCV.get_params()", "path": "modules/generated/sklearn.linear_model.ridgeclassifiercv#sklearn.linear_model.RidgeClassifierCV.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifierCV.predict()", "path": "modules/generated/sklearn.linear_model.ridgeclassifiercv#sklearn.linear_model.RidgeClassifierCV.predict", "type": "linear_model", "text": "\nPredict class labels for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifierCV.score()", "path": "modules/generated/sklearn.linear_model.ridgeclassifiercv#sklearn.linear_model.RidgeClassifierCV.score", "type": "linear_model", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeClassifierCV.set_params()", "path": "modules/generated/sklearn.linear_model.ridgeclassifiercv#sklearn.linear_model.RidgeClassifierCV.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeCV", "path": "modules/generated/sklearn.linear_model.ridgecv#sklearn.linear_model.RidgeCV", "type": "linear_model", "text": "\nRidge regression with built-in cross-validation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeCV()", "path": "modules/generated/sklearn.linear_model.ridgecv", "type": "linear_model", "text": "\nRidge regression with built-in cross-validation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeCV.fit()", "path": "modules/generated/sklearn.linear_model.ridgecv#sklearn.linear_model.RidgeCV.fit", "type": "linear_model", "text": "\nFit Ridge regression model with cv.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeCV.get_params()", "path": "modules/generated/sklearn.linear_model.ridgecv#sklearn.linear_model.RidgeCV.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeCV.predict()", "path": "modules/generated/sklearn.linear_model.ridgecv#sklearn.linear_model.RidgeCV.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeCV.score()", "path": "modules/generated/sklearn.linear_model.ridgecv#sklearn.linear_model.RidgeCV.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.RidgeCV.set_params()", "path": "modules/generated/sklearn.linear_model.ridgecv#sklearn.linear_model.RidgeCV.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.ridge_regression()", "path": "modules/generated/sklearn.linear_model.ridge_regression#sklearn.linear_model.ridge_regression", "type": "linear_model", "text": "\nSolve the ridge equation by the method of normal equations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier", "type": "linear_model", "text": "\nLinear classifiers (SVM, logistic regression, etc.) with SGD training.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier()", "path": "modules/generated/sklearn.linear_model.sgdclassifier", "type": "linear_model", "text": "\nLinear classifiers (SVM, logistic regression, etc.) with SGD training.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.decision_function()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.decision_function", "type": "linear_model", "text": "\nPredict confidence scores for samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.densify()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.densify", "type": "linear_model", "text": "\nConvert coefficient matrix to dense array format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.fit()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.fit", "type": "linear_model", "text": "\nFit linear model with Stochastic Gradient Descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.get_params()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.partial_fit()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.partial_fit", "type": "linear_model", "text": "\nPerform one epoch of stochastic gradient descent on given samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.predict()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.predict", "type": "linear_model", "text": "\nPredict class labels for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.predict_log_proba()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.predict_log_proba", "type": "linear_model", "text": "\nLog of probability estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.predict_proba()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.predict_proba", "type": "linear_model", "text": "\nProbability estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.score()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.score", "type": "linear_model", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.set_params()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.set_params", "type": "linear_model", "text": "\nSet and validate the parameters of estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDClassifier.sparsify()", "path": "modules/generated/sklearn.linear_model.sgdclassifier#sklearn.linear_model.SGDClassifier.sparsify", "type": "linear_model", "text": "\nConvert coefficient matrix to sparse format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDRegressor", "path": "modules/generated/sklearn.linear_model.sgdregressor#sklearn.linear_model.SGDRegressor", "type": "linear_model", "text": "\nLinear model fitted by minimizing a regularized empirical loss with SGD\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDRegressor()", "path": "modules/generated/sklearn.linear_model.sgdregressor", "type": "linear_model", "text": "\nLinear model fitted by minimizing a regularized empirical loss with SGD\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDRegressor.densify()", "path": "modules/generated/sklearn.linear_model.sgdregressor#sklearn.linear_model.SGDRegressor.densify", "type": "linear_model", "text": "\nConvert coefficient matrix to dense array format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDRegressor.fit()", "path": "modules/generated/sklearn.linear_model.sgdregressor#sklearn.linear_model.SGDRegressor.fit", "type": "linear_model", "text": "\nFit linear model with Stochastic Gradient Descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDRegressor.get_params()", "path": "modules/generated/sklearn.linear_model.sgdregressor#sklearn.linear_model.SGDRegressor.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDRegressor.partial_fit()", "path": "modules/generated/sklearn.linear_model.sgdregressor#sklearn.linear_model.SGDRegressor.partial_fit", "type": "linear_model", "text": "\nPerform one epoch of stochastic gradient descent on given samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDRegressor.predict()", "path": "modules/generated/sklearn.linear_model.sgdregressor#sklearn.linear_model.SGDRegressor.predict", "type": "linear_model", "text": "\nPredict using the linear model\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDRegressor.score()", "path": "modules/generated/sklearn.linear_model.sgdregressor#sklearn.linear_model.SGDRegressor.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDRegressor.set_params()", "path": "modules/generated/sklearn.linear_model.sgdregressor#sklearn.linear_model.SGDRegressor.set_params", "type": "linear_model", "text": "\nSet and validate the parameters of estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.SGDRegressor.sparsify()", "path": "modules/generated/sklearn.linear_model.sgdregressor#sklearn.linear_model.SGDRegressor.sparsify", "type": "linear_model", "text": "\nConvert coefficient matrix to sparse format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TheilSenRegressor", "path": "modules/generated/sklearn.linear_model.theilsenregressor#sklearn.linear_model.TheilSenRegressor", "type": "linear_model", "text": "\nTheil-Sen Estimator: robust multivariate regression model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TheilSenRegressor()", "path": "modules/generated/sklearn.linear_model.theilsenregressor", "type": "linear_model", "text": "\nTheil-Sen Estimator: robust multivariate regression model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TheilSenRegressor.fit()", "path": "modules/generated/sklearn.linear_model.theilsenregressor#sklearn.linear_model.TheilSenRegressor.fit", "type": "linear_model", "text": "\nFit linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TheilSenRegressor.get_params()", "path": "modules/generated/sklearn.linear_model.theilsenregressor#sklearn.linear_model.TheilSenRegressor.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TheilSenRegressor.predict()", "path": "modules/generated/sklearn.linear_model.theilsenregressor#sklearn.linear_model.TheilSenRegressor.predict", "type": "linear_model", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TheilSenRegressor.score()", "path": "modules/generated/sklearn.linear_model.theilsenregressor#sklearn.linear_model.TheilSenRegressor.score", "type": "linear_model", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TheilSenRegressor.set_params()", "path": "modules/generated/sklearn.linear_model.theilsenregressor#sklearn.linear_model.TheilSenRegressor.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TweedieRegressor", "path": "modules/generated/sklearn.linear_model.tweedieregressor#sklearn.linear_model.TweedieRegressor", "type": "linear_model", "text": "\nGeneralized Linear Model with a Tweedie distribution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TweedieRegressor()", "path": "modules/generated/sklearn.linear_model.tweedieregressor", "type": "linear_model", "text": "\nGeneralized Linear Model with a Tweedie distribution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TweedieRegressor.fit()", "path": "modules/generated/sklearn.linear_model.tweedieregressor#sklearn.linear_model.TweedieRegressor.fit", "type": "linear_model", "text": "\nFit a Generalized Linear Model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TweedieRegressor.get_params()", "path": "modules/generated/sklearn.linear_model.tweedieregressor#sklearn.linear_model.TweedieRegressor.get_params", "type": "linear_model", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TweedieRegressor.predict()", "path": "modules/generated/sklearn.linear_model.tweedieregressor#sklearn.linear_model.TweedieRegressor.predict", "type": "linear_model", "text": "\nPredict using GLM with feature matrix X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TweedieRegressor.score()", "path": "modules/generated/sklearn.linear_model.tweedieregressor#sklearn.linear_model.TweedieRegressor.score", "type": "linear_model", "text": "\nCompute D^2, the percentage of deviance explained.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "linear_model.TweedieRegressor.set_params()", "path": "modules/generated/sklearn.linear_model.tweedieregressor#sklearn.linear_model.TweedieRegressor.set_params", "type": "linear_model", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.Isomap", "path": "modules/generated/sklearn.manifold.isomap#sklearn.manifold.Isomap", "type": "manifold", "text": "\nIsomap Embedding\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.Isomap()", "path": "modules/generated/sklearn.manifold.isomap", "type": "manifold", "text": "\nIsomap Embedding\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.Isomap.fit()", "path": "modules/generated/sklearn.manifold.isomap#sklearn.manifold.Isomap.fit", "type": "manifold", "text": "\nCompute the embedding vectors for data X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.Isomap.fit_transform()", "path": "modules/generated/sklearn.manifold.isomap#sklearn.manifold.Isomap.fit_transform", "type": "manifold", "text": "\nFit the model from data in X and transform X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.Isomap.get_params()", "path": "modules/generated/sklearn.manifold.isomap#sklearn.manifold.Isomap.get_params", "type": "manifold", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.Isomap.reconstruction_error()", "path": "modules/generated/sklearn.manifold.isomap#sklearn.manifold.Isomap.reconstruction_error", "type": "manifold", "text": "\nCompute the reconstruction error for the embedding.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.Isomap.set_params()", "path": "modules/generated/sklearn.manifold.isomap#sklearn.manifold.Isomap.set_params", "type": "manifold", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.Isomap.transform()", "path": "modules/generated/sklearn.manifold.isomap#sklearn.manifold.Isomap.transform", "type": "manifold", "text": "\nTransform X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.LocallyLinearEmbedding", "path": "modules/generated/sklearn.manifold.locallylinearembedding#sklearn.manifold.LocallyLinearEmbedding", "type": "manifold", "text": "\nLocally Linear Embedding\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.LocallyLinearEmbedding()", "path": "modules/generated/sklearn.manifold.locallylinearembedding", "type": "manifold", "text": "\nLocally Linear Embedding\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.LocallyLinearEmbedding.fit()", "path": "modules/generated/sklearn.manifold.locallylinearembedding#sklearn.manifold.LocallyLinearEmbedding.fit", "type": "manifold", "text": "\nCompute the embedding vectors for data X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.LocallyLinearEmbedding.fit_transform()", "path": "modules/generated/sklearn.manifold.locallylinearembedding#sklearn.manifold.LocallyLinearEmbedding.fit_transform", "type": "manifold", "text": "\nCompute the embedding vectors for data X and transform X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.LocallyLinearEmbedding.get_params()", "path": "modules/generated/sklearn.manifold.locallylinearembedding#sklearn.manifold.LocallyLinearEmbedding.get_params", "type": "manifold", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.LocallyLinearEmbedding.set_params()", "path": "modules/generated/sklearn.manifold.locallylinearembedding#sklearn.manifold.LocallyLinearEmbedding.set_params", "type": "manifold", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.LocallyLinearEmbedding.transform()", "path": "modules/generated/sklearn.manifold.locallylinearembedding#sklearn.manifold.LocallyLinearEmbedding.transform", "type": "manifold", "text": "\nTransform new points into embedding space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.locally_linear_embedding()", "path": "modules/generated/sklearn.manifold.locally_linear_embedding#sklearn.manifold.locally_linear_embedding", "type": "manifold", "text": "\nPerform a Locally Linear Embedding analysis on the data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.MDS", "path": "modules/generated/sklearn.manifold.mds#sklearn.manifold.MDS", "type": "manifold", "text": "\nMultidimensional scaling.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.MDS()", "path": "modules/generated/sklearn.manifold.mds", "type": "manifold", "text": "\nMultidimensional scaling.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.MDS.fit()", "path": "modules/generated/sklearn.manifold.mds#sklearn.manifold.MDS.fit", "type": "manifold", "text": "\nComputes the position of the points in the embedding space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.MDS.fit_transform()", "path": "modules/generated/sklearn.manifold.mds#sklearn.manifold.MDS.fit_transform", "type": "manifold", "text": "\nFit the data from X, and returns the embedded coordinates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.MDS.get_params()", "path": "modules/generated/sklearn.manifold.mds#sklearn.manifold.MDS.get_params", "type": "manifold", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.MDS.set_params()", "path": "modules/generated/sklearn.manifold.mds#sklearn.manifold.MDS.set_params", "type": "manifold", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.smacof()", "path": "modules/generated/sklearn.manifold.smacof#sklearn.manifold.smacof", "type": "manifold", "text": "\nComputes multidimensional scaling using the SMACOF algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.SpectralEmbedding", "path": "modules/generated/sklearn.manifold.spectralembedding#sklearn.manifold.SpectralEmbedding", "type": "manifold", "text": "\nSpectral embedding for non-linear dimensionality reduction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.SpectralEmbedding()", "path": "modules/generated/sklearn.manifold.spectralembedding", "type": "manifold", "text": "\nSpectral embedding for non-linear dimensionality reduction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.SpectralEmbedding.fit()", "path": "modules/generated/sklearn.manifold.spectralembedding#sklearn.manifold.SpectralEmbedding.fit", "type": "manifold", "text": "\nFit the model from data in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.SpectralEmbedding.fit_transform()", "path": "modules/generated/sklearn.manifold.spectralembedding#sklearn.manifold.SpectralEmbedding.fit_transform", "type": "manifold", "text": "\nFit the model from data in X and transform X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.SpectralEmbedding.get_params()", "path": "modules/generated/sklearn.manifold.spectralembedding#sklearn.manifold.SpectralEmbedding.get_params", "type": "manifold", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.SpectralEmbedding.set_params()", "path": "modules/generated/sklearn.manifold.spectralembedding#sklearn.manifold.SpectralEmbedding.set_params", "type": "manifold", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.spectral_embedding()", "path": "modules/generated/sklearn.manifold.spectral_embedding#sklearn.manifold.spectral_embedding", "type": "manifold", "text": "\nProject the sample on the first eigenvectors of the graph Laplacian.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.trustworthiness()", "path": "modules/generated/sklearn.manifold.trustworthiness#sklearn.manifold.trustworthiness", "type": "manifold", "text": "\nExpresses to what extent the local structure is retained.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.TSNE", "path": "modules/generated/sklearn.manifold.tsne#sklearn.manifold.TSNE", "type": "manifold", "text": "\nt-distributed Stochastic Neighbor Embedding.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.TSNE()", "path": "modules/generated/sklearn.manifold.tsne", "type": "manifold", "text": "\nt-distributed Stochastic Neighbor Embedding.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.TSNE.fit()", "path": "modules/generated/sklearn.manifold.tsne#sklearn.manifold.TSNE.fit", "type": "manifold", "text": "\nFit X into an embedded space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.TSNE.fit_transform()", "path": "modules/generated/sklearn.manifold.tsne#sklearn.manifold.TSNE.fit_transform", "type": "manifold", "text": "\nFit X into an embedded space and return that transformed output.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.TSNE.get_params()", "path": "modules/generated/sklearn.manifold.tsne#sklearn.manifold.TSNE.get_params", "type": "manifold", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "manifold.TSNE.set_params()", "path": "modules/generated/sklearn.manifold.tsne#sklearn.manifold.TSNE.set_params", "type": "manifold", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.accuracy_score()", "path": "modules/generated/sklearn.metrics.accuracy_score#sklearn.metrics.accuracy_score", "type": "metrics", "text": "\nAccuracy classification score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.adjusted_mutual_info_score()", "path": "modules/generated/sklearn.metrics.adjusted_mutual_info_score#sklearn.metrics.adjusted_mutual_info_score", "type": "metrics", "text": "\nAdjusted Mutual Information between two clusterings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.adjusted_rand_score()", "path": "modules/generated/sklearn.metrics.adjusted_rand_score#sklearn.metrics.adjusted_rand_score", "type": "metrics", "text": "\nRand index adjusted for chance.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.auc()", "path": "modules/generated/sklearn.metrics.auc#sklearn.metrics.auc", "type": "metrics", "text": "\nCompute Area Under the Curve (AUC) using the trapezoidal rule.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.average_precision_score()", "path": "modules/generated/sklearn.metrics.average_precision_score#sklearn.metrics.average_precision_score", "type": "metrics", "text": "\nCompute average precision (AP) from prediction scores.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.balanced_accuracy_score()", "path": "modules/generated/sklearn.metrics.balanced_accuracy_score#sklearn.metrics.balanced_accuracy_score", "type": "metrics", "text": "\nCompute the balanced accuracy.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.brier_score_loss()", "path": "modules/generated/sklearn.metrics.brier_score_loss#sklearn.metrics.brier_score_loss", "type": "metrics", "text": "\nCompute the Brier score loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.calinski_harabasz_score()", "path": "modules/generated/sklearn.metrics.calinski_harabasz_score#sklearn.metrics.calinski_harabasz_score", "type": "metrics", "text": "\nCompute the Calinski and Harabasz score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.check_scoring()", "path": "modules/generated/sklearn.metrics.check_scoring#sklearn.metrics.check_scoring", "type": "metrics", "text": "\nDetermine scorer from user options.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.classification_report()", "path": "modules/generated/sklearn.metrics.classification_report#sklearn.metrics.classification_report", "type": "metrics", "text": "\nBuild a text report showing the main classification metrics.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.cluster.contingency_matrix()", "path": "modules/generated/sklearn.metrics.cluster.contingency_matrix#sklearn.metrics.cluster.contingency_matrix", "type": "metrics.cluster", "text": "\nBuild a contingency matrix describing the relationship between labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.cluster.pair_confusion_matrix()", "path": "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix#sklearn.metrics.cluster.pair_confusion_matrix", "type": "metrics.cluster", "text": "\nPair confusion matrix arising from two clusterings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.cohen_kappa_score()", "path": "modules/generated/sklearn.metrics.cohen_kappa_score#sklearn.metrics.cohen_kappa_score", "type": "metrics", "text": "\nCohen\u2019s kappa: a statistic that measures inter-annotator agreement.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.completeness_score()", "path": "modules/generated/sklearn.metrics.completeness_score#sklearn.metrics.completeness_score", "type": "metrics", "text": "\nCompleteness metric of a cluster labeling given a ground truth.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.ConfusionMatrixDisplay", "path": "modules/generated/sklearn.metrics.confusionmatrixdisplay#sklearn.metrics.ConfusionMatrixDisplay", "type": "metrics", "text": "\nConfusion Matrix visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.ConfusionMatrixDisplay()", "path": "modules/generated/sklearn.metrics.confusionmatrixdisplay", "type": "metrics", "text": "\nConfusion Matrix visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.ConfusionMatrixDisplay.plot()", "path": "modules/generated/sklearn.metrics.confusionmatrixdisplay#sklearn.metrics.ConfusionMatrixDisplay.plot", "type": "metrics", "text": "\nPlot visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.confusion_matrix()", "path": "modules/generated/sklearn.metrics.confusion_matrix#sklearn.metrics.confusion_matrix", "type": "metrics", "text": "\nCompute confusion matrix to evaluate the accuracy of a classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.consensus_score()", "path": "modules/generated/sklearn.metrics.consensus_score#sklearn.metrics.consensus_score", "type": "metrics", "text": "\nThe similarity of two sets of biclusters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.coverage_error()", "path": "modules/generated/sklearn.metrics.coverage_error#sklearn.metrics.coverage_error", "type": "metrics", "text": "\nCoverage error measure.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.davies_bouldin_score()", "path": "modules/generated/sklearn.metrics.davies_bouldin_score#sklearn.metrics.davies_bouldin_score", "type": "metrics", "text": "\nComputes the Davies-Bouldin score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.dcg_score()", "path": "modules/generated/sklearn.metrics.dcg_score#sklearn.metrics.dcg_score", "type": "metrics", "text": "\nCompute Discounted Cumulative Gain.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.DetCurveDisplay", "path": "modules/generated/sklearn.metrics.detcurvedisplay#sklearn.metrics.DetCurveDisplay", "type": "metrics", "text": "\nDET curve visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.DetCurveDisplay()", "path": "modules/generated/sklearn.metrics.detcurvedisplay", "type": "metrics", "text": "\nDET curve visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.DetCurveDisplay.plot()", "path": "modules/generated/sklearn.metrics.detcurvedisplay#sklearn.metrics.DetCurveDisplay.plot", "type": "metrics", "text": "\nPlot visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.det_curve()", "path": "modules/generated/sklearn.metrics.det_curve#sklearn.metrics.det_curve", "type": "metrics", "text": "\nCompute error rates for different probability thresholds.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.explained_variance_score()", "path": "modules/generated/sklearn.metrics.explained_variance_score#sklearn.metrics.explained_variance_score", "type": "metrics", "text": "\nExplained variance regression score function.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.f1_score()", "path": "modules/generated/sklearn.metrics.f1_score#sklearn.metrics.f1_score", "type": "metrics", "text": "\nCompute the F1 score, also known as balanced F-score or F-measure.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.fbeta_score()", "path": "modules/generated/sklearn.metrics.fbeta_score#sklearn.metrics.fbeta_score", "type": "metrics", "text": "\nCompute the F-beta score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.fowlkes_mallows_score()", "path": "modules/generated/sklearn.metrics.fowlkes_mallows_score#sklearn.metrics.fowlkes_mallows_score", "type": "metrics", "text": "\nMeasure the similarity of two clusterings of a set of points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.get_scorer()", "path": "modules/generated/sklearn.metrics.get_scorer#sklearn.metrics.get_scorer", "type": "metrics", "text": "\nGet a scorer from string.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.hamming_loss()", "path": "modules/generated/sklearn.metrics.hamming_loss#sklearn.metrics.hamming_loss", "type": "metrics", "text": "\nCompute the average Hamming loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.hinge_loss()", "path": "modules/generated/sklearn.metrics.hinge_loss#sklearn.metrics.hinge_loss", "type": "metrics", "text": "\nAverage hinge loss (non-regularized).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.homogeneity_completeness_v_measure()", "path": "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure#sklearn.metrics.homogeneity_completeness_v_measure", "type": "metrics", "text": "\nCompute the homogeneity and completeness and V-Measure scores at once.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.homogeneity_score()", "path": "modules/generated/sklearn.metrics.homogeneity_score#sklearn.metrics.homogeneity_score", "type": "metrics", "text": "\nHomogeneity metric of a cluster labeling given a ground truth.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.jaccard_score()", "path": "modules/generated/sklearn.metrics.jaccard_score#sklearn.metrics.jaccard_score", "type": "metrics", "text": "\nJaccard similarity coefficient score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.label_ranking_average_precision_score()", "path": "modules/generated/sklearn.metrics.label_ranking_average_precision_score#sklearn.metrics.label_ranking_average_precision_score", "type": "metrics", "text": "\nCompute ranking-based average precision.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.label_ranking_loss()", "path": "modules/generated/sklearn.metrics.label_ranking_loss#sklearn.metrics.label_ranking_loss", "type": "metrics", "text": "\nCompute Ranking loss measure.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.log_loss()", "path": "modules/generated/sklearn.metrics.log_loss#sklearn.metrics.log_loss", "type": "metrics", "text": "\nLog loss, aka logistic loss or cross-entropy loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.make_scorer()", "path": "modules/generated/sklearn.metrics.make_scorer#sklearn.metrics.make_scorer", "type": "metrics", "text": "\nMake a scorer from a performance metric or loss function.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.matthews_corrcoef()", "path": "modules/generated/sklearn.metrics.matthews_corrcoef#sklearn.metrics.matthews_corrcoef", "type": "metrics", "text": "\nCompute the Matthews correlation coefficient (MCC).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.max_error()", "path": "modules/generated/sklearn.metrics.max_error#sklearn.metrics.max_error", "type": "metrics", "text": "\nmax_error metric calculates the maximum residual error.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.mean_absolute_error()", "path": "modules/generated/sklearn.metrics.mean_absolute_error#sklearn.metrics.mean_absolute_error", "type": "metrics", "text": "\nMean absolute error regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.mean_absolute_percentage_error()", "path": "modules/generated/sklearn.metrics.mean_absolute_percentage_error#sklearn.metrics.mean_absolute_percentage_error", "type": "metrics", "text": "\nMean absolute percentage error regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.mean_gamma_deviance()", "path": "modules/generated/sklearn.metrics.mean_gamma_deviance#sklearn.metrics.mean_gamma_deviance", "type": "metrics", "text": "\nMean Gamma deviance regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.mean_poisson_deviance()", "path": "modules/generated/sklearn.metrics.mean_poisson_deviance#sklearn.metrics.mean_poisson_deviance", "type": "metrics", "text": "\nMean Poisson deviance regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.mean_squared_error()", "path": "modules/generated/sklearn.metrics.mean_squared_error#sklearn.metrics.mean_squared_error", "type": "metrics", "text": "\nMean squared error regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.mean_squared_log_error()", "path": "modules/generated/sklearn.metrics.mean_squared_log_error#sklearn.metrics.mean_squared_log_error", "type": "metrics", "text": "\nMean squared logarithmic error regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.mean_tweedie_deviance()", "path": "modules/generated/sklearn.metrics.mean_tweedie_deviance#sklearn.metrics.mean_tweedie_deviance", "type": "metrics", "text": "\nMean Tweedie deviance regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.median_absolute_error()", "path": "modules/generated/sklearn.metrics.median_absolute_error#sklearn.metrics.median_absolute_error", "type": "metrics", "text": "\nMedian absolute error regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.multilabel_confusion_matrix()", "path": "modules/generated/sklearn.metrics.multilabel_confusion_matrix#sklearn.metrics.multilabel_confusion_matrix", "type": "metrics", "text": "\nCompute a confusion matrix for each class or sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.mutual_info_score()", "path": "modules/generated/sklearn.metrics.mutual_info_score#sklearn.metrics.mutual_info_score", "type": "metrics", "text": "\nMutual Information between two clusterings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.ndcg_score()", "path": "modules/generated/sklearn.metrics.ndcg_score#sklearn.metrics.ndcg_score", "type": "metrics", "text": "\nCompute Normalized Discounted Cumulative Gain.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.normalized_mutual_info_score()", "path": "modules/generated/sklearn.metrics.normalized_mutual_info_score#sklearn.metrics.normalized_mutual_info_score", "type": "metrics", "text": "\nNormalized Mutual Information between two clusterings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.additive_chi2_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel#sklearn.metrics.pairwise.additive_chi2_kernel", "type": "metrics.pairwise", "text": "\nComputes the additive chi-squared kernel between observations in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.chi2_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.chi2_kernel#sklearn.metrics.pairwise.chi2_kernel", "type": "metrics.pairwise", "text": "\nComputes the exponential chi-squared kernel X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.cosine_distances()", "path": "modules/generated/sklearn.metrics.pairwise.cosine_distances#sklearn.metrics.pairwise.cosine_distances", "type": "metrics.pairwise", "text": "\nCompute cosine distance between samples in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.cosine_similarity()", "path": "modules/generated/sklearn.metrics.pairwise.cosine_similarity#sklearn.metrics.pairwise.cosine_similarity", "type": "metrics.pairwise", "text": "\nCompute cosine similarity between samples in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.distance_metrics()", "path": "modules/generated/sklearn.metrics.pairwise.distance_metrics#sklearn.metrics.pairwise.distance_metrics", "type": "metrics.pairwise", "text": "\nValid metrics for pairwise_distances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.euclidean_distances()", "path": "modules/generated/sklearn.metrics.pairwise.euclidean_distances#sklearn.metrics.pairwise.euclidean_distances", "type": "metrics.pairwise", "text": "\nConsidering the rows of X (and Y=X) as vectors, compute the distance matrix\nbetween each pair of vectors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.haversine_distances()", "path": "modules/generated/sklearn.metrics.pairwise.haversine_distances#sklearn.metrics.pairwise.haversine_distances", "type": "metrics.pairwise", "text": "\nCompute the Haversine distance between samples in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.kernel_metrics()", "path": "modules/generated/sklearn.metrics.pairwise.kernel_metrics#sklearn.metrics.pairwise.kernel_metrics", "type": "metrics.pairwise", "text": "\nValid metrics for pairwise_kernels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.laplacian_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.laplacian_kernel#sklearn.metrics.pairwise.laplacian_kernel", "type": "metrics.pairwise", "text": "\nCompute the laplacian kernel between X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.linear_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.linear_kernel#sklearn.metrics.pairwise.linear_kernel", "type": "metrics.pairwise", "text": "\nCompute the linear kernel between X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.manhattan_distances()", "path": "modules/generated/sklearn.metrics.pairwise.manhattan_distances#sklearn.metrics.pairwise.manhattan_distances", "type": "metrics.pairwise", "text": "\nCompute the L1 distances between the vectors in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.nan_euclidean_distances()", "path": "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances#sklearn.metrics.pairwise.nan_euclidean_distances", "type": "metrics.pairwise", "text": "\nCalculate the euclidean distances in the presence of missing values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.paired_cosine_distances()", "path": "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances#sklearn.metrics.pairwise.paired_cosine_distances", "type": "metrics.pairwise", "text": "\nComputes the paired cosine distances between X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.paired_distances()", "path": "modules/generated/sklearn.metrics.pairwise.paired_distances#sklearn.metrics.pairwise.paired_distances", "type": "metrics.pairwise", "text": "\nComputes the paired distances between X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.paired_euclidean_distances()", "path": "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances#sklearn.metrics.pairwise.paired_euclidean_distances", "type": "metrics.pairwise", "text": "\nComputes the paired euclidean distances between X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.paired_manhattan_distances()", "path": "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances#sklearn.metrics.pairwise.paired_manhattan_distances", "type": "metrics.pairwise", "text": "\nCompute the L1 distances between the vectors in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.pairwise_kernels()", "path": "modules/generated/sklearn.metrics.pairwise.pairwise_kernels#sklearn.metrics.pairwise.pairwise_kernels", "type": "metrics.pairwise", "text": "\nCompute the kernel between arrays X and optional array Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.polynomial_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.polynomial_kernel#sklearn.metrics.pairwise.polynomial_kernel", "type": "metrics.pairwise", "text": "\nCompute the polynomial kernel between X and Y:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.rbf_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.rbf_kernel#sklearn.metrics.pairwise.rbf_kernel", "type": "metrics.pairwise", "text": "\nCompute the rbf (gaussian) kernel between X and Y:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise.sigmoid_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel#sklearn.metrics.pairwise.sigmoid_kernel", "type": "metrics.pairwise", "text": "\nCompute the sigmoid kernel between X and Y:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise_distances()", "path": "modules/generated/sklearn.metrics.pairwise_distances#sklearn.metrics.pairwise_distances", "type": "metrics", "text": "\nCompute the distance matrix from a vector array X and optional Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise_distances_argmin()", "path": "modules/generated/sklearn.metrics.pairwise_distances_argmin#sklearn.metrics.pairwise_distances_argmin", "type": "metrics", "text": "\nCompute minimum distances between one point and a set of points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise_distances_argmin_min()", "path": "modules/generated/sklearn.metrics.pairwise_distances_argmin_min#sklearn.metrics.pairwise_distances_argmin_min", "type": "metrics", "text": "\nCompute minimum distances between one point and a set of points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.pairwise_distances_chunked()", "path": "modules/generated/sklearn.metrics.pairwise_distances_chunked#sklearn.metrics.pairwise_distances_chunked", "type": "metrics", "text": "\nGenerate a distance matrix chunk by chunk with optional reduction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.plot_confusion_matrix()", "path": "modules/generated/sklearn.metrics.plot_confusion_matrix#sklearn.metrics.plot_confusion_matrix", "type": "metrics", "text": "\nPlot Confusion Matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.plot_det_curve()", "path": "modules/generated/sklearn.metrics.plot_det_curve#sklearn.metrics.plot_det_curve", "type": "metrics", "text": "\nPlot detection error tradeoff (DET) curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.plot_precision_recall_curve()", "path": "modules/generated/sklearn.metrics.plot_precision_recall_curve#sklearn.metrics.plot_precision_recall_curve", "type": "metrics", "text": "\nPlot Precision Recall Curve for binary classifiers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.plot_roc_curve()", "path": "modules/generated/sklearn.metrics.plot_roc_curve#sklearn.metrics.plot_roc_curve", "type": "metrics", "text": "\nPlot Receiver operating characteristic (ROC) curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.PrecisionRecallDisplay", "path": "modules/generated/sklearn.metrics.precisionrecalldisplay#sklearn.metrics.PrecisionRecallDisplay", "type": "metrics", "text": "\nPrecision Recall visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.PrecisionRecallDisplay()", "path": "modules/generated/sklearn.metrics.precisionrecalldisplay", "type": "metrics", "text": "\nPrecision Recall visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.PrecisionRecallDisplay.plot()", "path": "modules/generated/sklearn.metrics.precisionrecalldisplay#sklearn.metrics.PrecisionRecallDisplay.plot", "type": "metrics", "text": "\nPlot visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.precision_recall_curve()", "path": "modules/generated/sklearn.metrics.precision_recall_curve#sklearn.metrics.precision_recall_curve", "type": "metrics", "text": "\nCompute precision-recall pairs for different probability thresholds.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.precision_recall_fscore_support()", "path": "modules/generated/sklearn.metrics.precision_recall_fscore_support#sklearn.metrics.precision_recall_fscore_support", "type": "metrics", "text": "\nCompute precision, recall, F-measure and support for each class.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.precision_score()", "path": "modules/generated/sklearn.metrics.precision_score#sklearn.metrics.precision_score", "type": "metrics", "text": "\nCompute the precision.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.r2_score()", "path": "modules/generated/sklearn.metrics.r2_score#sklearn.metrics.r2_score", "type": "metrics", "text": "\nR^2 (coefficient of determination) regression score function.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.rand_score()", "path": "modules/generated/sklearn.metrics.rand_score#sklearn.metrics.rand_score", "type": "metrics", "text": "\nRand index.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.recall_score()", "path": "modules/generated/sklearn.metrics.recall_score#sklearn.metrics.recall_score", "type": "metrics", "text": "\nCompute the recall.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.RocCurveDisplay", "path": "modules/generated/sklearn.metrics.roccurvedisplay#sklearn.metrics.RocCurveDisplay", "type": "metrics", "text": "\nROC Curve visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.RocCurveDisplay()", "path": "modules/generated/sklearn.metrics.roccurvedisplay", "type": "metrics", "text": "\nROC Curve visualization.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.RocCurveDisplay.plot()", "path": "modules/generated/sklearn.metrics.roccurvedisplay#sklearn.metrics.RocCurveDisplay.plot", "type": "metrics", "text": "\nPlot visualization\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.roc_auc_score()", "path": "modules/generated/sklearn.metrics.roc_auc_score#sklearn.metrics.roc_auc_score", "type": "metrics", "text": "\nCompute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from\nprediction scores.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.roc_curve()", "path": "modules/generated/sklearn.metrics.roc_curve#sklearn.metrics.roc_curve", "type": "metrics", "text": "\nCompute Receiver operating characteristic (ROC).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.silhouette_samples()", "path": "modules/generated/sklearn.metrics.silhouette_samples#sklearn.metrics.silhouette_samples", "type": "metrics", "text": "\nCompute the Silhouette Coefficient for each sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.silhouette_score()", "path": "modules/generated/sklearn.metrics.silhouette_score#sklearn.metrics.silhouette_score", "type": "metrics", "text": "\nCompute the mean Silhouette Coefficient of all samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.top_k_accuracy_score()", "path": "modules/generated/sklearn.metrics.top_k_accuracy_score#sklearn.metrics.top_k_accuracy_score", "type": "metrics", "text": "\nTop-k Accuracy classification score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.v_measure_score()", "path": "modules/generated/sklearn.metrics.v_measure_score#sklearn.metrics.v_measure_score", "type": "metrics", "text": "\nV-measure cluster labeling given a ground truth.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "metrics.zero_one_loss()", "path": "modules/generated/sklearn.metrics.zero_one_loss#sklearn.metrics.zero_one_loss", "type": "metrics", "text": "\nZero-one classification loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture#sklearn.mixture.BayesianGaussianMixture", "type": "mixture", "text": "\nVariational Bayesian estimation of a Gaussian mixture.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture()", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture", "type": "mixture", "text": "\nVariational Bayesian estimation of a Gaussian mixture.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture.fit()", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture#sklearn.mixture.BayesianGaussianMixture.fit", "type": "mixture", "text": "\nEstimate model parameters with the EM algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture.fit_predict()", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture#sklearn.mixture.BayesianGaussianMixture.fit_predict", "type": "mixture", "text": "\nEstimate model parameters using X and predict the labels for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture.get_params()", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture#sklearn.mixture.BayesianGaussianMixture.get_params", "type": "mixture", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture.predict()", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture#sklearn.mixture.BayesianGaussianMixture.predict", "type": "mixture", "text": "\nPredict the labels for the data samples in X using trained model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture.predict_proba()", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture#sklearn.mixture.BayesianGaussianMixture.predict_proba", "type": "mixture", "text": "\nPredict posterior probability of each component given the data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture.sample()", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture#sklearn.mixture.BayesianGaussianMixture.sample", "type": "mixture", "text": "\nGenerate random samples from the fitted Gaussian distribution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture.score()", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture#sklearn.mixture.BayesianGaussianMixture.score", "type": "mixture", "text": "\nCompute the per-sample average log-likelihood of the given data X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture.score_samples()", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture#sklearn.mixture.BayesianGaussianMixture.score_samples", "type": "mixture", "text": "\nCompute the weighted log probabilities for each sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.BayesianGaussianMixture.set_params()", "path": "modules/generated/sklearn.mixture.bayesiangaussianmixture#sklearn.mixture.BayesianGaussianMixture.set_params", "type": "mixture", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture", "type": "mixture", "text": "\nGaussian Mixture.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture()", "path": "modules/generated/sklearn.mixture.gaussianmixture", "type": "mixture", "text": "\nGaussian Mixture.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.aic()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.aic", "type": "mixture", "text": "\nAkaike information criterion for the current model on the input X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.bic()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.bic", "type": "mixture", "text": "\nBayesian information criterion for the current model on the input X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.fit()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.fit", "type": "mixture", "text": "\nEstimate model parameters with the EM algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.fit_predict()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.fit_predict", "type": "mixture", "text": "\nEstimate model parameters using X and predict the labels for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.get_params()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.get_params", "type": "mixture", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.predict()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.predict", "type": "mixture", "text": "\nPredict the labels for the data samples in X using trained model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.predict_proba()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.predict_proba", "type": "mixture", "text": "\nPredict posterior probability of each component given the data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.sample()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.sample", "type": "mixture", "text": "\nGenerate random samples from the fitted Gaussian distribution.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.score()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.score", "type": "mixture", "text": "\nCompute the per-sample average log-likelihood of the given data X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.score_samples()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.score_samples", "type": "mixture", "text": "\nCompute the weighted log probabilities for each sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "mixture.GaussianMixture.set_params()", "path": "modules/generated/sklearn.mixture.gaussianmixture#sklearn.mixture.GaussianMixture.set_params", "type": "mixture", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.check_cv()", "path": "modules/generated/sklearn.model_selection.check_cv#sklearn.model_selection.check_cv", "type": "model_selection", "text": "\nInput checker utility for building a cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.cross_validate()", "path": "modules/generated/sklearn.model_selection.cross_validate#sklearn.model_selection.cross_validate", "type": "model_selection", "text": "\nEvaluate metric(s) by cross-validation and also record fit/score times.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.cross_val_predict()", "path": "modules/generated/sklearn.model_selection.cross_val_predict#sklearn.model_selection.cross_val_predict", "type": "model_selection", "text": "\nGenerate cross-validated estimates for each input data point\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.cross_val_score()", "path": "modules/generated/sklearn.model_selection.cross_val_score#sklearn.model_selection.cross_val_score", "type": "model_selection", "text": "\nEvaluate a score by cross-validation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV", "type": "model_selection", "text": "\nExhaustive search over specified parameter values for an estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV()", "path": "modules/generated/sklearn.model_selection.gridsearchcv", "type": "model_selection", "text": "\nExhaustive search over specified parameter values for an estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.decision_function()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.decision_function", "type": "model_selection", "text": "\nCall decision_function on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.fit()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.fit", "type": "model_selection", "text": "\nRun fit with all sets of parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.get_params()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.get_params", "type": "model_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.inverse_transform()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.inverse_transform", "type": "model_selection", "text": "\nCall inverse_transform on the estimator with the best found params.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.predict()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.predict", "type": "model_selection", "text": "\nCall predict on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.predict_log_proba()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.predict_log_proba", "type": "model_selection", "text": "\nCall predict_log_proba on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.predict_proba()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.predict_proba", "type": "model_selection", "text": "\nCall predict_proba on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.score()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.score", "type": "model_selection", "text": "\nReturns the score on the given data, if the estimator has been refit.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.score_samples()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.score_samples", "type": "model_selection", "text": "\nCall score_samples on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.set_params()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.set_params", "type": "model_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GridSearchCV.transform()", "path": "modules/generated/sklearn.model_selection.gridsearchcv#sklearn.model_selection.GridSearchCV.transform", "type": "model_selection", "text": "\nCall transform on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GroupKFold", "path": "modules/generated/sklearn.model_selection.groupkfold#sklearn.model_selection.GroupKFold", "type": "model_selection", "text": "\nK-fold iterator variant with non-overlapping groups.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GroupKFold()", "path": "modules/generated/sklearn.model_selection.groupkfold", "type": "model_selection", "text": "\nK-fold iterator variant with non-overlapping groups.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GroupKFold.get_n_splits()", "path": "modules/generated/sklearn.model_selection.groupkfold#sklearn.model_selection.GroupKFold.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GroupKFold.split()", "path": "modules/generated/sklearn.model_selection.groupkfold#sklearn.model_selection.GroupKFold.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GroupShuffleSplit", "path": "modules/generated/sklearn.model_selection.groupshufflesplit#sklearn.model_selection.GroupShuffleSplit", "type": "model_selection", "text": "\nShuffle-Group(s)-Out cross-validation iterator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GroupShuffleSplit()", "path": "modules/generated/sklearn.model_selection.groupshufflesplit", "type": "model_selection", "text": "\nShuffle-Group(s)-Out cross-validation iterator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GroupShuffleSplit.get_n_splits()", "path": "modules/generated/sklearn.model_selection.groupshufflesplit#sklearn.model_selection.GroupShuffleSplit.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.GroupShuffleSplit.split()", "path": "modules/generated/sklearn.model_selection.groupshufflesplit#sklearn.model_selection.GroupShuffleSplit.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV", "type": "model_selection", "text": "\nSearch over specified parameter values with successive halving.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv", "type": "model_selection", "text": "\nSearch over specified parameter values with successive halving.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.decision_function()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.decision_function", "type": "model_selection", "text": "\nCall decision_function on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.fit()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.fit", "type": "model_selection", "text": "\nRun fit with all sets of parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.get_params()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.get_params", "type": "model_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.inverse_transform()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.inverse_transform", "type": "model_selection", "text": "\nCall inverse_transform on the estimator with the best found params.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.predict()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.predict", "type": "model_selection", "text": "\nCall predict on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.predict_log_proba()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", "type": "model_selection", "text": "\nCall predict_log_proba on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.predict_proba()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.predict_proba", "type": "model_selection", "text": "\nCall predict_proba on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.score()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.score", "type": "model_selection", "text": "\nReturns the score on the given data, if the estimator has been refit.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.score_samples()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.score_samples", "type": "model_selection", "text": "\nCall score_samples on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.set_params()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.set_params", "type": "model_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingGridSearchCV.transform()", "path": "modules/generated/sklearn.model_selection.halvinggridsearchcv#sklearn.model_selection.HalvingGridSearchCV.transform", "type": "model_selection", "text": "\nCall transform on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV", "type": "model_selection", "text": "\nRandomized search on hyper parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv", "type": "model_selection", "text": "\nRandomized search on hyper parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.decision_function()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.decision_function", "type": "model_selection", "text": "\nCall decision_function on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.fit()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.fit", "type": "model_selection", "text": "\nRun fit with all sets of parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.get_params()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.get_params", "type": "model_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.inverse_transform()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", "type": "model_selection", "text": "\nCall inverse_transform on the estimator with the best found params.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.predict()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.predict", "type": "model_selection", "text": "\nCall predict on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.predict_log_proba()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", "type": "model_selection", "text": "\nCall predict_log_proba on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.predict_proba()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.predict_proba", "type": "model_selection", "text": "\nCall predict_proba on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.score()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.score", "type": "model_selection", "text": "\nReturns the score on the given data, if the estimator has been refit.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.score_samples()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.score_samples", "type": "model_selection", "text": "\nCall score_samples on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.set_params()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.set_params", "type": "model_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.HalvingRandomSearchCV.transform()", "path": "modules/generated/sklearn.model_selection.halvingrandomsearchcv#sklearn.model_selection.HalvingRandomSearchCV.transform", "type": "model_selection", "text": "\nCall transform on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.KFold", "path": "modules/generated/sklearn.model_selection.kfold#sklearn.model_selection.KFold", "type": "model_selection", "text": "\nK-Folds cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.KFold()", "path": "modules/generated/sklearn.model_selection.kfold", "type": "model_selection", "text": "\nK-Folds cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.KFold.get_n_splits()", "path": "modules/generated/sklearn.model_selection.kfold#sklearn.model_selection.KFold.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.KFold.split()", "path": "modules/generated/sklearn.model_selection.kfold#sklearn.model_selection.KFold.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.learning_curve()", "path": "modules/generated/sklearn.model_selection.learning_curve#sklearn.model_selection.learning_curve", "type": "model_selection", "text": "\nLearning curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeaveOneGroupOut", "path": "modules/generated/sklearn.model_selection.leaveonegroupout", "type": "model_selection", "text": "\nLeave One Group Out cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeaveOneGroupOut", "path": "modules/generated/sklearn.model_selection.leaveonegroupout#sklearn.model_selection.LeaveOneGroupOut", "type": "model_selection", "text": "\nLeave One Group Out cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeaveOneGroupOut.get_n_splits()", "path": "modules/generated/sklearn.model_selection.leaveonegroupout#sklearn.model_selection.LeaveOneGroupOut.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeaveOneGroupOut.split()", "path": "modules/generated/sklearn.model_selection.leaveonegroupout#sklearn.model_selection.LeaveOneGroupOut.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeaveOneOut", "path": "modules/generated/sklearn.model_selection.leaveoneout#sklearn.model_selection.LeaveOneOut", "type": "model_selection", "text": "\nLeave-One-Out cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeaveOneOut", "path": "modules/generated/sklearn.model_selection.leaveoneout", "type": "model_selection", "text": "\nLeave-One-Out cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeaveOneOut.get_n_splits()", "path": "modules/generated/sklearn.model_selection.leaveoneout#sklearn.model_selection.LeaveOneOut.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeaveOneOut.split()", "path": "modules/generated/sklearn.model_selection.leaveoneout#sklearn.model_selection.LeaveOneOut.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeavePGroupsOut", "path": "modules/generated/sklearn.model_selection.leavepgroupsout#sklearn.model_selection.LeavePGroupsOut", "type": "model_selection", "text": "\nLeave P Group(s) Out cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeavePGroupsOut()", "path": "modules/generated/sklearn.model_selection.leavepgroupsout", "type": "model_selection", "text": "\nLeave P Group(s) Out cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeavePGroupsOut.get_n_splits()", "path": "modules/generated/sklearn.model_selection.leavepgroupsout#sklearn.model_selection.LeavePGroupsOut.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeavePGroupsOut.split()", "path": "modules/generated/sklearn.model_selection.leavepgroupsout#sklearn.model_selection.LeavePGroupsOut.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeavePOut", "path": "modules/generated/sklearn.model_selection.leavepout#sklearn.model_selection.LeavePOut", "type": "model_selection", "text": "\nLeave-P-Out cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeavePOut()", "path": "modules/generated/sklearn.model_selection.leavepout", "type": "model_selection", "text": "\nLeave-P-Out cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeavePOut.get_n_splits()", "path": "modules/generated/sklearn.model_selection.leavepout#sklearn.model_selection.LeavePOut.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.LeavePOut.split()", "path": "modules/generated/sklearn.model_selection.leavepout#sklearn.model_selection.LeavePOut.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.ParameterGrid", "path": "modules/generated/sklearn.model_selection.parametergrid#sklearn.model_selection.ParameterGrid", "type": "model_selection", "text": "\nGrid of parameters with a discrete number of values for each.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.ParameterGrid()", "path": "modules/generated/sklearn.model_selection.parametergrid", "type": "model_selection", "text": "\nGrid of parameters with a discrete number of values for each.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.ParameterSampler", "path": "modules/generated/sklearn.model_selection.parametersampler#sklearn.model_selection.ParameterSampler", "type": "model_selection", "text": "\nGenerator on parameters sampled from given distributions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.ParameterSampler()", "path": "modules/generated/sklearn.model_selection.parametersampler", "type": "model_selection", "text": "\nGenerator on parameters sampled from given distributions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.permutation_test_score()", "path": "modules/generated/sklearn.model_selection.permutation_test_score#sklearn.model_selection.permutation_test_score", "type": "model_selection", "text": "\nEvaluate the significance of a cross-validated score with permutations\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.PredefinedSplit", "path": "modules/generated/sklearn.model_selection.predefinedsplit#sklearn.model_selection.PredefinedSplit", "type": "model_selection", "text": "\nPredefined split cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.PredefinedSplit()", "path": "modules/generated/sklearn.model_selection.predefinedsplit", "type": "model_selection", "text": "\nPredefined split cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.PredefinedSplit.get_n_splits()", "path": "modules/generated/sklearn.model_selection.predefinedsplit#sklearn.model_selection.PredefinedSplit.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.PredefinedSplit.split()", "path": "modules/generated/sklearn.model_selection.predefinedsplit#sklearn.model_selection.PredefinedSplit.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV", "type": "model_selection", "text": "\nRandomized search on hyper parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv", "type": "model_selection", "text": "\nRandomized search on hyper parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.decision_function()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.decision_function", "type": "model_selection", "text": "\nCall decision_function on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.fit()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.fit", "type": "model_selection", "text": "\nRun fit with all sets of parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.get_params()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.get_params", "type": "model_selection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.inverse_transform()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.inverse_transform", "type": "model_selection", "text": "\nCall inverse_transform on the estimator with the best found params.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.predict()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.predict", "type": "model_selection", "text": "\nCall predict on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.predict_log_proba()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.predict_log_proba", "type": "model_selection", "text": "\nCall predict_log_proba on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.predict_proba()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.predict_proba", "type": "model_selection", "text": "\nCall predict_proba on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.score()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.score", "type": "model_selection", "text": "\nReturns the score on the given data, if the estimator has been refit.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.score_samples()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.score_samples", "type": "model_selection", "text": "\nCall score_samples on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.set_params()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.set_params", "type": "model_selection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RandomizedSearchCV.transform()", "path": "modules/generated/sklearn.model_selection.randomizedsearchcv#sklearn.model_selection.RandomizedSearchCV.transform", "type": "model_selection", "text": "\nCall transform on the estimator with the best found parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RepeatedKFold", "path": "modules/generated/sklearn.model_selection.repeatedkfold#sklearn.model_selection.RepeatedKFold", "type": "model_selection", "text": "\nRepeated K-Fold cross validator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RepeatedKFold()", "path": "modules/generated/sklearn.model_selection.repeatedkfold", "type": "model_selection", "text": "\nRepeated K-Fold cross validator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RepeatedKFold.get_n_splits()", "path": "modules/generated/sklearn.model_selection.repeatedkfold#sklearn.model_selection.RepeatedKFold.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RepeatedKFold.split()", "path": "modules/generated/sklearn.model_selection.repeatedkfold#sklearn.model_selection.RepeatedKFold.split", "type": "model_selection", "text": "\nGenerates indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RepeatedStratifiedKFold", "path": "modules/generated/sklearn.model_selection.repeatedstratifiedkfold#sklearn.model_selection.RepeatedStratifiedKFold", "type": "model_selection", "text": "\nRepeated Stratified K-Fold cross validator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RepeatedStratifiedKFold()", "path": "modules/generated/sklearn.model_selection.repeatedstratifiedkfold", "type": "model_selection", "text": "\nRepeated Stratified K-Fold cross validator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RepeatedStratifiedKFold.get_n_splits()", "path": "modules/generated/sklearn.model_selection.repeatedstratifiedkfold#sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.RepeatedStratifiedKFold.split()", "path": "modules/generated/sklearn.model_selection.repeatedstratifiedkfold#sklearn.model_selection.RepeatedStratifiedKFold.split", "type": "model_selection", "text": "\nGenerates indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.ShuffleSplit", "path": "modules/generated/sklearn.model_selection.shufflesplit#sklearn.model_selection.ShuffleSplit", "type": "model_selection", "text": "\nRandom permutation cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.ShuffleSplit()", "path": "modules/generated/sklearn.model_selection.shufflesplit", "type": "model_selection", "text": "\nRandom permutation cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.ShuffleSplit.get_n_splits()", "path": "modules/generated/sklearn.model_selection.shufflesplit#sklearn.model_selection.ShuffleSplit.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.ShuffleSplit.split()", "path": "modules/generated/sklearn.model_selection.shufflesplit#sklearn.model_selection.ShuffleSplit.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.StratifiedKFold", "path": "modules/generated/sklearn.model_selection.stratifiedkfold#sklearn.model_selection.StratifiedKFold", "type": "model_selection", "text": "\nStratified K-Folds cross-validator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.StratifiedKFold()", "path": "modules/generated/sklearn.model_selection.stratifiedkfold", "type": "model_selection", "text": "\nStratified K-Folds cross-validator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.StratifiedKFold.get_n_splits()", "path": "modules/generated/sklearn.model_selection.stratifiedkfold#sklearn.model_selection.StratifiedKFold.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.StratifiedKFold.split()", "path": "modules/generated/sklearn.model_selection.stratifiedkfold#sklearn.model_selection.StratifiedKFold.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.StratifiedShuffleSplit", "path": "modules/generated/sklearn.model_selection.stratifiedshufflesplit#sklearn.model_selection.StratifiedShuffleSplit", "type": "model_selection", "text": "\nStratified ShuffleSplit cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.StratifiedShuffleSplit()", "path": "modules/generated/sklearn.model_selection.stratifiedshufflesplit", "type": "model_selection", "text": "\nStratified ShuffleSplit cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.StratifiedShuffleSplit.get_n_splits()", "path": "modules/generated/sklearn.model_selection.stratifiedshufflesplit#sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.StratifiedShuffleSplit.split()", "path": "modules/generated/sklearn.model_selection.stratifiedshufflesplit#sklearn.model_selection.StratifiedShuffleSplit.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.TimeSeriesSplit", "path": "modules/generated/sklearn.model_selection.timeseriessplit#sklearn.model_selection.TimeSeriesSplit", "type": "model_selection", "text": "\nTime Series cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.TimeSeriesSplit()", "path": "modules/generated/sklearn.model_selection.timeseriessplit", "type": "model_selection", "text": "\nTime Series cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.TimeSeriesSplit.get_n_splits()", "path": "modules/generated/sklearn.model_selection.timeseriessplit#sklearn.model_selection.TimeSeriesSplit.get_n_splits", "type": "model_selection", "text": "\nReturns the number of splitting iterations in the cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.TimeSeriesSplit.split()", "path": "modules/generated/sklearn.model_selection.timeseriessplit#sklearn.model_selection.TimeSeriesSplit.split", "type": "model_selection", "text": "\nGenerate indices to split data into training and test set.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.train_test_split()", "path": "modules/generated/sklearn.model_selection.train_test_split#sklearn.model_selection.train_test_split", "type": "model_selection", "text": "\nSplit arrays or matrices into random train and test subsets\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "model_selection.validation_curve()", "path": "modules/generated/sklearn.model_selection.validation_curve#sklearn.model_selection.validation_curve", "type": "model_selection", "text": "\nValidation curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsOneClassifier", "path": "modules/generated/sklearn.multiclass.onevsoneclassifier#sklearn.multiclass.OneVsOneClassifier", "type": "multiclass", "text": "\nOne-vs-one multiclass strategy\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsOneClassifier()", "path": "modules/generated/sklearn.multiclass.onevsoneclassifier", "type": "multiclass", "text": "\nOne-vs-one multiclass strategy\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsOneClassifier.decision_function()", "path": "modules/generated/sklearn.multiclass.onevsoneclassifier#sklearn.multiclass.OneVsOneClassifier.decision_function", "type": "multiclass", "text": "\nDecision function for the OneVsOneClassifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsOneClassifier.fit()", "path": "modules/generated/sklearn.multiclass.onevsoneclassifier#sklearn.multiclass.OneVsOneClassifier.fit", "type": "multiclass", "text": "\nFit underlying estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsOneClassifier.get_params()", "path": "modules/generated/sklearn.multiclass.onevsoneclassifier#sklearn.multiclass.OneVsOneClassifier.get_params", "type": "multiclass", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsOneClassifier.partial_fit()", "path": "modules/generated/sklearn.multiclass.onevsoneclassifier#sklearn.multiclass.OneVsOneClassifier.partial_fit", "type": "multiclass", "text": "\nPartially fit underlying estimators\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsOneClassifier.predict()", "path": "modules/generated/sklearn.multiclass.onevsoneclassifier#sklearn.multiclass.OneVsOneClassifier.predict", "type": "multiclass", "text": "\nEstimate the best class label for each sample in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsOneClassifier.score()", "path": "modules/generated/sklearn.multiclass.onevsoneclassifier#sklearn.multiclass.OneVsOneClassifier.score", "type": "multiclass", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsOneClassifier.set_params()", "path": "modules/generated/sklearn.multiclass.onevsoneclassifier#sklearn.multiclass.OneVsOneClassifier.set_params", "type": "multiclass", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier#sklearn.multiclass.OneVsRestClassifier", "type": "multiclass", "text": "\nOne-vs-the-rest (OvR) multiclass strategy.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier()", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier", "type": "multiclass", "text": "\nOne-vs-the-rest (OvR) multiclass strategy.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier.decision_function()", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier#sklearn.multiclass.OneVsRestClassifier.decision_function", "type": "multiclass", "text": "\nReturns the distance of each sample from the decision boundary for each class.\nThis can only be used with estimators which implement the decision_function\nmethod.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier.fit()", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier#sklearn.multiclass.OneVsRestClassifier.fit", "type": "multiclass", "text": "\nFit underlying estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier.get_params()", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier#sklearn.multiclass.OneVsRestClassifier.get_params", "type": "multiclass", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier.multilabel_()", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier#sklearn.multiclass.OneVsRestClassifier.multilabel_", "type": "multiclass", "text": "\nWhether this is a multilabel classifier\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier.partial_fit()", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier#sklearn.multiclass.OneVsRestClassifier.partial_fit", "type": "multiclass", "text": "\nPartially fit underlying estimators\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier.predict()", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier#sklearn.multiclass.OneVsRestClassifier.predict", "type": "multiclass", "text": "\nPredict multi-class targets using underlying estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier.predict_proba()", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier#sklearn.multiclass.OneVsRestClassifier.predict_proba", "type": "multiclass", "text": "\nProbability estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier.score()", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier#sklearn.multiclass.OneVsRestClassifier.score", "type": "multiclass", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OneVsRestClassifier.set_params()", "path": "modules/generated/sklearn.multiclass.onevsrestclassifier#sklearn.multiclass.OneVsRestClassifier.set_params", "type": "multiclass", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OutputCodeClassifier", "path": "modules/generated/sklearn.multiclass.outputcodeclassifier#sklearn.multiclass.OutputCodeClassifier", "type": "multiclass", "text": "\n(Error-Correcting) Output-Code multiclass strategy\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OutputCodeClassifier()", "path": "modules/generated/sklearn.multiclass.outputcodeclassifier", "type": "multiclass", "text": "\n(Error-Correcting) Output-Code multiclass strategy\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OutputCodeClassifier.fit()", "path": "modules/generated/sklearn.multiclass.outputcodeclassifier#sklearn.multiclass.OutputCodeClassifier.fit", "type": "multiclass", "text": "\nFit underlying estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OutputCodeClassifier.get_params()", "path": "modules/generated/sklearn.multiclass.outputcodeclassifier#sklearn.multiclass.OutputCodeClassifier.get_params", "type": "multiclass", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OutputCodeClassifier.predict()", "path": "modules/generated/sklearn.multiclass.outputcodeclassifier#sklearn.multiclass.OutputCodeClassifier.predict", "type": "multiclass", "text": "\nPredict multi-class targets using underlying estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OutputCodeClassifier.score()", "path": "modules/generated/sklearn.multiclass.outputcodeclassifier#sklearn.multiclass.OutputCodeClassifier.score", "type": "multiclass", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multiclass.OutputCodeClassifier.set_params()", "path": "modules/generated/sklearn.multiclass.outputcodeclassifier#sklearn.multiclass.OutputCodeClassifier.set_params", "type": "multiclass", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.ClassifierChain", "path": "modules/generated/sklearn.multioutput.classifierchain#sklearn.multioutput.ClassifierChain", "type": "multioutput", "text": "\nA multi-label model that arranges binary classifiers into a chain.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.ClassifierChain()", "path": "modules/generated/sklearn.multioutput.classifierchain", "type": "multioutput", "text": "\nA multi-label model that arranges binary classifiers into a chain.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.ClassifierChain.decision_function()", "path": "modules/generated/sklearn.multioutput.classifierchain#sklearn.multioutput.ClassifierChain.decision_function", "type": "multioutput", "text": "\nEvaluate the decision_function of the models in the chain.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.ClassifierChain.fit()", "path": "modules/generated/sklearn.multioutput.classifierchain#sklearn.multioutput.ClassifierChain.fit", "type": "multioutput", "text": "\nFit the model to data matrix X and targets Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.ClassifierChain.get_params()", "path": "modules/generated/sklearn.multioutput.classifierchain#sklearn.multioutput.ClassifierChain.get_params", "type": "multioutput", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.ClassifierChain.predict()", "path": "modules/generated/sklearn.multioutput.classifierchain#sklearn.multioutput.ClassifierChain.predict", "type": "multioutput", "text": "\nPredict on the data matrix X using the ClassifierChain model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.ClassifierChain.predict_proba()", "path": "modules/generated/sklearn.multioutput.classifierchain#sklearn.multioutput.ClassifierChain.predict_proba", "type": "multioutput", "text": "\nPredict probability estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.ClassifierChain.score()", "path": "modules/generated/sklearn.multioutput.classifierchain#sklearn.multioutput.ClassifierChain.score", "type": "multioutput", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.ClassifierChain.set_params()", "path": "modules/generated/sklearn.multioutput.classifierchain#sklearn.multioutput.ClassifierChain.set_params", "type": "multioutput", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputClassifier", "path": "modules/generated/sklearn.multioutput.multioutputclassifier#sklearn.multioutput.MultiOutputClassifier", "type": "multioutput", "text": "\nMulti target classification\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputClassifier()", "path": "modules/generated/sklearn.multioutput.multioutputclassifier", "type": "multioutput", "text": "\nMulti target classification\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputClassifier.fit()", "path": "modules/generated/sklearn.multioutput.multioutputclassifier#sklearn.multioutput.MultiOutputClassifier.fit", "type": "multioutput", "text": "\nFit the model to data matrix X and targets Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputClassifier.get_params()", "path": "modules/generated/sklearn.multioutput.multioutputclassifier#sklearn.multioutput.MultiOutputClassifier.get_params", "type": "multioutput", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputClassifier.partial_fit()", "path": "modules/generated/sklearn.multioutput.multioutputclassifier#sklearn.multioutput.MultiOutputClassifier.partial_fit", "type": "multioutput", "text": "\nIncrementally fit the model to data. Fit a separate model for each output\nvariable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputClassifier.predict()", "path": "modules/generated/sklearn.multioutput.multioutputclassifier#sklearn.multioutput.MultiOutputClassifier.predict", "type": "multioutput", "text": "\ntrained for each target variable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputClassifier.predict_proba()", "path": "modules/generated/sklearn.multioutput.multioutputclassifier#sklearn.multioutput.MultiOutputClassifier.predict_proba", "type": "multioutput", "text": "\nProbability estimates. Returns prediction probabilities for each class of each\noutput.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputClassifier.score()", "path": "modules/generated/sklearn.multioutput.multioutputclassifier#sklearn.multioutput.MultiOutputClassifier.score", "type": "multioutput", "text": "\nReturns the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputClassifier.set_params()", "path": "modules/generated/sklearn.multioutput.multioutputclassifier#sklearn.multioutput.MultiOutputClassifier.set_params", "type": "multioutput", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputRegressor", "path": "modules/generated/sklearn.multioutput.multioutputregressor#sklearn.multioutput.MultiOutputRegressor", "type": "multioutput", "text": "\nMulti target regression\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputRegressor()", "path": "modules/generated/sklearn.multioutput.multioutputregressor", "type": "multioutput", "text": "\nMulti target regression\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputRegressor.fit()", "path": "modules/generated/sklearn.multioutput.multioutputregressor#sklearn.multioutput.MultiOutputRegressor.fit", "type": "multioutput", "text": "\nFit the model to data. Fit a separate model for each output variable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputRegressor.get_params()", "path": "modules/generated/sklearn.multioutput.multioutputregressor#sklearn.multioutput.MultiOutputRegressor.get_params", "type": "multioutput", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputRegressor.partial_fit()", "path": "modules/generated/sklearn.multioutput.multioutputregressor#sklearn.multioutput.MultiOutputRegressor.partial_fit", "type": "multioutput", "text": "\nIncrementally fit the model to data. Fit a separate model for each output\nvariable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputRegressor.predict()", "path": "modules/generated/sklearn.multioutput.multioutputregressor#sklearn.multioutput.MultiOutputRegressor.predict", "type": "multioutput", "text": "\ntrained for each target variable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputRegressor.score()", "path": "modules/generated/sklearn.multioutput.multioutputregressor#sklearn.multioutput.MultiOutputRegressor.score", "type": "multioutput", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.MultiOutputRegressor.set_params()", "path": "modules/generated/sklearn.multioutput.multioutputregressor#sklearn.multioutput.MultiOutputRegressor.set_params", "type": "multioutput", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.RegressorChain", "path": "modules/generated/sklearn.multioutput.regressorchain#sklearn.multioutput.RegressorChain", "type": "multioutput", "text": "\nA multi-label model that arranges regressions into a chain.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.RegressorChain()", "path": "modules/generated/sklearn.multioutput.regressorchain", "type": "multioutput", "text": "\nA multi-label model that arranges regressions into a chain.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.RegressorChain.fit()", "path": "modules/generated/sklearn.multioutput.regressorchain#sklearn.multioutput.RegressorChain.fit", "type": "multioutput", "text": "\nFit the model to data matrix X and targets Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.RegressorChain.get_params()", "path": "modules/generated/sklearn.multioutput.regressorchain#sklearn.multioutput.RegressorChain.get_params", "type": "multioutput", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.RegressorChain.predict()", "path": "modules/generated/sklearn.multioutput.regressorchain#sklearn.multioutput.RegressorChain.predict", "type": "multioutput", "text": "\nPredict on the data matrix X using the ClassifierChain model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.RegressorChain.score()", "path": "modules/generated/sklearn.multioutput.regressorchain#sklearn.multioutput.RegressorChain.score", "type": "multioutput", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "multioutput.RegressorChain.set_params()", "path": "modules/generated/sklearn.multioutput.regressorchain#sklearn.multioutput.RegressorChain.set_params", "type": "multioutput", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.BernoulliNB", "path": "modules/generated/sklearn.naive_bayes.bernoullinb#sklearn.naive_bayes.BernoulliNB", "type": "naive_bayes", "text": "\nNaive Bayes classifier for multivariate Bernoulli models.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.BernoulliNB()", "path": "modules/generated/sklearn.naive_bayes.bernoullinb", "type": "naive_bayes", "text": "\nNaive Bayes classifier for multivariate Bernoulli models.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.BernoulliNB.fit()", "path": "modules/generated/sklearn.naive_bayes.bernoullinb#sklearn.naive_bayes.BernoulliNB.fit", "type": "naive_bayes", "text": "\nFit Naive Bayes classifier according to X, y\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.BernoulliNB.get_params()", "path": "modules/generated/sklearn.naive_bayes.bernoullinb#sklearn.naive_bayes.BernoulliNB.get_params", "type": "naive_bayes", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.BernoulliNB.partial_fit()", "path": "modules/generated/sklearn.naive_bayes.bernoullinb#sklearn.naive_bayes.BernoulliNB.partial_fit", "type": "naive_bayes", "text": "\nIncremental fit on a batch of samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.BernoulliNB.predict()", "path": "modules/generated/sklearn.naive_bayes.bernoullinb#sklearn.naive_bayes.BernoulliNB.predict", "type": "naive_bayes", "text": "\nPerform classification on an array of test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.BernoulliNB.predict_log_proba()", "path": "modules/generated/sklearn.naive_bayes.bernoullinb#sklearn.naive_bayes.BernoulliNB.predict_log_proba", "type": "naive_bayes", "text": "\nReturn log-probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.BernoulliNB.predict_proba()", "path": "modules/generated/sklearn.naive_bayes.bernoullinb#sklearn.naive_bayes.BernoulliNB.predict_proba", "type": "naive_bayes", "text": "\nReturn probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.BernoulliNB.score()", "path": "modules/generated/sklearn.naive_bayes.bernoullinb#sklearn.naive_bayes.BernoulliNB.score", "type": "naive_bayes", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.BernoulliNB.set_params()", "path": "modules/generated/sklearn.naive_bayes.bernoullinb#sklearn.naive_bayes.BernoulliNB.set_params", "type": "naive_bayes", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.CategoricalNB", "path": "modules/generated/sklearn.naive_bayes.categoricalnb#sklearn.naive_bayes.CategoricalNB", "type": "naive_bayes", "text": "\nNaive Bayes classifier for categorical features\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.CategoricalNB()", "path": "modules/generated/sklearn.naive_bayes.categoricalnb", "type": "naive_bayes", "text": "\nNaive Bayes classifier for categorical features\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.CategoricalNB.fit()", "path": "modules/generated/sklearn.naive_bayes.categoricalnb#sklearn.naive_bayes.CategoricalNB.fit", "type": "naive_bayes", "text": "\nFit Naive Bayes classifier according to X, y\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.CategoricalNB.get_params()", "path": "modules/generated/sklearn.naive_bayes.categoricalnb#sklearn.naive_bayes.CategoricalNB.get_params", "type": "naive_bayes", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.CategoricalNB.partial_fit()", "path": "modules/generated/sklearn.naive_bayes.categoricalnb#sklearn.naive_bayes.CategoricalNB.partial_fit", "type": "naive_bayes", "text": "\nIncremental fit on a batch of samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.CategoricalNB.predict()", "path": "modules/generated/sklearn.naive_bayes.categoricalnb#sklearn.naive_bayes.CategoricalNB.predict", "type": "naive_bayes", "text": "\nPerform classification on an array of test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.CategoricalNB.predict_log_proba()", "path": "modules/generated/sklearn.naive_bayes.categoricalnb#sklearn.naive_bayes.CategoricalNB.predict_log_proba", "type": "naive_bayes", "text": "\nReturn log-probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.CategoricalNB.predict_proba()", "path": "modules/generated/sklearn.naive_bayes.categoricalnb#sklearn.naive_bayes.CategoricalNB.predict_proba", "type": "naive_bayes", "text": "\nReturn probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.CategoricalNB.score()", "path": "modules/generated/sklearn.naive_bayes.categoricalnb#sklearn.naive_bayes.CategoricalNB.score", "type": "naive_bayes", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.CategoricalNB.set_params()", "path": "modules/generated/sklearn.naive_bayes.categoricalnb#sklearn.naive_bayes.CategoricalNB.set_params", "type": "naive_bayes", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.ComplementNB", "path": "modules/generated/sklearn.naive_bayes.complementnb#sklearn.naive_bayes.ComplementNB", "type": "naive_bayes", "text": "\nThe Complement Naive Bayes classifier described in Rennie et al. (2003).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.ComplementNB()", "path": "modules/generated/sklearn.naive_bayes.complementnb", "type": "naive_bayes", "text": "\nThe Complement Naive Bayes classifier described in Rennie et al. (2003).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.ComplementNB.fit()", "path": "modules/generated/sklearn.naive_bayes.complementnb#sklearn.naive_bayes.ComplementNB.fit", "type": "naive_bayes", "text": "\nFit Naive Bayes classifier according to X, y\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.ComplementNB.get_params()", "path": "modules/generated/sklearn.naive_bayes.complementnb#sklearn.naive_bayes.ComplementNB.get_params", "type": "naive_bayes", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.ComplementNB.partial_fit()", "path": "modules/generated/sklearn.naive_bayes.complementnb#sklearn.naive_bayes.ComplementNB.partial_fit", "type": "naive_bayes", "text": "\nIncremental fit on a batch of samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.ComplementNB.predict()", "path": "modules/generated/sklearn.naive_bayes.complementnb#sklearn.naive_bayes.ComplementNB.predict", "type": "naive_bayes", "text": "\nPerform classification on an array of test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.ComplementNB.predict_log_proba()", "path": "modules/generated/sklearn.naive_bayes.complementnb#sklearn.naive_bayes.ComplementNB.predict_log_proba", "type": "naive_bayes", "text": "\nReturn log-probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.ComplementNB.predict_proba()", "path": "modules/generated/sklearn.naive_bayes.complementnb#sklearn.naive_bayes.ComplementNB.predict_proba", "type": "naive_bayes", "text": "\nReturn probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.ComplementNB.score()", "path": "modules/generated/sklearn.naive_bayes.complementnb#sklearn.naive_bayes.ComplementNB.score", "type": "naive_bayes", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.ComplementNB.set_params()", "path": "modules/generated/sklearn.naive_bayes.complementnb#sklearn.naive_bayes.ComplementNB.set_params", "type": "naive_bayes", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.GaussianNB", "path": "modules/generated/sklearn.naive_bayes.gaussiannb#sklearn.naive_bayes.GaussianNB", "type": "naive_bayes", "text": "\nGaussian Naive Bayes (GaussianNB)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.GaussianNB()", "path": "modules/generated/sklearn.naive_bayes.gaussiannb", "type": "naive_bayes", "text": "\nGaussian Naive Bayes (GaussianNB)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.GaussianNB.fit()", "path": "modules/generated/sklearn.naive_bayes.gaussiannb#sklearn.naive_bayes.GaussianNB.fit", "type": "naive_bayes", "text": "\nFit Gaussian Naive Bayes according to X, y\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.GaussianNB.get_params()", "path": "modules/generated/sklearn.naive_bayes.gaussiannb#sklearn.naive_bayes.GaussianNB.get_params", "type": "naive_bayes", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.GaussianNB.partial_fit()", "path": "modules/generated/sklearn.naive_bayes.gaussiannb#sklearn.naive_bayes.GaussianNB.partial_fit", "type": "naive_bayes", "text": "\nIncremental fit on a batch of samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.GaussianNB.predict()", "path": "modules/generated/sklearn.naive_bayes.gaussiannb#sklearn.naive_bayes.GaussianNB.predict", "type": "naive_bayes", "text": "\nPerform classification on an array of test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.GaussianNB.predict_log_proba()", "path": "modules/generated/sklearn.naive_bayes.gaussiannb#sklearn.naive_bayes.GaussianNB.predict_log_proba", "type": "naive_bayes", "text": "\nReturn log-probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.GaussianNB.predict_proba()", "path": "modules/generated/sklearn.naive_bayes.gaussiannb#sklearn.naive_bayes.GaussianNB.predict_proba", "type": "naive_bayes", "text": "\nReturn probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.GaussianNB.score()", "path": "modules/generated/sklearn.naive_bayes.gaussiannb#sklearn.naive_bayes.GaussianNB.score", "type": "naive_bayes", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.GaussianNB.set_params()", "path": "modules/generated/sklearn.naive_bayes.gaussiannb#sklearn.naive_bayes.GaussianNB.set_params", "type": "naive_bayes", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.MultinomialNB", "path": "modules/generated/sklearn.naive_bayes.multinomialnb#sklearn.naive_bayes.MultinomialNB", "type": "naive_bayes", "text": "\nNaive Bayes classifier for multinomial models\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.MultinomialNB()", "path": "modules/generated/sklearn.naive_bayes.multinomialnb", "type": "naive_bayes", "text": "\nNaive Bayes classifier for multinomial models\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.MultinomialNB.fit()", "path": "modules/generated/sklearn.naive_bayes.multinomialnb#sklearn.naive_bayes.MultinomialNB.fit", "type": "naive_bayes", "text": "\nFit Naive Bayes classifier according to X, y\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.MultinomialNB.get_params()", "path": "modules/generated/sklearn.naive_bayes.multinomialnb#sklearn.naive_bayes.MultinomialNB.get_params", "type": "naive_bayes", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.MultinomialNB.partial_fit()", "path": "modules/generated/sklearn.naive_bayes.multinomialnb#sklearn.naive_bayes.MultinomialNB.partial_fit", "type": "naive_bayes", "text": "\nIncremental fit on a batch of samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.MultinomialNB.predict()", "path": "modules/generated/sklearn.naive_bayes.multinomialnb#sklearn.naive_bayes.MultinomialNB.predict", "type": "naive_bayes", "text": "\nPerform classification on an array of test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.MultinomialNB.predict_log_proba()", "path": "modules/generated/sklearn.naive_bayes.multinomialnb#sklearn.naive_bayes.MultinomialNB.predict_log_proba", "type": "naive_bayes", "text": "\nReturn log-probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.MultinomialNB.predict_proba()", "path": "modules/generated/sklearn.naive_bayes.multinomialnb#sklearn.naive_bayes.MultinomialNB.predict_proba", "type": "naive_bayes", "text": "\nReturn probability estimates for the test vector X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.MultinomialNB.score()", "path": "modules/generated/sklearn.naive_bayes.multinomialnb#sklearn.naive_bayes.MultinomialNB.score", "type": "naive_bayes", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "naive_bayes.MultinomialNB.set_params()", "path": "modules/generated/sklearn.naive_bayes.multinomialnb#sklearn.naive_bayes.MultinomialNB.set_params", "type": "naive_bayes", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.BallTree", "path": "modules/generated/sklearn.neighbors.balltree#sklearn.neighbors.BallTree", "type": "neighbors", "text": "\nBallTree for fast generalized N-point problems\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.BallTree()", "path": "modules/generated/sklearn.neighbors.balltree", "type": "neighbors", "text": "\nBallTree for fast generalized N-point problems\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.BallTree.get_arrays()", "path": "modules/generated/sklearn.neighbors.balltree#sklearn.neighbors.BallTree.get_arrays", "type": "neighbors", "text": "\nGet data and node arrays.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.BallTree.get_n_calls()", "path": "modules/generated/sklearn.neighbors.balltree#sklearn.neighbors.BallTree.get_n_calls", "type": "neighbors", "text": "\nGet number of calls.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.BallTree.get_tree_stats()", "path": "modules/generated/sklearn.neighbors.balltree#sklearn.neighbors.BallTree.get_tree_stats", "type": "neighbors", "text": "\nGet tree status.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.BallTree.kernel_density()", "path": "modules/generated/sklearn.neighbors.balltree#sklearn.neighbors.BallTree.kernel_density", "type": "neighbors", "text": "\nCompute the kernel density estimate at points X with the given kernel, using\nthe distance metric specified at tree creation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.BallTree.query()", "path": "modules/generated/sklearn.neighbors.balltree#sklearn.neighbors.BallTree.query", "type": "neighbors", "text": "\nquery the tree for the k nearest neighbors\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.BallTree.query_radius()", "path": "modules/generated/sklearn.neighbors.balltree#sklearn.neighbors.BallTree.query_radius", "type": "neighbors", "text": "\nquery the tree for neighbors within a radius r\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.BallTree.reset_n_calls()", "path": "modules/generated/sklearn.neighbors.balltree#sklearn.neighbors.BallTree.reset_n_calls", "type": "neighbors", "text": "\nReset number of calls to 0.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.BallTree.two_point_correlation()", "path": "modules/generated/sklearn.neighbors.balltree#sklearn.neighbors.BallTree.two_point_correlation", "type": "neighbors", "text": "\nCompute the two-point correlation function\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.DistanceMetric", "path": "modules/generated/sklearn.neighbors.distancemetric", "type": "neighbors", "text": "\nDistanceMetric class\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.DistanceMetric", "path": "modules/generated/sklearn.neighbors.distancemetric#sklearn.neighbors.DistanceMetric", "type": "neighbors", "text": "\nDistanceMetric class\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.DistanceMetric.dist_to_rdist()", "path": "modules/generated/sklearn.neighbors.distancemetric#sklearn.neighbors.DistanceMetric.dist_to_rdist", "type": "neighbors", "text": "\nConvert the true distance to the reduced distance.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.DistanceMetric.get_metric()", "path": "modules/generated/sklearn.neighbors.distancemetric#sklearn.neighbors.DistanceMetric.get_metric", "type": "neighbors", "text": "\nGet the given distance metric from the string identifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.DistanceMetric.pairwise()", "path": "modules/generated/sklearn.neighbors.distancemetric#sklearn.neighbors.DistanceMetric.pairwise", "type": "neighbors", "text": "\nCompute the pairwise distances between X and Y\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.DistanceMetric.rdist_to_dist()", "path": "modules/generated/sklearn.neighbors.distancemetric#sklearn.neighbors.DistanceMetric.rdist_to_dist", "type": "neighbors", "text": "\nConvert the Reduced distance to the true distance.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KDTree", "path": "modules/generated/sklearn.neighbors.kdtree#sklearn.neighbors.KDTree", "type": "neighbors", "text": "\nKDTree for fast generalized N-point problems\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KDTree()", "path": "modules/generated/sklearn.neighbors.kdtree", "type": "neighbors", "text": "\nKDTree for fast generalized N-point problems\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KDTree.get_arrays()", "path": "modules/generated/sklearn.neighbors.kdtree#sklearn.neighbors.KDTree.get_arrays", "type": "neighbors", "text": "\nGet data and node arrays.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KDTree.get_n_calls()", "path": "modules/generated/sklearn.neighbors.kdtree#sklearn.neighbors.KDTree.get_n_calls", "type": "neighbors", "text": "\nGet number of calls.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KDTree.get_tree_stats()", "path": "modules/generated/sklearn.neighbors.kdtree#sklearn.neighbors.KDTree.get_tree_stats", "type": "neighbors", "text": "\nGet tree status.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KDTree.kernel_density()", "path": "modules/generated/sklearn.neighbors.kdtree#sklearn.neighbors.KDTree.kernel_density", "type": "neighbors", "text": "\nCompute the kernel density estimate at points X with the given kernel, using\nthe distance metric specified at tree creation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KDTree.query()", "path": "modules/generated/sklearn.neighbors.kdtree#sklearn.neighbors.KDTree.query", "type": "neighbors", "text": "\nquery the tree for the k nearest neighbors\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KDTree.query_radius()", "path": "modules/generated/sklearn.neighbors.kdtree#sklearn.neighbors.KDTree.query_radius", "type": "neighbors", "text": "\nquery the tree for neighbors within a radius r\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KDTree.reset_n_calls()", "path": "modules/generated/sklearn.neighbors.kdtree#sklearn.neighbors.KDTree.reset_n_calls", "type": "neighbors", "text": "\nReset number of calls to 0.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KDTree.two_point_correlation()", "path": "modules/generated/sklearn.neighbors.kdtree#sklearn.neighbors.KDTree.two_point_correlation", "type": "neighbors", "text": "\nCompute the two-point correlation function\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KernelDensity", "path": "modules/generated/sklearn.neighbors.kerneldensity#sklearn.neighbors.KernelDensity", "type": "neighbors", "text": "\nKernel Density Estimation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KernelDensity()", "path": "modules/generated/sklearn.neighbors.kerneldensity", "type": "neighbors", "text": "\nKernel Density Estimation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KernelDensity.fit()", "path": "modules/generated/sklearn.neighbors.kerneldensity#sklearn.neighbors.KernelDensity.fit", "type": "neighbors", "text": "\nFit the Kernel Density model on the data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KernelDensity.get_params()", "path": "modules/generated/sklearn.neighbors.kerneldensity#sklearn.neighbors.KernelDensity.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KernelDensity.sample()", "path": "modules/generated/sklearn.neighbors.kerneldensity#sklearn.neighbors.KernelDensity.sample", "type": "neighbors", "text": "\nGenerate random samples from the model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KernelDensity.score()", "path": "modules/generated/sklearn.neighbors.kerneldensity#sklearn.neighbors.KernelDensity.score", "type": "neighbors", "text": "\nCompute the total log probability density under the model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KernelDensity.score_samples()", "path": "modules/generated/sklearn.neighbors.kerneldensity#sklearn.neighbors.KernelDensity.score_samples", "type": "neighbors", "text": "\nEvaluate the log density model on the data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KernelDensity.set_params()", "path": "modules/generated/sklearn.neighbors.kerneldensity#sklearn.neighbors.KernelDensity.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsClassifier", "path": "modules/generated/sklearn.neighbors.kneighborsclassifier#sklearn.neighbors.KNeighborsClassifier", "type": "neighbors", "text": "\nClassifier implementing the k-nearest neighbors vote.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsClassifier()", "path": "modules/generated/sklearn.neighbors.kneighborsclassifier", "type": "neighbors", "text": "\nClassifier implementing the k-nearest neighbors vote.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsClassifier.fit()", "path": "modules/generated/sklearn.neighbors.kneighborsclassifier#sklearn.neighbors.KNeighborsClassifier.fit", "type": "neighbors", "text": "\nFit the k-nearest neighbors classifier from the training dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsClassifier.get_params()", "path": "modules/generated/sklearn.neighbors.kneighborsclassifier#sklearn.neighbors.KNeighborsClassifier.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsClassifier.kneighbors()", "path": "modules/generated/sklearn.neighbors.kneighborsclassifier#sklearn.neighbors.KNeighborsClassifier.kneighbors", "type": "neighbors", "text": "\nFinds the K-neighbors of a point.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsClassifier.kneighbors_graph()", "path": "modules/generated/sklearn.neighbors.kneighborsclassifier#sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of k-Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsClassifier.predict()", "path": "modules/generated/sklearn.neighbors.kneighborsclassifier#sklearn.neighbors.KNeighborsClassifier.predict", "type": "neighbors", "text": "\nPredict the class labels for the provided data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsClassifier.predict_proba()", "path": "modules/generated/sklearn.neighbors.kneighborsclassifier#sklearn.neighbors.KNeighborsClassifier.predict_proba", "type": "neighbors", "text": "\nReturn probability estimates for the test data X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsClassifier.score()", "path": "modules/generated/sklearn.neighbors.kneighborsclassifier#sklearn.neighbors.KNeighborsClassifier.score", "type": "neighbors", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsClassifier.set_params()", "path": "modules/generated/sklearn.neighbors.kneighborsclassifier#sklearn.neighbors.KNeighborsClassifier.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsRegressor", "path": "modules/generated/sklearn.neighbors.kneighborsregressor#sklearn.neighbors.KNeighborsRegressor", "type": "neighbors", "text": "\nRegression based on k-nearest neighbors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsRegressor()", "path": "modules/generated/sklearn.neighbors.kneighborsregressor", "type": "neighbors", "text": "\nRegression based on k-nearest neighbors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsRegressor.fit()", "path": "modules/generated/sklearn.neighbors.kneighborsregressor#sklearn.neighbors.KNeighborsRegressor.fit", "type": "neighbors", "text": "\nFit the k-nearest neighbors regressor from the training dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsRegressor.get_params()", "path": "modules/generated/sklearn.neighbors.kneighborsregressor#sklearn.neighbors.KNeighborsRegressor.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsRegressor.kneighbors()", "path": "modules/generated/sklearn.neighbors.kneighborsregressor#sklearn.neighbors.KNeighborsRegressor.kneighbors", "type": "neighbors", "text": "\nFinds the K-neighbors of a point.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsRegressor.kneighbors_graph()", "path": "modules/generated/sklearn.neighbors.kneighborsregressor#sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of k-Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsRegressor.predict()", "path": "modules/generated/sklearn.neighbors.kneighborsregressor#sklearn.neighbors.KNeighborsRegressor.predict", "type": "neighbors", "text": "\nPredict the target for the provided data\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsRegressor.score()", "path": "modules/generated/sklearn.neighbors.kneighborsregressor#sklearn.neighbors.KNeighborsRegressor.score", "type": "neighbors", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsRegressor.set_params()", "path": "modules/generated/sklearn.neighbors.kneighborsregressor#sklearn.neighbors.KNeighborsRegressor.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsTransformer", "path": "modules/generated/sklearn.neighbors.kneighborstransformer#sklearn.neighbors.KNeighborsTransformer", "type": "neighbors", "text": "\nTransform X into a (weighted) graph of k nearest neighbors\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsTransformer()", "path": "modules/generated/sklearn.neighbors.kneighborstransformer", "type": "neighbors", "text": "\nTransform X into a (weighted) graph of k nearest neighbors\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsTransformer.fit()", "path": "modules/generated/sklearn.neighbors.kneighborstransformer#sklearn.neighbors.KNeighborsTransformer.fit", "type": "neighbors", "text": "\nFit the k-nearest neighbors transformer from the training dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsTransformer.fit_transform()", "path": "modules/generated/sklearn.neighbors.kneighborstransformer#sklearn.neighbors.KNeighborsTransformer.fit_transform", "type": "neighbors", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsTransformer.get_params()", "path": "modules/generated/sklearn.neighbors.kneighborstransformer#sklearn.neighbors.KNeighborsTransformer.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsTransformer.kneighbors()", "path": "modules/generated/sklearn.neighbors.kneighborstransformer#sklearn.neighbors.KNeighborsTransformer.kneighbors", "type": "neighbors", "text": "\nFinds the K-neighbors of a point.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsTransformer.kneighbors_graph()", "path": "modules/generated/sklearn.neighbors.kneighborstransformer#sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of k-Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsTransformer.set_params()", "path": "modules/generated/sklearn.neighbors.kneighborstransformer#sklearn.neighbors.KNeighborsTransformer.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.KNeighborsTransformer.transform()", "path": "modules/generated/sklearn.neighbors.kneighborstransformer#sklearn.neighbors.KNeighborsTransformer.transform", "type": "neighbors", "text": "\nComputes the (weighted) graph of Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.kneighbors_graph()", "path": "modules/generated/sklearn.neighbors.kneighbors_graph#sklearn.neighbors.kneighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of k-Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor", "path": "modules/generated/sklearn.neighbors.localoutlierfactor#sklearn.neighbors.LocalOutlierFactor", "type": "neighbors", "text": "\nUnsupervised Outlier Detection using Local Outlier Factor (LOF)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor()", "path": "modules/generated/sklearn.neighbors.localoutlierfactor", "type": "neighbors", "text": "\nUnsupervised Outlier Detection using Local Outlier Factor (LOF)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor.decision_function()", "path": "modules/generated/sklearn.neighbors.localoutlierfactor#sklearn.neighbors.LocalOutlierFactor.decision_function", "type": "neighbors", "text": "\nShifted opposite of the Local Outlier Factor of X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor.fit()", "path": "modules/generated/sklearn.neighbors.localoutlierfactor#sklearn.neighbors.LocalOutlierFactor.fit", "type": "neighbors", "text": "\nFit the local outlier factor detector from the training dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor.fit_predict()", "path": "modules/generated/sklearn.neighbors.localoutlierfactor#sklearn.neighbors.LocalOutlierFactor.fit_predict", "type": "neighbors", "text": "\nFits the model to the training set X and returns the labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor.get_params()", "path": "modules/generated/sklearn.neighbors.localoutlierfactor#sklearn.neighbors.LocalOutlierFactor.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor.kneighbors()", "path": "modules/generated/sklearn.neighbors.localoutlierfactor#sklearn.neighbors.LocalOutlierFactor.kneighbors", "type": "neighbors", "text": "\nFinds the K-neighbors of a point.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor.kneighbors_graph()", "path": "modules/generated/sklearn.neighbors.localoutlierfactor#sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of k-Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor.predict()", "path": "modules/generated/sklearn.neighbors.localoutlierfactor#sklearn.neighbors.LocalOutlierFactor.predict", "type": "neighbors", "text": "\nPredict the labels (1 inlier, -1 outlier) of X according to LOF.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor.score_samples()", "path": "modules/generated/sklearn.neighbors.localoutlierfactor#sklearn.neighbors.LocalOutlierFactor.score_samples", "type": "neighbors", "text": "\nOpposite of the Local Outlier Factor of X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.LocalOutlierFactor.set_params()", "path": "modules/generated/sklearn.neighbors.localoutlierfactor#sklearn.neighbors.LocalOutlierFactor.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestCentroid", "path": "modules/generated/sklearn.neighbors.nearestcentroid#sklearn.neighbors.NearestCentroid", "type": "neighbors", "text": "\nNearest centroid classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestCentroid()", "path": "modules/generated/sklearn.neighbors.nearestcentroid", "type": "neighbors", "text": "\nNearest centroid classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestCentroid.fit()", "path": "modules/generated/sklearn.neighbors.nearestcentroid#sklearn.neighbors.NearestCentroid.fit", "type": "neighbors", "text": "\nFit the NearestCentroid model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestCentroid.get_params()", "path": "modules/generated/sklearn.neighbors.nearestcentroid#sklearn.neighbors.NearestCentroid.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestCentroid.predict()", "path": "modules/generated/sklearn.neighbors.nearestcentroid#sklearn.neighbors.NearestCentroid.predict", "type": "neighbors", "text": "\nPerform classification on an array of test vectors X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestCentroid.score()", "path": "modules/generated/sklearn.neighbors.nearestcentroid#sklearn.neighbors.NearestCentroid.score", "type": "neighbors", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestCentroid.set_params()", "path": "modules/generated/sklearn.neighbors.nearestcentroid#sklearn.neighbors.NearestCentroid.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestNeighbors", "path": "modules/generated/sklearn.neighbors.nearestneighbors#sklearn.neighbors.NearestNeighbors", "type": "neighbors", "text": "\nUnsupervised learner for implementing neighbor searches.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestNeighbors()", "path": "modules/generated/sklearn.neighbors.nearestneighbors", "type": "neighbors", "text": "\nUnsupervised learner for implementing neighbor searches.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestNeighbors.fit()", "path": "modules/generated/sklearn.neighbors.nearestneighbors#sklearn.neighbors.NearestNeighbors.fit", "type": "neighbors", "text": "\nFit the nearest neighbors estimator from the training dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestNeighbors.get_params()", "path": "modules/generated/sklearn.neighbors.nearestneighbors#sklearn.neighbors.NearestNeighbors.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestNeighbors.kneighbors()", "path": "modules/generated/sklearn.neighbors.nearestneighbors#sklearn.neighbors.NearestNeighbors.kneighbors", "type": "neighbors", "text": "\nFinds the K-neighbors of a point.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestNeighbors.kneighbors_graph()", "path": "modules/generated/sklearn.neighbors.nearestneighbors#sklearn.neighbors.NearestNeighbors.kneighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of k-Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestNeighbors.radius_neighbors()", "path": "modules/generated/sklearn.neighbors.nearestneighbors#sklearn.neighbors.NearestNeighbors.radius_neighbors", "type": "neighbors", "text": "\nFinds the neighbors within a given radius of a point or points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestNeighbors.radius_neighbors_graph()", "path": "modules/generated/sklearn.neighbors.nearestneighbors#sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NearestNeighbors.set_params()", "path": "modules/generated/sklearn.neighbors.nearestneighbors#sklearn.neighbors.NearestNeighbors.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NeighborhoodComponentsAnalysis", "path": "modules/generated/sklearn.neighbors.neighborhoodcomponentsanalysis#sklearn.neighbors.NeighborhoodComponentsAnalysis", "type": "neighbors", "text": "\nNeighborhood Components Analysis\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NeighborhoodComponentsAnalysis()", "path": "modules/generated/sklearn.neighbors.neighborhoodcomponentsanalysis", "type": "neighbors", "text": "\nNeighborhood Components Analysis\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NeighborhoodComponentsAnalysis.fit()", "path": "modules/generated/sklearn.neighbors.neighborhoodcomponentsanalysis#sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", "type": "neighbors", "text": "\nFit the model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NeighborhoodComponentsAnalysis.fit_transform()", "path": "modules/generated/sklearn.neighbors.neighborhoodcomponentsanalysis#sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", "type": "neighbors", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NeighborhoodComponentsAnalysis.get_params()", "path": "modules/generated/sklearn.neighbors.neighborhoodcomponentsanalysis#sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NeighborhoodComponentsAnalysis.set_params()", "path": "modules/generated/sklearn.neighbors.neighborhoodcomponentsanalysis#sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.NeighborhoodComponentsAnalysis.transform()", "path": "modules/generated/sklearn.neighbors.neighborhoodcomponentsanalysis#sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", "type": "neighbors", "text": "\nApplies the learned transformation to the given data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsClassifier", "path": "modules/generated/sklearn.neighbors.radiusneighborsclassifier#sklearn.neighbors.RadiusNeighborsClassifier", "type": "neighbors", "text": "\nClassifier implementing a vote among neighbors within a given radius\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsClassifier()", "path": "modules/generated/sklearn.neighbors.radiusneighborsclassifier", "type": "neighbors", "text": "\nClassifier implementing a vote among neighbors within a given radius\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsClassifier.fit()", "path": "modules/generated/sklearn.neighbors.radiusneighborsclassifier#sklearn.neighbors.RadiusNeighborsClassifier.fit", "type": "neighbors", "text": "\nFit the radius neighbors classifier from the training dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsClassifier.get_params()", "path": "modules/generated/sklearn.neighbors.radiusneighborsclassifier#sklearn.neighbors.RadiusNeighborsClassifier.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsClassifier.predict()", "path": "modules/generated/sklearn.neighbors.radiusneighborsclassifier#sklearn.neighbors.RadiusNeighborsClassifier.predict", "type": "neighbors", "text": "\nPredict the class labels for the provided data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsClassifier.predict_proba()", "path": "modules/generated/sklearn.neighbors.radiusneighborsclassifier#sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", "type": "neighbors", "text": "\nReturn probability estimates for the test data X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsClassifier.radius_neighbors()", "path": "modules/generated/sklearn.neighbors.radiusneighborsclassifier#sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", "type": "neighbors", "text": "\nFinds the neighbors within a given radius of a point or points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsClassifier.radius_neighbors_graph()", "path": "modules/generated/sklearn.neighbors.radiusneighborsclassifier#sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsClassifier.score()", "path": "modules/generated/sklearn.neighbors.radiusneighborsclassifier#sklearn.neighbors.RadiusNeighborsClassifier.score", "type": "neighbors", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsClassifier.set_params()", "path": "modules/generated/sklearn.neighbors.radiusneighborsclassifier#sklearn.neighbors.RadiusNeighborsClassifier.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsRegressor", "path": "modules/generated/sklearn.neighbors.radiusneighborsregressor#sklearn.neighbors.RadiusNeighborsRegressor", "type": "neighbors", "text": "\nRegression based on neighbors within a fixed radius.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsRegressor()", "path": "modules/generated/sklearn.neighbors.radiusneighborsregressor", "type": "neighbors", "text": "\nRegression based on neighbors within a fixed radius.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsRegressor.fit()", "path": "modules/generated/sklearn.neighbors.radiusneighborsregressor#sklearn.neighbors.RadiusNeighborsRegressor.fit", "type": "neighbors", "text": "\nFit the radius neighbors regressor from the training dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsRegressor.get_params()", "path": "modules/generated/sklearn.neighbors.radiusneighborsregressor#sklearn.neighbors.RadiusNeighborsRegressor.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsRegressor.predict()", "path": "modules/generated/sklearn.neighbors.radiusneighborsregressor#sklearn.neighbors.RadiusNeighborsRegressor.predict", "type": "neighbors", "text": "\nPredict the target for the provided data\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsRegressor.radius_neighbors()", "path": "modules/generated/sklearn.neighbors.radiusneighborsregressor#sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", "type": "neighbors", "text": "\nFinds the neighbors within a given radius of a point or points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsRegressor.radius_neighbors_graph()", "path": "modules/generated/sklearn.neighbors.radiusneighborsregressor#sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsRegressor.score()", "path": "modules/generated/sklearn.neighbors.radiusneighborsregressor#sklearn.neighbors.RadiusNeighborsRegressor.score", "type": "neighbors", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsRegressor.set_params()", "path": "modules/generated/sklearn.neighbors.radiusneighborsregressor#sklearn.neighbors.RadiusNeighborsRegressor.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsTransformer", "path": "modules/generated/sklearn.neighbors.radiusneighborstransformer#sklearn.neighbors.RadiusNeighborsTransformer", "type": "neighbors", "text": "\nTransform X into a (weighted) graph of neighbors nearer than a radius\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsTransformer()", "path": "modules/generated/sklearn.neighbors.radiusneighborstransformer", "type": "neighbors", "text": "\nTransform X into a (weighted) graph of neighbors nearer than a radius\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsTransformer.fit()", "path": "modules/generated/sklearn.neighbors.radiusneighborstransformer#sklearn.neighbors.RadiusNeighborsTransformer.fit", "type": "neighbors", "text": "\nFit the radius neighbors transformer from the training dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsTransformer.fit_transform()", "path": "modules/generated/sklearn.neighbors.radiusneighborstransformer#sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", "type": "neighbors", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsTransformer.get_params()", "path": "modules/generated/sklearn.neighbors.radiusneighborstransformer#sklearn.neighbors.RadiusNeighborsTransformer.get_params", "type": "neighbors", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsTransformer.radius_neighbors()", "path": "modules/generated/sklearn.neighbors.radiusneighborstransformer#sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", "type": "neighbors", "text": "\nFinds the neighbors within a given radius of a point or points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsTransformer.radius_neighbors_graph()", "path": "modules/generated/sklearn.neighbors.radiusneighborstransformer#sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsTransformer.set_params()", "path": "modules/generated/sklearn.neighbors.radiusneighborstransformer#sklearn.neighbors.RadiusNeighborsTransformer.set_params", "type": "neighbors", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.RadiusNeighborsTransformer.transform()", "path": "modules/generated/sklearn.neighbors.radiusneighborstransformer#sklearn.neighbors.RadiusNeighborsTransformer.transform", "type": "neighbors", "text": "\nComputes the (weighted) graph of Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neighbors.radius_neighbors_graph()", "path": "modules/generated/sklearn.neighbors.radius_neighbors_graph#sklearn.neighbors.radius_neighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.BernoulliRBM", "path": "modules/generated/sklearn.neural_network.bernoullirbm#sklearn.neural_network.BernoulliRBM", "type": "neural_network", "text": "\nBernoulli Restricted Boltzmann Machine (RBM).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.BernoulliRBM()", "path": "modules/generated/sklearn.neural_network.bernoullirbm", "type": "neural_network", "text": "\nBernoulli Restricted Boltzmann Machine (RBM).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.BernoulliRBM.fit()", "path": "modules/generated/sklearn.neural_network.bernoullirbm#sklearn.neural_network.BernoulliRBM.fit", "type": "neural_network", "text": "\nFit the model to the data X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.BernoulliRBM.fit_transform()", "path": "modules/generated/sklearn.neural_network.bernoullirbm#sklearn.neural_network.BernoulliRBM.fit_transform", "type": "neural_network", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.BernoulliRBM.get_params()", "path": "modules/generated/sklearn.neural_network.bernoullirbm#sklearn.neural_network.BernoulliRBM.get_params", "type": "neural_network", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.BernoulliRBM.gibbs()", "path": "modules/generated/sklearn.neural_network.bernoullirbm#sklearn.neural_network.BernoulliRBM.gibbs", "type": "neural_network", "text": "\nPerform one Gibbs sampling step.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.BernoulliRBM.partial_fit()", "path": "modules/generated/sklearn.neural_network.bernoullirbm#sklearn.neural_network.BernoulliRBM.partial_fit", "type": "neural_network", "text": "\nFit the model to the data X which should contain a partial segment of the\ndata.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.BernoulliRBM.score_samples()", "path": "modules/generated/sklearn.neural_network.bernoullirbm#sklearn.neural_network.BernoulliRBM.score_samples", "type": "neural_network", "text": "\nCompute the pseudo-likelihood of X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.BernoulliRBM.set_params()", "path": "modules/generated/sklearn.neural_network.bernoullirbm#sklearn.neural_network.BernoulliRBM.set_params", "type": "neural_network", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.BernoulliRBM.transform()", "path": "modules/generated/sklearn.neural_network.bernoullirbm#sklearn.neural_network.BernoulliRBM.transform", "type": "neural_network", "text": "\nCompute the hidden layer activation probabilities, P(h=1|v=X).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPClassifier", "path": "modules/generated/sklearn.neural_network.mlpclassifier#sklearn.neural_network.MLPClassifier", "type": "neural_network", "text": "\nMulti-layer Perceptron classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPClassifier()", "path": "modules/generated/sklearn.neural_network.mlpclassifier", "type": "neural_network", "text": "\nMulti-layer Perceptron classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPClassifier.fit()", "path": "modules/generated/sklearn.neural_network.mlpclassifier#sklearn.neural_network.MLPClassifier.fit", "type": "neural_network", "text": "\nFit the model to data matrix X and target(s) y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPClassifier.get_params()", "path": "modules/generated/sklearn.neural_network.mlpclassifier#sklearn.neural_network.MLPClassifier.get_params", "type": "neural_network", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPClassifier.partial_fit()", "path": "modules/generated/sklearn.neural_network.mlpclassifier#sklearn.neural_network.MLPClassifier.partial_fit", "type": "neural_network", "text": "\nUpdate the model with a single iteration over the given data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPClassifier.predict()", "path": "modules/generated/sklearn.neural_network.mlpclassifier#sklearn.neural_network.MLPClassifier.predict", "type": "neural_network", "text": "\nPredict using the multi-layer perceptron classifier\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPClassifier.predict_log_proba()", "path": "modules/generated/sklearn.neural_network.mlpclassifier#sklearn.neural_network.MLPClassifier.predict_log_proba", "type": "neural_network", "text": "\nReturn the log of probability estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPClassifier.predict_proba()", "path": "modules/generated/sklearn.neural_network.mlpclassifier#sklearn.neural_network.MLPClassifier.predict_proba", "type": "neural_network", "text": "\nProbability estimates.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPClassifier.score()", "path": "modules/generated/sklearn.neural_network.mlpclassifier#sklearn.neural_network.MLPClassifier.score", "type": "neural_network", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPClassifier.set_params()", "path": "modules/generated/sklearn.neural_network.mlpclassifier#sklearn.neural_network.MLPClassifier.set_params", "type": "neural_network", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPRegressor", "path": "modules/generated/sklearn.neural_network.mlpregressor#sklearn.neural_network.MLPRegressor", "type": "neural_network", "text": "\nMulti-layer Perceptron regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPRegressor()", "path": "modules/generated/sklearn.neural_network.mlpregressor", "type": "neural_network", "text": "\nMulti-layer Perceptron regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPRegressor.fit()", "path": "modules/generated/sklearn.neural_network.mlpregressor#sklearn.neural_network.MLPRegressor.fit", "type": "neural_network", "text": "\nFit the model to data matrix X and target(s) y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPRegressor.get_params()", "path": "modules/generated/sklearn.neural_network.mlpregressor#sklearn.neural_network.MLPRegressor.get_params", "type": "neural_network", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPRegressor.partial_fit()", "path": "modules/generated/sklearn.neural_network.mlpregressor#sklearn.neural_network.MLPRegressor.partial_fit", "type": "neural_network", "text": "\nUpdate the model with a single iteration over the given data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPRegressor.predict()", "path": "modules/generated/sklearn.neural_network.mlpregressor#sklearn.neural_network.MLPRegressor.predict", "type": "neural_network", "text": "\nPredict using the multi-layer perceptron model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPRegressor.score()", "path": "modules/generated/sklearn.neural_network.mlpregressor#sklearn.neural_network.MLPRegressor.score", "type": "neural_network", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "neural_network.MLPRegressor.set_params()", "path": "modules/generated/sklearn.neural_network.mlpregressor#sklearn.neural_network.MLPRegressor.set_params", "type": "neural_network", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.FeatureUnion", "path": "modules/generated/sklearn.pipeline.featureunion#sklearn.pipeline.FeatureUnion", "type": "pipeline", "text": "\nConcatenates results of multiple transformer objects.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.FeatureUnion()", "path": "modules/generated/sklearn.pipeline.featureunion", "type": "pipeline", "text": "\nConcatenates results of multiple transformer objects.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.FeatureUnion.fit()", "path": "modules/generated/sklearn.pipeline.featureunion#sklearn.pipeline.FeatureUnion.fit", "type": "pipeline", "text": "\nFit all transformers using X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.FeatureUnion.fit_transform()", "path": "modules/generated/sklearn.pipeline.featureunion#sklearn.pipeline.FeatureUnion.fit_transform", "type": "pipeline", "text": "\nFit all transformers, transform the data and concatenate results.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.FeatureUnion.get_feature_names()", "path": "modules/generated/sklearn.pipeline.featureunion#sklearn.pipeline.FeatureUnion.get_feature_names", "type": "pipeline", "text": "\nGet feature names from all transformers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.FeatureUnion.get_params()", "path": "modules/generated/sklearn.pipeline.featureunion#sklearn.pipeline.FeatureUnion.get_params", "type": "pipeline", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.FeatureUnion.set_params()", "path": "modules/generated/sklearn.pipeline.featureunion#sklearn.pipeline.FeatureUnion.set_params", "type": "pipeline", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.FeatureUnion.transform()", "path": "modules/generated/sklearn.pipeline.featureunion#sklearn.pipeline.FeatureUnion.transform", "type": "pipeline", "text": "\nTransform X separately by each transformer, concatenate results.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.make_pipeline()", "path": "modules/generated/sklearn.pipeline.make_pipeline#sklearn.pipeline.make_pipeline", "type": "pipeline", "text": "\nConstruct a Pipeline from the given estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.make_union()", "path": "modules/generated/sklearn.pipeline.make_union#sklearn.pipeline.make_union", "type": "pipeline", "text": "\nConstruct a FeatureUnion from the given transformers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline", "type": "pipeline", "text": "\nPipeline of transforms with a final estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline()", "path": "modules/generated/sklearn.pipeline.pipeline", "type": "pipeline", "text": "\nPipeline of transforms with a final estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.decision_function()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.decision_function", "type": "pipeline", "text": "\nApply transforms, and decision_function of the final estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.fit()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.fit", "type": "pipeline", "text": "\nFit the model\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.fit_predict()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.fit_predict", "type": "pipeline", "text": "\nApplies fit_predict of last step in pipeline after transforms.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.fit_transform()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.fit_transform", "type": "pipeline", "text": "\nFit the model and transform with the final estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.get_params()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.get_params", "type": "pipeline", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.inverse_transform()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.inverse_transform", "type": "pipeline", "text": "\nApply inverse transformations in reverse order\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.predict()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.predict", "type": "pipeline", "text": "\nApply transforms to the data, and predict with the final estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.predict_log_proba()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.predict_log_proba", "type": "pipeline", "text": "\nApply transforms, and predict_log_proba of the final estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.predict_proba()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.predict_proba", "type": "pipeline", "text": "\nApply transforms, and predict_proba of the final estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.score()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.score", "type": "pipeline", "text": "\nApply transforms, and score with the final estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.score_samples()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.score_samples", "type": "pipeline", "text": "\nApply transforms, and score_samples of the final estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.set_params()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.set_params", "type": "pipeline", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "pipeline.Pipeline.transform()", "path": "modules/generated/sklearn.pipeline.pipeline#sklearn.pipeline.Pipeline.transform", "type": "pipeline", "text": "\nApply transforms, and transform with the final estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.add_dummy_feature()", "path": "modules/generated/sklearn.preprocessing.add_dummy_feature#sklearn.preprocessing.add_dummy_feature", "type": "preprocessing", "text": "\nAugment dataset with an additional dummy feature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.binarize()", "path": "modules/generated/sklearn.preprocessing.binarize#sklearn.preprocessing.binarize", "type": "preprocessing", "text": "\nBoolean thresholding of array-like or scipy.sparse matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Binarizer", "path": "modules/generated/sklearn.preprocessing.binarizer#sklearn.preprocessing.Binarizer", "type": "preprocessing", "text": "\nBinarize data (set feature values to 0 or 1) according to a threshold.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Binarizer()", "path": "modules/generated/sklearn.preprocessing.binarizer", "type": "preprocessing", "text": "\nBinarize data (set feature values to 0 or 1) according to a threshold.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Binarizer.fit()", "path": "modules/generated/sklearn.preprocessing.binarizer#sklearn.preprocessing.Binarizer.fit", "type": "preprocessing", "text": "\nDo nothing and return the estimator unchanged.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Binarizer.fit_transform()", "path": "modules/generated/sklearn.preprocessing.binarizer#sklearn.preprocessing.Binarizer.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Binarizer.get_params()", "path": "modules/generated/sklearn.preprocessing.binarizer#sklearn.preprocessing.Binarizer.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Binarizer.set_params()", "path": "modules/generated/sklearn.preprocessing.binarizer#sklearn.preprocessing.Binarizer.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Binarizer.transform()", "path": "modules/generated/sklearn.preprocessing.binarizer#sklearn.preprocessing.Binarizer.transform", "type": "preprocessing", "text": "\nBinarize each element of X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.FunctionTransformer", "path": "modules/generated/sklearn.preprocessing.functiontransformer#sklearn.preprocessing.FunctionTransformer", "type": "preprocessing", "text": "\nConstructs a transformer from an arbitrary callable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.FunctionTransformer()", "path": "modules/generated/sklearn.preprocessing.functiontransformer", "type": "preprocessing", "text": "\nConstructs a transformer from an arbitrary callable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.FunctionTransformer.fit()", "path": "modules/generated/sklearn.preprocessing.functiontransformer#sklearn.preprocessing.FunctionTransformer.fit", "type": "preprocessing", "text": "\nFit transformer by checking X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.FunctionTransformer.fit_transform()", "path": "modules/generated/sklearn.preprocessing.functiontransformer#sklearn.preprocessing.FunctionTransformer.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.FunctionTransformer.get_params()", "path": "modules/generated/sklearn.preprocessing.functiontransformer#sklearn.preprocessing.FunctionTransformer.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.FunctionTransformer.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.functiontransformer#sklearn.preprocessing.FunctionTransformer.inverse_transform", "type": "preprocessing", "text": "\nTransform X using the inverse function.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.FunctionTransformer.set_params()", "path": "modules/generated/sklearn.preprocessing.functiontransformer#sklearn.preprocessing.FunctionTransformer.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.FunctionTransformer.transform()", "path": "modules/generated/sklearn.preprocessing.functiontransformer#sklearn.preprocessing.FunctionTransformer.transform", "type": "preprocessing", "text": "\nTransform X using the forward function.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KBinsDiscretizer", "path": "modules/generated/sklearn.preprocessing.kbinsdiscretizer#sklearn.preprocessing.KBinsDiscretizer", "type": "preprocessing", "text": "\nBin continuous data into intervals.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KBinsDiscretizer()", "path": "modules/generated/sklearn.preprocessing.kbinsdiscretizer", "type": "preprocessing", "text": "\nBin continuous data into intervals.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KBinsDiscretizer.fit()", "path": "modules/generated/sklearn.preprocessing.kbinsdiscretizer#sklearn.preprocessing.KBinsDiscretizer.fit", "type": "preprocessing", "text": "\nFit the estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KBinsDiscretizer.fit_transform()", "path": "modules/generated/sklearn.preprocessing.kbinsdiscretizer#sklearn.preprocessing.KBinsDiscretizer.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KBinsDiscretizer.get_params()", "path": "modules/generated/sklearn.preprocessing.kbinsdiscretizer#sklearn.preprocessing.KBinsDiscretizer.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KBinsDiscretizer.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.kbinsdiscretizer#sklearn.preprocessing.KBinsDiscretizer.inverse_transform", "type": "preprocessing", "text": "\nTransform discretized data back to original feature space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KBinsDiscretizer.set_params()", "path": "modules/generated/sklearn.preprocessing.kbinsdiscretizer#sklearn.preprocessing.KBinsDiscretizer.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KBinsDiscretizer.transform()", "path": "modules/generated/sklearn.preprocessing.kbinsdiscretizer#sklearn.preprocessing.KBinsDiscretizer.transform", "type": "preprocessing", "text": "\nDiscretize the data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KernelCenterer", "path": "modules/generated/sklearn.preprocessing.kernelcenterer", "type": "preprocessing", "text": "\nCenter a kernel matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KernelCenterer", "path": "modules/generated/sklearn.preprocessing.kernelcenterer#sklearn.preprocessing.KernelCenterer", "type": "preprocessing", "text": "\nCenter a kernel matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KernelCenterer.fit()", "path": "modules/generated/sklearn.preprocessing.kernelcenterer#sklearn.preprocessing.KernelCenterer.fit", "type": "preprocessing", "text": "\nFit KernelCenterer\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KernelCenterer.fit_transform()", "path": "modules/generated/sklearn.preprocessing.kernelcenterer#sklearn.preprocessing.KernelCenterer.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KernelCenterer.get_params()", "path": "modules/generated/sklearn.preprocessing.kernelcenterer#sklearn.preprocessing.KernelCenterer.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KernelCenterer.set_params()", "path": "modules/generated/sklearn.preprocessing.kernelcenterer#sklearn.preprocessing.KernelCenterer.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.KernelCenterer.transform()", "path": "modules/generated/sklearn.preprocessing.kernelcenterer#sklearn.preprocessing.KernelCenterer.transform", "type": "preprocessing", "text": "\nCenter kernel matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelBinarizer", "path": "modules/generated/sklearn.preprocessing.labelbinarizer#sklearn.preprocessing.LabelBinarizer", "type": "preprocessing", "text": "\nBinarize labels in a one-vs-all fashion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelBinarizer()", "path": "modules/generated/sklearn.preprocessing.labelbinarizer", "type": "preprocessing", "text": "\nBinarize labels in a one-vs-all fashion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelBinarizer.fit()", "path": "modules/generated/sklearn.preprocessing.labelbinarizer#sklearn.preprocessing.LabelBinarizer.fit", "type": "preprocessing", "text": "\nFit label binarizer.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelBinarizer.fit_transform()", "path": "modules/generated/sklearn.preprocessing.labelbinarizer#sklearn.preprocessing.LabelBinarizer.fit_transform", "type": "preprocessing", "text": "\nFit label binarizer and transform multi-class labels to binary labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelBinarizer.get_params()", "path": "modules/generated/sklearn.preprocessing.labelbinarizer#sklearn.preprocessing.LabelBinarizer.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelBinarizer.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.labelbinarizer#sklearn.preprocessing.LabelBinarizer.inverse_transform", "type": "preprocessing", "text": "\nTransform binary labels back to multi-class labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelBinarizer.set_params()", "path": "modules/generated/sklearn.preprocessing.labelbinarizer#sklearn.preprocessing.LabelBinarizer.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelBinarizer.transform()", "path": "modules/generated/sklearn.preprocessing.labelbinarizer#sklearn.preprocessing.LabelBinarizer.transform", "type": "preprocessing", "text": "\nTransform multi-class labels to binary labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelEncoder", "path": "modules/generated/sklearn.preprocessing.labelencoder#sklearn.preprocessing.LabelEncoder", "type": "preprocessing", "text": "\nEncode target labels with value between 0 and n_classes-1.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelEncoder", "path": "modules/generated/sklearn.preprocessing.labelencoder", "type": "preprocessing", "text": "\nEncode target labels with value between 0 and n_classes-1.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelEncoder.fit()", "path": "modules/generated/sklearn.preprocessing.labelencoder#sklearn.preprocessing.LabelEncoder.fit", "type": "preprocessing", "text": "\nFit label encoder.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelEncoder.fit_transform()", "path": "modules/generated/sklearn.preprocessing.labelencoder#sklearn.preprocessing.LabelEncoder.fit_transform", "type": "preprocessing", "text": "\nFit label encoder and return encoded labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelEncoder.get_params()", "path": "modules/generated/sklearn.preprocessing.labelencoder#sklearn.preprocessing.LabelEncoder.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelEncoder.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.labelencoder#sklearn.preprocessing.LabelEncoder.inverse_transform", "type": "preprocessing", "text": "\nTransform labels back to original encoding.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelEncoder.set_params()", "path": "modules/generated/sklearn.preprocessing.labelencoder#sklearn.preprocessing.LabelEncoder.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.LabelEncoder.transform()", "path": "modules/generated/sklearn.preprocessing.labelencoder#sklearn.preprocessing.LabelEncoder.transform", "type": "preprocessing", "text": "\nTransform labels to normalized encoding.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.label_binarize()", "path": "modules/generated/sklearn.preprocessing.label_binarize#sklearn.preprocessing.label_binarize", "type": "preprocessing", "text": "\nBinarize labels in a one-vs-all fashion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MaxAbsScaler", "path": "modules/generated/sklearn.preprocessing.maxabsscaler#sklearn.preprocessing.MaxAbsScaler", "type": "preprocessing", "text": "\nScale each feature by its maximum absolute value.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MaxAbsScaler()", "path": "modules/generated/sklearn.preprocessing.maxabsscaler", "type": "preprocessing", "text": "\nScale each feature by its maximum absolute value.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MaxAbsScaler.fit()", "path": "modules/generated/sklearn.preprocessing.maxabsscaler#sklearn.preprocessing.MaxAbsScaler.fit", "type": "preprocessing", "text": "\nCompute the maximum absolute value to be used for later scaling.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MaxAbsScaler.fit_transform()", "path": "modules/generated/sklearn.preprocessing.maxabsscaler#sklearn.preprocessing.MaxAbsScaler.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MaxAbsScaler.get_params()", "path": "modules/generated/sklearn.preprocessing.maxabsscaler#sklearn.preprocessing.MaxAbsScaler.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MaxAbsScaler.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.maxabsscaler#sklearn.preprocessing.MaxAbsScaler.inverse_transform", "type": "preprocessing", "text": "\nScale back the data to the original representation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MaxAbsScaler.partial_fit()", "path": "modules/generated/sklearn.preprocessing.maxabsscaler#sklearn.preprocessing.MaxAbsScaler.partial_fit", "type": "preprocessing", "text": "\nOnline computation of max absolute value of X for later scaling.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MaxAbsScaler.set_params()", "path": "modules/generated/sklearn.preprocessing.maxabsscaler#sklearn.preprocessing.MaxAbsScaler.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MaxAbsScaler.transform()", "path": "modules/generated/sklearn.preprocessing.maxabsscaler#sklearn.preprocessing.MaxAbsScaler.transform", "type": "preprocessing", "text": "\nScale the data\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.maxabs_scale()", "path": "modules/generated/sklearn.preprocessing.maxabs_scale#sklearn.preprocessing.maxabs_scale", "type": "preprocessing", "text": "\nScale each feature to the [-1, 1] range without breaking the sparsity.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MinMaxScaler", "path": "modules/generated/sklearn.preprocessing.minmaxscaler#sklearn.preprocessing.MinMaxScaler", "type": "preprocessing", "text": "\nTransform features by scaling each feature to a given range.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MinMaxScaler()", "path": "modules/generated/sklearn.preprocessing.minmaxscaler", "type": "preprocessing", "text": "\nTransform features by scaling each feature to a given range.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MinMaxScaler.fit()", "path": "modules/generated/sklearn.preprocessing.minmaxscaler#sklearn.preprocessing.MinMaxScaler.fit", "type": "preprocessing", "text": "\nCompute the minimum and maximum to be used for later scaling.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MinMaxScaler.fit_transform()", "path": "modules/generated/sklearn.preprocessing.minmaxscaler#sklearn.preprocessing.MinMaxScaler.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MinMaxScaler.get_params()", "path": "modules/generated/sklearn.preprocessing.minmaxscaler#sklearn.preprocessing.MinMaxScaler.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MinMaxScaler.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.minmaxscaler#sklearn.preprocessing.MinMaxScaler.inverse_transform", "type": "preprocessing", "text": "\nUndo the scaling of X according to feature_range.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MinMaxScaler.partial_fit()", "path": "modules/generated/sklearn.preprocessing.minmaxscaler#sklearn.preprocessing.MinMaxScaler.partial_fit", "type": "preprocessing", "text": "\nOnline computation of min and max on X for later scaling.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MinMaxScaler.set_params()", "path": "modules/generated/sklearn.preprocessing.minmaxscaler#sklearn.preprocessing.MinMaxScaler.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MinMaxScaler.transform()", "path": "modules/generated/sklearn.preprocessing.minmaxscaler#sklearn.preprocessing.MinMaxScaler.transform", "type": "preprocessing", "text": "\nScale features of X according to feature_range.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.minmax_scale()", "path": "modules/generated/sklearn.preprocessing.minmax_scale#sklearn.preprocessing.minmax_scale", "type": "preprocessing", "text": "\nTransform features by scaling each feature to a given range.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MultiLabelBinarizer", "path": "modules/generated/sklearn.preprocessing.multilabelbinarizer#sklearn.preprocessing.MultiLabelBinarizer", "type": "preprocessing", "text": "\nTransform between iterable of iterables and a multilabel format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MultiLabelBinarizer()", "path": "modules/generated/sklearn.preprocessing.multilabelbinarizer", "type": "preprocessing", "text": "\nTransform between iterable of iterables and a multilabel format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MultiLabelBinarizer.fit()", "path": "modules/generated/sklearn.preprocessing.multilabelbinarizer#sklearn.preprocessing.MultiLabelBinarizer.fit", "type": "preprocessing", "text": "\nFit the label sets binarizer, storing classes_.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MultiLabelBinarizer.fit_transform()", "path": "modules/generated/sklearn.preprocessing.multilabelbinarizer#sklearn.preprocessing.MultiLabelBinarizer.fit_transform", "type": "preprocessing", "text": "\nFit the label sets binarizer and transform the given label sets.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MultiLabelBinarizer.get_params()", "path": "modules/generated/sklearn.preprocessing.multilabelbinarizer#sklearn.preprocessing.MultiLabelBinarizer.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MultiLabelBinarizer.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.multilabelbinarizer#sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", "type": "preprocessing", "text": "\nTransform the given indicator matrix into label sets.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MultiLabelBinarizer.set_params()", "path": "modules/generated/sklearn.preprocessing.multilabelbinarizer#sklearn.preprocessing.MultiLabelBinarizer.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.MultiLabelBinarizer.transform()", "path": "modules/generated/sklearn.preprocessing.multilabelbinarizer#sklearn.preprocessing.MultiLabelBinarizer.transform", "type": "preprocessing", "text": "\nTransform the given label sets.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.normalize()", "path": "modules/generated/sklearn.preprocessing.normalize#sklearn.preprocessing.normalize", "type": "preprocessing", "text": "\nScale input vectors individually to unit norm (vector length).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Normalizer", "path": "modules/generated/sklearn.preprocessing.normalizer#sklearn.preprocessing.Normalizer", "type": "preprocessing", "text": "\nNormalize samples individually to unit norm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Normalizer()", "path": "modules/generated/sklearn.preprocessing.normalizer", "type": "preprocessing", "text": "\nNormalize samples individually to unit norm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Normalizer.fit()", "path": "modules/generated/sklearn.preprocessing.normalizer#sklearn.preprocessing.Normalizer.fit", "type": "preprocessing", "text": "\nDo nothing and return the estimator unchanged\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Normalizer.fit_transform()", "path": "modules/generated/sklearn.preprocessing.normalizer#sklearn.preprocessing.Normalizer.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Normalizer.get_params()", "path": "modules/generated/sklearn.preprocessing.normalizer#sklearn.preprocessing.Normalizer.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Normalizer.set_params()", "path": "modules/generated/sklearn.preprocessing.normalizer#sklearn.preprocessing.Normalizer.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.Normalizer.transform()", "path": "modules/generated/sklearn.preprocessing.normalizer#sklearn.preprocessing.Normalizer.transform", "type": "preprocessing", "text": "\nScale each non zero row of X to unit norm\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OneHotEncoder", "path": "modules/generated/sklearn.preprocessing.onehotencoder#sklearn.preprocessing.OneHotEncoder", "type": "preprocessing", "text": "\nEncode categorical features as a one-hot numeric array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OneHotEncoder()", "path": "modules/generated/sklearn.preprocessing.onehotencoder", "type": "preprocessing", "text": "\nEncode categorical features as a one-hot numeric array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OneHotEncoder.fit()", "path": "modules/generated/sklearn.preprocessing.onehotencoder#sklearn.preprocessing.OneHotEncoder.fit", "type": "preprocessing", "text": "\nFit OneHotEncoder to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OneHotEncoder.fit_transform()", "path": "modules/generated/sklearn.preprocessing.onehotencoder#sklearn.preprocessing.OneHotEncoder.fit_transform", "type": "preprocessing", "text": "\nFit OneHotEncoder to X, then transform X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OneHotEncoder.get_feature_names()", "path": "modules/generated/sklearn.preprocessing.onehotencoder#sklearn.preprocessing.OneHotEncoder.get_feature_names", "type": "preprocessing", "text": "\nReturn feature names for output features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OneHotEncoder.get_params()", "path": "modules/generated/sklearn.preprocessing.onehotencoder#sklearn.preprocessing.OneHotEncoder.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OneHotEncoder.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.onehotencoder#sklearn.preprocessing.OneHotEncoder.inverse_transform", "type": "preprocessing", "text": "\nConvert the data back to the original representation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OneHotEncoder.set_params()", "path": "modules/generated/sklearn.preprocessing.onehotencoder#sklearn.preprocessing.OneHotEncoder.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OneHotEncoder.transform()", "path": "modules/generated/sklearn.preprocessing.onehotencoder#sklearn.preprocessing.OneHotEncoder.transform", "type": "preprocessing", "text": "\nTransform X using one-hot encoding.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OrdinalEncoder", "path": "modules/generated/sklearn.preprocessing.ordinalencoder#sklearn.preprocessing.OrdinalEncoder", "type": "preprocessing", "text": "\nEncode categorical features as an integer array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OrdinalEncoder()", "path": "modules/generated/sklearn.preprocessing.ordinalencoder", "type": "preprocessing", "text": "\nEncode categorical features as an integer array.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OrdinalEncoder.fit()", "path": "modules/generated/sklearn.preprocessing.ordinalencoder#sklearn.preprocessing.OrdinalEncoder.fit", "type": "preprocessing", "text": "\nFit the OrdinalEncoder to X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OrdinalEncoder.fit_transform()", "path": "modules/generated/sklearn.preprocessing.ordinalencoder#sklearn.preprocessing.OrdinalEncoder.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OrdinalEncoder.get_params()", "path": "modules/generated/sklearn.preprocessing.ordinalencoder#sklearn.preprocessing.OrdinalEncoder.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OrdinalEncoder.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.ordinalencoder#sklearn.preprocessing.OrdinalEncoder.inverse_transform", "type": "preprocessing", "text": "\nConvert the data back to the original representation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OrdinalEncoder.set_params()", "path": "modules/generated/sklearn.preprocessing.ordinalencoder#sklearn.preprocessing.OrdinalEncoder.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.OrdinalEncoder.transform()", "path": "modules/generated/sklearn.preprocessing.ordinalencoder#sklearn.preprocessing.OrdinalEncoder.transform", "type": "preprocessing", "text": "\nTransform X to ordinal codes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PolynomialFeatures", "path": "modules/generated/sklearn.preprocessing.polynomialfeatures#sklearn.preprocessing.PolynomialFeatures", "type": "preprocessing", "text": "\nGenerate polynomial and interaction features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PolynomialFeatures()", "path": "modules/generated/sklearn.preprocessing.polynomialfeatures", "type": "preprocessing", "text": "\nGenerate polynomial and interaction features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PolynomialFeatures.fit()", "path": "modules/generated/sklearn.preprocessing.polynomialfeatures#sklearn.preprocessing.PolynomialFeatures.fit", "type": "preprocessing", "text": "\nCompute number of output features.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PolynomialFeatures.fit_transform()", "path": "modules/generated/sklearn.preprocessing.polynomialfeatures#sklearn.preprocessing.PolynomialFeatures.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PolynomialFeatures.get_feature_names()", "path": "modules/generated/sklearn.preprocessing.polynomialfeatures#sklearn.preprocessing.PolynomialFeatures.get_feature_names", "type": "preprocessing", "text": "\nReturn feature names for output features\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PolynomialFeatures.get_params()", "path": "modules/generated/sklearn.preprocessing.polynomialfeatures#sklearn.preprocessing.PolynomialFeatures.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PolynomialFeatures.set_params()", "path": "modules/generated/sklearn.preprocessing.polynomialfeatures#sklearn.preprocessing.PolynomialFeatures.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PolynomialFeatures.transform()", "path": "modules/generated/sklearn.preprocessing.polynomialfeatures#sklearn.preprocessing.PolynomialFeatures.transform", "type": "preprocessing", "text": "\nTransform data to polynomial features\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PowerTransformer", "path": "modules/generated/sklearn.preprocessing.powertransformer#sklearn.preprocessing.PowerTransformer", "type": "preprocessing", "text": "\nApply a power transform featurewise to make data more Gaussian-like.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PowerTransformer()", "path": "modules/generated/sklearn.preprocessing.powertransformer", "type": "preprocessing", "text": "\nApply a power transform featurewise to make data more Gaussian-like.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PowerTransformer.fit()", "path": "modules/generated/sklearn.preprocessing.powertransformer#sklearn.preprocessing.PowerTransformer.fit", "type": "preprocessing", "text": "\nEstimate the optimal parameter lambda for each feature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PowerTransformer.fit_transform()", "path": "modules/generated/sklearn.preprocessing.powertransformer#sklearn.preprocessing.PowerTransformer.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PowerTransformer.get_params()", "path": "modules/generated/sklearn.preprocessing.powertransformer#sklearn.preprocessing.PowerTransformer.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PowerTransformer.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.powertransformer#sklearn.preprocessing.PowerTransformer.inverse_transform", "type": "preprocessing", "text": "\nApply the inverse power transformation using the fitted lambdas.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PowerTransformer.set_params()", "path": "modules/generated/sklearn.preprocessing.powertransformer#sklearn.preprocessing.PowerTransformer.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.PowerTransformer.transform()", "path": "modules/generated/sklearn.preprocessing.powertransformer#sklearn.preprocessing.PowerTransformer.transform", "type": "preprocessing", "text": "\nApply the power transform to each feature using the fitted lambdas.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.power_transform()", "path": "modules/generated/sklearn.preprocessing.power_transform#sklearn.preprocessing.power_transform", "type": "preprocessing", "text": "\nPower transforms are a family of parametric, monotonic transformations that\nare applied to make data more Gaussian-like. This is useful for modeling\nissues related to heteroscedasticity (non-constant variance), or other\nsituations where normality is desired.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.QuantileTransformer", "path": "modules/generated/sklearn.preprocessing.quantiletransformer#sklearn.preprocessing.QuantileTransformer", "type": "preprocessing", "text": "\nTransform features using quantiles information.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.QuantileTransformer()", "path": "modules/generated/sklearn.preprocessing.quantiletransformer", "type": "preprocessing", "text": "\nTransform features using quantiles information.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.QuantileTransformer.fit()", "path": "modules/generated/sklearn.preprocessing.quantiletransformer#sklearn.preprocessing.QuantileTransformer.fit", "type": "preprocessing", "text": "\nCompute the quantiles used for transforming.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.QuantileTransformer.fit_transform()", "path": "modules/generated/sklearn.preprocessing.quantiletransformer#sklearn.preprocessing.QuantileTransformer.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.QuantileTransformer.get_params()", "path": "modules/generated/sklearn.preprocessing.quantiletransformer#sklearn.preprocessing.QuantileTransformer.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.QuantileTransformer.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.quantiletransformer#sklearn.preprocessing.QuantileTransformer.inverse_transform", "type": "preprocessing", "text": "\nBack-projection to the original space.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.QuantileTransformer.set_params()", "path": "modules/generated/sklearn.preprocessing.quantiletransformer#sklearn.preprocessing.QuantileTransformer.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.QuantileTransformer.transform()", "path": "modules/generated/sklearn.preprocessing.quantiletransformer#sklearn.preprocessing.QuantileTransformer.transform", "type": "preprocessing", "text": "\nFeature-wise transformation of the data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.quantile_transform()", "path": "modules/generated/sklearn.preprocessing.quantile_transform#sklearn.preprocessing.quantile_transform", "type": "preprocessing", "text": "\nTransform features using quantiles information.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.RobustScaler", "path": "modules/generated/sklearn.preprocessing.robustscaler#sklearn.preprocessing.RobustScaler", "type": "preprocessing", "text": "\nScale features using statistics that are robust to outliers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.RobustScaler()", "path": "modules/generated/sklearn.preprocessing.robustscaler", "type": "preprocessing", "text": "\nScale features using statistics that are robust to outliers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.RobustScaler.fit()", "path": "modules/generated/sklearn.preprocessing.robustscaler#sklearn.preprocessing.RobustScaler.fit", "type": "preprocessing", "text": "\nCompute the median and quantiles to be used for scaling.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.RobustScaler.fit_transform()", "path": "modules/generated/sklearn.preprocessing.robustscaler#sklearn.preprocessing.RobustScaler.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.RobustScaler.get_params()", "path": "modules/generated/sklearn.preprocessing.robustscaler#sklearn.preprocessing.RobustScaler.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.RobustScaler.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.robustscaler#sklearn.preprocessing.RobustScaler.inverse_transform", "type": "preprocessing", "text": "\nScale back the data to the original representation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.RobustScaler.set_params()", "path": "modules/generated/sklearn.preprocessing.robustscaler#sklearn.preprocessing.RobustScaler.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.RobustScaler.transform()", "path": "modules/generated/sklearn.preprocessing.robustscaler#sklearn.preprocessing.RobustScaler.transform", "type": "preprocessing", "text": "\nCenter and scale the data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.robust_scale()", "path": "modules/generated/sklearn.preprocessing.robust_scale#sklearn.preprocessing.robust_scale", "type": "preprocessing", "text": "\nStandardize a dataset along any axis\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.scale()", "path": "modules/generated/sklearn.preprocessing.scale#sklearn.preprocessing.scale", "type": "preprocessing", "text": "\nStandardize a dataset along any axis.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.StandardScaler", "path": "modules/generated/sklearn.preprocessing.standardscaler#sklearn.preprocessing.StandardScaler", "type": "preprocessing", "text": "\nStandardize features by removing the mean and scaling to unit variance\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.StandardScaler()", "path": "modules/generated/sklearn.preprocessing.standardscaler", "type": "preprocessing", "text": "\nStandardize features by removing the mean and scaling to unit variance\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.StandardScaler.fit()", "path": "modules/generated/sklearn.preprocessing.standardscaler#sklearn.preprocessing.StandardScaler.fit", "type": "preprocessing", "text": "\nCompute the mean and std to be used for later scaling.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.StandardScaler.fit_transform()", "path": "modules/generated/sklearn.preprocessing.standardscaler#sklearn.preprocessing.StandardScaler.fit_transform", "type": "preprocessing", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.StandardScaler.get_params()", "path": "modules/generated/sklearn.preprocessing.standardscaler#sklearn.preprocessing.StandardScaler.get_params", "type": "preprocessing", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.StandardScaler.inverse_transform()", "path": "modules/generated/sklearn.preprocessing.standardscaler#sklearn.preprocessing.StandardScaler.inverse_transform", "type": "preprocessing", "text": "\nScale back the data to the original representation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.StandardScaler.partial_fit()", "path": "modules/generated/sklearn.preprocessing.standardscaler#sklearn.preprocessing.StandardScaler.partial_fit", "type": "preprocessing", "text": "\nOnline computation of mean and std on X for later scaling.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.StandardScaler.set_params()", "path": "modules/generated/sklearn.preprocessing.standardscaler#sklearn.preprocessing.StandardScaler.set_params", "type": "preprocessing", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "preprocessing.StandardScaler.transform()", "path": "modules/generated/sklearn.preprocessing.standardscaler#sklearn.preprocessing.StandardScaler.transform", "type": "preprocessing", "text": "\nPerform standardization by centering and scaling\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.GaussianRandomProjection", "path": "modules/generated/sklearn.random_projection.gaussianrandomprojection#sklearn.random_projection.GaussianRandomProjection", "type": "random_projection", "text": "\nReduce dimensionality through Gaussian random projection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.GaussianRandomProjection()", "path": "modules/generated/sklearn.random_projection.gaussianrandomprojection", "type": "random_projection", "text": "\nReduce dimensionality through Gaussian random projection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.GaussianRandomProjection.fit()", "path": "modules/generated/sklearn.random_projection.gaussianrandomprojection#sklearn.random_projection.GaussianRandomProjection.fit", "type": "random_projection", "text": "\nGenerate a sparse random projection matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.GaussianRandomProjection.fit_transform()", "path": "modules/generated/sklearn.random_projection.gaussianrandomprojection#sklearn.random_projection.GaussianRandomProjection.fit_transform", "type": "random_projection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.GaussianRandomProjection.get_params()", "path": "modules/generated/sklearn.random_projection.gaussianrandomprojection#sklearn.random_projection.GaussianRandomProjection.get_params", "type": "random_projection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.GaussianRandomProjection.set_params()", "path": "modules/generated/sklearn.random_projection.gaussianrandomprojection#sklearn.random_projection.GaussianRandomProjection.set_params", "type": "random_projection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.GaussianRandomProjection.transform()", "path": "modules/generated/sklearn.random_projection.gaussianrandomprojection#sklearn.random_projection.GaussianRandomProjection.transform", "type": "random_projection", "text": "\nProject the data by using matrix product with the random matrix\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.johnson_lindenstrauss_min_dim()", "path": "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim#sklearn.random_projection.johnson_lindenstrauss_min_dim", "type": "random_projection", "text": "\nFind a \u2018safe\u2019 number of components to randomly project to.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.SparseRandomProjection", "path": "modules/generated/sklearn.random_projection.sparserandomprojection#sklearn.random_projection.SparseRandomProjection", "type": "random_projection", "text": "\nReduce dimensionality through sparse random projection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.SparseRandomProjection()", "path": "modules/generated/sklearn.random_projection.sparserandomprojection", "type": "random_projection", "text": "\nReduce dimensionality through sparse random projection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.SparseRandomProjection.fit()", "path": "modules/generated/sklearn.random_projection.sparserandomprojection#sklearn.random_projection.SparseRandomProjection.fit", "type": "random_projection", "text": "\nGenerate a sparse random projection matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.SparseRandomProjection.fit_transform()", "path": "modules/generated/sklearn.random_projection.sparserandomprojection#sklearn.random_projection.SparseRandomProjection.fit_transform", "type": "random_projection", "text": "\nFit to data, then transform it.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.SparseRandomProjection.get_params()", "path": "modules/generated/sklearn.random_projection.sparserandomprojection#sklearn.random_projection.SparseRandomProjection.get_params", "type": "random_projection", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.SparseRandomProjection.set_params()", "path": "modules/generated/sklearn.random_projection.sparserandomprojection#sklearn.random_projection.SparseRandomProjection.set_params", "type": "random_projection", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "random_projection.SparseRandomProjection.transform()", "path": "modules/generated/sklearn.random_projection.sparserandomprojection#sklearn.random_projection.SparseRandomProjection.transform", "type": "random_projection", "text": "\nProject the data by using matrix product with the random matrix\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelPropagation", "path": "modules/generated/sklearn.semi_supervised.labelpropagation#sklearn.semi_supervised.LabelPropagation", "type": "semi_supervised", "text": "\nLabel Propagation classifier\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelPropagation()", "path": "modules/generated/sklearn.semi_supervised.labelpropagation", "type": "semi_supervised", "text": "\nLabel Propagation classifier\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelPropagation.fit()", "path": "modules/generated/sklearn.semi_supervised.labelpropagation#sklearn.semi_supervised.LabelPropagation.fit", "type": "semi_supervised", "text": "\nFit a semi-supervised label propagation model based\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelPropagation.get_params()", "path": "modules/generated/sklearn.semi_supervised.labelpropagation#sklearn.semi_supervised.LabelPropagation.get_params", "type": "semi_supervised", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelPropagation.predict()", "path": "modules/generated/sklearn.semi_supervised.labelpropagation#sklearn.semi_supervised.LabelPropagation.predict", "type": "semi_supervised", "text": "\nPerforms inductive inference across the model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelPropagation.predict_proba()", "path": "modules/generated/sklearn.semi_supervised.labelpropagation#sklearn.semi_supervised.LabelPropagation.predict_proba", "type": "semi_supervised", "text": "\nPredict probability for each possible outcome.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelPropagation.score()", "path": "modules/generated/sklearn.semi_supervised.labelpropagation#sklearn.semi_supervised.LabelPropagation.score", "type": "semi_supervised", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelPropagation.set_params()", "path": "modules/generated/sklearn.semi_supervised.labelpropagation#sklearn.semi_supervised.LabelPropagation.set_params", "type": "semi_supervised", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelSpreading", "path": "modules/generated/sklearn.semi_supervised.labelspreading#sklearn.semi_supervised.LabelSpreading", "type": "semi_supervised", "text": "\nLabelSpreading model for semi-supervised learning\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelSpreading()", "path": "modules/generated/sklearn.semi_supervised.labelspreading", "type": "semi_supervised", "text": "\nLabelSpreading model for semi-supervised learning\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelSpreading.fit()", "path": "modules/generated/sklearn.semi_supervised.labelspreading#sklearn.semi_supervised.LabelSpreading.fit", "type": "semi_supervised", "text": "\nFit a semi-supervised label propagation model based\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelSpreading.get_params()", "path": "modules/generated/sklearn.semi_supervised.labelspreading#sklearn.semi_supervised.LabelSpreading.get_params", "type": "semi_supervised", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelSpreading.predict()", "path": "modules/generated/sklearn.semi_supervised.labelspreading#sklearn.semi_supervised.LabelSpreading.predict", "type": "semi_supervised", "text": "\nPerforms inductive inference across the model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelSpreading.predict_proba()", "path": "modules/generated/sklearn.semi_supervised.labelspreading#sklearn.semi_supervised.LabelSpreading.predict_proba", "type": "semi_supervised", "text": "\nPredict probability for each possible outcome.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelSpreading.score()", "path": "modules/generated/sklearn.semi_supervised.labelspreading#sklearn.semi_supervised.LabelSpreading.score", "type": "semi_supervised", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.LabelSpreading.set_params()", "path": "modules/generated/sklearn.semi_supervised.labelspreading#sklearn.semi_supervised.LabelSpreading.set_params", "type": "semi_supervised", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.SelfTrainingClassifier", "path": "modules/generated/sklearn.semi_supervised.selftrainingclassifier#sklearn.semi_supervised.SelfTrainingClassifier", "type": "semi_supervised", "text": "\nSelf-training classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.SelfTrainingClassifier()", "path": "modules/generated/sklearn.semi_supervised.selftrainingclassifier", "type": "semi_supervised", "text": "\nSelf-training classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.SelfTrainingClassifier.decision_function()", "path": "modules/generated/sklearn.semi_supervised.selftrainingclassifier#sklearn.semi_supervised.SelfTrainingClassifier.decision_function", "type": "semi_supervised", "text": "\nCalls decision function of the `base_estimator`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.SelfTrainingClassifier.fit()", "path": "modules/generated/sklearn.semi_supervised.selftrainingclassifier#sklearn.semi_supervised.SelfTrainingClassifier.fit", "type": "semi_supervised", "text": "\nFits this `SelfTrainingClassifier` to a dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.SelfTrainingClassifier.get_params()", "path": "modules/generated/sklearn.semi_supervised.selftrainingclassifier#sklearn.semi_supervised.SelfTrainingClassifier.get_params", "type": "semi_supervised", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.SelfTrainingClassifier.predict()", "path": "modules/generated/sklearn.semi_supervised.selftrainingclassifier#sklearn.semi_supervised.SelfTrainingClassifier.predict", "type": "semi_supervised", "text": "\nPredict the classes of X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.SelfTrainingClassifier.predict_log_proba()", "path": "modules/generated/sklearn.semi_supervised.selftrainingclassifier#sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", "type": "semi_supervised", "text": "\nPredict log probability for each possible outcome.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.SelfTrainingClassifier.predict_proba()", "path": "modules/generated/sklearn.semi_supervised.selftrainingclassifier#sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", "type": "semi_supervised", "text": "\nPredict probability for each possible outcome.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.SelfTrainingClassifier.score()", "path": "modules/generated/sklearn.semi_supervised.selftrainingclassifier#sklearn.semi_supervised.SelfTrainingClassifier.score", "type": "semi_supervised", "text": "\nCalls score on the `base_estimator`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "semi_supervised.SelfTrainingClassifier.set_params()", "path": "modules/generated/sklearn.semi_supervised.selftrainingclassifier#sklearn.semi_supervised.SelfTrainingClassifier.set_params", "type": "semi_supervised", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "set_config()", "path": "modules/generated/sklearn.set_config#sklearn.set_config", "type": "sklearn", "text": "\nSet global scikit-learn configuration\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "show_versions()", "path": "modules/generated/sklearn.show_versions#sklearn.show_versions", "type": "sklearn", "text": "\nPrint useful debugging information\u201d\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.base.clone()", "path": "modules/generated/sklearn.base.clone", "type": "base", "text": "\nConstructs a new unfitted estimator with the same parameters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.base.is_classifier()", "path": "modules/generated/sklearn.base.is_classifier", "type": "base", "text": "\nReturn True if the given estimator is (probably) a classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.base.is_regressor()", "path": "modules/generated/sklearn.base.is_regressor", "type": "base", "text": "\nReturn True if the given estimator is (probably) a regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.calibration.calibration_curve()", "path": "modules/generated/sklearn.calibration.calibration_curve", "type": "calibration", "text": "\nCompute true and predicted probabilities for a calibration curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.affinity_propagation()", "path": "modules/generated/sklearn.cluster.affinity_propagation", "type": "cluster", "text": "\nPerform Affinity Propagation Clustering of data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.cluster_optics_dbscan()", "path": "modules/generated/sklearn.cluster.cluster_optics_dbscan", "type": "cluster", "text": "\nPerforms DBSCAN extraction for an arbitrary epsilon.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.cluster_optics_xi()", "path": "modules/generated/sklearn.cluster.cluster_optics_xi", "type": "cluster", "text": "\nAutomatically extract clusters according to the Xi-steep method.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.compute_optics_graph()", "path": "modules/generated/sklearn.cluster.compute_optics_graph", "type": "cluster", "text": "\nComputes the OPTICS reachability graph.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.dbscan()", "path": "modules/generated/dbscan-function", "type": "cluster", "text": "\nPerform DBSCAN clustering from vector array or distance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.estimate_bandwidth()", "path": "modules/generated/sklearn.cluster.estimate_bandwidth", "type": "cluster", "text": "\nEstimate the bandwidth to use with the mean-shift algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.kmeans_plusplus()", "path": "modules/generated/sklearn.cluster.kmeans_plusplus", "type": "cluster", "text": "\nInit n_clusters seeds according to k-means++\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.k_means()", "path": "modules/generated/sklearn.cluster.k_means", "type": "cluster", "text": "\nK-means clustering algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.mean_shift()", "path": "modules/generated/sklearn.cluster.mean_shift", "type": "cluster", "text": "\nPerform mean shift clustering of data using a flat kernel.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.spectral_clustering()", "path": "modules/generated/sklearn.cluster.spectral_clustering", "type": "cluster", "text": "\nApply clustering to a projection of the normalized Laplacian.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.cluster.ward_tree()", "path": "modules/generated/sklearn.cluster.ward_tree", "type": "cluster", "text": "\nWard clustering based on a Feature matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.compose.make_column_selector()", "path": "modules/generated/sklearn.compose.make_column_selector", "type": "compose", "text": "\nCreate a callable to select columns to be used with `ColumnTransformer`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.compose.make_column_transformer()", "path": "modules/generated/sklearn.compose.make_column_transformer", "type": "compose", "text": "\nConstruct a ColumnTransformer from the given transformers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.config_context()", "path": "modules/generated/sklearn.config_context", "type": "sklearn", "text": "\nContext manager for global scikit-learn configuration\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.covariance.empirical_covariance()", "path": "modules/generated/sklearn.covariance.empirical_covariance", "type": "covariance", "text": "\nComputes the Maximum likelihood covariance estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.covariance.graphical_lasso()", "path": "modules/generated/sklearn.covariance.graphical_lasso", "type": "covariance", "text": "\nl1-penalized covariance estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.covariance.ledoit_wolf()", "path": "modules/generated/sklearn.covariance.ledoit_wolf", "type": "covariance", "text": "\nEstimates the shrunk Ledoit-Wolf covariance matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.covariance.oas()", "path": "modules/generated/oas-function", "type": "covariance", "text": "\nEstimate covariance with the Oracle Approximating Shrinkage algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.covariance.shrunk_covariance()", "path": "modules/generated/sklearn.covariance.shrunk_covariance", "type": "covariance", "text": "\nCalculates a covariance matrix shrunk on the diagonal\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.clear_data_home()", "path": "modules/generated/sklearn.datasets.clear_data_home", "type": "datasets", "text": "\nDelete all the content of the data home cache.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.dump_svmlight_file()", "path": "modules/generated/sklearn.datasets.dump_svmlight_file", "type": "datasets", "text": "\nDump the dataset in svmlight / libsvm file format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_20newsgroups()", "path": "modules/generated/sklearn.datasets.fetch_20newsgroups", "type": "datasets", "text": "\nLoad the filenames and data from the 20 newsgroups dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_20newsgroups_vectorized()", "path": "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "type": "datasets", "text": "\nLoad and vectorize the 20 newsgroups dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_california_housing()", "path": "modules/generated/sklearn.datasets.fetch_california_housing", "type": "datasets", "text": "\nLoad the California housing dataset (regression).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_covtype()", "path": "modules/generated/sklearn.datasets.fetch_covtype", "type": "datasets", "text": "\nLoad the covertype dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_kddcup99()", "path": "modules/generated/sklearn.datasets.fetch_kddcup99", "type": "datasets", "text": "\nLoad the kddcup99 dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_lfw_pairs()", "path": "modules/generated/sklearn.datasets.fetch_lfw_pairs", "type": "datasets", "text": "\nLoad the Labeled Faces in the Wild (LFW) pairs dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_lfw_people()", "path": "modules/generated/sklearn.datasets.fetch_lfw_people", "type": "datasets", "text": "\nLoad the Labeled Faces in the Wild (LFW) people dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_olivetti_faces()", "path": "modules/generated/sklearn.datasets.fetch_olivetti_faces", "type": "datasets", "text": "\nLoad the Olivetti faces data-set from AT&T (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_openml()", "path": "modules/generated/sklearn.datasets.fetch_openml", "type": "datasets", "text": "\nFetch dataset from openml by name or dataset id.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_rcv1()", "path": "modules/generated/sklearn.datasets.fetch_rcv1", "type": "datasets", "text": "\nLoad the RCV1 multilabel dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.fetch_species_distributions()", "path": "modules/generated/sklearn.datasets.fetch_species_distributions", "type": "datasets", "text": "\nLoader for species distribution dataset from Phillips et. al. (2006)\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.get_data_home()", "path": "modules/generated/sklearn.datasets.get_data_home", "type": "datasets", "text": "\nReturn the path of the scikit-learn data dir.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_boston()", "path": "modules/generated/sklearn.datasets.load_boston", "type": "datasets", "text": "\nLoad and return the boston house-prices dataset (regression).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_breast_cancer()", "path": "modules/generated/sklearn.datasets.load_breast_cancer", "type": "datasets", "text": "\nLoad and return the breast cancer wisconsin dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_diabetes()", "path": "modules/generated/sklearn.datasets.load_diabetes", "type": "datasets", "text": "\nLoad and return the diabetes dataset (regression).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_digits()", "path": "modules/generated/sklearn.datasets.load_digits", "type": "datasets", "text": "\nLoad and return the digits dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_files()", "path": "modules/generated/sklearn.datasets.load_files", "type": "datasets", "text": "\nLoad text files with categories as subfolder names.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_iris()", "path": "modules/generated/sklearn.datasets.load_iris", "type": "datasets", "text": "\nLoad and return the iris dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_linnerud()", "path": "modules/generated/sklearn.datasets.load_linnerud", "type": "datasets", "text": "\nLoad and return the physical excercise linnerud dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_sample_image()", "path": "modules/generated/sklearn.datasets.load_sample_image", "type": "datasets", "text": "\nLoad the numpy array of a single sample image\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_sample_images()", "path": "modules/generated/sklearn.datasets.load_sample_images", "type": "datasets", "text": "\nLoad sample images for image manipulation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_svmlight_file()", "path": "modules/generated/sklearn.datasets.load_svmlight_file", "type": "datasets", "text": "\nLoad datasets in the svmlight / libsvm format into sparse CSR matrix\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_svmlight_files()", "path": "modules/generated/sklearn.datasets.load_svmlight_files", "type": "datasets", "text": "\nLoad dataset from multiple files in SVMlight format\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.load_wine()", "path": "modules/generated/sklearn.datasets.load_wine", "type": "datasets", "text": "\nLoad and return the wine dataset (classification).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_biclusters()", "path": "modules/generated/sklearn.datasets.make_biclusters", "type": "datasets", "text": "\nGenerate an array with constant block diagonal structure for biclustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_blobs()", "path": "modules/generated/sklearn.datasets.make_blobs", "type": "datasets", "text": "\nGenerate isotropic Gaussian blobs for clustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_checkerboard()", "path": "modules/generated/sklearn.datasets.make_checkerboard", "type": "datasets", "text": "\nGenerate an array with block checkerboard structure for biclustering.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_circles()", "path": "modules/generated/sklearn.datasets.make_circles", "type": "datasets", "text": "\nMake a large circle containing a smaller circle in 2d.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_classification()", "path": "modules/generated/sklearn.datasets.make_classification", "type": "datasets", "text": "\nGenerate a random n-class classification problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_friedman1()", "path": "modules/generated/sklearn.datasets.make_friedman1", "type": "datasets", "text": "\nGenerate the \u201cFriedman #1\u201d regression problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_friedman2()", "path": "modules/generated/sklearn.datasets.make_friedman2", "type": "datasets", "text": "\nGenerate the \u201cFriedman #2\u201d regression problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_friedman3()", "path": "modules/generated/sklearn.datasets.make_friedman3", "type": "datasets", "text": "\nGenerate the \u201cFriedman #3\u201d regression problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_gaussian_quantiles()", "path": "modules/generated/sklearn.datasets.make_gaussian_quantiles", "type": "datasets", "text": "\nGenerate isotropic Gaussian and label samples by quantile.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_hastie_10_2()", "path": "modules/generated/sklearn.datasets.make_hastie_10_2", "type": "datasets", "text": "\nGenerates data for binary classification used in Hastie et al. 2009, Example\n10.2.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_low_rank_matrix()", "path": "modules/generated/sklearn.datasets.make_low_rank_matrix", "type": "datasets", "text": "\nGenerate a mostly low rank matrix with bell-shaped singular values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_moons()", "path": "modules/generated/sklearn.datasets.make_moons", "type": "datasets", "text": "\nMake two interleaving half circles.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_multilabel_classification()", "path": "modules/generated/sklearn.datasets.make_multilabel_classification", "type": "datasets", "text": "\nGenerate a random multilabel classification problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_regression()", "path": "modules/generated/sklearn.datasets.make_regression", "type": "datasets", "text": "\nGenerate a random regression problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_sparse_coded_signal()", "path": "modules/generated/sklearn.datasets.make_sparse_coded_signal", "type": "datasets", "text": "\nGenerate a signal as a sparse combination of dictionary elements.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_sparse_spd_matrix()", "path": "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "type": "datasets", "text": "\nGenerate a sparse symmetric definite positive matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_sparse_uncorrelated()", "path": "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "type": "datasets", "text": "\nGenerate a random regression problem with sparse uncorrelated design.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_spd_matrix()", "path": "modules/generated/sklearn.datasets.make_spd_matrix", "type": "datasets", "text": "\nGenerate a random symmetric, positive-definite matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_swiss_roll()", "path": "modules/generated/sklearn.datasets.make_swiss_roll", "type": "datasets", "text": "\nGenerate a swiss roll dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.datasets.make_s_curve()", "path": "modules/generated/sklearn.datasets.make_s_curve", "type": "datasets", "text": "\nGenerate an S curve dataset.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.decomposition.dict_learning()", "path": "modules/generated/sklearn.decomposition.dict_learning", "type": "decomposition", "text": "\nSolves a dictionary learning matrix factorization problem.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.decomposition.dict_learning_online()", "path": "modules/generated/sklearn.decomposition.dict_learning_online", "type": "decomposition", "text": "\nSolves a dictionary learning matrix factorization problem online.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.decomposition.fastica()", "path": "modules/generated/fastica-function", "type": "decomposition", "text": "\nPerform Fast Independent Component Analysis.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.decomposition.non_negative_factorization()", "path": "modules/generated/sklearn.decomposition.non_negative_factorization", "type": "decomposition", "text": "\nCompute Non-negative Matrix Factorization (NMF).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.decomposition.sparse_encode()", "path": "modules/generated/sklearn.decomposition.sparse_encode", "type": "decomposition", "text": "\nSparse coding\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.feature_extraction.image.extract_patches_2d()", "path": "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "type": "feature_extraction.image", "text": "\nReshape a 2D image into a collection of patches\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.feature_extraction.image.grid_to_graph()", "path": "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "type": "feature_extraction.image", "text": "\nGraph of the pixel-to-pixel connections\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.feature_extraction.image.img_to_graph()", "path": "modules/generated/sklearn.feature_extraction.image.img_to_graph", "type": "feature_extraction.image", "text": "\nGraph of the pixel-to-pixel gradient connections\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.feature_extraction.image.reconstruct_from_patches_2d()", "path": "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "type": "feature_extraction.image", "text": "\nReconstruct the image from all of its patches.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.feature_selection.chi2()", "path": "modules/generated/sklearn.feature_selection.chi2", "type": "feature_selection", "text": "\nCompute chi-squared stats between each non-negative feature and class.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.feature_selection.f_classif()", "path": "modules/generated/sklearn.feature_selection.f_classif", "type": "feature_selection", "text": "\nCompute the ANOVA F-value for the provided sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.feature_selection.f_regression()", "path": "modules/generated/sklearn.feature_selection.f_regression", "type": "feature_selection", "text": "\nUnivariate linear regression tests.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.feature_selection.mutual_info_classif()", "path": "modules/generated/sklearn.feature_selection.mutual_info_classif", "type": "feature_selection", "text": "\nEstimate mutual information for a discrete target variable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.feature_selection.mutual_info_regression()", "path": "modules/generated/sklearn.feature_selection.mutual_info_regression", "type": "feature_selection", "text": "\nEstimate mutual information for a continuous target variable.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.get_config()", "path": "modules/generated/sklearn.get_config", "type": "sklearn", "text": "\nRetrieve current values for configuration set by `set_config`\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.inspection.partial_dependence()", "path": "modules/generated/sklearn.inspection.partial_dependence", "type": "inspection", "text": "\nPartial dependence of `features`.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.inspection.permutation_importance()", "path": "modules/generated/sklearn.inspection.permutation_importance", "type": "inspection", "text": "\nPermutation importance for feature evaluation [BRE].\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.inspection.plot_partial_dependence()", "path": "modules/generated/sklearn.inspection.plot_partial_dependence", "type": "inspection", "text": "\nPartial dependence (PD) and individual conditional expectation (ICE) plots.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.isotonic.check_increasing()", "path": "modules/generated/sklearn.isotonic.check_increasing", "type": "isotonic", "text": "\nDetermine whether y is monotonically correlated with x.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.isotonic.isotonic_regression()", "path": "modules/generated/sklearn.isotonic.isotonic_regression", "type": "isotonic", "text": "\nSolve the isotonic regression model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.linear_model.enet_path()", "path": "modules/generated/sklearn.linear_model.enet_path", "type": "linear_model", "text": "\nCompute elastic net path with coordinate descent.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.linear_model.lars_path()", "path": "modules/generated/sklearn.linear_model.lars_path", "type": "linear_model", "text": "\nCompute Least Angle Regression or Lasso path using LARS algorithm [1]\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.linear_model.lars_path_gram()", "path": "modules/generated/sklearn.linear_model.lars_path_gram", "type": "linear_model", "text": "\nlars_path in the sufficient stats mode [1]\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.linear_model.lasso_path()", "path": "modules/generated/sklearn.linear_model.lasso_path", "type": "linear_model", "text": "\nCompute Lasso path with coordinate descent\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.linear_model.orthogonal_mp()", "path": "modules/generated/sklearn.linear_model.orthogonal_mp", "type": "linear_model", "text": "\nOrthogonal Matching Pursuit (OMP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.linear_model.orthogonal_mp_gram()", "path": "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "type": "linear_model", "text": "\nGram Orthogonal Matching Pursuit (OMP).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.linear_model.PassiveAggressiveRegressor()", "path": "modules/generated/sklearn.linear_model.passiveaggressiveregressor", "type": "linear_model", "text": "\nPassive Aggressive Regressor\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.linear_model.ridge_regression()", "path": "modules/generated/sklearn.linear_model.ridge_regression", "type": "linear_model", "text": "\nSolve the ridge equation by the method of normal equations.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.manifold.locally_linear_embedding()", "path": "modules/generated/sklearn.manifold.locally_linear_embedding", "type": "manifold", "text": "\nPerform a Locally Linear Embedding analysis on the data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.manifold.smacof()", "path": "modules/generated/sklearn.manifold.smacof", "type": "manifold", "text": "\nComputes multidimensional scaling using the SMACOF algorithm.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.manifold.spectral_embedding()", "path": "modules/generated/sklearn.manifold.spectral_embedding", "type": "manifold", "text": "\nProject the sample on the first eigenvectors of the graph Laplacian.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.manifold.trustworthiness()", "path": "modules/generated/sklearn.manifold.trustworthiness", "type": "manifold", "text": "\nExpresses to what extent the local structure is retained.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.accuracy_score()", "path": "modules/generated/sklearn.metrics.accuracy_score", "type": "metrics", "text": "\nAccuracy classification score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.adjusted_mutual_info_score()", "path": "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "type": "metrics", "text": "\nAdjusted Mutual Information between two clusterings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.adjusted_rand_score()", "path": "modules/generated/sklearn.metrics.adjusted_rand_score", "type": "metrics", "text": "\nRand index adjusted for chance.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.auc()", "path": "modules/generated/sklearn.metrics.auc", "type": "metrics", "text": "\nCompute Area Under the Curve (AUC) using the trapezoidal rule.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.average_precision_score()", "path": "modules/generated/sklearn.metrics.average_precision_score", "type": "metrics", "text": "\nCompute average precision (AP) from prediction scores.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.balanced_accuracy_score()", "path": "modules/generated/sklearn.metrics.balanced_accuracy_score", "type": "metrics", "text": "\nCompute the balanced accuracy.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.brier_score_loss()", "path": "modules/generated/sklearn.metrics.brier_score_loss", "type": "metrics", "text": "\nCompute the Brier score loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.calinski_harabasz_score()", "path": "modules/generated/sklearn.metrics.calinski_harabasz_score", "type": "metrics", "text": "\nCompute the Calinski and Harabasz score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.check_scoring()", "path": "modules/generated/sklearn.metrics.check_scoring", "type": "metrics", "text": "\nDetermine scorer from user options.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.classification_report()", "path": "modules/generated/sklearn.metrics.classification_report", "type": "metrics", "text": "\nBuild a text report showing the main classification metrics.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.cluster.contingency_matrix()", "path": "modules/generated/sklearn.metrics.cluster.contingency_matrix", "type": "metrics.cluster", "text": "\nBuild a contingency matrix describing the relationship between labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.cluster.pair_confusion_matrix()", "path": "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "type": "metrics.cluster", "text": "\nPair confusion matrix arising from two clusterings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.cohen_kappa_score()", "path": "modules/generated/sklearn.metrics.cohen_kappa_score", "type": "metrics", "text": "\nCohen\u2019s kappa: a statistic that measures inter-annotator agreement.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.completeness_score()", "path": "modules/generated/sklearn.metrics.completeness_score", "type": "metrics", "text": "\nCompleteness metric of a cluster labeling given a ground truth.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.confusion_matrix()", "path": "modules/generated/sklearn.metrics.confusion_matrix", "type": "metrics", "text": "\nCompute confusion matrix to evaluate the accuracy of a classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.consensus_score()", "path": "modules/generated/sklearn.metrics.consensus_score", "type": "metrics", "text": "\nThe similarity of two sets of biclusters.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.coverage_error()", "path": "modules/generated/sklearn.metrics.coverage_error", "type": "metrics", "text": "\nCoverage error measure.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.davies_bouldin_score()", "path": "modules/generated/sklearn.metrics.davies_bouldin_score", "type": "metrics", "text": "\nComputes the Davies-Bouldin score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.dcg_score()", "path": "modules/generated/sklearn.metrics.dcg_score", "type": "metrics", "text": "\nCompute Discounted Cumulative Gain.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.det_curve()", "path": "modules/generated/sklearn.metrics.det_curve", "type": "metrics", "text": "\nCompute error rates for different probability thresholds.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.explained_variance_score()", "path": "modules/generated/sklearn.metrics.explained_variance_score", "type": "metrics", "text": "\nExplained variance regression score function.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.f1_score()", "path": "modules/generated/sklearn.metrics.f1_score", "type": "metrics", "text": "\nCompute the F1 score, also known as balanced F-score or F-measure.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.fbeta_score()", "path": "modules/generated/sklearn.metrics.fbeta_score", "type": "metrics", "text": "\nCompute the F-beta score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.fowlkes_mallows_score()", "path": "modules/generated/sklearn.metrics.fowlkes_mallows_score", "type": "metrics", "text": "\nMeasure the similarity of two clusterings of a set of points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.get_scorer()", "path": "modules/generated/sklearn.metrics.get_scorer", "type": "metrics", "text": "\nGet a scorer from string.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.hamming_loss()", "path": "modules/generated/sklearn.metrics.hamming_loss", "type": "metrics", "text": "\nCompute the average Hamming loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.hinge_loss()", "path": "modules/generated/sklearn.metrics.hinge_loss", "type": "metrics", "text": "\nAverage hinge loss (non-regularized).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.homogeneity_completeness_v_measure()", "path": "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "type": "metrics", "text": "\nCompute the homogeneity and completeness and V-Measure scores at once.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.homogeneity_score()", "path": "modules/generated/sklearn.metrics.homogeneity_score", "type": "metrics", "text": "\nHomogeneity metric of a cluster labeling given a ground truth.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.jaccard_score()", "path": "modules/generated/sklearn.metrics.jaccard_score", "type": "metrics", "text": "\nJaccard similarity coefficient score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.label_ranking_average_precision_score()", "path": "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "type": "metrics", "text": "\nCompute ranking-based average precision.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.label_ranking_loss()", "path": "modules/generated/sklearn.metrics.label_ranking_loss", "type": "metrics", "text": "\nCompute Ranking loss measure.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.log_loss()", "path": "modules/generated/sklearn.metrics.log_loss", "type": "metrics", "text": "\nLog loss, aka logistic loss or cross-entropy loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.make_scorer()", "path": "modules/generated/sklearn.metrics.make_scorer", "type": "metrics", "text": "\nMake a scorer from a performance metric or loss function.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.matthews_corrcoef()", "path": "modules/generated/sklearn.metrics.matthews_corrcoef", "type": "metrics", "text": "\nCompute the Matthews correlation coefficient (MCC).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.max_error()", "path": "modules/generated/sklearn.metrics.max_error", "type": "metrics", "text": "\nmax_error metric calculates the maximum residual error.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.mean_absolute_error()", "path": "modules/generated/sklearn.metrics.mean_absolute_error", "type": "metrics", "text": "\nMean absolute error regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.mean_absolute_percentage_error()", "path": "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "type": "metrics", "text": "\nMean absolute percentage error regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.mean_gamma_deviance()", "path": "modules/generated/sklearn.metrics.mean_gamma_deviance", "type": "metrics", "text": "\nMean Gamma deviance regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.mean_poisson_deviance()", "path": "modules/generated/sklearn.metrics.mean_poisson_deviance", "type": "metrics", "text": "\nMean Poisson deviance regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.mean_squared_error()", "path": "modules/generated/sklearn.metrics.mean_squared_error", "type": "metrics", "text": "\nMean squared error regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.mean_squared_log_error()", "path": "modules/generated/sklearn.metrics.mean_squared_log_error", "type": "metrics", "text": "\nMean squared logarithmic error regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.mean_tweedie_deviance()", "path": "modules/generated/sklearn.metrics.mean_tweedie_deviance", "type": "metrics", "text": "\nMean Tweedie deviance regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.median_absolute_error()", "path": "modules/generated/sklearn.metrics.median_absolute_error", "type": "metrics", "text": "\nMedian absolute error regression loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.multilabel_confusion_matrix()", "path": "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "type": "metrics", "text": "\nCompute a confusion matrix for each class or sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.mutual_info_score()", "path": "modules/generated/sklearn.metrics.mutual_info_score", "type": "metrics", "text": "\nMutual Information between two clusterings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.ndcg_score()", "path": "modules/generated/sklearn.metrics.ndcg_score", "type": "metrics", "text": "\nCompute Normalized Discounted Cumulative Gain.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.normalized_mutual_info_score()", "path": "modules/generated/sklearn.metrics.normalized_mutual_info_score", "type": "metrics", "text": "\nNormalized Mutual Information between two clusterings.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.additive_chi2_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "type": "metrics.pairwise", "text": "\nComputes the additive chi-squared kernel between observations in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.chi2_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "type": "metrics.pairwise", "text": "\nComputes the exponential chi-squared kernel X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.cosine_distances()", "path": "modules/generated/sklearn.metrics.pairwise.cosine_distances", "type": "metrics.pairwise", "text": "\nCompute cosine distance between samples in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.cosine_similarity()", "path": "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "type": "metrics.pairwise", "text": "\nCompute cosine similarity between samples in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.distance_metrics()", "path": "modules/generated/sklearn.metrics.pairwise.distance_metrics", "type": "metrics.pairwise", "text": "\nValid metrics for pairwise_distances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.euclidean_distances()", "path": "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "type": "metrics.pairwise", "text": "\nConsidering the rows of X (and Y=X) as vectors, compute the distance matrix\nbetween each pair of vectors.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.haversine_distances()", "path": "modules/generated/sklearn.metrics.pairwise.haversine_distances", "type": "metrics.pairwise", "text": "\nCompute the Haversine distance between samples in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.kernel_metrics()", "path": "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "type": "metrics.pairwise", "text": "\nValid metrics for pairwise_kernels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.laplacian_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "type": "metrics.pairwise", "text": "\nCompute the laplacian kernel between X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.linear_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.linear_kernel", "type": "metrics.pairwise", "text": "\nCompute the linear kernel between X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.manhattan_distances()", "path": "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "type": "metrics.pairwise", "text": "\nCompute the L1 distances between the vectors in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.nan_euclidean_distances()", "path": "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "type": "metrics.pairwise", "text": "\nCalculate the euclidean distances in the presence of missing values.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.paired_cosine_distances()", "path": "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "type": "metrics.pairwise", "text": "\nComputes the paired cosine distances between X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.paired_distances()", "path": "modules/generated/sklearn.metrics.pairwise.paired_distances", "type": "metrics.pairwise", "text": "\nComputes the paired distances between X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.paired_euclidean_distances()", "path": "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "type": "metrics.pairwise", "text": "\nComputes the paired euclidean distances between X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.paired_manhattan_distances()", "path": "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "type": "metrics.pairwise", "text": "\nCompute the L1 distances between the vectors in X and Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.pairwise_kernels()", "path": "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "type": "metrics.pairwise", "text": "\nCompute the kernel between arrays X and optional array Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.polynomial_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "type": "metrics.pairwise", "text": "\nCompute the polynomial kernel between X and Y:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.rbf_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "type": "metrics.pairwise", "text": "\nCompute the rbf (gaussian) kernel between X and Y:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise.sigmoid_kernel()", "path": "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "type": "metrics.pairwise", "text": "\nCompute the sigmoid kernel between X and Y:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise_distances()", "path": "modules/generated/sklearn.metrics.pairwise_distances", "type": "metrics", "text": "\nCompute the distance matrix from a vector array X and optional Y.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise_distances_argmin()", "path": "modules/generated/sklearn.metrics.pairwise_distances_argmin", "type": "metrics", "text": "\nCompute minimum distances between one point and a set of points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise_distances_argmin_min()", "path": "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "type": "metrics", "text": "\nCompute minimum distances between one point and a set of points.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.pairwise_distances_chunked()", "path": "modules/generated/sklearn.metrics.pairwise_distances_chunked", "type": "metrics", "text": "\nGenerate a distance matrix chunk by chunk with optional reduction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.plot_confusion_matrix()", "path": "modules/generated/sklearn.metrics.plot_confusion_matrix", "type": "metrics", "text": "\nPlot Confusion Matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.plot_det_curve()", "path": "modules/generated/sklearn.metrics.plot_det_curve", "type": "metrics", "text": "\nPlot detection error tradeoff (DET) curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.plot_precision_recall_curve()", "path": "modules/generated/sklearn.metrics.plot_precision_recall_curve", "type": "metrics", "text": "\nPlot Precision Recall Curve for binary classifiers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.plot_roc_curve()", "path": "modules/generated/sklearn.metrics.plot_roc_curve", "type": "metrics", "text": "\nPlot Receiver operating characteristic (ROC) curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.precision_recall_curve()", "path": "modules/generated/sklearn.metrics.precision_recall_curve", "type": "metrics", "text": "\nCompute precision-recall pairs for different probability thresholds.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.precision_recall_fscore_support()", "path": "modules/generated/sklearn.metrics.precision_recall_fscore_support", "type": "metrics", "text": "\nCompute precision, recall, F-measure and support for each class.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.precision_score()", "path": "modules/generated/sklearn.metrics.precision_score", "type": "metrics", "text": "\nCompute the precision.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.r2_score()", "path": "modules/generated/sklearn.metrics.r2_score", "type": "metrics", "text": "\nR^2 (coefficient of determination) regression score function.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.rand_score()", "path": "modules/generated/sklearn.metrics.rand_score", "type": "metrics", "text": "\nRand index.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.recall_score()", "path": "modules/generated/sklearn.metrics.recall_score", "type": "metrics", "text": "\nCompute the recall.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.roc_auc_score()", "path": "modules/generated/sklearn.metrics.roc_auc_score", "type": "metrics", "text": "\nCompute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from\nprediction scores.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.roc_curve()", "path": "modules/generated/sklearn.metrics.roc_curve", "type": "metrics", "text": "\nCompute Receiver operating characteristic (ROC).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.silhouette_samples()", "path": "modules/generated/sklearn.metrics.silhouette_samples", "type": "metrics", "text": "\nCompute the Silhouette Coefficient for each sample.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.silhouette_score()", "path": "modules/generated/sklearn.metrics.silhouette_score", "type": "metrics", "text": "\nCompute the mean Silhouette Coefficient of all samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.top_k_accuracy_score()", "path": "modules/generated/sklearn.metrics.top_k_accuracy_score", "type": "metrics", "text": "\nTop-k Accuracy classification score.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.v_measure_score()", "path": "modules/generated/sklearn.metrics.v_measure_score", "type": "metrics", "text": "\nV-measure cluster labeling given a ground truth.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.metrics.zero_one_loss()", "path": "modules/generated/sklearn.metrics.zero_one_loss", "type": "metrics", "text": "\nZero-one classification loss.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.model_selection.check_cv()", "path": "modules/generated/sklearn.model_selection.check_cv", "type": "model_selection", "text": "\nInput checker utility for building a cross-validator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.model_selection.cross_validate()", "path": "modules/generated/sklearn.model_selection.cross_validate", "type": "model_selection", "text": "\nEvaluate metric(s) by cross-validation and also record fit/score times.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.model_selection.cross_val_predict()", "path": "modules/generated/sklearn.model_selection.cross_val_predict", "type": "model_selection", "text": "\nGenerate cross-validated estimates for each input data point\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.model_selection.cross_val_score()", "path": "modules/generated/sklearn.model_selection.cross_val_score", "type": "model_selection", "text": "\nEvaluate a score by cross-validation\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.model_selection.learning_curve()", "path": "modules/generated/sklearn.model_selection.learning_curve", "type": "model_selection", "text": "\nLearning curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.model_selection.permutation_test_score()", "path": "modules/generated/sklearn.model_selection.permutation_test_score", "type": "model_selection", "text": "\nEvaluate the significance of a cross-validated score with permutations\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.model_selection.train_test_split()", "path": "modules/generated/sklearn.model_selection.train_test_split", "type": "model_selection", "text": "\nSplit arrays or matrices into random train and test subsets\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.model_selection.validation_curve()", "path": "modules/generated/sklearn.model_selection.validation_curve", "type": "model_selection", "text": "\nValidation curve.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.neighbors.kneighbors_graph()", "path": "modules/generated/sklearn.neighbors.kneighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of k-Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.neighbors.radius_neighbors_graph()", "path": "modules/generated/sklearn.neighbors.radius_neighbors_graph", "type": "neighbors", "text": "\nComputes the (weighted) graph of Neighbors for points in X\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.pipeline.make_pipeline()", "path": "modules/generated/sklearn.pipeline.make_pipeline", "type": "pipeline", "text": "\nConstruct a Pipeline from the given estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.pipeline.make_union()", "path": "modules/generated/sklearn.pipeline.make_union", "type": "pipeline", "text": "\nConstruct a FeatureUnion from the given transformers.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.preprocessing.add_dummy_feature()", "path": "modules/generated/sklearn.preprocessing.add_dummy_feature", "type": "preprocessing", "text": "\nAugment dataset with an additional dummy feature.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.preprocessing.binarize()", "path": "modules/generated/sklearn.preprocessing.binarize", "type": "preprocessing", "text": "\nBoolean thresholding of array-like or scipy.sparse matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.preprocessing.label_binarize()", "path": "modules/generated/sklearn.preprocessing.label_binarize", "type": "preprocessing", "text": "\nBinarize labels in a one-vs-all fashion.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.preprocessing.maxabs_scale()", "path": "modules/generated/sklearn.preprocessing.maxabs_scale", "type": "preprocessing", "text": "\nScale each feature to the [-1, 1] range without breaking the sparsity.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.preprocessing.minmax_scale()", "path": "modules/generated/sklearn.preprocessing.minmax_scale", "type": "preprocessing", "text": "\nTransform features by scaling each feature to a given range.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.preprocessing.normalize()", "path": "modules/generated/sklearn.preprocessing.normalize", "type": "preprocessing", "text": "\nScale input vectors individually to unit norm (vector length).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.preprocessing.power_transform()", "path": "modules/generated/sklearn.preprocessing.power_transform", "type": "preprocessing", "text": "\nPower transforms are a family of parametric, monotonic transformations that\nare applied to make data more Gaussian-like. This is useful for modeling\nissues related to heteroscedasticity (non-constant variance), or other\nsituations where normality is desired.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.preprocessing.quantile_transform()", "path": "modules/generated/sklearn.preprocessing.quantile_transform", "type": "preprocessing", "text": "\nTransform features using quantiles information.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.preprocessing.robust_scale()", "path": "modules/generated/sklearn.preprocessing.robust_scale", "type": "preprocessing", "text": "\nStandardize a dataset along any axis\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.preprocessing.scale()", "path": "modules/generated/sklearn.preprocessing.scale", "type": "preprocessing", "text": "\nStandardize a dataset along any axis.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.random_projection.johnson_lindenstrauss_min_dim()", "path": "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "type": "random_projection", "text": "\nFind a \u2018safe\u2019 number of components to randomly project to.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.set_config()", "path": "modules/generated/sklearn.set_config", "type": "sklearn", "text": "\nSet global scikit-learn configuration\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.show_versions()", "path": "modules/generated/sklearn.show_versions", "type": "sklearn", "text": "\nPrint useful debugging information\u201d\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.svm.l1_min_c()", "path": "modules/generated/sklearn.svm.l1_min_c", "type": "svm", "text": "\nReturn the lowest bound for C such that for C in (l1_min_C, infinity) the\nmodel is guaranteed not to be empty. This applies to l1 penalized classifiers,\nsuch as LinearSVC with penalty=\u2019l1\u2019 and linear_model.LogisticRegression with\npenalty=\u2019l1\u2019.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.tree.export_graphviz()", "path": "modules/generated/sklearn.tree.export_graphviz", "type": "tree", "text": "\nExport a decision tree in DOT format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.tree.export_text()", "path": "modules/generated/sklearn.tree.export_text", "type": "tree", "text": "\nBuild a text report showing the rules of a decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.tree.plot_tree()", "path": "modules/generated/sklearn.tree.plot_tree", "type": "tree", "text": "\nPlot a decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.all_estimators()", "path": "modules/generated/sklearn.utils.all_estimators", "type": "utils", "text": "\nGet a list of all estimators from sklearn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.arrayfuncs.min_pos()", "path": "modules/generated/sklearn.utils.arrayfuncs.min_pos", "type": "utils.arrayfuncs", "text": "\nFind the minimum value of an array over positive values\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.assert_all_finite()", "path": "modules/generated/sklearn.utils.assert_all_finite", "type": "utils", "text": "\nThrow a ValueError if X contains NaN or infinity.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.as_float_array()", "path": "modules/generated/sklearn.utils.as_float_array", "type": "utils", "text": "\nConverts an array-like to an array of floats.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.Bunch()", "path": "modules/generated/sklearn.utils.bunch", "type": "utils", "text": "\nContainer object exposing keys as attributes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.check_array()", "path": "modules/generated/sklearn.utils.check_array", "type": "utils", "text": "\nInput validation on an array, list, sparse matrix or similar.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.check_consistent_length()", "path": "modules/generated/sklearn.utils.check_consistent_length", "type": "utils", "text": "\nCheck that all arrays have consistent first dimensions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.check_random_state()", "path": "modules/generated/sklearn.utils.check_random_state", "type": "utils", "text": "\nTurn seed into a np.random.RandomState instance\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.check_scalar()", "path": "modules/generated/sklearn.utils.check_scalar", "type": "utils", "text": "\nValidate scalar parameters type and value.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.check_X_y()", "path": "modules/generated/sklearn.utils.check_x_y", "type": "utils", "text": "\nInput validation for standard estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.class_weight.compute_class_weight()", "path": "modules/generated/sklearn.utils.class_weight.compute_class_weight", "type": "utils.class_weight", "text": "\nEstimate class weights for unbalanced datasets.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.class_weight.compute_sample_weight()", "path": "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "type": "utils.class_weight", "text": "\nEstimate sample weights by class for unbalanced datasets.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.deprecated()", "path": "modules/generated/sklearn.utils.deprecated", "type": "utils", "text": "\nDecorator to mark a function or class as deprecated.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.estimator_checks.check_estimator()", "path": "modules/generated/sklearn.utils.estimator_checks.check_estimator", "type": "utils.estimator_checks", "text": "\nCheck if estimator adheres to scikit-learn conventions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.estimator_checks.parametrize_with_checks()", "path": "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "type": "utils.estimator_checks", "text": "\nPytest specific decorator for parametrizing estimator checks.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.estimator_html_repr()", "path": "modules/generated/sklearn.utils.estimator_html_repr", "type": "utils", "text": "\nBuild a HTML representation of an estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.extmath.density()", "path": "modules/generated/sklearn.utils.extmath.density", "type": "utils.extmath", "text": "\nCompute density of a sparse vector.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.extmath.fast_logdet()", "path": "modules/generated/sklearn.utils.extmath.fast_logdet", "type": "utils.extmath", "text": "\nCompute log(det(A)) for A symmetric.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.extmath.randomized_range_finder()", "path": "modules/generated/sklearn.utils.extmath.randomized_range_finder", "type": "utils.extmath", "text": "\nComputes an orthonormal matrix whose range approximates the range of A.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.extmath.randomized_svd()", "path": "modules/generated/sklearn.utils.extmath.randomized_svd", "type": "utils.extmath", "text": "\nComputes a truncated randomized SVD.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.extmath.safe_sparse_dot()", "path": "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "type": "utils.extmath", "text": "\nDot product that handle the sparse matrix case correctly.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.extmath.weighted_mode()", "path": "modules/generated/sklearn.utils.extmath.weighted_mode", "type": "utils.extmath", "text": "\nReturns an array of the weighted modal (most common) value in a.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.gen_even_slices()", "path": "modules/generated/sklearn.utils.gen_even_slices", "type": "utils", "text": "\nGenerator to create n_packs slices going up to n.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.graph.single_source_shortest_path_length()", "path": "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "type": "utils.graph", "text": "\nReturn the shortest path length from source to all reachable nodes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.graph_shortest_path.graph_shortest_path()", "path": "modules/generated/sklearn.utils.graph_shortest_path.graph_shortest_path", "type": "utils.graph_shortest_path", "text": "\nPerform a shortest-path graph search on a positive directed or undirected\ngraph.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.indexable()", "path": "modules/generated/sklearn.utils.indexable", "type": "utils", "text": "\nMake arrays indexable for cross-validation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.metaestimators.if_delegate_has_method()", "path": "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method", "type": "utils.metaestimators", "text": "\nCreate a decorator for methods that are delegated to a sub-estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.multiclass.is_multilabel()", "path": "modules/generated/sklearn.utils.multiclass.is_multilabel", "type": "utils.multiclass", "text": "\nCheck if `y` is in a multilabel format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.multiclass.type_of_target()", "path": "modules/generated/sklearn.utils.multiclass.type_of_target", "type": "utils.multiclass", "text": "\nDetermine the type of data indicated by the target.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.multiclass.unique_labels()", "path": "modules/generated/sklearn.utils.multiclass.unique_labels", "type": "utils.multiclass", "text": "\nExtract an ordered array of unique labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.murmurhash3_32()", "path": "modules/generated/sklearn.utils.murmurhash3_32", "type": "utils", "text": "\nCompute the 32bit murmurhash3 of key at seed.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.parallel_backend()", "path": "modules/generated/sklearn.utils.parallel_backend", "type": "utils", "text": "\nChange the default backend used by Parallel inside a with block.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.random.sample_without_replacement()", "path": "modules/generated/sklearn.utils.random.sample_without_replacement", "type": "utils.random", "text": "\nSample integers without replacement.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.register_parallel_backend()", "path": "modules/generated/sklearn.utils.register_parallel_backend", "type": "utils", "text": "\nRegister a new Parallel backend factory.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.resample()", "path": "modules/generated/sklearn.utils.resample", "type": "utils", "text": "\nResample arrays or sparse matrices in a consistent way.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.safe_mask()", "path": "modules/generated/sklearn.utils.safe_mask", "type": "utils", "text": "\nReturn a mask which is safe to use on X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.safe_sqr()", "path": "modules/generated/sklearn.utils.safe_sqr", "type": "utils", "text": "\nElement wise squaring of array-likes and sparse matrices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.shuffle()", "path": "modules/generated/sklearn.utils.shuffle", "type": "utils", "text": "\nShuffle arrays or sparse matrices in a consistent way.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.sparsefuncs.incr_mean_variance_axis()", "path": "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "type": "utils.sparsefuncs", "text": "\nCompute incremental mean and variance along an axis on a CSR or CSC matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.sparsefuncs.inplace_column_scale()", "path": "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "type": "utils.sparsefuncs", "text": "\nInplace column scaling of a CSC/CSR matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.sparsefuncs.inplace_csr_column_scale()", "path": "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "type": "utils.sparsefuncs", "text": "\nInplace column scaling of a CSR matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.sparsefuncs.inplace_row_scale()", "path": "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "type": "utils.sparsefuncs", "text": "\nInplace row scaling of a CSR or CSC matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.sparsefuncs.inplace_swap_column()", "path": "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "type": "utils.sparsefuncs", "text": "\nSwaps two columns of a CSC/CSR matrix in-place.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.sparsefuncs.inplace_swap_row()", "path": "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "type": "utils.sparsefuncs", "text": "\nSwaps two rows of a CSC/CSR matrix in-place.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.sparsefuncs.mean_variance_axis()", "path": "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "type": "utils.sparsefuncs", "text": "\nCompute mean and variance along an axis on a CSR or CSC matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1()", "path": "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "type": "utils.sparsefuncs_fast", "text": "\nInplace row normalize using the l1 norm\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2()", "path": "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "type": "utils.sparsefuncs_fast", "text": "\nInplace row normalize using the l2 norm\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.validation.check_is_fitted()", "path": "modules/generated/sklearn.utils.validation.check_is_fitted", "type": "utils.validation", "text": "\nPerform is_fitted validation for estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.validation.check_memory()", "path": "modules/generated/sklearn.utils.validation.check_memory", "type": "utils.validation", "text": "\nCheck that `memory` is joblib.Memory-like.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.validation.check_symmetric()", "path": "modules/generated/sklearn.utils.validation.check_symmetric", "type": "utils.validation", "text": "\nMake sure that array is 2D, square and symmetric.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.validation.column_or_1d()", "path": "modules/generated/sklearn.utils.validation.column_or_1d", "type": "utils.validation", "text": "\nRavel column or 1d numpy array, else raises an error.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils.validation.has_fit_parameter()", "path": "modules/generated/sklearn.utils.validation.has_fit_parameter", "type": "utils.validation", "text": "\nChecks whether the estimator\u2019s fit method supports the given parameter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "sklearn.utils._safe_indexing()", "path": "modules/generated/sklearn.utils._safe_indexing", "type": "utils", "text": "\nReturn rows, items or columns of X using indices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.l1_min_c()", "path": "modules/generated/sklearn.svm.l1_min_c#sklearn.svm.l1_min_c", "type": "svm", "text": "\nReturn the lowest bound for C such that for C in (l1_min_C, infinity) the\nmodel is guaranteed not to be empty. This applies to l1 penalized classifiers,\nsuch as LinearSVC with penalty=\u2019l1\u2019 and linear_model.LogisticRegression with\npenalty=\u2019l1\u2019.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVC", "path": "modules/generated/sklearn.svm.linearsvc#sklearn.svm.LinearSVC", "type": "svm", "text": "\nLinear Support Vector Classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVC()", "path": "modules/generated/sklearn.svm.linearsvc", "type": "svm", "text": "\nLinear Support Vector Classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVC.decision_function()", "path": "modules/generated/sklearn.svm.linearsvc#sklearn.svm.LinearSVC.decision_function", "type": "svm", "text": "\nPredict confidence scores for samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVC.densify()", "path": "modules/generated/sklearn.svm.linearsvc#sklearn.svm.LinearSVC.densify", "type": "svm", "text": "\nConvert coefficient matrix to dense array format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVC.fit()", "path": "modules/generated/sklearn.svm.linearsvc#sklearn.svm.LinearSVC.fit", "type": "svm", "text": "\nFit the model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVC.get_params()", "path": "modules/generated/sklearn.svm.linearsvc#sklearn.svm.LinearSVC.get_params", "type": "svm", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVC.predict()", "path": "modules/generated/sklearn.svm.linearsvc#sklearn.svm.LinearSVC.predict", "type": "svm", "text": "\nPredict class labels for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVC.score()", "path": "modules/generated/sklearn.svm.linearsvc#sklearn.svm.LinearSVC.score", "type": "svm", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVC.set_params()", "path": "modules/generated/sklearn.svm.linearsvc#sklearn.svm.LinearSVC.set_params", "type": "svm", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVC.sparsify()", "path": "modules/generated/sklearn.svm.linearsvc#sklearn.svm.LinearSVC.sparsify", "type": "svm", "text": "\nConvert coefficient matrix to sparse format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVR", "path": "modules/generated/sklearn.svm.linearsvr#sklearn.svm.LinearSVR", "type": "svm", "text": "\nLinear Support Vector Regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVR()", "path": "modules/generated/sklearn.svm.linearsvr", "type": "svm", "text": "\nLinear Support Vector Regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVR.fit()", "path": "modules/generated/sklearn.svm.linearsvr#sklearn.svm.LinearSVR.fit", "type": "svm", "text": "\nFit the model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVR.get_params()", "path": "modules/generated/sklearn.svm.linearsvr#sklearn.svm.LinearSVR.get_params", "type": "svm", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVR.predict()", "path": "modules/generated/sklearn.svm.linearsvr#sklearn.svm.LinearSVR.predict", "type": "svm", "text": "\nPredict using the linear model.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVR.score()", "path": "modules/generated/sklearn.svm.linearsvr#sklearn.svm.LinearSVR.score", "type": "svm", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.LinearSVR.set_params()", "path": "modules/generated/sklearn.svm.linearsvr#sklearn.svm.LinearSVR.set_params", "type": "svm", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVC", "path": "modules/generated/sklearn.svm.nusvc#sklearn.svm.NuSVC", "type": "svm", "text": "\nNu-Support Vector Classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVC()", "path": "modules/generated/sklearn.svm.nusvc", "type": "svm", "text": "\nNu-Support Vector Classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVC.decision_function()", "path": "modules/generated/sklearn.svm.nusvc#sklearn.svm.NuSVC.decision_function", "type": "svm", "text": "\nEvaluates the decision function for the samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVC.fit()", "path": "modules/generated/sklearn.svm.nusvc#sklearn.svm.NuSVC.fit", "type": "svm", "text": "\nFit the SVM model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVC.get_params()", "path": "modules/generated/sklearn.svm.nusvc#sklearn.svm.NuSVC.get_params", "type": "svm", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVC.predict()", "path": "modules/generated/sklearn.svm.nusvc#sklearn.svm.NuSVC.predict", "type": "svm", "text": "\nPerform classification on samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVC.predict_log_proba()", "path": "modules/generated/sklearn.svm.nusvc#sklearn.svm.NuSVC.predict_log_proba", "type": "svm", "text": "\nCompute log probabilities of possible outcomes for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVC.predict_proba()", "path": "modules/generated/sklearn.svm.nusvc#sklearn.svm.NuSVC.predict_proba", "type": "svm", "text": "\nCompute probabilities of possible outcomes for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVC.score()", "path": "modules/generated/sklearn.svm.nusvc#sklearn.svm.NuSVC.score", "type": "svm", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVC.set_params()", "path": "modules/generated/sklearn.svm.nusvc#sklearn.svm.NuSVC.set_params", "type": "svm", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVR", "path": "modules/generated/sklearn.svm.nusvr#sklearn.svm.NuSVR", "type": "svm", "text": "\nNu Support Vector Regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVR()", "path": "modules/generated/sklearn.svm.nusvr", "type": "svm", "text": "\nNu Support Vector Regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVR.fit()", "path": "modules/generated/sklearn.svm.nusvr#sklearn.svm.NuSVR.fit", "type": "svm", "text": "\nFit the SVM model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVR.get_params()", "path": "modules/generated/sklearn.svm.nusvr#sklearn.svm.NuSVR.get_params", "type": "svm", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVR.predict()", "path": "modules/generated/sklearn.svm.nusvr#sklearn.svm.NuSVR.predict", "type": "svm", "text": "\nPerform regression on samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVR.score()", "path": "modules/generated/sklearn.svm.nusvr#sklearn.svm.NuSVR.score", "type": "svm", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.NuSVR.set_params()", "path": "modules/generated/sklearn.svm.nusvr#sklearn.svm.NuSVR.set_params", "type": "svm", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.OneClassSVM", "path": "modules/generated/sklearn.svm.oneclasssvm#sklearn.svm.OneClassSVM", "type": "svm", "text": "\nUnsupervised Outlier Detection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.OneClassSVM()", "path": "modules/generated/sklearn.svm.oneclasssvm", "type": "svm", "text": "\nUnsupervised Outlier Detection.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.OneClassSVM.decision_function()", "path": "modules/generated/sklearn.svm.oneclasssvm#sklearn.svm.OneClassSVM.decision_function", "type": "svm", "text": "\nSigned distance to the separating hyperplane.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.OneClassSVM.fit()", "path": "modules/generated/sklearn.svm.oneclasssvm#sklearn.svm.OneClassSVM.fit", "type": "svm", "text": "\nDetects the soft boundary of the set of samples X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.OneClassSVM.fit_predict()", "path": "modules/generated/sklearn.svm.oneclasssvm#sklearn.svm.OneClassSVM.fit_predict", "type": "svm", "text": "\nPerform fit on X and returns labels for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.OneClassSVM.get_params()", "path": "modules/generated/sklearn.svm.oneclasssvm#sklearn.svm.OneClassSVM.get_params", "type": "svm", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.OneClassSVM.predict()", "path": "modules/generated/sklearn.svm.oneclasssvm#sklearn.svm.OneClassSVM.predict", "type": "svm", "text": "\nPerform classification on samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.OneClassSVM.score_samples()", "path": "modules/generated/sklearn.svm.oneclasssvm#sklearn.svm.OneClassSVM.score_samples", "type": "svm", "text": "\nRaw scoring function of the samples.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.OneClassSVM.set_params()", "path": "modules/generated/sklearn.svm.oneclasssvm#sklearn.svm.OneClassSVM.set_params", "type": "svm", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVC", "path": "modules/generated/sklearn.svm.svc#sklearn.svm.SVC", "type": "svm", "text": "\nC-Support Vector Classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVC()", "path": "modules/generated/sklearn.svm.svc", "type": "svm", "text": "\nC-Support Vector Classification.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVC.decision_function()", "path": "modules/generated/sklearn.svm.svc#sklearn.svm.SVC.decision_function", "type": "svm", "text": "\nEvaluates the decision function for the samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVC.fit()", "path": "modules/generated/sklearn.svm.svc#sklearn.svm.SVC.fit", "type": "svm", "text": "\nFit the SVM model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVC.get_params()", "path": "modules/generated/sklearn.svm.svc#sklearn.svm.SVC.get_params", "type": "svm", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVC.predict()", "path": "modules/generated/sklearn.svm.svc#sklearn.svm.SVC.predict", "type": "svm", "text": "\nPerform classification on samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVC.predict_log_proba()", "path": "modules/generated/sklearn.svm.svc#sklearn.svm.SVC.predict_log_proba", "type": "svm", "text": "\nCompute log probabilities of possible outcomes for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVC.predict_proba()", "path": "modules/generated/sklearn.svm.svc#sklearn.svm.SVC.predict_proba", "type": "svm", "text": "\nCompute probabilities of possible outcomes for samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVC.score()", "path": "modules/generated/sklearn.svm.svc#sklearn.svm.SVC.score", "type": "svm", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVC.set_params()", "path": "modules/generated/sklearn.svm.svc#sklearn.svm.SVC.set_params", "type": "svm", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVR", "path": "modules/generated/sklearn.svm.svr#sklearn.svm.SVR", "type": "svm", "text": "\nEpsilon-Support Vector Regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVR()", "path": "modules/generated/sklearn.svm.svr", "type": "svm", "text": "\nEpsilon-Support Vector Regression.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVR.fit()", "path": "modules/generated/sklearn.svm.svr#sklearn.svm.SVR.fit", "type": "svm", "text": "\nFit the SVM model according to the given training data.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVR.get_params()", "path": "modules/generated/sklearn.svm.svr#sklearn.svm.SVR.get_params", "type": "svm", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVR.predict()", "path": "modules/generated/sklearn.svm.svr#sklearn.svm.SVR.predict", "type": "svm", "text": "\nPerform regression on samples in X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVR.score()", "path": "modules/generated/sklearn.svm.svr#sklearn.svm.SVR.score", "type": "svm", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "svm.SVR.set_params()", "path": "modules/generated/sklearn.svm.svr#sklearn.svm.SVR.set_params", "type": "svm", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier", "type": "tree", "text": "\nA decision tree classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier", "type": "tree", "text": "\nA decision tree classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.apply()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.apply", "type": "tree", "text": "\nReturn the index of the leaf that each sample is predicted as.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.cost_complexity_pruning_path()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", "type": "tree", "text": "\nCompute the pruning path during Minimal Cost-Complexity Pruning.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.decision_path()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.decision_path", "type": "tree", "text": "\nReturn the decision path in the tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.feature_importances_()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.feature_importances_", "type": "tree", "text": "\nReturn the feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.fit()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.fit", "type": "tree", "text": "\nBuild a decision tree classifier from the training set (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.get_depth()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.get_depth", "type": "tree", "text": "\nReturn the depth of the decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.get_n_leaves()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.get_n_leaves", "type": "tree", "text": "\nReturn the number of leaves of the decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.get_params()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.get_params", "type": "tree", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.predict()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.predict", "type": "tree", "text": "\nPredict class or regression value for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.predict_log_proba()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.predict_log_proba", "type": "tree", "text": "\nPredict class log-probabilities of the input samples X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.predict_proba()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.predict_proba", "type": "tree", "text": "\nPredict class probabilities of the input samples X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.score()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.score", "type": "tree", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeClassifier.set_params()", "path": "modules/generated/sklearn.tree.decisiontreeclassifier#sklearn.tree.DecisionTreeClassifier.set_params", "type": "tree", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor", "type": "tree", "text": "\nA decision tree regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor()", "path": "modules/generated/sklearn.tree.decisiontreeregressor", "type": "tree", "text": "\nA decision tree regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.apply()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.apply", "type": "tree", "text": "\nReturn the index of the leaf that each sample is predicted as.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.cost_complexity_pruning_path()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", "type": "tree", "text": "\nCompute the pruning path during Minimal Cost-Complexity Pruning.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.decision_path()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.decision_path", "type": "tree", "text": "\nReturn the decision path in the tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.feature_importances_()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.feature_importances_", "type": "tree", "text": "\nReturn the feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.fit()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.fit", "type": "tree", "text": "\nBuild a decision tree regressor from the training set (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.get_depth()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.get_depth", "type": "tree", "text": "\nReturn the depth of the decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.get_n_leaves()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.get_n_leaves", "type": "tree", "text": "\nReturn the number of leaves of the decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.get_params()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.get_params", "type": "tree", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.predict()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.predict", "type": "tree", "text": "\nPredict class or regression value for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.score()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.score", "type": "tree", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.DecisionTreeRegressor.set_params()", "path": "modules/generated/sklearn.tree.decisiontreeregressor#sklearn.tree.DecisionTreeRegressor.set_params", "type": "tree", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.export_graphviz()", "path": "modules/generated/sklearn.tree.export_graphviz#sklearn.tree.export_graphviz", "type": "tree", "text": "\nExport a decision tree in DOT format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.export_text()", "path": "modules/generated/sklearn.tree.export_text#sklearn.tree.export_text", "type": "tree", "text": "\nBuild a text report showing the rules of a decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier", "type": "tree", "text": "\nAn extremely randomized tree classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier()", "path": "modules/generated/sklearn.tree.extratreeclassifier", "type": "tree", "text": "\nAn extremely randomized tree classifier.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.apply()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.apply", "type": "tree", "text": "\nReturn the index of the leaf that each sample is predicted as.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.cost_complexity_pruning_path()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", "type": "tree", "text": "\nCompute the pruning path during Minimal Cost-Complexity Pruning.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.decision_path()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.decision_path", "type": "tree", "text": "\nReturn the decision path in the tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.feature_importances_()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.feature_importances_", "type": "tree", "text": "\nReturn the feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.fit()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.fit", "type": "tree", "text": "\nBuild a decision tree classifier from the training set (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.get_depth()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.get_depth", "type": "tree", "text": "\nReturn the depth of the decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.get_n_leaves()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.get_n_leaves", "type": "tree", "text": "\nReturn the number of leaves of the decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.get_params()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.get_params", "type": "tree", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.predict()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.predict", "type": "tree", "text": "\nPredict class or regression value for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.predict_log_proba()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.predict_log_proba", "type": "tree", "text": "\nPredict class log-probabilities of the input samples X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.predict_proba()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.predict_proba", "type": "tree", "text": "\nPredict class probabilities of the input samples X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.score()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.score", "type": "tree", "text": "\nReturn the mean accuracy on the given test data and labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeClassifier.set_params()", "path": "modules/generated/sklearn.tree.extratreeclassifier#sklearn.tree.ExtraTreeClassifier.set_params", "type": "tree", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor", "type": "tree", "text": "\nAn extremely randomized tree regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor()", "path": "modules/generated/sklearn.tree.extratreeregressor", "type": "tree", "text": "\nAn extremely randomized tree regressor.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.apply()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.apply", "type": "tree", "text": "\nReturn the index of the leaf that each sample is predicted as.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.cost_complexity_pruning_path()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", "type": "tree", "text": "\nCompute the pruning path during Minimal Cost-Complexity Pruning.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.decision_path()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.decision_path", "type": "tree", "text": "\nReturn the decision path in the tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.feature_importances_()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.feature_importances_", "type": "tree", "text": "\nReturn the feature importances.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.fit()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.fit", "type": "tree", "text": "\nBuild a decision tree regressor from the training set (X, y).\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.get_depth()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.get_depth", "type": "tree", "text": "\nReturn the depth of the decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.get_n_leaves()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.get_n_leaves", "type": "tree", "text": "\nReturn the number of leaves of the decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.get_params()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.get_params", "type": "tree", "text": "\nGet parameters for this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.predict()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.predict", "type": "tree", "text": "\nPredict class or regression value for X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.score()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.score", "type": "tree", "text": "\nReturn the coefficient of determination \\\\(R^2\\\\) of the prediction.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.ExtraTreeRegressor.set_params()", "path": "modules/generated/sklearn.tree.extratreeregressor#sklearn.tree.ExtraTreeRegressor.set_params", "type": "tree", "text": "\nSet the parameters of this estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "tree.plot_tree()", "path": "modules/generated/sklearn.tree.plot_tree#sklearn.tree.plot_tree", "type": "tree", "text": "\nPlot a decision tree.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Tutorial: A tutorial on statistical-learning for scientific data processing", "path": "tutorial/statistical_inference/index", "type": "Tutorials", "text": "\nStatistical learning\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Tutorial: An introduction to machine learning with scikit-learn", "path": "tutorial/basic/tutorial", "type": "Tutorials", "text": "\nSection contents\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Tutorial: Model selection", "path": "tutorial/statistical_inference/model_selection", "type": "Tutorials", "text": "\nAs we have seen, every estimator exposes a `score` method that can judge the\nquality of the fit (or the prediction) on new data. Bigger is better.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Tutorial: Putting it all together", "path": "tutorial/statistical_inference/putting_together", "type": "Tutorials", "text": "\nWe have seen that some estimators can transform data and that some estimators\ncan predict variables. We can also create combined estimators:\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Tutorial: Statistical learning", "path": "tutorial/statistical_inference/settings", "type": "Tutorials", "text": "\nScikit-learn deals with learning information from one or more datasets that\nare represented as 2D arrays. They can be understood as a list of multi-\ndimensional observations. We say that the first axis of these arrays is the\nsamples axis, while the second is the features axis.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Tutorial: Supervised learning", "path": "tutorial/statistical_inference/supervised_learning", "type": "Tutorials", "text": "\nThe problem solved in supervised learning\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "Tutorial: Unsupervised learning", "path": "tutorial/statistical_inference/unsupervised_learning", "type": "Tutorials", "text": "\nThe problem solved in clustering\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.all_estimators()", "path": "modules/generated/sklearn.utils.all_estimators#sklearn.utils.all_estimators", "type": "utils", "text": "\nGet a list of all estimators from sklearn.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.arrayfuncs.min_pos()", "path": "modules/generated/sklearn.utils.arrayfuncs.min_pos#sklearn.utils.arrayfuncs.min_pos", "type": "utils.arrayfuncs", "text": "\nFind the minimum value of an array over positive values\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.assert_all_finite()", "path": "modules/generated/sklearn.utils.assert_all_finite#sklearn.utils.assert_all_finite", "type": "utils", "text": "\nThrow a ValueError if X contains NaN or infinity.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.as_float_array()", "path": "modules/generated/sklearn.utils.as_float_array#sklearn.utils.as_float_array", "type": "utils", "text": "\nConverts an array-like to an array of floats.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.Bunch()", "path": "modules/generated/sklearn.utils.bunch#sklearn.utils.Bunch", "type": "utils", "text": "\nContainer object exposing keys as attributes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.check_array()", "path": "modules/generated/sklearn.utils.check_array#sklearn.utils.check_array", "type": "utils", "text": "\nInput validation on an array, list, sparse matrix or similar.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.check_consistent_length()", "path": "modules/generated/sklearn.utils.check_consistent_length#sklearn.utils.check_consistent_length", "type": "utils", "text": "\nCheck that all arrays have consistent first dimensions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.check_random_state()", "path": "modules/generated/sklearn.utils.check_random_state#sklearn.utils.check_random_state", "type": "utils", "text": "\nTurn seed into a np.random.RandomState instance\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.check_scalar()", "path": "modules/generated/sklearn.utils.check_scalar#sklearn.utils.check_scalar", "type": "utils", "text": "\nValidate scalar parameters type and value.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.check_X_y()", "path": "modules/generated/sklearn.utils.check_x_y#sklearn.utils.check_X_y", "type": "utils", "text": "\nInput validation for standard estimators.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.class_weight.compute_class_weight()", "path": "modules/generated/sklearn.utils.class_weight.compute_class_weight#sklearn.utils.class_weight.compute_class_weight", "type": "utils.class_weight", "text": "\nEstimate class weights for unbalanced datasets.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.class_weight.compute_sample_weight()", "path": "modules/generated/sklearn.utils.class_weight.compute_sample_weight#sklearn.utils.class_weight.compute_sample_weight", "type": "utils.class_weight", "text": "\nEstimate sample weights by class for unbalanced datasets.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.deprecated()", "path": "modules/generated/sklearn.utils.deprecated#sklearn.utils.deprecated", "type": "utils", "text": "\nDecorator to mark a function or class as deprecated.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.estimator_checks.check_estimator()", "path": "modules/generated/sklearn.utils.estimator_checks.check_estimator#sklearn.utils.estimator_checks.check_estimator", "type": "utils.estimator_checks", "text": "\nCheck if estimator adheres to scikit-learn conventions.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.estimator_checks.parametrize_with_checks()", "path": "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks#sklearn.utils.estimator_checks.parametrize_with_checks", "type": "utils.estimator_checks", "text": "\nPytest specific decorator for parametrizing estimator checks.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.estimator_html_repr()", "path": "modules/generated/sklearn.utils.estimator_html_repr#sklearn.utils.estimator_html_repr", "type": "utils", "text": "\nBuild a HTML representation of an estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.extmath.density()", "path": "modules/generated/sklearn.utils.extmath.density#sklearn.utils.extmath.density", "type": "utils.extmath", "text": "\nCompute density of a sparse vector.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.extmath.fast_logdet()", "path": "modules/generated/sklearn.utils.extmath.fast_logdet#sklearn.utils.extmath.fast_logdet", "type": "utils.extmath", "text": "\nCompute log(det(A)) for A symmetric.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.extmath.randomized_range_finder()", "path": "modules/generated/sklearn.utils.extmath.randomized_range_finder#sklearn.utils.extmath.randomized_range_finder", "type": "utils.extmath", "text": "\nComputes an orthonormal matrix whose range approximates the range of A.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.extmath.randomized_svd()", "path": "modules/generated/sklearn.utils.extmath.randomized_svd#sklearn.utils.extmath.randomized_svd", "type": "utils.extmath", "text": "\nComputes a truncated randomized SVD.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.extmath.safe_sparse_dot()", "path": "modules/generated/sklearn.utils.extmath.safe_sparse_dot#sklearn.utils.extmath.safe_sparse_dot", "type": "utils.extmath", "text": "\nDot product that handle the sparse matrix case correctly.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.extmath.weighted_mode()", "path": "modules/generated/sklearn.utils.extmath.weighted_mode#sklearn.utils.extmath.weighted_mode", "type": "utils.extmath", "text": "\nReturns an array of the weighted modal (most common) value in a.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.gen_even_slices()", "path": "modules/generated/sklearn.utils.gen_even_slices#sklearn.utils.gen_even_slices", "type": "utils", "text": "\nGenerator to create n_packs slices going up to n.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.graph.single_source_shortest_path_length()", "path": "modules/generated/sklearn.utils.graph.single_source_shortest_path_length#sklearn.utils.graph.single_source_shortest_path_length", "type": "utils.graph", "text": "\nReturn the shortest path length from source to all reachable nodes.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.graph_shortest_path.graph_shortest_path()", "path": "modules/generated/sklearn.utils.graph_shortest_path.graph_shortest_path#sklearn.utils.graph_shortest_path.graph_shortest_path", "type": "utils.graph_shortest_path", "text": "\nPerform a shortest-path graph search on a positive directed or undirected\ngraph.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.indexable()", "path": "modules/generated/sklearn.utils.indexable#sklearn.utils.indexable", "type": "utils", "text": "\nMake arrays indexable for cross-validation.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.metaestimators.if_delegate_has_method()", "path": "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method#sklearn.utils.metaestimators.if_delegate_has_method", "type": "utils.metaestimators", "text": "\nCreate a decorator for methods that are delegated to a sub-estimator\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.multiclass.is_multilabel()", "path": "modules/generated/sklearn.utils.multiclass.is_multilabel#sklearn.utils.multiclass.is_multilabel", "type": "utils.multiclass", "text": "\nCheck if `y` is in a multilabel format.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.multiclass.type_of_target()", "path": "modules/generated/sklearn.utils.multiclass.type_of_target#sklearn.utils.multiclass.type_of_target", "type": "utils.multiclass", "text": "\nDetermine the type of data indicated by the target.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.multiclass.unique_labels()", "path": "modules/generated/sklearn.utils.multiclass.unique_labels#sklearn.utils.multiclass.unique_labels", "type": "utils.multiclass", "text": "\nExtract an ordered array of unique labels.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.murmurhash3_32()", "path": "modules/generated/sklearn.utils.murmurhash3_32#sklearn.utils.murmurhash3_32", "type": "utils", "text": "\nCompute the 32bit murmurhash3 of key at seed.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.parallel_backend()", "path": "modules/generated/sklearn.utils.parallel_backend#sklearn.utils.parallel_backend", "type": "utils", "text": "\nChange the default backend used by Parallel inside a with block.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.random.sample_without_replacement()", "path": "modules/generated/sklearn.utils.random.sample_without_replacement#sklearn.utils.random.sample_without_replacement", "type": "utils.random", "text": "\nSample integers without replacement.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.register_parallel_backend()", "path": "modules/generated/sklearn.utils.register_parallel_backend#sklearn.utils.register_parallel_backend", "type": "utils", "text": "\nRegister a new Parallel backend factory.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.resample()", "path": "modules/generated/sklearn.utils.resample#sklearn.utils.resample", "type": "utils", "text": "\nResample arrays or sparse matrices in a consistent way.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.safe_mask()", "path": "modules/generated/sklearn.utils.safe_mask#sklearn.utils.safe_mask", "type": "utils", "text": "\nReturn a mask which is safe to use on X.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.safe_sqr()", "path": "modules/generated/sklearn.utils.safe_sqr#sklearn.utils.safe_sqr", "type": "utils", "text": "\nElement wise squaring of array-likes and sparse matrices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.shuffle()", "path": "modules/generated/sklearn.utils.shuffle#sklearn.utils.shuffle", "type": "utils", "text": "\nShuffle arrays or sparse matrices in a consistent way.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.sparsefuncs.incr_mean_variance_axis()", "path": "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis#sklearn.utils.sparsefuncs.incr_mean_variance_axis", "type": "utils.sparsefuncs", "text": "\nCompute incremental mean and variance along an axis on a CSR or CSC matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.sparsefuncs.inplace_column_scale()", "path": "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale#sklearn.utils.sparsefuncs.inplace_column_scale", "type": "utils.sparsefuncs", "text": "\nInplace column scaling of a CSC/CSR matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.sparsefuncs.inplace_csr_column_scale()", "path": "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale#sklearn.utils.sparsefuncs.inplace_csr_column_scale", "type": "utils.sparsefuncs", "text": "\nInplace column scaling of a CSR matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.sparsefuncs.inplace_row_scale()", "path": "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale#sklearn.utils.sparsefuncs.inplace_row_scale", "type": "utils.sparsefuncs", "text": "\nInplace row scaling of a CSR or CSC matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.sparsefuncs.inplace_swap_column()", "path": "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column#sklearn.utils.sparsefuncs.inplace_swap_column", "type": "utils.sparsefuncs", "text": "\nSwaps two columns of a CSC/CSR matrix in-place.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.sparsefuncs.inplace_swap_row()", "path": "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row#sklearn.utils.sparsefuncs.inplace_swap_row", "type": "utils.sparsefuncs", "text": "\nSwaps two rows of a CSC/CSR matrix in-place.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.sparsefuncs.mean_variance_axis()", "path": "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis#sklearn.utils.sparsefuncs.mean_variance_axis", "type": "utils.sparsefuncs", "text": "\nCompute mean and variance along an axis on a CSR or CSC matrix.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.sparsefuncs_fast.inplace_csr_row_normalize_l1()", "path": "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1#sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "type": "utils.sparsefuncs_fast", "text": "\nInplace row normalize using the l1 norm\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.sparsefuncs_fast.inplace_csr_row_normalize_l2()", "path": "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2#sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "type": "utils.sparsefuncs_fast", "text": "\nInplace row normalize using the l2 norm\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.validation.check_is_fitted()", "path": "modules/generated/sklearn.utils.validation.check_is_fitted#sklearn.utils.validation.check_is_fitted", "type": "utils.validation", "text": "\nPerform is_fitted validation for estimator.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.validation.check_memory()", "path": "modules/generated/sklearn.utils.validation.check_memory#sklearn.utils.validation.check_memory", "type": "utils.validation", "text": "\nCheck that `memory` is joblib.Memory-like.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.validation.check_symmetric()", "path": "modules/generated/sklearn.utils.validation.check_symmetric#sklearn.utils.validation.check_symmetric", "type": "utils.validation", "text": "\nMake sure that array is 2D, square and symmetric.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.validation.column_or_1d()", "path": "modules/generated/sklearn.utils.validation.column_or_1d#sklearn.utils.validation.column_or_1d", "type": "utils.validation", "text": "\nRavel column or 1d numpy array, else raises an error.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils.validation.has_fit_parameter()", "path": "modules/generated/sklearn.utils.validation.has_fit_parameter#sklearn.utils.validation.has_fit_parameter", "type": "utils.validation", "text": "\nChecks whether the estimator\u2019s fit method supports the given parameter.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}, {"name": "utils._safe_indexing()", "path": "modules/generated/sklearn.utils._safe_indexing#sklearn.utils._safe_indexing", "type": "utils", "text": "\nReturn rows, items or columns of X using indices.\n\n  *[LIFO]: last-in, first-out\n  *[FIFO]: first-in, first-out\n\n"}]