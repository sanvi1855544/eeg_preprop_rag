[{"name": "10 minutes to pandas", "path": "user_guide/10min", "type": "Manual", "text": "\nThis is a short introduction to pandas, geared mainly for new users. You can\nsee more complex recipes in the Cookbook.\n\n"}, {"name": "API reference", "path": "reference/index", "type": "General functions", "text": "\nThis page gives an overview of all public pandas objects, functions and\nmethods. All classes and functions exposed in `pandas.*` namespace are public.\n\n"}, {"name": "Categorical data", "path": "user_guide/categorical", "type": "Manual", "text": "\nThis is an introduction to pandas categorical data type, including a short\ncomparison with R\u2019s `factor`.\n\n"}, {"name": "Chart Visualization", "path": "user_guide/visualization", "type": "Manual", "text": "\nThis section demonstrates visualization through charting. For information on\nvisualization of tabular data please see the section on Table Visualization.\n\n"}, {"name": "Computational tools", "path": "user_guide/computation", "type": "Manual", "text": "\n`Series` and `DataFrame` have a method `pct_change()` to compute the percent\nchange over a given number of periods (using `fill_method` to fill NA/null\nvalues before computing the percent change).\n\n"}, {"name": "Cookbook", "path": "user_guide/cookbook", "type": "Manual", "text": "\nThis is a repository for short and sweet examples and links for useful pandas\nrecipes. We encourage users to add to this documentation.\n\n"}, {"name": "DataFrame", "path": "reference/frame", "type": "DataFrame", "text": "\n`DataFrame`([data, index, columns, dtype, copy])\n\n"}, {"name": "Date offsets", "path": "reference/offset_frequency", "type": "Data offsets", "text": "\n`DateOffset`\n\n"}, {"name": "Duplicate Labels", "path": "user_guide/duplicates", "type": "Manual", "text": "\n`Index` objects are not required to be unique; you can have duplicate row or\ncolumn labels. This may be a bit confusing at first. If you\u2019re familiar with\nSQL, you know that row labels are similar to a primary key on a table, and you\nwould never want duplicates in a SQL table. But one of pandas\u2019 roles is to\nclean messy, real-world data before it goes to some downstream system. And\nreal-world data has duplicates, even in fields that are supposed to be unique.\n\n"}, {"name": "Enhancing performance", "path": "user_guide/enhancingperf", "type": "Manual", "text": "\nIn this part of the tutorial, we will investigate how to speed up certain\nfunctions operating on pandas `DataFrames` using three different techniques:\nCython, Numba and `pandas.eval()`. We will see a speed improvement of ~200\nwhen we use Cython and Numba on a test function operating row-wise on the\n`DataFrame`. Using `pandas.eval()` we will speed up a sum by an order of ~2.\n\n"}, {"name": "Essential basic functionality", "path": "user_guide/basics", "type": "Manual", "text": "\nHere we discuss a lot of the essential functionality common to the pandas data\nstructures. To begin, let\u2019s create some example objects like we did in the 10\nminutes to pandas section:\n\n"}, {"name": "Extensions", "path": "reference/extensions", "type": "Extensions", "text": "\nThese are primarily intended for library authors looking to extend pandas\nobjects.\n\n"}, {"name": "Frequently Asked Questions (FAQ)", "path": "user_guide/gotchas", "type": "Manual", "text": "\nThe memory usage of a `DataFrame` (including the index) is shown when calling\nthe `info()`. A configuration option, `display.memory_usage` (see the list of\noptions), specifies if the `DataFrame`\u2019s memory usage will be displayed when\ninvoking the `df.info()` method.\n\n"}, {"name": "General functions", "path": "reference/general_functions", "type": "Input/output", "text": "\n`melt`(frame[, id_vars, value_vars, var_name, ...])\n\n"}, {"name": "General utility functions", "path": "reference/general_utility_functions", "type": "Input/output", "text": "\n`describe_option`(pat[, _print_desc])\n\n"}, {"name": "Group by: split-apply-combine", "path": "user_guide/groupby", "type": "Manual", "text": "\nBy \u201cgroup by\u201d we are referring to a process involving one or more of the\nfollowing steps:\n\n"}, {"name": "GroupBy", "path": "reference/groupby", "type": "GroupBy", "text": "\nGroupBy objects are returned by groupby calls: `pandas.DataFrame.groupby()`,\n`pandas.Series.groupby()`, etc.\n\n"}, {"name": "Index objects", "path": "reference/indexing", "type": "Index Objects", "text": "\nMany of these methods or variants thereof are available on the objects that\ncontain an index (Series/DataFrame) and those should most likely be used\nbefore calling these methods directly.\n\n"}, {"name": "Indexing and selecting data", "path": "user_guide/indexing", "type": "Manual", "text": "\nThe axis labeling information in pandas objects serves many purposes:\n\n"}, {"name": "Input/output", "path": "reference/io", "type": "Input/output", "text": "\n`read_pickle`(filepath_or_buffer[, ...])\n\n"}, {"name": "Intro to data structures", "path": "user_guide/dsintro", "type": "Manual", "text": "\nWe\u2019ll start with a quick, non-comprehensive overview of the fundamental data\nstructures in pandas to get you started. The fundamental behavior about data\ntypes, indexing, and axis labeling / alignment apply across all of the\nobjects. To get started, import NumPy and load pandas into your namespace:\n\n"}, {"name": "IO tools (text, CSV, HDF5, \u2026)", "path": "user_guide/io", "type": "Manual", "text": "\nThe pandas I/O API is a set of top level `reader` functions accessed like\n`pandas.read_csv()` that generally return a pandas object. The corresponding\n`writer` functions are object methods that are accessed like\n`DataFrame.to_csv()`. Below is a table containing available `readers` and\n`writers`.\n\n"}, {"name": "Merge, join, concatenate and compare", "path": "user_guide/merging", "type": "Manual", "text": "\npandas provides various facilities for easily combining together Series or\nDataFrame with various kinds of set logic for the indexes and relational\nalgebra functionality in the case of join / merge-type operations.\n\n"}, {"name": "MultiIndex / advanced indexing", "path": "user_guide/advanced", "type": "Manual", "text": "\nThis section covers indexing with a MultiIndex and other advanced indexing\nfeatures.\n\n"}, {"name": "Nullable Boolean data type", "path": "user_guide/boolean", "type": "Manual", "text": "\nNote\n\n"}, {"name": "Nullable integer data type", "path": "user_guide/integer_na", "type": "Manual", "text": "\nNote\n\n"}, {"name": "Options and settings", "path": "user_guide/options", "type": "Manual", "text": "\npandas has an options system that lets you customize some aspects of its\nbehaviour, display-related options being those the user is most likely to\nadjust.\n\n"}, {"name": "pandas arrays, scalars, and data types", "path": "reference/arrays", "type": "Pandas arrays", "text": "\nFor most data types, pandas uses NumPy arrays as the concrete objects\ncontained with a `Index`, `Series`, or `DataFrame`.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray", "path": "reference/api/pandas.api.extensions.extensionarray", "type": "Extensions", "text": "\nAbstract base class for custom 1-D array types.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray._concat_same_type", "path": "reference/api/pandas.api.extensions.extensionarray._concat_same_type", "type": "Extensions", "text": "\nConcatenate multiple array of this dtype.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray._formatter", "path": "reference/api/pandas.api.extensions.extensionarray._formatter", "type": "Extensions", "text": "\nFormatting function for scalar values.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray._from_factorized", "path": "reference/api/pandas.api.extensions.extensionarray._from_factorized", "type": "Extensions", "text": "\nReconstruct an ExtensionArray after factorization.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray._from_sequence", "path": "reference/api/pandas.api.extensions.extensionarray._from_sequence", "type": "Extensions", "text": "\nConstruct a new ExtensionArray from a sequence of scalars.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray._from_sequence_of_strings", "path": "reference/api/pandas.api.extensions.extensionarray._from_sequence_of_strings", "type": "Extensions", "text": "\nConstruct a new ExtensionArray from a sequence of strings.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray._reduce", "path": "reference/api/pandas.api.extensions.extensionarray._reduce", "type": "Extensions", "text": "\nReturn a scalar result of performing the reduction operation.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray._values_for_argsort", "path": "reference/api/pandas.api.extensions.extensionarray._values_for_argsort", "type": "Extensions", "text": "\nReturn values for sorting.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray._values_for_factorize", "path": "reference/api/pandas.api.extensions.extensionarray._values_for_factorize", "type": "Extensions", "text": "\nReturn an array and missing value suitable for factorization.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.argsort", "path": "reference/api/pandas.api.extensions.extensionarray.argsort", "type": "Extensions", "text": "\nReturn the indices that would sort this array.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.astype", "path": "reference/api/pandas.api.extensions.extensionarray.astype", "type": "Extensions", "text": "\nCast to a NumPy array or ExtensionArray with \u2018dtype\u2019.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.copy", "path": "reference/api/pandas.api.extensions.extensionarray.copy", "type": "Extensions", "text": "\nReturn a copy of the array.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.dropna", "path": "reference/api/pandas.api.extensions.extensionarray.dropna", "type": "Extensions", "text": "\nReturn ExtensionArray without NA values.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.dtype", "path": "reference/api/pandas.api.extensions.extensionarray.dtype", "type": "Extensions", "text": "\nAn instance of \u2018ExtensionDtype\u2019.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.equals", "path": "reference/api/pandas.api.extensions.extensionarray.equals", "type": "Extensions", "text": "\nReturn if another array is equivalent to this array.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.factorize", "path": "reference/api/pandas.api.extensions.extensionarray.factorize", "type": "Extensions", "text": "\nEncode the extension array as an enumerated type.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.fillna", "path": "reference/api/pandas.api.extensions.extensionarray.fillna", "type": "Extensions", "text": "\nFill NA/NaN values using the specified method.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.insert", "path": "reference/api/pandas.api.extensions.extensionarray.insert", "type": "Extensions", "text": "\nInsert an item at the given position.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.isin", "path": "reference/api/pandas.api.extensions.extensionarray.isin", "type": "Extensions", "text": "\nPointwise comparison for set containment in the given values.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.isna", "path": "reference/api/pandas.api.extensions.extensionarray.isna", "type": "Extensions", "text": "\nA 1-D array indicating if each value is missing.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.nbytes", "path": "reference/api/pandas.api.extensions.extensionarray.nbytes", "type": "Extensions", "text": "\nThe number of bytes needed to store this object in memory.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.ndim", "path": "reference/api/pandas.api.extensions.extensionarray.ndim", "type": "Extensions", "text": "\nExtension Arrays are only allowed to be 1-dimensional.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.ravel", "path": "reference/api/pandas.api.extensions.extensionarray.ravel", "type": "Extensions", "text": "\nReturn a flattened view on this array.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.repeat", "path": "reference/api/pandas.api.extensions.extensionarray.repeat", "type": "Extensions", "text": "\nRepeat elements of a ExtensionArray.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.searchsorted", "path": "reference/api/pandas.api.extensions.extensionarray.searchsorted", "type": "Extensions", "text": "\nFind indices where elements should be inserted to maintain order.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.shape", "path": "reference/api/pandas.api.extensions.extensionarray.shape", "type": "Extensions", "text": "\nReturn a tuple of the array dimensions.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.shift", "path": "reference/api/pandas.api.extensions.extensionarray.shift", "type": "Extensions", "text": "\nShift values by desired number.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.take", "path": "reference/api/pandas.api.extensions.extensionarray.take", "type": "Extensions", "text": "\nTake elements from an array.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.tolist", "path": "reference/api/pandas.api.extensions.extensionarray.tolist", "type": "Extensions", "text": "\nReturn a list of the values.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.unique", "path": "reference/api/pandas.api.extensions.extensionarray.unique", "type": "Extensions", "text": "\nCompute the ExtensionArray of unique values.\n\n"}, {"name": "pandas.api.extensions.ExtensionArray.view", "path": "reference/api/pandas.api.extensions.extensionarray.view", "type": "Extensions", "text": "\nReturn a view on the array.\n\n"}, {"name": "pandas.api.extensions.ExtensionDtype", "path": "reference/api/pandas.api.extensions.extensiondtype", "type": "Extensions", "text": "\nA custom data type, to be paired with an ExtensionArray.\n\n"}, {"name": "pandas.api.extensions.ExtensionDtype.construct_array_type", "path": "reference/api/pandas.api.extensions.extensiondtype.construct_array_type", "type": "Extensions", "text": "\nReturn the array type associated with this dtype.\n\n"}, {"name": "pandas.api.extensions.ExtensionDtype.construct_from_string", "path": "reference/api/pandas.api.extensions.extensiondtype.construct_from_string", "type": "Extensions", "text": "\nConstruct this type from a string.\n\n"}, {"name": "pandas.api.extensions.ExtensionDtype.empty", "path": "reference/api/pandas.api.extensions.extensiondtype.empty", "type": "Extensions", "text": "\nConstruct an ExtensionArray of this dtype with the given shape.\n\n"}, {"name": "pandas.api.extensions.ExtensionDtype.is_dtype", "path": "reference/api/pandas.api.extensions.extensiondtype.is_dtype", "type": "Extensions", "text": "\nCheck if we match \u2018dtype\u2019.\n\n"}, {"name": "pandas.api.extensions.ExtensionDtype.kind", "path": "reference/api/pandas.api.extensions.extensiondtype.kind", "type": "Extensions", "text": "\nA character code (one of \u2018biufcmMOSUV\u2019), default \u2018O\u2019\n\n"}, {"name": "pandas.api.extensions.ExtensionDtype.na_value", "path": "reference/api/pandas.api.extensions.extensiondtype.na_value", "type": "Extensions", "text": "\nDefault NA value to use for this type.\n\n"}, {"name": "pandas.api.extensions.ExtensionDtype.name", "path": "reference/api/pandas.api.extensions.extensiondtype.name", "type": "Extensions", "text": "\nA string identifying the data type.\n\n"}, {"name": "pandas.api.extensions.ExtensionDtype.names", "path": "reference/api/pandas.api.extensions.extensiondtype.names", "type": "Extensions", "text": "\nOrdered list of field names, or None if there are no fields.\n\n"}, {"name": "pandas.api.extensions.ExtensionDtype.type", "path": "reference/api/pandas.api.extensions.extensiondtype.type", "type": "Extensions", "text": "\nThe scalar type for the array, e.g. `int`\n\n"}, {"name": "pandas.api.extensions.register_dataframe_accessor", "path": "reference/api/pandas.api.extensions.register_dataframe_accessor", "type": "Extensions", "text": "\nRegister a custom accessor on DataFrame objects.\n\n"}, {"name": "pandas.api.extensions.register_extension_dtype", "path": "reference/api/pandas.api.extensions.register_extension_dtype", "type": "Extensions", "text": "\nRegister an ExtensionType with pandas as class decorator.\n\n"}, {"name": "pandas.api.extensions.register_index_accessor", "path": "reference/api/pandas.api.extensions.register_index_accessor", "type": "Extensions", "text": "\nRegister a custom accessor on Index objects.\n\n"}, {"name": "pandas.api.extensions.register_series_accessor", "path": "reference/api/pandas.api.extensions.register_series_accessor", "type": "Extensions", "text": "\nRegister a custom accessor on Series objects.\n\n"}, {"name": "pandas.api.indexers.BaseIndexer", "path": "reference/api/pandas.api.indexers.baseindexer", "type": "Window", "text": "\nBase class for window bounds calculations.\n\n"}, {"name": "pandas.api.indexers.BaseIndexer.get_window_bounds", "path": "reference/api/pandas.api.indexers.baseindexer.get_window_bounds", "type": "Window", "text": "\nComputes the bounds of a window.\n\n"}, {"name": "pandas.api.indexers.check_array_indexer", "path": "reference/api/pandas.api.indexers.check_array_indexer", "type": "Extensions", "text": "\nCheck if indexer is a valid array indexer for array.\n\n"}, {"name": "pandas.api.indexers.FixedForwardWindowIndexer", "path": "reference/api/pandas.api.indexers.fixedforwardwindowindexer", "type": "Window", "text": "\nCreates window boundaries for fixed-length windows that include the current\nrow.\n\n"}, {"name": "pandas.api.indexers.FixedForwardWindowIndexer.get_window_bounds", "path": "reference/api/pandas.api.indexers.fixedforwardwindowindexer.get_window_bounds", "type": "Window", "text": "\nComputes the bounds of a window.\n\n"}, {"name": "pandas.api.indexers.VariableOffsetWindowIndexer", "path": "reference/api/pandas.api.indexers.variableoffsetwindowindexer", "type": "Window", "text": "\nCalculate window boundaries based on a non-fixed offset such as a BusinessDay.\n\n"}, {"name": "pandas.api.indexers.VariableOffsetWindowIndexer.get_window_bounds", "path": "reference/api/pandas.api.indexers.variableoffsetwindowindexer.get_window_bounds", "type": "Window", "text": "\nComputes the bounds of a window.\n\n"}, {"name": "pandas.api.types.infer_dtype", "path": "reference/api/pandas.api.types.infer_dtype", "type": "General utility functions", "text": "\nEfficiently infer the type of a passed val, or list-like array of values.\nReturn a string describing the type.\n\n"}, {"name": "pandas.api.types.is_bool", "path": "reference/api/pandas.api.types.is_bool", "type": "General utility functions", "text": "\nReturn True if given object is boolean.\n\n"}, {"name": "pandas.api.types.is_bool_dtype", "path": "reference/api/pandas.api.types.is_bool_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of a boolean dtype.\n\n"}, {"name": "pandas.api.types.is_categorical", "path": "reference/api/pandas.api.types.is_categorical", "type": "General utility functions", "text": "\nCheck whether an array-like is a Categorical instance.\n\n"}, {"name": "pandas.api.types.is_categorical_dtype", "path": "reference/api/pandas.api.types.is_categorical_dtype", "type": "General utility functions", "text": "\nCheck whether an array-like or dtype is of the Categorical dtype.\n\n"}, {"name": "pandas.api.types.is_complex", "path": "reference/api/pandas.api.types.is_complex", "type": "General utility functions", "text": "\nReturn True if given object is complex.\n\n"}, {"name": "pandas.api.types.is_complex_dtype", "path": "reference/api/pandas.api.types.is_complex_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of a complex dtype.\n\n"}, {"name": "pandas.api.types.is_datetime64_any_dtype", "path": "reference/api/pandas.api.types.is_datetime64_any_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of the datetime64 dtype.\n\n"}, {"name": "pandas.api.types.is_datetime64_dtype", "path": "reference/api/pandas.api.types.is_datetime64_dtype", "type": "General utility functions", "text": "\nCheck whether an array-like or dtype is of the datetime64 dtype.\n\n"}, {"name": "pandas.api.types.is_datetime64_ns_dtype", "path": "reference/api/pandas.api.types.is_datetime64_ns_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of the datetime64[ns] dtype.\n\n"}, {"name": "pandas.api.types.is_datetime64tz_dtype", "path": "reference/api/pandas.api.types.is_datetime64tz_dtype", "type": "General utility functions", "text": "\nCheck whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\n"}, {"name": "pandas.api.types.is_dict_like", "path": "reference/api/pandas.api.types.is_dict_like", "type": "General utility functions", "text": "\nCheck if the object is dict-like.\n\n"}, {"name": "pandas.api.types.is_extension_array_dtype", "path": "reference/api/pandas.api.types.is_extension_array_dtype", "type": "General utility functions", "text": "\nCheck if an object is a pandas extension array type.\n\n"}, {"name": "pandas.api.types.is_extension_type", "path": "reference/api/pandas.api.types.is_extension_type", "type": "General utility functions", "text": "\nCheck whether an array-like is of a pandas extension class instance.\n\n"}, {"name": "pandas.api.types.is_file_like", "path": "reference/api/pandas.api.types.is_file_like", "type": "General utility functions", "text": "\nCheck if the object is a file-like object.\n\n"}, {"name": "pandas.api.types.is_float", "path": "reference/api/pandas.api.types.is_float", "type": "General utility functions", "text": "\nReturn True if given object is float.\n\n"}, {"name": "pandas.api.types.is_float_dtype", "path": "reference/api/pandas.api.types.is_float_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of a float dtype.\n\n"}, {"name": "pandas.api.types.is_hashable", "path": "reference/api/pandas.api.types.is_hashable", "type": "General utility functions", "text": "\nReturn True if hash(obj) will succeed, False otherwise.\n\n"}, {"name": "pandas.api.types.is_int64_dtype", "path": "reference/api/pandas.api.types.is_int64_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of the int64 dtype.\n\n"}, {"name": "pandas.api.types.is_integer", "path": "reference/api/pandas.api.types.is_integer", "type": "General utility functions", "text": "\nReturn True if given object is integer.\n\n"}, {"name": "pandas.api.types.is_integer_dtype", "path": "reference/api/pandas.api.types.is_integer_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of an integer dtype.\n\n"}, {"name": "pandas.api.types.is_interval", "path": "reference/api/pandas.api.types.is_interval", "type": "General utility functions", "text": "\n\n"}, {"name": "pandas.api.types.is_interval_dtype", "path": "reference/api/pandas.api.types.is_interval_dtype", "type": "General utility functions", "text": "\nCheck whether an array-like or dtype is of the Interval dtype.\n\n"}, {"name": "pandas.api.types.is_iterator", "path": "reference/api/pandas.api.types.is_iterator", "type": "General utility functions", "text": "\nCheck if the object is an iterator.\n\n"}, {"name": "pandas.api.types.is_list_like", "path": "reference/api/pandas.api.types.is_list_like", "type": "General utility functions", "text": "\nCheck if the object is list-like.\n\n"}, {"name": "pandas.api.types.is_named_tuple", "path": "reference/api/pandas.api.types.is_named_tuple", "type": "General utility functions", "text": "\nCheck if the object is a named tuple.\n\n"}, {"name": "pandas.api.types.is_number", "path": "reference/api/pandas.api.types.is_number", "type": "General utility functions", "text": "\nCheck if the object is a number.\n\n"}, {"name": "pandas.api.types.is_numeric_dtype", "path": "reference/api/pandas.api.types.is_numeric_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of a numeric dtype.\n\n"}, {"name": "pandas.api.types.is_object_dtype", "path": "reference/api/pandas.api.types.is_object_dtype", "type": "General utility functions", "text": "\nCheck whether an array-like or dtype is of the object dtype.\n\n"}, {"name": "pandas.api.types.is_period_dtype", "path": "reference/api/pandas.api.types.is_period_dtype", "type": "General utility functions", "text": "\nCheck whether an array-like or dtype is of the Period dtype.\n\n"}, {"name": "pandas.api.types.is_re", "path": "reference/api/pandas.api.types.is_re", "type": "General utility functions", "text": "\nCheck if the object is a regex pattern instance.\n\n"}, {"name": "pandas.api.types.is_re_compilable", "path": "reference/api/pandas.api.types.is_re_compilable", "type": "General utility functions", "text": "\nCheck if the object can be compiled into a regex pattern instance.\n\n"}, {"name": "pandas.api.types.is_scalar", "path": "reference/api/pandas.api.types.is_scalar", "type": "General utility functions", "text": "\nReturn True if given object is scalar.\n\n"}, {"name": "pandas.api.types.is_signed_integer_dtype", "path": "reference/api/pandas.api.types.is_signed_integer_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of a signed integer dtype.\n\n"}, {"name": "pandas.api.types.is_sparse", "path": "reference/api/pandas.api.types.is_sparse", "type": "General utility functions", "text": "\nCheck whether an array-like is a 1-D pandas sparse array.\n\n"}, {"name": "pandas.api.types.is_string_dtype", "path": "reference/api/pandas.api.types.is_string_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of the string dtype.\n\n"}, {"name": "pandas.api.types.is_timedelta64_dtype", "path": "reference/api/pandas.api.types.is_timedelta64_dtype", "type": "General utility functions", "text": "\nCheck whether an array-like or dtype is of the timedelta64 dtype.\n\n"}, {"name": "pandas.api.types.is_timedelta64_ns_dtype", "path": "reference/api/pandas.api.types.is_timedelta64_ns_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of the timedelta64[ns] dtype.\n\n"}, {"name": "pandas.api.types.is_unsigned_integer_dtype", "path": "reference/api/pandas.api.types.is_unsigned_integer_dtype", "type": "General utility functions", "text": "\nCheck whether the provided array or dtype is of an unsigned integer dtype.\n\n"}, {"name": "pandas.api.types.pandas_dtype", "path": "reference/api/pandas.api.types.pandas_dtype", "type": "General utility functions", "text": "\nConvert input into a pandas only dtype object or a numpy dtype object.\n\n"}, {"name": "pandas.api.types.union_categoricals", "path": "reference/api/pandas.api.types.union_categoricals", "type": "General utility functions", "text": "\nCombine list-like of Categorical-like, unioning categories.\n\n"}, {"name": "pandas.array", "path": "reference/api/pandas.array", "type": "Pandas arrays", "text": "\nCreate an array.\n\n"}, {"name": "pandas.arrays.ArrowStringArray", "path": "reference/api/pandas.arrays.arrowstringarray", "type": "Pandas arrays", "text": "\nExtension array for string data in a `pyarrow.ChunkedArray`.\n\n"}, {"name": "pandas.arrays.BooleanArray", "path": "reference/api/pandas.arrays.booleanarray", "type": "Pandas arrays", "text": "\nArray of boolean (True/False) data with missing values.\n\n"}, {"name": "pandas.arrays.DatetimeArray", "path": "reference/api/pandas.arrays.datetimearray", "type": "Pandas arrays", "text": "\nPandas ExtensionArray for tz-naive or tz-aware datetime data.\n\n"}, {"name": "pandas.arrays.IntegerArray", "path": "reference/api/pandas.arrays.integerarray", "type": "Pandas arrays", "text": "\nArray of integer (optional missing) values.\n\n"}, {"name": "pandas.arrays.IntervalArray", "path": "reference/api/pandas.arrays.intervalarray", "type": "Pandas arrays", "text": "\nPandas array for interval data that are closed on the same side.\n\n"}, {"name": "pandas.arrays.IntervalArray.closed", "path": "reference/api/pandas.arrays.intervalarray.closed", "type": "Pandas arrays", "text": "\nWhether the intervals are closed on the left-side, right-side, both or\nneither.\n\n"}, {"name": "pandas.arrays.IntervalArray.contains", "path": "reference/api/pandas.arrays.intervalarray.contains", "type": "Pandas arrays", "text": "\nCheck elementwise if the Intervals contain the value.\n\n"}, {"name": "pandas.arrays.IntervalArray.from_arrays", "path": "reference/api/pandas.arrays.intervalarray.from_arrays", "type": "Pandas arrays", "text": "\nConstruct from two arrays defining the left and right bounds.\n\n"}, {"name": "pandas.arrays.IntervalArray.from_breaks", "path": "reference/api/pandas.arrays.intervalarray.from_breaks", "type": "Pandas arrays", "text": "\nConstruct an IntervalArray from an array of splits.\n\n"}, {"name": "pandas.arrays.IntervalArray.from_tuples", "path": "reference/api/pandas.arrays.intervalarray.from_tuples", "type": "Pandas arrays", "text": "\nConstruct an IntervalArray from an array-like of tuples.\n\n"}, {"name": "pandas.arrays.IntervalArray.is_empty", "path": "reference/api/pandas.arrays.intervalarray.is_empty", "type": "Pandas arrays", "text": "\nIndicates if an interval is empty, meaning it contains no points.\n\n"}, {"name": "pandas.arrays.IntervalArray.is_non_overlapping_monotonic", "path": "reference/api/pandas.arrays.intervalarray.is_non_overlapping_monotonic", "type": "Pandas arrays", "text": "\nReturn True if the IntervalArray is non-overlapping (no Intervals share\npoints) and is either monotonic increasing or monotonic decreasing, else\nFalse.\n\n"}, {"name": "pandas.arrays.IntervalArray.left", "path": "reference/api/pandas.arrays.intervalarray.left", "type": "Pandas arrays", "text": "\nReturn the left endpoints of each Interval in the IntervalArray as an Index.\n\n"}, {"name": "pandas.arrays.IntervalArray.length", "path": "reference/api/pandas.arrays.intervalarray.length", "type": "Pandas arrays", "text": "\nReturn an Index with entries denoting the length of each Interval in the\nIntervalArray.\n\n"}, {"name": "pandas.arrays.IntervalArray.mid", "path": "reference/api/pandas.arrays.intervalarray.mid", "type": "Pandas arrays", "text": "\nReturn the midpoint of each Interval in the IntervalArray as an Index.\n\n"}, {"name": "pandas.arrays.IntervalArray.overlaps", "path": "reference/api/pandas.arrays.intervalarray.overlaps", "type": "Pandas arrays", "text": "\nCheck elementwise if an Interval overlaps the values in the IntervalArray.\n\n"}, {"name": "pandas.arrays.IntervalArray.right", "path": "reference/api/pandas.arrays.intervalarray.right", "type": "Pandas arrays", "text": "\nReturn the right endpoints of each Interval in the IntervalArray as an Index.\n\n"}, {"name": "pandas.arrays.IntervalArray.set_closed", "path": "reference/api/pandas.arrays.intervalarray.set_closed", "type": "Pandas arrays", "text": "\nReturn an IntervalArray identical to the current one, but closed on the\nspecified side.\n\n"}, {"name": "pandas.arrays.IntervalArray.to_tuples", "path": "reference/api/pandas.arrays.intervalarray.to_tuples", "type": "Pandas arrays", "text": "\nReturn an ndarray of tuples of the form (left, right).\n\n"}, {"name": "pandas.arrays.PandasArray", "path": "reference/api/pandas.arrays.pandasarray", "type": "Pandas arrays", "text": "\nA pandas ExtensionArray for NumPy data.\n\n"}, {"name": "pandas.arrays.PeriodArray", "path": "reference/api/pandas.arrays.periodarray", "type": "Input/output", "text": "\nPandas ExtensionArray for storing Period data.\n\n"}, {"name": "pandas.arrays.SparseArray", "path": "reference/api/pandas.arrays.sparsearray", "type": "Pandas arrays", "text": "\nAn ExtensionArray for storing sparse data.\n\n"}, {"name": "pandas.arrays.StringArray", "path": "reference/api/pandas.arrays.stringarray", "type": "Pandas arrays", "text": "\nExtension array for string data.\n\n"}, {"name": "pandas.arrays.TimedeltaArray", "path": "reference/api/pandas.arrays.timedeltaarray", "type": "Pandas arrays", "text": "\nPandas ExtensionArray for timedelta data.\n\n"}, {"name": "pandas.bdate_range", "path": "reference/api/pandas.bdate_range", "type": "General functions", "text": "\nReturn a fixed frequency DatetimeIndex, with business day as the default\nfrequency.\n\n"}, {"name": "pandas.BooleanDtype", "path": "reference/api/pandas.booleandtype", "type": "Pandas arrays", "text": "\nExtension dtype for boolean data.\n\n"}, {"name": "pandas.Categorical", "path": "reference/api/pandas.categorical", "type": "Pandas arrays", "text": "\nRepresent a categorical variable in classic R / S-plus fashion.\n\n"}, {"name": "pandas.Categorical.__array__", "path": "reference/api/pandas.categorical.__array__", "type": "Pandas arrays", "text": "\nThe numpy array interface.\n\n"}, {"name": "pandas.Categorical.categories", "path": "reference/api/pandas.categorical.categories", "type": "Pandas arrays", "text": "\nThe categories of this categorical.\n\n"}, {"name": "pandas.Categorical.codes", "path": "reference/api/pandas.categorical.codes", "type": "Pandas arrays", "text": "\nThe category codes of this categorical.\n\n"}, {"name": "pandas.Categorical.dtype", "path": "reference/api/pandas.categorical.dtype", "type": "Pandas arrays", "text": "\nThe `CategoricalDtype` for this instance.\n\n"}, {"name": "pandas.Categorical.from_codes", "path": "reference/api/pandas.categorical.from_codes", "type": "Pandas arrays", "text": "\nMake a Categorical type from codes and categories or dtype.\n\n"}, {"name": "pandas.Categorical.ordered", "path": "reference/api/pandas.categorical.ordered", "type": "Pandas arrays", "text": "\nWhether the categories have an ordered relationship.\n\n"}, {"name": "pandas.CategoricalDtype", "path": "reference/api/pandas.categoricaldtype", "type": "Pandas arrays", "text": "\nType for categorical data with the categories and orderedness.\n\n"}, {"name": "pandas.CategoricalDtype.categories", "path": "reference/api/pandas.categoricaldtype.categories", "type": "Pandas arrays", "text": "\nAn `Index` containing the unique categories allowed.\n\n"}, {"name": "pandas.CategoricalDtype.ordered", "path": "reference/api/pandas.categoricaldtype.ordered", "type": "Pandas arrays", "text": "\nWhether the categories have an ordered relationship.\n\n"}, {"name": "pandas.CategoricalIndex", "path": "reference/api/pandas.categoricalindex", "type": "Index Objects", "text": "\nIndex based on an underlying `Categorical`.\n\n"}, {"name": "pandas.CategoricalIndex.add_categories", "path": "reference/api/pandas.categoricalindex.add_categories", "type": "Index Objects", "text": "\nAdd new categories.\n\n"}, {"name": "pandas.CategoricalIndex.as_ordered", "path": "reference/api/pandas.categoricalindex.as_ordered", "type": "Index Objects", "text": "\nSet the Categorical to be ordered.\n\n"}, {"name": "pandas.CategoricalIndex.as_unordered", "path": "reference/api/pandas.categoricalindex.as_unordered", "type": "Index Objects", "text": "\nSet the Categorical to be unordered.\n\n"}, {"name": "pandas.CategoricalIndex.categories", "path": "reference/api/pandas.categoricalindex.categories", "type": "Index Objects", "text": "\nThe categories of this categorical.\n\n"}, {"name": "pandas.CategoricalIndex.codes", "path": "reference/api/pandas.categoricalindex.codes", "type": "Index Objects", "text": "\nThe category codes of this categorical.\n\n"}, {"name": "pandas.CategoricalIndex.equals", "path": "reference/api/pandas.categoricalindex.equals", "type": "Index Objects", "text": "\nDetermine if two CategoricalIndex objects contain the same elements.\n\n"}, {"name": "pandas.CategoricalIndex.map", "path": "reference/api/pandas.categoricalindex.map", "type": "Index Objects", "text": "\nMap values using input an input mapping or function.\n\n"}, {"name": "pandas.CategoricalIndex.ordered", "path": "reference/api/pandas.categoricalindex.ordered", "type": "Index Objects", "text": "\nWhether the categories have an ordered relationship.\n\n"}, {"name": "pandas.CategoricalIndex.remove_categories", "path": "reference/api/pandas.categoricalindex.remove_categories", "type": "Index Objects", "text": "\nRemove the specified categories.\n\n"}, {"name": "pandas.CategoricalIndex.remove_unused_categories", "path": "reference/api/pandas.categoricalindex.remove_unused_categories", "type": "Index Objects", "text": "\nRemove categories which are not used.\n\n"}, {"name": "pandas.CategoricalIndex.rename_categories", "path": "reference/api/pandas.categoricalindex.rename_categories", "type": "Index Objects", "text": "\nRename categories.\n\n"}, {"name": "pandas.CategoricalIndex.reorder_categories", "path": "reference/api/pandas.categoricalindex.reorder_categories", "type": "Index Objects", "text": "\nReorder categories as specified in new_categories.\n\n"}, {"name": "pandas.CategoricalIndex.set_categories", "path": "reference/api/pandas.categoricalindex.set_categories", "type": "Index Objects", "text": "\nSet the categories to the specified new_categories.\n\n"}, {"name": "pandas.concat", "path": "reference/api/pandas.concat", "type": "General functions", "text": "\nConcatenate pandas objects along a particular axis with optional set logic\nalong the other axes.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.aggregate", "path": "reference/api/pandas.core.groupby.dataframegroupby.aggregate", "type": "GroupBy", "text": "\nAggregate using one or more operations over the specified axis.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.all", "path": "reference/api/pandas.core.groupby.dataframegroupby.all", "type": "GroupBy", "text": "\nReturn True if all values in the group are truthful, else False.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.any", "path": "reference/api/pandas.core.groupby.dataframegroupby.any", "type": "GroupBy", "text": "\nReturn True if any value in the group is truthful, else False.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.backfill", "path": "reference/api/pandas.core.groupby.dataframegroupby.backfill", "type": "GroupBy", "text": "\nBackward fill the values.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.bfill", "path": "reference/api/pandas.core.groupby.dataframegroupby.bfill", "type": "GroupBy", "text": "\nBackward fill the values.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.boxplot", "path": "reference/api/pandas.core.groupby.dataframegroupby.boxplot", "type": "GroupBy", "text": "\nMake box plots from DataFrameGroupBy data.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.corr", "path": "reference/api/pandas.core.groupby.dataframegroupby.corr", "type": "GroupBy", "text": "\nCompute pairwise correlation of columns, excluding NA/null values.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.corrwith", "path": "reference/api/pandas.core.groupby.dataframegroupby.corrwith", "type": "GroupBy", "text": "\nCompute pairwise correlation.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.count", "path": "reference/api/pandas.core.groupby.dataframegroupby.count", "type": "GroupBy", "text": "\nCompute count of group, excluding missing values.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.cov", "path": "reference/api/pandas.core.groupby.dataframegroupby.cov", "type": "GroupBy", "text": "\nCompute pairwise covariance of columns, excluding NA/null values.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.cumcount", "path": "reference/api/pandas.core.groupby.dataframegroupby.cumcount", "type": "GroupBy", "text": "\nNumber each item in each group from 0 to the length of that group - 1.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.cummax", "path": "reference/api/pandas.core.groupby.dataframegroupby.cummax", "type": "GroupBy", "text": "\nCumulative max for each group.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.cummin", "path": "reference/api/pandas.core.groupby.dataframegroupby.cummin", "type": "GroupBy", "text": "\nCumulative min for each group.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.cumprod", "path": "reference/api/pandas.core.groupby.dataframegroupby.cumprod", "type": "GroupBy", "text": "\nCumulative product for each group.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.cumsum", "path": "reference/api/pandas.core.groupby.dataframegroupby.cumsum", "type": "GroupBy", "text": "\nCumulative sum for each group.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.describe", "path": "reference/api/pandas.core.groupby.dataframegroupby.describe", "type": "GroupBy", "text": "\nGenerate descriptive statistics.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.diff", "path": "reference/api/pandas.core.groupby.dataframegroupby.diff", "type": "GroupBy", "text": "\nFirst discrete difference of element.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.ffill", "path": "reference/api/pandas.core.groupby.dataframegroupby.ffill", "type": "GroupBy", "text": "\nForward fill the values.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.fillna", "path": "reference/api/pandas.core.groupby.dataframegroupby.fillna", "type": "GroupBy", "text": "\nFill NA/NaN values using the specified method.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.filter", "path": "reference/api/pandas.core.groupby.dataframegroupby.filter", "type": "GroupBy", "text": "\nReturn a copy of a DataFrame excluding filtered elements.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.hist", "path": "reference/api/pandas.core.groupby.dataframegroupby.hist", "type": "GroupBy", "text": "\nMake a histogram of the DataFrame\u2019s columns.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.idxmax", "path": "reference/api/pandas.core.groupby.dataframegroupby.idxmax", "type": "GroupBy", "text": "\nReturn index of first occurrence of maximum over requested axis.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.idxmin", "path": "reference/api/pandas.core.groupby.dataframegroupby.idxmin", "type": "GroupBy", "text": "\nReturn index of first occurrence of minimum over requested axis.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.mad", "path": "reference/api/pandas.core.groupby.dataframegroupby.mad", "type": "GroupBy", "text": "\nReturn the mean absolute deviation of the values over the requested axis.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.nunique", "path": "reference/api/pandas.core.groupby.dataframegroupby.nunique", "type": "GroupBy", "text": "\nReturn DataFrame with counts of unique elements in each position.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.pad", "path": "reference/api/pandas.core.groupby.dataframegroupby.pad", "type": "GroupBy", "text": "\nForward fill the values.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.pct_change", "path": "reference/api/pandas.core.groupby.dataframegroupby.pct_change", "type": "GroupBy", "text": "\nCalculate pct_change of each value to previous entry in group.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.plot", "path": "reference/api/pandas.core.groupby.dataframegroupby.plot", "type": "GroupBy", "text": "\nClass implementing the .plot attribute for groupby objects.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.quantile", "path": "reference/api/pandas.core.groupby.dataframegroupby.quantile", "type": "GroupBy", "text": "\nReturn group values at the given quantile, a la numpy.percentile.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.rank", "path": "reference/api/pandas.core.groupby.dataframegroupby.rank", "type": "GroupBy", "text": "\nProvide the rank of values within each group.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.resample", "path": "reference/api/pandas.core.groupby.dataframegroupby.resample", "type": "GroupBy", "text": "\nProvide resampling when using a TimeGrouper.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.sample", "path": "reference/api/pandas.core.groupby.dataframegroupby.sample", "type": "GroupBy", "text": "\nReturn a random sample of items from each group.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.shift", "path": "reference/api/pandas.core.groupby.dataframegroupby.shift", "type": "GroupBy", "text": "\nShift each group by periods observations.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.size", "path": "reference/api/pandas.core.groupby.dataframegroupby.size", "type": "GroupBy", "text": "\nCompute group sizes.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.skew", "path": "reference/api/pandas.core.groupby.dataframegroupby.skew", "type": "GroupBy", "text": "\nReturn unbiased skew over requested axis.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.take", "path": "reference/api/pandas.core.groupby.dataframegroupby.take", "type": "GroupBy", "text": "\nReturn the elements in the given positional indices along an axis.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.transform", "path": "reference/api/pandas.core.groupby.dataframegroupby.transform", "type": "GroupBy", "text": "\nCall function producing a like-indexed DataFrame on each group and return a\nDataFrame having the same indexes as the original object filled with the\ntransformed values.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.tshift", "path": "reference/api/pandas.core.groupby.dataframegroupby.tshift", "type": "GroupBy", "text": "\nShift the time index, using the index\u2019s frequency if available.\n\n"}, {"name": "pandas.core.groupby.DataFrameGroupBy.value_counts", "path": "reference/api/pandas.core.groupby.dataframegroupby.value_counts", "type": "GroupBy", "text": "\nReturn a Series or DataFrame containing counts of unique rows.\n\n"}, {"name": "pandas.core.groupby.GroupBy.__iter__", "path": "reference/api/pandas.core.groupby.groupby.__iter__", "type": "GroupBy", "text": "\nGroupby iterator.\n\n"}, {"name": "pandas.core.groupby.GroupBy.agg", "path": "reference/api/pandas.core.groupby.groupby.agg", "type": "GroupBy", "text": "\n\n"}, {"name": "pandas.core.groupby.GroupBy.all", "path": "reference/api/pandas.core.groupby.groupby.all", "type": "GroupBy", "text": "\nReturn True if all values in the group are truthful, else False.\n\n"}, {"name": "pandas.core.groupby.GroupBy.any", "path": "reference/api/pandas.core.groupby.groupby.any", "type": "GroupBy", "text": "\nReturn True if any value in the group is truthful, else False.\n\n"}, {"name": "pandas.core.groupby.GroupBy.apply", "path": "reference/api/pandas.core.groupby.groupby.apply", "type": "GroupBy", "text": "\nApply function `func` group-wise and combine the results together.\n\n"}, {"name": "pandas.core.groupby.GroupBy.backfill", "path": "reference/api/pandas.core.groupby.groupby.backfill", "type": "GroupBy", "text": "\nBackward fill the values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.bfill", "path": "reference/api/pandas.core.groupby.groupby.bfill", "type": "GroupBy", "text": "\nBackward fill the values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.count", "path": "reference/api/pandas.core.groupby.groupby.count", "type": "GroupBy", "text": "\nCompute count of group, excluding missing values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.cumcount", "path": "reference/api/pandas.core.groupby.groupby.cumcount", "type": "GroupBy", "text": "\nNumber each item in each group from 0 to the length of that group - 1.\n\n"}, {"name": "pandas.core.groupby.GroupBy.cummax", "path": "reference/api/pandas.core.groupby.groupby.cummax", "type": "GroupBy", "text": "\nCumulative max for each group.\n\n"}, {"name": "pandas.core.groupby.GroupBy.cummin", "path": "reference/api/pandas.core.groupby.groupby.cummin", "type": "GroupBy", "text": "\nCumulative min for each group.\n\n"}, {"name": "pandas.core.groupby.GroupBy.cumprod", "path": "reference/api/pandas.core.groupby.groupby.cumprod", "type": "GroupBy", "text": "\nCumulative product for each group.\n\n"}, {"name": "pandas.core.groupby.GroupBy.cumsum", "path": "reference/api/pandas.core.groupby.groupby.cumsum", "type": "GroupBy", "text": "\nCumulative sum for each group.\n\n"}, {"name": "pandas.core.groupby.GroupBy.ffill", "path": "reference/api/pandas.core.groupby.groupby.ffill", "type": "GroupBy", "text": "\nForward fill the values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.first", "path": "reference/api/pandas.core.groupby.groupby.first", "type": "GroupBy", "text": "\nCompute first of group values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.get_group", "path": "reference/api/pandas.core.groupby.groupby.get_group", "type": "GroupBy", "text": "\nConstruct DataFrame from group with provided name.\n\n"}, {"name": "pandas.core.groupby.GroupBy.groups", "path": "reference/api/pandas.core.groupby.groupby.groups", "type": "GroupBy", "text": "\nDict {group name -> group labels}.\n\n"}, {"name": "pandas.core.groupby.GroupBy.head", "path": "reference/api/pandas.core.groupby.groupby.head", "type": "GroupBy", "text": "\nReturn first n rows of each group.\n\n"}, {"name": "pandas.core.groupby.GroupBy.indices", "path": "reference/api/pandas.core.groupby.groupby.indices", "type": "GroupBy", "text": "\nDict {group name -> group indices}.\n\n"}, {"name": "pandas.core.groupby.GroupBy.last", "path": "reference/api/pandas.core.groupby.groupby.last", "type": "GroupBy", "text": "\nCompute last of group values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.max", "path": "reference/api/pandas.core.groupby.groupby.max", "type": "GroupBy", "text": "\nCompute max of group values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.mean", "path": "reference/api/pandas.core.groupby.groupby.mean", "type": "GroupBy", "text": "\nCompute mean of groups, excluding missing values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.median", "path": "reference/api/pandas.core.groupby.groupby.median", "type": "GroupBy", "text": "\nCompute median of groups, excluding missing values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.min", "path": "reference/api/pandas.core.groupby.groupby.min", "type": "GroupBy", "text": "\nCompute min of group values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.ngroup", "path": "reference/api/pandas.core.groupby.groupby.ngroup", "type": "GroupBy", "text": "\nNumber each group from 0 to the number of groups - 1.\n\n"}, {"name": "pandas.core.groupby.GroupBy.nth", "path": "reference/api/pandas.core.groupby.groupby.nth", "type": "GroupBy", "text": "\nTake the nth row from each group if n is an int, otherwise a subset of rows.\n\n"}, {"name": "pandas.core.groupby.GroupBy.ohlc", "path": "reference/api/pandas.core.groupby.groupby.ohlc", "type": "GroupBy", "text": "\nCompute open, high, low and close values of a group, excluding missing values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.pad", "path": "reference/api/pandas.core.groupby.groupby.pad", "type": "GroupBy", "text": "\nForward fill the values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.pct_change", "path": "reference/api/pandas.core.groupby.groupby.pct_change", "type": "GroupBy", "text": "\nCalculate pct_change of each value to previous entry in group.\n\n"}, {"name": "pandas.core.groupby.GroupBy.pipe", "path": "reference/api/pandas.core.groupby.groupby.pipe", "type": "GroupBy", "text": "\nApply a function func with arguments to this GroupBy object and return the\nfunction\u2019s result.\n\n"}, {"name": "pandas.core.groupby.GroupBy.prod", "path": "reference/api/pandas.core.groupby.groupby.prod", "type": "GroupBy", "text": "\nCompute prod of group values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.rank", "path": "reference/api/pandas.core.groupby.groupby.rank", "type": "GroupBy", "text": "\nProvide the rank of values within each group.\n\n"}, {"name": "pandas.core.groupby.GroupBy.sem", "path": "reference/api/pandas.core.groupby.groupby.sem", "type": "GroupBy", "text": "\nCompute standard error of the mean of groups, excluding missing values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.size", "path": "reference/api/pandas.core.groupby.groupby.size", "type": "GroupBy", "text": "\nCompute group sizes.\n\n"}, {"name": "pandas.core.groupby.GroupBy.std", "path": "reference/api/pandas.core.groupby.groupby.std", "type": "GroupBy", "text": "\nCompute standard deviation of groups, excluding missing values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.sum", "path": "reference/api/pandas.core.groupby.groupby.sum", "type": "GroupBy", "text": "\nCompute sum of group values.\n\n"}, {"name": "pandas.core.groupby.GroupBy.tail", "path": "reference/api/pandas.core.groupby.groupby.tail", "type": "GroupBy", "text": "\nReturn last n rows of each group.\n\n"}, {"name": "pandas.core.groupby.GroupBy.var", "path": "reference/api/pandas.core.groupby.groupby.var", "type": "GroupBy", "text": "\nCompute variance of groups, excluding missing values.\n\n"}, {"name": "pandas.core.groupby.SeriesGroupBy.aggregate", "path": "reference/api/pandas.core.groupby.seriesgroupby.aggregate", "type": "Series", "text": "\nAggregate using one or more operations over the specified axis.\n\n"}, {"name": "pandas.core.groupby.SeriesGroupBy.hist", "path": "reference/api/pandas.core.groupby.seriesgroupby.hist", "type": "Series", "text": "\nDraw histogram of the input series using matplotlib.\n\n"}, {"name": "pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing", "path": "reference/api/pandas.core.groupby.seriesgroupby.is_monotonic_decreasing", "type": "Series", "text": "\nReturn boolean if values in the object are monotonic_decreasing.\n\n"}, {"name": "pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing", "path": "reference/api/pandas.core.groupby.seriesgroupby.is_monotonic_increasing", "type": "Series", "text": "\nAlias for is_monotonic.\n\n"}, {"name": "pandas.core.groupby.SeriesGroupBy.nlargest", "path": "reference/api/pandas.core.groupby.seriesgroupby.nlargest", "type": "Series", "text": "\nReturn the largest n elements.\n\n"}, {"name": "pandas.core.groupby.SeriesGroupBy.nsmallest", "path": "reference/api/pandas.core.groupby.seriesgroupby.nsmallest", "type": "Series", "text": "\nReturn the smallest n elements.\n\n"}, {"name": "pandas.core.groupby.SeriesGroupBy.nunique", "path": "reference/api/pandas.core.groupby.seriesgroupby.nunique", "type": "Series", "text": "\nReturn number of unique elements in the group.\n\n"}, {"name": "pandas.core.groupby.SeriesGroupBy.transform", "path": "reference/api/pandas.core.groupby.seriesgroupby.transform", "type": "Series", "text": "\nCall function producing a like-indexed Series on each group and return a\nSeries having the same indexes as the original object filled with the\ntransformed values.\n\n"}, {"name": "pandas.core.groupby.SeriesGroupBy.unique", "path": "reference/api/pandas.core.groupby.seriesgroupby.unique", "type": "Series", "text": "\nReturn unique values of Series object.\n\n"}, {"name": "pandas.core.groupby.SeriesGroupBy.value_counts", "path": "reference/api/pandas.core.groupby.seriesgroupby.value_counts", "type": "Series", "text": "\n\n"}, {"name": "pandas.core.resample.Resampler.__iter__", "path": "reference/api/pandas.core.resample.resampler.__iter__", "type": "Resampling", "text": "\nGroupby iterator.\n\n"}, {"name": "pandas.core.resample.Resampler.aggregate", "path": "reference/api/pandas.core.resample.resampler.aggregate", "type": "Resampling", "text": "\nAggregate using one or more operations over the specified axis.\n\n"}, {"name": "pandas.core.resample.Resampler.apply", "path": "reference/api/pandas.core.resample.resampler.apply", "type": "Resampling", "text": "\nAggregate using one or more operations over the specified axis.\n\n"}, {"name": "pandas.core.resample.Resampler.asfreq", "path": "reference/api/pandas.core.resample.resampler.asfreq", "type": "Resampling", "text": "\nReturn the values at the new freq, essentially a reindex.\n\n"}, {"name": "pandas.core.resample.Resampler.backfill", "path": "reference/api/pandas.core.resample.resampler.backfill", "type": "Resampling", "text": "\nBackward fill the new missing values in the resampled data.\n\n"}, {"name": "pandas.core.resample.Resampler.bfill", "path": "reference/api/pandas.core.resample.resampler.bfill", "type": "Resampling", "text": "\nBackward fill the new missing values in the resampled data.\n\n"}, {"name": "pandas.core.resample.Resampler.count", "path": "reference/api/pandas.core.resample.resampler.count", "type": "Resampling", "text": "\nCompute count of group, excluding missing values.\n\n"}, {"name": "pandas.core.resample.Resampler.ffill", "path": "reference/api/pandas.core.resample.resampler.ffill", "type": "Resampling", "text": "\nForward fill the values.\n\n"}, {"name": "pandas.core.resample.Resampler.fillna", "path": "reference/api/pandas.core.resample.resampler.fillna", "type": "Resampling", "text": "\nFill missing values introduced by upsampling.\n\n"}, {"name": "pandas.core.resample.Resampler.first", "path": "reference/api/pandas.core.resample.resampler.first", "type": "Resampling", "text": "\nCompute first of group values.\n\n"}, {"name": "pandas.core.resample.Resampler.get_group", "path": "reference/api/pandas.core.resample.resampler.get_group", "type": "Resampling", "text": "\nConstruct DataFrame from group with provided name.\n\n"}, {"name": "pandas.core.resample.Resampler.groups", "path": "reference/api/pandas.core.resample.resampler.groups", "type": "Resampling", "text": "\nDict {group name -> group labels}.\n\n"}, {"name": "pandas.core.resample.Resampler.indices", "path": "reference/api/pandas.core.resample.resampler.indices", "type": "Resampling", "text": "\nDict {group name -> group indices}.\n\n"}, {"name": "pandas.core.resample.Resampler.interpolate", "path": "reference/api/pandas.core.resample.resampler.interpolate", "type": "Resampling", "text": "\nInterpolate values according to different methods.\n\n"}, {"name": "pandas.core.resample.Resampler.last", "path": "reference/api/pandas.core.resample.resampler.last", "type": "Resampling", "text": "\nCompute last of group values.\n\n"}, {"name": "pandas.core.resample.Resampler.max", "path": "reference/api/pandas.core.resample.resampler.max", "type": "Resampling", "text": "\nCompute max of group values.\n\n"}, {"name": "pandas.core.resample.Resampler.mean", "path": "reference/api/pandas.core.resample.resampler.mean", "type": "Resampling", "text": "\nCompute mean of groups, excluding missing values.\n\n"}, {"name": "pandas.core.resample.Resampler.median", "path": "reference/api/pandas.core.resample.resampler.median", "type": "Resampling", "text": "\nCompute median of groups, excluding missing values.\n\n"}, {"name": "pandas.core.resample.Resampler.min", "path": "reference/api/pandas.core.resample.resampler.min", "type": "Resampling", "text": "\nCompute min of group values.\n\n"}, {"name": "pandas.core.resample.Resampler.nearest", "path": "reference/api/pandas.core.resample.resampler.nearest", "type": "Resampling", "text": "\nResample by using the nearest value.\n\n"}, {"name": "pandas.core.resample.Resampler.nunique", "path": "reference/api/pandas.core.resample.resampler.nunique", "type": "Resampling", "text": "\nReturn number of unique elements in the group.\n\n"}, {"name": "pandas.core.resample.Resampler.ohlc", "path": "reference/api/pandas.core.resample.resampler.ohlc", "type": "Resampling", "text": "\nCompute open, high, low and close values of a group, excluding missing values.\n\n"}, {"name": "pandas.core.resample.Resampler.pad", "path": "reference/api/pandas.core.resample.resampler.pad", "type": "Resampling", "text": "\nForward fill the values.\n\n"}, {"name": "pandas.core.resample.Resampler.pipe", "path": "reference/api/pandas.core.resample.resampler.pipe", "type": "Resampling", "text": "\nApply a function func with arguments to this Resampler object and return the\nfunction\u2019s result.\n\n"}, {"name": "pandas.core.resample.Resampler.prod", "path": "reference/api/pandas.core.resample.resampler.prod", "type": "Resampling", "text": "\nCompute prod of group values.\n\n"}, {"name": "pandas.core.resample.Resampler.quantile", "path": "reference/api/pandas.core.resample.resampler.quantile", "type": "Resampling", "text": "\nReturn value at the given quantile.\n\n"}, {"name": "pandas.core.resample.Resampler.sem", "path": "reference/api/pandas.core.resample.resampler.sem", "type": "Resampling", "text": "\nCompute standard error of the mean of groups, excluding missing values.\n\n"}, {"name": "pandas.core.resample.Resampler.size", "path": "reference/api/pandas.core.resample.resampler.size", "type": "Resampling", "text": "\nCompute group sizes.\n\n"}, {"name": "pandas.core.resample.Resampler.std", "path": "reference/api/pandas.core.resample.resampler.std", "type": "Resampling", "text": "\nCompute standard deviation of groups, excluding missing values.\n\n"}, {"name": "pandas.core.resample.Resampler.sum", "path": "reference/api/pandas.core.resample.resampler.sum", "type": "Resampling", "text": "\nCompute sum of group values.\n\n"}, {"name": "pandas.core.resample.Resampler.transform", "path": "reference/api/pandas.core.resample.resampler.transform", "type": "Resampling", "text": "\nCall function producing a like-indexed Series on each group and return a\nSeries with the transformed values.\n\n"}, {"name": "pandas.core.resample.Resampler.var", "path": "reference/api/pandas.core.resample.resampler.var", "type": "Resampling", "text": "\nCompute variance of groups, excluding missing values.\n\n"}, {"name": "pandas.core.window.ewm.ExponentialMovingWindow.corr", "path": "reference/api/pandas.core.window.ewm.exponentialmovingwindow.corr", "type": "Window", "text": "\nCalculate the ewm (exponential weighted moment) sample correlation.\n\n"}, {"name": "pandas.core.window.ewm.ExponentialMovingWindow.cov", "path": "reference/api/pandas.core.window.ewm.exponentialmovingwindow.cov", "type": "Window", "text": "\nCalculate the ewm (exponential weighted moment) sample covariance.\n\n"}, {"name": "pandas.core.window.ewm.ExponentialMovingWindow.mean", "path": "reference/api/pandas.core.window.ewm.exponentialmovingwindow.mean", "type": "Window", "text": "\nCalculate the ewm (exponential weighted moment) mean.\n\n"}, {"name": "pandas.core.window.ewm.ExponentialMovingWindow.std", "path": "reference/api/pandas.core.window.ewm.exponentialmovingwindow.std", "type": "Window", "text": "\nCalculate the ewm (exponential weighted moment) standard deviation.\n\n"}, {"name": "pandas.core.window.ewm.ExponentialMovingWindow.sum", "path": "reference/api/pandas.core.window.ewm.exponentialmovingwindow.sum", "type": "Window", "text": "\nCalculate the ewm (exponential weighted moment) sum.\n\n"}, {"name": "pandas.core.window.ewm.ExponentialMovingWindow.var", "path": "reference/api/pandas.core.window.ewm.exponentialmovingwindow.var", "type": "Window", "text": "\nCalculate the ewm (exponential weighted moment) variance.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.aggregate", "path": "reference/api/pandas.core.window.expanding.expanding.aggregate", "type": "Window", "text": "\nAggregate using one or more operations over the specified axis.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.apply", "path": "reference/api/pandas.core.window.expanding.expanding.apply", "type": "Window", "text": "\nCalculate the expanding custom aggregation function.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.corr", "path": "reference/api/pandas.core.window.expanding.expanding.corr", "type": "Window", "text": "\nCalculate the expanding correlation.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.count", "path": "reference/api/pandas.core.window.expanding.expanding.count", "type": "Window", "text": "\nCalculate the expanding count of non NaN observations.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.cov", "path": "reference/api/pandas.core.window.expanding.expanding.cov", "type": "Window", "text": "\nCalculate the expanding sample covariance.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.kurt", "path": "reference/api/pandas.core.window.expanding.expanding.kurt", "type": "Window", "text": "\nCalculate the expanding Fisher\u2019s definition of kurtosis without bias.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.max", "path": "reference/api/pandas.core.window.expanding.expanding.max", "type": "Window", "text": "\nCalculate the expanding maximum.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.mean", "path": "reference/api/pandas.core.window.expanding.expanding.mean", "type": "Window", "text": "\nCalculate the expanding mean.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.median", "path": "reference/api/pandas.core.window.expanding.expanding.median", "type": "Window", "text": "\nCalculate the expanding median.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.min", "path": "reference/api/pandas.core.window.expanding.expanding.min", "type": "Window", "text": "\nCalculate the expanding minimum.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.quantile", "path": "reference/api/pandas.core.window.expanding.expanding.quantile", "type": "Window", "text": "\nCalculate the expanding quantile.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.rank", "path": "reference/api/pandas.core.window.expanding.expanding.rank", "type": "Window", "text": "\nCalculate the expanding rank.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.sem", "path": "reference/api/pandas.core.window.expanding.expanding.sem", "type": "Window", "text": "\nCalculate the expanding standard error of mean.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.skew", "path": "reference/api/pandas.core.window.expanding.expanding.skew", "type": "Window", "text": "\nCalculate the expanding unbiased skewness.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.std", "path": "reference/api/pandas.core.window.expanding.expanding.std", "type": "Window", "text": "\nCalculate the expanding standard deviation.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.sum", "path": "reference/api/pandas.core.window.expanding.expanding.sum", "type": "Window", "text": "\nCalculate the expanding sum.\n\n"}, {"name": "pandas.core.window.expanding.Expanding.var", "path": "reference/api/pandas.core.window.expanding.expanding.var", "type": "Window", "text": "\nCalculate the expanding variance.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.aggregate", "path": "reference/api/pandas.core.window.rolling.rolling.aggregate", "type": "Window", "text": "\nAggregate using one or more operations over the specified axis.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.apply", "path": "reference/api/pandas.core.window.rolling.rolling.apply", "type": "Window", "text": "\nCalculate the rolling custom aggregation function.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.corr", "path": "reference/api/pandas.core.window.rolling.rolling.corr", "type": "Window", "text": "\nCalculate the rolling correlation.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.count", "path": "reference/api/pandas.core.window.rolling.rolling.count", "type": "Window", "text": "\nCalculate the rolling count of non NaN observations.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.cov", "path": "reference/api/pandas.core.window.rolling.rolling.cov", "type": "Window", "text": "\nCalculate the rolling sample covariance.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.kurt", "path": "reference/api/pandas.core.window.rolling.rolling.kurt", "type": "Window", "text": "\nCalculate the rolling Fisher\u2019s definition of kurtosis without bias.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.max", "path": "reference/api/pandas.core.window.rolling.rolling.max", "type": "Window", "text": "\nCalculate the rolling maximum.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.mean", "path": "reference/api/pandas.core.window.rolling.rolling.mean", "type": "Window", "text": "\nCalculate the rolling mean.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.median", "path": "reference/api/pandas.core.window.rolling.rolling.median", "type": "Window", "text": "\nCalculate the rolling median.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.min", "path": "reference/api/pandas.core.window.rolling.rolling.min", "type": "Window", "text": "\nCalculate the rolling minimum.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.quantile", "path": "reference/api/pandas.core.window.rolling.rolling.quantile", "type": "Window", "text": "\nCalculate the rolling quantile.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.rank", "path": "reference/api/pandas.core.window.rolling.rolling.rank", "type": "Window", "text": "\nCalculate the rolling rank.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.sem", "path": "reference/api/pandas.core.window.rolling.rolling.sem", "type": "Window", "text": "\nCalculate the rolling standard error of mean.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.skew", "path": "reference/api/pandas.core.window.rolling.rolling.skew", "type": "Window", "text": "\nCalculate the rolling unbiased skewness.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.std", "path": "reference/api/pandas.core.window.rolling.rolling.std", "type": "Window", "text": "\nCalculate the rolling standard deviation.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.sum", "path": "reference/api/pandas.core.window.rolling.rolling.sum", "type": "Window", "text": "\nCalculate the rolling sum.\n\n"}, {"name": "pandas.core.window.rolling.Rolling.var", "path": "reference/api/pandas.core.window.rolling.rolling.var", "type": "Window", "text": "\nCalculate the rolling variance.\n\n"}, {"name": "pandas.core.window.rolling.Window.mean", "path": "reference/api/pandas.core.window.rolling.window.mean", "type": "Window", "text": "\nCalculate the rolling weighted window mean.\n\n"}, {"name": "pandas.core.window.rolling.Window.std", "path": "reference/api/pandas.core.window.rolling.window.std", "type": "Window", "text": "\nCalculate the rolling weighted window standard deviation.\n\n"}, {"name": "pandas.core.window.rolling.Window.sum", "path": "reference/api/pandas.core.window.rolling.window.sum", "type": "Window", "text": "\nCalculate the rolling weighted window sum.\n\n"}, {"name": "pandas.core.window.rolling.Window.var", "path": "reference/api/pandas.core.window.rolling.window.var", "type": "Window", "text": "\nCalculate the rolling weighted window variance.\n\n"}, {"name": "pandas.crosstab", "path": "reference/api/pandas.crosstab", "type": "General functions", "text": "\nCompute a simple cross tabulation of two (or more) factors. By default\ncomputes a frequency table of the factors unless an array of values and an\naggregation function are passed.\n\n"}, {"name": "pandas.cut", "path": "reference/api/pandas.cut", "type": "General functions", "text": "\nBin values into discrete intervals.\n\n"}, {"name": "pandas.DataFrame", "path": "reference/api/pandas.dataframe", "type": "DataFrame", "text": "\nTwo-dimensional, size-mutable, potentially heterogeneous tabular data.\n\n"}, {"name": "pandas.DataFrame.__iter__", "path": "reference/api/pandas.dataframe.__iter__", "type": "DataFrame", "text": "\nIterate over info axis.\n\n"}, {"name": "pandas.DataFrame.abs", "path": "reference/api/pandas.dataframe.abs", "type": "DataFrame", "text": "\nReturn a Series/DataFrame with absolute numeric value of each element.\n\n"}, {"name": "pandas.DataFrame.add", "path": "reference/api/pandas.dataframe.add", "type": "DataFrame", "text": "\nGet Addition of dataframe and other, element-wise (binary operator add).\n\n"}, {"name": "pandas.DataFrame.add_prefix", "path": "reference/api/pandas.dataframe.add_prefix", "type": "DataFrame", "text": "\nPrefix labels with string prefix.\n\n"}, {"name": "pandas.DataFrame.add_suffix", "path": "reference/api/pandas.dataframe.add_suffix", "type": "DataFrame", "text": "\nSuffix labels with string suffix.\n\n"}, {"name": "pandas.DataFrame.agg", "path": "reference/api/pandas.dataframe.agg", "type": "DataFrame", "text": "\nAggregate using one or more operations over the specified axis.\n\n"}, {"name": "pandas.DataFrame.aggregate", "path": "reference/api/pandas.dataframe.aggregate", "type": "DataFrame", "text": "\nAggregate using one or more operations over the specified axis.\n\n"}, {"name": "pandas.DataFrame.align", "path": "reference/api/pandas.dataframe.align", "type": "DataFrame", "text": "\nAlign two objects on their axes with the specified join method.\n\n"}, {"name": "pandas.DataFrame.all", "path": "reference/api/pandas.dataframe.all", "type": "DataFrame", "text": "\nReturn whether all elements are True, potentially over an axis.\n\n"}, {"name": "pandas.DataFrame.any", "path": "reference/api/pandas.dataframe.any", "type": "DataFrame", "text": "\nReturn whether any element is True, potentially over an axis.\n\n"}, {"name": "pandas.DataFrame.append", "path": "reference/api/pandas.dataframe.append", "type": "DataFrame", "text": "\nAppend rows of other to the end of caller, returning a new object.\n\n"}, {"name": "pandas.DataFrame.apply", "path": "reference/api/pandas.dataframe.apply", "type": "DataFrame", "text": "\nApply a function along an axis of the DataFrame.\n\n"}, {"name": "pandas.DataFrame.applymap", "path": "reference/api/pandas.dataframe.applymap", "type": "DataFrame", "text": "\nApply a function to a Dataframe elementwise.\n\n"}, {"name": "pandas.DataFrame.asfreq", "path": "reference/api/pandas.dataframe.asfreq", "type": "DataFrame", "text": "\nConvert time series to specified frequency.\n\n"}, {"name": "pandas.DataFrame.asof", "path": "reference/api/pandas.dataframe.asof", "type": "DataFrame", "text": "\nReturn the last row(s) without any NaNs before where.\n\n"}, {"name": "pandas.DataFrame.assign", "path": "reference/api/pandas.dataframe.assign", "type": "DataFrame", "text": "\nAssign new columns to a DataFrame.\n\n"}, {"name": "pandas.DataFrame.astype", "path": "reference/api/pandas.dataframe.astype", "type": "DataFrame", "text": "\nCast a pandas object to a specified dtype `dtype`.\n\n"}, {"name": "pandas.DataFrame.at", "path": "reference/api/pandas.dataframe.at", "type": "DataFrame", "text": "\nAccess a single value for a row/column label pair.\n\n"}, {"name": "pandas.DataFrame.at_time", "path": "reference/api/pandas.dataframe.at_time", "type": "DataFrame", "text": "\nSelect values at particular time of day (e.g., 9:30AM).\n\n"}, {"name": "pandas.DataFrame.attrs", "path": "reference/api/pandas.dataframe.attrs", "type": "DataFrame", "text": "\nDictionary of global attributes of this dataset.\n\n"}, {"name": "pandas.DataFrame.axes", "path": "reference/api/pandas.dataframe.axes", "type": "DataFrame", "text": "\nReturn a list representing the axes of the DataFrame.\n\n"}, {"name": "pandas.DataFrame.backfill", "path": "reference/api/pandas.dataframe.backfill", "type": "DataFrame", "text": "\nSynonym for `DataFrame.fillna()` with `method='bfill'`.\n\n"}, {"name": "pandas.DataFrame.between_time", "path": "reference/api/pandas.dataframe.between_time", "type": "DataFrame", "text": "\nSelect values between particular times of the day (e.g., 9:00-9:30 AM).\n\n"}, {"name": "pandas.DataFrame.bfill", "path": "reference/api/pandas.dataframe.bfill", "type": "DataFrame", "text": "\nSynonym for `DataFrame.fillna()` with `method='bfill'`.\n\n"}, {"name": "pandas.DataFrame.bool", "path": "reference/api/pandas.dataframe.bool", "type": "DataFrame", "text": "\nReturn the bool of a single element Series or DataFrame.\n\n"}, {"name": "pandas.DataFrame.boxplot", "path": "reference/api/pandas.dataframe.boxplot", "type": "DataFrame", "text": "\nMake a box plot from DataFrame columns.\n\n"}, {"name": "pandas.DataFrame.clip", "path": "reference/api/pandas.dataframe.clip", "type": "DataFrame", "text": "\nTrim values at input threshold(s).\n\n"}, {"name": "pandas.DataFrame.columns", "path": "reference/api/pandas.dataframe.columns", "type": "DataFrame", "text": "\nThe column labels of the DataFrame.\n\n"}, {"name": "pandas.DataFrame.combine", "path": "reference/api/pandas.dataframe.combine", "type": "DataFrame", "text": "\nPerform column-wise combine with another DataFrame.\n\n"}, {"name": "pandas.DataFrame.combine_first", "path": "reference/api/pandas.dataframe.combine_first", "type": "DataFrame", "text": "\nUpdate null elements with value in the same location in other.\n\n"}, {"name": "pandas.DataFrame.compare", "path": "reference/api/pandas.dataframe.compare", "type": "DataFrame", "text": "\nCompare to another DataFrame and show the differences.\n\n"}, {"name": "pandas.DataFrame.convert_dtypes", "path": "reference/api/pandas.dataframe.convert_dtypes", "type": "General utility functions", "text": "\nConvert columns to best possible dtypes using dtypes supporting `pd.NA`.\n\n"}, {"name": "pandas.DataFrame.copy", "path": "reference/api/pandas.dataframe.copy", "type": "DataFrame", "text": "\nMake a copy of this object\u2019s indices and data.\n\n"}, {"name": "pandas.DataFrame.corr", "path": "reference/api/pandas.dataframe.corr", "type": "DataFrame", "text": "\nCompute pairwise correlation of columns, excluding NA/null values.\n\n"}, {"name": "pandas.DataFrame.corrwith", "path": "reference/api/pandas.dataframe.corrwith", "type": "DataFrame", "text": "\nCompute pairwise correlation.\n\n"}, {"name": "pandas.DataFrame.count", "path": "reference/api/pandas.dataframe.count", "type": "DataFrame", "text": "\nCount non-NA cells for each column or row.\n\n"}, {"name": "pandas.DataFrame.cov", "path": "reference/api/pandas.dataframe.cov", "type": "DataFrame", "text": "\nCompute pairwise covariance of columns, excluding NA/null values.\n\n"}, {"name": "pandas.DataFrame.cummax", "path": "reference/api/pandas.dataframe.cummax", "type": "DataFrame", "text": "\nReturn cumulative maximum over a DataFrame or Series axis.\n\n"}, {"name": "pandas.DataFrame.cummin", "path": "reference/api/pandas.dataframe.cummin", "type": "DataFrame", "text": "\nReturn cumulative minimum over a DataFrame or Series axis.\n\n"}, {"name": "pandas.DataFrame.cumprod", "path": "reference/api/pandas.dataframe.cumprod", "type": "DataFrame", "text": "\nReturn cumulative product over a DataFrame or Series axis.\n\n"}, {"name": "pandas.DataFrame.cumsum", "path": "reference/api/pandas.dataframe.cumsum", "type": "DataFrame", "text": "\nReturn cumulative sum over a DataFrame or Series axis.\n\n"}, {"name": "pandas.DataFrame.describe", "path": "reference/api/pandas.dataframe.describe", "type": "DataFrame", "text": "\nGenerate descriptive statistics.\n\n"}, {"name": "pandas.DataFrame.diff", "path": "reference/api/pandas.dataframe.diff", "type": "DataFrame", "text": "\nFirst discrete difference of element.\n\n"}, {"name": "pandas.DataFrame.div", "path": "reference/api/pandas.dataframe.div", "type": "DataFrame", "text": "\nGet Floating division of dataframe and other, element-wise (binary operator\ntruediv).\n\n"}, {"name": "pandas.DataFrame.divide", "path": "reference/api/pandas.dataframe.divide", "type": "DataFrame", "text": "\nGet Floating division of dataframe and other, element-wise (binary operator\ntruediv).\n\n"}, {"name": "pandas.DataFrame.dot", "path": "reference/api/pandas.dataframe.dot", "type": "DataFrame", "text": "\nCompute the matrix multiplication between the DataFrame and other.\n\n"}, {"name": "pandas.DataFrame.drop", "path": "reference/api/pandas.dataframe.drop", "type": "DataFrame", "text": "\nDrop specified labels from rows or columns.\n\n"}, {"name": "pandas.DataFrame.drop_duplicates", "path": "reference/api/pandas.dataframe.drop_duplicates", "type": "DataFrame", "text": "\nReturn DataFrame with duplicate rows removed.\n\n"}, {"name": "pandas.DataFrame.droplevel", "path": "reference/api/pandas.dataframe.droplevel", "type": "DataFrame", "text": "\nReturn Series/DataFrame with requested index / column level(s) removed.\n\n"}, {"name": "pandas.DataFrame.dropna", "path": "reference/api/pandas.dataframe.dropna", "type": "DataFrame", "text": "\nRemove missing values.\n\n"}, {"name": "pandas.DataFrame.dtypes", "path": "reference/api/pandas.dataframe.dtypes", "type": "General utility functions", "text": "\nReturn the dtypes in the DataFrame.\n\n"}, {"name": "pandas.DataFrame.duplicated", "path": "reference/api/pandas.dataframe.duplicated", "type": "DataFrame", "text": "\nReturn boolean Series denoting duplicate rows.\n\n"}, {"name": "pandas.DataFrame.empty", "path": "reference/api/pandas.dataframe.empty", "type": "DataFrame", "text": "\nIndicator whether Series/DataFrame is empty.\n\n"}, {"name": "pandas.DataFrame.eq", "path": "reference/api/pandas.dataframe.eq", "type": "DataFrame", "text": "\nGet Equal to of dataframe and other, element-wise (binary operator eq).\n\n"}, {"name": "pandas.DataFrame.equals", "path": "reference/api/pandas.dataframe.equals", "type": "DataFrame", "text": "\nTest whether two objects contain the same elements.\n\n"}, {"name": "pandas.DataFrame.eval", "path": "reference/api/pandas.dataframe.eval", "type": "DataFrame", "text": "\nEvaluate a string describing operations on DataFrame columns.\n\n"}, {"name": "pandas.DataFrame.ewm", "path": "reference/api/pandas.dataframe.ewm", "type": "DataFrame", "text": "\nProvide exponentially weighted (EW) calculations.\n\n"}, {"name": "pandas.DataFrame.expanding", "path": "reference/api/pandas.dataframe.expanding", "type": "DataFrame", "text": "\nProvide expanding window calculations.\n\n"}, {"name": "pandas.DataFrame.explode", "path": "reference/api/pandas.dataframe.explode", "type": "DataFrame", "text": "\nTransform each element of a list-like to a row, replicating index values.\n\n"}, {"name": "pandas.DataFrame.ffill", "path": "reference/api/pandas.dataframe.ffill", "type": "DataFrame", "text": "\nSynonym for `DataFrame.fillna()` with `method='ffill'`.\n\n"}, {"name": "pandas.DataFrame.fillna", "path": "reference/api/pandas.dataframe.fillna", "type": "DataFrame", "text": "\nFill NA/NaN values using the specified method.\n\n"}, {"name": "pandas.DataFrame.filter", "path": "reference/api/pandas.dataframe.filter", "type": "DataFrame", "text": "\nSubset the dataframe rows or columns according to the specified index labels.\n\n"}, {"name": "pandas.DataFrame.first", "path": "reference/api/pandas.dataframe.first", "type": "DataFrame", "text": "\nSelect initial periods of time series data based on a date offset.\n\n"}, {"name": "pandas.DataFrame.first_valid_index", "path": "reference/api/pandas.dataframe.first_valid_index", "type": "DataFrame", "text": "\nReturn index for first non-NA value or None, if no NA value is found.\n\n"}, {"name": "pandas.DataFrame.flags", "path": "reference/api/pandas.dataframe.flags", "type": "DataFrame", "text": "\nGet the properties associated with this pandas object.\n\n"}, {"name": "pandas.DataFrame.floordiv", "path": "reference/api/pandas.dataframe.floordiv", "type": "DataFrame", "text": "\nGet Integer division of dataframe and other, element-wise (binary operator\nfloordiv).\n\n"}, {"name": "pandas.DataFrame.from_dict", "path": "reference/api/pandas.dataframe.from_dict", "type": "DataFrame", "text": "\nConstruct DataFrame from dict of array-like or dicts.\n\n"}, {"name": "pandas.DataFrame.from_records", "path": "reference/api/pandas.dataframe.from_records", "type": "DataFrame", "text": "\nConvert structured or record ndarray to DataFrame.\n\n"}, {"name": "pandas.DataFrame.ge", "path": "reference/api/pandas.dataframe.ge", "type": "DataFrame", "text": "\nGet Greater than or equal to of dataframe and other, element-wise (binary\noperator ge).\n\n"}, {"name": "pandas.DataFrame.get", "path": "reference/api/pandas.dataframe.get", "type": "DataFrame", "text": "\nGet item from object for given key (ex: DataFrame column).\n\n"}, {"name": "pandas.DataFrame.groupby", "path": "reference/api/pandas.dataframe.groupby", "type": "GroupBy", "text": "\nGroup DataFrame using a mapper or by a Series of columns.\n\n"}, {"name": "pandas.DataFrame.gt", "path": "reference/api/pandas.dataframe.gt", "type": "DataFrame", "text": "\nGet Greater than of dataframe and other, element-wise (binary operator gt).\n\n"}, {"name": "pandas.DataFrame.head", "path": "reference/api/pandas.dataframe.head", "type": "DataFrame", "text": "\nReturn the first n rows.\n\n"}, {"name": "pandas.DataFrame.hist", "path": "reference/api/pandas.dataframe.hist", "type": "DataFrame", "text": "\nMake a histogram of the DataFrame\u2019s columns.\n\n"}, {"name": "pandas.DataFrame.iat", "path": "reference/api/pandas.dataframe.iat", "type": "DataFrame", "text": "\nAccess a single value for a row/column pair by integer position.\n\n"}, {"name": "pandas.DataFrame.idxmax", "path": "reference/api/pandas.dataframe.idxmax", "type": "DataFrame", "text": "\nReturn index of first occurrence of maximum over requested axis.\n\n"}, {"name": "pandas.DataFrame.idxmin", "path": "reference/api/pandas.dataframe.idxmin", "type": "DataFrame", "text": "\nReturn index of first occurrence of minimum over requested axis.\n\n"}, {"name": "pandas.DataFrame.iloc", "path": "reference/api/pandas.dataframe.iloc", "type": "DataFrame", "text": "\nPurely integer-location based indexing for selection by position.\n\n"}, {"name": "pandas.DataFrame.index", "path": "reference/api/pandas.dataframe.index", "type": "DataFrame", "text": "\nThe index (row labels) of the DataFrame.\n\n"}, {"name": "pandas.DataFrame.infer_objects", "path": "reference/api/pandas.dataframe.infer_objects", "type": "DataFrame", "text": "\nAttempt to infer better dtypes for object columns.\n\n"}, {"name": "pandas.DataFrame.info", "path": "reference/api/pandas.dataframe.info", "type": "DataFrame", "text": "\nPrint a concise summary of a DataFrame.\n\n"}, {"name": "pandas.DataFrame.insert", "path": "reference/api/pandas.dataframe.insert", "type": "DataFrame", "text": "\nInsert column into DataFrame at specified location.\n\n"}, {"name": "pandas.DataFrame.interpolate", "path": "reference/api/pandas.dataframe.interpolate", "type": "DataFrame", "text": "\nFill NaN values using an interpolation method.\n\n"}, {"name": "pandas.DataFrame.isin", "path": "reference/api/pandas.dataframe.isin", "type": "DataFrame", "text": "\nWhether each element in the DataFrame is contained in values.\n\n"}, {"name": "pandas.DataFrame.isna", "path": "reference/api/pandas.dataframe.isna", "type": "DataFrame", "text": "\nDetect missing values.\n\n"}, {"name": "pandas.DataFrame.isnull", "path": "reference/api/pandas.dataframe.isnull", "type": "DataFrame", "text": "\nDataFrame.isnull is an alias for DataFrame.isna.\n\n"}, {"name": "pandas.DataFrame.items", "path": "reference/api/pandas.dataframe.items", "type": "DataFrame", "text": "\nIterate over (column name, Series) pairs.\n\n"}, {"name": "pandas.DataFrame.iteritems", "path": "reference/api/pandas.dataframe.iteritems", "type": "DataFrame", "text": "\nIterate over (column name, Series) pairs.\n\n"}, {"name": "pandas.DataFrame.iterrows", "path": "reference/api/pandas.dataframe.iterrows", "type": "DataFrame", "text": "\nIterate over DataFrame rows as (index, Series) pairs.\n\n"}, {"name": "pandas.DataFrame.itertuples", "path": "reference/api/pandas.dataframe.itertuples", "type": "DataFrame", "text": "\nIterate over DataFrame rows as namedtuples.\n\n"}, {"name": "pandas.DataFrame.join", "path": "reference/api/pandas.dataframe.join", "type": "DataFrame", "text": "\nJoin columns of another DataFrame.\n\n"}, {"name": "pandas.DataFrame.keys", "path": "reference/api/pandas.dataframe.keys", "type": "DataFrame", "text": "\nGet the \u2018info axis\u2019 (see Indexing for more).\n\n"}, {"name": "pandas.DataFrame.kurt", "path": "reference/api/pandas.dataframe.kurt", "type": "DataFrame", "text": "\nReturn unbiased kurtosis over requested axis.\n\n"}, {"name": "pandas.DataFrame.kurtosis", "path": "reference/api/pandas.dataframe.kurtosis", "type": "DataFrame", "text": "\nReturn unbiased kurtosis over requested axis.\n\n"}, {"name": "pandas.DataFrame.last", "path": "reference/api/pandas.dataframe.last", "type": "DataFrame", "text": "\nSelect final periods of time series data based on a date offset.\n\n"}, {"name": "pandas.DataFrame.last_valid_index", "path": "reference/api/pandas.dataframe.last_valid_index", "type": "DataFrame", "text": "\nReturn index for last non-NA value or None, if no NA value is found.\n\n"}, {"name": "pandas.DataFrame.le", "path": "reference/api/pandas.dataframe.le", "type": "DataFrame", "text": "\nGet Less than or equal to of dataframe and other, element-wise (binary\noperator le).\n\n"}, {"name": "pandas.DataFrame.loc", "path": "reference/api/pandas.dataframe.loc", "type": "DataFrame", "text": "\nAccess a group of rows and columns by label(s) or a boolean array.\n\n"}, {"name": "pandas.DataFrame.lookup", "path": "reference/api/pandas.dataframe.lookup", "type": "DataFrame", "text": "\nLabel-based \u201cfancy indexing\u201d function for DataFrame. Given equal-length arrays\nof row and column labels, return an array of the values corresponding to each\n(row, col) pair.\n\n"}, {"name": "pandas.DataFrame.lt", "path": "reference/api/pandas.dataframe.lt", "type": "DataFrame", "text": "\nGet Less than of dataframe and other, element-wise (binary operator lt).\n\n"}, {"name": "pandas.DataFrame.mad", "path": "reference/api/pandas.dataframe.mad", "type": "DataFrame", "text": "\nReturn the mean absolute deviation of the values over the requested axis.\n\n"}, {"name": "pandas.DataFrame.mask", "path": "reference/api/pandas.dataframe.mask", "type": "DataFrame", "text": "\nReplace values where the condition is True.\n\n"}, {"name": "pandas.DataFrame.max", "path": "reference/api/pandas.dataframe.max", "type": "DataFrame", "text": "\nReturn the maximum of the values over the requested axis.\n\n"}, {"name": "pandas.DataFrame.mean", "path": "reference/api/pandas.dataframe.mean", "type": "DataFrame", "text": "\nReturn the mean of the values over the requested axis.\n\n"}, {"name": "pandas.DataFrame.median", "path": "reference/api/pandas.dataframe.median", "type": "DataFrame", "text": "\nReturn the median of the values over the requested axis.\n\n"}, {"name": "pandas.DataFrame.melt", "path": "reference/api/pandas.dataframe.melt", "type": "DataFrame", "text": "\nUnpivot a DataFrame from wide to long format, optionally leaving identifiers\nset.\n\n"}, {"name": "pandas.DataFrame.memory_usage", "path": "reference/api/pandas.dataframe.memory_usage", "type": "DataFrame", "text": "\nReturn the memory usage of each column in bytes.\n\n"}, {"name": "pandas.DataFrame.merge", "path": "reference/api/pandas.dataframe.merge", "type": "DataFrame", "text": "\nMerge DataFrame or named Series objects with a database-style join.\n\n"}, {"name": "pandas.DataFrame.min", "path": "reference/api/pandas.dataframe.min", "type": "DataFrame", "text": "\nReturn the minimum of the values over the requested axis.\n\n"}, {"name": "pandas.DataFrame.mod", "path": "reference/api/pandas.dataframe.mod", "type": "DataFrame", "text": "\nGet Modulo of dataframe and other, element-wise (binary operator mod).\n\n"}, {"name": "pandas.DataFrame.mode", "path": "reference/api/pandas.dataframe.mode", "type": "DataFrame", "text": "\nGet the mode(s) of each element along the selected axis.\n\n"}, {"name": "pandas.DataFrame.mul", "path": "reference/api/pandas.dataframe.mul", "type": "DataFrame", "text": "\nGet Multiplication of dataframe and other, element-wise (binary operator mul).\n\n"}, {"name": "pandas.DataFrame.multiply", "path": "reference/api/pandas.dataframe.multiply", "type": "DataFrame", "text": "\nGet Multiplication of dataframe and other, element-wise (binary operator mul).\n\n"}, {"name": "pandas.DataFrame.ndim", "path": "reference/api/pandas.dataframe.ndim", "type": "DataFrame", "text": "\nReturn an int representing the number of axes / array dimensions.\n\n"}, {"name": "pandas.DataFrame.ne", "path": "reference/api/pandas.dataframe.ne", "type": "DataFrame", "text": "\nGet Not equal to of dataframe and other, element-wise (binary operator ne).\n\n"}, {"name": "pandas.DataFrame.nlargest", "path": "reference/api/pandas.dataframe.nlargest", "type": "DataFrame", "text": "\nReturn the first n rows ordered by columns in descending order.\n\n"}, {"name": "pandas.DataFrame.notna", "path": "reference/api/pandas.dataframe.notna", "type": "DataFrame", "text": "\nDetect existing (non-missing) values.\n\n"}, {"name": "pandas.DataFrame.notnull", "path": "reference/api/pandas.dataframe.notnull", "type": "DataFrame", "text": "\nDataFrame.notnull is an alias for DataFrame.notna.\n\n"}, {"name": "pandas.DataFrame.nsmallest", "path": "reference/api/pandas.dataframe.nsmallest", "type": "DataFrame", "text": "\nReturn the first n rows ordered by columns in ascending order.\n\n"}, {"name": "pandas.DataFrame.nunique", "path": "reference/api/pandas.dataframe.nunique", "type": "DataFrame", "text": "\nCount number of distinct elements in specified axis.\n\n"}, {"name": "pandas.DataFrame.pad", "path": "reference/api/pandas.dataframe.pad", "type": "DataFrame", "text": "\nSynonym for `DataFrame.fillna()` with `method='ffill'`.\n\n"}, {"name": "pandas.DataFrame.pct_change", "path": "reference/api/pandas.dataframe.pct_change", "type": "DataFrame", "text": "\nPercentage change between the current and a prior element.\n\n"}, {"name": "pandas.DataFrame.pipe", "path": "reference/api/pandas.dataframe.pipe", "type": "DataFrame", "text": "\nApply chainable functions that expect Series or DataFrames.\n\n"}, {"name": "pandas.DataFrame.pivot", "path": "reference/api/pandas.dataframe.pivot", "type": "DataFrame", "text": "\nReturn reshaped DataFrame organized by given index / column values.\n\n"}, {"name": "pandas.DataFrame.pivot_table", "path": "reference/api/pandas.dataframe.pivot_table", "type": "DataFrame", "text": "\nCreate a spreadsheet-style pivot table as a DataFrame.\n\n"}, {"name": "pandas.DataFrame.plot", "path": "reference/api/pandas.dataframe.plot", "type": "DataFrame", "text": "\nMake plots of Series or DataFrame.\n\n"}, {"name": "pandas.DataFrame.plot.area", "path": "reference/api/pandas.dataframe.plot.area", "type": "DataFrame", "text": "\nDraw a stacked area plot.\n\n"}, {"name": "pandas.DataFrame.plot.bar", "path": "reference/api/pandas.dataframe.plot.bar", "type": "DataFrame", "text": "\nVertical bar plot.\n\n"}, {"name": "pandas.DataFrame.plot.barh", "path": "reference/api/pandas.dataframe.plot.barh", "type": "DataFrame", "text": "\nMake a horizontal bar plot.\n\n"}, {"name": "pandas.DataFrame.plot.box", "path": "reference/api/pandas.dataframe.plot.box", "type": "DataFrame", "text": "\nMake a box plot of the DataFrame columns.\n\n"}, {"name": "pandas.DataFrame.plot.density", "path": "reference/api/pandas.dataframe.plot.density", "type": "DataFrame", "text": "\nGenerate Kernel Density Estimate plot using Gaussian kernels.\n\n"}, {"name": "pandas.DataFrame.plot.hexbin", "path": "reference/api/pandas.dataframe.plot.hexbin", "type": "DataFrame", "text": "\nGenerate a hexagonal binning plot.\n\n"}, {"name": "pandas.DataFrame.plot.hist", "path": "reference/api/pandas.dataframe.plot.hist", "type": "DataFrame", "text": "\nDraw one histogram of the DataFrame\u2019s columns.\n\n"}, {"name": "pandas.DataFrame.plot.kde", "path": "reference/api/pandas.dataframe.plot.kde", "type": "DataFrame", "text": "\nGenerate Kernel Density Estimate plot using Gaussian kernels.\n\n"}, {"name": "pandas.DataFrame.plot.line", "path": "reference/api/pandas.dataframe.plot.line", "type": "DataFrame", "text": "\nPlot Series or DataFrame as lines.\n\n"}, {"name": "pandas.DataFrame.plot.pie", "path": "reference/api/pandas.dataframe.plot.pie", "type": "DataFrame", "text": "\nGenerate a pie plot.\n\n"}, {"name": "pandas.DataFrame.plot.scatter", "path": "reference/api/pandas.dataframe.plot.scatter", "type": "DataFrame", "text": "\nCreate a scatter plot with varying marker point size and color.\n\n"}, {"name": "pandas.DataFrame.pop", "path": "reference/api/pandas.dataframe.pop", "type": "DataFrame", "text": "\nReturn item and drop from frame. Raise KeyError if not found.\n\n"}, {"name": "pandas.DataFrame.pow", "path": "reference/api/pandas.dataframe.pow", "type": "DataFrame", "text": "\nGet Exponential power of dataframe and other, element-wise (binary operator\npow).\n\n"}, {"name": "pandas.DataFrame.prod", "path": "reference/api/pandas.dataframe.prod", "type": "DataFrame", "text": "\nReturn the product of the values over the requested axis.\n\n"}, {"name": "pandas.DataFrame.product", "path": "reference/api/pandas.dataframe.product", "type": "DataFrame", "text": "\nReturn the product of the values over the requested axis.\n\n"}, {"name": "pandas.DataFrame.quantile", "path": "reference/api/pandas.dataframe.quantile", "type": "DataFrame", "text": "\nReturn values at the given quantile over requested axis.\n\n"}, {"name": "pandas.DataFrame.query", "path": "reference/api/pandas.dataframe.query", "type": "DataFrame", "text": "\nQuery the columns of a DataFrame with a boolean expression.\n\n"}, {"name": "pandas.DataFrame.radd", "path": "reference/api/pandas.dataframe.radd", "type": "DataFrame", "text": "\nGet Addition of dataframe and other, element-wise (binary operator radd).\n\n"}, {"name": "pandas.DataFrame.rank", "path": "reference/api/pandas.dataframe.rank", "type": "DataFrame", "text": "\nCompute numerical data ranks (1 through n) along axis.\n\n"}, {"name": "pandas.DataFrame.rdiv", "path": "reference/api/pandas.dataframe.rdiv", "type": "DataFrame", "text": "\nGet Floating division of dataframe and other, element-wise (binary operator\nrtruediv).\n\n"}, {"name": "pandas.DataFrame.reindex", "path": "reference/api/pandas.dataframe.reindex", "type": "DataFrame", "text": "\nConform Series/DataFrame to new index with optional filling logic.\n\n"}, {"name": "pandas.DataFrame.reindex_like", "path": "reference/api/pandas.dataframe.reindex_like", "type": "DataFrame", "text": "\nReturn an object with matching indices as other object.\n\n"}, {"name": "pandas.DataFrame.rename", "path": "reference/api/pandas.dataframe.rename", "type": "DataFrame", "text": "\nAlter axes labels.\n\n"}, {"name": "pandas.DataFrame.rename_axis", "path": "reference/api/pandas.dataframe.rename_axis", "type": "DataFrame", "text": "\nSet the name of the axis for the index or columns.\n\n"}, {"name": "pandas.DataFrame.reorder_levels", "path": "reference/api/pandas.dataframe.reorder_levels", "type": "DataFrame", "text": "\nRearrange index levels using input order. May not drop or duplicate levels.\n\n"}, {"name": "pandas.DataFrame.replace", "path": "reference/api/pandas.dataframe.replace", "type": "DataFrame", "text": "\nReplace values given in to_replace with value.\n\n"}, {"name": "pandas.DataFrame.resample", "path": "reference/api/pandas.dataframe.resample", "type": "DataFrame", "text": "\nResample time-series data.\n\n"}, {"name": "pandas.DataFrame.reset_index", "path": "reference/api/pandas.dataframe.reset_index", "type": "DataFrame", "text": "\nReset the index, or a level of it.\n\n"}, {"name": "pandas.DataFrame.rfloordiv", "path": "reference/api/pandas.dataframe.rfloordiv", "type": "DataFrame", "text": "\nGet Integer division of dataframe and other, element-wise (binary operator\nrfloordiv).\n\n"}, {"name": "pandas.DataFrame.rmod", "path": "reference/api/pandas.dataframe.rmod", "type": "DataFrame", "text": "\nGet Modulo of dataframe and other, element-wise (binary operator rmod).\n\n"}, {"name": "pandas.DataFrame.rmul", "path": "reference/api/pandas.dataframe.rmul", "type": "DataFrame", "text": "\nGet Multiplication of dataframe and other, element-wise (binary operator\nrmul).\n\n"}, {"name": "pandas.DataFrame.rolling", "path": "reference/api/pandas.dataframe.rolling", "type": "DataFrame", "text": "\nProvide rolling window calculations.\n\n"}, {"name": "pandas.DataFrame.round", "path": "reference/api/pandas.dataframe.round", "type": "DataFrame", "text": "\nRound a DataFrame to a variable number of decimal places.\n\n"}, {"name": "pandas.DataFrame.rpow", "path": "reference/api/pandas.dataframe.rpow", "type": "DataFrame", "text": "\nGet Exponential power of dataframe and other, element-wise (binary operator\nrpow).\n\n"}, {"name": "pandas.DataFrame.rsub", "path": "reference/api/pandas.dataframe.rsub", "type": "DataFrame", "text": "\nGet Subtraction of dataframe and other, element-wise (binary operator rsub).\n\n"}, {"name": "pandas.DataFrame.rtruediv", "path": "reference/api/pandas.dataframe.rtruediv", "type": "DataFrame", "text": "\nGet Floating division of dataframe and other, element-wise (binary operator\nrtruediv).\n\n"}, {"name": "pandas.DataFrame.sample", "path": "reference/api/pandas.dataframe.sample", "type": "DataFrame", "text": "\nReturn a random sample of items from an axis of object.\n\n"}, {"name": "pandas.DataFrame.select_dtypes", "path": "reference/api/pandas.dataframe.select_dtypes", "type": "General utility functions", "text": "\nReturn a subset of the DataFrame\u2019s columns based on the column dtypes.\n\n"}, {"name": "pandas.DataFrame.sem", "path": "reference/api/pandas.dataframe.sem", "type": "DataFrame", "text": "\nReturn unbiased standard error of the mean over requested axis.\n\n"}, {"name": "pandas.DataFrame.set_axis", "path": "reference/api/pandas.dataframe.set_axis", "type": "DataFrame", "text": "\nAssign desired index to given axis.\n\n"}, {"name": "pandas.DataFrame.set_flags", "path": "reference/api/pandas.dataframe.set_flags", "type": "DataFrame", "text": "\nReturn a new object with updated flags.\n\n"}, {"name": "pandas.DataFrame.set_index", "path": "reference/api/pandas.dataframe.set_index", "type": "DataFrame", "text": "\nSet the DataFrame index using existing columns.\n\n"}, {"name": "pandas.DataFrame.shape", "path": "reference/api/pandas.dataframe.shape", "type": "DataFrame", "text": "\nReturn a tuple representing the dimensionality of the DataFrame.\n\n"}, {"name": "pandas.DataFrame.shift", "path": "reference/api/pandas.dataframe.shift", "type": "DataFrame", "text": "\nShift index by desired number of periods with an optional time freq.\n\n"}, {"name": "pandas.DataFrame.size", "path": "reference/api/pandas.dataframe.size", "type": "DataFrame", "text": "\nReturn an int representing the number of elements in this object.\n\n"}, {"name": "pandas.DataFrame.skew", "path": "reference/api/pandas.dataframe.skew", "type": "DataFrame", "text": "\nReturn unbiased skew over requested axis.\n\n"}, {"name": "pandas.DataFrame.slice_shift", "path": "reference/api/pandas.dataframe.slice_shift", "type": "DataFrame", "text": "\nEquivalent to shift without copying data. The shifted data will not include\nthe dropped periods and the shifted axis will be smaller than the original.\n\n"}, {"name": "pandas.DataFrame.sort_index", "path": "reference/api/pandas.dataframe.sort_index", "type": "DataFrame", "text": "\nSort object by labels (along an axis).\n\n"}, {"name": "pandas.DataFrame.sort_values", "path": "reference/api/pandas.dataframe.sort_values", "type": "DataFrame", "text": "\nSort by the values along either axis.\n\n"}, {"name": "pandas.DataFrame.sparse", "path": "reference/api/pandas.dataframe.sparse", "type": "DataFrame", "text": "\nDataFrame accessor for sparse data.\n\n"}, {"name": "pandas.DataFrame.sparse.density", "path": "reference/api/pandas.dataframe.sparse.density", "type": "DataFrame", "text": "\nRatio of non-sparse points to total (dense) data points.\n\n"}, {"name": "pandas.DataFrame.sparse.from_spmatrix", "path": "reference/api/pandas.dataframe.sparse.from_spmatrix", "type": "DataFrame", "text": "\nCreate a new DataFrame from a scipy sparse matrix.\n\n"}, {"name": "pandas.DataFrame.sparse.to_coo", "path": "reference/api/pandas.dataframe.sparse.to_coo", "type": "DataFrame", "text": "\nReturn the contents of the frame as a sparse SciPy COO matrix.\n\n"}, {"name": "pandas.DataFrame.sparse.to_dense", "path": "reference/api/pandas.dataframe.sparse.to_dense", "type": "DataFrame", "text": "\nConvert a DataFrame with sparse values to dense.\n\n"}, {"name": "pandas.DataFrame.squeeze", "path": "reference/api/pandas.dataframe.squeeze", "type": "DataFrame", "text": "\nSqueeze 1 dimensional axis objects into scalars.\n\n"}, {"name": "pandas.DataFrame.stack", "path": "reference/api/pandas.dataframe.stack", "type": "DataFrame", "text": "\nStack the prescribed level(s) from columns to index.\n\n"}, {"name": "pandas.DataFrame.std", "path": "reference/api/pandas.dataframe.std", "type": "DataFrame", "text": "\nReturn sample standard deviation over requested axis.\n\n"}, {"name": "pandas.DataFrame.style", "path": "reference/api/pandas.dataframe.style", "type": "Style", "text": "\nReturns a Styler object.\n\n"}, {"name": "pandas.DataFrame.sub", "path": "reference/api/pandas.dataframe.sub", "type": "DataFrame", "text": "\nGet Subtraction of dataframe and other, element-wise (binary operator sub).\n\n"}, {"name": "pandas.DataFrame.subtract", "path": "reference/api/pandas.dataframe.subtract", "type": "DataFrame", "text": "\nGet Subtraction of dataframe and other, element-wise (binary operator sub).\n\n"}, {"name": "pandas.DataFrame.sum", "path": "reference/api/pandas.dataframe.sum", "type": "DataFrame", "text": "\nReturn the sum of the values over the requested axis.\n\n"}, {"name": "pandas.DataFrame.swapaxes", "path": "reference/api/pandas.dataframe.swapaxes", "type": "DataFrame", "text": "\nInterchange axes and swap values axes appropriately.\n\n"}, {"name": "pandas.DataFrame.swaplevel", "path": "reference/api/pandas.dataframe.swaplevel", "type": "DataFrame", "text": "\nSwap levels i and j in a `MultiIndex`.\n\n"}, {"name": "pandas.DataFrame.T", "path": "reference/api/pandas.dataframe.t", "type": "DataFrame", "text": "\n\n"}, {"name": "pandas.DataFrame.tail", "path": "reference/api/pandas.dataframe.tail", "type": "DataFrame", "text": "\nReturn the last n rows.\n\n"}, {"name": "pandas.DataFrame.take", "path": "reference/api/pandas.dataframe.take", "type": "DataFrame", "text": "\nReturn the elements in the given positional indices along an axis.\n\n"}, {"name": "pandas.DataFrame.to_clipboard", "path": "reference/api/pandas.dataframe.to_clipboard", "type": "DataFrame", "text": "\nCopy object to the system clipboard.\n\n"}, {"name": "pandas.DataFrame.to_csv", "path": "reference/api/pandas.dataframe.to_csv", "type": "DataFrame", "text": "\nWrite object to a comma-separated values (csv) file.\n\n"}, {"name": "pandas.DataFrame.to_dict", "path": "reference/api/pandas.dataframe.to_dict", "type": "DataFrame", "text": "\nConvert the DataFrame to a dictionary.\n\n"}, {"name": "pandas.DataFrame.to_excel", "path": "reference/api/pandas.dataframe.to_excel", "type": "DataFrame", "text": "\nWrite object to an Excel sheet.\n\n"}, {"name": "pandas.DataFrame.to_feather", "path": "reference/api/pandas.dataframe.to_feather", "type": "DataFrame", "text": "\nWrite a DataFrame to the binary Feather format.\n\n"}, {"name": "pandas.DataFrame.to_gbq", "path": "reference/api/pandas.dataframe.to_gbq", "type": "DataFrame", "text": "\nWrite a DataFrame to a Google BigQuery table.\n\n"}, {"name": "pandas.DataFrame.to_hdf", "path": "reference/api/pandas.dataframe.to_hdf", "type": "DataFrame", "text": "\nWrite the contained data to an HDF5 file using HDFStore.\n\n"}, {"name": "pandas.DataFrame.to_html", "path": "reference/api/pandas.dataframe.to_html", "type": "DataFrame", "text": "\nRender a DataFrame as an HTML table.\n\n"}, {"name": "pandas.DataFrame.to_json", "path": "reference/api/pandas.dataframe.to_json", "type": "DataFrame", "text": "\nConvert the object to a JSON string.\n\n"}, {"name": "pandas.DataFrame.to_latex", "path": "reference/api/pandas.dataframe.to_latex", "type": "DataFrame", "text": "\nRender object to a LaTeX tabular, longtable, or nested table.\n\n"}, {"name": "pandas.DataFrame.to_markdown", "path": "reference/api/pandas.dataframe.to_markdown", "type": "DataFrame", "text": "\nPrint DataFrame in Markdown-friendly format.\n\n"}, {"name": "pandas.DataFrame.to_numpy", "path": "reference/api/pandas.dataframe.to_numpy", "type": "DataFrame", "text": "\nConvert the DataFrame to a NumPy array.\n\n"}, {"name": "pandas.DataFrame.to_parquet", "path": "reference/api/pandas.dataframe.to_parquet", "type": "DataFrame", "text": "\nWrite a DataFrame to the binary parquet format.\n\n"}, {"name": "pandas.DataFrame.to_period", "path": "reference/api/pandas.dataframe.to_period", "type": "Input/output", "text": "\nConvert DataFrame from DatetimeIndex to PeriodIndex.\n\n"}, {"name": "pandas.DataFrame.to_pickle", "path": "reference/api/pandas.dataframe.to_pickle", "type": "DataFrame", "text": "\nPickle (serialize) object to file.\n\n"}, {"name": "pandas.DataFrame.to_records", "path": "reference/api/pandas.dataframe.to_records", "type": "DataFrame", "text": "\nConvert DataFrame to a NumPy record array.\n\n"}, {"name": "pandas.DataFrame.to_sql", "path": "reference/api/pandas.dataframe.to_sql", "type": "DataFrame", "text": "\nWrite records stored in a DataFrame to a SQL database.\n\n"}, {"name": "pandas.DataFrame.to_stata", "path": "reference/api/pandas.dataframe.to_stata", "type": "DataFrame", "text": "\nExport DataFrame object to Stata dta format.\n\n"}, {"name": "pandas.DataFrame.to_string", "path": "reference/api/pandas.dataframe.to_string", "type": "DataFrame", "text": "\nRender a DataFrame to a console-friendly tabular output.\n\n"}, {"name": "pandas.DataFrame.to_timestamp", "path": "reference/api/pandas.dataframe.to_timestamp", "type": "DataFrame", "text": "\nCast to DatetimeIndex of timestamps, at beginning of period.\n\n"}, {"name": "pandas.DataFrame.to_xarray", "path": "reference/api/pandas.dataframe.to_xarray", "type": "DataFrame", "text": "\nReturn an xarray object from the pandas object.\n\n"}, {"name": "pandas.DataFrame.to_xml", "path": "reference/api/pandas.dataframe.to_xml", "type": "DataFrame", "text": "\nRender a DataFrame to an XML document.\n\n"}, {"name": "pandas.DataFrame.transform", "path": "reference/api/pandas.dataframe.transform", "type": "DataFrame", "text": "\nCall `func` on self producing a DataFrame with the same axis shape as self.\n\n"}, {"name": "pandas.DataFrame.transpose", "path": "reference/api/pandas.dataframe.transpose", "type": "DataFrame", "text": "\nTranspose index and columns.\n\n"}, {"name": "pandas.DataFrame.truediv", "path": "reference/api/pandas.dataframe.truediv", "type": "DataFrame", "text": "\nGet Floating division of dataframe and other, element-wise (binary operator\ntruediv).\n\n"}, {"name": "pandas.DataFrame.truncate", "path": "reference/api/pandas.dataframe.truncate", "type": "DataFrame", "text": "\nTruncate a Series or DataFrame before and after some index value.\n\n"}, {"name": "pandas.DataFrame.tshift", "path": "reference/api/pandas.dataframe.tshift", "type": "DataFrame", "text": "\nShift the time index, using the index\u2019s frequency if available.\n\n"}, {"name": "pandas.DataFrame.tz_convert", "path": "reference/api/pandas.dataframe.tz_convert", "type": "DataFrame", "text": "\nConvert tz-aware axis to target time zone.\n\n"}, {"name": "pandas.DataFrame.tz_localize", "path": "reference/api/pandas.dataframe.tz_localize", "type": "DataFrame", "text": "\nLocalize tz-naive index of a Series or DataFrame to target time zone.\n\n"}, {"name": "pandas.DataFrame.unstack", "path": "reference/api/pandas.dataframe.unstack", "type": "DataFrame", "text": "\nPivot a level of the (necessarily hierarchical) index labels.\n\n"}, {"name": "pandas.DataFrame.update", "path": "reference/api/pandas.dataframe.update", "type": "DataFrame", "text": "\nModify in place using non-NA values from another DataFrame.\n\n"}, {"name": "pandas.DataFrame.value_counts", "path": "reference/api/pandas.dataframe.value_counts", "type": "DataFrame", "text": "\nReturn a Series containing counts of unique rows in the DataFrame.\n\n"}, {"name": "pandas.DataFrame.values", "path": "reference/api/pandas.dataframe.values", "type": "DataFrame", "text": "\nReturn a Numpy representation of the DataFrame.\n\n"}, {"name": "pandas.DataFrame.var", "path": "reference/api/pandas.dataframe.var", "type": "DataFrame", "text": "\nReturn unbiased variance over requested axis.\n\n"}, {"name": "pandas.DataFrame.where", "path": "reference/api/pandas.dataframe.where", "type": "DataFrame", "text": "\nReplace values where the condition is False.\n\n"}, {"name": "pandas.DataFrame.xs", "path": "reference/api/pandas.dataframe.xs", "type": "DataFrame", "text": "\nReturn cross-section from the Series/DataFrame.\n\n"}, {"name": "pandas.date_range", "path": "reference/api/pandas.date_range", "type": "General functions", "text": "\nReturn a fixed frequency DatetimeIndex.\n\n"}, {"name": "pandas.DatetimeIndex", "path": "reference/api/pandas.datetimeindex", "type": "Index Objects", "text": "\nImmutable ndarray-like of datetime64 data.\n\n"}, {"name": "pandas.DatetimeIndex.ceil", "path": "reference/api/pandas.datetimeindex.ceil", "type": "Index Objects", "text": "\nPerform ceil operation on the data to the specified freq.\n\n"}, {"name": "pandas.DatetimeIndex.date", "path": "reference/api/pandas.datetimeindex.date", "type": "Index Objects", "text": "\nReturns numpy array of python `datetime.date` objects.\n\n"}, {"name": "pandas.DatetimeIndex.day", "path": "reference/api/pandas.datetimeindex.day", "type": "Index Objects", "text": "\nThe day of the datetime.\n\n"}, {"name": "pandas.DatetimeIndex.day_name", "path": "reference/api/pandas.datetimeindex.day_name", "type": "Index Objects", "text": "\nReturn the day names of the DateTimeIndex with specified locale.\n\n"}, {"name": "pandas.DatetimeIndex.day_of_week", "path": "reference/api/pandas.datetimeindex.day_of_week", "type": "Index Objects", "text": "\nThe day of the week with Monday=0, Sunday=6.\n\n"}, {"name": "pandas.DatetimeIndex.day_of_year", "path": "reference/api/pandas.datetimeindex.day_of_year", "type": "Index Objects", "text": "\nThe ordinal day of the year.\n\n"}, {"name": "pandas.DatetimeIndex.dayofweek", "path": "reference/api/pandas.datetimeindex.dayofweek", "type": "Index Objects", "text": "\nThe day of the week with Monday=0, Sunday=6.\n\n"}, {"name": "pandas.DatetimeIndex.dayofyear", "path": "reference/api/pandas.datetimeindex.dayofyear", "type": "Index Objects", "text": "\nThe ordinal day of the year.\n\n"}, {"name": "pandas.DatetimeIndex.floor", "path": "reference/api/pandas.datetimeindex.floor", "type": "Index Objects", "text": "\nPerform floor operation on the data to the specified freq.\n\n"}, {"name": "pandas.DatetimeIndex.freq", "path": "reference/api/pandas.datetimeindex.freq", "type": "Index Objects", "text": "\nReturn the frequency object if it is set, otherwise None.\n\n"}, {"name": "pandas.DatetimeIndex.freqstr", "path": "reference/api/pandas.datetimeindex.freqstr", "type": "Index Objects", "text": "\nReturn the frequency object as a string if its set, otherwise None.\n\n"}, {"name": "pandas.DatetimeIndex.hour", "path": "reference/api/pandas.datetimeindex.hour", "type": "Index Objects", "text": "\nThe hours of the datetime.\n\n"}, {"name": "pandas.DatetimeIndex.indexer_at_time", "path": "reference/api/pandas.datetimeindex.indexer_at_time", "type": "Index Objects", "text": "\nReturn index locations of values at particular time of day (e.g. 9:30AM).\n\n"}, {"name": "pandas.DatetimeIndex.indexer_between_time", "path": "reference/api/pandas.datetimeindex.indexer_between_time", "type": "Index Objects", "text": "\nReturn index locations of values between particular times of day (e.g.,\n9:00-9:30AM).\n\n"}, {"name": "pandas.DatetimeIndex.inferred_freq", "path": "reference/api/pandas.datetimeindex.inferred_freq", "type": "Index Objects", "text": "\nTries to return a string representing a frequency guess, generated by\ninfer_freq. Returns None if it can\u2019t autodetect the frequency.\n\n"}, {"name": "pandas.DatetimeIndex.is_leap_year", "path": "reference/api/pandas.datetimeindex.is_leap_year", "type": "Index Objects", "text": "\nBoolean indicator if the date belongs to a leap year.\n\n"}, {"name": "pandas.DatetimeIndex.is_month_end", "path": "reference/api/pandas.datetimeindex.is_month_end", "type": "Index Objects", "text": "\nIndicates whether the date is the last day of the month.\n\n"}, {"name": "pandas.DatetimeIndex.is_month_start", "path": "reference/api/pandas.datetimeindex.is_month_start", "type": "Index Objects", "text": "\nIndicates whether the date is the first day of the month.\n\n"}, {"name": "pandas.DatetimeIndex.is_quarter_end", "path": "reference/api/pandas.datetimeindex.is_quarter_end", "type": "Index Objects", "text": "\nIndicator for whether the date is the last day of a quarter.\n\n"}, {"name": "pandas.DatetimeIndex.is_quarter_start", "path": "reference/api/pandas.datetimeindex.is_quarter_start", "type": "Index Objects", "text": "\nIndicator for whether the date is the first day of a quarter.\n\n"}, {"name": "pandas.DatetimeIndex.is_year_end", "path": "reference/api/pandas.datetimeindex.is_year_end", "type": "Index Objects", "text": "\nIndicate whether the date is the last day of the year.\n\n"}, {"name": "pandas.DatetimeIndex.is_year_start", "path": "reference/api/pandas.datetimeindex.is_year_start", "type": "Index Objects", "text": "\nIndicate whether the date is the first day of a year.\n\n"}, {"name": "pandas.DatetimeIndex.mean", "path": "reference/api/pandas.datetimeindex.mean", "type": "Index Objects", "text": "\nReturn the mean value of the Array.\n\n"}, {"name": "pandas.DatetimeIndex.microsecond", "path": "reference/api/pandas.datetimeindex.microsecond", "type": "Index Objects", "text": "\nThe microseconds of the datetime.\n\n"}, {"name": "pandas.DatetimeIndex.minute", "path": "reference/api/pandas.datetimeindex.minute", "type": "Index Objects", "text": "\nThe minutes of the datetime.\n\n"}, {"name": "pandas.DatetimeIndex.month", "path": "reference/api/pandas.datetimeindex.month", "type": "Index Objects", "text": "\nThe month as January=1, December=12.\n\n"}, {"name": "pandas.DatetimeIndex.month_name", "path": "reference/api/pandas.datetimeindex.month_name", "type": "Index Objects", "text": "\nReturn the month names of the DateTimeIndex with specified locale.\n\n"}, {"name": "pandas.DatetimeIndex.nanosecond", "path": "reference/api/pandas.datetimeindex.nanosecond", "type": "Index Objects", "text": "\nThe nanoseconds of the datetime.\n\n"}, {"name": "pandas.DatetimeIndex.normalize", "path": "reference/api/pandas.datetimeindex.normalize", "type": "Index Objects", "text": "\nConvert times to midnight.\n\n"}, {"name": "pandas.DatetimeIndex.quarter", "path": "reference/api/pandas.datetimeindex.quarter", "type": "Index Objects", "text": "\nThe quarter of the date.\n\n"}, {"name": "pandas.DatetimeIndex.round", "path": "reference/api/pandas.datetimeindex.round", "type": "Index Objects", "text": "\nPerform round operation on the data to the specified freq.\n\n"}, {"name": "pandas.DatetimeIndex.second", "path": "reference/api/pandas.datetimeindex.second", "type": "Index Objects", "text": "\nThe seconds of the datetime.\n\n"}, {"name": "pandas.DatetimeIndex.snap", "path": "reference/api/pandas.datetimeindex.snap", "type": "Index Objects", "text": "\nSnap time stamps to nearest occurring frequency.\n\n"}, {"name": "pandas.DatetimeIndex.std", "path": "reference/api/pandas.datetimeindex.std", "type": "Index Objects", "text": "\nReturn sample standard deviation over requested axis.\n\n"}, {"name": "pandas.DatetimeIndex.strftime", "path": "reference/api/pandas.datetimeindex.strftime", "type": "Index Objects", "text": "\nConvert to Index using specified date_format.\n\n"}, {"name": "pandas.DatetimeIndex.time", "path": "reference/api/pandas.datetimeindex.time", "type": "Index Objects", "text": "\nReturns numpy array of `datetime.time` objects.\n\n"}, {"name": "pandas.DatetimeIndex.timetz", "path": "reference/api/pandas.datetimeindex.timetz", "type": "Index Objects", "text": "\nReturns numpy array of `datetime.time` objects with timezone information.\n\n"}, {"name": "pandas.DatetimeIndex.to_frame", "path": "reference/api/pandas.datetimeindex.to_frame", "type": "DataFrame", "text": "\nCreate a DataFrame with a column containing the Index.\n\n"}, {"name": "pandas.DatetimeIndex.to_period", "path": "reference/api/pandas.datetimeindex.to_period", "type": "Input/output", "text": "\nCast to PeriodArray/Index at a particular frequency.\n\n"}, {"name": "pandas.DatetimeIndex.to_perioddelta", "path": "reference/api/pandas.datetimeindex.to_perioddelta", "type": "Input/output", "text": "\nCalculate TimedeltaArray of difference between index values and index\nconverted to PeriodArray at specified freq. Used for vectorized offsets.\n\n"}, {"name": "pandas.DatetimeIndex.to_pydatetime", "path": "reference/api/pandas.datetimeindex.to_pydatetime", "type": "Index Objects", "text": "\nReturn Datetime Array/Index as object ndarray of datetime.datetime objects.\n\n"}, {"name": "pandas.DatetimeIndex.to_series", "path": "reference/api/pandas.datetimeindex.to_series", "type": "Index Objects", "text": "\nCreate a Series with both index and values equal to the index keys useful with\nmap for returning an indexer based on an index.\n\n"}, {"name": "pandas.DatetimeIndex.tz", "path": "reference/api/pandas.datetimeindex.tz", "type": "Index Objects", "text": "\nReturn the timezone.\n\n"}, {"name": "pandas.DatetimeIndex.tz_convert", "path": "reference/api/pandas.datetimeindex.tz_convert", "type": "Index Objects", "text": "\nConvert tz-aware Datetime Array/Index from one time zone to another.\n\n"}, {"name": "pandas.DatetimeIndex.tz_localize", "path": "reference/api/pandas.datetimeindex.tz_localize", "type": "Index Objects", "text": "\nLocalize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index.\n\n"}, {"name": "pandas.DatetimeIndex.week", "path": "reference/api/pandas.datetimeindex.week", "type": "Index Objects", "text": "\nThe week ordinal of the year.\n\n"}, {"name": "pandas.DatetimeIndex.weekday", "path": "reference/api/pandas.datetimeindex.weekday", "type": "Index Objects", "text": "\nThe day of the week with Monday=0, Sunday=6.\n\n"}, {"name": "pandas.DatetimeIndex.weekofyear", "path": "reference/api/pandas.datetimeindex.weekofyear", "type": "Index Objects", "text": "\nThe week ordinal of the year.\n\n"}, {"name": "pandas.DatetimeIndex.year", "path": "reference/api/pandas.datetimeindex.year", "type": "Index Objects", "text": "\nThe year of the datetime.\n\n"}, {"name": "pandas.DatetimeTZDtype", "path": "reference/api/pandas.datetimetzdtype", "type": "Pandas arrays", "text": "\nAn ExtensionDtype for timezone-aware datetime data.\n\n"}, {"name": "pandas.DatetimeTZDtype.tz", "path": "reference/api/pandas.datetimetzdtype.tz", "type": "Pandas arrays", "text": "\nThe timezone.\n\n"}, {"name": "pandas.DatetimeTZDtype.unit", "path": "reference/api/pandas.datetimetzdtype.unit", "type": "Pandas arrays", "text": "\nThe precision of the datetime data.\n\n"}, {"name": "pandas.describe_option", "path": "reference/api/pandas.describe_option", "type": "General utility functions", "text": "\nPrints the description for one or more registered options.\n\n"}, {"name": "pandas.errors.AbstractMethodError", "path": "reference/api/pandas.errors.abstractmethoderror", "type": "General utility functions", "text": "\nRaise this error instead of NotImplementedError for abstract methods while\nkeeping compatibility with Python 2 and Python 3.\n\n"}, {"name": "pandas.errors.AccessorRegistrationWarning", "path": "reference/api/pandas.errors.accessorregistrationwarning", "type": "General utility functions", "text": "\nWarning for attribute conflicts in accessor registration.\n\n"}, {"name": "pandas.errors.DtypeWarning", "path": "reference/api/pandas.errors.dtypewarning", "type": "General utility functions", "text": "\nWarning raised when reading different dtypes in a column from a file.\n\n"}, {"name": "pandas.errors.DuplicateLabelError", "path": "reference/api/pandas.errors.duplicatelabelerror", "type": "General utility functions", "text": "\nError raised when an operation would introduce duplicate labels.\n\n"}, {"name": "pandas.errors.EmptyDataError", "path": "reference/api/pandas.errors.emptydataerror", "type": "General utility functions", "text": "\nException that is thrown in pd.read_csv (by both the C and Python engines)\nwhen empty data or header is encountered.\n\n"}, {"name": "pandas.errors.IntCastingNaNError", "path": "reference/api/pandas.errors.intcastingnanerror", "type": "General utility functions", "text": "\nRaised when attempting an astype operation on an array with NaN to an integer\ndtype.\n\n"}, {"name": "pandas.errors.InvalidIndexError", "path": "reference/api/pandas.errors.invalidindexerror", "type": "General utility functions", "text": "\nException raised when attempting to use an invalid index key.\n\n"}, {"name": "pandas.errors.MergeError", "path": "reference/api/pandas.errors.mergeerror", "type": "General utility functions", "text": "\nError raised when problems arise during merging due to problems with input\ndata. Subclass of ValueError.\n\n"}, {"name": "pandas.errors.NullFrequencyError", "path": "reference/api/pandas.errors.nullfrequencyerror", "type": "General utility functions", "text": "\nError raised when a null freq attribute is used in an operation that needs a\nnon-null frequency, particularly DatetimeIndex.shift, TimedeltaIndex.shift,\nPeriodIndex.shift.\n\n"}, {"name": "pandas.errors.NumbaUtilError", "path": "reference/api/pandas.errors.numbautilerror", "type": "General utility functions", "text": "\nError raised for unsupported Numba engine routines.\n\n"}, {"name": "pandas.errors.OptionError", "path": "reference/api/pandas.errors.optionerror", "type": "General utility functions", "text": "\nException for pandas.options, backwards compatible with KeyError checks.\n\n"}, {"name": "pandas.errors.OutOfBoundsDatetime", "path": "reference/api/pandas.errors.outofboundsdatetime", "type": "General utility functions", "text": "\n\n"}, {"name": "pandas.errors.OutOfBoundsTimedelta", "path": "reference/api/pandas.errors.outofboundstimedelta", "type": "General utility functions", "text": "\nRaised when encountering a timedelta value that cannot be represented as a\ntimedelta64[ns].\n\n"}, {"name": "pandas.errors.ParserError", "path": "reference/api/pandas.errors.parsererror", "type": "General utility functions", "text": "\nException that is raised by an error encountered in parsing file contents.\n\n"}, {"name": "pandas.errors.ParserWarning", "path": "reference/api/pandas.errors.parserwarning", "type": "General utility functions", "text": "\nWarning raised when reading a file that doesn\u2019t use the default \u2018c\u2019 parser.\n\n"}, {"name": "pandas.errors.PerformanceWarning", "path": "reference/api/pandas.errors.performancewarning", "type": "General utility functions", "text": "\nWarning raised when there is a possible performance impact.\n\n"}, {"name": "pandas.errors.UnsortedIndexError", "path": "reference/api/pandas.errors.unsortedindexerror", "type": "General utility functions", "text": "\nError raised when attempting to get a slice of a MultiIndex, and the index has\nnot been lexsorted. Subclass of KeyError.\n\n"}, {"name": "pandas.errors.UnsupportedFunctionCall", "path": "reference/api/pandas.errors.unsupportedfunctioncall", "type": "General utility functions", "text": "\nException raised when attempting to call a numpy function on a pandas object,\nbut that function is not supported by the object e.g.\n`np.cumsum(groupby_object)`.\n\n"}, {"name": "pandas.eval", "path": "reference/api/pandas.eval", "type": "General functions", "text": "\nEvaluate a Python expression as a string using various backends.\n\n"}, {"name": "pandas.ExcelFile.parse", "path": "reference/api/pandas.excelfile.parse", "type": "General functions", "text": "\nParse specified sheet(s) into a DataFrame.\n\n"}, {"name": "pandas.ExcelWriter", "path": "reference/api/pandas.excelwriter", "type": "General functions", "text": "\nClass for writing DataFrame objects into excel sheets.\n\n"}, {"name": "pandas.factorize", "path": "reference/api/pandas.factorize", "type": "General functions", "text": "\nEncode the object as an enumerated type or categorical variable.\n\n"}, {"name": "pandas.Flags", "path": "reference/api/pandas.flags", "type": "General functions", "text": "\nFlags that apply to pandas objects.\n\n"}, {"name": "pandas.Flags.allows_duplicate_labels", "path": "reference/api/pandas.flags.allows_duplicate_labels", "type": "General functions", "text": "\nWhether this object allows duplicate labels.\n\n"}, {"name": "pandas.Float64Index", "path": "reference/api/pandas.float64index", "type": "Index Objects", "text": "\nImmutable sequence used for indexing and alignment. The basic object storing\naxis labels for all pandas objects. Float64Index is a special case of Index\nwith purely float labels. .\n\n"}, {"name": "pandas.get_dummies", "path": "reference/api/pandas.get_dummies", "type": "General functions", "text": "\nConvert categorical variable into dummy/indicator variables.\n\n"}, {"name": "pandas.get_option", "path": "reference/api/pandas.get_option", "type": "General utility functions", "text": "\nRetrieves the value of the specified option.\n\n"}, {"name": "pandas.Grouper", "path": "reference/api/pandas.grouper", "type": "GroupBy", "text": "\nA Grouper allows the user to specify a groupby instruction for an object.\n\n"}, {"name": "pandas.HDFStore.append", "path": "reference/api/pandas.hdfstore.append", "type": "Input/output", "text": "\nAppend to Table in file. Node must already exist and be Table format.\n\n"}, {"name": "pandas.HDFStore.get", "path": "reference/api/pandas.hdfstore.get", "type": "Input/output", "text": "\nRetrieve pandas object stored in file.\n\n"}, {"name": "pandas.HDFStore.groups", "path": "reference/api/pandas.hdfstore.groups", "type": "Input/output", "text": "\nReturn a list of all the top-level nodes.\n\n"}, {"name": "pandas.HDFStore.info", "path": "reference/api/pandas.hdfstore.info", "type": "Input/output", "text": "\nPrint detailed information on the store.\n\n"}, {"name": "pandas.HDFStore.keys", "path": "reference/api/pandas.hdfstore.keys", "type": "Input/output", "text": "\nReturn a list of keys corresponding to objects stored in HDFStore.\n\n"}, {"name": "pandas.HDFStore.put", "path": "reference/api/pandas.hdfstore.put", "type": "Input/output", "text": "\nStore object in HDFStore.\n\n"}, {"name": "pandas.HDFStore.select", "path": "reference/api/pandas.hdfstore.select", "type": "Input/output", "text": "\nRetrieve pandas object stored in file, optionally based on where criteria.\n\n"}, {"name": "pandas.HDFStore.walk", "path": "reference/api/pandas.hdfstore.walk", "type": "Input/output", "text": "\nWalk the pytables group hierarchy for pandas objects.\n\n"}, {"name": "pandas.Index", "path": "reference/api/pandas.index", "type": "Index Objects", "text": "\nImmutable sequence used for indexing and alignment. The basic object storing\naxis labels for all pandas objects.\n\n"}, {"name": "pandas.Index.all", "path": "reference/api/pandas.index.all", "type": "Index Objects", "text": "\nReturn whether all elements are Truthy.\n\n"}, {"name": "pandas.Index.any", "path": "reference/api/pandas.index.any", "type": "Index Objects", "text": "\nReturn whether any element is Truthy.\n\n"}, {"name": "pandas.Index.append", "path": "reference/api/pandas.index.append", "type": "Index Objects", "text": "\nAppend a collection of Index options together.\n\n"}, {"name": "pandas.Index.argmax", "path": "reference/api/pandas.index.argmax", "type": "Index Objects", "text": "\nReturn int position of the largest value in the Series.\n\n"}, {"name": "pandas.Index.argmin", "path": "reference/api/pandas.index.argmin", "type": "Index Objects", "text": "\nReturn int position of the smallest value in the Series.\n\n"}, {"name": "pandas.Index.argsort", "path": "reference/api/pandas.index.argsort", "type": "Index Objects", "text": "\nReturn the integer indices that would sort the index.\n\n"}, {"name": "pandas.Index.array", "path": "reference/api/pandas.index.array", "type": "Index Objects", "text": "\nThe ExtensionArray of the data backing this Series or Index.\n\n"}, {"name": "pandas.Index.asi8", "path": "reference/api/pandas.index.asi8", "type": "Index Objects", "text": "\nInteger representation of the values.\n\n"}, {"name": "pandas.Index.asof", "path": "reference/api/pandas.index.asof", "type": "Index Objects", "text": "\nReturn the label from the index, or, if not present, the previous one.\n\n"}, {"name": "pandas.Index.asof_locs", "path": "reference/api/pandas.index.asof_locs", "type": "Index Objects", "text": "\nReturn the locations (indices) of labels in the index.\n\n"}, {"name": "pandas.Index.astype", "path": "reference/api/pandas.index.astype", "type": "Index Objects", "text": "\nCreate an Index with values cast to dtypes.\n\n"}, {"name": "pandas.Index.copy", "path": "reference/api/pandas.index.copy", "type": "Index Objects", "text": "\nMake a copy of this object.\n\n"}, {"name": "pandas.Index.delete", "path": "reference/api/pandas.index.delete", "type": "Index Objects", "text": "\nMake new Index with passed location(-s) deleted.\n\n"}, {"name": "pandas.Index.difference", "path": "reference/api/pandas.index.difference", "type": "Index Objects", "text": "\nReturn a new Index with elements of index not in other.\n\n"}, {"name": "pandas.Index.drop", "path": "reference/api/pandas.index.drop", "type": "Index Objects", "text": "\nMake new Index with passed list of labels deleted.\n\n"}, {"name": "pandas.Index.drop_duplicates", "path": "reference/api/pandas.index.drop_duplicates", "type": "Index Objects", "text": "\nReturn Index with duplicate values removed.\n\n"}, {"name": "pandas.Index.droplevel", "path": "reference/api/pandas.index.droplevel", "type": "Index Objects", "text": "\nReturn index with requested level(s) removed.\n\n"}, {"name": "pandas.Index.dropna", "path": "reference/api/pandas.index.dropna", "type": "Index Objects", "text": "\nReturn Index without NA/NaN values.\n\n"}, {"name": "pandas.Index.dtype", "path": "reference/api/pandas.index.dtype", "type": "Index Objects", "text": "\nReturn the dtype object of the underlying data.\n\n"}, {"name": "pandas.Index.duplicated", "path": "reference/api/pandas.index.duplicated", "type": "Index Objects", "text": "\nIndicate duplicate index values.\n\n"}, {"name": "pandas.Index.empty", "path": "reference/api/pandas.index.empty", "type": "Index Objects", "text": "\n\n"}, {"name": "pandas.Index.equals", "path": "reference/api/pandas.index.equals", "type": "Index Objects", "text": "\nDetermine if two Index object are equal.\n\n"}, {"name": "pandas.Index.factorize", "path": "reference/api/pandas.index.factorize", "type": "Index Objects", "text": "\nEncode the object as an enumerated type or categorical variable.\n\n"}, {"name": "pandas.Index.fillna", "path": "reference/api/pandas.index.fillna", "type": "Index Objects", "text": "\nFill NA/NaN values with the specified value.\n\n"}, {"name": "pandas.Index.format", "path": "reference/api/pandas.index.format", "type": "Index Objects", "text": "\nRender a string representation of the Index.\n\n"}, {"name": "pandas.Index.get_indexer", "path": "reference/api/pandas.index.get_indexer", "type": "Index Objects", "text": "\nCompute indexer and mask for new index given the current index. The indexer\nshould be then used as an input to ndarray.take to align the current data to\nthe new index.\n\n"}, {"name": "pandas.Index.get_indexer_for", "path": "reference/api/pandas.index.get_indexer_for", "type": "Index Objects", "text": "\nGuaranteed return of an indexer even when non-unique.\n\n"}, {"name": "pandas.Index.get_indexer_non_unique", "path": "reference/api/pandas.index.get_indexer_non_unique", "type": "Index Objects", "text": "\nCompute indexer and mask for new index given the current index. The indexer\nshould be then used as an input to ndarray.take to align the current data to\nthe new index.\n\n"}, {"name": "pandas.Index.get_level_values", "path": "reference/api/pandas.index.get_level_values", "type": "Index Objects", "text": "\nReturn an Index of values for requested level.\n\n"}, {"name": "pandas.Index.get_loc", "path": "reference/api/pandas.index.get_loc", "type": "Index Objects", "text": "\nGet integer location, slice or boolean mask for requested label.\n\n"}, {"name": "pandas.Index.get_slice_bound", "path": "reference/api/pandas.index.get_slice_bound", "type": "Index Objects", "text": "\nCalculate slice bound that corresponds to given label.\n\n"}, {"name": "pandas.Index.get_value", "path": "reference/api/pandas.index.get_value", "type": "Index Objects", "text": "\nFast lookup of value from 1-dimensional ndarray.\n\n"}, {"name": "pandas.Index.groupby", "path": "reference/api/pandas.index.groupby", "type": "GroupBy", "text": "\nGroup the index labels by a given array of values.\n\n"}, {"name": "pandas.Index.has_duplicates", "path": "reference/api/pandas.index.has_duplicates", "type": "Index Objects", "text": "\nCheck if the Index has duplicate values.\n\n"}, {"name": "pandas.Index.hasnans", "path": "reference/api/pandas.index.hasnans", "type": "Index Objects", "text": "\nReturn True if there are any NaNs.\n\n"}, {"name": "pandas.Index.holds_integer", "path": "reference/api/pandas.index.holds_integer", "type": "Index Objects", "text": "\nWhether the type is an integer type.\n\n"}, {"name": "pandas.Index.identical", "path": "reference/api/pandas.index.identical", "type": "Index Objects", "text": "\nSimilar to equals, but checks that object attributes and types are also equal.\n\n"}, {"name": "pandas.Index.inferred_type", "path": "reference/api/pandas.index.inferred_type", "type": "Index Objects", "text": "\nReturn a string of the type inferred from the values.\n\n"}, {"name": "pandas.Index.insert", "path": "reference/api/pandas.index.insert", "type": "Index Objects", "text": "\nMake new Index inserting new item at location.\n\n"}, {"name": "pandas.Index.intersection", "path": "reference/api/pandas.index.intersection", "type": "Input/output", "text": "\nForm the intersection of two Index objects.\n\n"}, {"name": "pandas.Index.is_", "path": "reference/api/pandas.index.is_", "type": "Index Objects", "text": "\nMore flexible, faster check like `is` but that works through views.\n\n"}, {"name": "pandas.Index.is_all_dates", "path": "reference/api/pandas.index.is_all_dates", "type": "Index Objects", "text": "\nWhether or not the index values only consist of dates.\n\n"}, {"name": "pandas.Index.is_boolean", "path": "reference/api/pandas.index.is_boolean", "type": "Index Objects", "text": "\nCheck if the Index only consists of booleans.\n\n"}, {"name": "pandas.Index.is_categorical", "path": "reference/api/pandas.index.is_categorical", "type": "Index Objects", "text": "\nCheck if the Index holds categorical data.\n\n"}, {"name": "pandas.Index.is_floating", "path": "reference/api/pandas.index.is_floating", "type": "Index Objects", "text": "\nCheck if the Index is a floating type.\n\n"}, {"name": "pandas.Index.is_integer", "path": "reference/api/pandas.index.is_integer", "type": "Index Objects", "text": "\nCheck if the Index only consists of integers.\n\n"}, {"name": "pandas.Index.is_interval", "path": "reference/api/pandas.index.is_interval", "type": "Index Objects", "text": "\nCheck if the Index holds Interval objects.\n\n"}, {"name": "pandas.Index.is_mixed", "path": "reference/api/pandas.index.is_mixed", "type": "Index Objects", "text": "\nCheck if the Index holds data with mixed data types.\n\n"}, {"name": "pandas.Index.is_monotonic", "path": "reference/api/pandas.index.is_monotonic", "type": "Index Objects", "text": "\nAlias for is_monotonic_increasing.\n\n"}, {"name": "pandas.Index.is_monotonic_decreasing", "path": "reference/api/pandas.index.is_monotonic_decreasing", "type": "Index Objects", "text": "\nReturn if the index is monotonic decreasing (only equal or decreasing) values.\n\n"}, {"name": "pandas.Index.is_monotonic_increasing", "path": "reference/api/pandas.index.is_monotonic_increasing", "type": "Index Objects", "text": "\nReturn if the index is monotonic increasing (only equal or increasing) values.\n\n"}, {"name": "pandas.Index.is_numeric", "path": "reference/api/pandas.index.is_numeric", "type": "Index Objects", "text": "\nCheck if the Index only consists of numeric data.\n\n"}, {"name": "pandas.Index.is_object", "path": "reference/api/pandas.index.is_object", "type": "Index Objects", "text": "\nCheck if the Index is of the object dtype.\n\n"}, {"name": "pandas.Index.is_type_compatible", "path": "reference/api/pandas.index.is_type_compatible", "type": "Index Objects", "text": "\nWhether the index type is compatible with the provided type.\n\n"}, {"name": "pandas.Index.is_unique", "path": "reference/api/pandas.index.is_unique", "type": "Index Objects", "text": "\nReturn if the index has unique values.\n\n"}, {"name": "pandas.Index.isin", "path": "reference/api/pandas.index.isin", "type": "Index Objects", "text": "\nReturn a boolean array where the index values are in values.\n\n"}, {"name": "pandas.Index.isna", "path": "reference/api/pandas.index.isna", "type": "Index Objects", "text": "\nDetect missing values.\n\n"}, {"name": "pandas.Index.isnull", "path": "reference/api/pandas.index.isnull", "type": "Index Objects", "text": "\nDetect missing values.\n\n"}, {"name": "pandas.Index.item", "path": "reference/api/pandas.index.item", "type": "Index Objects", "text": "\nReturn the first element of the underlying data as a Python scalar.\n\n"}, {"name": "pandas.Index.join", "path": "reference/api/pandas.index.join", "type": "Index Objects", "text": "\nCompute join_index and indexers to conform data structures to the new index.\n\n"}, {"name": "pandas.Index.map", "path": "reference/api/pandas.index.map", "type": "Index Objects", "text": "\nMap values using an input mapping or function.\n\n"}, {"name": "pandas.Index.max", "path": "reference/api/pandas.index.max", "type": "Index Objects", "text": "\nReturn the maximum value of the Index.\n\n"}, {"name": "pandas.Index.memory_usage", "path": "reference/api/pandas.index.memory_usage", "type": "Index Objects", "text": "\nMemory usage of the values.\n\n"}, {"name": "pandas.Index.min", "path": "reference/api/pandas.index.min", "type": "Index Objects", "text": "\nReturn the minimum value of the Index.\n\n"}, {"name": "pandas.Index.name", "path": "reference/api/pandas.index.name", "type": "Index Objects", "text": "\nReturn Index or MultiIndex name.\n\n"}, {"name": "pandas.Index.names", "path": "reference/api/pandas.index.names", "type": "Index Objects", "text": "\n\n"}, {"name": "pandas.Index.nbytes", "path": "reference/api/pandas.index.nbytes", "type": "Index Objects", "text": "\nReturn the number of bytes in the underlying data.\n\n"}, {"name": "pandas.Index.ndim", "path": "reference/api/pandas.index.ndim", "type": "Index Objects", "text": "\nNumber of dimensions of the underlying data, by definition 1.\n\n"}, {"name": "pandas.Index.nlevels", "path": "reference/api/pandas.index.nlevels", "type": "Index Objects", "text": "\nNumber of levels.\n\n"}, {"name": "pandas.Index.notna", "path": "reference/api/pandas.index.notna", "type": "Index Objects", "text": "\nDetect existing (non-missing) values.\n\n"}, {"name": "pandas.Index.notnull", "path": "reference/api/pandas.index.notnull", "type": "Index Objects", "text": "\nDetect existing (non-missing) values.\n\n"}, {"name": "pandas.Index.nunique", "path": "reference/api/pandas.index.nunique", "type": "Index Objects", "text": "\nReturn number of unique elements in the object.\n\n"}, {"name": "pandas.Index.putmask", "path": "reference/api/pandas.index.putmask", "type": "Index Objects", "text": "\nReturn a new Index of the values set with the mask.\n\n"}, {"name": "pandas.Index.ravel", "path": "reference/api/pandas.index.ravel", "type": "Index Objects", "text": "\nReturn an ndarray of the flattened values of the underlying data.\n\n"}, {"name": "pandas.Index.reindex", "path": "reference/api/pandas.index.reindex", "type": "Index Objects", "text": "\nCreate index with target\u2019s values.\n\n"}, {"name": "pandas.Index.rename", "path": "reference/api/pandas.index.rename", "type": "Index Objects", "text": "\nAlter Index or MultiIndex name.\n\n"}, {"name": "pandas.Index.repeat", "path": "reference/api/pandas.index.repeat", "type": "Index Objects", "text": "\nRepeat elements of a Index.\n\n"}, {"name": "pandas.Index.searchsorted", "path": "reference/api/pandas.index.searchsorted", "type": "Index Objects", "text": "\nFind indices where elements should be inserted to maintain order.\n\n"}, {"name": "pandas.Index.set_names", "path": "reference/api/pandas.index.set_names", "type": "Index Objects", "text": "\nSet Index or MultiIndex name.\n\n"}, {"name": "pandas.Index.set_value", "path": "reference/api/pandas.index.set_value", "type": "Index Objects", "text": "\nFast lookup of value from 1-dimensional ndarray.\n\n"}, {"name": "pandas.Index.shape", "path": "reference/api/pandas.index.shape", "type": "Index Objects", "text": "\nReturn a tuple of the shape of the underlying data.\n\n"}, {"name": "pandas.Index.shift", "path": "reference/api/pandas.index.shift", "type": "Index Objects", "text": "\nShift index by desired number of time frequency increments.\n\n"}, {"name": "pandas.Index.size", "path": "reference/api/pandas.index.size", "type": "Index Objects", "text": "\nReturn the number of elements in the underlying data.\n\n"}, {"name": "pandas.Index.slice_indexer", "path": "reference/api/pandas.index.slice_indexer", "type": "Index Objects", "text": "\nCompute the slice indexer for input labels and step.\n\n"}, {"name": "pandas.Index.slice_locs", "path": "reference/api/pandas.index.slice_locs", "type": "Index Objects", "text": "\nCompute slice locations for input labels.\n\n"}, {"name": "pandas.Index.sort", "path": "reference/api/pandas.index.sort", "type": "Index Objects", "text": "\nUse sort_values instead.\n\n"}, {"name": "pandas.Index.sort_values", "path": "reference/api/pandas.index.sort_values", "type": "Index Objects", "text": "\nReturn a sorted copy of the index.\n\n"}, {"name": "pandas.Index.sortlevel", "path": "reference/api/pandas.index.sortlevel", "type": "Index Objects", "text": "\nFor internal compatibility with the Index API.\n\n"}, {"name": "pandas.Index.str", "path": "reference/api/pandas.index.str", "type": "Index Objects", "text": "\nVectorized string functions for Series and Index.\n\n"}, {"name": "pandas.Index.symmetric_difference", "path": "reference/api/pandas.index.symmetric_difference", "type": "Index Objects", "text": "\nCompute the symmetric difference of two Index objects.\n\n"}, {"name": "pandas.Index.T", "path": "reference/api/pandas.index.t", "type": "Index Objects", "text": "\nReturn the transpose, which is by definition self.\n\n"}, {"name": "pandas.Index.take", "path": "reference/api/pandas.index.take", "type": "Index Objects", "text": "\nReturn a new Index of the values selected by the indices.\n\n"}, {"name": "pandas.Index.to_flat_index", "path": "reference/api/pandas.index.to_flat_index", "type": "Index Objects", "text": "\nIdentity method.\n\n"}, {"name": "pandas.Index.to_frame", "path": "reference/api/pandas.index.to_frame", "type": "DataFrame", "text": "\nCreate a DataFrame with a column containing the Index.\n\n"}, {"name": "pandas.Index.to_list", "path": "reference/api/pandas.index.to_list", "type": "Index Objects", "text": "\nReturn a list of the values.\n\n"}, {"name": "pandas.Index.to_native_types", "path": "reference/api/pandas.index.to_native_types", "type": "General utility functions", "text": "\nFormat specified values of self and return them.\n\n"}, {"name": "pandas.Index.to_numpy", "path": "reference/api/pandas.index.to_numpy", "type": "Index Objects", "text": "\nA NumPy ndarray representing the values in this Series or Index.\n\n"}, {"name": "pandas.Index.to_series", "path": "reference/api/pandas.index.to_series", "type": "Index Objects", "text": "\nCreate a Series with both index and values equal to the index keys.\n\n"}, {"name": "pandas.Index.tolist", "path": "reference/api/pandas.index.tolist", "type": "Index Objects", "text": "\nReturn a list of the values.\n\n"}, {"name": "pandas.Index.transpose", "path": "reference/api/pandas.index.transpose", "type": "Index Objects", "text": "\nReturn the transpose, which is by definition self.\n\n"}, {"name": "pandas.Index.union", "path": "reference/api/pandas.index.union", "type": "Input/output", "text": "\nForm the union of two Index objects.\n\n"}, {"name": "pandas.Index.unique", "path": "reference/api/pandas.index.unique", "type": "Index Objects", "text": "\nReturn unique values in the index.\n\n"}, {"name": "pandas.Index.value_counts", "path": "reference/api/pandas.index.value_counts", "type": "Index Objects", "text": "\nReturn a Series containing counts of unique values.\n\n"}, {"name": "pandas.Index.values", "path": "reference/api/pandas.index.values", "type": "Index Objects", "text": "\nReturn an array representing the data in the Index.\n\n"}, {"name": "pandas.Index.view", "path": "reference/api/pandas.index.view", "type": "Index Objects", "text": "\n\n"}, {"name": "pandas.Index.where", "path": "reference/api/pandas.index.where", "type": "Index Objects", "text": "\nReplace values where the condition is False.\n\n"}, {"name": "pandas.IndexSlice", "path": "reference/api/pandas.indexslice", "type": "Index Objects", "text": "\nCreate an object to more easily perform multi-index slicing.\n\n"}, {"name": "pandas.infer_freq", "path": "reference/api/pandas.infer_freq", "type": "General functions", "text": "\nInfer the most likely frequency given the input index. If the frequency is\nuncertain, a warning will be printed.\n\n"}, {"name": "pandas.Int16Dtype", "path": "reference/api/pandas.int16dtype", "type": "Pandas arrays", "text": "\nAn ExtensionDtype for int16 integer data.\n\n"}, {"name": "pandas.Int32Dtype", "path": "reference/api/pandas.int32dtype", "type": "Pandas arrays", "text": "\nAn ExtensionDtype for int32 integer data.\n\n"}, {"name": "pandas.Int64Dtype", "path": "reference/api/pandas.int64dtype", "type": "Pandas arrays", "text": "\nAn ExtensionDtype for int64 integer data.\n\n"}, {"name": "pandas.Int64Index", "path": "reference/api/pandas.int64index", "type": "Index Objects", "text": "\nImmutable sequence used for indexing and alignment. The basic object storing\naxis labels for all pandas objects. Int64Index is a special case of Index with\npurely integer labels. .\n\n"}, {"name": "pandas.Int8Dtype", "path": "reference/api/pandas.int8dtype", "type": "Pandas arrays", "text": "\nAn ExtensionDtype for int8 integer data.\n\n"}, {"name": "pandas.Interval", "path": "reference/api/pandas.interval", "type": "Pandas arrays", "text": "\nImmutable object implementing an Interval, a bounded slice-like interval.\n\n"}, {"name": "pandas.Interval.closed", "path": "reference/api/pandas.interval.closed", "type": "Pandas arrays", "text": "\nWhether the interval is closed on the left-side, right-side, both or neither.\n\n"}, {"name": "pandas.Interval.closed_left", "path": "reference/api/pandas.interval.closed_left", "type": "Pandas arrays", "text": "\nCheck if the interval is closed on the left side.\n\n"}, {"name": "pandas.Interval.closed_right", "path": "reference/api/pandas.interval.closed_right", "type": "Pandas arrays", "text": "\nCheck if the interval is closed on the right side.\n\n"}, {"name": "pandas.Interval.is_empty", "path": "reference/api/pandas.interval.is_empty", "type": "Pandas arrays", "text": "\nIndicates if an interval is empty, meaning it contains no points.\n\n"}, {"name": "pandas.Interval.left", "path": "reference/api/pandas.interval.left", "type": "Pandas arrays", "text": "\nLeft bound for the interval.\n\n"}, {"name": "pandas.Interval.length", "path": "reference/api/pandas.interval.length", "type": "Pandas arrays", "text": "\nReturn the length of the Interval.\n\n"}, {"name": "pandas.Interval.mid", "path": "reference/api/pandas.interval.mid", "type": "Pandas arrays", "text": "\nReturn the midpoint of the Interval.\n\n"}, {"name": "pandas.Interval.open_left", "path": "reference/api/pandas.interval.open_left", "type": "Pandas arrays", "text": "\nCheck if the interval is open on the left side.\n\n"}, {"name": "pandas.Interval.open_right", "path": "reference/api/pandas.interval.open_right", "type": "Pandas arrays", "text": "\nCheck if the interval is open on the right side.\n\n"}, {"name": "pandas.Interval.overlaps", "path": "reference/api/pandas.interval.overlaps", "type": "Pandas arrays", "text": "\nCheck whether two Interval objects overlap.\n\n"}, {"name": "pandas.Interval.right", "path": "reference/api/pandas.interval.right", "type": "Pandas arrays", "text": "\nRight bound for the interval.\n\n"}, {"name": "pandas.interval_range", "path": "reference/api/pandas.interval_range", "type": "General functions", "text": "\nReturn a fixed frequency IntervalIndex.\n\n"}, {"name": "pandas.IntervalDtype", "path": "reference/api/pandas.intervaldtype", "type": "Pandas arrays", "text": "\nAn ExtensionDtype for Interval data.\n\n"}, {"name": "pandas.IntervalDtype.subtype", "path": "reference/api/pandas.intervaldtype.subtype", "type": "Pandas arrays", "text": "\nThe dtype of the Interval bounds.\n\n"}, {"name": "pandas.IntervalIndex", "path": "reference/api/pandas.intervalindex", "type": "Index Objects", "text": "\nImmutable index of intervals that are closed on the same side.\n\n"}, {"name": "pandas.IntervalIndex.closed", "path": "reference/api/pandas.intervalindex.closed", "type": "Index Objects", "text": "\nWhether the intervals are closed on the left-side, right-side, both or\nneither.\n\n"}, {"name": "pandas.IntervalIndex.contains", "path": "reference/api/pandas.intervalindex.contains", "type": "Index Objects", "text": "\nCheck elementwise if the Intervals contain the value.\n\n"}, {"name": "pandas.IntervalIndex.from_arrays", "path": "reference/api/pandas.intervalindex.from_arrays", "type": "Index Objects", "text": "\nConstruct from two arrays defining the left and right bounds.\n\n"}, {"name": "pandas.IntervalIndex.from_breaks", "path": "reference/api/pandas.intervalindex.from_breaks", "type": "Index Objects", "text": "\nConstruct an IntervalIndex from an array of splits.\n\n"}, {"name": "pandas.IntervalIndex.from_tuples", "path": "reference/api/pandas.intervalindex.from_tuples", "type": "Index Objects", "text": "\nConstruct an IntervalIndex from an array-like of tuples.\n\n"}, {"name": "pandas.IntervalIndex.get_indexer", "path": "reference/api/pandas.intervalindex.get_indexer", "type": "Index Objects", "text": "\nCompute indexer and mask for new index given the current index. The indexer\nshould be then used as an input to ndarray.take to align the current data to\nthe new index.\n\n"}, {"name": "pandas.IntervalIndex.get_loc", "path": "reference/api/pandas.intervalindex.get_loc", "type": "Index Objects", "text": "\nGet integer location, slice or boolean mask for requested label.\n\n"}, {"name": "pandas.IntervalIndex.is_empty", "path": "reference/api/pandas.intervalindex.is_empty", "type": "Index Objects", "text": "\nIndicates if an interval is empty, meaning it contains no points.\n\n"}, {"name": "pandas.IntervalIndex.is_non_overlapping_monotonic", "path": "reference/api/pandas.intervalindex.is_non_overlapping_monotonic", "type": "Index Objects", "text": "\nReturn True if the IntervalArray is non-overlapping (no Intervals share\npoints) and is either monotonic increasing or monotonic decreasing, else\nFalse.\n\n"}, {"name": "pandas.IntervalIndex.is_overlapping", "path": "reference/api/pandas.intervalindex.is_overlapping", "type": "Index Objects", "text": "\nReturn True if the IntervalIndex has overlapping intervals, else False.\n\n"}, {"name": "pandas.IntervalIndex.left", "path": "reference/api/pandas.intervalindex.left", "type": "Index Objects", "text": "\n\n"}, {"name": "pandas.IntervalIndex.length", "path": "reference/api/pandas.intervalindex.length", "type": "Index Objects", "text": "\n\n"}, {"name": "pandas.IntervalIndex.mid", "path": "reference/api/pandas.intervalindex.mid", "type": "Index Objects", "text": "\n\n"}, {"name": "pandas.IntervalIndex.overlaps", "path": "reference/api/pandas.intervalindex.overlaps", "type": "Index Objects", "text": "\nCheck elementwise if an Interval overlaps the values in the IntervalArray.\n\n"}, {"name": "pandas.IntervalIndex.right", "path": "reference/api/pandas.intervalindex.right", "type": "Index Objects", "text": "\n\n"}, {"name": "pandas.IntervalIndex.set_closed", "path": "reference/api/pandas.intervalindex.set_closed", "type": "Index Objects", "text": "\nReturn an IntervalArray identical to the current one, but closed on the\nspecified side.\n\n"}, {"name": "pandas.IntervalIndex.to_tuples", "path": "reference/api/pandas.intervalindex.to_tuples", "type": "Index Objects", "text": "\nReturn an ndarray of tuples of the form (left, right).\n\n"}, {"name": "pandas.IntervalIndex.values", "path": "reference/api/pandas.intervalindex.values", "type": "Index Objects", "text": "\nReturn an array representing the data in the Index.\n\n"}, {"name": "pandas.io.formats.style.Styler", "path": "reference/api/pandas.io.formats.style.styler", "type": "Style", "text": "\nHelps style a DataFrame or Series according to the data with HTML and CSS.\n\n"}, {"name": "pandas.io.formats.style.Styler.apply", "path": "reference/api/pandas.io.formats.style.styler.apply", "type": "Style", "text": "\nApply a CSS-styling function column-wise, row-wise, or table-wise.\n\n"}, {"name": "pandas.io.formats.style.Styler.apply_index", "path": "reference/api/pandas.io.formats.style.styler.apply_index", "type": "Style", "text": "\nApply a CSS-styling function to the index or column headers, level-wise.\n\n"}, {"name": "pandas.io.formats.style.Styler.applymap", "path": "reference/api/pandas.io.formats.style.styler.applymap", "type": "Style", "text": "\nApply a CSS-styling function elementwise.\n\n"}, {"name": "pandas.io.formats.style.Styler.applymap_index", "path": "reference/api/pandas.io.formats.style.styler.applymap_index", "type": "Style", "text": "\nApply a CSS-styling function to the index or column headers, elementwise.\n\n"}, {"name": "pandas.io.formats.style.Styler.background_gradient", "path": "reference/api/pandas.io.formats.style.styler.background_gradient", "type": "Style", "text": "\nColor the background in a gradient style.\n\n"}, {"name": "pandas.io.formats.style.Styler.bar", "path": "reference/api/pandas.io.formats.style.styler.bar", "type": "Style", "text": "\nDraw bar chart in the cell backgrounds.\n\n"}, {"name": "pandas.io.formats.style.Styler.clear", "path": "reference/api/pandas.io.formats.style.styler.clear", "type": "Style", "text": "\nReset the `Styler`, removing any previously applied styles.\n\n"}, {"name": "pandas.io.formats.style.Styler.env", "path": "reference/api/pandas.io.formats.style.styler.env", "type": "Style", "text": "\n\n"}, {"name": "pandas.io.formats.style.Styler.export", "path": "reference/api/pandas.io.formats.style.styler.export", "type": "Style", "text": "\nExport the styles applied to the current Styler.\n\n"}, {"name": "pandas.io.formats.style.Styler.format", "path": "reference/api/pandas.io.formats.style.styler.format", "type": "Style", "text": "\nFormat the text display value of cells.\n\n"}, {"name": "pandas.io.formats.style.Styler.format_index", "path": "reference/api/pandas.io.formats.style.styler.format_index", "type": "Style", "text": "\nFormat the text display value of index labels or column headers.\n\n"}, {"name": "pandas.io.formats.style.Styler.from_custom_template", "path": "reference/api/pandas.io.formats.style.styler.from_custom_template", "type": "Style", "text": "\nFactory function for creating a subclass of `Styler`.\n\n"}, {"name": "pandas.io.formats.style.Styler.hide", "path": "reference/api/pandas.io.formats.style.styler.hide", "type": "Style", "text": "\nHide the entire index / column headers, or specific rows / columns from\ndisplay.\n\n"}, {"name": "pandas.io.formats.style.Styler.hide_columns", "path": "reference/api/pandas.io.formats.style.styler.hide_columns", "type": "Style", "text": "\nHide the column headers or specific keys in the columns from rendering.\n\n"}, {"name": "pandas.io.formats.style.Styler.hide_index", "path": "reference/api/pandas.io.formats.style.styler.hide_index", "type": "Style", "text": "\nHide the entire index, or specific keys in the index from rendering.\n\n"}, {"name": "pandas.io.formats.style.Styler.highlight_between", "path": "reference/api/pandas.io.formats.style.styler.highlight_between", "type": "Style", "text": "\nHighlight a defined range with a style.\n\n"}, {"name": "pandas.io.formats.style.Styler.highlight_max", "path": "reference/api/pandas.io.formats.style.styler.highlight_max", "type": "Style", "text": "\nHighlight the maximum with a style.\n\n"}, {"name": "pandas.io.formats.style.Styler.highlight_min", "path": "reference/api/pandas.io.formats.style.styler.highlight_min", "type": "Style", "text": "\nHighlight the minimum with a style.\n\n"}, {"name": "pandas.io.formats.style.Styler.highlight_null", "path": "reference/api/pandas.io.formats.style.styler.highlight_null", "type": "Style", "text": "\nHighlight missing values with a style.\n\n"}, {"name": "pandas.io.formats.style.Styler.highlight_quantile", "path": "reference/api/pandas.io.formats.style.styler.highlight_quantile", "type": "Style", "text": "\nHighlight values defined by a quantile with a style.\n\n"}, {"name": "pandas.io.formats.style.Styler.loader", "path": "reference/api/pandas.io.formats.style.styler.loader", "type": "Style", "text": "\n\n"}, {"name": "pandas.io.formats.style.Styler.pipe", "path": "reference/api/pandas.io.formats.style.styler.pipe", "type": "Style", "text": "\nApply `func(self, *args, **kwargs)`, and return the result.\n\n"}, {"name": "pandas.io.formats.style.Styler.render", "path": "reference/api/pandas.io.formats.style.styler.render", "type": "Style", "text": "\nRender the `Styler` including all applied styles to HTML.\n\n"}, {"name": "pandas.io.formats.style.Styler.set_caption", "path": "reference/api/pandas.io.formats.style.styler.set_caption", "type": "Style", "text": "\nSet the text added to a `<caption>` HTML element.\n\n"}, {"name": "pandas.io.formats.style.Styler.set_na_rep", "path": "reference/api/pandas.io.formats.style.styler.set_na_rep", "type": "Style", "text": "\nSet the missing data representation on a `Styler`.\n\n"}, {"name": "pandas.io.formats.style.Styler.set_precision", "path": "reference/api/pandas.io.formats.style.styler.set_precision", "type": "Style", "text": "\nSet the precision used to display values.\n\n"}, {"name": "pandas.io.formats.style.Styler.set_properties", "path": "reference/api/pandas.io.formats.style.styler.set_properties", "type": "Style", "text": "\nSet defined CSS-properties to each `<td>` HTML element within the given\nsubset.\n\n"}, {"name": "pandas.io.formats.style.Styler.set_sticky", "path": "reference/api/pandas.io.formats.style.styler.set_sticky", "type": "Style", "text": "\nAdd CSS to permanently display the index or column headers in a scrolling\nframe.\n\n"}, {"name": "pandas.io.formats.style.Styler.set_table_attributes", "path": "reference/api/pandas.io.formats.style.styler.set_table_attributes", "type": "Style", "text": "\nSet the table attributes added to the `<table>` HTML element.\n\n"}, {"name": "pandas.io.formats.style.Styler.set_table_styles", "path": "reference/api/pandas.io.formats.style.styler.set_table_styles", "type": "Style", "text": "\nSet the table styles included within the `<style>` HTML element.\n\n"}, {"name": "pandas.io.formats.style.Styler.set_td_classes", "path": "reference/api/pandas.io.formats.style.styler.set_td_classes", "type": "Style", "text": "\nSet the DataFrame of strings added to the `class` attribute of `<td>` HTML\nelements.\n\n"}, {"name": "pandas.io.formats.style.Styler.set_tooltips", "path": "reference/api/pandas.io.formats.style.styler.set_tooltips", "type": "Style", "text": "\nSet the DataFrame of strings on `Styler` generating `:hover` tooltips.\n\n"}, {"name": "pandas.io.formats.style.Styler.set_uuid", "path": "reference/api/pandas.io.formats.style.styler.set_uuid", "type": "Style", "text": "\nSet the uuid applied to `id` attributes of HTML elements.\n\n"}, {"name": "pandas.io.formats.style.Styler.template_html", "path": "reference/api/pandas.io.formats.style.styler.template_html", "type": "Style", "text": "\n\n"}, {"name": "pandas.io.formats.style.Styler.template_html_style", "path": "reference/api/pandas.io.formats.style.styler.template_html_style", "type": "Style", "text": "\n\n"}, {"name": "pandas.io.formats.style.Styler.template_html_table", "path": "reference/api/pandas.io.formats.style.styler.template_html_table", "type": "Style", "text": "\n\n"}, {"name": "pandas.io.formats.style.Styler.template_latex", "path": "reference/api/pandas.io.formats.style.styler.template_latex", "type": "Style", "text": "\n\n"}, {"name": "pandas.io.formats.style.Styler.text_gradient", "path": "reference/api/pandas.io.formats.style.styler.text_gradient", "type": "Style", "text": "\nColor the text in a gradient style.\n\n"}, {"name": "pandas.io.formats.style.Styler.to_excel", "path": "reference/api/pandas.io.formats.style.styler.to_excel", "type": "Style", "text": "\nWrite Styler to an Excel sheet.\n\n"}, {"name": "pandas.io.formats.style.Styler.to_html", "path": "reference/api/pandas.io.formats.style.styler.to_html", "type": "Style", "text": "\nWrite Styler to a file, buffer or string in HTML-CSS format.\n\n"}, {"name": "pandas.io.formats.style.Styler.to_latex", "path": "reference/api/pandas.io.formats.style.styler.to_latex", "type": "Style", "text": "\nWrite Styler to a file, buffer or string in LaTeX format.\n\n"}, {"name": "pandas.io.formats.style.Styler.use", "path": "reference/api/pandas.io.formats.style.styler.use", "type": "Style", "text": "\nSet the styles on the current Styler.\n\n"}, {"name": "pandas.io.formats.style.Styler.where", "path": "reference/api/pandas.io.formats.style.styler.where", "type": "Style", "text": "\nApply CSS-styles based on a conditional function elementwise.\n\n"}, {"name": "pandas.io.json.build_table_schema", "path": "reference/api/pandas.io.json.build_table_schema", "type": "Input/output", "text": "\nCreate a Table schema from `data`.\n\n"}, {"name": "pandas.io.stata.StataReader.data_label", "path": "reference/api/pandas.io.stata.statareader.data_label", "type": "Input/output", "text": "\nReturn data label of Stata file.\n\n"}, {"name": "pandas.io.stata.StataReader.value_labels", "path": "reference/api/pandas.io.stata.statareader.value_labels", "type": "Input/output", "text": "\nReturn a dict, associating each variable name a dict, associating each value\nits corresponding label.\n\n"}, {"name": "pandas.io.stata.StataReader.variable_labels", "path": "reference/api/pandas.io.stata.statareader.variable_labels", "type": "Input/output", "text": "\nReturn variable labels as a dict, associating each variable name with\ncorresponding label.\n\n"}, {"name": "pandas.io.stata.StataWriter.write_file", "path": "reference/api/pandas.io.stata.statawriter.write_file", "type": "Input/output", "text": "\nExport DataFrame object to Stata dta format.\n\n"}, {"name": "pandas.isna", "path": "reference/api/pandas.isna", "type": "General functions", "text": "\nDetect missing values for an array-like object.\n\n"}, {"name": "pandas.isnull", "path": "reference/api/pandas.isnull", "type": "General functions", "text": "\nDetect missing values for an array-like object.\n\n"}, {"name": "pandas.json_normalize", "path": "reference/api/pandas.json_normalize", "type": "General functions", "text": "\nNormalize semi-structured JSON data into a flat table.\n\n"}, {"name": "pandas.melt", "path": "reference/api/pandas.melt", "type": "General functions", "text": "\nUnpivot a DataFrame from wide to long format, optionally leaving identifiers\nset.\n\n"}, {"name": "pandas.merge", "path": "reference/api/pandas.merge", "type": "General functions", "text": "\nMerge DataFrame or named Series objects with a database-style join.\n\n"}, {"name": "pandas.merge_asof", "path": "reference/api/pandas.merge_asof", "type": "General functions", "text": "\nPerform a merge by key distance.\n\n"}, {"name": "pandas.merge_ordered", "path": "reference/api/pandas.merge_ordered", "type": "General functions", "text": "\nPerform a merge for ordered data with optional filling/interpolation.\n\n"}, {"name": "pandas.MultiIndex", "path": "reference/api/pandas.multiindex", "type": "Index Objects", "text": "\nA multi-level, or hierarchical, index object for pandas objects.\n\n"}, {"name": "pandas.MultiIndex.codes", "path": "reference/api/pandas.multiindex.codes", "type": "Index Objects", "text": "\n\n"}, {"name": "pandas.MultiIndex.droplevel", "path": "reference/api/pandas.multiindex.droplevel", "type": "Index Objects", "text": "\nReturn index with requested level(s) removed.\n\n"}, {"name": "pandas.MultiIndex.dtypes", "path": "reference/api/pandas.multiindex.dtypes", "type": "General utility functions", "text": "\nReturn the dtypes as a Series for the underlying MultiIndex.\n\n"}, {"name": "pandas.MultiIndex.from_arrays", "path": "reference/api/pandas.multiindex.from_arrays", "type": "Index Objects", "text": "\nConvert arrays to MultiIndex.\n\n"}, {"name": "pandas.MultiIndex.from_frame", "path": "reference/api/pandas.multiindex.from_frame", "type": "DataFrame", "text": "\nMake a MultiIndex from a DataFrame.\n\n"}, {"name": "pandas.MultiIndex.from_product", "path": "reference/api/pandas.multiindex.from_product", "type": "Index Objects", "text": "\nMake a MultiIndex from the cartesian product of multiple iterables.\n\n"}, {"name": "pandas.MultiIndex.from_tuples", "path": "reference/api/pandas.multiindex.from_tuples", "type": "Index Objects", "text": "\nConvert list of tuples to MultiIndex.\n\n"}, {"name": "pandas.MultiIndex.get_indexer", "path": "reference/api/pandas.multiindex.get_indexer", "type": "Index Objects", "text": "\nCompute indexer and mask for new index given the current index. The indexer\nshould be then used as an input to ndarray.take to align the current data to\nthe new index.\n\n"}, {"name": "pandas.MultiIndex.get_level_values", "path": "reference/api/pandas.multiindex.get_level_values", "type": "Index Objects", "text": "\nReturn vector of label values for requested level.\n\n"}, {"name": "pandas.MultiIndex.get_loc", "path": "reference/api/pandas.multiindex.get_loc", "type": "Index Objects", "text": "\nGet location for a label or a tuple of labels.\n\n"}, {"name": "pandas.MultiIndex.get_loc_level", "path": "reference/api/pandas.multiindex.get_loc_level", "type": "Index Objects", "text": "\nGet location and sliced index for requested label(s)/level(s).\n\n"}, {"name": "pandas.MultiIndex.get_locs", "path": "reference/api/pandas.multiindex.get_locs", "type": "Index Objects", "text": "\nGet location for a sequence of labels.\n\n"}, {"name": "pandas.MultiIndex.levels", "path": "reference/api/pandas.multiindex.levels", "type": "Index Objects", "text": "\n\n"}, {"name": "pandas.MultiIndex.levshape", "path": "reference/api/pandas.multiindex.levshape", "type": "Index Objects", "text": "\nA tuple with the length of each level.\n\n"}, {"name": "pandas.MultiIndex.names", "path": "reference/api/pandas.multiindex.names", "type": "Index Objects", "text": "\nNames of levels in MultiIndex.\n\n"}, {"name": "pandas.MultiIndex.nlevels", "path": "reference/api/pandas.multiindex.nlevels", "type": "Index Objects", "text": "\nInteger number of levels in this MultiIndex.\n\n"}, {"name": "pandas.MultiIndex.remove_unused_levels", "path": "reference/api/pandas.multiindex.remove_unused_levels", "type": "Index Objects", "text": "\nCreate new MultiIndex from current that removes unused levels.\n\n"}, {"name": "pandas.MultiIndex.reorder_levels", "path": "reference/api/pandas.multiindex.reorder_levels", "type": "Index Objects", "text": "\nRearrange levels using input order. May not drop or duplicate levels.\n\n"}, {"name": "pandas.MultiIndex.set_codes", "path": "reference/api/pandas.multiindex.set_codes", "type": "Index Objects", "text": "\nSet new codes on MultiIndex. Defaults to returning new index.\n\n"}, {"name": "pandas.MultiIndex.set_levels", "path": "reference/api/pandas.multiindex.set_levels", "type": "Index Objects", "text": "\nSet new levels on MultiIndex. Defaults to returning new index.\n\n"}, {"name": "pandas.MultiIndex.sortlevel", "path": "reference/api/pandas.multiindex.sortlevel", "type": "Index Objects", "text": "\nSort MultiIndex at the requested level.\n\n"}, {"name": "pandas.MultiIndex.swaplevel", "path": "reference/api/pandas.multiindex.swaplevel", "type": "Index Objects", "text": "\nSwap level i with level j.\n\n"}, {"name": "pandas.MultiIndex.to_flat_index", "path": "reference/api/pandas.multiindex.to_flat_index", "type": "Index Objects", "text": "\nConvert a MultiIndex to an Index of Tuples containing the level values.\n\n"}, {"name": "pandas.MultiIndex.to_frame", "path": "reference/api/pandas.multiindex.to_frame", "type": "DataFrame", "text": "\nCreate a DataFrame with the levels of the MultiIndex as columns.\n\n"}, {"name": "pandas.notna", "path": "reference/api/pandas.notna", "type": "General functions", "text": "\nDetect non-missing values for an array-like object.\n\n"}, {"name": "pandas.notnull", "path": "reference/api/pandas.notnull", "type": "General functions", "text": "\nDetect non-missing values for an array-like object.\n\n"}, {"name": "pandas.option_context", "path": "reference/api/pandas.option_context", "type": "General utility functions", "text": "\nContext manager to temporarily set options in the with statement context.\n\n"}, {"name": "pandas.option_context.__call__", "path": "reference/api/pandas.option_context.__call__", "type": "General utility functions", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.Period", "path": "reference/api/pandas.period", "type": "Input/output", "text": "\nRepresents a period of time.\n\n"}, {"name": "pandas.Period.asfreq", "path": "reference/api/pandas.period.asfreq", "type": "Input/output", "text": "\nConvert Period to desired frequency, at the start or end of the interval.\n\n"}, {"name": "pandas.Period.day", "path": "reference/api/pandas.period.day", "type": "Input/output", "text": "\nGet day of the month that a Period falls on.\n\n"}, {"name": "pandas.Period.day_of_week", "path": "reference/api/pandas.period.day_of_week", "type": "Input/output", "text": "\nDay of the week the period lies in, with Monday=0 and Sunday=6.\n\n"}, {"name": "pandas.Period.day_of_year", "path": "reference/api/pandas.period.day_of_year", "type": "Input/output", "text": "\nReturn the day of the year.\n\n"}, {"name": "pandas.Period.dayofweek", "path": "reference/api/pandas.period.dayofweek", "type": "Input/output", "text": "\nDay of the week the period lies in, with Monday=0 and Sunday=6.\n\n"}, {"name": "pandas.Period.dayofyear", "path": "reference/api/pandas.period.dayofyear", "type": "Input/output", "text": "\nReturn the day of the year.\n\n"}, {"name": "pandas.Period.days_in_month", "path": "reference/api/pandas.period.days_in_month", "type": "Input/output", "text": "\nGet the total number of days in the month that this period falls on.\n\n"}, {"name": "pandas.Period.daysinmonth", "path": "reference/api/pandas.period.daysinmonth", "type": "Input/output", "text": "\nGet the total number of days of the month that the Period falls in.\n\n"}, {"name": "pandas.Period.end_time", "path": "reference/api/pandas.period.end_time", "type": "Input/output", "text": "\nGet the Timestamp for the end of the period.\n\n"}, {"name": "pandas.Period.freq", "path": "reference/api/pandas.period.freq", "type": "Input/output", "text": "\n\n"}, {"name": "pandas.Period.freqstr", "path": "reference/api/pandas.period.freqstr", "type": "Input/output", "text": "\nReturn a string representation of the frequency.\n\n"}, {"name": "pandas.Period.hour", "path": "reference/api/pandas.period.hour", "type": "Input/output", "text": "\nGet the hour of the day component of the Period.\n\n"}, {"name": "pandas.Period.is_leap_year", "path": "reference/api/pandas.period.is_leap_year", "type": "Input/output", "text": "\nReturn True if the period\u2019s year is in a leap year.\n\n"}, {"name": "pandas.Period.minute", "path": "reference/api/pandas.period.minute", "type": "Input/output", "text": "\nGet minute of the hour component of the Period.\n\n"}, {"name": "pandas.Period.month", "path": "reference/api/pandas.period.month", "type": "Input/output", "text": "\nReturn the month this Period falls on.\n\n"}, {"name": "pandas.Period.now", "path": "reference/api/pandas.period.now", "type": "Input/output", "text": "\nReturn the period of now\u2019s date.\n\n"}, {"name": "pandas.Period.ordinal", "path": "reference/api/pandas.period.ordinal", "type": "Input/output", "text": "\n\n"}, {"name": "pandas.Period.quarter", "path": "reference/api/pandas.period.quarter", "type": "Input/output", "text": "\nReturn the quarter this Period falls on.\n\n"}, {"name": "pandas.Period.qyear", "path": "reference/api/pandas.period.qyear", "type": "Input/output", "text": "\nFiscal year the Period lies in according to its starting-quarter.\n\n"}, {"name": "pandas.Period.second", "path": "reference/api/pandas.period.second", "type": "Input/output", "text": "\nGet the second component of the Period.\n\n"}, {"name": "pandas.Period.start_time", "path": "reference/api/pandas.period.start_time", "type": "Input/output", "text": "\nGet the Timestamp for the start of the period.\n\n"}, {"name": "pandas.Period.strftime", "path": "reference/api/pandas.period.strftime", "type": "Input/output", "text": "\nReturns the string representation of the `Period`, depending on the selected\n`fmt`. `fmt` must be a string containing one or several directives. The method\nrecognizes the same directives as the `time.strftime()` function of the\nstandard Python distribution, as well as the specific additional directives\n`%f`, `%F`, `%q`. (formatting & docs originally from scikits.timeries).\n\n"}, {"name": "pandas.Period.to_timestamp", "path": "reference/api/pandas.period.to_timestamp", "type": "Input/output", "text": "\nReturn the Timestamp representation of the Period.\n\n"}, {"name": "pandas.Period.week", "path": "reference/api/pandas.period.week", "type": "Input/output", "text": "\nGet the week of the year on the given Period.\n\n"}, {"name": "pandas.Period.weekday", "path": "reference/api/pandas.period.weekday", "type": "Input/output", "text": "\nDay of the week the period lies in, with Monday=0 and Sunday=6.\n\n"}, {"name": "pandas.Period.weekofyear", "path": "reference/api/pandas.period.weekofyear", "type": "Input/output", "text": "\nGet the week of the year on the given Period.\n\n"}, {"name": "pandas.Period.year", "path": "reference/api/pandas.period.year", "type": "Input/output", "text": "\nReturn the year this Period falls on.\n\n"}, {"name": "pandas.period_range", "path": "reference/api/pandas.period_range", "type": "Input/output", "text": "\nReturn a fixed frequency PeriodIndex.\n\n"}, {"name": "pandas.PeriodDtype", "path": "reference/api/pandas.perioddtype", "type": "Input/output", "text": "\nAn ExtensionDtype for Period data.\n\n"}, {"name": "pandas.PeriodDtype.freq", "path": "reference/api/pandas.perioddtype.freq", "type": "Input/output", "text": "\nThe frequency object of this PeriodDtype.\n\n"}, {"name": "pandas.PeriodIndex", "path": "reference/api/pandas.periodindex", "type": "Input/output", "text": "\nImmutable ndarray holding ordinal values indicating regular periods in time.\n\n"}, {"name": "pandas.PeriodIndex.asfreq", "path": "reference/api/pandas.periodindex.asfreq", "type": "Input/output", "text": "\nConvert the PeriodArray to the specified frequency freq.\n\n"}, {"name": "pandas.PeriodIndex.day", "path": "reference/api/pandas.periodindex.day", "type": "Input/output", "text": "\nThe days of the period.\n\n"}, {"name": "pandas.PeriodIndex.day_of_week", "path": "reference/api/pandas.periodindex.day_of_week", "type": "Input/output", "text": "\nThe day of the week with Monday=0, Sunday=6.\n\n"}, {"name": "pandas.PeriodIndex.day_of_year", "path": "reference/api/pandas.periodindex.day_of_year", "type": "Input/output", "text": "\nThe ordinal day of the year.\n\n"}, {"name": "pandas.PeriodIndex.dayofweek", "path": "reference/api/pandas.periodindex.dayofweek", "type": "Input/output", "text": "\nThe day of the week with Monday=0, Sunday=6.\n\n"}, {"name": "pandas.PeriodIndex.dayofyear", "path": "reference/api/pandas.periodindex.dayofyear", "type": "Input/output", "text": "\nThe ordinal day of the year.\n\n"}, {"name": "pandas.PeriodIndex.days_in_month", "path": "reference/api/pandas.periodindex.days_in_month", "type": "Input/output", "text": "\nThe number of days in the month.\n\n"}, {"name": "pandas.PeriodIndex.daysinmonth", "path": "reference/api/pandas.periodindex.daysinmonth", "type": "Input/output", "text": "\nThe number of days in the month.\n\n"}, {"name": "pandas.PeriodIndex.end_time", "path": "reference/api/pandas.periodindex.end_time", "type": "Input/output", "text": "\n\n"}, {"name": "pandas.PeriodIndex.freq", "path": "reference/api/pandas.periodindex.freq", "type": "Input/output", "text": "\nReturn the frequency object if it is set, otherwise None.\n\n"}, {"name": "pandas.PeriodIndex.freqstr", "path": "reference/api/pandas.periodindex.freqstr", "type": "Input/output", "text": "\nReturn the frequency object as a string if its set, otherwise None.\n\n"}, {"name": "pandas.PeriodIndex.hour", "path": "reference/api/pandas.periodindex.hour", "type": "Input/output", "text": "\nThe hour of the period.\n\n"}, {"name": "pandas.PeriodIndex.is_leap_year", "path": "reference/api/pandas.periodindex.is_leap_year", "type": "Input/output", "text": "\nLogical indicating if the date belongs to a leap year.\n\n"}, {"name": "pandas.PeriodIndex.minute", "path": "reference/api/pandas.periodindex.minute", "type": "Input/output", "text": "\nThe minute of the period.\n\n"}, {"name": "pandas.PeriodIndex.month", "path": "reference/api/pandas.periodindex.month", "type": "Input/output", "text": "\nThe month as January=1, December=12.\n\n"}, {"name": "pandas.PeriodIndex.quarter", "path": "reference/api/pandas.periodindex.quarter", "type": "Input/output", "text": "\nThe quarter of the date.\n\n"}, {"name": "pandas.PeriodIndex.qyear", "path": "reference/api/pandas.periodindex.qyear", "type": "Input/output", "text": "\n\n"}, {"name": "pandas.PeriodIndex.second", "path": "reference/api/pandas.periodindex.second", "type": "Input/output", "text": "\nThe second of the period.\n\n"}, {"name": "pandas.PeriodIndex.start_time", "path": "reference/api/pandas.periodindex.start_time", "type": "Input/output", "text": "\n\n"}, {"name": "pandas.PeriodIndex.strftime", "path": "reference/api/pandas.periodindex.strftime", "type": "Input/output", "text": "\nConvert to Index using specified date_format.\n\n"}, {"name": "pandas.PeriodIndex.to_timestamp", "path": "reference/api/pandas.periodindex.to_timestamp", "type": "Input/output", "text": "\nCast to DatetimeArray/Index.\n\n"}, {"name": "pandas.PeriodIndex.week", "path": "reference/api/pandas.periodindex.week", "type": "Input/output", "text": "\nThe week ordinal of the year.\n\n"}, {"name": "pandas.PeriodIndex.weekday", "path": "reference/api/pandas.periodindex.weekday", "type": "Input/output", "text": "\nThe day of the week with Monday=0, Sunday=6.\n\n"}, {"name": "pandas.PeriodIndex.weekofyear", "path": "reference/api/pandas.periodindex.weekofyear", "type": "Input/output", "text": "\nThe week ordinal of the year.\n\n"}, {"name": "pandas.PeriodIndex.year", "path": "reference/api/pandas.periodindex.year", "type": "Input/output", "text": "\nThe year of the period.\n\n"}, {"name": "pandas.pivot", "path": "reference/api/pandas.pivot", "type": "General functions", "text": "\nReturn reshaped DataFrame organized by given index / column values.\n\n"}, {"name": "pandas.pivot_table", "path": "reference/api/pandas.pivot_table", "type": "General functions", "text": "\nCreate a spreadsheet-style pivot table as a DataFrame.\n\n"}, {"name": "pandas.plotting.andrews_curves", "path": "reference/api/pandas.plotting.andrews_curves", "type": "Plotting", "text": "\nGenerate a matplotlib plot of Andrews curves, for visualising clusters of\nmultivariate data.\n\n"}, {"name": "pandas.plotting.autocorrelation_plot", "path": "reference/api/pandas.plotting.autocorrelation_plot", "type": "Input/output", "text": "\nAutocorrelation plot for time series.\n\n"}, {"name": "pandas.plotting.bootstrap_plot", "path": "reference/api/pandas.plotting.bootstrap_plot", "type": "Plotting", "text": "\nBootstrap plot on mean, median and mid-range statistics.\n\n"}, {"name": "pandas.plotting.boxplot", "path": "reference/api/pandas.plotting.boxplot", "type": "Plotting", "text": "\nMake a box plot from DataFrame columns.\n\n"}, {"name": "pandas.plotting.deregister_matplotlib_converters", "path": "reference/api/pandas.plotting.deregister_matplotlib_converters", "type": "Plotting", "text": "\nRemove pandas formatters and converters.\n\n"}, {"name": "pandas.plotting.lag_plot", "path": "reference/api/pandas.plotting.lag_plot", "type": "Plotting", "text": "\nLag plot for time series.\n\n"}, {"name": "pandas.plotting.parallel_coordinates", "path": "reference/api/pandas.plotting.parallel_coordinates", "type": "Plotting", "text": "\nParallel coordinates plotting.\n\n"}, {"name": "pandas.plotting.plot_params", "path": "reference/api/pandas.plotting.plot_params", "type": "Plotting", "text": "\nStores pandas plotting options.\n\n"}, {"name": "pandas.plotting.radviz", "path": "reference/api/pandas.plotting.radviz", "type": "Plotting", "text": "\nPlot a multidimensional dataset in 2D.\n\n"}, {"name": "pandas.plotting.register_matplotlib_converters", "path": "reference/api/pandas.plotting.register_matplotlib_converters", "type": "Plotting", "text": "\nRegister pandas formatters and converters with matplotlib.\n\n"}, {"name": "pandas.plotting.scatter_matrix", "path": "reference/api/pandas.plotting.scatter_matrix", "type": "Plotting", "text": "\nDraw a matrix of scatter plots.\n\n"}, {"name": "pandas.plotting.table", "path": "reference/api/pandas.plotting.table", "type": "Plotting", "text": "\nHelper function to convert DataFrame and Series to matplotlib.table.\n\n"}, {"name": "pandas.qcut", "path": "reference/api/pandas.qcut", "type": "General functions", "text": "\nQuantile-based discretization function.\n\n"}, {"name": "pandas.RangeIndex", "path": "reference/api/pandas.rangeindex", "type": "Index Objects", "text": "\nImmutable Index implementing a monotonic integer range.\n\n"}, {"name": "pandas.RangeIndex.from_range", "path": "reference/api/pandas.rangeindex.from_range", "type": "Index Objects", "text": "\nCreate RangeIndex from a range object.\n\n"}, {"name": "pandas.RangeIndex.start", "path": "reference/api/pandas.rangeindex.start", "type": "Index Objects", "text": "\nThe value of the start parameter (`0` if this was not supplied).\n\n"}, {"name": "pandas.RangeIndex.step", "path": "reference/api/pandas.rangeindex.step", "type": "Index Objects", "text": "\nThe value of the step parameter (`1` if this was not supplied).\n\n"}, {"name": "pandas.RangeIndex.stop", "path": "reference/api/pandas.rangeindex.stop", "type": "Index Objects", "text": "\nThe value of the stop parameter.\n\n"}, {"name": "pandas.read_clipboard", "path": "reference/api/pandas.read_clipboard", "type": "Input/output", "text": "\nRead text from clipboard and pass to read_csv.\n\n"}, {"name": "pandas.read_csv", "path": "reference/api/pandas.read_csv", "type": "Input/output", "text": "\nRead a comma-separated values (csv) file into DataFrame.\n\n"}, {"name": "pandas.read_excel", "path": "reference/api/pandas.read_excel", "type": "Input/output", "text": "\nRead an Excel file into a pandas DataFrame.\n\n"}, {"name": "pandas.read_feather", "path": "reference/api/pandas.read_feather", "type": "Input/output", "text": "\nLoad a feather-format object from the file path.\n\n"}, {"name": "pandas.read_fwf", "path": "reference/api/pandas.read_fwf", "type": "Input/output", "text": "\nRead a table of fixed-width formatted lines into DataFrame.\n\n"}, {"name": "pandas.read_gbq", "path": "reference/api/pandas.read_gbq", "type": "Input/output", "text": "\nLoad data from Google BigQuery.\n\n"}, {"name": "pandas.read_hdf", "path": "reference/api/pandas.read_hdf", "type": "Input/output", "text": "\nRead from the store, close it if we opened it.\n\n"}, {"name": "pandas.read_html", "path": "reference/api/pandas.read_html", "type": "Input/output", "text": "\nRead HTML tables into a `list` of `DataFrame` objects.\n\n"}, {"name": "pandas.read_json", "path": "reference/api/pandas.read_json", "type": "Input/output", "text": "\nConvert a JSON string to pandas object.\n\n"}, {"name": "pandas.read_orc", "path": "reference/api/pandas.read_orc", "type": "Input/output", "text": "\nLoad an ORC object from the file path, returning a DataFrame.\n\n"}, {"name": "pandas.read_parquet", "path": "reference/api/pandas.read_parquet", "type": "Input/output", "text": "\nLoad a parquet object from the file path, returning a DataFrame.\n\n"}, {"name": "pandas.read_pickle", "path": "reference/api/pandas.read_pickle", "type": "Input/output", "text": "\nLoad pickled pandas object (or any object) from file.\n\n"}, {"name": "pandas.read_sas", "path": "reference/api/pandas.read_sas", "type": "Input/output", "text": "\nRead SAS files stored as either XPORT or SAS7BDAT format files.\n\n"}, {"name": "pandas.read_spss", "path": "reference/api/pandas.read_spss", "type": "Input/output", "text": "\nLoad an SPSS file from the file path, returning a DataFrame.\n\n"}, {"name": "pandas.read_sql", "path": "reference/api/pandas.read_sql", "type": "Input/output", "text": "\nRead SQL query or database table into a DataFrame.\n\n"}, {"name": "pandas.read_sql_query", "path": "reference/api/pandas.read_sql_query", "type": "Input/output", "text": "\nRead SQL query into a DataFrame.\n\n"}, {"name": "pandas.read_sql_table", "path": "reference/api/pandas.read_sql_table", "type": "Input/output", "text": "\nRead SQL database table into a DataFrame.\n\n"}, {"name": "pandas.read_stata", "path": "reference/api/pandas.read_stata", "type": "Input/output", "text": "\nRead Stata file into DataFrame.\n\n"}, {"name": "pandas.read_table", "path": "reference/api/pandas.read_table", "type": "Input/output", "text": "\nRead general delimited file into DataFrame.\n\n"}, {"name": "pandas.read_xml", "path": "reference/api/pandas.read_xml", "type": "Input/output", "text": "\nRead XML document into a `DataFrame` object.\n\n"}, {"name": "pandas.reset_option", "path": "reference/api/pandas.reset_option", "type": "General utility functions", "text": "\nReset one or more options to their default value.\n\n"}, {"name": "pandas.Series", "path": "reference/api/pandas.series", "type": "Series", "text": "\nOne-dimensional ndarray with axis labels (including time series).\n\n"}, {"name": "pandas.Series.__array__", "path": "reference/api/pandas.series.__array__", "type": "Series", "text": "\nReturn the values as a NumPy array.\n\n"}, {"name": "pandas.Series.__iter__", "path": "reference/api/pandas.series.__iter__", "type": "Series", "text": "\nReturn an iterator of the values.\n\n"}, {"name": "pandas.Series.abs", "path": "reference/api/pandas.series.abs", "type": "Series", "text": "\nReturn a Series/DataFrame with absolute numeric value of each element.\n\n"}, {"name": "pandas.Series.add", "path": "reference/api/pandas.series.add", "type": "Series", "text": "\nReturn Addition of series and other, element-wise (binary operator add).\n\n"}, {"name": "pandas.Series.add_prefix", "path": "reference/api/pandas.series.add_prefix", "type": "Series", "text": "\nPrefix labels with string prefix.\n\n"}, {"name": "pandas.Series.add_suffix", "path": "reference/api/pandas.series.add_suffix", "type": "Series", "text": "\nSuffix labels with string suffix.\n\n"}, {"name": "pandas.Series.agg", "path": "reference/api/pandas.series.agg", "type": "Series", "text": "\nAggregate using one or more operations over the specified axis.\n\n"}, {"name": "pandas.Series.aggregate", "path": "reference/api/pandas.series.aggregate", "type": "Series", "text": "\nAggregate using one or more operations over the specified axis.\n\n"}, {"name": "pandas.Series.align", "path": "reference/api/pandas.series.align", "type": "Series", "text": "\nAlign two objects on their axes with the specified join method.\n\n"}, {"name": "pandas.Series.all", "path": "reference/api/pandas.series.all", "type": "Series", "text": "\nReturn whether all elements are True, potentially over an axis.\n\n"}, {"name": "pandas.Series.any", "path": "reference/api/pandas.series.any", "type": "Series", "text": "\nReturn whether any element is True, potentially over an axis.\n\n"}, {"name": "pandas.Series.append", "path": "reference/api/pandas.series.append", "type": "Series", "text": "\nConcatenate two or more Series.\n\n"}, {"name": "pandas.Series.apply", "path": "reference/api/pandas.series.apply", "type": "Series", "text": "\nInvoke function on values of Series.\n\n"}, {"name": "pandas.Series.argmax", "path": "reference/api/pandas.series.argmax", "type": "Series", "text": "\nReturn int position of the largest value in the Series.\n\n"}, {"name": "pandas.Series.argmin", "path": "reference/api/pandas.series.argmin", "type": "Series", "text": "\nReturn int position of the smallest value in the Series.\n\n"}, {"name": "pandas.Series.argsort", "path": "reference/api/pandas.series.argsort", "type": "Series", "text": "\nReturn the integer indices that would sort the Series values.\n\n"}, {"name": "pandas.Series.array", "path": "reference/api/pandas.series.array", "type": "Series", "text": "\nThe ExtensionArray of the data backing this Series or Index.\n\n"}, {"name": "pandas.Series.asfreq", "path": "reference/api/pandas.series.asfreq", "type": "Series", "text": "\nConvert time series to specified frequency.\n\n"}, {"name": "pandas.Series.asof", "path": "reference/api/pandas.series.asof", "type": "Series", "text": "\nReturn the last row(s) without any NaNs before where.\n\n"}, {"name": "pandas.Series.astype", "path": "reference/api/pandas.series.astype", "type": "Series", "text": "\nCast a pandas object to a specified dtype `dtype`.\n\n"}, {"name": "pandas.Series.at", "path": "reference/api/pandas.series.at", "type": "Series", "text": "\nAccess a single value for a row/column label pair.\n\n"}, {"name": "pandas.Series.at_time", "path": "reference/api/pandas.series.at_time", "type": "Series", "text": "\nSelect values at particular time of day (e.g., 9:30AM).\n\n"}, {"name": "pandas.Series.attrs", "path": "reference/api/pandas.series.attrs", "type": "Series", "text": "\nDictionary of global attributes of this dataset.\n\n"}, {"name": "pandas.Series.autocorr", "path": "reference/api/pandas.series.autocorr", "type": "Series", "text": "\nCompute the lag-N autocorrelation.\n\n"}, {"name": "pandas.Series.axes", "path": "reference/api/pandas.series.axes", "type": "Series", "text": "\nReturn a list of the row axis labels.\n\n"}, {"name": "pandas.Series.backfill", "path": "reference/api/pandas.series.backfill", "type": "Series", "text": "\nSynonym for `DataFrame.fillna()` with `method='bfill'`.\n\n"}, {"name": "pandas.Series.between", "path": "reference/api/pandas.series.between", "type": "Series", "text": "\nReturn boolean Series equivalent to left <= series <= right.\n\n"}, {"name": "pandas.Series.between_time", "path": "reference/api/pandas.series.between_time", "type": "Series", "text": "\nSelect values between particular times of the day (e.g., 9:00-9:30 AM).\n\n"}, {"name": "pandas.Series.bfill", "path": "reference/api/pandas.series.bfill", "type": "Series", "text": "\nSynonym for `DataFrame.fillna()` with `method='bfill'`.\n\n"}, {"name": "pandas.Series.bool", "path": "reference/api/pandas.series.bool", "type": "Series", "text": "\nReturn the bool of a single element Series or DataFrame.\n\n"}, {"name": "pandas.Series.cat", "path": "reference/api/pandas.series.cat", "type": "Series", "text": "\nAccessor object for categorical properties of the Series values.\n\n"}, {"name": "pandas.Series.cat.add_categories", "path": "reference/api/pandas.series.cat.add_categories", "type": "Series", "text": "\nAdd new categories.\n\n"}, {"name": "pandas.Series.cat.as_ordered", "path": "reference/api/pandas.series.cat.as_ordered", "type": "Series", "text": "\nSet the Categorical to be ordered.\n\n"}, {"name": "pandas.Series.cat.as_unordered", "path": "reference/api/pandas.series.cat.as_unordered", "type": "Series", "text": "\nSet the Categorical to be unordered.\n\n"}, {"name": "pandas.Series.cat.categories", "path": "reference/api/pandas.series.cat.categories", "type": "Series", "text": "\nThe categories of this categorical.\n\n"}, {"name": "pandas.Series.cat.codes", "path": "reference/api/pandas.series.cat.codes", "type": "Series", "text": "\nReturn Series of codes as well as the index.\n\n"}, {"name": "pandas.Series.cat.ordered", "path": "reference/api/pandas.series.cat.ordered", "type": "Series", "text": "\nWhether the categories have an ordered relationship.\n\n"}, {"name": "pandas.Series.cat.remove_categories", "path": "reference/api/pandas.series.cat.remove_categories", "type": "Series", "text": "\nRemove the specified categories.\n\n"}, {"name": "pandas.Series.cat.remove_unused_categories", "path": "reference/api/pandas.series.cat.remove_unused_categories", "type": "Series", "text": "\nRemove categories which are not used.\n\n"}, {"name": "pandas.Series.cat.rename_categories", "path": "reference/api/pandas.series.cat.rename_categories", "type": "Series", "text": "\nRename categories.\n\n"}, {"name": "pandas.Series.cat.reorder_categories", "path": "reference/api/pandas.series.cat.reorder_categories", "type": "Series", "text": "\nReorder categories as specified in new_categories.\n\n"}, {"name": "pandas.Series.cat.set_categories", "path": "reference/api/pandas.series.cat.set_categories", "type": "Series", "text": "\nSet the categories to the specified new_categories.\n\n"}, {"name": "pandas.Series.clip", "path": "reference/api/pandas.series.clip", "type": "Series", "text": "\nTrim values at input threshold(s).\n\n"}, {"name": "pandas.Series.combine", "path": "reference/api/pandas.series.combine", "type": "Series", "text": "\nCombine the Series with a Series or scalar according to func.\n\n"}, {"name": "pandas.Series.combine_first", "path": "reference/api/pandas.series.combine_first", "type": "Series", "text": "\nUpdate null elements with value in the same location in \u2018other\u2019.\n\n"}, {"name": "pandas.Series.compare", "path": "reference/api/pandas.series.compare", "type": "Series", "text": "\nCompare to another Series and show the differences.\n\n"}, {"name": "pandas.Series.convert_dtypes", "path": "reference/api/pandas.series.convert_dtypes", "type": "General utility functions", "text": "\nConvert columns to best possible dtypes using dtypes supporting `pd.NA`.\n\n"}, {"name": "pandas.Series.copy", "path": "reference/api/pandas.series.copy", "type": "Series", "text": "\nMake a copy of this object\u2019s indices and data.\n\n"}, {"name": "pandas.Series.corr", "path": "reference/api/pandas.series.corr", "type": "Series", "text": "\nCompute correlation with other Series, excluding missing values.\n\n"}, {"name": "pandas.Series.count", "path": "reference/api/pandas.series.count", "type": "Series", "text": "\nReturn number of non-NA/null observations in the Series.\n\n"}, {"name": "pandas.Series.cov", "path": "reference/api/pandas.series.cov", "type": "Series", "text": "\nCompute covariance with Series, excluding missing values.\n\n"}, {"name": "pandas.Series.cummax", "path": "reference/api/pandas.series.cummax", "type": "Series", "text": "\nReturn cumulative maximum over a DataFrame or Series axis.\n\n"}, {"name": "pandas.Series.cummin", "path": "reference/api/pandas.series.cummin", "type": "Series", "text": "\nReturn cumulative minimum over a DataFrame or Series axis.\n\n"}, {"name": "pandas.Series.cumprod", "path": "reference/api/pandas.series.cumprod", "type": "Series", "text": "\nReturn cumulative product over a DataFrame or Series axis.\n\n"}, {"name": "pandas.Series.cumsum", "path": "reference/api/pandas.series.cumsum", "type": "Series", "text": "\nReturn cumulative sum over a DataFrame or Series axis.\n\n"}, {"name": "pandas.Series.describe", "path": "reference/api/pandas.series.describe", "type": "Series", "text": "\nGenerate descriptive statistics.\n\n"}, {"name": "pandas.Series.diff", "path": "reference/api/pandas.series.diff", "type": "Series", "text": "\nFirst discrete difference of element.\n\n"}, {"name": "pandas.Series.div", "path": "reference/api/pandas.series.div", "type": "Series", "text": "\nReturn Floating division of series and other, element-wise (binary operator\ntruediv).\n\n"}, {"name": "pandas.Series.divide", "path": "reference/api/pandas.series.divide", "type": "Series", "text": "\nReturn Floating division of series and other, element-wise (binary operator\ntruediv).\n\n"}, {"name": "pandas.Series.divmod", "path": "reference/api/pandas.series.divmod", "type": "Series", "text": "\nReturn Integer division and modulo of series and other, element-wise (binary\noperator divmod).\n\n"}, {"name": "pandas.Series.dot", "path": "reference/api/pandas.series.dot", "type": "Series", "text": "\nCompute the dot product between the Series and the columns of other.\n\n"}, {"name": "pandas.Series.drop", "path": "reference/api/pandas.series.drop", "type": "Series", "text": "\nReturn Series with specified index labels removed.\n\n"}, {"name": "pandas.Series.drop_duplicates", "path": "reference/api/pandas.series.drop_duplicates", "type": "Series", "text": "\nReturn Series with duplicate values removed.\n\n"}, {"name": "pandas.Series.droplevel", "path": "reference/api/pandas.series.droplevel", "type": "Series", "text": "\nReturn Series/DataFrame with requested index / column level(s) removed.\n\n"}, {"name": "pandas.Series.dropna", "path": "reference/api/pandas.series.dropna", "type": "Series", "text": "\nReturn a new Series with missing values removed.\n\n"}, {"name": "pandas.Series.dt", "path": "reference/api/pandas.series.dt", "type": "Series", "text": "\nAccessor object for datetimelike properties of the Series values.\n\n"}, {"name": "pandas.Series.dt.ceil", "path": "reference/api/pandas.series.dt.ceil", "type": "Series", "text": "\nPerform ceil operation on the data to the specified freq.\n\n"}, {"name": "pandas.Series.dt.components", "path": "reference/api/pandas.series.dt.components", "type": "Series", "text": "\nReturn a Dataframe of the components of the Timedeltas.\n\n"}, {"name": "pandas.Series.dt.date", "path": "reference/api/pandas.series.dt.date", "type": "Series", "text": "\nReturns numpy array of python `datetime.date` objects.\n\n"}, {"name": "pandas.Series.dt.day", "path": "reference/api/pandas.series.dt.day", "type": "Series", "text": "\nThe day of the datetime.\n\n"}, {"name": "pandas.Series.dt.day_name", "path": "reference/api/pandas.series.dt.day_name", "type": "Series", "text": "\nReturn the day names of the DateTimeIndex with specified locale.\n\n"}, {"name": "pandas.Series.dt.day_of_week", "path": "reference/api/pandas.series.dt.day_of_week", "type": "Series", "text": "\nThe day of the week with Monday=0, Sunday=6.\n\n"}, {"name": "pandas.Series.dt.day_of_year", "path": "reference/api/pandas.series.dt.day_of_year", "type": "Series", "text": "\nThe ordinal day of the year.\n\n"}, {"name": "pandas.Series.dt.dayofweek", "path": "reference/api/pandas.series.dt.dayofweek", "type": "Series", "text": "\nThe day of the week with Monday=0, Sunday=6.\n\n"}, {"name": "pandas.Series.dt.dayofyear", "path": "reference/api/pandas.series.dt.dayofyear", "type": "Series", "text": "\nThe ordinal day of the year.\n\n"}, {"name": "pandas.Series.dt.days", "path": "reference/api/pandas.series.dt.days", "type": "Series", "text": "\nNumber of days for each element.\n\n"}, {"name": "pandas.Series.dt.days_in_month", "path": "reference/api/pandas.series.dt.days_in_month", "type": "Series", "text": "\nThe number of days in the month.\n\n"}, {"name": "pandas.Series.dt.daysinmonth", "path": "reference/api/pandas.series.dt.daysinmonth", "type": "Series", "text": "\nThe number of days in the month.\n\n"}, {"name": "pandas.Series.dt.end_time", "path": "reference/api/pandas.series.dt.end_time", "type": "Series", "text": "\n\n"}, {"name": "pandas.Series.dt.floor", "path": "reference/api/pandas.series.dt.floor", "type": "Series", "text": "\nPerform floor operation on the data to the specified freq.\n\n"}, {"name": "pandas.Series.dt.freq", "path": "reference/api/pandas.series.dt.freq", "type": "Series", "text": "\n\n"}, {"name": "pandas.Series.dt.hour", "path": "reference/api/pandas.series.dt.hour", "type": "Series", "text": "\nThe hours of the datetime.\n\n"}, {"name": "pandas.Series.dt.is_leap_year", "path": "reference/api/pandas.series.dt.is_leap_year", "type": "Series", "text": "\nBoolean indicator if the date belongs to a leap year.\n\n"}, {"name": "pandas.Series.dt.is_month_end", "path": "reference/api/pandas.series.dt.is_month_end", "type": "Series", "text": "\nIndicates whether the date is the last day of the month.\n\n"}, {"name": "pandas.Series.dt.is_month_start", "path": "reference/api/pandas.series.dt.is_month_start", "type": "Series", "text": "\nIndicates whether the date is the first day of the month.\n\n"}, {"name": "pandas.Series.dt.is_quarter_end", "path": "reference/api/pandas.series.dt.is_quarter_end", "type": "Series", "text": "\nIndicator for whether the date is the last day of a quarter.\n\n"}, {"name": "pandas.Series.dt.is_quarter_start", "path": "reference/api/pandas.series.dt.is_quarter_start", "type": "Series", "text": "\nIndicator for whether the date is the first day of a quarter.\n\n"}, {"name": "pandas.Series.dt.is_year_end", "path": "reference/api/pandas.series.dt.is_year_end", "type": "Series", "text": "\nIndicate whether the date is the last day of the year.\n\n"}, {"name": "pandas.Series.dt.is_year_start", "path": "reference/api/pandas.series.dt.is_year_start", "type": "Series", "text": "\nIndicate whether the date is the first day of a year.\n\n"}, {"name": "pandas.Series.dt.microsecond", "path": "reference/api/pandas.series.dt.microsecond", "type": "Series", "text": "\nThe microseconds of the datetime.\n\n"}, {"name": "pandas.Series.dt.microseconds", "path": "reference/api/pandas.series.dt.microseconds", "type": "Series", "text": "\nNumber of microseconds (>= 0 and less than 1 second) for each element.\n\n"}, {"name": "pandas.Series.dt.minute", "path": "reference/api/pandas.series.dt.minute", "type": "Series", "text": "\nThe minutes of the datetime.\n\n"}, {"name": "pandas.Series.dt.month", "path": "reference/api/pandas.series.dt.month", "type": "Series", "text": "\nThe month as January=1, December=12.\n\n"}, {"name": "pandas.Series.dt.month_name", "path": "reference/api/pandas.series.dt.month_name", "type": "Series", "text": "\nReturn the month names of the DateTimeIndex with specified locale.\n\n"}, {"name": "pandas.Series.dt.nanosecond", "path": "reference/api/pandas.series.dt.nanosecond", "type": "Series", "text": "\nThe nanoseconds of the datetime.\n\n"}, {"name": "pandas.Series.dt.nanoseconds", "path": "reference/api/pandas.series.dt.nanoseconds", "type": "Series", "text": "\nNumber of nanoseconds (>= 0 and less than 1 microsecond) for each element.\n\n"}, {"name": "pandas.Series.dt.normalize", "path": "reference/api/pandas.series.dt.normalize", "type": "Series", "text": "\nConvert times to midnight.\n\n"}, {"name": "pandas.Series.dt.quarter", "path": "reference/api/pandas.series.dt.quarter", "type": "Series", "text": "\nThe quarter of the date.\n\n"}, {"name": "pandas.Series.dt.qyear", "path": "reference/api/pandas.series.dt.qyear", "type": "Series", "text": "\n\n"}, {"name": "pandas.Series.dt.round", "path": "reference/api/pandas.series.dt.round", "type": "Series", "text": "\nPerform round operation on the data to the specified freq.\n\n"}, {"name": "pandas.Series.dt.second", "path": "reference/api/pandas.series.dt.second", "type": "Series", "text": "\nThe seconds of the datetime.\n\n"}, {"name": "pandas.Series.dt.seconds", "path": "reference/api/pandas.series.dt.seconds", "type": "Series", "text": "\nNumber of seconds (>= 0 and less than 1 day) for each element.\n\n"}, {"name": "pandas.Series.dt.start_time", "path": "reference/api/pandas.series.dt.start_time", "type": "Series", "text": "\n\n"}, {"name": "pandas.Series.dt.strftime", "path": "reference/api/pandas.series.dt.strftime", "type": "Series", "text": "\nConvert to Index using specified date_format.\n\n"}, {"name": "pandas.Series.dt.time", "path": "reference/api/pandas.series.dt.time", "type": "Series", "text": "\nReturns numpy array of `datetime.time` objects.\n\n"}, {"name": "pandas.Series.dt.timetz", "path": "reference/api/pandas.series.dt.timetz", "type": "Series", "text": "\nReturns numpy array of `datetime.time` objects with timezone information.\n\n"}, {"name": "pandas.Series.dt.to_period", "path": "reference/api/pandas.series.dt.to_period", "type": "Input/output", "text": "\nCast to PeriodArray/Index at a particular frequency.\n\n"}, {"name": "pandas.Series.dt.to_pydatetime", "path": "reference/api/pandas.series.dt.to_pydatetime", "type": "Series", "text": "\nReturn the data as an array of `datetime.datetime` objects.\n\n"}, {"name": "pandas.Series.dt.to_pytimedelta", "path": "reference/api/pandas.series.dt.to_pytimedelta", "type": "Series", "text": "\nReturn an array of native `datetime.timedelta` objects.\n\n"}, {"name": "pandas.Series.dt.total_seconds", "path": "reference/api/pandas.series.dt.total_seconds", "type": "Series", "text": "\nReturn total duration of each element expressed in seconds.\n\n"}, {"name": "pandas.Series.dt.tz", "path": "reference/api/pandas.series.dt.tz", "type": "Series", "text": "\nReturn the timezone.\n\n"}, {"name": "pandas.Series.dt.tz_convert", "path": "reference/api/pandas.series.dt.tz_convert", "type": "Series", "text": "\nConvert tz-aware Datetime Array/Index from one time zone to another.\n\n"}, {"name": "pandas.Series.dt.tz_localize", "path": "reference/api/pandas.series.dt.tz_localize", "type": "Series", "text": "\nLocalize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index.\n\n"}, {"name": "pandas.Series.dt.week", "path": "reference/api/pandas.series.dt.week", "type": "Series", "text": "\nThe week ordinal of the year.\n\n"}, {"name": "pandas.Series.dt.weekday", "path": "reference/api/pandas.series.dt.weekday", "type": "Series", "text": "\nThe day of the week with Monday=0, Sunday=6.\n\n"}, {"name": "pandas.Series.dt.weekofyear", "path": "reference/api/pandas.series.dt.weekofyear", "type": "Series", "text": "\nThe week ordinal of the year.\n\n"}, {"name": "pandas.Series.dt.year", "path": "reference/api/pandas.series.dt.year", "type": "Series", "text": "\nThe year of the datetime.\n\n"}, {"name": "pandas.Series.dtype", "path": "reference/api/pandas.series.dtype", "type": "Series", "text": "\nReturn the dtype object of the underlying data.\n\n"}, {"name": "pandas.Series.dtypes", "path": "reference/api/pandas.series.dtypes", "type": "General utility functions", "text": "\nReturn the dtype object of the underlying data.\n\n"}, {"name": "pandas.Series.duplicated", "path": "reference/api/pandas.series.duplicated", "type": "Series", "text": "\nIndicate duplicate Series values.\n\n"}, {"name": "pandas.Series.empty", "path": "reference/api/pandas.series.empty", "type": "Series", "text": "\nIndicator whether Series/DataFrame is empty.\n\n"}, {"name": "pandas.Series.eq", "path": "reference/api/pandas.series.eq", "type": "Series", "text": "\nReturn Equal to of series and other, element-wise (binary operator eq).\n\n"}, {"name": "pandas.Series.equals", "path": "reference/api/pandas.series.equals", "type": "Series", "text": "\nTest whether two objects contain the same elements.\n\n"}, {"name": "pandas.Series.ewm", "path": "reference/api/pandas.series.ewm", "type": "Series", "text": "\nProvide exponentially weighted (EW) calculations.\n\n"}, {"name": "pandas.Series.expanding", "path": "reference/api/pandas.series.expanding", "type": "Series", "text": "\nProvide expanding window calculations.\n\n"}, {"name": "pandas.Series.explode", "path": "reference/api/pandas.series.explode", "type": "Series", "text": "\nTransform each element of a list-like to a row.\n\n"}, {"name": "pandas.Series.factorize", "path": "reference/api/pandas.series.factorize", "type": "Series", "text": "\nEncode the object as an enumerated type or categorical variable.\n\n"}, {"name": "pandas.Series.ffill", "path": "reference/api/pandas.series.ffill", "type": "Series", "text": "\nSynonym for `DataFrame.fillna()` with `method='ffill'`.\n\n"}, {"name": "pandas.Series.fillna", "path": "reference/api/pandas.series.fillna", "type": "Series", "text": "\nFill NA/NaN values using the specified method.\n\n"}, {"name": "pandas.Series.filter", "path": "reference/api/pandas.series.filter", "type": "Series", "text": "\nSubset the dataframe rows or columns according to the specified index labels.\n\n"}, {"name": "pandas.Series.first", "path": "reference/api/pandas.series.first", "type": "Series", "text": "\nSelect initial periods of time series data based on a date offset.\n\n"}, {"name": "pandas.Series.first_valid_index", "path": "reference/api/pandas.series.first_valid_index", "type": "Series", "text": "\nReturn index for first non-NA value or None, if no NA value is found.\n\n"}, {"name": "pandas.Series.flags", "path": "reference/api/pandas.series.flags", "type": "Series", "text": "\nGet the properties associated with this pandas object.\n\n"}, {"name": "pandas.Series.floordiv", "path": "reference/api/pandas.series.floordiv", "type": "Series", "text": "\nReturn Integer division of series and other, element-wise (binary operator\nfloordiv).\n\n"}, {"name": "pandas.Series.ge", "path": "reference/api/pandas.series.ge", "type": "Series", "text": "\nReturn Greater than or equal to of series and other, element-wise (binary\noperator ge).\n\n"}, {"name": "pandas.Series.get", "path": "reference/api/pandas.series.get", "type": "Series", "text": "\nGet item from object for given key (ex: DataFrame column).\n\n"}, {"name": "pandas.Series.groupby", "path": "reference/api/pandas.series.groupby", "type": "Series", "text": "\nGroup Series using a mapper or by a Series of columns.\n\n"}, {"name": "pandas.Series.gt", "path": "reference/api/pandas.series.gt", "type": "Series", "text": "\nReturn Greater than of series and other, element-wise (binary operator gt).\n\n"}, {"name": "pandas.Series.hasnans", "path": "reference/api/pandas.series.hasnans", "type": "Series", "text": "\nReturn True if there are any NaNs.\n\n"}, {"name": "pandas.Series.head", "path": "reference/api/pandas.series.head", "type": "Series", "text": "\nReturn the first n rows.\n\n"}, {"name": "pandas.Series.hist", "path": "reference/api/pandas.series.hist", "type": "Series", "text": "\nDraw histogram of the input series using matplotlib.\n\n"}, {"name": "pandas.Series.iat", "path": "reference/api/pandas.series.iat", "type": "Series", "text": "\nAccess a single value for a row/column pair by integer position.\n\n"}, {"name": "pandas.Series.idxmax", "path": "reference/api/pandas.series.idxmax", "type": "Series", "text": "\nReturn the row label of the maximum value.\n\n"}, {"name": "pandas.Series.idxmin", "path": "reference/api/pandas.series.idxmin", "type": "Series", "text": "\nReturn the row label of the minimum value.\n\n"}, {"name": "pandas.Series.iloc", "path": "reference/api/pandas.series.iloc", "type": "Series", "text": "\nPurely integer-location based indexing for selection by position.\n\n"}, {"name": "pandas.Series.index", "path": "reference/api/pandas.series.index", "type": "Series", "text": "\nThe index (axis labels) of the Series.\n\n"}, {"name": "pandas.Series.infer_objects", "path": "reference/api/pandas.series.infer_objects", "type": "Series", "text": "\nAttempt to infer better dtypes for object columns.\n\n"}, {"name": "pandas.Series.info", "path": "reference/api/pandas.series.info", "type": "Series", "text": "\nPrint a concise summary of a Series.\n\n"}, {"name": "pandas.Series.interpolate", "path": "reference/api/pandas.series.interpolate", "type": "Series", "text": "\nFill NaN values using an interpolation method.\n\n"}, {"name": "pandas.Series.is_monotonic", "path": "reference/api/pandas.series.is_monotonic", "type": "Series", "text": "\nReturn boolean if values in the object are monotonic_increasing.\n\n"}, {"name": "pandas.Series.is_monotonic_decreasing", "path": "reference/api/pandas.series.is_monotonic_decreasing", "type": "Series", "text": "\nReturn boolean if values in the object are monotonic_decreasing.\n\n"}, {"name": "pandas.Series.is_monotonic_increasing", "path": "reference/api/pandas.series.is_monotonic_increasing", "type": "Series", "text": "\nAlias for is_monotonic.\n\n"}, {"name": "pandas.Series.is_unique", "path": "reference/api/pandas.series.is_unique", "type": "Series", "text": "\nReturn boolean if values in the object are unique.\n\n"}, {"name": "pandas.Series.isin", "path": "reference/api/pandas.series.isin", "type": "Series", "text": "\nWhether elements in Series are contained in values.\n\n"}, {"name": "pandas.Series.isna", "path": "reference/api/pandas.series.isna", "type": "Series", "text": "\nDetect missing values.\n\n"}, {"name": "pandas.Series.isnull", "path": "reference/api/pandas.series.isnull", "type": "Series", "text": "\nSeries.isnull is an alias for Series.isna.\n\n"}, {"name": "pandas.Series.item", "path": "reference/api/pandas.series.item", "type": "Series", "text": "\nReturn the first element of the underlying data as a Python scalar.\n\n"}, {"name": "pandas.Series.items", "path": "reference/api/pandas.series.items", "type": "Series", "text": "\nLazily iterate over (index, value) tuples.\n\n"}, {"name": "pandas.Series.iteritems", "path": "reference/api/pandas.series.iteritems", "type": "Series", "text": "\nLazily iterate over (index, value) tuples.\n\n"}, {"name": "pandas.Series.keys", "path": "reference/api/pandas.series.keys", "type": "Series", "text": "\nReturn alias for index.\n\n"}, {"name": "pandas.Series.kurt", "path": "reference/api/pandas.series.kurt", "type": "Series", "text": "\nReturn unbiased kurtosis over requested axis.\n\n"}, {"name": "pandas.Series.kurtosis", "path": "reference/api/pandas.series.kurtosis", "type": "Series", "text": "\nReturn unbiased kurtosis over requested axis.\n\n"}, {"name": "pandas.Series.last", "path": "reference/api/pandas.series.last", "type": "Series", "text": "\nSelect final periods of time series data based on a date offset.\n\n"}, {"name": "pandas.Series.last_valid_index", "path": "reference/api/pandas.series.last_valid_index", "type": "Series", "text": "\nReturn index for last non-NA value or None, if no NA value is found.\n\n"}, {"name": "pandas.Series.le", "path": "reference/api/pandas.series.le", "type": "Series", "text": "\nReturn Less than or equal to of series and other, element-wise (binary\noperator le).\n\n"}, {"name": "pandas.Series.loc", "path": "reference/api/pandas.series.loc", "type": "Series", "text": "\nAccess a group of rows and columns by label(s) or a boolean array.\n\n"}, {"name": "pandas.Series.lt", "path": "reference/api/pandas.series.lt", "type": "Series", "text": "\nReturn Less than of series and other, element-wise (binary operator lt).\n\n"}, {"name": "pandas.Series.mad", "path": "reference/api/pandas.series.mad", "type": "Series", "text": "\nReturn the mean absolute deviation of the values over the requested axis.\n\n"}, {"name": "pandas.Series.map", "path": "reference/api/pandas.series.map", "type": "Series", "text": "\nMap values of Series according to an input mapping or function.\n\n"}, {"name": "pandas.Series.mask", "path": "reference/api/pandas.series.mask", "type": "Series", "text": "\nReplace values where the condition is True.\n\n"}, {"name": "pandas.Series.max", "path": "reference/api/pandas.series.max", "type": "Series", "text": "\nReturn the maximum of the values over the requested axis.\n\n"}, {"name": "pandas.Series.mean", "path": "reference/api/pandas.series.mean", "type": "Series", "text": "\nReturn the mean of the values over the requested axis.\n\n"}, {"name": "pandas.Series.median", "path": "reference/api/pandas.series.median", "type": "Series", "text": "\nReturn the median of the values over the requested axis.\n\n"}, {"name": "pandas.Series.memory_usage", "path": "reference/api/pandas.series.memory_usage", "type": "Series", "text": "\nReturn the memory usage of the Series.\n\n"}, {"name": "pandas.Series.min", "path": "reference/api/pandas.series.min", "type": "Series", "text": "\nReturn the minimum of the values over the requested axis.\n\n"}, {"name": "pandas.Series.mod", "path": "reference/api/pandas.series.mod", "type": "Series", "text": "\nReturn Modulo of series and other, element-wise (binary operator mod).\n\n"}, {"name": "pandas.Series.mode", "path": "reference/api/pandas.series.mode", "type": "Series", "text": "\nReturn the mode(s) of the Series.\n\n"}, {"name": "pandas.Series.mul", "path": "reference/api/pandas.series.mul", "type": "Series", "text": "\nReturn Multiplication of series and other, element-wise (binary operator mul).\n\n"}, {"name": "pandas.Series.multiply", "path": "reference/api/pandas.series.multiply", "type": "Series", "text": "\nReturn Multiplication of series and other, element-wise (binary operator mul).\n\n"}, {"name": "pandas.Series.name", "path": "reference/api/pandas.series.name", "type": "Series", "text": "\nReturn the name of the Series.\n\n"}, {"name": "pandas.Series.nbytes", "path": "reference/api/pandas.series.nbytes", "type": "Series", "text": "\nReturn the number of bytes in the underlying data.\n\n"}, {"name": "pandas.Series.ndim", "path": "reference/api/pandas.series.ndim", "type": "Series", "text": "\nNumber of dimensions of the underlying data, by definition 1.\n\n"}, {"name": "pandas.Series.ne", "path": "reference/api/pandas.series.ne", "type": "Series", "text": "\nReturn Not equal to of series and other, element-wise (binary operator ne).\n\n"}, {"name": "pandas.Series.nlargest", "path": "reference/api/pandas.series.nlargest", "type": "Series", "text": "\nReturn the largest n elements.\n\n"}, {"name": "pandas.Series.notna", "path": "reference/api/pandas.series.notna", "type": "Series", "text": "\nDetect existing (non-missing) values.\n\n"}, {"name": "pandas.Series.notnull", "path": "reference/api/pandas.series.notnull", "type": "Series", "text": "\nSeries.notnull is an alias for Series.notna.\n\n"}, {"name": "pandas.Series.nsmallest", "path": "reference/api/pandas.series.nsmallest", "type": "Series", "text": "\nReturn the smallest n elements.\n\n"}, {"name": "pandas.Series.nunique", "path": "reference/api/pandas.series.nunique", "type": "Series", "text": "\nReturn number of unique elements in the object.\n\n"}, {"name": "pandas.Series.pad", "path": "reference/api/pandas.series.pad", "type": "Series", "text": "\nSynonym for `DataFrame.fillna()` with `method='ffill'`.\n\n"}, {"name": "pandas.Series.pct_change", "path": "reference/api/pandas.series.pct_change", "type": "Series", "text": "\nPercentage change between the current and a prior element.\n\n"}, {"name": "pandas.Series.pipe", "path": "reference/api/pandas.series.pipe", "type": "Series", "text": "\nApply chainable functions that expect Series or DataFrames.\n\n"}, {"name": "pandas.Series.plot", "path": "reference/api/pandas.series.plot", "type": "Series", "text": "\nMake plots of Series or DataFrame.\n\n"}, {"name": "pandas.Series.plot.area", "path": "reference/api/pandas.series.plot.area", "type": "Series", "text": "\nDraw a stacked area plot.\n\n"}, {"name": "pandas.Series.plot.bar", "path": "reference/api/pandas.series.plot.bar", "type": "Series", "text": "\nVertical bar plot.\n\n"}, {"name": "pandas.Series.plot.barh", "path": "reference/api/pandas.series.plot.barh", "type": "Series", "text": "\nMake a horizontal bar plot.\n\n"}, {"name": "pandas.Series.plot.box", "path": "reference/api/pandas.series.plot.box", "type": "Series", "text": "\nMake a box plot of the DataFrame columns.\n\n"}, {"name": "pandas.Series.plot.density", "path": "reference/api/pandas.series.plot.density", "type": "Series", "text": "\nGenerate Kernel Density Estimate plot using Gaussian kernels.\n\n"}, {"name": "pandas.Series.plot.hist", "path": "reference/api/pandas.series.plot.hist", "type": "Series", "text": "\nDraw one histogram of the DataFrame\u2019s columns.\n\n"}, {"name": "pandas.Series.plot.kde", "path": "reference/api/pandas.series.plot.kde", "type": "Series", "text": "\nGenerate Kernel Density Estimate plot using Gaussian kernels.\n\n"}, {"name": "pandas.Series.plot.line", "path": "reference/api/pandas.series.plot.line", "type": "Series", "text": "\nPlot Series or DataFrame as lines.\n\n"}, {"name": "pandas.Series.plot.pie", "path": "reference/api/pandas.series.plot.pie", "type": "Series", "text": "\nGenerate a pie plot.\n\n"}, {"name": "pandas.Series.pop", "path": "reference/api/pandas.series.pop", "type": "Series", "text": "\nReturn item and drops from series. Raise KeyError if not found.\n\n"}, {"name": "pandas.Series.pow", "path": "reference/api/pandas.series.pow", "type": "Series", "text": "\nReturn Exponential power of series and other, element-wise (binary operator\npow).\n\n"}, {"name": "pandas.Series.prod", "path": "reference/api/pandas.series.prod", "type": "Series", "text": "\nReturn the product of the values over the requested axis.\n\n"}, {"name": "pandas.Series.product", "path": "reference/api/pandas.series.product", "type": "Series", "text": "\nReturn the product of the values over the requested axis.\n\n"}, {"name": "pandas.Series.quantile", "path": "reference/api/pandas.series.quantile", "type": "Series", "text": "\nReturn value at the given quantile.\n\n"}, {"name": "pandas.Series.radd", "path": "reference/api/pandas.series.radd", "type": "Series", "text": "\nReturn Addition of series and other, element-wise (binary operator radd).\n\n"}, {"name": "pandas.Series.rank", "path": "reference/api/pandas.series.rank", "type": "Series", "text": "\nCompute numerical data ranks (1 through n) along axis.\n\n"}, {"name": "pandas.Series.ravel", "path": "reference/api/pandas.series.ravel", "type": "Series", "text": "\nReturn the flattened underlying data as an ndarray.\n\n"}, {"name": "pandas.Series.rdiv", "path": "reference/api/pandas.series.rdiv", "type": "Series", "text": "\nReturn Floating division of series and other, element-wise (binary operator\nrtruediv).\n\n"}, {"name": "pandas.Series.rdivmod", "path": "reference/api/pandas.series.rdivmod", "type": "Series", "text": "\nReturn Integer division and modulo of series and other, element-wise (binary\noperator rdivmod).\n\n"}, {"name": "pandas.Series.reindex", "path": "reference/api/pandas.series.reindex", "type": "Series", "text": "\nConform Series to new index with optional filling logic.\n\n"}, {"name": "pandas.Series.reindex_like", "path": "reference/api/pandas.series.reindex_like", "type": "Series", "text": "\nReturn an object with matching indices as other object.\n\n"}, {"name": "pandas.Series.rename", "path": "reference/api/pandas.series.rename", "type": "Series", "text": "\nAlter Series index labels or name.\n\n"}, {"name": "pandas.Series.rename_axis", "path": "reference/api/pandas.series.rename_axis", "type": "Series", "text": "\nSet the name of the axis for the index or columns.\n\n"}, {"name": "pandas.Series.reorder_levels", "path": "reference/api/pandas.series.reorder_levels", "type": "Series", "text": "\nRearrange index levels using input order.\n\n"}, {"name": "pandas.Series.repeat", "path": "reference/api/pandas.series.repeat", "type": "Series", "text": "\nRepeat elements of a Series.\n\n"}, {"name": "pandas.Series.replace", "path": "reference/api/pandas.series.replace", "type": "Series", "text": "\nReplace values given in to_replace with value.\n\n"}, {"name": "pandas.Series.resample", "path": "reference/api/pandas.series.resample", "type": "Series", "text": "\nResample time-series data.\n\n"}, {"name": "pandas.Series.reset_index", "path": "reference/api/pandas.series.reset_index", "type": "Series", "text": "\nGenerate a new DataFrame or Series with the index reset.\n\n"}, {"name": "pandas.Series.rfloordiv", "path": "reference/api/pandas.series.rfloordiv", "type": "Series", "text": "\nReturn Integer division of series and other, element-wise (binary operator\nrfloordiv).\n\n"}, {"name": "pandas.Series.rmod", "path": "reference/api/pandas.series.rmod", "type": "Series", "text": "\nReturn Modulo of series and other, element-wise (binary operator rmod).\n\n"}, {"name": "pandas.Series.rmul", "path": "reference/api/pandas.series.rmul", "type": "Series", "text": "\nReturn Multiplication of series and other, element-wise (binary operator\nrmul).\n\n"}, {"name": "pandas.Series.rolling", "path": "reference/api/pandas.series.rolling", "type": "Series", "text": "\nProvide rolling window calculations.\n\n"}, {"name": "pandas.Series.round", "path": "reference/api/pandas.series.round", "type": "Series", "text": "\nRound each value in a Series to the given number of decimals.\n\n"}, {"name": "pandas.Series.rpow", "path": "reference/api/pandas.series.rpow", "type": "Series", "text": "\nReturn Exponential power of series and other, element-wise (binary operator\nrpow).\n\n"}, {"name": "pandas.Series.rsub", "path": "reference/api/pandas.series.rsub", "type": "Series", "text": "\nReturn Subtraction of series and other, element-wise (binary operator rsub).\n\n"}, {"name": "pandas.Series.rtruediv", "path": "reference/api/pandas.series.rtruediv", "type": "Series", "text": "\nReturn Floating division of series and other, element-wise (binary operator\nrtruediv).\n\n"}, {"name": "pandas.Series.sample", "path": "reference/api/pandas.series.sample", "type": "Series", "text": "\nReturn a random sample of items from an axis of object.\n\n"}, {"name": "pandas.Series.searchsorted", "path": "reference/api/pandas.series.searchsorted", "type": "Series", "text": "\nFind indices where elements should be inserted to maintain order.\n\n"}, {"name": "pandas.Series.sem", "path": "reference/api/pandas.series.sem", "type": "Series", "text": "\nReturn unbiased standard error of the mean over requested axis.\n\n"}, {"name": "pandas.Series.set_axis", "path": "reference/api/pandas.series.set_axis", "type": "Series", "text": "\nAssign desired index to given axis.\n\n"}, {"name": "pandas.Series.set_flags", "path": "reference/api/pandas.series.set_flags", "type": "Series", "text": "\nReturn a new object with updated flags.\n\n"}, {"name": "pandas.Series.shape", "path": "reference/api/pandas.series.shape", "type": "Series", "text": "\nReturn a tuple of the shape of the underlying data.\n\n"}, {"name": "pandas.Series.shift", "path": "reference/api/pandas.series.shift", "type": "Series", "text": "\nShift index by desired number of periods with an optional time freq.\n\n"}, {"name": "pandas.Series.size", "path": "reference/api/pandas.series.size", "type": "Series", "text": "\nReturn the number of elements in the underlying data.\n\n"}, {"name": "pandas.Series.skew", "path": "reference/api/pandas.series.skew", "type": "Series", "text": "\nReturn unbiased skew over requested axis.\n\n"}, {"name": "pandas.Series.slice_shift", "path": "reference/api/pandas.series.slice_shift", "type": "Series", "text": "\nEquivalent to shift without copying data. The shifted data will not include\nthe dropped periods and the shifted axis will be smaller than the original.\n\n"}, {"name": "pandas.Series.sort_index", "path": "reference/api/pandas.series.sort_index", "type": "Series", "text": "\nSort Series by index labels.\n\n"}, {"name": "pandas.Series.sort_values", "path": "reference/api/pandas.series.sort_values", "type": "Series", "text": "\nSort by the values.\n\n"}, {"name": "pandas.Series.sparse", "path": "reference/api/pandas.series.sparse", "type": "Series", "text": "\nAccessor for SparseSparse from other sparse matrix data types.\n\n"}, {"name": "pandas.Series.sparse.density", "path": "reference/api/pandas.series.sparse.density", "type": "Series", "text": "\nThe percent of non- `fill_value` points, as decimal.\n\n"}, {"name": "pandas.Series.sparse.fill_value", "path": "reference/api/pandas.series.sparse.fill_value", "type": "Series", "text": "\nElements in data that are fill_value are not stored.\n\n"}, {"name": "pandas.Series.sparse.from_coo", "path": "reference/api/pandas.series.sparse.from_coo", "type": "Series", "text": "\nCreate a Series with sparse values from a scipy.sparse.coo_matrix.\n\n"}, {"name": "pandas.Series.sparse.npoints", "path": "reference/api/pandas.series.sparse.npoints", "type": "Series", "text": "\nThe number of non- `fill_value` points.\n\n"}, {"name": "pandas.Series.sparse.sp_values", "path": "reference/api/pandas.series.sparse.sp_values", "type": "Series", "text": "\nAn ndarray containing the non- `fill_value` values.\n\n"}, {"name": "pandas.Series.sparse.to_coo", "path": "reference/api/pandas.series.sparse.to_coo", "type": "Series", "text": "\nCreate a scipy.sparse.coo_matrix from a Series with MultiIndex.\n\n"}, {"name": "pandas.Series.squeeze", "path": "reference/api/pandas.series.squeeze", "type": "Series", "text": "\nSqueeze 1 dimensional axis objects into scalars.\n\n"}, {"name": "pandas.Series.std", "path": "reference/api/pandas.series.std", "type": "Series", "text": "\nReturn sample standard deviation over requested axis.\n\n"}, {"name": "pandas.Series.str", "path": "reference/api/pandas.series.str", "type": "Series", "text": "\nVectorized string functions for Series and Index.\n\n"}, {"name": "pandas.Series.str.capitalize", "path": "reference/api/pandas.series.str.capitalize", "type": "Series", "text": "\nConvert strings in the Series/Index to be capitalized.\n\n"}, {"name": "pandas.Series.str.casefold", "path": "reference/api/pandas.series.str.casefold", "type": "Series", "text": "\nConvert strings in the Series/Index to be casefolded.\n\n"}, {"name": "pandas.Series.str.cat", "path": "reference/api/pandas.series.str.cat", "type": "Series", "text": "\nConcatenate strings in the Series/Index with given separator.\n\n"}, {"name": "pandas.Series.str.center", "path": "reference/api/pandas.series.str.center", "type": "Series", "text": "\nPad left and right side of strings in the Series/Index.\n\n"}, {"name": "pandas.Series.str.contains", "path": "reference/api/pandas.series.str.contains", "type": "Series", "text": "\nTest if pattern or regex is contained within a string of a Series or Index.\n\n"}, {"name": "pandas.Series.str.count", "path": "reference/api/pandas.series.str.count", "type": "Series", "text": "\nCount occurrences of pattern in each string of the Series/Index.\n\n"}, {"name": "pandas.Series.str.decode", "path": "reference/api/pandas.series.str.decode", "type": "Series", "text": "\nDecode character string in the Series/Index using indicated encoding.\n\n"}, {"name": "pandas.Series.str.encode", "path": "reference/api/pandas.series.str.encode", "type": "Series", "text": "\nEncode character string in the Series/Index using indicated encoding.\n\n"}, {"name": "pandas.Series.str.endswith", "path": "reference/api/pandas.series.str.endswith", "type": "Series", "text": "\nTest if the end of each string element matches a pattern.\n\n"}, {"name": "pandas.Series.str.extract", "path": "reference/api/pandas.series.str.extract", "type": "Series", "text": "\nExtract capture groups in the regex pat as columns in a DataFrame.\n\n"}, {"name": "pandas.Series.str.extractall", "path": "reference/api/pandas.series.str.extractall", "type": "Series", "text": "\nExtract capture groups in the regex pat as columns in DataFrame.\n\n"}, {"name": "pandas.Series.str.find", "path": "reference/api/pandas.series.str.find", "type": "Series", "text": "\nReturn lowest indexes in each strings in the Series/Index.\n\n"}, {"name": "pandas.Series.str.findall", "path": "reference/api/pandas.series.str.findall", "type": "Series", "text": "\nFind all occurrences of pattern or regular expression in the Series/Index.\n\n"}, {"name": "pandas.Series.str.fullmatch", "path": "reference/api/pandas.series.str.fullmatch", "type": "Series", "text": "\nDetermine if each string entirely matches a regular expression.\n\n"}, {"name": "pandas.Series.str.get", "path": "reference/api/pandas.series.str.get", "type": "Series", "text": "\nExtract element from each component at specified position.\n\n"}, {"name": "pandas.Series.str.get_dummies", "path": "reference/api/pandas.series.str.get_dummies", "type": "Series", "text": "\nReturn DataFrame of dummy/indicator variables for Series.\n\n"}, {"name": "pandas.Series.str.index", "path": "reference/api/pandas.series.str.index", "type": "Series", "text": "\nReturn lowest indexes in each string in Series/Index.\n\n"}, {"name": "pandas.Series.str.isalnum", "path": "reference/api/pandas.series.str.isalnum", "type": "Series", "text": "\nCheck whether all characters in each string are alphanumeric.\n\n"}, {"name": "pandas.Series.str.isalpha", "path": "reference/api/pandas.series.str.isalpha", "type": "Series", "text": "\nCheck whether all characters in each string are alphabetic.\n\n"}, {"name": "pandas.Series.str.isdecimal", "path": "reference/api/pandas.series.str.isdecimal", "type": "Series", "text": "\nCheck whether all characters in each string are decimal.\n\n"}, {"name": "pandas.Series.str.isdigit", "path": "reference/api/pandas.series.str.isdigit", "type": "Series", "text": "\nCheck whether all characters in each string are digits.\n\n"}, {"name": "pandas.Series.str.islower", "path": "reference/api/pandas.series.str.islower", "type": "Series", "text": "\nCheck whether all characters in each string are lowercase.\n\n"}, {"name": "pandas.Series.str.isnumeric", "path": "reference/api/pandas.series.str.isnumeric", "type": "Series", "text": "\nCheck whether all characters in each string are numeric.\n\n"}, {"name": "pandas.Series.str.isspace", "path": "reference/api/pandas.series.str.isspace", "type": "Series", "text": "\nCheck whether all characters in each string are whitespace.\n\n"}, {"name": "pandas.Series.str.istitle", "path": "reference/api/pandas.series.str.istitle", "type": "Series", "text": "\nCheck whether all characters in each string are titlecase.\n\n"}, {"name": "pandas.Series.str.isupper", "path": "reference/api/pandas.series.str.isupper", "type": "Series", "text": "\nCheck whether all characters in each string are uppercase.\n\n"}, {"name": "pandas.Series.str.join", "path": "reference/api/pandas.series.str.join", "type": "Series", "text": "\nJoin lists contained as elements in the Series/Index with passed delimiter.\n\n"}, {"name": "pandas.Series.str.len", "path": "reference/api/pandas.series.str.len", "type": "Series", "text": "\nCompute the length of each element in the Series/Index.\n\n"}, {"name": "pandas.Series.str.ljust", "path": "reference/api/pandas.series.str.ljust", "type": "Series", "text": "\nPad right side of strings in the Series/Index.\n\n"}, {"name": "pandas.Series.str.lower", "path": "reference/api/pandas.series.str.lower", "type": "Series", "text": "\nConvert strings in the Series/Index to lowercase.\n\n"}, {"name": "pandas.Series.str.lstrip", "path": "reference/api/pandas.series.str.lstrip", "type": "Series", "text": "\nRemove leading characters.\n\n"}, {"name": "pandas.Series.str.match", "path": "reference/api/pandas.series.str.match", "type": "Series", "text": "\nDetermine if each string starts with a match of a regular expression.\n\n"}, {"name": "pandas.Series.str.normalize", "path": "reference/api/pandas.series.str.normalize", "type": "Series", "text": "\nReturn the Unicode normal form for the strings in the Series/Index.\n\n"}, {"name": "pandas.Series.str.pad", "path": "reference/api/pandas.series.str.pad", "type": "Series", "text": "\nPad strings in the Series/Index up to width.\n\n"}, {"name": "pandas.Series.str.partition", "path": "reference/api/pandas.series.str.partition", "type": "Input/output", "text": "\nSplit the string at the first occurrence of sep.\n\n"}, {"name": "pandas.Series.str.removeprefix", "path": "reference/api/pandas.series.str.removeprefix", "type": "Series", "text": "\nRemove a prefix from an object series. If the prefix is not present, the\noriginal string will be returned.\n\n"}, {"name": "pandas.Series.str.removesuffix", "path": "reference/api/pandas.series.str.removesuffix", "type": "Series", "text": "\nRemove a suffix from an object series. If the suffix is not present, the\noriginal string will be returned.\n\n"}, {"name": "pandas.Series.str.repeat", "path": "reference/api/pandas.series.str.repeat", "type": "Series", "text": "\nDuplicate each string in the Series or Index.\n\n"}, {"name": "pandas.Series.str.replace", "path": "reference/api/pandas.series.str.replace", "type": "Series", "text": "\nReplace each occurrence of pattern/regex in the Series/Index.\n\n"}, {"name": "pandas.Series.str.rfind", "path": "reference/api/pandas.series.str.rfind", "type": "Series", "text": "\nReturn highest indexes in each strings in the Series/Index.\n\n"}, {"name": "pandas.Series.str.rindex", "path": "reference/api/pandas.series.str.rindex", "type": "Series", "text": "\nReturn highest indexes in each string in Series/Index.\n\n"}, {"name": "pandas.Series.str.rjust", "path": "reference/api/pandas.series.str.rjust", "type": "Series", "text": "\nPad left side of strings in the Series/Index.\n\n"}, {"name": "pandas.Series.str.rpartition", "path": "reference/api/pandas.series.str.rpartition", "type": "Input/output", "text": "\nSplit the string at the last occurrence of sep.\n\n"}, {"name": "pandas.Series.str.rsplit", "path": "reference/api/pandas.series.str.rsplit", "type": "Series", "text": "\nSplit strings around given separator/delimiter.\n\n"}, {"name": "pandas.Series.str.rstrip", "path": "reference/api/pandas.series.str.rstrip", "type": "Series", "text": "\nRemove trailing characters.\n\n"}, {"name": "pandas.Series.str.slice", "path": "reference/api/pandas.series.str.slice", "type": "Series", "text": "\nSlice substrings from each element in the Series or Index.\n\n"}, {"name": "pandas.Series.str.slice_replace", "path": "reference/api/pandas.series.str.slice_replace", "type": "Series", "text": "\nReplace a positional slice of a string with another value.\n\n"}, {"name": "pandas.Series.str.split", "path": "reference/api/pandas.series.str.split", "type": "Series", "text": "\nSplit strings around given separator/delimiter.\n\n"}, {"name": "pandas.Series.str.startswith", "path": "reference/api/pandas.series.str.startswith", "type": "Series", "text": "\nTest if the start of each string element matches a pattern.\n\n"}, {"name": "pandas.Series.str.strip", "path": "reference/api/pandas.series.str.strip", "type": "Series", "text": "\nRemove leading and trailing characters.\n\n"}, {"name": "pandas.Series.str.swapcase", "path": "reference/api/pandas.series.str.swapcase", "type": "Series", "text": "\nConvert strings in the Series/Index to be swapcased.\n\n"}, {"name": "pandas.Series.str.title", "path": "reference/api/pandas.series.str.title", "type": "Series", "text": "\nConvert strings in the Series/Index to titlecase.\n\n"}, {"name": "pandas.Series.str.translate", "path": "reference/api/pandas.series.str.translate", "type": "Series", "text": "\nMap all characters in the string through the given mapping table.\n\n"}, {"name": "pandas.Series.str.upper", "path": "reference/api/pandas.series.str.upper", "type": "Series", "text": "\nConvert strings in the Series/Index to uppercase.\n\n"}, {"name": "pandas.Series.str.wrap", "path": "reference/api/pandas.series.str.wrap", "type": "Series", "text": "\nWrap strings in Series/Index at specified line width.\n\n"}, {"name": "pandas.Series.str.zfill", "path": "reference/api/pandas.series.str.zfill", "type": "Series", "text": "\nPad strings in the Series/Index by prepending \u20180\u2019 characters.\n\n"}, {"name": "pandas.Series.sub", "path": "reference/api/pandas.series.sub", "type": "Series", "text": "\nReturn Subtraction of series and other, element-wise (binary operator sub).\n\n"}, {"name": "pandas.Series.subtract", "path": "reference/api/pandas.series.subtract", "type": "Series", "text": "\nReturn Subtraction of series and other, element-wise (binary operator sub).\n\n"}, {"name": "pandas.Series.sum", "path": "reference/api/pandas.series.sum", "type": "Series", "text": "\nReturn the sum of the values over the requested axis.\n\n"}, {"name": "pandas.Series.swapaxes", "path": "reference/api/pandas.series.swapaxes", "type": "Series", "text": "\nInterchange axes and swap values axes appropriately.\n\n"}, {"name": "pandas.Series.swaplevel", "path": "reference/api/pandas.series.swaplevel", "type": "Series", "text": "\nSwap levels i and j in a `MultiIndex`.\n\n"}, {"name": "pandas.Series.T", "path": "reference/api/pandas.series.t", "type": "Series", "text": "\nReturn the transpose, which is by definition self.\n\n"}, {"name": "pandas.Series.tail", "path": "reference/api/pandas.series.tail", "type": "Series", "text": "\nReturn the last n rows.\n\n"}, {"name": "pandas.Series.take", "path": "reference/api/pandas.series.take", "type": "Series", "text": "\nReturn the elements in the given positional indices along an axis.\n\n"}, {"name": "pandas.Series.to_clipboard", "path": "reference/api/pandas.series.to_clipboard", "type": "Series", "text": "\nCopy object to the system clipboard.\n\n"}, {"name": "pandas.Series.to_csv", "path": "reference/api/pandas.series.to_csv", "type": "Series", "text": "\nWrite object to a comma-separated values (csv) file.\n\n"}, {"name": "pandas.Series.to_dict", "path": "reference/api/pandas.series.to_dict", "type": "Series", "text": "\nConvert Series to {label -> value} dict or dict-like object.\n\n"}, {"name": "pandas.Series.to_excel", "path": "reference/api/pandas.series.to_excel", "type": "Series", "text": "\nWrite object to an Excel sheet.\n\n"}, {"name": "pandas.Series.to_frame", "path": "reference/api/pandas.series.to_frame", "type": "Series", "text": "\nConvert Series to DataFrame.\n\n"}, {"name": "pandas.Series.to_hdf", "path": "reference/api/pandas.series.to_hdf", "type": "Series", "text": "\nWrite the contained data to an HDF5 file using HDFStore.\n\n"}, {"name": "pandas.Series.to_json", "path": "reference/api/pandas.series.to_json", "type": "Series", "text": "\nConvert the object to a JSON string.\n\n"}, {"name": "pandas.Series.to_latex", "path": "reference/api/pandas.series.to_latex", "type": "Series", "text": "\nRender object to a LaTeX tabular, longtable, or nested table.\n\n"}, {"name": "pandas.Series.to_list", "path": "reference/api/pandas.series.to_list", "type": "Series", "text": "\nReturn a list of the values.\n\n"}, {"name": "pandas.Series.to_markdown", "path": "reference/api/pandas.series.to_markdown", "type": "Series", "text": "\nPrint Series in Markdown-friendly format.\n\n"}, {"name": "pandas.Series.to_numpy", "path": "reference/api/pandas.series.to_numpy", "type": "Series", "text": "\nA NumPy ndarray representing the values in this Series or Index.\n\n"}, {"name": "pandas.Series.to_period", "path": "reference/api/pandas.series.to_period", "type": "Input/output", "text": "\nConvert Series from DatetimeIndex to PeriodIndex.\n\n"}, {"name": "pandas.Series.to_pickle", "path": "reference/api/pandas.series.to_pickle", "type": "Series", "text": "\nPickle (serialize) object to file.\n\n"}, {"name": "pandas.Series.to_sql", "path": "reference/api/pandas.series.to_sql", "type": "Series", "text": "\nWrite records stored in a DataFrame to a SQL database.\n\n"}, {"name": "pandas.Series.to_string", "path": "reference/api/pandas.series.to_string", "type": "Series", "text": "\nRender a string representation of the Series.\n\n"}, {"name": "pandas.Series.to_timestamp", "path": "reference/api/pandas.series.to_timestamp", "type": "Series", "text": "\nCast to DatetimeIndex of Timestamps, at beginning of period.\n\n"}, {"name": "pandas.Series.to_xarray", "path": "reference/api/pandas.series.to_xarray", "type": "Series", "text": "\nReturn an xarray object from the pandas object.\n\n"}, {"name": "pandas.Series.tolist", "path": "reference/api/pandas.series.tolist", "type": "Series", "text": "\nReturn a list of the values.\n\n"}, {"name": "pandas.Series.transform", "path": "reference/api/pandas.series.transform", "type": "Series", "text": "\nCall `func` on self producing a Series with the same axis shape as self.\n\n"}, {"name": "pandas.Series.transpose", "path": "reference/api/pandas.series.transpose", "type": "Series", "text": "\nReturn the transpose, which is by definition self.\n\n"}, {"name": "pandas.Series.truediv", "path": "reference/api/pandas.series.truediv", "type": "Series", "text": "\nReturn Floating division of series and other, element-wise (binary operator\ntruediv).\n\n"}, {"name": "pandas.Series.truncate", "path": "reference/api/pandas.series.truncate", "type": "Series", "text": "\nTruncate a Series or DataFrame before and after some index value.\n\n"}, {"name": "pandas.Series.tshift", "path": "reference/api/pandas.series.tshift", "type": "Series", "text": "\nShift the time index, using the index\u2019s frequency if available.\n\n"}, {"name": "pandas.Series.tz_convert", "path": "reference/api/pandas.series.tz_convert", "type": "Series", "text": "\nConvert tz-aware axis to target time zone.\n\n"}, {"name": "pandas.Series.tz_localize", "path": "reference/api/pandas.series.tz_localize", "type": "Series", "text": "\nLocalize tz-naive index of a Series or DataFrame to target time zone.\n\n"}, {"name": "pandas.Series.unique", "path": "reference/api/pandas.series.unique", "type": "Series", "text": "\nReturn unique values of Series object.\n\n"}, {"name": "pandas.Series.unstack", "path": "reference/api/pandas.series.unstack", "type": "Series", "text": "\nUnstack, also known as pivot, Series with MultiIndex to produce DataFrame.\n\n"}, {"name": "pandas.Series.update", "path": "reference/api/pandas.series.update", "type": "Series", "text": "\nModify Series in place using values from passed Series.\n\n"}, {"name": "pandas.Series.value_counts", "path": "reference/api/pandas.series.value_counts", "type": "Series", "text": "\nReturn a Series containing counts of unique values.\n\n"}, {"name": "pandas.Series.values", "path": "reference/api/pandas.series.values", "type": "Series", "text": "\nReturn Series as ndarray or ndarray-like depending on the dtype.\n\n"}, {"name": "pandas.Series.var", "path": "reference/api/pandas.series.var", "type": "Series", "text": "\nReturn unbiased variance over requested axis.\n\n"}, {"name": "pandas.Series.view", "path": "reference/api/pandas.series.view", "type": "Series", "text": "\nCreate a new view of the Series.\n\n"}, {"name": "pandas.Series.where", "path": "reference/api/pandas.series.where", "type": "Series", "text": "\nReplace values where the condition is False.\n\n"}, {"name": "pandas.Series.xs", "path": "reference/api/pandas.series.xs", "type": "Series", "text": "\nReturn cross-section from the Series/DataFrame.\n\n"}, {"name": "pandas.set_option", "path": "reference/api/pandas.set_option", "type": "General utility functions", "text": "\nSets the value of the specified option.\n\n"}, {"name": "pandas.show_versions", "path": "reference/api/pandas.show_versions", "type": "General utility functions", "text": "\nProvide useful information, important for bug reports.\n\n"}, {"name": "pandas.SparseDtype", "path": "reference/api/pandas.sparsedtype", "type": "Pandas arrays", "text": "\nDtype for data stored in `SparseArray`.\n\n"}, {"name": "pandas.StringDtype", "path": "reference/api/pandas.stringdtype", "type": "Pandas arrays", "text": "\nExtension dtype for string data.\n\n"}, {"name": "pandas.test", "path": "reference/api/pandas.test", "type": "General functions", "text": "\nRun the pandas test suite using pytest.\n\n"}, {"name": "pandas.testing.assert_extension_array_equal", "path": "reference/api/pandas.testing.assert_extension_array_equal", "type": "General utility functions", "text": "\nCheck that left and right ExtensionArrays are equal.\n\n"}, {"name": "pandas.testing.assert_frame_equal", "path": "reference/api/pandas.testing.assert_frame_equal", "type": "General utility functions", "text": "\nCheck that left and right DataFrame are equal.\n\n"}, {"name": "pandas.testing.assert_index_equal", "path": "reference/api/pandas.testing.assert_index_equal", "type": "General utility functions", "text": "\nCheck that left and right Index are equal.\n\n"}, {"name": "pandas.testing.assert_series_equal", "path": "reference/api/pandas.testing.assert_series_equal", "type": "General utility functions", "text": "\nCheck that left and right Series are equal.\n\n"}, {"name": "pandas.Timedelta", "path": "reference/api/pandas.timedelta", "type": "Pandas arrays", "text": "\nRepresents a duration, the difference between two dates or times.\n\n"}, {"name": "pandas.Timedelta.asm8", "path": "reference/api/pandas.timedelta.asm8", "type": "Pandas arrays", "text": "\nReturn a numpy timedelta64 array scalar view.\n\n"}, {"name": "pandas.Timedelta.ceil", "path": "reference/api/pandas.timedelta.ceil", "type": "Pandas arrays", "text": "\nReturn a new Timedelta ceiled to this resolution.\n\n"}, {"name": "pandas.Timedelta.components", "path": "reference/api/pandas.timedelta.components", "type": "Pandas arrays", "text": "\nReturn a components namedtuple-like.\n\n"}, {"name": "pandas.Timedelta.days", "path": "reference/api/pandas.timedelta.days", "type": "Pandas arrays", "text": "\nNumber of days.\n\n"}, {"name": "pandas.Timedelta.delta", "path": "reference/api/pandas.timedelta.delta", "type": "Pandas arrays", "text": "\nReturn the timedelta in nanoseconds (ns), for internal compatibility.\n\n"}, {"name": "pandas.Timedelta.floor", "path": "reference/api/pandas.timedelta.floor", "type": "Pandas arrays", "text": "\nReturn a new Timedelta floored to this resolution.\n\n"}, {"name": "pandas.Timedelta.freq", "path": "reference/api/pandas.timedelta.freq", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timedelta.is_populated", "path": "reference/api/pandas.timedelta.is_populated", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timedelta.isoformat", "path": "reference/api/pandas.timedelta.isoformat", "type": "Pandas arrays", "text": "\nFormat Timedelta as ISO 8601 Duration like `P[n]Y[n]M[n]DT[n]H[n]M[n]S`, where\nthe `[n]` s are replaced by the values. See\nhttps://en.wikipedia.org/wiki/ISO_8601#Durations.\n\n"}, {"name": "pandas.Timedelta.max", "path": "reference/api/pandas.timedelta.max", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timedelta.microseconds", "path": "reference/api/pandas.timedelta.microseconds", "type": "Pandas arrays", "text": "\nNumber of microseconds (>= 0 and less than 1 second).\n\n"}, {"name": "pandas.Timedelta.min", "path": "reference/api/pandas.timedelta.min", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timedelta.nanoseconds", "path": "reference/api/pandas.timedelta.nanoseconds", "type": "Pandas arrays", "text": "\nReturn the number of nanoseconds (n), where 0 <= n < 1 microsecond.\n\n"}, {"name": "pandas.Timedelta.resolution", "path": "reference/api/pandas.timedelta.resolution", "type": "Input/output", "text": "\n\n"}, {"name": "pandas.Timedelta.resolution_string", "path": "reference/api/pandas.timedelta.resolution_string", "type": "Input/output", "text": "\nReturn a string representing the lowest timedelta resolution.\n\n"}, {"name": "pandas.Timedelta.round", "path": "reference/api/pandas.timedelta.round", "type": "Pandas arrays", "text": "\nRound the Timedelta to the specified resolution.\n\n"}, {"name": "pandas.Timedelta.seconds", "path": "reference/api/pandas.timedelta.seconds", "type": "Pandas arrays", "text": "\nNumber of seconds (>= 0 and less than 1 day).\n\n"}, {"name": "pandas.Timedelta.to_numpy", "path": "reference/api/pandas.timedelta.to_numpy", "type": "Pandas arrays", "text": "\nConvert the Timedelta to a NumPy timedelta64.\n\n"}, {"name": "pandas.Timedelta.to_pytimedelta", "path": "reference/api/pandas.timedelta.to_pytimedelta", "type": "Pandas arrays", "text": "\nConvert a pandas Timedelta object into a python `datetime.timedelta` object.\n\n"}, {"name": "pandas.Timedelta.to_timedelta64", "path": "reference/api/pandas.timedelta.to_timedelta64", "type": "Pandas arrays", "text": "\nReturn a numpy.timedelta64 object with \u2018ns\u2019 precision.\n\n"}, {"name": "pandas.Timedelta.total_seconds", "path": "reference/api/pandas.timedelta.total_seconds", "type": "Pandas arrays", "text": "\nTotal seconds in the duration.\n\n"}, {"name": "pandas.Timedelta.value", "path": "reference/api/pandas.timedelta.value", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timedelta.view", "path": "reference/api/pandas.timedelta.view", "type": "Pandas arrays", "text": "\nArray view compatibility.\n\n"}, {"name": "pandas.timedelta_range", "path": "reference/api/pandas.timedelta_range", "type": "General functions", "text": "\nReturn a fixed frequency TimedeltaIndex, with day as the default frequency.\n\n"}, {"name": "pandas.TimedeltaIndex", "path": "reference/api/pandas.timedeltaindex", "type": "Index Objects", "text": "\nImmutable ndarray of timedelta64 data, represented internally as int64, and\nwhich can be boxed to timedelta objects.\n\n"}, {"name": "pandas.TimedeltaIndex.ceil", "path": "reference/api/pandas.timedeltaindex.ceil", "type": "Index Objects", "text": "\nPerform ceil operation on the data to the specified freq.\n\n"}, {"name": "pandas.TimedeltaIndex.components", "path": "reference/api/pandas.timedeltaindex.components", "type": "Index Objects", "text": "\nReturn a dataframe of the components (days, hours, minutes, seconds,\nmilliseconds, microseconds, nanoseconds) of the Timedeltas.\n\n"}, {"name": "pandas.TimedeltaIndex.days", "path": "reference/api/pandas.timedeltaindex.days", "type": "Index Objects", "text": "\nNumber of days for each element.\n\n"}, {"name": "pandas.TimedeltaIndex.floor", "path": "reference/api/pandas.timedeltaindex.floor", "type": "Index Objects", "text": "\nPerform floor operation on the data to the specified freq.\n\n"}, {"name": "pandas.TimedeltaIndex.inferred_freq", "path": "reference/api/pandas.timedeltaindex.inferred_freq", "type": "Index Objects", "text": "\nTries to return a string representing a frequency guess, generated by\ninfer_freq. Returns None if it can\u2019t autodetect the frequency.\n\n"}, {"name": "pandas.TimedeltaIndex.mean", "path": "reference/api/pandas.timedeltaindex.mean", "type": "Index Objects", "text": "\nReturn the mean value of the Array.\n\n"}, {"name": "pandas.TimedeltaIndex.microseconds", "path": "reference/api/pandas.timedeltaindex.microseconds", "type": "Index Objects", "text": "\nNumber of microseconds (>= 0 and less than 1 second) for each element.\n\n"}, {"name": "pandas.TimedeltaIndex.nanoseconds", "path": "reference/api/pandas.timedeltaindex.nanoseconds", "type": "Index Objects", "text": "\nNumber of nanoseconds (>= 0 and less than 1 microsecond) for each element.\n\n"}, {"name": "pandas.TimedeltaIndex.round", "path": "reference/api/pandas.timedeltaindex.round", "type": "Index Objects", "text": "\nPerform round operation on the data to the specified freq.\n\n"}, {"name": "pandas.TimedeltaIndex.seconds", "path": "reference/api/pandas.timedeltaindex.seconds", "type": "Index Objects", "text": "\nNumber of seconds (>= 0 and less than 1 day) for each element.\n\n"}, {"name": "pandas.TimedeltaIndex.to_frame", "path": "reference/api/pandas.timedeltaindex.to_frame", "type": "DataFrame", "text": "\nCreate a DataFrame with a column containing the Index.\n\n"}, {"name": "pandas.TimedeltaIndex.to_pytimedelta", "path": "reference/api/pandas.timedeltaindex.to_pytimedelta", "type": "Index Objects", "text": "\nReturn Timedelta Array/Index as object ndarray of datetime.timedelta objects.\n\n"}, {"name": "pandas.TimedeltaIndex.to_series", "path": "reference/api/pandas.timedeltaindex.to_series", "type": "Index Objects", "text": "\nCreate a Series with both index and values equal to the index keys.\n\n"}, {"name": "pandas.Timestamp", "path": "reference/api/pandas.timestamp", "type": "Pandas arrays", "text": "\nPandas replacement for python datetime.datetime object.\n\n"}, {"name": "pandas.Timestamp.asm8", "path": "reference/api/pandas.timestamp.asm8", "type": "Pandas arrays", "text": "\nReturn numpy datetime64 format in nanoseconds.\n\n"}, {"name": "pandas.Timestamp.astimezone", "path": "reference/api/pandas.timestamp.astimezone", "type": "Pandas arrays", "text": "\nConvert timezone-aware Timestamp to another time zone.\n\n"}, {"name": "pandas.Timestamp.ceil", "path": "reference/api/pandas.timestamp.ceil", "type": "Pandas arrays", "text": "\nReturn a new Timestamp ceiled to this resolution.\n\n"}, {"name": "pandas.Timestamp.combine", "path": "reference/api/pandas.timestamp.combine", "type": "Pandas arrays", "text": "\nCombine date, time into datetime with same date and time fields.\n\n"}, {"name": "pandas.Timestamp.ctime", "path": "reference/api/pandas.timestamp.ctime", "type": "Pandas arrays", "text": "\nReturn ctime() style string.\n\n"}, {"name": "pandas.Timestamp.date", "path": "reference/api/pandas.timestamp.date", "type": "Pandas arrays", "text": "\nReturn date object with same year, month and day.\n\n"}, {"name": "pandas.Timestamp.day", "path": "reference/api/pandas.timestamp.day", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.day_name", "path": "reference/api/pandas.timestamp.day_name", "type": "Pandas arrays", "text": "\nReturn the day name of the Timestamp with specified locale.\n\n"}, {"name": "pandas.Timestamp.day_of_week", "path": "reference/api/pandas.timestamp.day_of_week", "type": "Pandas arrays", "text": "\nReturn day of the week.\n\n"}, {"name": "pandas.Timestamp.day_of_year", "path": "reference/api/pandas.timestamp.day_of_year", "type": "Pandas arrays", "text": "\nReturn the day of the year.\n\n"}, {"name": "pandas.Timestamp.dayofweek", "path": "reference/api/pandas.timestamp.dayofweek", "type": "Pandas arrays", "text": "\nReturn day of the week.\n\n"}, {"name": "pandas.Timestamp.dayofyear", "path": "reference/api/pandas.timestamp.dayofyear", "type": "Pandas arrays", "text": "\nReturn the day of the year.\n\n"}, {"name": "pandas.Timestamp.days_in_month", "path": "reference/api/pandas.timestamp.days_in_month", "type": "Pandas arrays", "text": "\nReturn the number of days in the month.\n\n"}, {"name": "pandas.Timestamp.daysinmonth", "path": "reference/api/pandas.timestamp.daysinmonth", "type": "Pandas arrays", "text": "\nReturn the number of days in the month.\n\n"}, {"name": "pandas.Timestamp.dst", "path": "reference/api/pandas.timestamp.dst", "type": "Pandas arrays", "text": "\nReturn self.tzinfo.dst(self).\n\n"}, {"name": "pandas.Timestamp.floor", "path": "reference/api/pandas.timestamp.floor", "type": "Pandas arrays", "text": "\nReturn a new Timestamp floored to this resolution.\n\n"}, {"name": "pandas.Timestamp.fold", "path": "reference/api/pandas.timestamp.fold", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.freq", "path": "reference/api/pandas.timestamp.freq", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.freqstr", "path": "reference/api/pandas.timestamp.freqstr", "type": "Pandas arrays", "text": "\nReturn the total number of days in the month.\n\n"}, {"name": "pandas.Timestamp.fromisocalendar", "path": "reference/api/pandas.timestamp.fromisocalendar", "type": "Pandas arrays", "text": "\nint, int, int -> Construct a date from the ISO year, week number and weekday.\n\n"}, {"name": "pandas.Timestamp.fromisoformat", "path": "reference/api/pandas.timestamp.fromisoformat", "type": "Pandas arrays", "text": "\nstring -> datetime from datetime.isoformat() output\n\n"}, {"name": "pandas.Timestamp.fromordinal", "path": "reference/api/pandas.timestamp.fromordinal", "type": "Pandas arrays", "text": "\nPassed an ordinal, translate and convert to a ts. Note: by definition there\ncannot be any tz info on the ordinal itself.\n\n"}, {"name": "pandas.Timestamp.fromtimestamp", "path": "reference/api/pandas.timestamp.fromtimestamp", "type": "Pandas arrays", "text": "\nTransform timestamp[, tz] to tz\u2019s local time from POSIX timestamp.\n\n"}, {"name": "pandas.Timestamp.hour", "path": "reference/api/pandas.timestamp.hour", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.is_leap_year", "path": "reference/api/pandas.timestamp.is_leap_year", "type": "Pandas arrays", "text": "\nReturn True if year is a leap year.\n\n"}, {"name": "pandas.Timestamp.is_month_end", "path": "reference/api/pandas.timestamp.is_month_end", "type": "Pandas arrays", "text": "\nReturn True if date is last day of month.\n\n"}, {"name": "pandas.Timestamp.is_month_start", "path": "reference/api/pandas.timestamp.is_month_start", "type": "Pandas arrays", "text": "\nReturn True if date is first day of month.\n\n"}, {"name": "pandas.Timestamp.is_quarter_end", "path": "reference/api/pandas.timestamp.is_quarter_end", "type": "Pandas arrays", "text": "\nReturn True if date is last day of the quarter.\n\n"}, {"name": "pandas.Timestamp.is_quarter_start", "path": "reference/api/pandas.timestamp.is_quarter_start", "type": "Pandas arrays", "text": "\nReturn True if date is first day of the quarter.\n\n"}, {"name": "pandas.Timestamp.is_year_end", "path": "reference/api/pandas.timestamp.is_year_end", "type": "Pandas arrays", "text": "\nReturn True if date is last day of the year.\n\n"}, {"name": "pandas.Timestamp.is_year_start", "path": "reference/api/pandas.timestamp.is_year_start", "type": "Pandas arrays", "text": "\nReturn True if date is first day of the year.\n\n"}, {"name": "pandas.Timestamp.isocalendar", "path": "reference/api/pandas.timestamp.isocalendar", "type": "Pandas arrays", "text": "\nReturn a 3-tuple containing ISO year, week number, and weekday.\n\n"}, {"name": "pandas.Timestamp.isoformat", "path": "reference/api/pandas.timestamp.isoformat", "type": "Pandas arrays", "text": "\nReturn the time formatted according to ISO 8610.\n\n"}, {"name": "pandas.Timestamp.isoweekday", "path": "reference/api/pandas.timestamp.isoweekday", "type": "Pandas arrays", "text": "\nReturn the day of the week represented by the date. Monday == 1 \u2026 Sunday == 7.\n\n"}, {"name": "pandas.Timestamp.max", "path": "reference/api/pandas.timestamp.max", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.microsecond", "path": "reference/api/pandas.timestamp.microsecond", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.min", "path": "reference/api/pandas.timestamp.min", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.minute", "path": "reference/api/pandas.timestamp.minute", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.month", "path": "reference/api/pandas.timestamp.month", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.month_name", "path": "reference/api/pandas.timestamp.month_name", "type": "Pandas arrays", "text": "\nReturn the month name of the Timestamp with specified locale.\n\n"}, {"name": "pandas.Timestamp.nanosecond", "path": "reference/api/pandas.timestamp.nanosecond", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.normalize", "path": "reference/api/pandas.timestamp.normalize", "type": "Pandas arrays", "text": "\nNormalize Timestamp to midnight, preserving tz information.\n\n"}, {"name": "pandas.Timestamp.now", "path": "reference/api/pandas.timestamp.now", "type": "Pandas arrays", "text": "\nReturn new Timestamp object representing current time local to tz.\n\n"}, {"name": "pandas.Timestamp.quarter", "path": "reference/api/pandas.timestamp.quarter", "type": "Pandas arrays", "text": "\nReturn the quarter of the year.\n\n"}, {"name": "pandas.Timestamp.replace", "path": "reference/api/pandas.timestamp.replace", "type": "Pandas arrays", "text": "\nImplements datetime.replace, handles nanoseconds.\n\n"}, {"name": "pandas.Timestamp.resolution", "path": "reference/api/pandas.timestamp.resolution", "type": "Input/output", "text": "\n\n"}, {"name": "pandas.Timestamp.round", "path": "reference/api/pandas.timestamp.round", "type": "Pandas arrays", "text": "\nRound the Timestamp to the specified resolution.\n\n"}, {"name": "pandas.Timestamp.second", "path": "reference/api/pandas.timestamp.second", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.strftime", "path": "reference/api/pandas.timestamp.strftime", "type": "Pandas arrays", "text": "\nReturn a string representing the given POSIX timestamp controlled by an\nexplicit format string.\n\n"}, {"name": "pandas.Timestamp.strptime", "path": "reference/api/pandas.timestamp.strptime", "type": "Pandas arrays", "text": "\nFunction is not implemented. Use pd.to_datetime().\n\n"}, {"name": "pandas.Timestamp.time", "path": "reference/api/pandas.timestamp.time", "type": "Pandas arrays", "text": "\nReturn time object with same time but with tzinfo=None.\n\n"}, {"name": "pandas.Timestamp.timestamp", "path": "reference/api/pandas.timestamp.timestamp", "type": "Pandas arrays", "text": "\nReturn POSIX timestamp as float.\n\n"}, {"name": "pandas.Timestamp.timetuple", "path": "reference/api/pandas.timestamp.timetuple", "type": "Pandas arrays", "text": "\nReturn time tuple, compatible with time.localtime().\n\n"}, {"name": "pandas.Timestamp.timetz", "path": "reference/api/pandas.timestamp.timetz", "type": "Pandas arrays", "text": "\nReturn time object with same time and tzinfo.\n\n"}, {"name": "pandas.Timestamp.to_datetime64", "path": "reference/api/pandas.timestamp.to_datetime64", "type": "Pandas arrays", "text": "\nReturn a numpy.datetime64 object with \u2018ns\u2019 precision.\n\n"}, {"name": "pandas.Timestamp.to_julian_date", "path": "reference/api/pandas.timestamp.to_julian_date", "type": "Pandas arrays", "text": "\nConvert TimeStamp to a Julian Date. 0 Julian date is noon January 1, 4713 BC.\n\n"}, {"name": "pandas.Timestamp.to_numpy", "path": "reference/api/pandas.timestamp.to_numpy", "type": "Pandas arrays", "text": "\nConvert the Timestamp to a NumPy datetime64.\n\n"}, {"name": "pandas.Timestamp.to_period", "path": "reference/api/pandas.timestamp.to_period", "type": "Input/output", "text": "\nReturn an period of which this timestamp is an observation.\n\n"}, {"name": "pandas.Timestamp.to_pydatetime", "path": "reference/api/pandas.timestamp.to_pydatetime", "type": "Pandas arrays", "text": "\nConvert a Timestamp object to a native Python datetime object.\n\n"}, {"name": "pandas.Timestamp.today", "path": "reference/api/pandas.timestamp.today", "type": "Pandas arrays", "text": "\nReturn the current time in the local timezone. This differs from\ndatetime.today() in that it can be localized to a passed timezone.\n\n"}, {"name": "pandas.Timestamp.toordinal", "path": "reference/api/pandas.timestamp.toordinal", "type": "Pandas arrays", "text": "\nReturn proleptic Gregorian ordinal. January 1 of year 1 is day 1.\n\n"}, {"name": "pandas.Timestamp.tz", "path": "reference/api/pandas.timestamp.tz", "type": "Pandas arrays", "text": "\nAlias for tzinfo.\n\n"}, {"name": "pandas.Timestamp.tz_convert", "path": "reference/api/pandas.timestamp.tz_convert", "type": "Pandas arrays", "text": "\nConvert timezone-aware Timestamp to another time zone.\n\n"}, {"name": "pandas.Timestamp.tz_localize", "path": "reference/api/pandas.timestamp.tz_localize", "type": "Pandas arrays", "text": "\nConvert naive Timestamp to local time zone, or remove timezone from timezone-\naware Timestamp.\n\n"}, {"name": "pandas.Timestamp.tzinfo", "path": "reference/api/pandas.timestamp.tzinfo", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.tzname", "path": "reference/api/pandas.timestamp.tzname", "type": "Pandas arrays", "text": "\nReturn self.tzinfo.tzname(self).\n\n"}, {"name": "pandas.Timestamp.utcfromtimestamp", "path": "reference/api/pandas.timestamp.utcfromtimestamp", "type": "Pandas arrays", "text": "\nConstruct a naive UTC datetime from a POSIX timestamp.\n\n"}, {"name": "pandas.Timestamp.utcnow", "path": "reference/api/pandas.timestamp.utcnow", "type": "Pandas arrays", "text": "\nReturn a new Timestamp representing UTC day and time.\n\n"}, {"name": "pandas.Timestamp.utcoffset", "path": "reference/api/pandas.timestamp.utcoffset", "type": "Data offsets", "text": "\nReturn self.tzinfo.utcoffset(self).\n\n"}, {"name": "pandas.Timestamp.utctimetuple", "path": "reference/api/pandas.timestamp.utctimetuple", "type": "Pandas arrays", "text": "\nReturn UTC time tuple, compatible with time.localtime().\n\n"}, {"name": "pandas.Timestamp.value", "path": "reference/api/pandas.timestamp.value", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.Timestamp.week", "path": "reference/api/pandas.timestamp.week", "type": "Pandas arrays", "text": "\nReturn the week number of the year.\n\n"}, {"name": "pandas.Timestamp.weekday", "path": "reference/api/pandas.timestamp.weekday", "type": "Pandas arrays", "text": "\nReturn the day of the week represented by the date. Monday == 0 \u2026 Sunday == 6.\n\n"}, {"name": "pandas.Timestamp.weekofyear", "path": "reference/api/pandas.timestamp.weekofyear", "type": "Pandas arrays", "text": "\nReturn the week number of the year.\n\n"}, {"name": "pandas.Timestamp.year", "path": "reference/api/pandas.timestamp.year", "type": "Pandas arrays", "text": "\n\n"}, {"name": "pandas.to_datetime", "path": "reference/api/pandas.to_datetime", "type": "General functions", "text": "\nConvert argument to datetime.\n\n"}, {"name": "pandas.to_numeric", "path": "reference/api/pandas.to_numeric", "type": "General functions", "text": "\nConvert argument to a numeric type.\n\n"}, {"name": "pandas.to_timedelta", "path": "reference/api/pandas.to_timedelta", "type": "General functions", "text": "\nConvert argument to timedelta.\n\n"}, {"name": "pandas.tseries.frequencies.to_offset", "path": "reference/api/pandas.tseries.frequencies.to_offset", "type": "Data offsets", "text": "\nReturn DateOffset object from string or tuple representation or\ndatetime.timedelta object.\n\n"}, {"name": "pandas.tseries.offsets.BDay", "path": "reference/api/pandas.tseries.offsets.bday", "type": "Data offsets", "text": "\nalias of `pandas._libs.tslibs.offsets.BusinessDay`\n\n"}, {"name": "pandas.tseries.offsets.BMonthBegin", "path": "reference/api/pandas.tseries.offsets.bmonthbegin", "type": "Data offsets", "text": "\nalias of `pandas._libs.tslibs.offsets.BusinessMonthBegin`\n\n"}, {"name": "pandas.tseries.offsets.BMonthEnd", "path": "reference/api/pandas.tseries.offsets.bmonthend", "type": "Data offsets", "text": "\nalias of `pandas._libs.tslibs.offsets.BusinessMonthEnd`\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin", "path": "reference/api/pandas.tseries.offsets.bquarterbegin", "type": "Data offsets", "text": "\nDateOffset increments between the first business day of each Quarter.\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.__call__", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.apply", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.apply_index", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.base", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.copy", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.freqstr", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.is_anchored", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.is_month_end", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.is_month_start", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.is_on_offset", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.is_year_end", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.is_year_start", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.isAnchored", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.kwds", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.n", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.name", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.nanos", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.normalize", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.onOffset", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.rollback", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.rollforward", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.rule_code", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterBegin.startingMonth", "path": "reference/api/pandas.tseries.offsets.bquarterbegin.startingmonth", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd", "path": "reference/api/pandas.tseries.offsets.bquarterend", "type": "Data offsets", "text": "\nDateOffset increments between the last business day of each Quarter.\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.__call__", "path": "reference/api/pandas.tseries.offsets.bquarterend.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.apply", "path": "reference/api/pandas.tseries.offsets.bquarterend.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.apply_index", "path": "reference/api/pandas.tseries.offsets.bquarterend.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.base", "path": "reference/api/pandas.tseries.offsets.bquarterend.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.copy", "path": "reference/api/pandas.tseries.offsets.bquarterend.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.freqstr", "path": "reference/api/pandas.tseries.offsets.bquarterend.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.is_anchored", "path": "reference/api/pandas.tseries.offsets.bquarterend.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.is_month_end", "path": "reference/api/pandas.tseries.offsets.bquarterend.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.is_month_start", "path": "reference/api/pandas.tseries.offsets.bquarterend.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.is_on_offset", "path": "reference/api/pandas.tseries.offsets.bquarterend.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.bquarterend.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.bquarterend.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.is_year_end", "path": "reference/api/pandas.tseries.offsets.bquarterend.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.is_year_start", "path": "reference/api/pandas.tseries.offsets.bquarterend.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.isAnchored", "path": "reference/api/pandas.tseries.offsets.bquarterend.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.kwds", "path": "reference/api/pandas.tseries.offsets.bquarterend.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.n", "path": "reference/api/pandas.tseries.offsets.bquarterend.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.name", "path": "reference/api/pandas.tseries.offsets.bquarterend.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.nanos", "path": "reference/api/pandas.tseries.offsets.bquarterend.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.normalize", "path": "reference/api/pandas.tseries.offsets.bquarterend.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.onOffset", "path": "reference/api/pandas.tseries.offsets.bquarterend.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.rollback", "path": "reference/api/pandas.tseries.offsets.bquarterend.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.rollforward", "path": "reference/api/pandas.tseries.offsets.bquarterend.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.rule_code", "path": "reference/api/pandas.tseries.offsets.bquarterend.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BQuarterEnd.startingMonth", "path": "reference/api/pandas.tseries.offsets.bquarterend.startingmonth", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay", "path": "reference/api/pandas.tseries.offsets.businessday", "type": "Data offsets", "text": "\nDateOffset subclass representing possibly n business days.\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.__call__", "path": "reference/api/pandas.tseries.offsets.businessday.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.apply", "path": "reference/api/pandas.tseries.offsets.businessday.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.apply_index", "path": "reference/api/pandas.tseries.offsets.businessday.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.base", "path": "reference/api/pandas.tseries.offsets.businessday.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.calendar", "path": "reference/api/pandas.tseries.offsets.businessday.calendar", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.copy", "path": "reference/api/pandas.tseries.offsets.businessday.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.freqstr", "path": "reference/api/pandas.tseries.offsets.businessday.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.holidays", "path": "reference/api/pandas.tseries.offsets.businessday.holidays", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.is_anchored", "path": "reference/api/pandas.tseries.offsets.businessday.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.is_month_end", "path": "reference/api/pandas.tseries.offsets.businessday.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.is_month_start", "path": "reference/api/pandas.tseries.offsets.businessday.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.is_on_offset", "path": "reference/api/pandas.tseries.offsets.businessday.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.businessday.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.businessday.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.is_year_end", "path": "reference/api/pandas.tseries.offsets.businessday.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.is_year_start", "path": "reference/api/pandas.tseries.offsets.businessday.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.isAnchored", "path": "reference/api/pandas.tseries.offsets.businessday.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.kwds", "path": "reference/api/pandas.tseries.offsets.businessday.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.n", "path": "reference/api/pandas.tseries.offsets.businessday.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.name", "path": "reference/api/pandas.tseries.offsets.businessday.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.nanos", "path": "reference/api/pandas.tseries.offsets.businessday.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.normalize", "path": "reference/api/pandas.tseries.offsets.businessday.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.offset", "path": "reference/api/pandas.tseries.offsets.businessday.offset", "type": "Data offsets", "text": "\nAlias for self._offset.\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.onOffset", "path": "reference/api/pandas.tseries.offsets.businessday.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.rollback", "path": "reference/api/pandas.tseries.offsets.businessday.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.rollforward", "path": "reference/api/pandas.tseries.offsets.businessday.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.rule_code", "path": "reference/api/pandas.tseries.offsets.businessday.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessDay.weekmask", "path": "reference/api/pandas.tseries.offsets.businessday.weekmask", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour", "path": "reference/api/pandas.tseries.offsets.businesshour", "type": "Data offsets", "text": "\nDateOffset subclass representing possibly n business hours.\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.__call__", "path": "reference/api/pandas.tseries.offsets.businesshour.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.apply", "path": "reference/api/pandas.tseries.offsets.businesshour.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.apply_index", "path": "reference/api/pandas.tseries.offsets.businesshour.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.base", "path": "reference/api/pandas.tseries.offsets.businesshour.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.calendar", "path": "reference/api/pandas.tseries.offsets.businesshour.calendar", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.copy", "path": "reference/api/pandas.tseries.offsets.businesshour.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.end", "path": "reference/api/pandas.tseries.offsets.businesshour.end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.freqstr", "path": "reference/api/pandas.tseries.offsets.businesshour.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.holidays", "path": "reference/api/pandas.tseries.offsets.businesshour.holidays", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.is_anchored", "path": "reference/api/pandas.tseries.offsets.businesshour.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.is_month_end", "path": "reference/api/pandas.tseries.offsets.businesshour.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.is_month_start", "path": "reference/api/pandas.tseries.offsets.businesshour.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.is_on_offset", "path": "reference/api/pandas.tseries.offsets.businesshour.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.businesshour.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.businesshour.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.is_year_end", "path": "reference/api/pandas.tseries.offsets.businesshour.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.is_year_start", "path": "reference/api/pandas.tseries.offsets.businesshour.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.isAnchored", "path": "reference/api/pandas.tseries.offsets.businesshour.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.kwds", "path": "reference/api/pandas.tseries.offsets.businesshour.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.n", "path": "reference/api/pandas.tseries.offsets.businesshour.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.name", "path": "reference/api/pandas.tseries.offsets.businesshour.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.nanos", "path": "reference/api/pandas.tseries.offsets.businesshour.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.next_bday", "path": "reference/api/pandas.tseries.offsets.businesshour.next_bday", "type": "Data offsets", "text": "\nUsed for moving to next business day.\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.normalize", "path": "reference/api/pandas.tseries.offsets.businesshour.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.offset", "path": "reference/api/pandas.tseries.offsets.businesshour.offset", "type": "Data offsets", "text": "\nAlias for self._offset.\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.onOffset", "path": "reference/api/pandas.tseries.offsets.businesshour.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.rollback", "path": "reference/api/pandas.tseries.offsets.businesshour.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.rollforward", "path": "reference/api/pandas.tseries.offsets.businesshour.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.rule_code", "path": "reference/api/pandas.tseries.offsets.businesshour.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.start", "path": "reference/api/pandas.tseries.offsets.businesshour.start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessHour.weekmask", "path": "reference/api/pandas.tseries.offsets.businesshour.weekmask", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin", "type": "Data offsets", "text": "\nDateOffset of one month at the first business day.\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.__call__", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.apply", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.apply_index", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.base", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.copy", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.freqstr", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.is_anchored", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.is_month_end", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.is_month_start", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.is_on_offset", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.is_year_end", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.is_year_start", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.isAnchored", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.kwds", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.n", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.name", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.nanos", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.normalize", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.onOffset", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.rollback", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.rollforward", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthBegin.rule_code", "path": "reference/api/pandas.tseries.offsets.businessmonthbegin.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd", "path": "reference/api/pandas.tseries.offsets.businessmonthend", "type": "Data offsets", "text": "\nDateOffset increments between the last business day of the month.\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.__call__", "path": "reference/api/pandas.tseries.offsets.businessmonthend.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.apply", "path": "reference/api/pandas.tseries.offsets.businessmonthend.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.apply_index", "path": "reference/api/pandas.tseries.offsets.businessmonthend.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.base", "path": "reference/api/pandas.tseries.offsets.businessmonthend.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.copy", "path": "reference/api/pandas.tseries.offsets.businessmonthend.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.freqstr", "path": "reference/api/pandas.tseries.offsets.businessmonthend.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.is_anchored", "path": "reference/api/pandas.tseries.offsets.businessmonthend.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.is_month_end", "path": "reference/api/pandas.tseries.offsets.businessmonthend.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.is_month_start", "path": "reference/api/pandas.tseries.offsets.businessmonthend.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.is_on_offset", "path": "reference/api/pandas.tseries.offsets.businessmonthend.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.businessmonthend.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.businessmonthend.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.is_year_end", "path": "reference/api/pandas.tseries.offsets.businessmonthend.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.is_year_start", "path": "reference/api/pandas.tseries.offsets.businessmonthend.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.isAnchored", "path": "reference/api/pandas.tseries.offsets.businessmonthend.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.kwds", "path": "reference/api/pandas.tseries.offsets.businessmonthend.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.n", "path": "reference/api/pandas.tseries.offsets.businessmonthend.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.name", "path": "reference/api/pandas.tseries.offsets.businessmonthend.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.nanos", "path": "reference/api/pandas.tseries.offsets.businessmonthend.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.normalize", "path": "reference/api/pandas.tseries.offsets.businessmonthend.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.onOffset", "path": "reference/api/pandas.tseries.offsets.businessmonthend.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.rollback", "path": "reference/api/pandas.tseries.offsets.businessmonthend.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.rollforward", "path": "reference/api/pandas.tseries.offsets.businessmonthend.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BusinessMonthEnd.rule_code", "path": "reference/api/pandas.tseries.offsets.businessmonthend.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin", "path": "reference/api/pandas.tseries.offsets.byearbegin", "type": "Data offsets", "text": "\nDateOffset increments between the first business day of the year.\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.__call__", "path": "reference/api/pandas.tseries.offsets.byearbegin.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.apply", "path": "reference/api/pandas.tseries.offsets.byearbegin.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.apply_index", "path": "reference/api/pandas.tseries.offsets.byearbegin.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.base", "path": "reference/api/pandas.tseries.offsets.byearbegin.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.copy", "path": "reference/api/pandas.tseries.offsets.byearbegin.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.freqstr", "path": "reference/api/pandas.tseries.offsets.byearbegin.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.is_anchored", "path": "reference/api/pandas.tseries.offsets.byearbegin.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.is_month_end", "path": "reference/api/pandas.tseries.offsets.byearbegin.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.is_month_start", "path": "reference/api/pandas.tseries.offsets.byearbegin.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.is_on_offset", "path": "reference/api/pandas.tseries.offsets.byearbegin.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.byearbegin.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.byearbegin.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.is_year_end", "path": "reference/api/pandas.tseries.offsets.byearbegin.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.is_year_start", "path": "reference/api/pandas.tseries.offsets.byearbegin.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.isAnchored", "path": "reference/api/pandas.tseries.offsets.byearbegin.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.kwds", "path": "reference/api/pandas.tseries.offsets.byearbegin.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.month", "path": "reference/api/pandas.tseries.offsets.byearbegin.month", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.n", "path": "reference/api/pandas.tseries.offsets.byearbegin.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.name", "path": "reference/api/pandas.tseries.offsets.byearbegin.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.nanos", "path": "reference/api/pandas.tseries.offsets.byearbegin.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.normalize", "path": "reference/api/pandas.tseries.offsets.byearbegin.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.onOffset", "path": "reference/api/pandas.tseries.offsets.byearbegin.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.rollback", "path": "reference/api/pandas.tseries.offsets.byearbegin.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.rollforward", "path": "reference/api/pandas.tseries.offsets.byearbegin.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BYearBegin.rule_code", "path": "reference/api/pandas.tseries.offsets.byearbegin.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd", "path": "reference/api/pandas.tseries.offsets.byearend", "type": "Data offsets", "text": "\nDateOffset increments between the last business day of the year.\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.__call__", "path": "reference/api/pandas.tseries.offsets.byearend.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.apply", "path": "reference/api/pandas.tseries.offsets.byearend.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.apply_index", "path": "reference/api/pandas.tseries.offsets.byearend.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.base", "path": "reference/api/pandas.tseries.offsets.byearend.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.copy", "path": "reference/api/pandas.tseries.offsets.byearend.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.freqstr", "path": "reference/api/pandas.tseries.offsets.byearend.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.is_anchored", "path": "reference/api/pandas.tseries.offsets.byearend.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.is_month_end", "path": "reference/api/pandas.tseries.offsets.byearend.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.is_month_start", "path": "reference/api/pandas.tseries.offsets.byearend.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.is_on_offset", "path": "reference/api/pandas.tseries.offsets.byearend.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.byearend.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.byearend.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.is_year_end", "path": "reference/api/pandas.tseries.offsets.byearend.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.is_year_start", "path": "reference/api/pandas.tseries.offsets.byearend.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.isAnchored", "path": "reference/api/pandas.tseries.offsets.byearend.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.kwds", "path": "reference/api/pandas.tseries.offsets.byearend.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.month", "path": "reference/api/pandas.tseries.offsets.byearend.month", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.n", "path": "reference/api/pandas.tseries.offsets.byearend.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.name", "path": "reference/api/pandas.tseries.offsets.byearend.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.nanos", "path": "reference/api/pandas.tseries.offsets.byearend.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.normalize", "path": "reference/api/pandas.tseries.offsets.byearend.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.onOffset", "path": "reference/api/pandas.tseries.offsets.byearend.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.rollback", "path": "reference/api/pandas.tseries.offsets.byearend.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.rollforward", "path": "reference/api/pandas.tseries.offsets.byearend.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.BYearEnd.rule_code", "path": "reference/api/pandas.tseries.offsets.byearend.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CBMonthBegin", "path": "reference/api/pandas.tseries.offsets.cbmonthbegin", "type": "Data offsets", "text": "\nalias of `pandas._libs.tslibs.offsets.CustomBusinessMonthBegin`\n\n"}, {"name": "pandas.tseries.offsets.CBMonthEnd", "path": "reference/api/pandas.tseries.offsets.cbmonthend", "type": "Data offsets", "text": "\nalias of `pandas._libs.tslibs.offsets.CustomBusinessMonthEnd`\n\n"}, {"name": "pandas.tseries.offsets.CDay", "path": "reference/api/pandas.tseries.offsets.cday", "type": "Data offsets", "text": "\nalias of `pandas._libs.tslibs.offsets.CustomBusinessDay`\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay", "path": "reference/api/pandas.tseries.offsets.custombusinessday", "type": "Data offsets", "text": "\nDateOffset subclass representing custom business days excluding holidays.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.__call__", "path": "reference/api/pandas.tseries.offsets.custombusinessday.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.apply", "path": "reference/api/pandas.tseries.offsets.custombusinessday.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.apply_index", "path": "reference/api/pandas.tseries.offsets.custombusinessday.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.base", "path": "reference/api/pandas.tseries.offsets.custombusinessday.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.calendar", "path": "reference/api/pandas.tseries.offsets.custombusinessday.calendar", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.copy", "path": "reference/api/pandas.tseries.offsets.custombusinessday.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.freqstr", "path": "reference/api/pandas.tseries.offsets.custombusinessday.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.holidays", "path": "reference/api/pandas.tseries.offsets.custombusinessday.holidays", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.is_anchored", "path": "reference/api/pandas.tseries.offsets.custombusinessday.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.is_month_end", "path": "reference/api/pandas.tseries.offsets.custombusinessday.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.is_month_start", "path": "reference/api/pandas.tseries.offsets.custombusinessday.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.is_on_offset", "path": "reference/api/pandas.tseries.offsets.custombusinessday.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.custombusinessday.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.custombusinessday.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.is_year_end", "path": "reference/api/pandas.tseries.offsets.custombusinessday.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.is_year_start", "path": "reference/api/pandas.tseries.offsets.custombusinessday.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.isAnchored", "path": "reference/api/pandas.tseries.offsets.custombusinessday.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.kwds", "path": "reference/api/pandas.tseries.offsets.custombusinessday.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.n", "path": "reference/api/pandas.tseries.offsets.custombusinessday.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.name", "path": "reference/api/pandas.tseries.offsets.custombusinessday.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.nanos", "path": "reference/api/pandas.tseries.offsets.custombusinessday.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.normalize", "path": "reference/api/pandas.tseries.offsets.custombusinessday.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.offset", "path": "reference/api/pandas.tseries.offsets.custombusinessday.offset", "type": "Data offsets", "text": "\nAlias for self._offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.onOffset", "path": "reference/api/pandas.tseries.offsets.custombusinessday.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.rollback", "path": "reference/api/pandas.tseries.offsets.custombusinessday.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.rollforward", "path": "reference/api/pandas.tseries.offsets.custombusinessday.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.rule_code", "path": "reference/api/pandas.tseries.offsets.custombusinessday.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessDay.weekmask", "path": "reference/api/pandas.tseries.offsets.custombusinessday.weekmask", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour", "path": "reference/api/pandas.tseries.offsets.custombusinesshour", "type": "Data offsets", "text": "\nDateOffset subclass representing possibly n custom business days.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.__call__", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.apply", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.apply_index", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.base", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.calendar", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.calendar", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.copy", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.end", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.freqstr", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.holidays", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.holidays", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.is_anchored", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.is_month_end", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.is_month_start", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.is_on_offset", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.is_year_end", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.is_year_start", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.isAnchored", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.kwds", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.n", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.name", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.nanos", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.next_bday", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.next_bday", "type": "Data offsets", "text": "\nUsed for moving to next business day.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.normalize", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.offset", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.offset", "type": "Data offsets", "text": "\nAlias for self._offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.onOffset", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.rollback", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.rollforward", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.rule_code", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.start", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessHour.weekmask", "path": "reference/api/pandas.tseries.offsets.custombusinesshour.weekmask", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin", "type": "Data offsets", "text": "\nAttributes\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.__call__", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.apply", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.apply_index", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.base", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.calendar", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.calendar", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.cbday_roll", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.cbday_roll", "type": "Data offsets", "text": "\nDefine default roll function to be called in apply method.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.copy", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.holidays", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.holidays", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.is_anchored", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_end", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_start", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.is_on_offset", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_end", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_start", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.isAnchored", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.kwds", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.m_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.month_roll", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.month_roll", "type": "Data offsets", "text": "\nDefine default roll function to be called in apply method.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.n", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.name", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.nanos", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.normalize", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.offset", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.offset", "type": "Data offsets", "text": "\nAlias for self._offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.onOffset", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.rollback", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.rollforward", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthBegin.weekmask", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthbegin.weekmask", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend", "type": "Data offsets", "text": "\nAttributes\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.__call__", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.apply", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.apply_index", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.base", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.calendar", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.calendar", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.cbday_roll", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.cbday_roll", "type": "Data offsets", "text": "\nDefine default roll function to be called in apply method.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.copy", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.holidays", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.holidays", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.is_anchored", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_end", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_start", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.is_on_offset", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_end", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_start", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.isAnchored", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.kwds", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.m_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.month_roll", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.month_roll", "type": "Data offsets", "text": "\nDefine default roll function to be called in apply method.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.n", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.name", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.nanos", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.normalize", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.offset", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.offset", "type": "Data offsets", "text": "\nAlias for self._offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.onOffset", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.rollback", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.rollforward", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.CustomBusinessMonthEnd.weekmask", "path": "reference/api/pandas.tseries.offsets.custombusinessmonthend.weekmask", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset", "path": "reference/api/pandas.tseries.offsets.dateoffset", "type": "Data offsets", "text": "\nStandard kind of date increment used for a date range.\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.__call__", "path": "reference/api/pandas.tseries.offsets.dateoffset.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.apply", "path": "reference/api/pandas.tseries.offsets.dateoffset.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.apply_index", "path": "reference/api/pandas.tseries.offsets.dateoffset.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.base", "path": "reference/api/pandas.tseries.offsets.dateoffset.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.copy", "path": "reference/api/pandas.tseries.offsets.dateoffset.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.freqstr", "path": "reference/api/pandas.tseries.offsets.dateoffset.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.is_anchored", "path": "reference/api/pandas.tseries.offsets.dateoffset.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.is_month_end", "path": "reference/api/pandas.tseries.offsets.dateoffset.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.is_month_start", "path": "reference/api/pandas.tseries.offsets.dateoffset.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.is_on_offset", "path": "reference/api/pandas.tseries.offsets.dateoffset.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.dateoffset.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.dateoffset.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.is_year_end", "path": "reference/api/pandas.tseries.offsets.dateoffset.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.is_year_start", "path": "reference/api/pandas.tseries.offsets.dateoffset.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.isAnchored", "path": "reference/api/pandas.tseries.offsets.dateoffset.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.kwds", "path": "reference/api/pandas.tseries.offsets.dateoffset.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.n", "path": "reference/api/pandas.tseries.offsets.dateoffset.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.name", "path": "reference/api/pandas.tseries.offsets.dateoffset.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.nanos", "path": "reference/api/pandas.tseries.offsets.dateoffset.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.normalize", "path": "reference/api/pandas.tseries.offsets.dateoffset.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.onOffset", "path": "reference/api/pandas.tseries.offsets.dateoffset.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.rollback", "path": "reference/api/pandas.tseries.offsets.dateoffset.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.rollforward", "path": "reference/api/pandas.tseries.offsets.dateoffset.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.DateOffset.rule_code", "path": "reference/api/pandas.tseries.offsets.dateoffset.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day", "path": "reference/api/pandas.tseries.offsets.day", "type": "Data offsets", "text": "\nAttributes\n\n"}, {"name": "pandas.tseries.offsets.Day.__call__", "path": "reference/api/pandas.tseries.offsets.day.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.Day.apply", "path": "reference/api/pandas.tseries.offsets.day.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.apply_index", "path": "reference/api/pandas.tseries.offsets.day.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.base", "path": "reference/api/pandas.tseries.offsets.day.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.Day.copy", "path": "reference/api/pandas.tseries.offsets.day.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.delta", "path": "reference/api/pandas.tseries.offsets.day.delta", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.freqstr", "path": "reference/api/pandas.tseries.offsets.day.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.is_anchored", "path": "reference/api/pandas.tseries.offsets.day.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.is_month_end", "path": "reference/api/pandas.tseries.offsets.day.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.is_month_start", "path": "reference/api/pandas.tseries.offsets.day.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.is_on_offset", "path": "reference/api/pandas.tseries.offsets.day.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.day.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.day.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.is_year_end", "path": "reference/api/pandas.tseries.offsets.day.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.is_year_start", "path": "reference/api/pandas.tseries.offsets.day.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.isAnchored", "path": "reference/api/pandas.tseries.offsets.day.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.kwds", "path": "reference/api/pandas.tseries.offsets.day.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.n", "path": "reference/api/pandas.tseries.offsets.day.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.name", "path": "reference/api/pandas.tseries.offsets.day.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.nanos", "path": "reference/api/pandas.tseries.offsets.day.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.normalize", "path": "reference/api/pandas.tseries.offsets.day.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.onOffset", "path": "reference/api/pandas.tseries.offsets.day.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Day.rollback", "path": "reference/api/pandas.tseries.offsets.day.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Day.rollforward", "path": "reference/api/pandas.tseries.offsets.day.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Day.rule_code", "path": "reference/api/pandas.tseries.offsets.day.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter", "path": "reference/api/pandas.tseries.offsets.easter", "type": "Data offsets", "text": "\nDateOffset for the Easter holiday using logic defined in dateutil.\n\n"}, {"name": "pandas.tseries.offsets.Easter.__call__", "path": "reference/api/pandas.tseries.offsets.easter.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.Easter.apply", "path": "reference/api/pandas.tseries.offsets.easter.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.apply_index", "path": "reference/api/pandas.tseries.offsets.easter.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.base", "path": "reference/api/pandas.tseries.offsets.easter.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.Easter.copy", "path": "reference/api/pandas.tseries.offsets.easter.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.freqstr", "path": "reference/api/pandas.tseries.offsets.easter.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.is_anchored", "path": "reference/api/pandas.tseries.offsets.easter.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.is_month_end", "path": "reference/api/pandas.tseries.offsets.easter.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.is_month_start", "path": "reference/api/pandas.tseries.offsets.easter.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.is_on_offset", "path": "reference/api/pandas.tseries.offsets.easter.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.easter.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.easter.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.is_year_end", "path": "reference/api/pandas.tseries.offsets.easter.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.is_year_start", "path": "reference/api/pandas.tseries.offsets.easter.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.isAnchored", "path": "reference/api/pandas.tseries.offsets.easter.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.kwds", "path": "reference/api/pandas.tseries.offsets.easter.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.n", "path": "reference/api/pandas.tseries.offsets.easter.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.name", "path": "reference/api/pandas.tseries.offsets.easter.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.nanos", "path": "reference/api/pandas.tseries.offsets.easter.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.normalize", "path": "reference/api/pandas.tseries.offsets.easter.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.onOffset", "path": "reference/api/pandas.tseries.offsets.easter.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Easter.rollback", "path": "reference/api/pandas.tseries.offsets.easter.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Easter.rollforward", "path": "reference/api/pandas.tseries.offsets.easter.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Easter.rule_code", "path": "reference/api/pandas.tseries.offsets.easter.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253", "path": "reference/api/pandas.tseries.offsets.fy5253", "type": "Data offsets", "text": "\nDescribes 52-53 week fiscal year. This is also known as a 4-4-5 calendar.\n\n"}, {"name": "pandas.tseries.offsets.FY5253.__call__", "path": "reference/api/pandas.tseries.offsets.fy5253.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.FY5253.apply", "path": "reference/api/pandas.tseries.offsets.fy5253.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.apply_index", "path": "reference/api/pandas.tseries.offsets.fy5253.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.base", "path": "reference/api/pandas.tseries.offsets.fy5253.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.FY5253.copy", "path": "reference/api/pandas.tseries.offsets.fy5253.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.freqstr", "path": "reference/api/pandas.tseries.offsets.fy5253.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.get_rule_code_suffix", "path": "reference/api/pandas.tseries.offsets.fy5253.get_rule_code_suffix", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.get_year_end", "path": "reference/api/pandas.tseries.offsets.fy5253.get_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.is_anchored", "path": "reference/api/pandas.tseries.offsets.fy5253.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.is_month_end", "path": "reference/api/pandas.tseries.offsets.fy5253.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.is_month_start", "path": "reference/api/pandas.tseries.offsets.fy5253.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.is_on_offset", "path": "reference/api/pandas.tseries.offsets.fy5253.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.fy5253.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.fy5253.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.is_year_end", "path": "reference/api/pandas.tseries.offsets.fy5253.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.is_year_start", "path": "reference/api/pandas.tseries.offsets.fy5253.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.isAnchored", "path": "reference/api/pandas.tseries.offsets.fy5253.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.kwds", "path": "reference/api/pandas.tseries.offsets.fy5253.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.n", "path": "reference/api/pandas.tseries.offsets.fy5253.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.name", "path": "reference/api/pandas.tseries.offsets.fy5253.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.nanos", "path": "reference/api/pandas.tseries.offsets.fy5253.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.normalize", "path": "reference/api/pandas.tseries.offsets.fy5253.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.onOffset", "path": "reference/api/pandas.tseries.offsets.fy5253.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.rollback", "path": "reference/api/pandas.tseries.offsets.fy5253.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.FY5253.rollforward", "path": "reference/api/pandas.tseries.offsets.fy5253.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.FY5253.rule_code", "path": "reference/api/pandas.tseries.offsets.fy5253.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.startingMonth", "path": "reference/api/pandas.tseries.offsets.fy5253.startingmonth", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.variation", "path": "reference/api/pandas.tseries.offsets.fy5253.variation", "type": "Input/output", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253.weekday", "path": "reference/api/pandas.tseries.offsets.fy5253.weekday", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter", "path": "reference/api/pandas.tseries.offsets.fy5253quarter", "type": "Data offsets", "text": "\nDateOffset increments between business quarter dates for 52-53 week fiscal\nyear (also known as a 4-4-5 calendar).\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.__call__", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.apply", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.apply_index", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.base", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.copy", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.freqstr", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.get_rule_code_suffix", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.get_rule_code_suffix", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.get_weeks", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.get_weeks", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.is_anchored", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.is_month_end", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.is_month_start", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.is_on_offset", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.is_year_end", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.is_year_start", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.isAnchored", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.kwds", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.n", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.name", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.nanos", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.normalize", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.onOffset", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.qtr_with_extra_week", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.qtr_with_extra_week", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.rollback", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.rollforward", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.rule_code", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.startingMonth", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.startingmonth", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.variation", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.variation", "type": "Input/output", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.weekday", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.weekday", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.FY5253Quarter.year_has_extra_week", "path": "reference/api/pandas.tseries.offsets.fy5253quarter.year_has_extra_week", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour", "path": "reference/api/pandas.tseries.offsets.hour", "type": "Data offsets", "text": "\nAttributes\n\n"}, {"name": "pandas.tseries.offsets.Hour.__call__", "path": "reference/api/pandas.tseries.offsets.hour.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.Hour.apply", "path": "reference/api/pandas.tseries.offsets.hour.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.apply_index", "path": "reference/api/pandas.tseries.offsets.hour.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.base", "path": "reference/api/pandas.tseries.offsets.hour.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.Hour.copy", "path": "reference/api/pandas.tseries.offsets.hour.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.delta", "path": "reference/api/pandas.tseries.offsets.hour.delta", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.freqstr", "path": "reference/api/pandas.tseries.offsets.hour.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.is_anchored", "path": "reference/api/pandas.tseries.offsets.hour.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.is_month_end", "path": "reference/api/pandas.tseries.offsets.hour.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.is_month_start", "path": "reference/api/pandas.tseries.offsets.hour.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.is_on_offset", "path": "reference/api/pandas.tseries.offsets.hour.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.hour.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.hour.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.is_year_end", "path": "reference/api/pandas.tseries.offsets.hour.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.is_year_start", "path": "reference/api/pandas.tseries.offsets.hour.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.isAnchored", "path": "reference/api/pandas.tseries.offsets.hour.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.kwds", "path": "reference/api/pandas.tseries.offsets.hour.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.n", "path": "reference/api/pandas.tseries.offsets.hour.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.name", "path": "reference/api/pandas.tseries.offsets.hour.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.nanos", "path": "reference/api/pandas.tseries.offsets.hour.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.normalize", "path": "reference/api/pandas.tseries.offsets.hour.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.onOffset", "path": "reference/api/pandas.tseries.offsets.hour.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Hour.rollback", "path": "reference/api/pandas.tseries.offsets.hour.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Hour.rollforward", "path": "reference/api/pandas.tseries.offsets.hour.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Hour.rule_code", "path": "reference/api/pandas.tseries.offsets.hour.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth", "type": "Data offsets", "text": "\nDescribes monthly dates in last week of month like \u201cthe last Tuesday of each\nmonth\u201d.\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.__call__", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.apply", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.apply_index", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.base", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.copy", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.freqstr", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.is_anchored", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.is_month_end", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.is_month_start", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.is_on_offset", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.is_year_end", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.is_year_start", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.isAnchored", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.kwds", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.n", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.name", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.nanos", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.normalize", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.onOffset", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.rollback", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.rollforward", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.rule_code", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.week", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.week", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.LastWeekOfMonth.weekday", "path": "reference/api/pandas.tseries.offsets.lastweekofmonth.weekday", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro", "path": "reference/api/pandas.tseries.offsets.micro", "type": "Data offsets", "text": "\nAttributes\n\n"}, {"name": "pandas.tseries.offsets.Micro.__call__", "path": "reference/api/pandas.tseries.offsets.micro.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.Micro.apply", "path": "reference/api/pandas.tseries.offsets.micro.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.apply_index", "path": "reference/api/pandas.tseries.offsets.micro.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.base", "path": "reference/api/pandas.tseries.offsets.micro.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.Micro.copy", "path": "reference/api/pandas.tseries.offsets.micro.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.delta", "path": "reference/api/pandas.tseries.offsets.micro.delta", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.freqstr", "path": "reference/api/pandas.tseries.offsets.micro.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.is_anchored", "path": "reference/api/pandas.tseries.offsets.micro.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.is_month_end", "path": "reference/api/pandas.tseries.offsets.micro.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.is_month_start", "path": "reference/api/pandas.tseries.offsets.micro.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.is_on_offset", "path": "reference/api/pandas.tseries.offsets.micro.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.micro.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.micro.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.is_year_end", "path": "reference/api/pandas.tseries.offsets.micro.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.is_year_start", "path": "reference/api/pandas.tseries.offsets.micro.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.isAnchored", "path": "reference/api/pandas.tseries.offsets.micro.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.kwds", "path": "reference/api/pandas.tseries.offsets.micro.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.n", "path": "reference/api/pandas.tseries.offsets.micro.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.name", "path": "reference/api/pandas.tseries.offsets.micro.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.nanos", "path": "reference/api/pandas.tseries.offsets.micro.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.normalize", "path": "reference/api/pandas.tseries.offsets.micro.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.onOffset", "path": "reference/api/pandas.tseries.offsets.micro.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Micro.rollback", "path": "reference/api/pandas.tseries.offsets.micro.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Micro.rollforward", "path": "reference/api/pandas.tseries.offsets.micro.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Micro.rule_code", "path": "reference/api/pandas.tseries.offsets.micro.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli", "path": "reference/api/pandas.tseries.offsets.milli", "type": "Data offsets", "text": "\nAttributes\n\n"}, {"name": "pandas.tseries.offsets.Milli.__call__", "path": "reference/api/pandas.tseries.offsets.milli.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.Milli.apply", "path": "reference/api/pandas.tseries.offsets.milli.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.apply_index", "path": "reference/api/pandas.tseries.offsets.milli.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.base", "path": "reference/api/pandas.tseries.offsets.milli.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.Milli.copy", "path": "reference/api/pandas.tseries.offsets.milli.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.delta", "path": "reference/api/pandas.tseries.offsets.milli.delta", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.freqstr", "path": "reference/api/pandas.tseries.offsets.milli.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.is_anchored", "path": "reference/api/pandas.tseries.offsets.milli.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.is_month_end", "path": "reference/api/pandas.tseries.offsets.milli.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.is_month_start", "path": "reference/api/pandas.tseries.offsets.milli.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.is_on_offset", "path": "reference/api/pandas.tseries.offsets.milli.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.milli.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.milli.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.is_year_end", "path": "reference/api/pandas.tseries.offsets.milli.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.is_year_start", "path": "reference/api/pandas.tseries.offsets.milli.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.isAnchored", "path": "reference/api/pandas.tseries.offsets.milli.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.kwds", "path": "reference/api/pandas.tseries.offsets.milli.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.n", "path": "reference/api/pandas.tseries.offsets.milli.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.name", "path": "reference/api/pandas.tseries.offsets.milli.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.nanos", "path": "reference/api/pandas.tseries.offsets.milli.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.normalize", "path": "reference/api/pandas.tseries.offsets.milli.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.onOffset", "path": "reference/api/pandas.tseries.offsets.milli.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Milli.rollback", "path": "reference/api/pandas.tseries.offsets.milli.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Milli.rollforward", "path": "reference/api/pandas.tseries.offsets.milli.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Milli.rule_code", "path": "reference/api/pandas.tseries.offsets.milli.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute", "path": "reference/api/pandas.tseries.offsets.minute", "type": "Data offsets", "text": "\nAttributes\n\n"}, {"name": "pandas.tseries.offsets.Minute.__call__", "path": "reference/api/pandas.tseries.offsets.minute.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.Minute.apply", "path": "reference/api/pandas.tseries.offsets.minute.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.apply_index", "path": "reference/api/pandas.tseries.offsets.minute.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.base", "path": "reference/api/pandas.tseries.offsets.minute.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.Minute.copy", "path": "reference/api/pandas.tseries.offsets.minute.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.delta", "path": "reference/api/pandas.tseries.offsets.minute.delta", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.freqstr", "path": "reference/api/pandas.tseries.offsets.minute.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.is_anchored", "path": "reference/api/pandas.tseries.offsets.minute.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.is_month_end", "path": "reference/api/pandas.tseries.offsets.minute.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.is_month_start", "path": "reference/api/pandas.tseries.offsets.minute.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.is_on_offset", "path": "reference/api/pandas.tseries.offsets.minute.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.minute.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.minute.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.is_year_end", "path": "reference/api/pandas.tseries.offsets.minute.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.is_year_start", "path": "reference/api/pandas.tseries.offsets.minute.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.isAnchored", "path": "reference/api/pandas.tseries.offsets.minute.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.kwds", "path": "reference/api/pandas.tseries.offsets.minute.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.n", "path": "reference/api/pandas.tseries.offsets.minute.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.name", "path": "reference/api/pandas.tseries.offsets.minute.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.nanos", "path": "reference/api/pandas.tseries.offsets.minute.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.normalize", "path": "reference/api/pandas.tseries.offsets.minute.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.onOffset", "path": "reference/api/pandas.tseries.offsets.minute.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Minute.rollback", "path": "reference/api/pandas.tseries.offsets.minute.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Minute.rollforward", "path": "reference/api/pandas.tseries.offsets.minute.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Minute.rule_code", "path": "reference/api/pandas.tseries.offsets.minute.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin", "path": "reference/api/pandas.tseries.offsets.monthbegin", "type": "Data offsets", "text": "\nDateOffset of one month at beginning.\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.__call__", "path": "reference/api/pandas.tseries.offsets.monthbegin.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.apply", "path": "reference/api/pandas.tseries.offsets.monthbegin.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.apply_index", "path": "reference/api/pandas.tseries.offsets.monthbegin.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.base", "path": "reference/api/pandas.tseries.offsets.monthbegin.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.copy", "path": "reference/api/pandas.tseries.offsets.monthbegin.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.freqstr", "path": "reference/api/pandas.tseries.offsets.monthbegin.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.is_anchored", "path": "reference/api/pandas.tseries.offsets.monthbegin.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.is_month_end", "path": "reference/api/pandas.tseries.offsets.monthbegin.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.is_month_start", "path": "reference/api/pandas.tseries.offsets.monthbegin.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.is_on_offset", "path": "reference/api/pandas.tseries.offsets.monthbegin.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.monthbegin.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.monthbegin.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.is_year_end", "path": "reference/api/pandas.tseries.offsets.monthbegin.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.is_year_start", "path": "reference/api/pandas.tseries.offsets.monthbegin.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.isAnchored", "path": "reference/api/pandas.tseries.offsets.monthbegin.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.kwds", "path": "reference/api/pandas.tseries.offsets.monthbegin.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.n", "path": "reference/api/pandas.tseries.offsets.monthbegin.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.name", "path": "reference/api/pandas.tseries.offsets.monthbegin.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.nanos", "path": "reference/api/pandas.tseries.offsets.monthbegin.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.normalize", "path": "reference/api/pandas.tseries.offsets.monthbegin.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.onOffset", "path": "reference/api/pandas.tseries.offsets.monthbegin.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.rollback", "path": "reference/api/pandas.tseries.offsets.monthbegin.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.rollforward", "path": "reference/api/pandas.tseries.offsets.monthbegin.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.MonthBegin.rule_code", "path": "reference/api/pandas.tseries.offsets.monthbegin.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd", "path": "reference/api/pandas.tseries.offsets.monthend", "type": "Data offsets", "text": "\nDateOffset of one month end.\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.__call__", "path": "reference/api/pandas.tseries.offsets.monthend.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.apply", "path": "reference/api/pandas.tseries.offsets.monthend.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.apply_index", "path": "reference/api/pandas.tseries.offsets.monthend.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.base", "path": "reference/api/pandas.tseries.offsets.monthend.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.copy", "path": "reference/api/pandas.tseries.offsets.monthend.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.freqstr", "path": "reference/api/pandas.tseries.offsets.monthend.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.is_anchored", "path": "reference/api/pandas.tseries.offsets.monthend.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.is_month_end", "path": "reference/api/pandas.tseries.offsets.monthend.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.is_month_start", "path": "reference/api/pandas.tseries.offsets.monthend.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.is_on_offset", "path": "reference/api/pandas.tseries.offsets.monthend.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.monthend.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.monthend.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.is_year_end", "path": "reference/api/pandas.tseries.offsets.monthend.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.is_year_start", "path": "reference/api/pandas.tseries.offsets.monthend.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.isAnchored", "path": "reference/api/pandas.tseries.offsets.monthend.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.kwds", "path": "reference/api/pandas.tseries.offsets.monthend.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.n", "path": "reference/api/pandas.tseries.offsets.monthend.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.name", "path": "reference/api/pandas.tseries.offsets.monthend.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.nanos", "path": "reference/api/pandas.tseries.offsets.monthend.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.normalize", "path": "reference/api/pandas.tseries.offsets.monthend.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.onOffset", "path": "reference/api/pandas.tseries.offsets.monthend.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.rollback", "path": "reference/api/pandas.tseries.offsets.monthend.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.rollforward", "path": "reference/api/pandas.tseries.offsets.monthend.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.MonthEnd.rule_code", "path": "reference/api/pandas.tseries.offsets.monthend.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano", "path": "reference/api/pandas.tseries.offsets.nano", "type": "Data offsets", "text": "\nAttributes\n\n"}, {"name": "pandas.tseries.offsets.Nano.__call__", "path": "reference/api/pandas.tseries.offsets.nano.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.Nano.apply", "path": "reference/api/pandas.tseries.offsets.nano.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.apply_index", "path": "reference/api/pandas.tseries.offsets.nano.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.base", "path": "reference/api/pandas.tseries.offsets.nano.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.Nano.copy", "path": "reference/api/pandas.tseries.offsets.nano.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.delta", "path": "reference/api/pandas.tseries.offsets.nano.delta", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.freqstr", "path": "reference/api/pandas.tseries.offsets.nano.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.is_anchored", "path": "reference/api/pandas.tseries.offsets.nano.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.is_month_end", "path": "reference/api/pandas.tseries.offsets.nano.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.is_month_start", "path": "reference/api/pandas.tseries.offsets.nano.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.is_on_offset", "path": "reference/api/pandas.tseries.offsets.nano.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.nano.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.nano.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.is_year_end", "path": "reference/api/pandas.tseries.offsets.nano.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.is_year_start", "path": "reference/api/pandas.tseries.offsets.nano.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.isAnchored", "path": "reference/api/pandas.tseries.offsets.nano.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.kwds", "path": "reference/api/pandas.tseries.offsets.nano.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.n", "path": "reference/api/pandas.tseries.offsets.nano.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.name", "path": "reference/api/pandas.tseries.offsets.nano.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.nanos", "path": "reference/api/pandas.tseries.offsets.nano.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.normalize", "path": "reference/api/pandas.tseries.offsets.nano.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.onOffset", "path": "reference/api/pandas.tseries.offsets.nano.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Nano.rollback", "path": "reference/api/pandas.tseries.offsets.nano.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Nano.rollforward", "path": "reference/api/pandas.tseries.offsets.nano.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Nano.rule_code", "path": "reference/api/pandas.tseries.offsets.nano.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin", "path": "reference/api/pandas.tseries.offsets.quarterbegin", "type": "Data offsets", "text": "\nDateOffset increments between Quarter start dates.\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.__call__", "path": "reference/api/pandas.tseries.offsets.quarterbegin.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.apply", "path": "reference/api/pandas.tseries.offsets.quarterbegin.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.apply_index", "path": "reference/api/pandas.tseries.offsets.quarterbegin.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.base", "path": "reference/api/pandas.tseries.offsets.quarterbegin.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.copy", "path": "reference/api/pandas.tseries.offsets.quarterbegin.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.freqstr", "path": "reference/api/pandas.tseries.offsets.quarterbegin.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.is_anchored", "path": "reference/api/pandas.tseries.offsets.quarterbegin.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.is_month_end", "path": "reference/api/pandas.tseries.offsets.quarterbegin.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.is_month_start", "path": "reference/api/pandas.tseries.offsets.quarterbegin.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.is_on_offset", "path": "reference/api/pandas.tseries.offsets.quarterbegin.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.quarterbegin.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.quarterbegin.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.is_year_end", "path": "reference/api/pandas.tseries.offsets.quarterbegin.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.is_year_start", "path": "reference/api/pandas.tseries.offsets.quarterbegin.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.isAnchored", "path": "reference/api/pandas.tseries.offsets.quarterbegin.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.kwds", "path": "reference/api/pandas.tseries.offsets.quarterbegin.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.n", "path": "reference/api/pandas.tseries.offsets.quarterbegin.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.name", "path": "reference/api/pandas.tseries.offsets.quarterbegin.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.nanos", "path": "reference/api/pandas.tseries.offsets.quarterbegin.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.normalize", "path": "reference/api/pandas.tseries.offsets.quarterbegin.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.onOffset", "path": "reference/api/pandas.tseries.offsets.quarterbegin.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.rollback", "path": "reference/api/pandas.tseries.offsets.quarterbegin.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.rollforward", "path": "reference/api/pandas.tseries.offsets.quarterbegin.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.rule_code", "path": "reference/api/pandas.tseries.offsets.quarterbegin.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterBegin.startingMonth", "path": "reference/api/pandas.tseries.offsets.quarterbegin.startingmonth", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd", "path": "reference/api/pandas.tseries.offsets.quarterend", "type": "Data offsets", "text": "\nDateOffset increments between Quarter end dates.\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.__call__", "path": "reference/api/pandas.tseries.offsets.quarterend.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.apply", "path": "reference/api/pandas.tseries.offsets.quarterend.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.apply_index", "path": "reference/api/pandas.tseries.offsets.quarterend.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.base", "path": "reference/api/pandas.tseries.offsets.quarterend.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.copy", "path": "reference/api/pandas.tseries.offsets.quarterend.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.freqstr", "path": "reference/api/pandas.tseries.offsets.quarterend.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.is_anchored", "path": "reference/api/pandas.tseries.offsets.quarterend.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.is_month_end", "path": "reference/api/pandas.tseries.offsets.quarterend.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.is_month_start", "path": "reference/api/pandas.tseries.offsets.quarterend.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.is_on_offset", "path": "reference/api/pandas.tseries.offsets.quarterend.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.quarterend.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.quarterend.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.is_year_end", "path": "reference/api/pandas.tseries.offsets.quarterend.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.is_year_start", "path": "reference/api/pandas.tseries.offsets.quarterend.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.isAnchored", "path": "reference/api/pandas.tseries.offsets.quarterend.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.kwds", "path": "reference/api/pandas.tseries.offsets.quarterend.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.n", "path": "reference/api/pandas.tseries.offsets.quarterend.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.name", "path": "reference/api/pandas.tseries.offsets.quarterend.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.nanos", "path": "reference/api/pandas.tseries.offsets.quarterend.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.normalize", "path": "reference/api/pandas.tseries.offsets.quarterend.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.onOffset", "path": "reference/api/pandas.tseries.offsets.quarterend.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.rollback", "path": "reference/api/pandas.tseries.offsets.quarterend.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.rollforward", "path": "reference/api/pandas.tseries.offsets.quarterend.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.rule_code", "path": "reference/api/pandas.tseries.offsets.quarterend.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.QuarterEnd.startingMonth", "path": "reference/api/pandas.tseries.offsets.quarterend.startingmonth", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second", "path": "reference/api/pandas.tseries.offsets.second", "type": "Data offsets", "text": "\nAttributes\n\n"}, {"name": "pandas.tseries.offsets.Second.__call__", "path": "reference/api/pandas.tseries.offsets.second.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.Second.apply", "path": "reference/api/pandas.tseries.offsets.second.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.apply_index", "path": "reference/api/pandas.tseries.offsets.second.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.base", "path": "reference/api/pandas.tseries.offsets.second.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.Second.copy", "path": "reference/api/pandas.tseries.offsets.second.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.delta", "path": "reference/api/pandas.tseries.offsets.second.delta", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.freqstr", "path": "reference/api/pandas.tseries.offsets.second.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.is_anchored", "path": "reference/api/pandas.tseries.offsets.second.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.is_month_end", "path": "reference/api/pandas.tseries.offsets.second.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.is_month_start", "path": "reference/api/pandas.tseries.offsets.second.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.is_on_offset", "path": "reference/api/pandas.tseries.offsets.second.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.second.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.second.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.is_year_end", "path": "reference/api/pandas.tseries.offsets.second.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.is_year_start", "path": "reference/api/pandas.tseries.offsets.second.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.isAnchored", "path": "reference/api/pandas.tseries.offsets.second.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.kwds", "path": "reference/api/pandas.tseries.offsets.second.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.n", "path": "reference/api/pandas.tseries.offsets.second.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.name", "path": "reference/api/pandas.tseries.offsets.second.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.nanos", "path": "reference/api/pandas.tseries.offsets.second.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.normalize", "path": "reference/api/pandas.tseries.offsets.second.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.onOffset", "path": "reference/api/pandas.tseries.offsets.second.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Second.rollback", "path": "reference/api/pandas.tseries.offsets.second.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Second.rollforward", "path": "reference/api/pandas.tseries.offsets.second.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Second.rule_code", "path": "reference/api/pandas.tseries.offsets.second.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin", "path": "reference/api/pandas.tseries.offsets.semimonthbegin", "type": "Data offsets", "text": "\nTwo DateOffset\u2019s per month repeating on the first day of the month and\nday_of_month.\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.__call__", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.apply", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.apply_index", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.base", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.copy", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.day_of_month", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.day_of_month", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.freqstr", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.is_anchored", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.is_month_end", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.is_month_start", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.is_on_offset", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.is_year_end", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.is_year_start", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.isAnchored", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.kwds", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.n", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.name", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.nanos", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.normalize", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.onOffset", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.rollback", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.rollforward", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthBegin.rule_code", "path": "reference/api/pandas.tseries.offsets.semimonthbegin.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd", "path": "reference/api/pandas.tseries.offsets.semimonthend", "type": "Data offsets", "text": "\nTwo DateOffset\u2019s per month repeating on the last day of the month and\nday_of_month.\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.__call__", "path": "reference/api/pandas.tseries.offsets.semimonthend.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.apply", "path": "reference/api/pandas.tseries.offsets.semimonthend.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.apply_index", "path": "reference/api/pandas.tseries.offsets.semimonthend.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.base", "path": "reference/api/pandas.tseries.offsets.semimonthend.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.copy", "path": "reference/api/pandas.tseries.offsets.semimonthend.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.day_of_month", "path": "reference/api/pandas.tseries.offsets.semimonthend.day_of_month", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.freqstr", "path": "reference/api/pandas.tseries.offsets.semimonthend.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.is_anchored", "path": "reference/api/pandas.tseries.offsets.semimonthend.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.is_month_end", "path": "reference/api/pandas.tseries.offsets.semimonthend.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.is_month_start", "path": "reference/api/pandas.tseries.offsets.semimonthend.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.is_on_offset", "path": "reference/api/pandas.tseries.offsets.semimonthend.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.semimonthend.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.semimonthend.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.is_year_end", "path": "reference/api/pandas.tseries.offsets.semimonthend.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.is_year_start", "path": "reference/api/pandas.tseries.offsets.semimonthend.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.isAnchored", "path": "reference/api/pandas.tseries.offsets.semimonthend.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.kwds", "path": "reference/api/pandas.tseries.offsets.semimonthend.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.n", "path": "reference/api/pandas.tseries.offsets.semimonthend.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.name", "path": "reference/api/pandas.tseries.offsets.semimonthend.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.nanos", "path": "reference/api/pandas.tseries.offsets.semimonthend.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.normalize", "path": "reference/api/pandas.tseries.offsets.semimonthend.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.onOffset", "path": "reference/api/pandas.tseries.offsets.semimonthend.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.rollback", "path": "reference/api/pandas.tseries.offsets.semimonthend.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.rollforward", "path": "reference/api/pandas.tseries.offsets.semimonthend.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.SemiMonthEnd.rule_code", "path": "reference/api/pandas.tseries.offsets.semimonthend.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick", "path": "reference/api/pandas.tseries.offsets.tick", "type": "Data offsets", "text": "\nAttributes\n\n"}, {"name": "pandas.tseries.offsets.Tick.__call__", "path": "reference/api/pandas.tseries.offsets.tick.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.Tick.apply", "path": "reference/api/pandas.tseries.offsets.tick.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.apply_index", "path": "reference/api/pandas.tseries.offsets.tick.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.base", "path": "reference/api/pandas.tseries.offsets.tick.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.Tick.copy", "path": "reference/api/pandas.tseries.offsets.tick.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.delta", "path": "reference/api/pandas.tseries.offsets.tick.delta", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.freqstr", "path": "reference/api/pandas.tseries.offsets.tick.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.is_anchored", "path": "reference/api/pandas.tseries.offsets.tick.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.is_month_end", "path": "reference/api/pandas.tseries.offsets.tick.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.is_month_start", "path": "reference/api/pandas.tseries.offsets.tick.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.is_on_offset", "path": "reference/api/pandas.tseries.offsets.tick.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.tick.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.tick.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.is_year_end", "path": "reference/api/pandas.tseries.offsets.tick.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.is_year_start", "path": "reference/api/pandas.tseries.offsets.tick.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.isAnchored", "path": "reference/api/pandas.tseries.offsets.tick.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.kwds", "path": "reference/api/pandas.tseries.offsets.tick.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.n", "path": "reference/api/pandas.tseries.offsets.tick.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.name", "path": "reference/api/pandas.tseries.offsets.tick.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.nanos", "path": "reference/api/pandas.tseries.offsets.tick.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.normalize", "path": "reference/api/pandas.tseries.offsets.tick.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.onOffset", "path": "reference/api/pandas.tseries.offsets.tick.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Tick.rollback", "path": "reference/api/pandas.tseries.offsets.tick.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Tick.rollforward", "path": "reference/api/pandas.tseries.offsets.tick.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Tick.rule_code", "path": "reference/api/pandas.tseries.offsets.tick.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week", "path": "reference/api/pandas.tseries.offsets.week", "type": "Data offsets", "text": "\nWeekly offset.\n\n"}, {"name": "pandas.tseries.offsets.Week.__call__", "path": "reference/api/pandas.tseries.offsets.week.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.Week.apply", "path": "reference/api/pandas.tseries.offsets.week.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.apply_index", "path": "reference/api/pandas.tseries.offsets.week.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.base", "path": "reference/api/pandas.tseries.offsets.week.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.Week.copy", "path": "reference/api/pandas.tseries.offsets.week.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.freqstr", "path": "reference/api/pandas.tseries.offsets.week.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.is_anchored", "path": "reference/api/pandas.tseries.offsets.week.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.is_month_end", "path": "reference/api/pandas.tseries.offsets.week.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.is_month_start", "path": "reference/api/pandas.tseries.offsets.week.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.is_on_offset", "path": "reference/api/pandas.tseries.offsets.week.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.week.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.week.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.is_year_end", "path": "reference/api/pandas.tseries.offsets.week.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.is_year_start", "path": "reference/api/pandas.tseries.offsets.week.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.isAnchored", "path": "reference/api/pandas.tseries.offsets.week.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.kwds", "path": "reference/api/pandas.tseries.offsets.week.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.n", "path": "reference/api/pandas.tseries.offsets.week.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.name", "path": "reference/api/pandas.tseries.offsets.week.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.nanos", "path": "reference/api/pandas.tseries.offsets.week.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.normalize", "path": "reference/api/pandas.tseries.offsets.week.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.onOffset", "path": "reference/api/pandas.tseries.offsets.week.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.rollback", "path": "reference/api/pandas.tseries.offsets.week.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Week.rollforward", "path": "reference/api/pandas.tseries.offsets.week.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.Week.rule_code", "path": "reference/api/pandas.tseries.offsets.week.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.Week.weekday", "path": "reference/api/pandas.tseries.offsets.week.weekday", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth", "path": "reference/api/pandas.tseries.offsets.weekofmonth", "type": "Data offsets", "text": "\nDescribes monthly dates like \u201cthe Tuesday of the 2nd week of each month\u201d.\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.__call__", "path": "reference/api/pandas.tseries.offsets.weekofmonth.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.apply", "path": "reference/api/pandas.tseries.offsets.weekofmonth.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.apply_index", "path": "reference/api/pandas.tseries.offsets.weekofmonth.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.base", "path": "reference/api/pandas.tseries.offsets.weekofmonth.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.copy", "path": "reference/api/pandas.tseries.offsets.weekofmonth.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.freqstr", "path": "reference/api/pandas.tseries.offsets.weekofmonth.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.is_anchored", "path": "reference/api/pandas.tseries.offsets.weekofmonth.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.is_month_end", "path": "reference/api/pandas.tseries.offsets.weekofmonth.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.is_month_start", "path": "reference/api/pandas.tseries.offsets.weekofmonth.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.is_on_offset", "path": "reference/api/pandas.tseries.offsets.weekofmonth.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.weekofmonth.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.weekofmonth.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.is_year_end", "path": "reference/api/pandas.tseries.offsets.weekofmonth.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.is_year_start", "path": "reference/api/pandas.tseries.offsets.weekofmonth.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.isAnchored", "path": "reference/api/pandas.tseries.offsets.weekofmonth.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.kwds", "path": "reference/api/pandas.tseries.offsets.weekofmonth.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.n", "path": "reference/api/pandas.tseries.offsets.weekofmonth.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.name", "path": "reference/api/pandas.tseries.offsets.weekofmonth.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.nanos", "path": "reference/api/pandas.tseries.offsets.weekofmonth.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.normalize", "path": "reference/api/pandas.tseries.offsets.weekofmonth.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.onOffset", "path": "reference/api/pandas.tseries.offsets.weekofmonth.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.rollback", "path": "reference/api/pandas.tseries.offsets.weekofmonth.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.rollforward", "path": "reference/api/pandas.tseries.offsets.weekofmonth.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.rule_code", "path": "reference/api/pandas.tseries.offsets.weekofmonth.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.week", "path": "reference/api/pandas.tseries.offsets.weekofmonth.week", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.WeekOfMonth.weekday", "path": "reference/api/pandas.tseries.offsets.weekofmonth.weekday", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin", "path": "reference/api/pandas.tseries.offsets.yearbegin", "type": "Data offsets", "text": "\nDateOffset increments between calendar year begin dates.\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.__call__", "path": "reference/api/pandas.tseries.offsets.yearbegin.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.apply", "path": "reference/api/pandas.tseries.offsets.yearbegin.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.apply_index", "path": "reference/api/pandas.tseries.offsets.yearbegin.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.base", "path": "reference/api/pandas.tseries.offsets.yearbegin.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.copy", "path": "reference/api/pandas.tseries.offsets.yearbegin.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.freqstr", "path": "reference/api/pandas.tseries.offsets.yearbegin.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.is_anchored", "path": "reference/api/pandas.tseries.offsets.yearbegin.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.is_month_end", "path": "reference/api/pandas.tseries.offsets.yearbegin.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.is_month_start", "path": "reference/api/pandas.tseries.offsets.yearbegin.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.is_on_offset", "path": "reference/api/pandas.tseries.offsets.yearbegin.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.yearbegin.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.yearbegin.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.is_year_end", "path": "reference/api/pandas.tseries.offsets.yearbegin.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.is_year_start", "path": "reference/api/pandas.tseries.offsets.yearbegin.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.isAnchored", "path": "reference/api/pandas.tseries.offsets.yearbegin.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.kwds", "path": "reference/api/pandas.tseries.offsets.yearbegin.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.month", "path": "reference/api/pandas.tseries.offsets.yearbegin.month", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.n", "path": "reference/api/pandas.tseries.offsets.yearbegin.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.name", "path": "reference/api/pandas.tseries.offsets.yearbegin.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.nanos", "path": "reference/api/pandas.tseries.offsets.yearbegin.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.normalize", "path": "reference/api/pandas.tseries.offsets.yearbegin.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.onOffset", "path": "reference/api/pandas.tseries.offsets.yearbegin.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.rollback", "path": "reference/api/pandas.tseries.offsets.yearbegin.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.rollforward", "path": "reference/api/pandas.tseries.offsets.yearbegin.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.YearBegin.rule_code", "path": "reference/api/pandas.tseries.offsets.yearbegin.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd", "path": "reference/api/pandas.tseries.offsets.yearend", "type": "Data offsets", "text": "\nDateOffset increments between calendar year ends.\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.__call__", "path": "reference/api/pandas.tseries.offsets.yearend.__call__", "type": "Data offsets", "text": "\nCall self as a function.\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.apply", "path": "reference/api/pandas.tseries.offsets.yearend.apply", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.apply_index", "path": "reference/api/pandas.tseries.offsets.yearend.apply_index", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.base", "path": "reference/api/pandas.tseries.offsets.yearend.base", "type": "Data offsets", "text": "\nReturns a copy of the calling offset object with n=1 and all other attributes\nequal.\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.copy", "path": "reference/api/pandas.tseries.offsets.yearend.copy", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.freqstr", "path": "reference/api/pandas.tseries.offsets.yearend.freqstr", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.is_anchored", "path": "reference/api/pandas.tseries.offsets.yearend.is_anchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.is_month_end", "path": "reference/api/pandas.tseries.offsets.yearend.is_month_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.is_month_start", "path": "reference/api/pandas.tseries.offsets.yearend.is_month_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.is_on_offset", "path": "reference/api/pandas.tseries.offsets.yearend.is_on_offset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.is_quarter_end", "path": "reference/api/pandas.tseries.offsets.yearend.is_quarter_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.is_quarter_start", "path": "reference/api/pandas.tseries.offsets.yearend.is_quarter_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.is_year_end", "path": "reference/api/pandas.tseries.offsets.yearend.is_year_end", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.is_year_start", "path": "reference/api/pandas.tseries.offsets.yearend.is_year_start", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.isAnchored", "path": "reference/api/pandas.tseries.offsets.yearend.isanchored", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.kwds", "path": "reference/api/pandas.tseries.offsets.yearend.kwds", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.month", "path": "reference/api/pandas.tseries.offsets.yearend.month", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.n", "path": "reference/api/pandas.tseries.offsets.yearend.n", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.name", "path": "reference/api/pandas.tseries.offsets.yearend.name", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.nanos", "path": "reference/api/pandas.tseries.offsets.yearend.nanos", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.normalize", "path": "reference/api/pandas.tseries.offsets.yearend.normalize", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.onOffset", "path": "reference/api/pandas.tseries.offsets.yearend.onoffset", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.rollback", "path": "reference/api/pandas.tseries.offsets.yearend.rollback", "type": "Data offsets", "text": "\nRoll provided date backward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.rollforward", "path": "reference/api/pandas.tseries.offsets.yearend.rollforward", "type": "Data offsets", "text": "\nRoll provided date forward to next offset only if not on offset.\n\n"}, {"name": "pandas.tseries.offsets.YearEnd.rule_code", "path": "reference/api/pandas.tseries.offsets.yearend.rule_code", "type": "Data offsets", "text": "\n\n"}, {"name": "pandas.UInt16Dtype", "path": "reference/api/pandas.uint16dtype", "type": "Pandas arrays", "text": "\nAn ExtensionDtype for uint16 integer data.\n\n"}, {"name": "pandas.UInt32Dtype", "path": "reference/api/pandas.uint32dtype", "type": "Pandas arrays", "text": "\nAn ExtensionDtype for uint32 integer data.\n\n"}, {"name": "pandas.UInt64Dtype", "path": "reference/api/pandas.uint64dtype", "type": "Pandas arrays", "text": "\nAn ExtensionDtype for uint64 integer data.\n\n"}, {"name": "pandas.UInt64Index", "path": "reference/api/pandas.uint64index", "type": "Index Objects", "text": "\nImmutable sequence used for indexing and alignment. The basic object storing\naxis labels for all pandas objects. UInt64Index is a special case of Index\nwith purely unsigned integer labels. .\n\n"}, {"name": "pandas.UInt8Dtype", "path": "reference/api/pandas.uint8dtype", "type": "Pandas arrays", "text": "\nAn ExtensionDtype for uint8 integer data.\n\n"}, {"name": "pandas.unique", "path": "reference/api/pandas.unique", "type": "General functions", "text": "\nReturn unique values based on a hash table.\n\n"}, {"name": "pandas.util.hash_array", "path": "reference/api/pandas.util.hash_array", "type": "Pandas arrays", "text": "\nGiven a 1d array, return an array of deterministic integers.\n\n"}, {"name": "pandas.util.hash_pandas_object", "path": "reference/api/pandas.util.hash_pandas_object", "type": "General functions", "text": "\nReturn a data hash of the Index/Series/DataFrame.\n\n"}, {"name": "pandas.wide_to_long", "path": "reference/api/pandas.wide_to_long", "type": "General functions", "text": "\nUnpivot a DataFrame from wide to long format.\n\n"}, {"name": "Plotting", "path": "reference/plotting", "type": "Plotting", "text": "\nThe following functions are contained in the `pandas.plotting` module.\n\n"}, {"name": "Resampling", "path": "reference/resampling", "type": "General functions", "text": "\nResampler objects are returned by resample calls:\n`pandas.DataFrame.resample()`, `pandas.Series.resample()`.\n\n"}, {"name": "Reshaping and pivot tables", "path": "user_guide/reshaping", "type": "Manual", "text": "\nData is often stored in so-called \u201cstacked\u201d or \u201crecord\u201d format:\n\n"}, {"name": "Scaling to large datasets", "path": "user_guide/scale", "type": "Manual", "text": "\npandas provides data structures for in-memory analytics, which makes using\npandas to analyze datasets that are larger than memory datasets somewhat\ntricky. Even datasets that are a sizable fraction of memory become unwieldy,\nas some pandas operations need to make intermediate copies.\n\n"}, {"name": "Series", "path": "reference/series", "type": "General functions", "text": "\n`Series`([data, index, dtype, name, copy, ...])\n\n"}, {"name": "Sparse data structures", "path": "user_guide/sparse", "type": "Manual", "text": "\npandas provides data structures for efficiently storing sparse data. These are\nnot necessarily sparse in the typical \u201cmostly 0\u201d. Rather, you can view these\nobjects as being \u201ccompressed\u201d where any data matching a specific value (`NaN`\n/ missing value, though any value can be chosen, including 0) is omitted. The\ncompressed values are not actually stored in the array.\n\n"}, {"name": "Style", "path": "reference/style", "type": "Style", "text": "\n`Styler` objects are returned by `pandas.DataFrame.style`.\n\n"}, {"name": "Table Visualization", "path": "user_guide/style", "type": "Manual", "text": "\nThis section demonstrates visualization of tabular data using the Styler\nclass. For information on visualization with charting please see Chart\nVisualization. This document is written as a Jupyter Notebook, and can be\nviewed or downloaded here.\n\n"}, {"name": "Time deltas", "path": "user_guide/timedeltas", "type": "Manual", "text": "\nTimedeltas are differences in times, expressed in difference units, e.g. days,\nhours, minutes, seconds. They can be both positive and negative.\n\n"}, {"name": "Time series / date functionality", "path": "user_guide/timeseries", "type": "Manual", "text": "\npandas contains extensive capabilities and features for working with time\nseries data for all domains. Using the NumPy `datetime64` and `timedelta64`\ndtypes, pandas has consolidated a large number of features from other Python\nlibraries like `scikits.timeseries` as well as created a tremendous amount of\nnew functionality for manipulating time series data.\n\n"}, {"name": "User Guide", "path": "user_guide/index", "type": "Manual", "text": "\nThe User Guide covers all of pandas by topic area. Each of the subsections\nintroduces a topic (such as \u201cworking with missing data\u201d), and discusses how\npandas approaches the problem, with many examples throughout.\n\n"}, {"name": "Window", "path": "reference/window", "type": "Window", "text": "\nRolling objects are returned by `.rolling` calls:\n`pandas.DataFrame.rolling()`, `pandas.Series.rolling()`, etc. Expanding\nobjects are returned by `.expanding` calls: `pandas.DataFrame.expanding()`,\n`pandas.Series.expanding()`, etc. ExponentialMovingWindow objects are returned\nby `.ewm` calls: `pandas.DataFrame.ewm()`, `pandas.Series.ewm()`, etc.\n\n"}, {"name": "Windowing Operations", "path": "user_guide/window", "type": "Manual", "text": "\npandas contains a compact set of APIs for performing windowing operations - an\noperation that performs an aggregation over a sliding partition of values. The\nAPI functions similarly to the `groupby` API in that `Series` and `DataFrame`\ncall the windowing method with necessary parameters and then subsequently call\nthe aggregation function.\n\n"}, {"name": "Working with missing data", "path": "user_guide/missing_data", "type": "Manual", "text": "\nIn this section, we will discuss missing (also referred to as NA) values in\npandas.\n\n"}, {"name": "Working with text data", "path": "user_guide/text", "type": "Manual", "text": "\nNew in version 1.0.0.\n\n"}]